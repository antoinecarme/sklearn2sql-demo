-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.


-- Code For temporary table ##TMP_20180329233313_HOW2XX_ADA_Sum_B0 part 1/2. Create 


CREATE TABLE ##TMP_20180329233313_HOW2XX_ADA_Sum_B0 (
	[KEY] BIGINT NULL, 
	[Score_0] FLOAT NULL, 
	[Proba_0] FLOAT NULL, 
	[Score_1] FLOAT NULL, 
	[Proba_1] FLOAT NULL, 
	[Score_2] FLOAT NULL, 
	[Proba_2] FLOAT NULL, 
	[Score_3] FLOAT NULL, 
	[Proba_3] FLOAT NULL
)


-- Code For temporary table ##TMP_20180329233313_HOW2XX_ADA_Sum_B0 part 2/2. Populate

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_249] <= 2.8677220344543457) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 470 AS count, 1 AS depth, 0 AS parent_id, 0.18936170212765957 AS [Proba_0], -1.6640963249719645 AS [LogProba_0], 0.31702127659574475 AS [Proba_1], -1.148786388758645 AS [LogProba_1], 0.2765957446808511 AS [Proba_2], -1.285198244248522 AS [LogProba_2], 0.2170212765957447 AS [Proba_3], -1.5277598814198332 AS [LogProba_3], 1 AS [Decision], 0.31702127659574475 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 330 AS count, 1 AS depth, 0 AS parent_id, 0.3090909090909091 AS [Proba_0], -1.1741198411762548 AS [LogProba_0], 0.15757575757575754 AS [Proba_1], -1.8478489358790988 AS [LogProba_1], 0.21818181818181814 AS [Proba_2], -1.5224265354444708 AS [LogProba_2], 0.3151515151515151 AS [Proba_3], -1.1547017553191534 AS [LogProba_3], 3 AS [Decision], 0.3151515151515151 AS [DecisionProba]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_0] AS [Proba_0], [DT_node_data].[LogProba_0] AS [LogProba_0], [DT_node_data].[Proba_1] AS [Proba_1], [DT_node_data].[LogProba_1] AS [LogProba_1], [DT_node_data].[Proba_2] AS [Proba_2], [DT_node_data].[LogProba_2] AS [LogProba_2], [DT_node_data].[Proba_3] AS [Proba_3], [DT_node_data].[LogProba_3] AS [LogProba_3], [DT_node_data].[Decision] AS [Decision], [DT_node_data].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[AdaBoost_Estim_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_142] <= 2.9509048461914062) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 584 AS count, 1 AS depth, 0 AS parent_id, 0.27664223789327524 AS [Proba_0], -1.2850301675292868 AS [LogProba_0], 0.2695167624948583 AS [Proba_1], -1.3111246920706403 AS [LogProba_1], 0.26243620973628207 AS [Proba_2], -1.3377472370107508 AS [LogProba_2], 0.19140478987558435 AS [Proba_3], -1.6533647748031426 AS [LogProba_3], 0 AS [Decision], 0.27664223789327524 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 216 AS count, 1 AS depth, 0 AS parent_id, 0.17692383840274856 AS [Proba_0], -1.7320359305201596 AS [LogProba_0], 0.19646808216176734 AS [Proba_1], -1.627255292613017 AS [LogProba_1], 0.2158891090160548 AS [Proba_2], -1.5329903873096846 AS [LogProba_2], 0.4107189704194292 AS [Proba_3], -0.88984606863244 AS [LogProba_3], 3 AS [Decision], 0.4107189704194292 AS [DecisionProba]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Proba_0] AS [Proba_0], [DT_node_data_1].[LogProba_0] AS [LogProba_0], [DT_node_data_1].[Proba_1] AS [Proba_1], [DT_node_data_1].[LogProba_1] AS [LogProba_1], [DT_node_data_1].[Proba_2] AS [Proba_2], [DT_node_data_1].[LogProba_2] AS [LogProba_2], [DT_node_data_1].[Proba_3] AS [Proba_3], [DT_node_data_1].[LogProba_3] AS [LogProba_3], [DT_node_data_1].[Decision] AS [Decision], [DT_node_data_1].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[AdaBoost_Estim_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_338] <= -1.7936967611312866) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 304 AS count, 1 AS depth, 0 AS parent_id, 0.35922703172509357 AS [Proba_0], -1.023800690026243 AS [LogProba_0], 0.27158684393467103 AS [Proba_1], -1.3034733235920488 AS [LogProba_1], 0.2074363091113382 AS [Proba_2], -1.5729309304700918 AS [LogProba_2], 0.1617498152288973 AS [Proba_3], -1.8217044879269895 AS [LogProba_3], 0 AS [Decision], 0.35922703172509357 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 496 AS count, 1 AS depth, 0 AS parent_id, 0.18457643617280872 AS [Proba_0], -1.6896916130957114 AS [LogProba_0], 0.2370701580031765 AS [Proba_1], -1.439399156324 AS [LogProba_1], 0.275494314947455 AS [Proba_2], -1.289188286001518 AS [LogProba_2], 0.30285909087655966 AS [Proba_3], -1.1944876282524945 AS [LogProba_3], 3 AS [Decision], 0.30285909087655966 AS [DecisionProba]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Proba_0] AS [Proba_0], [DT_node_data_2].[LogProba_0] AS [LogProba_0], [DT_node_data_2].[Proba_1] AS [Proba_1], [DT_node_data_2].[LogProba_1] AS [LogProba_1], [DT_node_data_2].[Proba_2] AS [Proba_2], [DT_node_data_2].[LogProba_2] AS [LogProba_2], [DT_node_data_2].[Proba_3] AS [Proba_3], [DT_node_data_2].[LogProba_3] AS [LogProba_3], [DT_node_data_2].[Decision] AS [Decision], [DT_node_data_2].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[AdaBoost_Estim_2] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_106] <= -5.364351749420166) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 144 AS count, 1 AS depth, 0 AS parent_id, 0.07844749481224156 AS [Proba_0], -2.5453257338726822 AS [LogProba_0], 0.32688632707233706 AS [Proba_1], -1.1181427921519813 AS [LogProba_1], 0.22513124569114548 AS [Proba_2], -1.4910717326564364 AS [LogProba_2], 0.36953493242427593 AS [Proba_3], -0.9955100033486051 AS [LogProba_3], 3 AS [Decision], 0.36953493242427593 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 656 AS count, 1 AS depth, 0 AS parent_id, 0.2898043688637781 AS [Proba_0], -1.2385491737648195 AS [LogProba_0], 0.23216049529548455 AS [Proba_1], -1.4603263564255313 AS [LogProba_1], 0.2557701580551616 AS [Proba_2], -1.363476057881464 AS [LogProba_2], 0.22226497778557563 AS [Proba_3], -1.5038850152476968 AS [LogProba_3], 0 AS [Decision], 0.2898043688637781 AS [DecisionProba]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Proba_0] AS [Proba_0], [DT_node_data_3].[LogProba_0] AS [LogProba_0], [DT_node_data_3].[Proba_1] AS [Proba_1], [DT_node_data_3].[LogProba_1] AS [LogProba_1], [DT_node_data_3].[Proba_2] AS [Proba_2], [DT_node_data_3].[LogProba_2] AS [LogProba_2], [DT_node_data_3].[Proba_3] AS [Proba_3], [DT_node_data_3].[LogProba_3] AS [LogProba_3], [DT_node_data_3].[Decision] AS [Decision], [DT_node_data_3].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[AdaBoost_Estim_3] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_456] <= 1.2209151983261108) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 472 AS count, 1 AS depth, 0 AS parent_id, 0.29288522778389764 AS [Proba_0], -1.227974460753189 AS [LogProba_0], 0.18321415930987997 AS [Proba_1], -1.6970995409193448 AS [LogProba_1], 0.2939024645256681 AS [Proba_2], -1.2245073199998142 AS [LogProba_2], 0.2299981483805543 AS [Proba_3], -1.4696840206106765 AS [LogProba_3], 2 AS [Decision], 0.2939024645256681 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 328 AS count, 1 AS depth, 0 AS parent_id, 0.19004464937966986 AS [Proba_0], -1.660496237693954 AS [LogProba_0], 0.34336941184565956 AS [Proba_1], -1.0689484089017913 AS [LogProba_1], 0.18862250966703775 AS [Proba_2], -1.6680075645417147 AS [LogProba_2], 0.27796342910763283 AS [Proba_3], -1.2802657239175004 AS [LogProba_3], 1 AS [Decision], 0.34336941184565956 AS [DecisionProba]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].count AS count, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Proba_0] AS [Proba_0], [DT_node_data_4].[LogProba_0] AS [LogProba_0], [DT_node_data_4].[Proba_1] AS [Proba_1], [DT_node_data_4].[LogProba_1] AS [LogProba_1], [DT_node_data_4].[Proba_2] AS [Proba_2], [DT_node_data_4].[LogProba_2] AS [LogProba_2], [DT_node_data_4].[Proba_3] AS [Proba_3], [DT_node_data_4].[LogProba_3] AS [LogProba_3], [DT_node_data_4].[Decision] AS [Decision], [DT_node_data_4].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[AdaBoost_Estim_4] AS 
(SELECT [DT_Output_4].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_4].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_0] IS NULL OR [DT_Output_4].[Proba_0] > 0.0) THEN log([DT_Output_4].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_1] IS NULL OR [DT_Output_4].[Proba_1] > 0.0) THEN log([DT_Output_4].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_2] IS NULL OR [DT_Output_4].[Proba_2] > 0.0) THEN log([DT_Output_4].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_4].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_4].[Proba_3] IS NULL OR [DT_Output_4].[Proba_3] > 0.0) THEN log([DT_Output_4].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_228] <= 4.878637313842773) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 641 AS count, 1 AS depth, 0 AS parent_id, 0.2833794914324462 AS [Proba_0], -1.260968320496385 AS [LogProba_0], 0.21585324064690226 AS [Proba_1], -1.5331565436724461 AS [LogProba_1], 0.269376740597119 AS [Proba_2], -1.311644356531566 AS [LogProba_2], 0.2313905273235325 AS [Proba_3], -1.4636484014324196 AS [LogProba_3], 0 AS [Decision], 0.2833794914324462 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 159 AS count, 1 AS depth, 0 AS parent_id, 0.11859110357759631 AS [Proba_0], -2.1320738072253382 AS [LogProba_0], 0.3844294886000041 AS [Proba_1], -0.9559948915088463 AS [LogProba_1], 0.1737173489211547 AS [Proba_2], -1.7503257320746346 AS [LogProba_2], 0.32326205890124493 AS [Proba_3], -1.129291956840392 AS [LogProba_3], 1 AS [Decision], 0.3844294886000041 AS [DecisionProba]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].count AS count, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Proba_0] AS [Proba_0], [DT_node_data_5].[LogProba_0] AS [LogProba_0], [DT_node_data_5].[Proba_1] AS [Proba_1], [DT_node_data_5].[LogProba_1] AS [LogProba_1], [DT_node_data_5].[Proba_2] AS [Proba_2], [DT_node_data_5].[LogProba_2] AS [LogProba_2], [DT_node_data_5].[Proba_3] AS [Proba_3], [DT_node_data_5].[LogProba_3] AS [LogProba_3], [DT_node_data_5].[Decision] AS [Decision], [DT_node_data_5].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[AdaBoost_Estim_5] AS 
(SELECT [DT_Output_5].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_5].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_0] IS NULL OR [DT_Output_5].[Proba_0] > 0.0) THEN log([DT_Output_5].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_1] IS NULL OR [DT_Output_5].[Proba_1] > 0.0) THEN log([DT_Output_5].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_2] IS NULL OR [DT_Output_5].[Proba_2] > 0.0) THEN log([DT_Output_5].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_5].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_5].[Proba_3] IS NULL OR [DT_Output_5].[Proba_3] > 0.0) THEN log([DT_Output_5].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_268] <= 8.236695289611816) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 725 AS count, 1 AS depth, 0 AS parent_id, 0.27292103128359896 AS [Proba_0], -1.2985727883391407 AS [LogProba_0], 0.24216864142170044 AS [Proba_1], -1.4181209301444562 AS [LogProba_1], 0.2264492641189699 AS [Proba_2], -1.4852343586254244 AS [LogProba_2], 0.2584610631757306 AS [Proba_3], -1.353010222391538 AS [LogProba_3], 0 AS [Decision], 0.27292103128359896 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 75 AS count, 1 AS depth, 0 AS parent_id, 0.02127155307269591 AS [Proba_0], -3.8503846353836124 AS [LogProba_0], 0.328148948133369 AS [Proba_1], -1.1142876635120986 AS [LogProba_1], 0.4850122547024153 AS [Proba_2], -0.7235811209362095 AS [LogProba_2], 0.1655672440915196 AS [Proba_3], -1.7983778579759633 AS [LogProba_3], 2 AS [Decision], 0.4850122547024153 AS [DecisionProba]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].count AS count, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Proba_0] AS [Proba_0], [DT_node_data_6].[LogProba_0] AS [LogProba_0], [DT_node_data_6].[Proba_1] AS [Proba_1], [DT_node_data_6].[LogProba_1] AS [LogProba_1], [DT_node_data_6].[Proba_2] AS [Proba_2], [DT_node_data_6].[LogProba_2] AS [LogProba_2], [DT_node_data_6].[Proba_3] AS [Proba_3], [DT_node_data_6].[LogProba_3] AS [LogProba_3], [DT_node_data_6].[Decision] AS [Decision], [DT_node_data_6].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[AdaBoost_Estim_6] AS 
(SELECT [DT_Output_6].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_6].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_0] IS NULL OR [DT_Output_6].[Proba_0] > 0.0) THEN log([DT_Output_6].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_1] IS NULL OR [DT_Output_6].[Proba_1] > 0.0) THEN log([DT_Output_6].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_2] IS NULL OR [DT_Output_6].[Proba_2] > 0.0) THEN log([DT_Output_6].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_6].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_6].[Proba_3] IS NULL OR [DT_Output_6].[Proba_3] > 0.0) THEN log([DT_Output_6].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_477] <= 0.5657877922058105) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 400 AS count, 1 AS depth, 0 AS parent_id, 0.21055054763645742 AS [Proba_0], -1.5580295233970205 AS [LogProba_0], 0.33762717710521517 AS [Proba_1], -1.0858130185962855 AS [LogProba_1], 0.26109706092168156 AS [Proba_2], -1.3428630598640339 AS [LogProba_2], 0.19072521433664585 AS [Proba_3], -1.6569215552070478 AS [LogProba_3], 1 AS [Decision], 0.33762717710521517 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 400 AS count, 1 AS depth, 0 AS parent_id, 0.2878318609377971 AS [Proba_0], -1.2453787855214251 AS [LogProba_0], 0.16596590117230772 AS [Proba_1], -1.7959729263507198 AS [LogProba_1], 0.23935796467493428 AS [Proba_2], -1.4297950874284744 AS [LogProba_2], 0.30684427321496094 AS [Proba_3], -1.181414913462917 AS [LogProba_3], 3 AS [Decision], 0.30684427321496094 AS [DecisionProba]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].count AS count, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Proba_0] AS [Proba_0], [DT_node_data_7].[LogProba_0] AS [LogProba_0], [DT_node_data_7].[Proba_1] AS [Proba_1], [DT_node_data_7].[LogProba_1] AS [LogProba_1], [DT_node_data_7].[Proba_2] AS [Proba_2], [DT_node_data_7].[LogProba_2] AS [LogProba_2], [DT_node_data_7].[Proba_3] AS [Proba_3], [DT_node_data_7].[LogProba_3] AS [LogProba_3], [DT_node_data_7].[Decision] AS [Decision], [DT_node_data_7].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[AdaBoost_Estim_7] AS 
(SELECT [DT_Output_7].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_7].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_0] IS NULL OR [DT_Output_7].[Proba_0] > 0.0) THEN log([DT_Output_7].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_1] IS NULL OR [DT_Output_7].[Proba_1] > 0.0) THEN log([DT_Output_7].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_2] IS NULL OR [DT_Output_7].[Proba_2] > 0.0) THEN log([DT_Output_7].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_7].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_7].[Proba_3] IS NULL OR [DT_Output_7].[Proba_3] > 0.0) THEN log([DT_Output_7].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_179] <= -4.270051002502441) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 217 AS count, 1 AS depth, 0 AS parent_id, 0.19394795031855255 AS [Proba_0], -1.6401654532440244 AS [LogProba_0], 0.37276277341776015 AS [Proba_1], -0.9868130578687311 AS [LogProba_1], 0.3099759793659442 AS [Proba_2], -1.1712604704214429 AS [LogProba_2], 0.12331329689774313 AS [Proba_3], -2.093027032795506 AS [LogProba_3], 1 AS [Decision], 0.37276277341776015 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 583 AS count, 1 AS depth, 0 AS parent_id, 0.2711731874129795 AS [Proba_0], -1.3049975942748226 AS [LogProba_0], 0.203627401251453 AS [Proba_1], -1.5914634196115804 AS [LogProba_1], 0.22734458135591673 AS [Proba_2], -1.4812884329255802 AS [LogProba_2], 0.2978548299796507 AS [Proba_3], -1.2111490588910254 AS [LogProba_3], 3 AS [Decision], 0.2978548299796507 AS [DecisionProba]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].count AS count, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Proba_0] AS [Proba_0], [DT_node_data_8].[LogProba_0] AS [LogProba_0], [DT_node_data_8].[Proba_1] AS [Proba_1], [DT_node_data_8].[LogProba_1] AS [LogProba_1], [DT_node_data_8].[Proba_2] AS [Proba_2], [DT_node_data_8].[LogProba_2] AS [LogProba_2], [DT_node_data_8].[Proba_3] AS [Proba_3], [DT_node_data_8].[LogProba_3] AS [LogProba_3], [DT_node_data_8].[Decision] AS [Decision], [DT_node_data_8].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[AdaBoost_Estim_8] AS 
(SELECT [DT_Output_8].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_8].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_0] IS NULL OR [DT_Output_8].[Proba_0] > 0.0) THEN log([DT_Output_8].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_1] IS NULL OR [DT_Output_8].[Proba_1] > 0.0) THEN log([DT_Output_8].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_2] IS NULL OR [DT_Output_8].[Proba_2] > 0.0) THEN log([DT_Output_8].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_8].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_8].[Proba_3] IS NULL OR [DT_Output_8].[Proba_3] > 0.0) THEN log([DT_Output_8].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_164] <= 1.8603899478912354) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 772 AS count, 1 AS depth, 0 AS parent_id, 0.2614128623091388 AS [Proba_0], -1.341654273535316 AS [LogProba_0], 0.22921325075285812 AS [Proba_1], -1.4731024827548178 AS [LogProba_1], 0.2571423632709509 AS [Proba_2], -1.3581254047680074 AS [LogProba_2], 0.25223152366705204 AS [Proba_3], -1.3774078685477877 AS [LogProba_3], 0 AS [Decision], 0.2614128623091388 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 28 AS count, 1 AS depth, 0 AS parent_id, 0.013891542355842189 AS [Proba_0], -4.276475087643073 AS [LogProba_0], 0.6800347424894957 AS [Proba_1], -0.385611390220814 AS [LogProba_1], 0.10223931296462099 AS [Proba_2], -2.2804390082050974 AS [LogProba_2], 0.20383440219004106 AS [Proba_3], -1.5904473687589706 AS [LogProba_3], 1 AS [Decision], 0.6800347424894957 AS [DecisionProba]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].count AS count, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Proba_0] AS [Proba_0], [DT_node_data_9].[LogProba_0] AS [LogProba_0], [DT_node_data_9].[Proba_1] AS [Proba_1], [DT_node_data_9].[LogProba_1] AS [LogProba_1], [DT_node_data_9].[Proba_2] AS [Proba_2], [DT_node_data_9].[LogProba_2] AS [LogProba_2], [DT_node_data_9].[Proba_3] AS [Proba_3], [DT_node_data_9].[LogProba_3] AS [LogProba_3], [DT_node_data_9].[Decision] AS [Decision], [DT_node_data_9].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[AdaBoost_Estim_9] AS 
(SELECT [DT_Output_9].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_9].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_0] IS NULL OR [DT_Output_9].[Proba_0] > 0.0) THEN log([DT_Output_9].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_1] IS NULL OR [DT_Output_9].[Proba_1] > 0.0) THEN log([DT_Output_9].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_2] IS NULL OR [DT_Output_9].[Proba_2] > 0.0) THEN log([DT_Output_9].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_9].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_9].[Proba_3] IS NULL OR [DT_Output_9].[Proba_3] > 0.0) THEN log([DT_Output_9].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_9])
 INSERT INTO ##TMP_20180329233313_HOW2XX_ADA_Sum_B0 ([KEY], [Score_0], [Proba_0], [Score_1], [Proba_1], [Score_2], [Proba_2], [Score_3], [Proba_3]) SELECT [ADA_Sum_B0].[KEY], [ADA_Sum_B0].[Score_0], [ADA_Sum_B0].[Proba_0], [ADA_Sum_B0].[Score_1], [ADA_Sum_B0].[Proba_1], [ADA_Sum_B0].[Score_2], [ADA_Sum_B0].[Proba_2], [ADA_Sum_B0].[Score_3], [ADA_Sum_B0].[Proba_3] 
FROM (SELECT [ADA_Sum_esu_0].[KEY] AS [KEY], [ADA_Sum_esu_0].[Score_0] AS [Score_0], [ADA_Sum_esu_0].[Proba_0] AS [Proba_0], [ADA_Sum_esu_0].[Score_1] AS [Score_1], [ADA_Sum_esu_0].[Proba_1] AS [Proba_1], [ADA_Sum_esu_0].[Score_2] AS [Score_2], [ADA_Sum_esu_0].[Proba_2] AS [Proba_2], [ADA_Sum_esu_0].[Score_3] AS [Score_3], [ADA_Sum_esu_0].[Proba_3] AS [Proba_3] 
FROM (SELECT [AdaBoost_Estim_0].[KEY] AS [KEY], [AdaBoost_Estim_0].[Score_0] AS [Score_0], [AdaBoost_Estim_0].[Proba_0] AS [Proba_0], [AdaBoost_Estim_0].[Score_1] AS [Score_1], [AdaBoost_Estim_0].[Proba_1] AS [Proba_1], [AdaBoost_Estim_0].[Score_2] AS [Score_2], [AdaBoost_Estim_0].[Proba_2] AS [Proba_2], [AdaBoost_Estim_0].[Score_3] AS [Score_3], [AdaBoost_Estim_0].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_0] UNION ALL SELECT [AdaBoost_Estim_1].[KEY] AS [KEY], [AdaBoost_Estim_1].[Score_0] AS [Score_0], [AdaBoost_Estim_1].[Proba_0] AS [Proba_0], [AdaBoost_Estim_1].[Score_1] AS [Score_1], [AdaBoost_Estim_1].[Proba_1] AS [Proba_1], [AdaBoost_Estim_1].[Score_2] AS [Score_2], [AdaBoost_Estim_1].[Proba_2] AS [Proba_2], [AdaBoost_Estim_1].[Score_3] AS [Score_3], [AdaBoost_Estim_1].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_1] UNION ALL SELECT [AdaBoost_Estim_2].[KEY] AS [KEY], [AdaBoost_Estim_2].[Score_0] AS [Score_0], [AdaBoost_Estim_2].[Proba_0] AS [Proba_0], [AdaBoost_Estim_2].[Score_1] AS [Score_1], [AdaBoost_Estim_2].[Proba_1] AS [Proba_1], [AdaBoost_Estim_2].[Score_2] AS [Score_2], [AdaBoost_Estim_2].[Proba_2] AS [Proba_2], [AdaBoost_Estim_2].[Score_3] AS [Score_3], [AdaBoost_Estim_2].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_2] UNION ALL SELECT [AdaBoost_Estim_3].[KEY] AS [KEY], [AdaBoost_Estim_3].[Score_0] AS [Score_0], [AdaBoost_Estim_3].[Proba_0] AS [Proba_0], [AdaBoost_Estim_3].[Score_1] AS [Score_1], [AdaBoost_Estim_3].[Proba_1] AS [Proba_1], [AdaBoost_Estim_3].[Score_2] AS [Score_2], [AdaBoost_Estim_3].[Proba_2] AS [Proba_2], [AdaBoost_Estim_3].[Score_3] AS [Score_3], [AdaBoost_Estim_3].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_3] UNION ALL SELECT [AdaBoost_Estim_4].[KEY] AS [KEY], [AdaBoost_Estim_4].[Score_0] AS [Score_0], [AdaBoost_Estim_4].[Proba_0] AS [Proba_0], [AdaBoost_Estim_4].[Score_1] AS [Score_1], [AdaBoost_Estim_4].[Proba_1] AS [Proba_1], [AdaBoost_Estim_4].[Score_2] AS [Score_2], [AdaBoost_Estim_4].[Proba_2] AS [Proba_2], [AdaBoost_Estim_4].[Score_3] AS [Score_3], [AdaBoost_Estim_4].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_4] UNION ALL SELECT [AdaBoost_Estim_5].[KEY] AS [KEY], [AdaBoost_Estim_5].[Score_0] AS [Score_0], [AdaBoost_Estim_5].[Proba_0] AS [Proba_0], [AdaBoost_Estim_5].[Score_1] AS [Score_1], [AdaBoost_Estim_5].[Proba_1] AS [Proba_1], [AdaBoost_Estim_5].[Score_2] AS [Score_2], [AdaBoost_Estim_5].[Proba_2] AS [Proba_2], [AdaBoost_Estim_5].[Score_3] AS [Score_3], [AdaBoost_Estim_5].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_5] UNION ALL SELECT [AdaBoost_Estim_6].[KEY] AS [KEY], [AdaBoost_Estim_6].[Score_0] AS [Score_0], [AdaBoost_Estim_6].[Proba_0] AS [Proba_0], [AdaBoost_Estim_6].[Score_1] AS [Score_1], [AdaBoost_Estim_6].[Proba_1] AS [Proba_1], [AdaBoost_Estim_6].[Score_2] AS [Score_2], [AdaBoost_Estim_6].[Proba_2] AS [Proba_2], [AdaBoost_Estim_6].[Score_3] AS [Score_3], [AdaBoost_Estim_6].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_6] UNION ALL SELECT [AdaBoost_Estim_7].[KEY] AS [KEY], [AdaBoost_Estim_7].[Score_0] AS [Score_0], [AdaBoost_Estim_7].[Proba_0] AS [Proba_0], [AdaBoost_Estim_7].[Score_1] AS [Score_1], [AdaBoost_Estim_7].[Proba_1] AS [Proba_1], [AdaBoost_Estim_7].[Score_2] AS [Score_2], [AdaBoost_Estim_7].[Proba_2] AS [Proba_2], [AdaBoost_Estim_7].[Score_3] AS [Score_3], [AdaBoost_Estim_7].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_7] UNION ALL SELECT [AdaBoost_Estim_8].[KEY] AS [KEY], [AdaBoost_Estim_8].[Score_0] AS [Score_0], [AdaBoost_Estim_8].[Proba_0] AS [Proba_0], [AdaBoost_Estim_8].[Score_1] AS [Score_1], [AdaBoost_Estim_8].[Proba_1] AS [Proba_1], [AdaBoost_Estim_8].[Score_2] AS [Score_2], [AdaBoost_Estim_8].[Proba_2] AS [Proba_2], [AdaBoost_Estim_8].[Score_3] AS [Score_3], [AdaBoost_Estim_8].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_8] UNION ALL SELECT [AdaBoost_Estim_9].[KEY] AS [KEY], [AdaBoost_Estim_9].[Score_0] AS [Score_0], [AdaBoost_Estim_9].[Proba_0] AS [Proba_0], [AdaBoost_Estim_9].[Score_1] AS [Score_1], [AdaBoost_Estim_9].[Proba_1] AS [Proba_1], [AdaBoost_Estim_9].[Score_2] AS [Score_2], [AdaBoost_Estim_9].[Proba_2] AS [Proba_2], [AdaBoost_Estim_9].[Score_3] AS [Score_3], [AdaBoost_Estim_9].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_9]) AS [ADA_Sum_esu_0]) AS [ADA_Sum_B0]
-- Code For temporary table ##TMP_20180329233313_4KK0HJ_ADA_Sum_B1 part 1/2. Create 


CREATE TABLE ##TMP_20180329233313_4KK0HJ_ADA_Sum_B1 (
	[KEY] BIGINT NULL, 
	[Score_0] FLOAT NULL, 
	[Proba_0] FLOAT NULL, 
	[Score_1] FLOAT NULL, 
	[Proba_1] FLOAT NULL, 
	[Score_2] FLOAT NULL, 
	[Proba_2] FLOAT NULL, 
	[Score_3] FLOAT NULL, 
	[Proba_3] FLOAT NULL
)


-- Code For temporary table ##TMP_20180329233313_4KK0HJ_ADA_Sum_B1 part 2/2. Populate

WITH [DT_node_lookup_10] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_288] <= 1.670473575592041) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 500 AS count, 1 AS depth, 0 AS parent_id, 0.18401384177519736 AS [Proba_0], -1.6927442971634472 AS [LogProba_0], 0.2443687435027812 AS [Proba_1], -1.4090769506048995 AS [LogProba_1], 0.26356836203521433 AS [Proba_2], -1.333442506185247 AS [LogProba_2], 0.30804905268680705 AS [Proba_3], -1.1774962467192511 AS [LogProba_3], 3 AS [Decision], 0.30804905268680705 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 300 AS count, 1 AS depth, 0 AS parent_id, 0.34969007471648084 AS [Proba_0], -1.0507080175961725 AS [LogProba_0], 0.2585075475835834 AS [Proba_1], -1.3528303878444856 AS [LogProba_1], 0.2295012914608152 AS [Proba_2], -1.4718466222171298 AS [LogProba_2], 0.16230108623912048 AS [Proba_3], -1.8183021116982796 AS [LogProba_3], 0 AS [Decision], 0.34969007471648084 AS [DecisionProba]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].count AS count, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Proba_0] AS [Proba_0], [DT_node_data_10].[LogProba_0] AS [LogProba_0], [DT_node_data_10].[Proba_1] AS [Proba_1], [DT_node_data_10].[LogProba_1] AS [LogProba_1], [DT_node_data_10].[Proba_2] AS [Proba_2], [DT_node_data_10].[LogProba_2] AS [LogProba_2], [DT_node_data_10].[Proba_3] AS [Proba_3], [DT_node_data_10].[LogProba_3] AS [LogProba_3], [DT_node_data_10].[Decision] AS [Decision], [DT_node_data_10].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[AdaBoost_Estim_10] AS 
(SELECT [DT_Output_10].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_10].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_0] IS NULL OR [DT_Output_10].[Proba_0] > 0.0) THEN log([DT_Output_10].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_1] IS NULL OR [DT_Output_10].[Proba_1] > 0.0) THEN log([DT_Output_10].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_2] IS NULL OR [DT_Output_10].[Proba_2] > 0.0) THEN log([DT_Output_10].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_10].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_10].[Proba_3] IS NULL OR [DT_Output_10].[Proba_3] > 0.0) THEN log([DT_Output_10].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_152] <= 0.9743233919143677) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 476 AS count, 1 AS depth, 0 AS parent_id, 0.28793439814056765 AS [Proba_0], -1.2450226090271002 AS [LogProba_0], 0.2866451996303128 AS [Proba_1], -1.2495100662172525 AS [LogProba_1], 0.18824560781944813 AS [Proba_2], -1.6700077442107186 AS [LogProba_2], 0.23717479440967146 AS [Proba_3], -1.4389578805332488 AS [LogProba_3], 0 AS [Decision], 0.28793439814056765 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 324 AS count, 1 AS depth, 0 AS parent_id, 0.1877770364237294 AS [Proba_0], -1.6724999964483418 AS [LogProba_0], 0.18989168054300395 AS [Proba_1], -1.6613014717970602 AS [LogProba_1], 0.35129437881382747 AS [Proba_2], -1.0461307209376418 AS [LogProba_2], 0.2710369042194392 AS [Proba_3], -1.305500289442299 AS [LogProba_3], 2 AS [Decision], 0.35129437881382747 AS [DecisionProba]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].count AS count, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Proba_0] AS [Proba_0], [DT_node_data_11].[LogProba_0] AS [LogProba_0], [DT_node_data_11].[Proba_1] AS [Proba_1], [DT_node_data_11].[LogProba_1] AS [LogProba_1], [DT_node_data_11].[Proba_2] AS [Proba_2], [DT_node_data_11].[LogProba_2] AS [LogProba_2], [DT_node_data_11].[Proba_3] AS [Proba_3], [DT_node_data_11].[LogProba_3] AS [LogProba_3], [DT_node_data_11].[Decision] AS [Decision], [DT_node_data_11].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[AdaBoost_Estim_11] AS 
(SELECT [DT_Output_11].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_11].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_0] IS NULL OR [DT_Output_11].[Proba_0] > 0.0) THEN log([DT_Output_11].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_1] IS NULL OR [DT_Output_11].[Proba_1] > 0.0) THEN log([DT_Output_11].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_2] IS NULL OR [DT_Output_11].[Proba_2] > 0.0) THEN log([DT_Output_11].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_11].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_11].[Proba_3] IS NULL OR [DT_Output_11].[Proba_3] > 0.0) THEN log([DT_Output_11].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_11]), 
[DT_node_lookup_12] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_497] <= 3.6597704887390137) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 617 AS count, 1 AS depth, 0 AS parent_id, 0.25727029976509713 AS [Proba_0], -1.3576279967297646 AS [LogProba_0], 0.2640107806437295 AS [Proba_1], -1.3317653408978756 AS [LogProba_1], 0.27666951308116455 AS [Proba_2], -1.2849315786673536 AS [LogProba_2], 0.20204940651000872 AS [Proba_3], -1.5992430248041671 AS [LogProba_3], 2 AS [Decision], 0.27666951308116455 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 183 AS count, 1 AS depth, 0 AS parent_id, 0.2258011869083092 AS [Proba_0], -1.4881003708219795 AS [LogProba_0], 0.20336584831151527 AS [Proba_1], -1.592748713538324 AS [LogProba_1], 0.16123191846974888 AS [Proba_2], -1.8249114631146257 AS [LogProba_2], 0.40960104631042665 AS [Proba_3], -0.8925716507912866 AS [LogProba_3], 3 AS [Decision], 0.40960104631042665 AS [DecisionProba]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].count AS count, [DT_node_data_12].depth AS depth, [DT_node_data_12].parent_id AS parent_id, [DT_node_data_12].[Proba_0] AS [Proba_0], [DT_node_data_12].[LogProba_0] AS [LogProba_0], [DT_node_data_12].[Proba_1] AS [Proba_1], [DT_node_data_12].[LogProba_1] AS [LogProba_1], [DT_node_data_12].[Proba_2] AS [Proba_2], [DT_node_data_12].[LogProba_2] AS [LogProba_2], [DT_node_data_12].[Proba_3] AS [Proba_3], [DT_node_data_12].[LogProba_3] AS [LogProba_3], [DT_node_data_12].[Decision] AS [Decision], [DT_node_data_12].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[AdaBoost_Estim_12] AS 
(SELECT [DT_Output_12].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_12].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_0] IS NULL OR [DT_Output_12].[Proba_0] > 0.0) THEN log([DT_Output_12].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_1] IS NULL OR [DT_Output_12].[Proba_1] > 0.0) THEN log([DT_Output_12].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_2] IS NULL OR [DT_Output_12].[Proba_2] > 0.0) THEN log([DT_Output_12].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_12].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_12].[Proba_3] IS NULL OR [DT_Output_12].[Proba_3] > 0.0) THEN log([DT_Output_12].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_71] <= -1.173523187637329) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 366 AS count, 1 AS depth, 0 AS parent_id, 0.3165945532787122 AS [Proba_0], -1.1501333354775514 AS [LogProba_0], 0.2999571095875958 AS [Proba_1], -1.2041157825881879 AS [LogProba_1], 0.18863328448841138 AS [Proba_2], -1.6679504424428975 AS [LogProba_2], 0.19481505264528057 AS [Proba_3], -1.6357046184526849 AS [LogProba_3], 0 AS [Decision], 0.3165945532787122 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 434 AS count, 1 AS depth, 0 AS parent_id, 0.19404053976738114 AS [Proba_0], -1.639688173876455 AS [LogProba_0], 0.2080209979695551 AS [Proba_1], -1.5701162525993997 AS [LogProba_1], 0.30156650367343024 AS [Proba_2], -1.1987647111069353 AS [LogProba_2], 0.2963719585896336 AS [Proba_3], -1.2161399966833564 AS [LogProba_3], 2 AS [Decision], 0.30156650367343024 AS [DecisionProba]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].count AS count, [DT_node_data_13].depth AS depth, [DT_node_data_13].parent_id AS parent_id, [DT_node_data_13].[Proba_0] AS [Proba_0], [DT_node_data_13].[LogProba_0] AS [LogProba_0], [DT_node_data_13].[Proba_1] AS [Proba_1], [DT_node_data_13].[LogProba_1] AS [LogProba_1], [DT_node_data_13].[Proba_2] AS [Proba_2], [DT_node_data_13].[LogProba_2] AS [LogProba_2], [DT_node_data_13].[Proba_3] AS [Proba_3], [DT_node_data_13].[LogProba_3] AS [LogProba_3], [DT_node_data_13].[Decision] AS [Decision], [DT_node_data_13].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[AdaBoost_Estim_13] AS 
(SELECT [DT_Output_13].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_13].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_0] IS NULL OR [DT_Output_13].[Proba_0] > 0.0) THEN log([DT_Output_13].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_1] IS NULL OR [DT_Output_13].[Proba_1] > 0.0) THEN log([DT_Output_13].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_2] IS NULL OR [DT_Output_13].[Proba_2] > 0.0) THEN log([DT_Output_13].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_13].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_13].[Proba_3] IS NULL OR [DT_Output_13].[Proba_3] > 0.0) THEN log([DT_Output_13].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] <= 0.8192407488822937) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 625 AS count, 1 AS depth, 0 AS parent_id, 0.21896682278540844 AS [Proba_0], -1.5188350547725862 AS [LogProba_0], 0.2806149460560047 AS [Proba_1], -1.2707718480993406 AS [LogProba_1], 0.22629278624347562 AS [Proba_2], -1.4859256038128317 AS [LogProba_2], 0.27412544491511137 AS [Proba_3], -1.29416944920806 AS [LogProba_3], 1 AS [Decision], 0.2806149460560047 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 175 AS count, 1 AS depth, 0 AS parent_id, 0.365456975512242 AS [Proba_0], -1.0066067207779406 AS [LogProba_0], 0.13609902709430882 AS [Proba_1], -1.9943725178123624 AS [LogProba_1], 0.3382011912355374 AS [Proba_2], -1.0841143202425552 AS [LogProba_2], 0.16024280615791173 AS [Proba_3], -1.831065075559291 AS [LogProba_3], 0 AS [Decision], 0.365456975512242 AS [DecisionProba]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].count AS count, [DT_node_data_14].depth AS depth, [DT_node_data_14].parent_id AS parent_id, [DT_node_data_14].[Proba_0] AS [Proba_0], [DT_node_data_14].[LogProba_0] AS [LogProba_0], [DT_node_data_14].[Proba_1] AS [Proba_1], [DT_node_data_14].[LogProba_1] AS [LogProba_1], [DT_node_data_14].[Proba_2] AS [Proba_2], [DT_node_data_14].[LogProba_2] AS [LogProba_2], [DT_node_data_14].[Proba_3] AS [Proba_3], [DT_node_data_14].[LogProba_3] AS [LogProba_3], [DT_node_data_14].[Decision] AS [Decision], [DT_node_data_14].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[AdaBoost_Estim_14] AS 
(SELECT [DT_Output_14].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_14].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_0] IS NULL OR [DT_Output_14].[Proba_0] > 0.0) THEN log([DT_Output_14].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_1] IS NULL OR [DT_Output_14].[Proba_1] > 0.0) THEN log([DT_Output_14].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_2] IS NULL OR [DT_Output_14].[Proba_2] > 0.0) THEN log([DT_Output_14].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_14].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_14].[Proba_3] IS NULL OR [DT_Output_14].[Proba_3] > 0.0) THEN log([DT_Output_14].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_253] <= 1.2371032238006592) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 718 AS count, 1 AS depth, 0 AS parent_id, 0.2698042403264346 AS [Proba_0], -1.3100586187773724 AS [LogProba_0], 0.22085898903532258 AS [Proba_1], -1.5102308397741422 AS [LogProba_1], 0.2556580580657938 AS [Proba_2], -1.3639144380397326 AS [LogProba_2], 0.2536787125724491 AS [Proba_3], -1.3716867237710366 AS [LogProba_3], 0 AS [Decision], 0.2698042403264346 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 82 AS count, 1 AS depth, 0 AS parent_id, 0.07789795451238053 AS [Proba_0], -2.5523555843143564 AS [LogProba_0], 0.5032400895935284 AS [Proba_1], -0.6866879074658224 AS [LogProba_1], 0.2008305620129732 AS [Proba_2], -1.6052937014861728 AS [LogProba_2], 0.2180313938811179 AS [Proba_3], -1.523116217932314 AS [LogProba_3], 1 AS [Decision], 0.5032400895935284 AS [DecisionProba]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].count AS count, [DT_node_data_15].depth AS depth, [DT_node_data_15].parent_id AS parent_id, [DT_node_data_15].[Proba_0] AS [Proba_0], [DT_node_data_15].[LogProba_0] AS [LogProba_0], [DT_node_data_15].[Proba_1] AS [Proba_1], [DT_node_data_15].[LogProba_1] AS [LogProba_1], [DT_node_data_15].[Proba_2] AS [Proba_2], [DT_node_data_15].[LogProba_2] AS [LogProba_2], [DT_node_data_15].[Proba_3] AS [Proba_3], [DT_node_data_15].[LogProba_3] AS [LogProba_3], [DT_node_data_15].[Decision] AS [Decision], [DT_node_data_15].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[AdaBoost_Estim_15] AS 
(SELECT [DT_Output_15].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 16.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_15].[Proba_0] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_0] IS NULL OR [DT_Output_15].[Proba_0] > 0.0) THEN log([DT_Output_15].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_1] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_1] IS NULL OR [DT_Output_15].[Proba_1] > 0.0) THEN log([DT_Output_15].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_2] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_2] IS NULL OR [DT_Output_15].[Proba_2] > 0.0) THEN log([DT_Output_15].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_15].[Proba_3] <= 2.22044604925e-16) THEN -36.043653389117296 ELSE CASE WHEN ([DT_Output_15].[Proba_3] IS NULL OR [DT_Output_15].[Proba_3] > 0.0) THEN log([DT_Output_15].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_15])
 INSERT INTO ##TMP_20180329233313_4KK0HJ_ADA_Sum_B1 ([KEY], [Score_0], [Proba_0], [Score_1], [Proba_1], [Score_2], [Proba_2], [Score_3], [Proba_3]) SELECT [ADA_Sum_B1].[KEY], [ADA_Sum_B1].[Score_0], [ADA_Sum_B1].[Proba_0], [ADA_Sum_B1].[Score_1], [ADA_Sum_B1].[Proba_1], [ADA_Sum_B1].[Score_2], [ADA_Sum_B1].[Proba_2], [ADA_Sum_B1].[Score_3], [ADA_Sum_B1].[Proba_3] 
FROM (SELECT [ADA_Sum_esu_1].[KEY] AS [KEY], [ADA_Sum_esu_1].[Score_0] AS [Score_0], [ADA_Sum_esu_1].[Proba_0] AS [Proba_0], [ADA_Sum_esu_1].[Score_1] AS [Score_1], [ADA_Sum_esu_1].[Proba_1] AS [Proba_1], [ADA_Sum_esu_1].[Score_2] AS [Score_2], [ADA_Sum_esu_1].[Proba_2] AS [Proba_2], [ADA_Sum_esu_1].[Score_3] AS [Score_3], [ADA_Sum_esu_1].[Proba_3] AS [Proba_3] 
FROM (SELECT [AdaBoost_Estim_10].[KEY] AS [KEY], [AdaBoost_Estim_10].[Score_0] AS [Score_0], [AdaBoost_Estim_10].[Proba_0] AS [Proba_0], [AdaBoost_Estim_10].[Score_1] AS [Score_1], [AdaBoost_Estim_10].[Proba_1] AS [Proba_1], [AdaBoost_Estim_10].[Score_2] AS [Score_2], [AdaBoost_Estim_10].[Proba_2] AS [Proba_2], [AdaBoost_Estim_10].[Score_3] AS [Score_3], [AdaBoost_Estim_10].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_10] UNION ALL SELECT [AdaBoost_Estim_11].[KEY] AS [KEY], [AdaBoost_Estim_11].[Score_0] AS [Score_0], [AdaBoost_Estim_11].[Proba_0] AS [Proba_0], [AdaBoost_Estim_11].[Score_1] AS [Score_1], [AdaBoost_Estim_11].[Proba_1] AS [Proba_1], [AdaBoost_Estim_11].[Score_2] AS [Score_2], [AdaBoost_Estim_11].[Proba_2] AS [Proba_2], [AdaBoost_Estim_11].[Score_3] AS [Score_3], [AdaBoost_Estim_11].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_11] UNION ALL SELECT [AdaBoost_Estim_12].[KEY] AS [KEY], [AdaBoost_Estim_12].[Score_0] AS [Score_0], [AdaBoost_Estim_12].[Proba_0] AS [Proba_0], [AdaBoost_Estim_12].[Score_1] AS [Score_1], [AdaBoost_Estim_12].[Proba_1] AS [Proba_1], [AdaBoost_Estim_12].[Score_2] AS [Score_2], [AdaBoost_Estim_12].[Proba_2] AS [Proba_2], [AdaBoost_Estim_12].[Score_3] AS [Score_3], [AdaBoost_Estim_12].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_12] UNION ALL SELECT [AdaBoost_Estim_13].[KEY] AS [KEY], [AdaBoost_Estim_13].[Score_0] AS [Score_0], [AdaBoost_Estim_13].[Proba_0] AS [Proba_0], [AdaBoost_Estim_13].[Score_1] AS [Score_1], [AdaBoost_Estim_13].[Proba_1] AS [Proba_1], [AdaBoost_Estim_13].[Score_2] AS [Score_2], [AdaBoost_Estim_13].[Proba_2] AS [Proba_2], [AdaBoost_Estim_13].[Score_3] AS [Score_3], [AdaBoost_Estim_13].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_13] UNION ALL SELECT [AdaBoost_Estim_14].[KEY] AS [KEY], [AdaBoost_Estim_14].[Score_0] AS [Score_0], [AdaBoost_Estim_14].[Proba_0] AS [Proba_0], [AdaBoost_Estim_14].[Score_1] AS [Score_1], [AdaBoost_Estim_14].[Proba_1] AS [Proba_1], [AdaBoost_Estim_14].[Score_2] AS [Score_2], [AdaBoost_Estim_14].[Proba_2] AS [Proba_2], [AdaBoost_Estim_14].[Score_3] AS [Score_3], [AdaBoost_Estim_14].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_14] UNION ALL SELECT [AdaBoost_Estim_15].[KEY] AS [KEY], [AdaBoost_Estim_15].[Score_0] AS [Score_0], [AdaBoost_Estim_15].[Proba_0] AS [Proba_0], [AdaBoost_Estim_15].[Score_1] AS [Score_1], [AdaBoost_Estim_15].[Proba_1] AS [Proba_1], [AdaBoost_Estim_15].[Score_2] AS [Score_2], [AdaBoost_Estim_15].[Proba_2] AS [Proba_2], [AdaBoost_Estim_15].[Score_3] AS [Score_3], [AdaBoost_Estim_15].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_15]) AS [ADA_Sum_esu_1]) AS [ADA_Sum_B1]
-- Code For temporary table ##TMP_20180329233313_V9ETKP_ADA_Sum_Union part 1/2. Create 


CREATE TABLE ##TMP_20180329233313_V9ETKP_ADA_Sum_Union (
	[KEY] BIGINT NULL, 
	[Score_0] FLOAT NULL, 
	[Proba_0] FLOAT NULL, 
	[Score_1] FLOAT NULL, 
	[Proba_1] FLOAT NULL, 
	[Score_2] FLOAT NULL, 
	[Proba_2] FLOAT NULL, 
	[Score_3] FLOAT NULL, 
	[Proba_3] FLOAT NULL
)


-- Code For temporary table ##TMP_20180329233313_V9ETKP_ADA_Sum_Union part 2/2. Populate

INSERT INTO ##TMP_20180329233313_V9ETKP_ADA_Sum_Union ([KEY], [Score_0], [Proba_0], [Score_1], [Proba_1], [Score_2], [Proba_2], [Score_3], [Proba_3]) SELECT [ADA_Sum_Union].[KEY], [ADA_Sum_Union].[Score_0], [ADA_Sum_Union].[Proba_0], [ADA_Sum_Union].[Score_1], [ADA_Sum_Union].[Proba_1], [ADA_Sum_Union].[Score_2], [ADA_Sum_Union].[Proba_2], [ADA_Sum_Union].[Score_3], [ADA_Sum_Union].[Proba_3] 
FROM (SELECT [ADA_Sum_EnsembleUnion].[KEY] AS [KEY], [ADA_Sum_EnsembleUnion].[Score_0] AS [Score_0], [ADA_Sum_EnsembleUnion].[Proba_0] AS [Proba_0], [ADA_Sum_EnsembleUnion].[Score_1] AS [Score_1], [ADA_Sum_EnsembleUnion].[Proba_1] AS [Proba_1], [ADA_Sum_EnsembleUnion].[Score_2] AS [Score_2], [ADA_Sum_EnsembleUnion].[Proba_2] AS [Proba_2], [ADA_Sum_EnsembleUnion].[Score_3] AS [Score_3], [ADA_Sum_EnsembleUnion].[Proba_3] AS [Proba_3] 
FROM (SELECT [ADA_Sum_B0].[KEY] AS [KEY], [ADA_Sum_B0].[Score_0] AS [Score_0], [ADA_Sum_B0].[Proba_0] AS [Proba_0], [ADA_Sum_B0].[Score_1] AS [Score_1], [ADA_Sum_B0].[Proba_1] AS [Proba_1], [ADA_Sum_B0].[Score_2] AS [Score_2], [ADA_Sum_B0].[Proba_2] AS [Proba_2], [ADA_Sum_B0].[Score_3] AS [Score_3], [ADA_Sum_B0].[Proba_3] AS [Proba_3] 
FROM ##TMP_20180329233313_HOW2XX_ADA_Sum_B0 AS [ADA_Sum_B0] UNION ALL SELECT [ADA_Sum_B1].[KEY] AS [KEY], [ADA_Sum_B1].[Score_0] AS [Score_0], [ADA_Sum_B1].[Proba_0] AS [Proba_0], [ADA_Sum_B1].[Score_1] AS [Score_1], [ADA_Sum_B1].[Proba_1] AS [Proba_1], [ADA_Sum_B1].[Score_2] AS [Score_2], [ADA_Sum_B1].[Proba_2] AS [Proba_2], [ADA_Sum_B1].[Score_3] AS [Score_3], [ADA_Sum_B1].[Proba_3] AS [Proba_3] 
FROM ##TMP_20180329233313_4KK0HJ_ADA_Sum_B1 AS [ADA_Sum_B1]) AS [ADA_Sum_EnsembleUnion]) AS [ADA_Sum_Union]

-- Model deployment code

WITH [ADA_Sum_sum] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Score_0] AS [Score_0], [T].[Proba_0] AS [Proba_0], [T].[Score_1] AS [Score_1], [T].[Proba_1] AS [Proba_1], [T].[Score_2] AS [Score_2], [T].[Proba_2] AS [Proba_2], [T].[Score_3] AS [Score_3], [T].[Proba_3] AS [Proba_3] 
FROM (SELECT [ADA_Sum_Union].[KEY] AS [KEY], sum(CAST([ADA_Sum_Union].[Score_0] AS FLOAT(53))) AS [Score_0], sum(CAST([ADA_Sum_Union].[Proba_0] AS FLOAT(53))) AS [Proba_0], sum(CAST([ADA_Sum_Union].[Score_1] AS FLOAT(53))) AS [Score_1], sum(CAST([ADA_Sum_Union].[Proba_1] AS FLOAT(53))) AS [Proba_1], sum(CAST([ADA_Sum_Union].[Score_2] AS FLOAT(53))) AS [Score_2], sum(CAST([ADA_Sum_Union].[Proba_2] AS FLOAT(53))) AS [Proba_2], sum(CAST([ADA_Sum_Union].[Score_3] AS FLOAT(53))) AS [Score_3], sum(CAST([ADA_Sum_Union].[Proba_3] AS FLOAT(53))) AS [Proba_3] 
FROM ##TMP_20180329233313_V9ETKP_ADA_Sum_Union AS [ADA_Sum_Union] GROUP BY [ADA_Sum_Union].[KEY]) AS [T]), 
[AdaBoost_AVG_Scores_BN] AS 
(SELECT [ADA_Sum_sum].[KEY] AS [KEY], [ADA_Sum_sum].[Score_0] AS [Score_0], [ADA_Sum_sum].[Proba_0] AS [Proba_0], [ADA_Sum_sum].[Score_1] AS [Score_1], [ADA_Sum_sum].[Proba_1] AS [Proba_1], [ADA_Sum_sum].[Score_2] AS [Score_2], [ADA_Sum_sum].[Proba_2] AS [Proba_2], [ADA_Sum_sum].[Score_3] AS [Score_3], [ADA_Sum_sum].[Proba_3] AS [Proba_3] 
FROM [ADA_Sum_sum]), 
[AdaBoost_AVG_Scores] AS 
(SELECT [AdaBoost_AVG_Scores_BN].[KEY] AS [KEY], [AdaBoost_AVG_Scores_BN].[Score_0] AS [Score_0], exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 16.0) / 3) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 16.0) / 3)) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_0], [AdaBoost_AVG_Scores_BN].[Score_1] AS [Score_1], exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 16.0) / 3) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 16.0) / 3)) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_1], [AdaBoost_AVG_Scores_BN].[Score_2] AS [Score_2], exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 16.0) / 3) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 16.0) / 3)) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_2], [AdaBoost_AVG_Scores_BN].[Score_3] AS [Score_3], exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 16.0) / 3) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 16.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 16.0) / 3)) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_3] 
FROM [AdaBoost_AVG_Scores_BN]), 
orig_cte AS 
(SELECT [AdaBoost_AVG_Scores].[KEY] AS [KEY], [AdaBoost_AVG_Scores].[Score_0] AS [Score_0], [AdaBoost_AVG_Scores].[Score_1] AS [Score_1], [AdaBoost_AVG_Scores].[Score_2] AS [Score_2], [AdaBoost_AVG_Scores].[Score_3] AS [Score_3], [AdaBoost_AVG_Scores].[Proba_0] AS [Proba_0], [AdaBoost_AVG_Scores].[Proba_1] AS [Proba_1], [AdaBoost_AVG_Scores].[Proba_2] AS [Proba_2], [AdaBoost_AVG_Scores].[Proba_3] AS [Proba_3], [AdaBoost_AVG_Scores].[LogProba_0] AS [LogProba_0], [AdaBoost_AVG_Scores].[LogProba_1] AS [LogProba_1], [AdaBoost_AVG_Scores].[LogProba_2] AS [LogProba_2], [AdaBoost_AVG_Scores].[LogProba_3] AS [LogProba_3], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba] 
FROM [AdaBoost_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] <= union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_max.[KEY] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision], CASE WHEN (arg_max_cte.[arg_max_Score] = 0) THEN arg_max_cte.[Proba_0] WHEN (arg_max_cte.[arg_max_Score] = 1) THEN arg_max_cte.[Proba_1] WHEN (arg_max_cte.[arg_max_Score] = 2) THEN arg_max_cte.[Proba_2] WHEN (arg_max_cte.[arg_max_Score] = 3) THEN arg_max_cte.[Proba_3] END AS [DecisionProba] 
FROM arg_max_cte