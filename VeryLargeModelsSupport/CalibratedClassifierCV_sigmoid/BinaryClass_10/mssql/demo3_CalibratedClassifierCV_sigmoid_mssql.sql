-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.


-- Code For temporary table ##TMP_20180329232446_O6XD28_CalProb_AVG_B0 part 1/2. Create 


CREATE TABLE ##TMP_20180329232446_O6XD28_CalProb_AVG_B0 (
	[KEY] BIGINT NULL, 
	[Proba_1] FLOAT NULL, 
	[Proba_0] FLOAT NULL
)


-- Code For temporary table ##TMP_20180329232446_O6XD28_CalProb_AVG_B0 part 2/2. Populate

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_9] <= 0.15286022424697876) THEN CASE WHEN ([ADS].[Feature_5] <= 2.3706862926483154) THEN CASE WHEN ([ADS].[Feature_5] <= -1.4731857776641846) THEN CASE WHEN ([ADS].[Feature_3] <= 0.8493471741676331) THEN 4 ELSE 5 END ELSE 6 END ELSE 7 END ELSE CASE WHEN ([ADS].[Feature_6] <= 1.9341034889221191) THEN 9 ELSE 10 END END AS node_id_2 
FROM [BinaryClass_10] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 4 AS depth, 3 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 25 AS count, 3 AS depth, 2 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 25 AS count, 2 AS depth, 8 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 2 AS depth, 8 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_0] AS [Proba_0], [DT_node_data].[LogProba_0] AS [LogProba_0], [DT_node_data].[Proba_1] AS [Proba_1], [DT_node_data].[LogProba_1] AS [LogProba_1], [DT_node_data].[Decision] AS [Decision], [DT_node_data].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
calibration_base_estimator_0 AS 
(SELECT [DT_Output].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output].[Proba_0] AS [Proba_0], [DT_Output].[Proba_1] AS [Proba_1], [DT_Output].[LogProba_0] AS [LogProba_0], [DT_Output].[LogProba_1] AS [LogProba_1], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output].[Proba_1]) AS [ScoreOrProba_1] 
FROM [DT_Output]), 
sigmoid_calibration_0 AS 
(SELECT calibration_base_estimator_0.[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(3.3640840384918076 * calibration_base_estimator_0.[ScoreOrProba_1] + -0.9661855827081625)) THEN -(3.3640840384918076 * calibration_base_estimator_0.[ScoreOrProba_1] + -0.9661855827081625) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(3.3640840384918076 * calibration_base_estimator_0.[ScoreOrProba_1] + -0.9661855827081625)) THEN -(3.3640840384918076 * calibration_base_estimator_0.[ScoreOrProba_1] + -0.9661855827081625) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_1], 1.0 - 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(3.3640840384918076 * calibration_base_estimator_0.[ScoreOrProba_1] + -0.9661855827081625)) THEN -(3.3640840384918076 * calibration_base_estimator_0.[ScoreOrProba_1] + -0.9661855827081625) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(3.3640840384918076 * calibration_base_estimator_0.[ScoreOrProba_1] + -0.9661855827081625)) THEN -(3.3640840384918076 * calibration_base_estimator_0.[ScoreOrProba_1] + -0.9661855827081625) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_0] 
FROM calibration_base_estimator_0), 
[Normalized_Probas] AS 
(SELECT sigmoid_calibration_0.[KEY] AS [KEY], sigmoid_calibration_0.[Proba_1] / (sigmoid_calibration_0.[Proba_0] + sigmoid_calibration_0.[Proba_1]) AS [Proba_1], sigmoid_calibration_0.[Proba_0] / (sigmoid_calibration_0.[Proba_0] + sigmoid_calibration_0.[Proba_1]) AS [Proba_0] 
FROM sigmoid_calibration_0), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_9] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_5] <= 2.3706862926483154) THEN CASE WHEN ([ADS].[Feature_2] <= 1.9229145050048828) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6463998556137085) THEN CASE WHEN ([ADS].[Feature_3] <= 1.2421400547027588) THEN 5 ELSE 6 END ELSE 7 END ELSE 8 END ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_5] <= 1.9280681610107422) THEN 11 ELSE 12 END END AS node_id_2 
FROM [BinaryClass_10] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 26 AS count, 5 AS depth, 4 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 4 AS parent_id, 0.75 AS [Proba_0], -0.2876820724517809 AS [LogProba_0], 0.25 AS [Proba_1], -1.3862943611198906 AS [LogProba_1], 0 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 22 AS count, 2 AS depth, 10 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 2 AS depth, 10 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Proba_0] AS [Proba_0], [DT_node_data_1].[LogProba_0] AS [LogProba_0], [DT_node_data_1].[Proba_1] AS [Proba_1], [DT_node_data_1].[LogProba_1] AS [LogProba_1], [DT_node_data_1].[Decision] AS [Decision], [DT_node_data_1].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
calibration_base_estimator_1 AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_1].[Proba_0] AS [Proba_0], [DT_Output_1].[Proba_1] AS [Proba_1], [DT_Output_1].[LogProba_0] AS [LogProba_0], [DT_Output_1].[LogProba_1] AS [LogProba_1], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_1].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_1].[Proba_1]) AS [ScoreOrProba_1] 
FROM [DT_Output_1]), 
sigmoid_calibration_1 AS 
(SELECT calibration_base_estimator_1.[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(2.7526301314605353 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.597109346935524)) THEN -(2.7526301314605353 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.597109346935524) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(2.7526301314605353 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.597109346935524)) THEN -(2.7526301314605353 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.597109346935524) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_1], 1.0 - 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(2.7526301314605353 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.597109346935524)) THEN -(2.7526301314605353 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.597109346935524) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(2.7526301314605353 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.597109346935524)) THEN -(2.7526301314605353 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.597109346935524) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_0] 
FROM calibration_base_estimator_1), 
[Normalized_Probas_1] AS 
(SELECT sigmoid_calibration_1.[KEY] AS [KEY], sigmoid_calibration_1.[Proba_1] / (sigmoid_calibration_1.[Proba_0] + sigmoid_calibration_1.[Proba_1]) AS [Proba_1], sigmoid_calibration_1.[Proba_0] / (sigmoid_calibration_1.[Proba_0] + sigmoid_calibration_1.[Proba_1]) AS [Proba_0] 
FROM sigmoid_calibration_1), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_9] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_5] <= 2.3706862926483154) THEN CASE WHEN ([ADS].[Feature_2] <= 1.9229145050048828) THEN CASE WHEN ([ADS].[Feature_3] <= 1.7716785669326782) THEN CASE WHEN ([ADS].[Feature_8] <= 1.0718297958374023) THEN 5 ELSE 6 END ELSE 7 END ELSE 8 END ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_6] <= 2.0320792198181152) THEN 11 ELSE 12 END END AS node_id_2 
FROM [BinaryClass_10] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 25 AS count, 5 AS depth, 4 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 4 AS parent_id, 0.8 AS [Proba_0], -0.2231435513142097 AS [LogProba_0], 0.2 AS [Proba_1], -1.6094379124341003 AS [LogProba_1], 0 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 23 AS count, 2 AS depth, 10 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 2 AS depth, 10 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Proba_0] AS [Proba_0], [DT_node_data_2].[LogProba_0] AS [LogProba_0], [DT_node_data_2].[Proba_1] AS [Proba_1], [DT_node_data_2].[LogProba_1] AS [LogProba_1], [DT_node_data_2].[Decision] AS [Decision], [DT_node_data_2].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
calibration_base_estimator_2 AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_2].[Proba_0] AS [Proba_0], [DT_Output_2].[Proba_1] AS [Proba_1], [DT_Output_2].[LogProba_0] AS [LogProba_0], [DT_Output_2].[LogProba_1] AS [LogProba_1], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_2].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_2].[Proba_1]) AS [ScoreOrProba_1] 
FROM [DT_Output_2]), 
sigmoid_calibration_2 AS 
(SELECT calibration_base_estimator_2.[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(3.650659014145948 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.2527629098223436)) THEN -(3.650659014145948 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.2527629098223436) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(3.650659014145948 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.2527629098223436)) THEN -(3.650659014145948 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.2527629098223436) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_1], 1.0 - 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(3.650659014145948 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.2527629098223436)) THEN -(3.650659014145948 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.2527629098223436) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(3.650659014145948 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.2527629098223436)) THEN -(3.650659014145948 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.2527629098223436) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_0] 
FROM calibration_base_estimator_2), 
[Normalized_Probas_2] AS 
(SELECT sigmoid_calibration_2.[KEY] AS [KEY], sigmoid_calibration_2.[Proba_1] / (sigmoid_calibration_2.[Proba_0] + sigmoid_calibration_2.[Proba_1]) AS [Proba_1], sigmoid_calibration_2.[Proba_0] / (sigmoid_calibration_2.[Proba_0] + sigmoid_calibration_2.[Proba_1]) AS [Proba_0] 
FROM sigmoid_calibration_2), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_9] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_6] <= 1.6239227056503296) THEN CASE WHEN ([ADS].[Feature_5] <= 2.391359567642212) THEN CASE WHEN ([ADS].[Feature_5] <= -1.4731857776641846) THEN CASE WHEN ([ADS].[Feature_0] <= 1.1504929065704346) THEN 5 ELSE 6 END ELSE 7 END ELSE 8 END ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_6] <= 1.9341034889221191) THEN CASE WHEN ([ADS].[Feature_9] <= -0.03950319066643715) THEN CASE WHEN ([ADS].[Feature_3] <= -0.09809866547584534) THEN 13 ELSE 14 END ELSE 15 END ELSE 16 END END AS node_id_2 
FROM [BinaryClass_10] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 5 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 5 AS depth, 4 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 24 AS count, 4 AS depth, 3 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 4 AS depth, 12 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 4 AS depth, 12 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 15 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 23 AS count, 3 AS depth, 11 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 2 AS depth, 10 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Proba_0] AS [Proba_0], [DT_node_data_3].[LogProba_0] AS [LogProba_0], [DT_node_data_3].[Proba_1] AS [Proba_1], [DT_node_data_3].[LogProba_1] AS [LogProba_1], [DT_node_data_3].[Decision] AS [Decision], [DT_node_data_3].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
calibration_base_estimator_3 AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [DT_Output_3].[Proba_0] AS [Proba_0], [DT_Output_3].[Proba_1] AS [Proba_1], [DT_Output_3].[LogProba_0] AS [LogProba_0], [DT_Output_3].[LogProba_1] AS [LogProba_1], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_3].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_3].[Proba_1]) AS [ScoreOrProba_1] 
FROM [DT_Output_3]), 
sigmoid_calibration_3 AS 
(SELECT calibration_base_estimator_3.[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(4.062903184000669 * calibration_base_estimator_3.[ScoreOrProba_1] + -2.3978968871297432)) THEN -(4.062903184000669 * calibration_base_estimator_3.[ScoreOrProba_1] + -2.3978968871297432) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(4.062903184000669 * calibration_base_estimator_3.[ScoreOrProba_1] + -2.3978968871297432)) THEN -(4.062903184000669 * calibration_base_estimator_3.[ScoreOrProba_1] + -2.3978968871297432) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_1], 1.0 - 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(4.062903184000669 * calibration_base_estimator_3.[ScoreOrProba_1] + -2.3978968871297432)) THEN -(4.062903184000669 * calibration_base_estimator_3.[ScoreOrProba_1] + -2.3978968871297432) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(4.062903184000669 * calibration_base_estimator_3.[ScoreOrProba_1] + -2.3978968871297432)) THEN -(4.062903184000669 * calibration_base_estimator_3.[ScoreOrProba_1] + -2.3978968871297432) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_0] 
FROM calibration_base_estimator_3), 
[Normalized_Probas_3] AS 
(SELECT sigmoid_calibration_3.[KEY] AS [KEY], sigmoid_calibration_3.[Proba_1] / (sigmoid_calibration_3.[Proba_0] + sigmoid_calibration_3.[Proba_1]) AS [Proba_1], sigmoid_calibration_3.[Proba_0] / (sigmoid_calibration_3.[Proba_0] + sigmoid_calibration_3.[Proba_1]) AS [Proba_0] 
FROM sigmoid_calibration_3)
 INSERT INTO ##TMP_20180329232446_O6XD28_CalProb_AVG_B0 ([KEY], [Proba_1], [Proba_0]) SELECT [CalProb_AVG_B0].[KEY], [CalProb_AVG_B0].[Proba_1], [CalProb_AVG_B0].[Proba_0] 
FROM (SELECT [CalProb_AVG_esu_0].[KEY] AS [KEY], [CalProb_AVG_esu_0].[Proba_1] AS [Proba_1], [CalProb_AVG_esu_0].[Proba_0] AS [Proba_0] 
FROM (SELECT [Normalized_Probas].[KEY] AS [KEY], [Normalized_Probas].[Proba_1] AS [Proba_1], [Normalized_Probas].[Proba_0] AS [Proba_0] 
FROM [Normalized_Probas] UNION ALL SELECT [Normalized_Probas_1].[KEY] AS [KEY], [Normalized_Probas_1].[Proba_1] AS [Proba_1], [Normalized_Probas_1].[Proba_0] AS [Proba_0] 
FROM [Normalized_Probas_1] UNION ALL SELECT [Normalized_Probas_2].[KEY] AS [KEY], [Normalized_Probas_2].[Proba_1] AS [Proba_1], [Normalized_Probas_2].[Proba_0] AS [Proba_0] 
FROM [Normalized_Probas_2] UNION ALL SELECT [Normalized_Probas_3].[KEY] AS [KEY], [Normalized_Probas_3].[Proba_1] AS [Proba_1], [Normalized_Probas_3].[Proba_0] AS [Proba_0] 
FROM [Normalized_Probas_3]) AS [CalProb_AVG_esu_0]) AS [CalProb_AVG_B0]
-- Code For temporary table ##TMP_20180329232446_L83222_CalProb_AVG_Union part 1/2. Create 


CREATE TABLE ##TMP_20180329232446_L83222_CalProb_AVG_Union (
	[KEY] BIGINT NULL, 
	[Proba_1] FLOAT NULL, 
	[Proba_0] FLOAT NULL
)


-- Code For temporary table ##TMP_20180329232446_L83222_CalProb_AVG_Union part 2/2. Populate

INSERT INTO ##TMP_20180329232446_L83222_CalProb_AVG_Union ([KEY], [Proba_1], [Proba_0]) SELECT [CalProb_AVG_Union].[KEY], [CalProb_AVG_Union].[Proba_1], [CalProb_AVG_Union].[Proba_0] 
FROM (SELECT [CalProb_AVG_EnsembleUnion].[KEY] AS [KEY], [CalProb_AVG_EnsembleUnion].[Proba_1] AS [Proba_1], [CalProb_AVG_EnsembleUnion].[Proba_0] AS [Proba_0] 
FROM (SELECT [CalProb_AVG_B0].[KEY] AS [KEY], [CalProb_AVG_B0].[Proba_1] AS [Proba_1], [CalProb_AVG_B0].[Proba_0] AS [Proba_0] 
FROM ##TMP_20180329232446_O6XD28_CalProb_AVG_B0 AS [CalProb_AVG_B0]) AS [CalProb_AVG_EnsembleUnion]) AS [CalProb_AVG_Union]

-- Model deployment code

WITH [CalProb_AVG_avg] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Proba_1] AS [Proba_1], [T].[Proba_0] AS [Proba_0] 
FROM (SELECT [CalProb_AVG_Union].[KEY] AS [KEY], avg(CAST([CalProb_AVG_Union].[Proba_1] AS FLOAT(53))) AS [Proba_1], avg(CAST([CalProb_AVG_Union].[Proba_0] AS FLOAT(53))) AS [Proba_0] 
FROM ##TMP_20180329232446_L83222_CalProb_AVG_Union AS [CalProb_AVG_Union] GROUP BY [CalProb_AVG_Union].[KEY]) AS [T]), 
orig_cte AS 
(SELECT [CalProb_AVG_avg].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], [CalProb_AVG_avg].[Proba_0] AS [Proba_0], [CalProb_AVG_avg].[Proba_1] AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba] 
FROM [CalProb_AVG_avg]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], min(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte