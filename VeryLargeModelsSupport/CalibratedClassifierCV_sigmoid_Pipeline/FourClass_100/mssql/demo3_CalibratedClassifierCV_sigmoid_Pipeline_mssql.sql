-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.


-- Code For temporary table ##TMP_20180329233129_OEIR27_ADS_imp_1_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180329233129_OEIR27_ADS_imp_1_OUT (
	[KEY] BIGINT NULL, 
	impter_2 FLOAT(53) NULL, 
	impter_3 FLOAT(53) NULL, 
	impter_4 FLOAT(53) NULL, 
	impter_5 FLOAT(53) NULL, 
	impter_6 FLOAT(53) NULL, 
	impter_7 FLOAT(53) NULL, 
	impter_8 FLOAT(53) NULL, 
	impter_9 FLOAT(53) NULL, 
	impter_10 FLOAT(53) NULL, 
	impter_11 FLOAT(53) NULL, 
	impter_12 FLOAT(53) NULL, 
	impter_13 FLOAT(53) NULL, 
	impter_14 FLOAT(53) NULL, 
	impter_15 FLOAT(53) NULL, 
	impter_16 FLOAT(53) NULL, 
	impter_17 FLOAT(53) NULL, 
	impter_18 FLOAT(53) NULL, 
	impter_19 FLOAT(53) NULL, 
	impter_20 FLOAT(53) NULL, 
	impter_21 FLOAT(53) NULL, 
	impter_22 FLOAT(53) NULL, 
	impter_23 FLOAT(53) NULL, 
	impter_24 FLOAT(53) NULL, 
	impter_25 FLOAT(53) NULL, 
	impter_26 FLOAT(53) NULL, 
	impter_27 FLOAT(53) NULL, 
	impter_28 FLOAT(53) NULL, 
	impter_29 FLOAT(53) NULL, 
	impter_30 FLOAT(53) NULL, 
	impter_31 FLOAT(53) NULL, 
	impter_32 FLOAT(53) NULL, 
	impter_33 FLOAT(53) NULL, 
	impter_34 FLOAT(53) NULL, 
	impter_35 FLOAT(53) NULL, 
	impter_36 FLOAT(53) NULL, 
	impter_37 FLOAT(53) NULL, 
	impter_38 FLOAT(53) NULL, 
	impter_39 FLOAT(53) NULL, 
	impter_40 FLOAT(53) NULL, 
	impter_41 FLOAT(53) NULL, 
	impter_42 FLOAT(53) NULL, 
	impter_43 FLOAT(53) NULL, 
	impter_44 FLOAT(53) NULL, 
	impter_45 FLOAT(53) NULL, 
	impter_46 FLOAT(53) NULL, 
	impter_47 FLOAT(53) NULL, 
	impter_48 FLOAT(53) NULL, 
	impter_49 FLOAT(53) NULL, 
	impter_50 FLOAT(53) NULL, 
	impter_51 FLOAT(53) NULL, 
	impter_52 FLOAT(53) NULL, 
	impter_53 FLOAT(53) NULL, 
	impter_54 FLOAT(53) NULL, 
	impter_55 FLOAT(53) NULL, 
	impter_56 FLOAT(53) NULL, 
	impter_57 FLOAT(53) NULL, 
	impter_58 FLOAT(53) NULL, 
	impter_59 FLOAT(53) NULL, 
	impter_60 FLOAT(53) NULL, 
	impter_61 FLOAT(53) NULL, 
	impter_62 FLOAT(53) NULL, 
	impter_63 FLOAT(53) NULL, 
	impter_64 FLOAT(53) NULL, 
	impter_65 FLOAT(53) NULL, 
	impter_66 FLOAT(53) NULL, 
	impter_67 FLOAT(53) NULL, 
	impter_68 FLOAT(53) NULL, 
	impter_69 FLOAT(53) NULL, 
	impter_70 FLOAT(53) NULL, 
	impter_71 FLOAT(53) NULL, 
	impter_72 FLOAT(53) NULL, 
	impter_73 FLOAT(53) NULL, 
	impter_74 FLOAT(53) NULL, 
	impter_75 FLOAT(53) NULL, 
	impter_76 FLOAT(53) NULL, 
	impter_77 FLOAT(53) NULL, 
	impter_78 FLOAT(53) NULL, 
	impter_79 FLOAT(53) NULL, 
	impter_80 FLOAT(53) NULL, 
	impter_81 FLOAT(53) NULL, 
	impter_82 FLOAT(53) NULL, 
	impter_83 FLOAT(53) NULL, 
	impter_84 FLOAT(53) NULL, 
	impter_85 FLOAT(53) NULL, 
	impter_86 FLOAT(53) NULL, 
	impter_87 FLOAT(53) NULL, 
	impter_88 FLOAT(53) NULL, 
	impter_89 FLOAT(53) NULL, 
	impter_90 FLOAT(53) NULL, 
	impter_91 FLOAT(53) NULL, 
	impter_92 FLOAT(53) NULL, 
	impter_93 FLOAT(53) NULL, 
	impter_94 FLOAT(53) NULL, 
	impter_95 FLOAT(53) NULL, 
	impter_96 FLOAT(53) NULL, 
	impter_97 FLOAT(53) NULL, 
	impter_98 FLOAT(53) NULL, 
	impter_99 FLOAT(53) NULL, 
	impter_100 FLOAT(53) NULL, 
	impter_101 FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329233129_OEIR27_ADS_imp_1_OUT part 2/2. Populate

INSERT INTO ##TMP_20180329233129_OEIR27_ADS_imp_1_OUT ([KEY], impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11, impter_12, impter_13, impter_14, impter_15, impter_16, impter_17, impter_18, impter_19, impter_20, impter_21, impter_22, impter_23, impter_24, impter_25, impter_26, impter_27, impter_28, impter_29, impter_30, impter_31, impter_32, impter_33, impter_34, impter_35, impter_36, impter_37, impter_38, impter_39, impter_40, impter_41, impter_42, impter_43, impter_44, impter_45, impter_46, impter_47, impter_48, impter_49, impter_50, impter_51, impter_52, impter_53, impter_54, impter_55, impter_56, impter_57, impter_58, impter_59, impter_60, impter_61, impter_62, impter_63, impter_64, impter_65, impter_66, impter_67, impter_68, impter_69, impter_70, impter_71, impter_72, impter_73, impter_74, impter_75, impter_76, impter_77, impter_78, impter_79, impter_80, impter_81, impter_82, impter_83, impter_84, impter_85, impter_86, impter_87, impter_88, impter_89, impter_90, impter_91, impter_92, impter_93, impter_94, impter_95, impter_96, impter_97, impter_98, impter_99, impter_100, impter_101) SELECT [ADS_imp_1_OUT].[KEY], [ADS_imp_1_OUT].impter_2, [ADS_imp_1_OUT].impter_3, [ADS_imp_1_OUT].impter_4, [ADS_imp_1_OUT].impter_5, [ADS_imp_1_OUT].impter_6, [ADS_imp_1_OUT].impter_7, [ADS_imp_1_OUT].impter_8, [ADS_imp_1_OUT].impter_9, [ADS_imp_1_OUT].impter_10, [ADS_imp_1_OUT].impter_11, [ADS_imp_1_OUT].impter_12, [ADS_imp_1_OUT].impter_13, [ADS_imp_1_OUT].impter_14, [ADS_imp_1_OUT].impter_15, [ADS_imp_1_OUT].impter_16, [ADS_imp_1_OUT].impter_17, [ADS_imp_1_OUT].impter_18, [ADS_imp_1_OUT].impter_19, [ADS_imp_1_OUT].impter_20, [ADS_imp_1_OUT].impter_21, [ADS_imp_1_OUT].impter_22, [ADS_imp_1_OUT].impter_23, [ADS_imp_1_OUT].impter_24, [ADS_imp_1_OUT].impter_25, [ADS_imp_1_OUT].impter_26, [ADS_imp_1_OUT].impter_27, [ADS_imp_1_OUT].impter_28, [ADS_imp_1_OUT].impter_29, [ADS_imp_1_OUT].impter_30, [ADS_imp_1_OUT].impter_31, [ADS_imp_1_OUT].impter_32, [ADS_imp_1_OUT].impter_33, [ADS_imp_1_OUT].impter_34, [ADS_imp_1_OUT].impter_35, [ADS_imp_1_OUT].impter_36, [ADS_imp_1_OUT].impter_37, [ADS_imp_1_OUT].impter_38, [ADS_imp_1_OUT].impter_39, [ADS_imp_1_OUT].impter_40, [ADS_imp_1_OUT].impter_41, [ADS_imp_1_OUT].impter_42, [ADS_imp_1_OUT].impter_43, [ADS_imp_1_OUT].impter_44, [ADS_imp_1_OUT].impter_45, [ADS_imp_1_OUT].impter_46, [ADS_imp_1_OUT].impter_47, [ADS_imp_1_OUT].impter_48, [ADS_imp_1_OUT].impter_49, [ADS_imp_1_OUT].impter_50, [ADS_imp_1_OUT].impter_51, [ADS_imp_1_OUT].impter_52, [ADS_imp_1_OUT].impter_53, [ADS_imp_1_OUT].impter_54, [ADS_imp_1_OUT].impter_55, [ADS_imp_1_OUT].impter_56, [ADS_imp_1_OUT].impter_57, [ADS_imp_1_OUT].impter_58, [ADS_imp_1_OUT].impter_59, [ADS_imp_1_OUT].impter_60, [ADS_imp_1_OUT].impter_61, [ADS_imp_1_OUT].impter_62, [ADS_imp_1_OUT].impter_63, [ADS_imp_1_OUT].impter_64, [ADS_imp_1_OUT].impter_65, [ADS_imp_1_OUT].impter_66, [ADS_imp_1_OUT].impter_67, [ADS_imp_1_OUT].impter_68, [ADS_imp_1_OUT].impter_69, [ADS_imp_1_OUT].impter_70, [ADS_imp_1_OUT].impter_71, [ADS_imp_1_OUT].impter_72, [ADS_imp_1_OUT].impter_73, [ADS_imp_1_OUT].impter_74, [ADS_imp_1_OUT].impter_75, [ADS_imp_1_OUT].impter_76, [ADS_imp_1_OUT].impter_77, [ADS_imp_1_OUT].impter_78, [ADS_imp_1_OUT].impter_79, [ADS_imp_1_OUT].impter_80, [ADS_imp_1_OUT].impter_81, [ADS_imp_1_OUT].impter_82, [ADS_imp_1_OUT].impter_83, [ADS_imp_1_OUT].impter_84, [ADS_imp_1_OUT].impter_85, [ADS_imp_1_OUT].impter_86, [ADS_imp_1_OUT].impter_87, [ADS_imp_1_OUT].impter_88, [ADS_imp_1_OUT].impter_89, [ADS_imp_1_OUT].impter_90, [ADS_imp_1_OUT].impter_91, [ADS_imp_1_OUT].impter_92, [ADS_imp_1_OUT].impter_93, [ADS_imp_1_OUT].impter_94, [ADS_imp_1_OUT].impter_95, [ADS_imp_1_OUT].impter_96, [ADS_imp_1_OUT].impter_97, [ADS_imp_1_OUT].impter_98, [ADS_imp_1_OUT].impter_99, [ADS_imp_1_OUT].impter_100, [ADS_imp_1_OUT].impter_101 
FROM (SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.006535740121159998 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.16767827125978743 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN -0.05514704173583139 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.0015211693051869056 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN 0.03142760191039923 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN 0.026179683178748685 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.011254713122120081 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN -0.016886211800947296 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN -0.027342702964496257 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN -0.16370127884822097 ELSE [ADS].[Feature_9] END AS impter_11, CASE WHEN ([ADS].[Feature_10] IS NULL) THEN 0.03541225073893643 ELSE [ADS].[Feature_10] END AS impter_12, CASE WHEN ([ADS].[Feature_11] IS NULL) THEN -0.028529123475633158 ELSE [ADS].[Feature_11] END AS impter_13, CASE WHEN ([ADS].[Feature_12] IS NULL) THEN -0.026749444989609742 ELSE [ADS].[Feature_12] END AS impter_14, CASE WHEN ([ADS].[Feature_13] IS NULL) THEN 0.38601982291131526 ELSE [ADS].[Feature_13] END AS impter_15, CASE WHEN ([ADS].[Feature_14] IS NULL) THEN 0.01621452573135814 ELSE [ADS].[Feature_14] END AS impter_16, CASE WHEN ([ADS].[Feature_15] IS NULL) THEN 0.22723775077839256 ELSE [ADS].[Feature_15] END AS impter_17, CASE WHEN ([ADS].[Feature_16] IS NULL) THEN 0.5663734566941232 ELSE [ADS].[Feature_16] END AS impter_18, CASE WHEN ([ADS].[Feature_17] IS NULL) THEN 0.2776964106161551 ELSE [ADS].[Feature_17] END AS impter_19, CASE WHEN ([ADS].[Feature_18] IS NULL) THEN 0.005994326812351447 ELSE [ADS].[Feature_18] END AS impter_20, CASE WHEN ([ADS].[Feature_19] IS NULL) THEN -0.021852534469692157 ELSE [ADS].[Feature_19] END AS impter_21, CASE WHEN ([ADS].[Feature_20] IS NULL) THEN -0.028375425917008895 ELSE [ADS].[Feature_20] END AS impter_22, CASE WHEN ([ADS].[Feature_21] IS NULL) THEN 0.015164323296291698 ELSE [ADS].[Feature_21] END AS impter_23, CASE WHEN ([ADS].[Feature_22] IS NULL) THEN 0.017469134548764743 ELSE [ADS].[Feature_22] END AS impter_24, CASE WHEN ([ADS].[Feature_23] IS NULL) THEN 0.03493909449429536 ELSE [ADS].[Feature_23] END AS impter_25, CASE WHEN ([ADS].[Feature_24] IS NULL) THEN -0.1443616076343936 ELSE [ADS].[Feature_24] END AS impter_26, CASE WHEN ([ADS].[Feature_25] IS NULL) THEN 0.1461046774436175 ELSE [ADS].[Feature_25] END AS impter_27, CASE WHEN ([ADS].[Feature_26] IS NULL) THEN 0.06761584237384538 ELSE [ADS].[Feature_26] END AS impter_28, CASE WHEN ([ADS].[Feature_27] IS NULL) THEN -0.3083684560804083 ELSE [ADS].[Feature_27] END AS impter_29, CASE WHEN ([ADS].[Feature_28] IS NULL) THEN 0.9525753017609152 ELSE [ADS].[Feature_28] END AS impter_30, CASE WHEN ([ADS].[Feature_29] IS NULL) THEN -0.05813383910109171 ELSE [ADS].[Feature_29] END AS impter_31, CASE WHEN ([ADS].[Feature_30] IS NULL) THEN -0.013124412714914525 ELSE [ADS].[Feature_30] END AS impter_32, CASE WHEN ([ADS].[Feature_31] IS NULL) THEN -0.3375512543306959 ELSE [ADS].[Feature_31] END AS impter_33, CASE WHEN ([ADS].[Feature_32] IS NULL) THEN 0.03902651459317101 ELSE [ADS].[Feature_32] END AS impter_34, CASE WHEN ([ADS].[Feature_33] IS NULL) THEN -0.0402939442131795 ELSE [ADS].[Feature_33] END AS impter_35, CASE WHEN ([ADS].[Feature_34] IS NULL) THEN -0.17161188573704908 ELSE [ADS].[Feature_34] END AS impter_36, CASE WHEN ([ADS].[Feature_35] IS NULL) THEN 0.012647786868640112 ELSE [ADS].[Feature_35] END AS impter_37, CASE WHEN ([ADS].[Feature_36] IS NULL) THEN 0.005193735308514513 ELSE [ADS].[Feature_36] END AS impter_38, CASE WHEN ([ADS].[Feature_37] IS NULL) THEN -0.017160876576937396 ELSE [ADS].[Feature_37] END AS impter_39, CASE WHEN ([ADS].[Feature_38] IS NULL) THEN 0.045036155997948996 ELSE [ADS].[Feature_38] END AS impter_40, CASE WHEN ([ADS].[Feature_39] IS NULL) THEN -0.12035820022636322 ELSE [ADS].[Feature_39] END AS impter_41, CASE WHEN ([ADS].[Feature_40] IS NULL) THEN -0.17640392282213266 ELSE [ADS].[Feature_40] END AS impter_42, CASE WHEN ([ADS].[Feature_41] IS NULL) THEN -0.015157075927040681 ELSE [ADS].[Feature_41] END AS impter_43, CASE WHEN ([ADS].[Feature_42] IS NULL) THEN -0.3068740190578085 ELSE [ADS].[Feature_42] END AS impter_44, CASE WHEN ([ADS].[Feature_43] IS NULL) THEN -0.04035458069305412 ELSE [ADS].[Feature_43] END AS impter_45, CASE WHEN ([ADS].[Feature_44] IS NULL) THEN -0.00789981512459992 ELSE [ADS].[Feature_44] END AS impter_46, CASE WHEN ([ADS].[Feature_45] IS NULL) THEN 0.002647932254171184 ELSE [ADS].[Feature_45] END AS impter_47, CASE WHEN ([ADS].[Feature_46] IS NULL) THEN -0.1492108459830671 ELSE [ADS].[Feature_46] END AS impter_48, CASE WHEN ([ADS].[Feature_47] IS NULL) THEN 0.24895399236878446 ELSE [ADS].[Feature_47] END AS impter_49, CASE WHEN ([ADS].[Feature_48] IS NULL) THEN -0.7004243979718509 ELSE [ADS].[Feature_48] END AS impter_50, CASE WHEN ([ADS].[Feature_49] IS NULL) THEN 0.025527673750135163 ELSE [ADS].[Feature_49] END AS impter_51, CASE WHEN ([ADS].[Feature_50] IS NULL) THEN -0.15642138685028584 ELSE [ADS].[Feature_50] END AS impter_52, CASE WHEN ([ADS].[Feature_51] IS NULL) THEN -0.12783857717811203 ELSE [ADS].[Feature_51] END AS impter_53, CASE WHEN ([ADS].[Feature_52] IS NULL) THEN -0.3698795238326839 ELSE [ADS].[Feature_52] END AS impter_54, CASE WHEN ([ADS].[Feature_53] IS NULL) THEN 0.04105474558890989 ELSE [ADS].[Feature_53] END AS impter_55, CASE WHEN ([ADS].[Feature_54] IS NULL) THEN -0.10047427531359215 ELSE [ADS].[Feature_54] END AS impter_56, CASE WHEN ([ADS].[Feature_55] IS NULL) THEN -0.1312728865356366 ELSE [ADS].[Feature_55] END AS impter_57, CASE WHEN ([ADS].[Feature_56] IS NULL) THEN 0.3685784313653654 ELSE [ADS].[Feature_56] END AS impter_58, CASE WHEN ([ADS].[Feature_57] IS NULL) THEN 0.22281246520596887 ELSE [ADS].[Feature_57] END AS impter_59, CASE WHEN ([ADS].[Feature_58] IS NULL) THEN -0.006274087618403553 ELSE [ADS].[Feature_58] END AS impter_60, CASE WHEN ([ADS].[Feature_59] IS NULL) THEN 0.014268598957774136 ELSE [ADS].[Feature_59] END AS impter_61, CASE WHEN ([ADS].[Feature_60] IS NULL) THEN -0.028545511573860538 ELSE [ADS].[Feature_60] END AS impter_62, CASE WHEN ([ADS].[Feature_61] IS NULL) THEN -0.4374918318496328 ELSE [ADS].[Feature_61] END AS impter_63, CASE WHEN ([ADS].[Feature_62] IS NULL) THEN -0.3689927805875731 ELSE [ADS].[Feature_62] END AS impter_64, CASE WHEN ([ADS].[Feature_63] IS NULL) THEN 0.0011690418193188894 ELSE [ADS].[Feature_63] END AS impter_65, CASE WHEN ([ADS].[Feature_64] IS NULL) THEN -0.011564873717580429 ELSE [ADS].[Feature_64] END AS impter_66, CASE WHEN ([ADS].[Feature_65] IS NULL) THEN -0.04358769989694412 ELSE [ADS].[Feature_65] END AS impter_67, CASE WHEN ([ADS].[Feature_66] IS NULL) THEN -0.1618634137390173 ELSE [ADS].[Feature_66] END AS impter_68, CASE WHEN ([ADS].[Feature_67] IS NULL) THEN -0.01727264153501617 ELSE [ADS].[Feature_67] END AS impter_69, CASE WHEN ([ADS].[Feature_68] IS NULL) THEN -0.36403022036864674 ELSE [ADS].[Feature_68] END AS impter_70, CASE WHEN ([ADS].[Feature_69] IS NULL) THEN -0.049273006502403176 ELSE [ADS].[Feature_69] END AS impter_71, CASE WHEN ([ADS].[Feature_70] IS NULL) THEN -0.015468512657334297 ELSE [ADS].[Feature_70] END AS impter_72, CASE WHEN ([ADS].[Feature_71] IS NULL) THEN -0.19162939351279548 ELSE [ADS].[Feature_71] END AS impter_73, CASE WHEN ([ADS].[Feature_72] IS NULL) THEN 0.023782830321603186 ELSE [ADS].[Feature_72] END AS impter_74, CASE WHEN ([ADS].[Feature_73] IS NULL) THEN 0.020454799672569742 ELSE [ADS].[Feature_73] END AS impter_75, CASE WHEN ([ADS].[Feature_74] IS NULL) THEN -0.17335534659313448 ELSE [ADS].[Feature_74] END AS impter_76, CASE WHEN ([ADS].[Feature_75] IS NULL) THEN 0.02758228824576348 ELSE [ADS].[Feature_75] END AS impter_77, CASE WHEN ([ADS].[Feature_76] IS NULL) THEN -0.015452336678168777 ELSE [ADS].[Feature_76] END AS impter_78, CASE WHEN ([ADS].[Feature_77] IS NULL) THEN -0.0425555457732581 ELSE [ADS].[Feature_77] END AS impter_79, CASE WHEN ([ADS].[Feature_78] IS NULL) THEN -0.009425736580365328 ELSE [ADS].[Feature_78] END AS impter_80, CASE WHEN ([ADS].[Feature_79] IS NULL) THEN 0.007423677489325057 ELSE [ADS].[Feature_79] END AS impter_81, CASE WHEN ([ADS].[Feature_80] IS NULL) THEN 0.0498533264368169 ELSE [ADS].[Feature_80] END AS impter_82, CASE WHEN ([ADS].[Feature_81] IS NULL) THEN 0.027960221179443 ELSE [ADS].[Feature_81] END AS impter_83, CASE WHEN ([ADS].[Feature_82] IS NULL) THEN -0.005270502487579236 ELSE [ADS].[Feature_82] END AS impter_84, CASE WHEN ([ADS].[Feature_83] IS NULL) THEN -0.053393611774246875 ELSE [ADS].[Feature_83] END AS impter_85, CASE WHEN ([ADS].[Feature_84] IS NULL) THEN 0.17162033288561043 ELSE [ADS].[Feature_84] END AS impter_86, CASE WHEN ([ADS].[Feature_85] IS NULL) THEN 0.037211997007404414 ELSE [ADS].[Feature_85] END AS impter_87, CASE WHEN ([ADS].[Feature_86] IS NULL) THEN 0.01843497333044896 ELSE [ADS].[Feature_86] END AS impter_88, CASE WHEN ([ADS].[Feature_87] IS NULL) THEN 0.5605216326173627 ELSE [ADS].[Feature_87] END AS impter_89, CASE WHEN ([ADS].[Feature_88] IS NULL) THEN -0.05285046291900049 ELSE [ADS].[Feature_88] END AS impter_90, CASE WHEN ([ADS].[Feature_89] IS NULL) THEN 0.07939021734244131 ELSE [ADS].[Feature_89] END AS impter_91, CASE WHEN ([ADS].[Feature_90] IS NULL) THEN -2.088667163118704 ELSE [ADS].[Feature_90] END AS impter_92, CASE WHEN ([ADS].[Feature_91] IS NULL) THEN -1.0831020638954625 ELSE [ADS].[Feature_91] END AS impter_93, CASE WHEN ([ADS].[Feature_92] IS NULL) THEN -0.30470236282124374 ELSE [ADS].[Feature_92] END AS impter_94, CASE WHEN ([ADS].[Feature_93] IS NULL) THEN -0.9354262595637257 ELSE [ADS].[Feature_93] END AS impter_95, CASE WHEN ([ADS].[Feature_94] IS NULL) THEN -0.09841121992703274 ELSE [ADS].[Feature_94] END AS impter_96, CASE WHEN ([ADS].[Feature_95] IS NULL) THEN -0.5316534843603434 ELSE [ADS].[Feature_95] END AS impter_97, CASE WHEN ([ADS].[Feature_96] IS NULL) THEN 0.014127422137804999 ELSE [ADS].[Feature_96] END AS impter_98, CASE WHEN ([ADS].[Feature_97] IS NULL) THEN -0.012631277412677116 ELSE [ADS].[Feature_97] END AS impter_99, CASE WHEN ([ADS].[Feature_98] IS NULL) THEN 0.031286881233113274 ELSE [ADS].[Feature_98] END AS impter_100, CASE WHEN ([ADS].[Feature_99] IS NULL) THEN -0.45039051538460234 ELSE [ADS].[Feature_99] END AS impter_101 
FROM [FourClass_100] AS [ADS]) AS [ADS_imp_1_OUT]
-- Code For temporary table ##TMP_20180329233129_5XS2HF_ADS_sca_2_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180329233129_5XS2HF_ADS_sca_2_OUT (
	[KEY] BIGINT NULL, 
	scaler_2 FLOAT NULL, 
	scaler_3 FLOAT NULL, 
	scaler_4 FLOAT NULL, 
	scaler_5 FLOAT NULL, 
	scaler_6 FLOAT NULL, 
	scaler_7 FLOAT NULL, 
	scaler_8 FLOAT NULL, 
	scaler_9 FLOAT NULL, 
	scaler_10 FLOAT NULL, 
	scaler_11 FLOAT NULL, 
	scaler_12 FLOAT NULL, 
	scaler_13 FLOAT NULL, 
	scaler_14 FLOAT NULL, 
	scaler_15 FLOAT NULL, 
	scaler_16 FLOAT NULL, 
	scaler_17 FLOAT NULL, 
	scaler_18 FLOAT NULL, 
	scaler_19 FLOAT NULL, 
	scaler_20 FLOAT NULL, 
	scaler_21 FLOAT NULL, 
	scaler_22 FLOAT NULL, 
	scaler_23 FLOAT NULL, 
	scaler_24 FLOAT NULL, 
	scaler_25 FLOAT NULL, 
	scaler_26 FLOAT NULL, 
	scaler_27 FLOAT NULL, 
	scaler_28 FLOAT NULL, 
	scaler_29 FLOAT NULL, 
	scaler_30 FLOAT NULL, 
	scaler_31 FLOAT NULL, 
	scaler_32 FLOAT NULL, 
	scaler_33 FLOAT NULL, 
	scaler_34 FLOAT NULL, 
	scaler_35 FLOAT NULL, 
	scaler_36 FLOAT NULL, 
	scaler_37 FLOAT NULL, 
	scaler_38 FLOAT NULL, 
	scaler_39 FLOAT NULL, 
	scaler_40 FLOAT NULL, 
	scaler_41 FLOAT NULL, 
	scaler_42 FLOAT NULL, 
	scaler_43 FLOAT NULL, 
	scaler_44 FLOAT NULL, 
	scaler_45 FLOAT NULL, 
	scaler_46 FLOAT NULL, 
	scaler_47 FLOAT NULL, 
	scaler_48 FLOAT NULL, 
	scaler_49 FLOAT NULL, 
	scaler_50 FLOAT NULL, 
	scaler_51 FLOAT NULL, 
	scaler_52 FLOAT NULL, 
	scaler_53 FLOAT NULL, 
	scaler_54 FLOAT NULL, 
	scaler_55 FLOAT NULL, 
	scaler_56 FLOAT NULL, 
	scaler_57 FLOAT NULL, 
	scaler_58 FLOAT NULL, 
	scaler_59 FLOAT NULL, 
	scaler_60 FLOAT NULL, 
	scaler_61 FLOAT NULL, 
	scaler_62 FLOAT NULL, 
	scaler_63 FLOAT NULL, 
	scaler_64 FLOAT NULL, 
	scaler_65 FLOAT NULL, 
	scaler_66 FLOAT NULL, 
	scaler_67 FLOAT NULL, 
	scaler_68 FLOAT NULL, 
	scaler_69 FLOAT NULL, 
	scaler_70 FLOAT NULL, 
	scaler_71 FLOAT NULL, 
	scaler_72 FLOAT NULL, 
	scaler_73 FLOAT NULL, 
	scaler_74 FLOAT NULL, 
	scaler_75 FLOAT NULL, 
	scaler_76 FLOAT NULL, 
	scaler_77 FLOAT NULL, 
	scaler_78 FLOAT NULL, 
	scaler_79 FLOAT NULL, 
	scaler_80 FLOAT NULL, 
	scaler_81 FLOAT NULL, 
	scaler_82 FLOAT NULL, 
	scaler_83 FLOAT NULL, 
	scaler_84 FLOAT NULL, 
	scaler_85 FLOAT NULL, 
	scaler_86 FLOAT NULL, 
	scaler_87 FLOAT NULL, 
	scaler_88 FLOAT NULL, 
	scaler_89 FLOAT NULL, 
	scaler_90 FLOAT NULL, 
	scaler_91 FLOAT NULL, 
	scaler_92 FLOAT NULL, 
	scaler_93 FLOAT NULL, 
	scaler_94 FLOAT NULL, 
	scaler_95 FLOAT NULL, 
	scaler_96 FLOAT NULL, 
	scaler_97 FLOAT NULL, 
	scaler_98 FLOAT NULL, 
	scaler_99 FLOAT NULL, 
	scaler_100 FLOAT NULL, 
	scaler_101 FLOAT NULL
)


-- Code For temporary table ##TMP_20180329233129_5XS2HF_ADS_sca_2_OUT part 2/2. Populate

INSERT INTO ##TMP_20180329233129_5XS2HF_ADS_sca_2_OUT ([KEY], scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65, scaler_66, scaler_67, scaler_68, scaler_69, scaler_70, scaler_71, scaler_72, scaler_73, scaler_74, scaler_75, scaler_76, scaler_77, scaler_78, scaler_79, scaler_80, scaler_81, scaler_82, scaler_83, scaler_84, scaler_85, scaler_86, scaler_87, scaler_88, scaler_89, scaler_90, scaler_91, scaler_92, scaler_93, scaler_94, scaler_95, scaler_96, scaler_97, scaler_98, scaler_99, scaler_100, scaler_101) SELECT [ADS_sca_2_OUT].[KEY], [ADS_sca_2_OUT].scaler_2, [ADS_sca_2_OUT].scaler_3, [ADS_sca_2_OUT].scaler_4, [ADS_sca_2_OUT].scaler_5, [ADS_sca_2_OUT].scaler_6, [ADS_sca_2_OUT].scaler_7, [ADS_sca_2_OUT].scaler_8, [ADS_sca_2_OUT].scaler_9, [ADS_sca_2_OUT].scaler_10, [ADS_sca_2_OUT].scaler_11, [ADS_sca_2_OUT].scaler_12, [ADS_sca_2_OUT].scaler_13, [ADS_sca_2_OUT].scaler_14, [ADS_sca_2_OUT].scaler_15, [ADS_sca_2_OUT].scaler_16, [ADS_sca_2_OUT].scaler_17, [ADS_sca_2_OUT].scaler_18, [ADS_sca_2_OUT].scaler_19, [ADS_sca_2_OUT].scaler_20, [ADS_sca_2_OUT].scaler_21, [ADS_sca_2_OUT].scaler_22, [ADS_sca_2_OUT].scaler_23, [ADS_sca_2_OUT].scaler_24, [ADS_sca_2_OUT].scaler_25, [ADS_sca_2_OUT].scaler_26, [ADS_sca_2_OUT].scaler_27, [ADS_sca_2_OUT].scaler_28, [ADS_sca_2_OUT].scaler_29, [ADS_sca_2_OUT].scaler_30, [ADS_sca_2_OUT].scaler_31, [ADS_sca_2_OUT].scaler_32, [ADS_sca_2_OUT].scaler_33, [ADS_sca_2_OUT].scaler_34, [ADS_sca_2_OUT].scaler_35, [ADS_sca_2_OUT].scaler_36, [ADS_sca_2_OUT].scaler_37, [ADS_sca_2_OUT].scaler_38, [ADS_sca_2_OUT].scaler_39, [ADS_sca_2_OUT].scaler_40, [ADS_sca_2_OUT].scaler_41, [ADS_sca_2_OUT].scaler_42, [ADS_sca_2_OUT].scaler_43, [ADS_sca_2_OUT].scaler_44, [ADS_sca_2_OUT].scaler_45, [ADS_sca_2_OUT].scaler_46, [ADS_sca_2_OUT].scaler_47, [ADS_sca_2_OUT].scaler_48, [ADS_sca_2_OUT].scaler_49, [ADS_sca_2_OUT].scaler_50, [ADS_sca_2_OUT].scaler_51, [ADS_sca_2_OUT].scaler_52, [ADS_sca_2_OUT].scaler_53, [ADS_sca_2_OUT].scaler_54, [ADS_sca_2_OUT].scaler_55, [ADS_sca_2_OUT].scaler_56, [ADS_sca_2_OUT].scaler_57, [ADS_sca_2_OUT].scaler_58, [ADS_sca_2_OUT].scaler_59, [ADS_sca_2_OUT].scaler_60, [ADS_sca_2_OUT].scaler_61, [ADS_sca_2_OUT].scaler_62, [ADS_sca_2_OUT].scaler_63, [ADS_sca_2_OUT].scaler_64, [ADS_sca_2_OUT].scaler_65, [ADS_sca_2_OUT].scaler_66, [ADS_sca_2_OUT].scaler_67, [ADS_sca_2_OUT].scaler_68, [ADS_sca_2_OUT].scaler_69, [ADS_sca_2_OUT].scaler_70, [ADS_sca_2_OUT].scaler_71, [ADS_sca_2_OUT].scaler_72, [ADS_sca_2_OUT].scaler_73, [ADS_sca_2_OUT].scaler_74, [ADS_sca_2_OUT].scaler_75, [ADS_sca_2_OUT].scaler_76, [ADS_sca_2_OUT].scaler_77, [ADS_sca_2_OUT].scaler_78, [ADS_sca_2_OUT].scaler_79, [ADS_sca_2_OUT].scaler_80, [ADS_sca_2_OUT].scaler_81, [ADS_sca_2_OUT].scaler_82, [ADS_sca_2_OUT].scaler_83, [ADS_sca_2_OUT].scaler_84, [ADS_sca_2_OUT].scaler_85, [ADS_sca_2_OUT].scaler_86, [ADS_sca_2_OUT].scaler_87, [ADS_sca_2_OUT].scaler_88, [ADS_sca_2_OUT].scaler_89, [ADS_sca_2_OUT].scaler_90, [ADS_sca_2_OUT].scaler_91, [ADS_sca_2_OUT].scaler_92, [ADS_sca_2_OUT].scaler_93, [ADS_sca_2_OUT].scaler_94, [ADS_sca_2_OUT].scaler_95, [ADS_sca_2_OUT].scaler_96, [ADS_sca_2_OUT].scaler_97, [ADS_sca_2_OUT].scaler_98, [ADS_sca_2_OUT].scaler_99, [ADS_sca_2_OUT].scaler_100, [ADS_sca_2_OUT].scaler_101 
FROM (SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT(53)) - 0.006535740121159998) / 0.9858217119194165 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT(53)) - 0.16767827125978743) / 4.178932779057346 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT(53)) - -0.05514704173583139) / 4.08515606391014 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT(53)) - 0.0015211693051869056) / 1.0583994221255881 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT(53)) - 0.03142760191039923) / 0.9585029014041677 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT(53)) - 0.026179683178748685) / 0.9938548077153438 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT(53)) - -0.011254713122120081) / 0.9959455996367279 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT(53)) - -0.016886211800947296) / 1.0454296780346695 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT(53)) - -0.027342702964496257) / 4.3313567418204935 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT(53)) - -0.16370127884822097) / 4.458898205934484 AS scaler_11, (CAST([ADS_imp_1_OUT].impter_12 AS FLOAT(53)) - 0.03541225073893643) / 1.036616487810755 AS scaler_12, (CAST([ADS_imp_1_OUT].impter_13 AS FLOAT(53)) - -0.028529123475633158) / 1.0046762055522975 AS scaler_13, (CAST([ADS_imp_1_OUT].impter_14 AS FLOAT(53)) - -0.026749444989609742) / 0.9996240267100583 AS scaler_14, (CAST([ADS_imp_1_OUT].impter_15 AS FLOAT(53)) - 0.38601982291131526) / 4.1448047865184865 AS scaler_15, (CAST([ADS_imp_1_OUT].impter_16 AS FLOAT(53)) - 0.01621452573135814) / 1.0172812966673987 AS scaler_16, (CAST([ADS_imp_1_OUT].impter_17 AS FLOAT(53)) - 0.22723775077839256) / 4.367112620179618 AS scaler_17, (CAST([ADS_imp_1_OUT].impter_18 AS FLOAT(53)) - 0.5663734566941232) / 4.118156884045948 AS scaler_18, (CAST([ADS_imp_1_OUT].impter_19 AS FLOAT(53)) - 0.2776964106161551) / 4.014328975715426 AS scaler_19, (CAST([ADS_imp_1_OUT].impter_20 AS FLOAT(53)) - 0.005994326812351447) / 0.9724395023210792 AS scaler_20, (CAST([ADS_imp_1_OUT].impter_21 AS FLOAT(53)) - -0.021852534469692157) / 0.9856875177263738 AS scaler_21, (CAST([ADS_imp_1_OUT].impter_22 AS FLOAT(53)) - -0.028375425917008895) / 1.023103469868883 AS scaler_22, (CAST([ADS_imp_1_OUT].impter_23 AS FLOAT(53)) - 0.015164323296291698) / 4.3531451691819925 AS scaler_23, (CAST([ADS_imp_1_OUT].impter_24 AS FLOAT(53)) - 0.017469134548764743) / 1.0018056542687617 AS scaler_24, (CAST([ADS_imp_1_OUT].impter_25 AS FLOAT(53)) - 0.03493909449429536) / 0.9927216497675313 AS scaler_25, (CAST([ADS_imp_1_OUT].impter_26 AS FLOAT(53)) - -0.1443616076343936) / 4.467397668863504 AS scaler_26, (CAST([ADS_imp_1_OUT].impter_27 AS FLOAT(53)) - 0.1461046774436175) / 4.107342778563649 AS scaler_27, (CAST([ADS_imp_1_OUT].impter_28 AS FLOAT(53)) - 0.06761584237384538) / 4.277643036456077 AS scaler_28, (CAST([ADS_imp_1_OUT].impter_29 AS FLOAT(53)) - -0.3083684560804083) / 4.030195686259092 AS scaler_29, (CAST([ADS_imp_1_OUT].impter_30 AS FLOAT(53)) - 0.9525753017609152) / 4.017302623019134 AS scaler_30, (CAST([ADS_imp_1_OUT].impter_31 AS FLOAT(53)) - -0.05813383910109171) / 4.03353195749377 AS scaler_31, (CAST([ADS_imp_1_OUT].impter_32 AS FLOAT(53)) - -0.013124412714914525) / 0.9551987815662824 AS scaler_32, (CAST([ADS_imp_1_OUT].impter_33 AS FLOAT(53)) - -0.3375512543306959) / 4.106571680414476 AS scaler_33, (CAST([ADS_imp_1_OUT].impter_34 AS FLOAT(53)) - 0.03902651459317101) / 0.9903592253368643 AS scaler_34, (CAST([ADS_imp_1_OUT].impter_35 AS FLOAT(53)) - -0.0402939442131795) / 1.015296116761204 AS scaler_35, (CAST([ADS_imp_1_OUT].impter_36 AS FLOAT(53)) - -0.17161188573704908) / 4.179229563019859 AS scaler_36, (CAST([ADS_imp_1_OUT].impter_37 AS FLOAT(53)) - 0.012647786868640112) / 1.0078307618647784 AS scaler_37, (CAST([ADS_imp_1_OUT].impter_38 AS FLOAT(53)) - 0.005193735308514513) / 4.297332183672823 AS scaler_38, (CAST([ADS_imp_1_OUT].impter_39 AS FLOAT(53)) - -0.017160876576937396) / 1.0173788557066636 AS scaler_39, (CAST([ADS_imp_1_OUT].impter_40 AS FLOAT(53)) - 0.045036155997948996) / 3.904281136786187 AS scaler_40, (CAST([ADS_imp_1_OUT].impter_41 AS FLOAT(53)) - -0.12035820022636322) / 3.9840286036228636 AS scaler_41, (CAST([ADS_imp_1_OUT].impter_42 AS FLOAT(53)) - -0.17640392282213266) / 4.069314637621373 AS scaler_42, (CAST([ADS_imp_1_OUT].impter_43 AS FLOAT(53)) - -0.015157075927040681) / 1.0291573895450885 AS scaler_43, (CAST([ADS_imp_1_OUT].impter_44 AS FLOAT(53)) - -0.3068740190578085) / 4.347912512213832 AS scaler_44, (CAST([ADS_imp_1_OUT].impter_45 AS FLOAT(53)) - -0.04035458069305412) / 4.050643773807161 AS scaler_45, (CAST([ADS_imp_1_OUT].impter_46 AS FLOAT(53)) - -0.00789981512459992) / 1.0063754765912263 AS scaler_46, (CAST([ADS_imp_1_OUT].impter_47 AS FLOAT(53)) - 0.002647932254171184) / 1.0021447755850712 AS scaler_47, (CAST([ADS_imp_1_OUT].impter_48 AS FLOAT(53)) - -0.1492108459830671) / 4.103402009893949 AS scaler_48, (CAST([ADS_imp_1_OUT].impter_49 AS FLOAT(53)) - 0.24895399236878446) / 4.232200380326287 AS scaler_49, (CAST([ADS_imp_1_OUT].impter_50 AS FLOAT(53)) - -0.7004243979718509) / 4.220766541993596 AS scaler_50, (CAST([ADS_imp_1_OUT].impter_51 AS FLOAT(53)) - 0.025527673750135163) / 1.0206740927253968 AS scaler_51, (CAST([ADS_imp_1_OUT].impter_52 AS FLOAT(53)) - -0.15642138685028584) / 4.078310671245767 AS scaler_52, (CAST([ADS_imp_1_OUT].impter_53 AS FLOAT(53)) - -0.12783857717811203) / 4.247236801364965 AS scaler_53, (CAST([ADS_imp_1_OUT].impter_54 AS FLOAT(53)) - -0.3698795238326839) / 4.037675848477055 AS scaler_54, (CAST([ADS_imp_1_OUT].impter_55 AS FLOAT(53)) - 0.04105474558890989) / 4.445571371438813 AS scaler_55, (CAST([ADS_imp_1_OUT].impter_56 AS FLOAT(53)) - -0.10047427531359215) / 4.045836826444957 AS scaler_56, (CAST([ADS_imp_1_OUT].impter_57 AS FLOAT(53)) - -0.1312728865356366) / 4.256606009499921 AS scaler_57, (CAST([ADS_imp_1_OUT].impter_58 AS FLOAT(53)) - 0.3685784313653654) / 4.04294690880675 AS scaler_58, (CAST([ADS_imp_1_OUT].impter_59 AS FLOAT(53)) - 0.22281246520596887) / 4.252398068764952 AS scaler_59, (CAST([ADS_imp_1_OUT].impter_60 AS FLOAT(53)) - -0.006274087618403553) / 1.013175429895288 AS scaler_60, (CAST([ADS_imp_1_OUT].impter_61 AS FLOAT(53)) - 0.014268598957774136) / 0.9752324561731636 AS scaler_61, (CAST([ADS_imp_1_OUT].impter_62 AS FLOAT(53)) - -0.028545511573860538) / 0.9960176612179306 AS scaler_62, (CAST([ADS_imp_1_OUT].impter_63 AS FLOAT(53)) - -0.4374918318496328) / 4.2387592565605035 AS scaler_63, (CAST([ADS_imp_1_OUT].impter_64 AS FLOAT(53)) - -0.3689927805875731) / 4.18274187652401 AS scaler_64, (CAST([ADS_imp_1_OUT].impter_65 AS FLOAT(53)) - 0.0011690418193188894) / 1.0433365249916253 AS scaler_65, (CAST([ADS_imp_1_OUT].impter_66 AS FLOAT(53)) - -0.011564873717580429) / 4.081504294152238 AS scaler_66, (CAST([ADS_imp_1_OUT].impter_67 AS FLOAT(53)) - -0.04358769989694412) / 1.058664519012294 AS scaler_67, (CAST([ADS_imp_1_OUT].impter_68 AS FLOAT(53)) - -0.1618634137390173) / 4.259666235165136 AS scaler_68, (CAST([ADS_imp_1_OUT].impter_69 AS FLOAT(53)) - -0.01727264153501617) / 1.0103058334402957 AS scaler_69, (CAST([ADS_imp_1_OUT].impter_70 AS FLOAT(53)) - -0.36403022036864674) / 4.23529048916204 AS scaler_70, (CAST([ADS_imp_1_OUT].impter_71 AS FLOAT(53)) - -0.049273006502403176) / 4.310802365306347 AS scaler_71, (CAST([ADS_imp_1_OUT].impter_72 AS FLOAT(53)) - -0.015468512657334297) / 1.010660801531323 AS scaler_72, (CAST([ADS_imp_1_OUT].impter_73 AS FLOAT(53)) - -0.19162939351279548) / 4.1160449655484435 AS scaler_73, (CAST([ADS_imp_1_OUT].impter_74 AS FLOAT(53)) - 0.023782830321603186) / 0.997185935238241 AS scaler_74, (CAST([ADS_imp_1_OUT].impter_75 AS FLOAT(53)) - 0.020454799672569742) / 0.9640474876793701 AS scaler_75, (CAST([ADS_imp_1_OUT].impter_76 AS FLOAT(53)) - -0.17335534659313448) / 4.268840083291991 AS scaler_76, (CAST([ADS_imp_1_OUT].impter_77 AS FLOAT(53)) - 0.02758228824576348) / 1.0028736371502236 AS scaler_77, (CAST([ADS_imp_1_OUT].impter_78 AS FLOAT(53)) - -0.015452336678168777) / 0.9517969728776562 AS scaler_78, (CAST([ADS_imp_1_OUT].impter_79 AS FLOAT(53)) - -0.0425555457732581) / 1.026041980115793 AS scaler_79, (CAST([ADS_imp_1_OUT].impter_80 AS FLOAT(53)) - -0.009425736580365328) / 0.9815479331628068 AS scaler_80, (CAST([ADS_imp_1_OUT].impter_81 AS FLOAT(53)) - 0.007423677489325057) / 1.0171447637961626 AS scaler_81, (CAST([ADS_imp_1_OUT].impter_82 AS FLOAT(53)) - 0.0498533264368169) / 1.013812175189716 AS scaler_82, (CAST([ADS_imp_1_OUT].impter_83 AS FLOAT(53)) - 0.027960221179443) / 1.0049331087863325 AS scaler_83, (CAST([ADS_imp_1_OUT].impter_84 AS FLOAT(53)) - -0.005270502487579236) / 1.0233252849148293 AS scaler_84, (CAST([ADS_imp_1_OUT].impter_85 AS FLOAT(53)) - -0.053393611774246875) / 1.0045891919932883 AS scaler_85, (CAST([ADS_imp_1_OUT].impter_86 AS FLOAT(53)) - 0.17162033288561043) / 4.2488442757828695 AS scaler_86, (CAST([ADS_imp_1_OUT].impter_87 AS FLOAT(53)) - 0.037211997007404414) / 4.254048583081737 AS scaler_87, (CAST([ADS_imp_1_OUT].impter_88 AS FLOAT(53)) - 0.01843497333044896) / 3.9497288408894384 AS scaler_88, (CAST([ADS_imp_1_OUT].impter_89 AS FLOAT(53)) - 0.5605216326173627) / 4.331332438981666 AS scaler_89, (CAST([ADS_imp_1_OUT].impter_90 AS FLOAT(53)) - -0.05285046291900049) / 1.0358397102155001 AS scaler_90, (CAST([ADS_imp_1_OUT].impter_91 AS FLOAT(53)) - 0.07939021734244131) / 0.9698764460278291 AS scaler_91, (CAST([ADS_imp_1_OUT].impter_92 AS FLOAT(53)) - -2.088667163118704) / 15.30221524651991 AS scaler_92, (CAST([ADS_imp_1_OUT].impter_93 AS FLOAT(53)) - -1.0831020638954625) / 4.3671090202705205 AS scaler_93, (CAST([ADS_imp_1_OUT].impter_94 AS FLOAT(53)) - -0.30470236282124374) / 4.204292362348631 AS scaler_94, (CAST([ADS_imp_1_OUT].impter_95 AS FLOAT(53)) - -0.9354262595637257) / 15.357005766716696 AS scaler_95, (CAST([ADS_imp_1_OUT].impter_96 AS FLOAT(53)) - -0.09841121992703274) / 0.952484869943965 AS scaler_96, (CAST([ADS_imp_1_OUT].impter_97 AS FLOAT(53)) - -0.5316534843603434) / 3.977000718240084 AS scaler_97, (CAST([ADS_imp_1_OUT].impter_98 AS FLOAT(53)) - 0.014127422137804999) / 0.9879258925411053 AS scaler_98, (CAST([ADS_imp_1_OUT].impter_99 AS FLOAT(53)) - -0.012631277412677116) / 1.0151964448341175 AS scaler_99, (CAST([ADS_imp_1_OUT].impter_100 AS FLOAT(53)) - 0.031286881233113274) / 0.9893618024210226 AS scaler_100, (CAST([ADS_imp_1_OUT].impter_101 AS FLOAT(53)) - -0.45039051538460234) / 4.244700325091397 AS scaler_101 
FROM ##TMP_20180329233129_OEIR27_ADS_imp_1_OUT AS [ADS_imp_1_OUT]) AS [ADS_sca_2_OUT]
-- Code For temporary table ##TMP_20180329233130_HLVV99_CalProb_AVG_B0 part 1/2. Create 


CREATE TABLE ##TMP_20180329233130_HLVV99_CalProb_AVG_B0 (
	[KEY] BIGINT NULL, 
	[Proba_0] FLOAT NULL, 
	[Proba_1] FLOAT NULL, 
	[Proba_2] FLOAT NULL, 
	[Proba_3] FLOAT NULL
)


-- Code For temporary table ##TMP_20180329233130_HLVV99_CalProb_AVG_B0 part 2/2. Populate

WITH [DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_66 <= -0.24924510717391968) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_44 <= -1.0560027360916138) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= -0.14678408205509186) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_69 <= 0.8121598958969116) THEN 4 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_79 <= 1.725360631942749) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_82 <= 0.9090859889984131) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_57 <= 1.8674782514572144) THEN 10 ELSE 11 END ELSE 12 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_15 <= 0.08239147812128067) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_86 <= -1.1821835041046143) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_17 <= -0.5267306566238403) THEN 16 ELSE 17 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_54 <= 0.033376701176166534) THEN 19 ELSE 20 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_29 <= 0.48954296112060547) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_101 <= -0.9183049201965332) THEN 23 ELSE 24 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_13 <= 0.7606967687606812) THEN 26 ELSE 27 END END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_70 <= -0.37230780720710754) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_42 <= 0.09141433238983154) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_35 <= -0.5338416695594788) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_36 <= 0.42982882261276245) THEN 32 ELSE 33 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -0.06956683099269867) THEN 35 ELSE 36 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 0.8506834506988525) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_21 <= -0.8930176496505737) THEN 39 ELSE 40 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_13 <= -0.289751261472702) THEN 42 ELSE 43 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_18 <= -0.42070767283439636) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_56 <= 0.8955790996551514) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_100 <= 0.8959568738937378) THEN 47 ELSE 48 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_92 <= -0.10282931476831436) THEN 50 ELSE 51 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_89 <= -0.2907974123954773) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_96 <= -0.6204873323440552) THEN 54 ELSE 55 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_29 <= 0.9688534140586853) THEN 57 ELSE 58 END END END END END AS node_id_2 
FROM ##TMP_20180329233129_5XS2HF_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 6 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 5 AS depth, 5 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 5 AS depth, 5 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 20 AS count, 5 AS depth, 9 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 5 AS depth, 9 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 4 AS depth, 8 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 15 AS parent_id, 0.2 AS [Proba_0], -1.6094379124341003 AS [LogProba_0], 0.4 AS [Proba_1], -0.916290731874155 AS [LogProba_1], 0.4 AS [Proba_2], -0.916290731874155 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 0.4 AS [DecisionProba] UNION ALL SELECT 17 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 11 AS count, 5 AS depth, 15 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 57 AS count, 5 AS depth, 18 AS parent_id, 0.3508771929824561 AS [Proba_0], -1.0473189942805592 AS [LogProba_0], 0.19298245614035087 AS [Proba_1], -1.6451559950361796 AS [LogProba_1], 0.2982456140350877 AS [Proba_2], -1.209837923778334 AS [LogProba_2], 0.15789473684210525 AS [Proba_3], -1.845826690498331 AS [LogProba_3], 0 AS [Decision], 0.3508771929824561 AS [DecisionProba] UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 40 AS count, 5 AS depth, 18 AS parent_id, 0.8 AS [Proba_0], -0.2231435513142097 AS [LogProba_0], 0.125 AS [Proba_1], -2.0794415416798357 AS [LogProba_1], 0.075 AS [Proba_2], -2.5902671654458267 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 23 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 14 AS count, 5 AS depth, 22 AS parent_id, 0.14285714285714285 AS [Proba_0], -1.9459101490553135 AS [LogProba_0], 0.07142857142857142 AS [Proba_1], -2.639057329615259 AS [LogProba_1], 0.7142857142857143 AS [Proba_2], -0.3364722366212129 AS [LogProba_2], 0.07142857142857142 AS [Proba_3], -2.639057329615259 AS [LogProba_3], 2 AS [Decision], 0.7142857142857143 AS [DecisionProba] UNION ALL SELECT 24 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 60 AS count, 5 AS depth, 22 AS parent_id, 0.36666666666666664 AS [Proba_0], -1.0033021088637848 AS [LogProba_0], 0.4166666666666667 AS [Proba_1], -0.8754687373538999 AS [LogProba_1], 0.1 AS [Proba_2], -2.3025850929940455 AS [LogProba_2], 0.11666666666666667 AS [Proba_3], -2.1484344131667874 AS [LogProba_3], 1 AS [Decision], 0.4166666666666667 AS [DecisionProba] UNION ALL SELECT 26 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 23 AS count, 5 AS depth, 25 AS parent_id, 0.043478260869565216 AS [Proba_0], -3.1354942159291497 AS [LogProba_0], 0.9130434782608695 AS [Proba_1], -0.09097177820572676 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.043478260869565216 AS [Proba_3], -3.1354942159291497 AS [LogProba_3], 1 AS [Decision], 0.9130434782608695 AS [DecisionProba] UNION ALL SELECT 27 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 25 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.2 AS [Proba_1], -1.6094379124341003 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.8 AS [Proba_3], -0.2231435513142097 AS [LogProba_3], 3 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 32 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 16 AS count, 5 AS depth, 31 AS parent_id, 0.0625 AS [Proba_0], -2.772588722239781 AS [LogProba_0], 0.1875 AS [Proba_1], -1.6739764335716716 AS [LogProba_1], 0.125 AS [Proba_2], -2.0794415416798357 AS [LogProba_2], 0.625 AS [Proba_3], -0.4700036292457356 AS [LogProba_3], 3 AS [Decision], 0.625 AS [DecisionProba] UNION ALL SELECT 33 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 31 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 35 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 24 AS count, 5 AS depth, 34 AS parent_id, 0.125 AS [Proba_0], -2.0794415416798357 AS [LogProba_0], 0.375 AS [Proba_1], -0.9808292530117262 AS [LogProba_1], 0.375 AS [Proba_2], -0.9808292530117262 AS [LogProba_2], 0.125 AS [Proba_3], -2.0794415416798357 AS [LogProba_3], 1 AS [Decision], 0.375 AS [DecisionProba] UNION ALL SELECT 36 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 17 AS count, 5 AS depth, 34 AS parent_id, 0.058823529411764705 AS [Proba_0], -2.833213344056216 AS [LogProba_0], 0.8823529411764706 AS [Proba_1], -0.12516314295400605 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.058823529411764705 AS [Proba_3], -2.833213344056216 AS [LogProba_3], 1 AS [Decision], 0.8823529411764706 AS [DecisionProba] UNION ALL SELECT 39 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 10 AS count, 5 AS depth, 38 AS parent_id, 0.1 AS [Proba_0], -2.3025850929940455 AS [LogProba_0], 0.1 AS [Proba_1], -2.3025850929940455 AS [LogProba_1], 0.4 AS [Proba_2], -0.916290731874155 AS [LogProba_2], 0.4 AS [Proba_3], -0.916290731874155 AS [LogProba_3], 2 AS [Decision], 0.4 AS [DecisionProba] UNION ALL SELECT 40 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 44 AS count, 5 AS depth, 38 AS parent_id, 0.7045454545454546 AS [Proba_0], -0.35020242943311486 AS [LogProba_0], 0.022727272727272728 AS [Proba_1], -3.784189633918261 AS [LogProba_1], 0.18181818181818182 AS [Proba_2], -1.7047480922384253 AS [LogProba_2], 0.09090909090909091 AS [Proba_3], -2.3978952727983707 AS [LogProba_3], 0 AS [Decision], 0.7045454545454546 AS [DecisionProba] UNION ALL SELECT 42 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 41 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 43 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 41 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.75 AS [Proba_1], -0.2876820724517809 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.25 AS [Proba_3], -1.3862943611198906 AS [LogProba_3], 1 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 47 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 59 AS count, 5 AS depth, 46 AS parent_id, 0.11864406779661017 AS [Proba_0], -2.1316272948504063 AS [LogProba_0], 0.05084745762711865 AS [Proba_1], -2.9789251552376097 AS [LogProba_1], 0.1016949152542373 AS [Proba_2], -2.2857779746776643 AS [LogProba_2], 0.7288135593220338 AS [Proba_3], -0.3163373282121571 AS [LogProba_3], 3 AS [Decision], 0.7288135593220338 AS [DecisionProba] UNION ALL SELECT 48 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 46 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.2 AS [Proba_1], -1.6094379124341003 AS [LogProba_1], 0.8 AS [Proba_2], -0.2231435513142097 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 50 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 49 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 51 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 49 AS parent_id, 0.75 AS [Proba_0], -0.2876820724517809 AS [LogProba_0], 0.25 AS [Proba_1], -1.3862943611198906 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 54 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 13 AS count, 5 AS depth, 53 AS parent_id, 0.07692307692307693 AS [Proba_0], -2.5649493574615367 AS [LogProba_0], 0.15384615384615385 AS [Proba_1], -1.8718021769015913 AS [LogProba_1], 0.23076923076923078 AS [Proba_2], -1.466337068793427 AS [LogProba_2], 0.5384615384615384 AS [Proba_3], -0.6190392084062235 AS [LogProba_3], 3 AS [Decision], 0.5384615384615384 AS [DecisionProba] UNION ALL SELECT 55 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 53 AS count, 5 AS depth, 53 AS parent_id, 0.03773584905660377 AS [Proba_0], -3.2771447329921766 AS [LogProba_0], 0.11320754716981132 AS [Proba_1], -2.178532444324067 AS [LogProba_1], 0.7735849056603774 AS [Proba_2], -0.25671984684781396 AS [LogProba_2], 0.07547169811320754 AS [Proba_3], -2.583997552432231 AS [LogProba_3], 2 AS [Decision], 0.7735849056603774 AS [DecisionProba] UNION ALL SELECT 57 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 71 AS count, 5 AS depth, 56 AS parent_id, 0.18309859154929578 AS [Proba_0], -1.6977305195797787 AS [LogProba_0], 0.2112676056338028 AS [Proba_1], -1.5546296759391054 AS [LogProba_1], 0.323943661971831 AS [Proba_2], -1.1271856611121658 AS [LogProba_2], 0.28169014084507044 AS [Proba_3], -1.2669476034873244 AS [LogProba_3], 2 AS [Decision], 0.323943661971831 AS [DecisionProba] UNION ALL SELECT 58 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 18 AS count, 5 AS depth, 56 AS parent_id, 0.05555555555555555 AS [Proba_0], -2.890371757896165 AS [LogProba_0], 0.1111111111111111 AS [Proba_1], -2.1972245773362196 AS [LogProba_1], 0.05555555555555555 AS [Proba_2], -2.890371757896165 AS [LogProba_2], 0.7777777777777778 AS [Proba_3], -0.25131442828090605 AS [LogProba_3], 3 AS [Decision], 0.7777777777777778 AS [DecisionProba]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_0] AS [Proba_0], [DT_node_data].[LogProba_0] AS [LogProba_0], [DT_node_data].[Proba_1] AS [Proba_1], [DT_node_data].[LogProba_1] AS [LogProba_1], [DT_node_data].[Proba_2] AS [Proba_2], [DT_node_data].[LogProba_2] AS [LogProba_2], [DT_node_data].[Proba_3] AS [Proba_3], [DT_node_data].[LogProba_3] AS [LogProba_3], [DT_node_data].[Decision] AS [Decision], [DT_node_data].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
calibration_base_estimator_0 AS 
(SELECT [DT_Output].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output].[Proba_0] AS [Proba_0], [DT_Output].[Proba_1] AS [Proba_1], [DT_Output].[Proba_2] AS [Proba_2], [DT_Output].[Proba_3] AS [Proba_3], [DT_Output].[LogProba_0] AS [LogProba_0], [DT_Output].[LogProba_1] AS [LogProba_1], [DT_Output].[LogProba_2] AS [LogProba_2], [DT_Output].[LogProba_3] AS [LogProba_3], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output]), 
sigmoid_calibration_0 AS 
(SELECT calibration_base_estimator_0.[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.6722931559575733 * calibration_base_estimator_0.[ScoreOrProba_0] + -1.5664774923466258)) THEN -(1.6722931559575733 * calibration_base_estimator_0.[ScoreOrProba_0] + -1.5664774923466258) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.6722931559575733 * calibration_base_estimator_0.[ScoreOrProba_0] + -1.5664774923466258)) THEN -(1.6722931559575733 * calibration_base_estimator_0.[ScoreOrProba_0] + -1.5664774923466258) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_0], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.6636057873719818 * calibration_base_estimator_0.[ScoreOrProba_1] + -1.6110381867619643)) THEN -(1.6636057873719818 * calibration_base_estimator_0.[ScoreOrProba_1] + -1.6110381867619643) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.6636057873719818 * calibration_base_estimator_0.[ScoreOrProba_1] + -1.6110381867619643)) THEN -(1.6636057873719818 * calibration_base_estimator_0.[ScoreOrProba_1] + -1.6110381867619643) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_1], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.9478729543998858 * calibration_base_estimator_0.[ScoreOrProba_2] + -1.5917462735438361)) THEN -(1.9478729543998858 * calibration_base_estimator_0.[ScoreOrProba_2] + -1.5917462735438361) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.9478729543998858 * calibration_base_estimator_0.[ScoreOrProba_2] + -1.5917462735438361)) THEN -(1.9478729543998858 * calibration_base_estimator_0.[ScoreOrProba_2] + -1.5917462735438361) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_2], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.3627222048822716 * calibration_base_estimator_0.[ScoreOrProba_3] + -1.4515910052014507)) THEN -(1.3627222048822716 * calibration_base_estimator_0.[ScoreOrProba_3] + -1.4515910052014507) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.3627222048822716 * calibration_base_estimator_0.[ScoreOrProba_3] + -1.4515910052014507)) THEN -(1.3627222048822716 * calibration_base_estimator_0.[ScoreOrProba_3] + -1.4515910052014507) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_3] 
FROM calibration_base_estimator_0), 
[Normalized_Probas] AS 
(SELECT sigmoid_calibration_0.[KEY] AS [KEY], sigmoid_calibration_0.[Proba_0] / (sigmoid_calibration_0.[Proba_0] + sigmoid_calibration_0.[Proba_1] + sigmoid_calibration_0.[Proba_2] + sigmoid_calibration_0.[Proba_3]) AS [Proba_0], sigmoid_calibration_0.[Proba_1] / (sigmoid_calibration_0.[Proba_0] + sigmoid_calibration_0.[Proba_1] + sigmoid_calibration_0.[Proba_2] + sigmoid_calibration_0.[Proba_3]) AS [Proba_1], sigmoid_calibration_0.[Proba_2] / (sigmoid_calibration_0.[Proba_0] + sigmoid_calibration_0.[Proba_1] + sigmoid_calibration_0.[Proba_2] + sigmoid_calibration_0.[Proba_3]) AS [Proba_2], sigmoid_calibration_0.[Proba_3] / (sigmoid_calibration_0.[Proba_0] + sigmoid_calibration_0.[Proba_1] + sigmoid_calibration_0.[Proba_2] + sigmoid_calibration_0.[Proba_3]) AS [Proba_3] 
FROM sigmoid_calibration_0), 
[DT_node_lookup_1] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_66 <= -0.2842087745666504) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.064017653465271) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_15 <= 0.0030692382715642452) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_19 <= -0.2625877261161804) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_45 <= 1.4400224685668945) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_86 <= -1.4708878993988037) THEN 8 ELSE 9 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_59 <= 1.4065744876861572) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_26 <= -0.3025447130203247) THEN 12 ELSE 13 END ELSE 14 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_44 <= 0.5123810768127441) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_52 <= -0.5797653198242188) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_68 <= -0.07408486306667328) THEN 18 ELSE 19 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_89 <= 1.240484356880188) THEN 21 ELSE 22 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_54 <= 0.014273516833782196) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_58 <= -1.0384860038757324) THEN 25 ELSE 26 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_21 <= 0.44157731533050537) THEN 28 ELSE 29 END END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_70 <= -0.6560220718383789) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_42 <= 0.11735302209854126) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_66 <= 1.416921854019165) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_33 <= -0.6961071491241455) THEN 34 ELSE 35 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_100 <= -0.6103659868240356) THEN 37 ELSE 38 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_52 <= 1.1027405261993408) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 1.6039469242095947) THEN 41 ELSE 42 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_50 <= -0.6617239713668823) THEN 44 ELSE 45 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_89 <= -0.3341265320777893) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_94 <= -0.01307676825672388) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_79 <= 0.2966781258583069) THEN 49 ELSE 50 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_33 <= 1.4203591346740723) THEN 52 ELSE 53 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_62 <= -0.45945605635643005) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_31 <= 1.4359893798828125) THEN 56 ELSE 57 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_97 <= -0.4143097996711731) THEN 59 ELSE 60 END END END END END AS node_id_2 
FROM ##TMP_20180329233129_5XS2HF_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 29 AS count, 5 AS depth, 4 AS parent_id, 0.9655172413793104 AS [Proba_0], -0.03509131981127006 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.034482758620689655 AS [Proba_2], -3.367295829986474 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.9655172413793104 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 5 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.5 AS [Proba_1], -0.6931471805599453 AS [LogProba_1], 0.5 AS [Proba_2], -0.6931471805599453 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 0.5 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 7 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 34 AS count, 5 AS depth, 7 AS parent_id, 0.4117647058823529 AS [Proba_0], -0.8873031950009028 AS [LogProba_0], 0.20588235294117646 AS [Proba_1], -1.580450375560848 AS [LogProba_1], 0.2647058823529412 AS [Proba_2], -1.329135947279942 AS [LogProba_2], 0.11764705882352941 AS [Proba_3], -2.1400661634962708 AS [LogProba_3], 0 AS [Decision], 0.4117647058823529 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 21 AS count, 5 AS depth, 11 AS parent_id, 0.5714285714285714 AS [Proba_0], -0.5596157879354228 AS [LogProba_0], 0.14285714285714285 AS [Proba_1], -1.9459101490553135 AS [LogProba_1], 0.09523809523809523 AS [Proba_2], -2.3513752571634776 AS [LogProba_2], 0.19047619047619047 AS [Proba_3], -1.6582280766035324 AS [LogProba_3], 0 AS [Decision], 0.5714285714285714 AS [DecisionProba] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 37 AS count, 5 AS depth, 11 AS parent_id, 0.16216216216216217 AS [Proba_0], -1.8191584434161694 AS [LogProba_0], 0.5135135135135135 AS [Proba_1], -0.6664789334777841 AS [LogProba_1], 0.1891891891891892 AS [Proba_2], -1.6650077635889111 AS [LogProba_2], 0.13513513513513514 AS [Proba_3], -2.001480000210124 AS [LogProba_3], 1 AS [Decision], 0.5135135135135135 AS [DecisionProba] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 4 AS depth, 10 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 11 AS count, 5 AS depth, 17 AS parent_id, 0.09090909090909091 AS [Proba_0], -2.3978952727983707 AS [LogProba_0], 0.09090909090909091 AS [Proba_1], -2.3978952727983707 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.8181818181818182 AS [Proba_3], -0.2006706954621511 AS [LogProba_3], 3 AS [Decision], 0.8181818181818182 AS [DecisionProba] UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 11 AS count, 5 AS depth, 17 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.45454545454545453 AS [Proba_1], -0.7884573603642702 AS [LogProba_1], 0.45454545454545453 AS [Proba_2], -0.7884573603642702 AS [LogProba_2], 0.09090909090909091 AS [Proba_3], -2.3978952727983707 AS [LogProba_3], 1 AS [Decision], 0.45454545454545453 AS [DecisionProba] UNION ALL SELECT 21 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 49 AS count, 5 AS depth, 20 AS parent_id, 0.10204081632653061 AS [Proba_0], -2.2823823856765264 AS [LogProba_0], 0.8163265306122449 AS [Proba_1], -0.2029408439966903 AS [LogProba_1], 0.061224489795918366 AS [Proba_2], -2.793208009442517 AS [LogProba_2], 0.02040816326530612 AS [Proba_3], -3.891820298110627 AS [LogProba_3], 1 AS [Decision], 0.8163265306122449 AS [DecisionProba] UNION ALL SELECT 22 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 20 AS parent_id, 0.5 AS [Proba_0], -0.6931471805599453 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.5 AS [Proba_2], -0.6931471805599453 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.5 AS [DecisionProba] UNION ALL SELECT 25 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 24 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 26 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 16 AS count, 5 AS depth, 24 AS parent_id, 0.1875 AS [Proba_0], -1.6739764335716716 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.75 AS [Proba_2], -0.2876820724517809 AS [LogProba_2], 0.0625 AS [Proba_3], -2.772588722239781 AS [LogProba_3], 2 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 28 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 27 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 29 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 5 AS depth, 27 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 34 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 10 AS count, 5 AS depth, 33 AS parent_id, 0.2 AS [Proba_0], -1.6094379124341003 AS [LogProba_0], 0.2 AS [Proba_1], -1.6094379124341003 AS [LogProba_1], 0.5 AS [Proba_2], -0.6931471805599453 AS [LogProba_2], 0.1 AS [Proba_3], -2.3025850929940455 AS [LogProba_3], 2 AS [Decision], 0.5 AS [DecisionProba] UNION ALL SELECT 35 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 35 AS count, 5 AS depth, 33 AS parent_id, 0.14285714285714285 AS [Proba_0], -1.9459101490553135 AS [LogProba_0], 0.6857142857142857 AS [Proba_1], -0.37729423114146804 AS [LogProba_1], 0.05714285714285714 AS [Proba_2], -2.8622008809294686 AS [LogProba_2], 0.11428571428571428 AS [Proba_3], -2.169053700369523 AS [LogProba_3], 1 AS [Decision], 0.6857142857142857 AS [DecisionProba] UNION ALL SELECT 37 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 5 AS depth, 36 AS parent_id, 0.3333333333333333 AS [Proba_0], -1.0986122886681098 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.6666666666666666 AS [Proba_2], -0.40546510810816444 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 0.6666666666666666 AS [DecisionProba] UNION ALL SELECT 38 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 36 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 41 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 40 AS count, 5 AS depth, 40 AS parent_id, 0.7 AS [Proba_0], -0.35667494393873245 AS [LogProba_0], 0.125 AS [Proba_1], -2.0794415416798357 AS [LogProba_1], 0.075 AS [Proba_2], -2.5902671654458267 AS [LogProba_2], 0.1 AS [Proba_3], -2.3025850929940455 AS [LogProba_3], 0 AS [Decision], 0.7 AS [DecisionProba] UNION ALL SELECT 42 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 5 AS depth, 40 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 44 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 5 AS depth, 43 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 45 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 7 AS count, 5 AS depth, 43 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 49 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 24 AS count, 5 AS depth, 48 AS parent_id, 0.08333333333333333 AS [Proba_0], -2.4849066497880004 AS [LogProba_0], 0.25 AS [Proba_1], -1.3862943611198906 AS [LogProba_1], 0.041666666666666664 AS [Proba_2], -3.1780538303479458 AS [LogProba_2], 0.625 AS [Proba_3], -0.4700036292457356 AS [LogProba_3], 3 AS [Decision], 0.625 AS [DecisionProba] UNION ALL SELECT 50 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 15 AS count, 5 AS depth, 48 AS parent_id, 0.06666666666666667 AS [Proba_0], -2.70805020110221 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.6 AS [Proba_2], -0.5108256237659907 AS [LogProba_2], 0.3333333333333333 AS [Proba_3], -1.0986122886681098 AS [LogProba_3], 2 AS [Decision], 0.6 AS [DecisionProba] UNION ALL SELECT 52 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 45 AS count, 5 AS depth, 51 AS parent_id, 0.044444444444444446 AS [Proba_0], -3.1135153092103742 AS [LogProba_0], 0.022222222222222223 AS [Proba_1], -3.8066624897703196 AS [LogProba_1], 0.8444444444444444 AS [Proba_2], -0.169076330043934 AS [LogProba_2], 0.08888888888888889 AS [Proba_3], -2.4203681286504293 AS [LogProba_3], 2 AS [Decision], 0.8444444444444444 AS [DecisionProba] UNION ALL SELECT 53 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 51 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.6 AS [Proba_1], -0.5108256237659907 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.4 AS [Proba_3], -0.916290731874155 AS [LogProba_3], 1 AS [Decision], 0.6 AS [DecisionProba] UNION ALL SELECT 56 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 51 AS count, 5 AS depth, 55 AS parent_id, 0.0784313725490196 AS [Proba_0], -2.5455312716044354 AS [LogProba_0], 0.11764705882352941 AS [Proba_1], -2.1400661634962708 AS [LogProba_1], 0.0784313725490196 AS [Proba_2], -2.5455312716044354 AS [LogProba_2], 0.7254901960784313 AS [Proba_3], -0.3209077200801014 AS [LogProba_3], 3 AS [Decision], 0.7254901960784313 AS [DecisionProba] UNION ALL SELECT 57 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 55 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 59 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 38 AS count, 5 AS depth, 58 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.07894736842105263 AS [Proba_1], -2.538973871058276 AS [LogProba_1], 0.39473684210526316 AS [Proba_2], -0.9295359586241757 AS [LogProba_2], 0.5263157894736842 AS [Proba_3], -0.6418538861723948 AS [LogProba_3], 3 AS [Decision], 0.5263157894736842 AS [DecisionProba] UNION ALL SELECT 60 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 78 AS count, 5 AS depth, 58 AS parent_id, 0.2692307692307692 AS [Proba_0], -1.3121863889661687 AS [LogProba_0], 0.2564102564102564 AS [Proba_1], -1.3609765531356008 AS [LogProba_1], 0.2564102564102564 AS [Proba_2], -1.3609765531356008 AS [LogProba_2], 0.21794871794871795 AS [Proba_3], -1.5234954826333758 AS [LogProba_3], 0 AS [Decision], 0.2692307692307692 AS [DecisionProba]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Proba_0] AS [Proba_0], [DT_node_data_1].[LogProba_0] AS [LogProba_0], [DT_node_data_1].[Proba_1] AS [Proba_1], [DT_node_data_1].[LogProba_1] AS [LogProba_1], [DT_node_data_1].[Proba_2] AS [Proba_2], [DT_node_data_1].[LogProba_2] AS [LogProba_2], [DT_node_data_1].[Proba_3] AS [Proba_3], [DT_node_data_1].[LogProba_3] AS [LogProba_3], [DT_node_data_1].[Decision] AS [Decision], [DT_node_data_1].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
calibration_base_estimator_1 AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_1].[Proba_0] AS [Proba_0], [DT_Output_1].[Proba_1] AS [Proba_1], [DT_Output_1].[Proba_2] AS [Proba_2], [DT_Output_1].[Proba_3] AS [Proba_3], [DT_Output_1].[LogProba_0] AS [LogProba_0], [DT_Output_1].[LogProba_1] AS [LogProba_1], [DT_Output_1].[LogProba_2] AS [LogProba_2], [DT_Output_1].[LogProba_3] AS [LogProba_3], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_1].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_1].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_1].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_1].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_1]), 
sigmoid_calibration_1 AS 
(SELECT calibration_base_estimator_1.[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.6286612952513406 * calibration_base_estimator_1.[ScoreOrProba_0] + -1.5037844681587016)) THEN -(1.6286612952513406 * calibration_base_estimator_1.[ScoreOrProba_0] + -1.5037844681587016) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.6286612952513406 * calibration_base_estimator_1.[ScoreOrProba_0] + -1.5037844681587016)) THEN -(1.6286612952513406 * calibration_base_estimator_1.[ScoreOrProba_0] + -1.5037844681587016) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_0], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.8962532665629956 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.6337916275457507)) THEN -(1.8962532665629956 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.6337916275457507) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.8962532665629956 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.6337916275457507)) THEN -(1.8962532665629956 * calibration_base_estimator_1.[ScoreOrProba_1] + -1.6337916275457507) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_1], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(2.099020473569121 * calibration_base_estimator_1.[ScoreOrProba_2] + -1.7200255013101144)) THEN -(2.099020473569121 * calibration_base_estimator_1.[ScoreOrProba_2] + -1.7200255013101144) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(2.099020473569121 * calibration_base_estimator_1.[ScoreOrProba_2] + -1.7200255013101144)) THEN -(2.099020473569121 * calibration_base_estimator_1.[ScoreOrProba_2] + -1.7200255013101144) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_2], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.872889970119703 * calibration_base_estimator_1.[ScoreOrProba_3] + -1.6550672900474588)) THEN -(1.872889970119703 * calibration_base_estimator_1.[ScoreOrProba_3] + -1.6550672900474588) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.872889970119703 * calibration_base_estimator_1.[ScoreOrProba_3] + -1.6550672900474588)) THEN -(1.872889970119703 * calibration_base_estimator_1.[ScoreOrProba_3] + -1.6550672900474588) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_3] 
FROM calibration_base_estimator_1), 
[Normalized_Probas_1] AS 
(SELECT sigmoid_calibration_1.[KEY] AS [KEY], sigmoid_calibration_1.[Proba_0] / (sigmoid_calibration_1.[Proba_0] + sigmoid_calibration_1.[Proba_1] + sigmoid_calibration_1.[Proba_2] + sigmoid_calibration_1.[Proba_3]) AS [Proba_0], sigmoid_calibration_1.[Proba_1] / (sigmoid_calibration_1.[Proba_0] + sigmoid_calibration_1.[Proba_1] + sigmoid_calibration_1.[Proba_2] + sigmoid_calibration_1.[Proba_3]) AS [Proba_1], sigmoid_calibration_1.[Proba_2] / (sigmoid_calibration_1.[Proba_0] + sigmoid_calibration_1.[Proba_1] + sigmoid_calibration_1.[Proba_2] + sigmoid_calibration_1.[Proba_3]) AS [Proba_2], sigmoid_calibration_1.[Proba_3] / (sigmoid_calibration_1.[Proba_0] + sigmoid_calibration_1.[Proba_1] + sigmoid_calibration_1.[Proba_2] + sigmoid_calibration_1.[Proba_3]) AS [Proba_3] 
FROM sigmoid_calibration_1), 
[DT_node_lookup_2] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_66 <= -0.02145124226808548) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_86 <= -1.3945796489715576) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_40 <= 0.43254974484443665) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_78 <= -1.906510829925537) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_19 <= -0.5398409366607666) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_61 <= 0.06785356998443604) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_56 <= -1.1348893642425537) THEN 11 ELSE 12 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.39106184244155884) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_19 <= -0.2625877261161804) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_36 <= -0.3973325490951538) THEN 16 ELSE 17 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_33 <= -0.5141704082489014) THEN 19 ELSE 20 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_17 <= -0.7365139722824097) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_49 <= 1.02558434009552) THEN 23 ELSE 24 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_94 <= -0.5991512537002563) THEN 26 ELSE 27 END END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.4994811713695526) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_27 <= -0.1212441474199295) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_36 <= 1.0133931636810303) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_86 <= 0.6027740240097046) THEN 32 ELSE 33 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_34 <= 0.9886136054992676) THEN 35 ELSE 36 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_18 <= -0.5851044654846191) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_54 <= -0.5932556390762329) THEN 39 ELSE 40 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_61 <= 0.2945762276649475) THEN 42 ELSE 43 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_39 <= -0.19500258564949036) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_72 <= 0.13676099479198456) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_89 <= -0.8551962971687317) THEN 47 ELSE 48 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_45 <= 1.001998782157898) THEN 50 ELSE 51 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_18 <= -0.1466597616672516) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_92 <= -0.7608950734138489) THEN 54 ELSE 55 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_90 <= 2.1737446784973145) THEN 57 ELSE 58 END END END END END AS node_id_2 
FROM ##TMP_20180329233129_5XS2HF_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 4 AS depth, 3 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 15 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 5 AS depth, 7 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 5 AS depth, 7 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 5 AS depth, 10 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 10 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 26 AS count, 5 AS depth, 15 AS parent_id, 0.2692307692307692 AS [Proba_0], -1.3121863889661687 AS [LogProba_0], 0.46153846153846156 AS [Proba_1], -0.7731898882334817 AS [LogProba_1], 0.15384615384615385 AS [Proba_2], -1.8718021769015913 AS [LogProba_2], 0.11538461538461539 AS [Proba_3], -2.159484249353372 AS [LogProba_3], 1 AS [Decision], 0.46153846153846156 AS [DecisionProba] UNION ALL SELECT 17 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 55 AS count, 5 AS depth, 15 AS parent_id, 0.8181818181818182 AS [Proba_0], -0.2006706954621511 AS [LogProba_0], 0.12727272727272726 AS [Proba_1], -2.0614230361771577 AS [LogProba_1], 0.01818181818181818 AS [Proba_2], -4.007333185232471 AS [LogProba_2], 0.03636363636363636 AS [Proba_3], -3.3141860046725258 AS [LogProba_3], 0 AS [Decision], 0.8181818181818182 AS [DecisionProba] UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 27 AS count, 5 AS depth, 18 AS parent_id, 0.5925925925925926 AS [Proba_0], -0.5232481437645479 AS [LogProba_0], 0.1111111111111111 AS [Proba_1], -2.1972245773362196 AS [LogProba_1], 0.18518518518518517 AS [Proba_2], -1.6863989535702288 AS [LogProba_2], 0.1111111111111111 AS [Proba_3], -2.1972245773362196 AS [LogProba_3], 0 AS [Decision], 0.5925925925925926 AS [DecisionProba] UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 73 AS count, 5 AS depth, 18 AS parent_id, 0.1780821917808219 AS [Proba_0], -1.7255100836868544 AS [LogProba_0], 0.4246575342465753 AS [Proba_1], -0.8564722366632449 AS [LogProba_1], 0.2602739726027397 AS [Proba_2], -1.3460204619819507 AS [LogProba_2], 0.136986301369863 AS [Proba_3], -1.9878743481543455 AS [LogProba_3], 1 AS [Decision], 0.4246575342465753 AS [DecisionProba] UNION ALL SELECT 23 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 21 AS count, 5 AS depth, 22 AS parent_id, 0.14285714285714285 AS [Proba_0], -1.9459101490553135 AS [LogProba_0], 0.047619047619047616 AS [Proba_1], -3.044522437723423 AS [LogProba_1], 0.6666666666666666 AS [Proba_2], -0.40546510810816444 AS [LogProba_2], 0.14285714285714285 AS [Proba_3], -1.9459101490553135 AS [LogProba_3], 2 AS [Decision], 0.6666666666666666 AS [DecisionProba] UNION ALL SELECT 24 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 22 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 26 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 25 AS count, 5 AS depth, 25 AS parent_id, 0.04 AS [Proba_0], -3.2188758248682006 AS [LogProba_0], 0.8 AS [Proba_1], -0.2231435513142097 AS [LogProba_1], 0.08 AS [Proba_2], -2.5257286443082556 AS [LogProba_2], 0.08 AS [Proba_3], -2.5257286443082556 AS [LogProba_3], 1 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 27 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 63 AS count, 5 AS depth, 25 AS parent_id, 0.20634920634920634 AS [Proba_0], -1.578185368929996 AS [LogProba_0], 0.3492063492063492 AS [Proba_1], -1.052092273033217 AS [LogProba_1], 0.07936507936507936 AS [Proba_2], -2.5336968139574325 AS [LogProba_2], 0.36507936507936506 AS [Proba_3], -1.0076405104623831 AS [LogProba_3], 3 AS [Decision], 0.36507936507936506 AS [DecisionProba] UNION ALL SELECT 32 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 69 AS count, 5 AS depth, 31 AS parent_id, 0.057971014492753624 AS [Proba_0], -2.847812143477369 AS [LogProba_0], 0.13043478260869565 AS [Proba_1], -2.03688192726104 AS [LogProba_1], 0.07246376811594203 AS [Proba_2], -2.624668592163159 AS [LogProba_2], 0.7391304347826086 AS [Proba_3], -0.3022808718729337 AS [LogProba_3], 3 AS [Decision], 0.7391304347826086 AS [DecisionProba] UNION ALL SELECT 33 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 18 AS count, 5 AS depth, 31 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.3333333333333333 AS [Proba_1], -1.0986122886681098 AS [LogProba_1], 0.4444444444444444 AS [Proba_2], -0.8109302162163288 AS [LogProba_2], 0.2222222222222222 AS [Proba_3], -1.5040773967762742 AS [LogProba_3], 2 AS [Decision], 0.4444444444444444 AS [DecisionProba] UNION ALL SELECT 35 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 34 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 36 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 34 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 39 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 9 AS count, 5 AS depth, 38 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.1111111111111111 AS [Proba_2], -2.1972245773362196 AS [LogProba_2], 0.8888888888888888 AS [Proba_3], -0.11778303565638351 AS [LogProba_3], 3 AS [Decision], 0.8888888888888888 AS [DecisionProba] UNION ALL SELECT 40 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 14 AS count, 5 AS depth, 38 AS parent_id, 0.35714285714285715 AS [Proba_0], -1.0296194171811581 AS [LogProba_0], 0.35714285714285715 AS [Proba_1], -1.0296194171811581 AS [LogProba_1], 0.07142857142857142 AS [Proba_2], -2.639057329615259 AS [LogProba_2], 0.21428571428571427 AS [Proba_3], -1.540445040947149 AS [LogProba_3], 0 AS [Decision], 0.35714285714285715 AS [DecisionProba] UNION ALL SELECT 42 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 49 AS count, 5 AS depth, 41 AS parent_id, 0.16326530612244897 AS [Proba_0], -1.8123787564307907 AS [LogProba_0], 0.061224489795918366 AS [Proba_1], -2.793208009442517 AS [LogProba_1], 0.6530612244897959 AS [Proba_2], -0.42608439531090014 AS [LogProba_2], 0.12244897959183673 AS [Proba_3], -2.1000608288825715 AS [LogProba_3], 2 AS [Decision], 0.6530612244897959 AS [DecisionProba] UNION ALL SELECT 43 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 27 AS count, 5 AS depth, 41 AS parent_id, 0.037037037037037035 AS [Proba_0], -3.295836866004329 AS [LogProba_0], 0.37037037037037035 AS [Proba_1], -0.9932517730102834 AS [LogProba_1], 0.2222222222222222 AS [Proba_2], -1.5040773967762742 AS [LogProba_2], 0.37037037037037035 AS [Proba_3], -0.9932517730102834 AS [LogProba_3], 1 AS [Decision], 0.37037037037037035 AS [DecisionProba] UNION ALL SELECT 47 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 46 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.5 AS [Proba_1], -0.6931471805599453 AS [LogProba_1], 0.25 AS [Proba_2], -1.3862943611198906 AS [LogProba_2], 0.25 AS [Proba_3], -1.3862943611198906 AS [LogProba_3], 1 AS [Decision], 0.5 AS [DecisionProba] UNION ALL SELECT 48 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 18 AS count, 5 AS depth, 46 AS parent_id, 0.8888888888888888 AS [Proba_0], -0.11778303565638351 AS [LogProba_0], 0.05555555555555555 AS [Proba_1], -2.890371757896165 AS [LogProba_1], 0.05555555555555555 AS [Proba_2], -2.890371757896165 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.8888888888888888 AS [DecisionProba] UNION ALL SELECT 50 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 8 AS count, 5 AS depth, 49 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 51 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 5 AS depth, 49 AS parent_id, 0.6666666666666666 AS [Proba_0], -0.40546510810816444 AS [LogProba_0], 0.3333333333333333 AS [Proba_1], -1.0986122886681098 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.6666666666666666 AS [DecisionProba] UNION ALL SELECT 54 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 53 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 55 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 18 AS count, 5 AS depth, 53 AS parent_id, 0.2777777777777778 AS [Proba_0], -1.2809338454620642 AS [LogProba_0], 0.2222222222222222 AS [Proba_1], -1.5040773967762742 AS [LogProba_1], 0.4444444444444444 AS [Proba_2], -0.8109302162163288 AS [LogProba_2], 0.05555555555555555 AS [Proba_3], -2.890371757896165 AS [LogProba_3], 2 AS [Decision], 0.4444444444444444 AS [DecisionProba] UNION ALL SELECT 57 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 27 AS count, 5 AS depth, 56 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.037037037037037035 AS [Proba_1], -3.295836866004329 AS [LogProba_1], 0.9629629629629629 AS [Proba_2], -0.037740327982847086 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 0.9629629629629629 AS [DecisionProba] UNION ALL SELECT 58 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 5 AS depth, 56 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Proba_0] AS [Proba_0], [DT_node_data_2].[LogProba_0] AS [LogProba_0], [DT_node_data_2].[Proba_1] AS [Proba_1], [DT_node_data_2].[LogProba_1] AS [LogProba_1], [DT_node_data_2].[Proba_2] AS [Proba_2], [DT_node_data_2].[LogProba_2] AS [LogProba_2], [DT_node_data_2].[Proba_3] AS [Proba_3], [DT_node_data_2].[LogProba_3] AS [LogProba_3], [DT_node_data_2].[Decision] AS [Decision], [DT_node_data_2].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
calibration_base_estimator_2 AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_2].[Proba_0] AS [Proba_0], [DT_Output_2].[Proba_1] AS [Proba_1], [DT_Output_2].[Proba_2] AS [Proba_2], [DT_Output_2].[Proba_3] AS [Proba_3], [DT_Output_2].[LogProba_0] AS [LogProba_0], [DT_Output_2].[LogProba_1] AS [LogProba_1], [DT_Output_2].[LogProba_2] AS [LogProba_2], [DT_Output_2].[LogProba_3] AS [LogProba_3], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_2].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_2].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_2].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_2].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_2]), 
sigmoid_calibration_2 AS 
(SELECT calibration_base_estimator_2.[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(0.8021770265487372 * calibration_base_estimator_2.[ScoreOrProba_0] + -1.325932118061258)) THEN -(0.8021770265487372 * calibration_base_estimator_2.[ScoreOrProba_0] + -1.325932118061258) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(0.8021770265487372 * calibration_base_estimator_2.[ScoreOrProba_0] + -1.325932118061258)) THEN -(0.8021770265487372 * calibration_base_estimator_2.[ScoreOrProba_0] + -1.325932118061258) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_0], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.7974280233115218 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.5474841968199489)) THEN -(1.7974280233115218 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.5474841968199489) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.7974280233115218 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.5474841968199489)) THEN -(1.7974280233115218 * calibration_base_estimator_2.[ScoreOrProba_1] + -1.5474841968199489) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_1], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(0.0977531529368422 * calibration_base_estimator_2.[ScoreOrProba_2] + -1.1285245939517214)) THEN -(0.0977531529368422 * calibration_base_estimator_2.[ScoreOrProba_2] + -1.1285245939517214) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(0.0977531529368422 * calibration_base_estimator_2.[ScoreOrProba_2] + -1.1285245939517214)) THEN -(0.0977531529368422 * calibration_base_estimator_2.[ScoreOrProba_2] + -1.1285245939517214) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_2], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.4134151419886198 * calibration_base_estimator_2.[ScoreOrProba_3] + -1.4108867651234362)) THEN -(1.4134151419886198 * calibration_base_estimator_2.[ScoreOrProba_3] + -1.4108867651234362) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.4134151419886198 * calibration_base_estimator_2.[ScoreOrProba_3] + -1.4108867651234362)) THEN -(1.4134151419886198 * calibration_base_estimator_2.[ScoreOrProba_3] + -1.4108867651234362) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_3] 
FROM calibration_base_estimator_2), 
[Normalized_Probas_2] AS 
(SELECT sigmoid_calibration_2.[KEY] AS [KEY], sigmoid_calibration_2.[Proba_0] / (sigmoid_calibration_2.[Proba_0] + sigmoid_calibration_2.[Proba_1] + sigmoid_calibration_2.[Proba_2] + sigmoid_calibration_2.[Proba_3]) AS [Proba_0], sigmoid_calibration_2.[Proba_1] / (sigmoid_calibration_2.[Proba_0] + sigmoid_calibration_2.[Proba_1] + sigmoid_calibration_2.[Proba_2] + sigmoid_calibration_2.[Proba_3]) AS [Proba_1], sigmoid_calibration_2.[Proba_2] / (sigmoid_calibration_2.[Proba_0] + sigmoid_calibration_2.[Proba_1] + sigmoid_calibration_2.[Proba_2] + sigmoid_calibration_2.[Proba_3]) AS [Proba_2], sigmoid_calibration_2.[Proba_3] / (sigmoid_calibration_2.[Proba_0] + sigmoid_calibration_2.[Proba_1] + sigmoid_calibration_2.[Proba_2] + sigmoid_calibration_2.[Proba_3]) AS [Proba_3] 
FROM sigmoid_calibration_2), 
[DT_node_lookup_3] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_33 <= 0.2938539981842041) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_36 <= 0.9102931022644043) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_66 <= -0.5817530155181885) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_29 <= 0.6342442035675049) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_55 <= 0.7553910613059998) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_71 <= 0.5389477014541626) THEN 8 ELSE 9 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_55 <= 1.173092007637024) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.27872490882873535) THEN 12 ELSE 13 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_50 <= -0.327485054731369) THEN 15 ELSE 16 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_33 <= -1.8755420446395874) THEN 18 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_87 <= -0.9727884531021118) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_34 <= 0.4487919807434082) THEN 21 ELSE 22 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.39247798919677734) THEN 24 ELSE 25 END END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_52 <= -0.3452757000923157) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_70 <= -0.008020205423235893) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_81 <= -0.2938869595527649) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_35 <= 0.28403663635253906) THEN 30 ELSE 31 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_30 <= 0.790223240852356) THEN 33 ELSE 34 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_18 <= -0.9823629856109619) THEN 36 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_98 <= 0.40362119674682617) THEN 38 ELSE 39 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_66 <= 1.1754977703094482) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_45 <= -0.13795293867588043) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_40 <= -0.8598459959030151) THEN 43 ELSE 44 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_41 <= -1.4660017490386963) THEN 46 ELSE 47 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_19 <= 0.7790433168411255) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_45 <= 0.05393628776073456) THEN 50 ELSE 51 END ELSE 52 END END END END AS node_id_2 
FROM ##TMP_20180329233129_5XS2HF_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 47 AS count, 5 AS depth, 4 AS parent_id, 0.5957446808510638 AS [Proba_0], -0.5179430915348547 AS [LogProba_0], 0.1276595744680851 AS [Proba_1], -2.0583881324820035 AS [LogProba_1], 0.1276595744680851 AS [Proba_2], -2.0583881324820035 AS [LogProba_2], 0.14893617021276595 AS [Proba_3], -1.9042374526547454 AS [LogProba_3], 0 AS [Decision], 0.5957446808510638 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 17 AS count, 5 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.35294117647058826 AS [Proba_1], -1.041453874828161 AS [LogProba_1], 0.23529411764705882 AS [Proba_2], -1.4469189829363254 AS [LogProba_2], 0.4117647058823529 AS [Proba_3], -0.8873031950009028 AS [LogProba_3], 3 AS [Decision], 0.4117647058823529 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 14 AS count, 5 AS depth, 7 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 8 AS count, 5 AS depth, 7 AS parent_id, 0.375 AS [Proba_0], -0.9808292530117262 AS [LogProba_0], 0.25 AS [Proba_1], -1.3862943611198906 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.375 AS [Proba_3], -0.9808292530117262 AS [LogProba_3], 0 AS [Decision], 0.375 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 108 AS count, 5 AS depth, 11 AS parent_id, 0.1388888888888889 AS [Proba_0], -1.9740810260220096 AS [LogProba_0], 0.12037037037037036 AS [Proba_1], -2.117181869662683 AS [LogProba_1], 0.16666666666666666 AS [Proba_2], -1.791759469228055 AS [LogProba_2], 0.5740740740740741 AS [Proba_3], -0.5549968420791281 AS [LogProba_3], 3 AS [Decision], 0.5740740740740741 AS [DecisionProba] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 94 AS count, 5 AS depth, 11 AS parent_id, 0.22340425531914893 AS [Proba_0], -1.498772344546581 AS [LogProba_0], 0.1276595744680851 AS [Proba_1], -2.0583881324820035 AS [LogProba_1], 0.43617021276595747 AS [Proba_2], -0.8297227155656961 AS [LogProba_2], 0.2127659574468085 AS [Proba_3], -1.547562508716013 AS [LogProba_3], 2 AS [Decision], 0.43617021276595747 AS [DecisionProba] UNION ALL SELECT 15 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 9 AS count, 5 AS depth, 14 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.2222222222222222 AS [Proba_1], -1.5040773967762742 AS [LogProba_1], 0.3333333333333333 AS [Proba_2], -1.0986122886681098 AS [LogProba_2], 0.4444444444444444 AS [Proba_3], -0.8109302162163288 AS [LogProba_3], 3 AS [Decision], 0.4444444444444444 AS [DecisionProba] UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 21 AS count, 5 AS depth, 14 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 3 AS depth, 17 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 21 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 20 AS parent_id, 0.25 AS [Proba_0], -1.3862943611198906 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.75 AS [Proba_3], -0.2876820724517809 AS [LogProba_3], 3 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 22 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 4 AS count, 5 AS depth, 20 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 24 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 42 AS count, 5 AS depth, 23 AS parent_id, 0.8809523809523809 AS [Proba_0], -0.1267517056391439 AS [LogProba_0], 0.023809523809523808 AS [Proba_1], -3.7376696182833684 AS [LogProba_1], 0.07142857142857142 AS [Proba_2], -2.639057329615259 AS [LogProba_2], 0.023809523809523808 AS [Proba_3], -3.7376696182833684 AS [LogProba_3], 0 AS [Decision], 0.8809523809523809 AS [DecisionProba] UNION ALL SELECT 25 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 15 AS count, 5 AS depth, 23 AS parent_id, 0.3333333333333333 AS [Proba_0], -1.0986122886681098 AS [LogProba_0], 0.06666666666666667 AS [Proba_1], -2.70805020110221 AS [LogProba_1], 0.3333333333333333 AS [Proba_2], -1.0986122886681098 AS [LogProba_2], 0.26666666666666666 AS [Proba_3], -1.3217558399823195 AS [LogProba_3], 0 AS [Decision], 0.3333333333333333 AS [DecisionProba] UNION ALL SELECT 30 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 8 AS count, 5 AS depth, 29 AS parent_id, 0.125 AS [Proba_0], -2.0794415416798357 AS [LogProba_0], 0.25 AS [Proba_1], -1.3862943611198906 AS [LogProba_1], 0.375 AS [Proba_2], -0.9808292530117262 AS [LogProba_2], 0.25 AS [Proba_3], -1.3862943611198906 AS [LogProba_3], 2 AS [Decision], 0.375 AS [DecisionProba] UNION ALL SELECT 31 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 9 AS count, 5 AS depth, 29 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 33 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 13 AS count, 5 AS depth, 32 AS parent_id, 0.07692307692307693 AS [Proba_0], -2.5649493574615367 AS [LogProba_0], 0.15384615384615385 AS [Proba_1], -1.8718021769015913 AS [LogProba_1], 0.07692307692307693 AS [Proba_2], -2.5649493574615367 AS [LogProba_2], 0.6923076923076923 AS [Proba_3], -0.3677247801253174 AS [LogProba_3], 3 AS [Decision], 0.6923076923076923 AS [DecisionProba] UNION ALL SELECT 34 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 32 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 36 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 4 AS depth, 35 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 38 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 18 AS count, 5 AS depth, 37 AS parent_id, 0.05555555555555555 AS [Proba_0], -2.890371757896165 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.8888888888888888 AS [Proba_2], -0.11778303565638351 AS [LogProba_2], 0.05555555555555555 AS [Proba_3], -2.890371757896165 AS [LogProba_3], 2 AS [Decision], 0.8888888888888888 AS [DecisionProba] UNION ALL SELECT 39 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 6 AS count, 5 AS depth, 37 AS parent_id, 0.16666666666666666 AS [Proba_0], -1.791759469228055 AS [LogProba_0], 0.16666666666666666 AS [Proba_1], -1.791759469228055 AS [LogProba_1], 0.16666666666666666 AS [Proba_2], -1.791759469228055 AS [LogProba_2], 0.5 AS [Proba_3], -0.6931471805599453 AS [LogProba_3], 3 AS [Decision], 0.5 AS [DecisionProba] UNION ALL SELECT 43 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 7 AS count, 5 AS depth, 42 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 44 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 38 AS count, 5 AS depth, 42 AS parent_id, 0.13157894736842105 AS [Proba_0], -2.0281482472922856 AS [LogProba_0], 0.42105263157894735 AS [Proba_1], -0.8649974374866046 AS [LogProba_1], 0.3684210526315789 AS [Proba_2], -0.9985288301111273 AS [LogProba_2], 0.07894736842105263 AS [Proba_3], -2.538973871058276 AS [LogProba_3], 1 AS [Decision], 0.42105263157894735 AS [DecisionProba] UNION ALL SELECT 46 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 7 AS count, 5 AS depth, 45 AS parent_id, 0.2857142857142857 AS [Proba_0], -1.252762968495368 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.14285714285714285 AS [Proba_2], -1.9459101490553135 AS [LogProba_2], 0.5714285714285714 AS [Proba_3], -0.5596157879354228 AS [LogProba_3], 3 AS [Decision], 0.5714285714285714 AS [DecisionProba] UNION ALL SELECT 47 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 80 AS count, 5 AS depth, 45 AS parent_id, 0.125 AS [Proba_0], -2.0794415416798357 AS [LogProba_0], 0.725 AS [Proba_1], -0.32158362412746233 AS [LogProba_1], 0.0875 AS [Proba_2], -2.436116485618568 AS [LogProba_2], 0.0625 AS [Proba_3], -2.772588722239781 AS [LogProba_3], 1 AS [Decision], 0.725 AS [DecisionProba] UNION ALL SELECT 50 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 8 AS count, 5 AS depth, 49 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.25 AS [Proba_2], -1.3862943611198906 AS [LogProba_2], 0.75 AS [Proba_3], -0.2876820724517809 AS [LogProba_3], 3 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 51 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 5 AS count, 5 AS depth, 49 AS parent_id, 0.8 AS [Proba_0], -0.2231435513142097 AS [LogProba_0], 0.2 AS [Proba_1], -1.6094379124341003 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 52 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 6 AS count, 4 AS depth, 48 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Proba_0] AS [Proba_0], [DT_node_data_3].[LogProba_0] AS [LogProba_0], [DT_node_data_3].[Proba_1] AS [Proba_1], [DT_node_data_3].[LogProba_1] AS [LogProba_1], [DT_node_data_3].[Proba_2] AS [Proba_2], [DT_node_data_3].[LogProba_2] AS [LogProba_2], [DT_node_data_3].[Proba_3] AS [Proba_3], [DT_node_data_3].[LogProba_3] AS [LogProba_3], [DT_node_data_3].[Decision] AS [Decision], [DT_node_data_3].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
calibration_base_estimator_3 AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [DT_Output_3].[Proba_0] AS [Proba_0], [DT_Output_3].[Proba_1] AS [Proba_1], [DT_Output_3].[Proba_2] AS [Proba_2], [DT_Output_3].[Proba_3] AS [Proba_3], [DT_Output_3].[LogProba_0] AS [LogProba_0], [DT_Output_3].[LogProba_1] AS [LogProba_1], [DT_Output_3].[LogProba_2] AS [LogProba_2], [DT_Output_3].[LogProba_3] AS [LogProba_3], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_3].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_3].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_3].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT(53)), [DT_Output_3].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_3]), 
sigmoid_calibration_3 AS 
(SELECT calibration_base_estimator_3.[KEY] AS [KEY], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(0.8127506680101059 * calibration_base_estimator_3.[ScoreOrProba_0] + -1.3014599302039525)) THEN -(0.8127506680101059 * calibration_base_estimator_3.[ScoreOrProba_0] + -1.3014599302039525) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(0.8127506680101059 * calibration_base_estimator_3.[ScoreOrProba_0] + -1.3014599302039525)) THEN -(0.8127506680101059 * calibration_base_estimator_3.[ScoreOrProba_0] + -1.3014599302039525) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_0], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.1836128069628091 * calibration_base_estimator_3.[ScoreOrProba_1] + -1.4241739251022805)) THEN -(1.1836128069628091 * calibration_base_estimator_3.[ScoreOrProba_1] + -1.4241739251022805) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.1836128069628091 * calibration_base_estimator_3.[ScoreOrProba_1] + -1.4241739251022805)) THEN -(1.1836128069628091 * calibration_base_estimator_3.[ScoreOrProba_1] + -1.4241739251022805) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_1], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.2035525461225467 * calibration_base_estimator_3.[ScoreOrProba_2] + -1.3946407700607943)) THEN -(1.2035525461225467 * calibration_base_estimator_3.[ScoreOrProba_2] + -1.3946407700607943) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.2035525461225467 * calibration_base_estimator_3.[ScoreOrProba_2] + -1.3946407700607943)) THEN -(1.2035525461225467 * calibration_base_estimator_3.[ScoreOrProba_2] + -1.3946407700607943) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_2], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(1.6393864091976202 * calibration_base_estimator_3.[ScoreOrProba_3] + -1.5914137927758794)) THEN -(1.6393864091976202 * calibration_base_estimator_3.[ScoreOrProba_3] + -1.5914137927758794) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(1.6393864091976202 * calibration_base_estimator_3.[ScoreOrProba_3] + -1.5914137927758794)) THEN -(1.6393864091976202 * calibration_base_estimator_3.[ScoreOrProba_3] + -1.5914137927758794) ELSE -100.0 END ELSE 100.0 END)) AS [Proba_3] 
FROM calibration_base_estimator_3), 
[Normalized_Probas_3] AS 
(SELECT sigmoid_calibration_3.[KEY] AS [KEY], sigmoid_calibration_3.[Proba_0] / (sigmoid_calibration_3.[Proba_0] + sigmoid_calibration_3.[Proba_1] + sigmoid_calibration_3.[Proba_2] + sigmoid_calibration_3.[Proba_3]) AS [Proba_0], sigmoid_calibration_3.[Proba_1] / (sigmoid_calibration_3.[Proba_0] + sigmoid_calibration_3.[Proba_1] + sigmoid_calibration_3.[Proba_2] + sigmoid_calibration_3.[Proba_3]) AS [Proba_1], sigmoid_calibration_3.[Proba_2] / (sigmoid_calibration_3.[Proba_0] + sigmoid_calibration_3.[Proba_1] + sigmoid_calibration_3.[Proba_2] + sigmoid_calibration_3.[Proba_3]) AS [Proba_2], sigmoid_calibration_3.[Proba_3] / (sigmoid_calibration_3.[Proba_0] + sigmoid_calibration_3.[Proba_1] + sigmoid_calibration_3.[Proba_2] + sigmoid_calibration_3.[Proba_3]) AS [Proba_3] 
FROM sigmoid_calibration_3)
 INSERT INTO ##TMP_20180329233130_HLVV99_CalProb_AVG_B0 ([KEY], [Proba_0], [Proba_1], [Proba_2], [Proba_3]) SELECT [CalProb_AVG_B0].[KEY], [CalProb_AVG_B0].[Proba_0], [CalProb_AVG_B0].[Proba_1], [CalProb_AVG_B0].[Proba_2], [CalProb_AVG_B0].[Proba_3] 
FROM (SELECT [CalProb_AVG_esu_0].[KEY] AS [KEY], [CalProb_AVG_esu_0].[Proba_0] AS [Proba_0], [CalProb_AVG_esu_0].[Proba_1] AS [Proba_1], [CalProb_AVG_esu_0].[Proba_2] AS [Proba_2], [CalProb_AVG_esu_0].[Proba_3] AS [Proba_3] 
FROM (SELECT [Normalized_Probas].[KEY] AS [KEY], [Normalized_Probas].[Proba_0] AS [Proba_0], [Normalized_Probas].[Proba_1] AS [Proba_1], [Normalized_Probas].[Proba_2] AS [Proba_2], [Normalized_Probas].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas] UNION ALL SELECT [Normalized_Probas_1].[KEY] AS [KEY], [Normalized_Probas_1].[Proba_0] AS [Proba_0], [Normalized_Probas_1].[Proba_1] AS [Proba_1], [Normalized_Probas_1].[Proba_2] AS [Proba_2], [Normalized_Probas_1].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_1] UNION ALL SELECT [Normalized_Probas_2].[KEY] AS [KEY], [Normalized_Probas_2].[Proba_0] AS [Proba_0], [Normalized_Probas_2].[Proba_1] AS [Proba_1], [Normalized_Probas_2].[Proba_2] AS [Proba_2], [Normalized_Probas_2].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_2] UNION ALL SELECT [Normalized_Probas_3].[KEY] AS [KEY], [Normalized_Probas_3].[Proba_0] AS [Proba_0], [Normalized_Probas_3].[Proba_1] AS [Proba_1], [Normalized_Probas_3].[Proba_2] AS [Proba_2], [Normalized_Probas_3].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_3]) AS [CalProb_AVG_esu_0]) AS [CalProb_AVG_B0]
-- Code For temporary table ##TMP_20180329233130_YB4855_CalProb_AVG_Union part 1/2. Create 


CREATE TABLE ##TMP_20180329233130_YB4855_CalProb_AVG_Union (
	[KEY] BIGINT NULL, 
	[Proba_0] FLOAT NULL, 
	[Proba_1] FLOAT NULL, 
	[Proba_2] FLOAT NULL, 
	[Proba_3] FLOAT NULL
)


-- Code For temporary table ##TMP_20180329233130_YB4855_CalProb_AVG_Union part 2/2. Populate

INSERT INTO ##TMP_20180329233130_YB4855_CalProb_AVG_Union ([KEY], [Proba_0], [Proba_1], [Proba_2], [Proba_3]) SELECT [CalProb_AVG_Union].[KEY], [CalProb_AVG_Union].[Proba_0], [CalProb_AVG_Union].[Proba_1], [CalProb_AVG_Union].[Proba_2], [CalProb_AVG_Union].[Proba_3] 
FROM (SELECT [CalProb_AVG_EnsembleUnion].[KEY] AS [KEY], [CalProb_AVG_EnsembleUnion].[Proba_0] AS [Proba_0], [CalProb_AVG_EnsembleUnion].[Proba_1] AS [Proba_1], [CalProb_AVG_EnsembleUnion].[Proba_2] AS [Proba_2], [CalProb_AVG_EnsembleUnion].[Proba_3] AS [Proba_3] 
FROM (SELECT [CalProb_AVG_B0].[KEY] AS [KEY], [CalProb_AVG_B0].[Proba_0] AS [Proba_0], [CalProb_AVG_B0].[Proba_1] AS [Proba_1], [CalProb_AVG_B0].[Proba_2] AS [Proba_2], [CalProb_AVG_B0].[Proba_3] AS [Proba_3] 
FROM ##TMP_20180329233130_HLVV99_CalProb_AVG_B0 AS [CalProb_AVG_B0]) AS [CalProb_AVG_EnsembleUnion]) AS [CalProb_AVG_Union]

-- Model deployment code

WITH [CalProb_AVG_avg] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Proba_0] AS [Proba_0], [T].[Proba_1] AS [Proba_1], [T].[Proba_2] AS [Proba_2], [T].[Proba_3] AS [Proba_3] 
FROM (SELECT [CalProb_AVG_Union].[KEY] AS [KEY], avg(CAST([CalProb_AVG_Union].[Proba_0] AS FLOAT(53))) AS [Proba_0], avg(CAST([CalProb_AVG_Union].[Proba_1] AS FLOAT(53))) AS [Proba_1], avg(CAST([CalProb_AVG_Union].[Proba_2] AS FLOAT(53))) AS [Proba_2], avg(CAST([CalProb_AVG_Union].[Proba_3] AS FLOAT(53))) AS [Proba_3] 
FROM ##TMP_20180329233130_YB4855_CalProb_AVG_Union AS [CalProb_AVG_Union] GROUP BY [CalProb_AVG_Union].[KEY]) AS [T]), 
orig_cte AS 
(SELECT [CalProb_AVG_avg].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [CalProb_AVG_avg].[Proba_0] AS [Proba_0], [CalProb_AVG_avg].[Proba_1] AS [Proba_1], [CalProb_AVG_avg].[Proba_2] AS [Proba_2], [CalProb_AVG_avg].[Proba_3] AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba] 
FROM [CalProb_AVG_avg]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], min(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte