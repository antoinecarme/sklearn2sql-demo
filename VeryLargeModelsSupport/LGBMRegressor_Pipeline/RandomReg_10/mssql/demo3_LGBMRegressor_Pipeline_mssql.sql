-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.


-- Code For temporary table ##TMP_20180329231755_1VJ7N1_ADS_imp_1_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180329231755_1VJ7N1_ADS_imp_1_OUT (
	[KEY] BIGINT NULL, 
	impter_2 FLOAT(53) NULL, 
	impter_3 FLOAT(53) NULL, 
	impter_4 FLOAT(53) NULL, 
	impter_5 FLOAT(53) NULL, 
	impter_6 FLOAT(53) NULL, 
	impter_7 FLOAT(53) NULL, 
	impter_8 FLOAT(53) NULL, 
	impter_9 FLOAT(53) NULL, 
	impter_10 FLOAT(53) NULL, 
	impter_11 FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329231755_1VJ7N1_ADS_imp_1_OUT part 2/2. Populate

INSERT INTO ##TMP_20180329231755_1VJ7N1_ADS_imp_1_OUT ([KEY], impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11) SELECT [ADS_imp_1_OUT].[KEY], [ADS_imp_1_OUT].impter_2, [ADS_imp_1_OUT].impter_3, [ADS_imp_1_OUT].impter_4, [ADS_imp_1_OUT].impter_5, [ADS_imp_1_OUT].impter_6, [ADS_imp_1_OUT].impter_7, [ADS_imp_1_OUT].impter_8, [ADS_imp_1_OUT].impter_9, [ADS_imp_1_OUT].impter_10, [ADS_imp_1_OUT].impter_11 
FROM (SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.16680947298137394 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN -0.16351271994443456 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.19149292241003152 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.058384844753055345 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.09933205162122274 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN 0.21293121660488037 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN 0.047865568690029614 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.05078698959084227 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN -0.1913199225908187 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.19940405677473352 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [RandomReg_10] AS [ADS]) AS [ADS_imp_1_OUT]
-- Code For temporary table ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT (
	[KEY] BIGINT NULL, 
	scaler_2 FLOAT NULL, 
	scaler_3 FLOAT NULL, 
	scaler_4 FLOAT NULL, 
	scaler_5 FLOAT NULL, 
	scaler_6 FLOAT NULL, 
	scaler_7 FLOAT NULL, 
	scaler_8 FLOAT NULL, 
	scaler_9 FLOAT NULL, 
	scaler_10 FLOAT NULL, 
	scaler_11 FLOAT NULL
)


-- Code For temporary table ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT part 2/2. Populate

INSERT INTO ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT ([KEY], scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11) SELECT [ADS_sca_2_OUT].[KEY], [ADS_sca_2_OUT].scaler_2, [ADS_sca_2_OUT].scaler_3, [ADS_sca_2_OUT].scaler_4, [ADS_sca_2_OUT].scaler_5, [ADS_sca_2_OUT].scaler_6, [ADS_sca_2_OUT].scaler_7, [ADS_sca_2_OUT].scaler_8, [ADS_sca_2_OUT].scaler_9, [ADS_sca_2_OUT].scaler_10, [ADS_sca_2_OUT].scaler_11 
FROM (SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT(53)) - 0.16680947298137394) / 1.0289835997047314 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT(53)) - -0.16351271994443456) / 0.9915812535046814 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT(53)) - 0.19149292241003152) / 0.9321147629147756 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT(53)) - 0.058384844753055345) / 1.0855729329506805 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT(53)) - -0.09933205162122274) / 1.0743904412882828 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT(53)) - 0.21293121660488037) / 0.9358074381886248 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT(53)) - 0.047865568690029614) / 1.1363574090613386 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT(53)) - 0.05078698959084227) / 0.9725457460098452 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT(53)) - -0.1913199225908187) / 1.1415974677936562 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT(53)) - 0.19940405677473352) / 0.882245682091319 AS scaler_11 
FROM ##TMP_20180329231755_1VJ7N1_ADS_imp_1_OUT AS [ADS_imp_1_OUT]) AS [ADS_sca_2_OUT]
-- Code For temporary table ##TMP_20180329231756_SN986P_LGBM_Sum_B0 part 1/2. Create 


CREATE TABLE ##TMP_20180329231756_SN986P_LGBM_Sum_B0 (
	[KEY] BIGINT NULL, 
	[Estimator] FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329231756_SN986P_LGBM_Sum_B0 part 2/2. Populate

WITH [DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.3164803121911138) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_8 <= -0.21623320457812215) THEN 4 ELSE 5 END ELSE 3 END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 33.01758538832267 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, 16.35685888558626 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, 26.49344970802466 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[LGBM_Tree_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], [DT_Output].[Estimator] AS [Estimator] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.3164803121911138) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_8 <= -0.21623320457812215) THEN 4 ELSE 5 END ELSE 3 END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 6.281146121025086 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, -9.546544489860535 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, 0.08321702793240549 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[LGBM_Tree_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], [DT_Output_1].[Estimator] AS [Estimator] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.3164803121911138) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_8 <= -0.21623320457812215) THEN 4 ELSE 5 END ELSE 3 END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 5.967088474531969 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, -9.069217104911806 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, 0.07905627424518269 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[LGBM_Tree_2] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], [DT_Output_2].[Estimator] AS [Estimator] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.3164803121911138) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= 0.2586791747234464) THEN 4 ELSE 5 END ELSE 3 END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 5.668734281857809 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, -7.652173786896926 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, 1.203937196917832 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[LGBM_Tree_3] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], [DT_Output_3].[Estimator] AS [Estimator] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.45068346401604725) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.0000000180025095e-35) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -6.060863846430072 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -3.4349961614608766 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 7.040704530658144 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[LGBM_Tree_4] AS 
(SELECT [DT_Output_4].[KEY] AS [KEY], [DT_Output_4].[Estimator] AS [Estimator] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.3164803121911138) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= 0.2586791747234464) THEN 4 ELSE 5 END ELSE 3 END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 5.338919224739075 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, -7.213532202977401 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, 1.141010937591394 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[LGBM_Tree_5] AS 
(SELECT [DT_Output_5].[KEY] AS [KEY], [DT_Output_5].[Estimator] AS [Estimator] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.45068346401604725) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.0000000180025095e-35) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -5.75336786530636 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -3.1847934646159413 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 6.637478779933669 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[LGBM_Tree_6] AS 
(SELECT [DT_Output_6].[KEY] AS [KEY], [DT_Output_6].[Estimator] AS [Estimator] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.03176193209818628) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.07141511842555943) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -4.028308840898368 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 0.17185233652591705 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 7.317475950150262 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[LGBM_Tree_7] AS 
(SELECT [DT_Output_7].[KEY] AS [KEY], [DT_Output_7].[Estimator] AS [Estimator] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.3164803121911138) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.11568439252545913) THEN 4 ELSE 5 END ELSE 3 END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 5.036602361202241 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, -6.427921153759134 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, 1.6815066769009546 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[LGBM_Tree_8] AS 
(SELECT [DT_Output_8].[KEY] AS [KEY], [DT_Output_8].[Estimator] AS [Estimator] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= -0.3880965409812232) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.418575739852324) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -4.910905361175537 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -0.2693685668706894 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 7.770410826206208 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[LGBM_Tree_9] AS 
(SELECT [DT_Output_9].[KEY] AS [KEY], [DT_Output_9].[Estimator] AS [Estimator] 
FROM [DT_Output_9])
 INSERT INTO ##TMP_20180329231756_SN986P_LGBM_Sum_B0 ([KEY], [Estimator]) SELECT [LGBM_Sum_B0].[KEY], [LGBM_Sum_B0].[Estimator] 
FROM (SELECT [LGBM_Sum_esu_0].[KEY] AS [KEY], [LGBM_Sum_esu_0].[Estimator] AS [Estimator] 
FROM (SELECT [LGBM_Tree_0].[KEY] AS [KEY], [LGBM_Tree_0].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_0] UNION ALL SELECT [LGBM_Tree_1].[KEY] AS [KEY], [LGBM_Tree_1].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_1] UNION ALL SELECT [LGBM_Tree_2].[KEY] AS [KEY], [LGBM_Tree_2].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_2] UNION ALL SELECT [LGBM_Tree_3].[KEY] AS [KEY], [LGBM_Tree_3].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_3] UNION ALL SELECT [LGBM_Tree_4].[KEY] AS [KEY], [LGBM_Tree_4].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_4] UNION ALL SELECT [LGBM_Tree_5].[KEY] AS [KEY], [LGBM_Tree_5].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_5] UNION ALL SELECT [LGBM_Tree_6].[KEY] AS [KEY], [LGBM_Tree_6].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_6] UNION ALL SELECT [LGBM_Tree_7].[KEY] AS [KEY], [LGBM_Tree_7].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_7] UNION ALL SELECT [LGBM_Tree_8].[KEY] AS [KEY], [LGBM_Tree_8].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_8] UNION ALL SELECT [LGBM_Tree_9].[KEY] AS [KEY], [LGBM_Tree_9].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_9]) AS [LGBM_Sum_esu_0]) AS [LGBM_Sum_B0]
-- Code For temporary table ##TMP_20180329231756_1IL7CW_LGBM_Sum_B1 part 1/2. Create 


CREATE TABLE ##TMP_20180329231756_1IL7CW_LGBM_Sum_B1 (
	[KEY] BIGINT NULL, 
	[Estimator] FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329231756_1IL7CW_LGBM_Sum_B1 part 2/2. Populate

WITH [DT_node_lookup_10] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.03176193209818628) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.07141511842555943) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -3.8286320564074394 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 0.19408844918012622 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 6.925470465705509 AS [Estimator]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[LGBM_Tree_10] AS 
(SELECT [DT_Output_10].[KEY] AS [KEY], [DT_Output_10].[Estimator] AS [Estimator] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -0.7485514689090479) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.0000000180025095e-35) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -6.171608558439074 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -2.5980403355189736 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 6.52738412734001 AS [Estimator]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[LGBM_Tree_11] AS 
(SELECT [DT_Output_11].[KEY] AS [KEY], [DT_Output_11].[Estimator] AS [Estimator] 
FROM [DT_Output_11]), 
[DT_node_lookup_12] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= -0.3880965409812232) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.3164803121911138) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -4.589754547278086 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -0.5462024084159306 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 6.953922884030776 AS [Estimator]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].depth AS depth, [DT_node_data_12].parent_id AS parent_id, [DT_node_data_12].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[LGBM_Tree_12] AS 
(SELECT [DT_Output_12].[KEY] AS [KEY], [DT_Output_12].[Estimator] AS [Estimator] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.03176193209818628) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.07141511842555943) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -3.583646340247913 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 0.2481087422370911 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 6.419049066588993 AS [Estimator]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].depth AS depth, [DT_node_data_13].parent_id AS parent_id, [DT_node_data_13].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[LGBM_Tree_13] AS 
(SELECT [DT_Output_13].[KEY] AS [KEY], [DT_Output_13].[Estimator] AS [Estimator] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -0.7485514689090479) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.0000000180025095e-35) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -5.778139722914923 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -2.3511506770338335 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 6.037843723643211 AS [Estimator]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].depth AS depth, [DT_node_data_14].parent_id AS parent_id, [DT_node_data_14].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[LGBM_Tree_14] AS 
(SELECT [DT_Output_14].[KEY] AS [KEY], [DT_Output_14].[Estimator] AS [Estimator] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 0.3164803121911138) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.11568439252545913) THEN 4 ELSE 5 END ELSE 3 END AS node_id_2 
FROM ##TMP_20180329231755_BVEROQ_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 4.316606424252192 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, -5.71238597097068 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, 1.721952373640878 AS [Estimator]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].depth AS depth, [DT_node_data_15].parent_id AS parent_id, [DT_node_data_15].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[LGBM_Tree_15] AS 
(SELECT [DT_Output_15].[KEY] AS [KEY], [DT_Output_15].[Estimator] AS [Estimator] 
FROM [DT_Output_15])
 INSERT INTO ##TMP_20180329231756_1IL7CW_LGBM_Sum_B1 ([KEY], [Estimator]) SELECT [LGBM_Sum_B1].[KEY], [LGBM_Sum_B1].[Estimator] 
FROM (SELECT [LGBM_Sum_esu_1].[KEY] AS [KEY], [LGBM_Sum_esu_1].[Estimator] AS [Estimator] 
FROM (SELECT [LGBM_Tree_10].[KEY] AS [KEY], [LGBM_Tree_10].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_10] UNION ALL SELECT [LGBM_Tree_11].[KEY] AS [KEY], [LGBM_Tree_11].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_11] UNION ALL SELECT [LGBM_Tree_12].[KEY] AS [KEY], [LGBM_Tree_12].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_12] UNION ALL SELECT [LGBM_Tree_13].[KEY] AS [KEY], [LGBM_Tree_13].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_13] UNION ALL SELECT [LGBM_Tree_14].[KEY] AS [KEY], [LGBM_Tree_14].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_14] UNION ALL SELECT [LGBM_Tree_15].[KEY] AS [KEY], [LGBM_Tree_15].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_15]) AS [LGBM_Sum_esu_1]) AS [LGBM_Sum_B1]
-- Code For temporary table ##TMP_20180329231756_PPWDH3_LGBM_Sum_Union part 1/2. Create 


CREATE TABLE ##TMP_20180329231756_PPWDH3_LGBM_Sum_Union (
	[KEY] BIGINT NULL, 
	[Estimator] FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329231756_PPWDH3_LGBM_Sum_Union part 2/2. Populate

INSERT INTO ##TMP_20180329231756_PPWDH3_LGBM_Sum_Union ([KEY], [Estimator]) SELECT [LGBM_Sum_Union].[KEY], [LGBM_Sum_Union].[Estimator] 
FROM (SELECT [LGBM_Sum_EnsembleUnion].[KEY] AS [KEY], [LGBM_Sum_EnsembleUnion].[Estimator] AS [Estimator] 
FROM (SELECT [LGBM_Sum_B0].[KEY] AS [KEY], [LGBM_Sum_B0].[Estimator] AS [Estimator] 
FROM ##TMP_20180329231756_SN986P_LGBM_Sum_B0 AS [LGBM_Sum_B0] UNION ALL SELECT [LGBM_Sum_B1].[KEY] AS [KEY], [LGBM_Sum_B1].[Estimator] AS [Estimator] 
FROM ##TMP_20180329231756_1IL7CW_LGBM_Sum_B1 AS [LGBM_Sum_B1]) AS [LGBM_Sum_EnsembleUnion]) AS [LGBM_Sum_Union]

-- Model deployment code

WITH [LGBM_Sum_sum] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Estimator] AS [Estimator] 
FROM (SELECT [LGBM_Sum_Union].[KEY] AS [KEY], sum(CAST([LGBM_Sum_Union].[Estimator] AS FLOAT(53))) AS [Estimator] 
FROM ##TMP_20180329231756_PPWDH3_LGBM_Sum_Union AS [LGBM_Sum_Union] GROUP BY [LGBM_Sum_Union].[KEY]) AS [T])
 SELECT [LGBM_Sum_sum].[KEY] AS [KEY], [LGBM_Sum_sum].[Estimator] AS [Estimator] 
FROM [LGBM_Sum_sum]