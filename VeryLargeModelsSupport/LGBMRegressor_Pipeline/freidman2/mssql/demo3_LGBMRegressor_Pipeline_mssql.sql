-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.


-- Code For temporary table ##TMP_20180329232321_KLR4DR_ADS_imp_1_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180329232321_KLR4DR_ADS_imp_1_OUT (
	[KEY] BIGINT NULL, 
	imputer_output_2 FLOAT(53) NULL, 
	imputer_output_3 FLOAT(53) NULL, 
	imputer_output_4 FLOAT(53) NULL, 
	imputer_output_5 FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329232321_KLR4DR_ADS_imp_1_OUT part 2/2. Populate

INSERT INTO ##TMP_20180329232321_KLR4DR_ADS_imp_1_OUT ([KEY], imputer_output_2, imputer_output_3, imputer_output_4, imputer_output_5) SELECT [ADS_imp_1_OUT].[KEY], [ADS_imp_1_OUT].imputer_output_2, [ADS_imp_1_OUT].imputer_output_3, [ADS_imp_1_OUT].imputer_output_4, [ADS_imp_1_OUT].imputer_output_5 
FROM (SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 43.79128122207401 ELSE [ADS].[Feature_0] END AS imputer_output_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 945.9672833084396 ELSE [ADS].[Feature_1] END AS imputer_output_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.5310009099975209 ELSE [ADS].[Feature_2] END AS imputer_output_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 6.139967152050499 ELSE [ADS].[Feature_3] END AS imputer_output_5 
FROM freidman2 AS [ADS]) AS [ADS_imp_1_OUT]
-- Code For temporary table ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT (
	[KEY] BIGINT NULL, 
	scaler_output_2 FLOAT NULL, 
	scaler_output_3 FLOAT NULL, 
	scaler_output_4 FLOAT NULL, 
	scaler_output_5 FLOAT NULL
)


-- Code For temporary table ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT part 2/2. Populate

INSERT INTO ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT ([KEY], scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) SELECT [ADS_sca_2_OUT].[KEY], [ADS_sca_2_OUT].scaler_output_2, [ADS_sca_2_OUT].scaler_output_3, [ADS_sca_2_OUT].scaler_output_4, [ADS_sca_2_OUT].scaler_output_5 
FROM (SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].imputer_output_2 AS FLOAT(53)) - 43.79128122207401) / 26.03562357622511 AS scaler_output_2, (CAST([ADS_imp_1_OUT].imputer_output_3 AS FLOAT(53)) - 945.9672833084396) / 461.4552766146446 AS scaler_output_3, (CAST([ADS_imp_1_OUT].imputer_output_4 AS FLOAT(53)) - 0.5310009099975209) / 0.2901863282144786 AS scaler_output_4, (CAST([ADS_imp_1_OUT].imputer_output_5 AS FLOAT(53)) - 6.139967152050499) / 3.072917242564058 AS scaler_output_5 
FROM ##TMP_20180329232321_KLR4DR_ADS_imp_1_OUT AS [ADS_imp_1_OUT]) AS [ADS_sca_2_OUT]
-- Code For temporary table ##TMP_20180329232321_ARNBF4_LGBM_Sum_B0 part 1/2. Create 


CREATE TABLE ##TMP_20180329232321_ARNBF4_LGBM_Sum_B0 (
	[KEY] BIGINT NULL, 
	[Estimator] FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329232321_ARNBF4_LGBM_Sum_B0 part 2/2. Populate

WITH [DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= -0.4017176226368672) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -0.1625491071001343) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 482.8941449244817 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 490.0993488836288 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 517.7970262570815 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[LGBM_Tree_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], [DT_Output].[Estimator] AS [Estimator] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 1.0000000180025095e-35) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= 1.0000000180025095e-35) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -12.793630010941449 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -4.030740521170876 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 21.81915512084961 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[LGBM_Tree_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], [DT_Output_1].[Estimator] AS [Estimator] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= -0.4017176226368672) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -0.1625491071001343) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -14.749121114942762 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -8.276600069999695 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 17.083583760984016 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[LGBM_Tree_2] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], [DT_Output_2].[Estimator] AS [Estimator] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= -0.4017176226368672) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -0.1625491071001343) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -14.01166511818215 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -7.86277027130127 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 16.229404817927968 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[LGBM_Tree_3] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], [DT_Output_3].[Estimator] AS [Estimator] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 1.0000000180025095e-35) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= 1.0000000180025095e-35) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -11.136731574114632 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -3.5841937027194284 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 19.062547238667808 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[LGBM_Tree_4] AS 
(SELECT [DT_Output_4].[KEY] AS [KEY], [DT_Output_4].[Estimator] AS [Estimator] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -0.2702165971766578) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 0.18580045827127697) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -11.770608433087666 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -3.5561132691502575 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 17.68084326553345 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[LGBM_Tree_5] AS 
(SELECT [DT_Output_5].[KEY] AS [KEY], [DT_Output_5].[Estimator] AS [Estimator] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= -0.4017176226368672) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= 1.0000000180025095e-35) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -12.393895325837313 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -4.50346630525589 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 15.9722086923463 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[LGBM_Tree_6] AS 
(SELECT [DT_Output_6].[KEY] AS [KEY], [DT_Output_6].[Estimator] AS [Estimator] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 1.0000000180025095e-35) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= 1.0000000180025095e-35) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -9.802862705903896 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -2.9632945515892724 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 16.603741993506752 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[LGBM_Tree_7] AS 
(SELECT [DT_Output_7].[KEY] AS [KEY], [DT_Output_7].[Estimator] AS [Estimator] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -0.2702165971766578) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 0.18580045827127697) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -10.479942186673483 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -2.9925001220703127 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 15.568430654525756 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[LGBM_Tree_8] AS 
(SELECT [DT_Output_8].[KEY] AS [KEY], [DT_Output_8].[Estimator] AS [Estimator] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= -0.4017176226368672) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= 0.32140712198882604) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -10.968044874403212 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -1.8452249623835089 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 16.913542956397645 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[LGBM_Tree_9] AS 
(SELECT [DT_Output_9].[KEY] AS [KEY], [DT_Output_9].[Estimator] AS [Estimator] 
FROM [DT_Output_9])
 INSERT INTO ##TMP_20180329232321_ARNBF4_LGBM_Sum_B0 ([KEY], [Estimator]) SELECT [LGBM_Sum_B0].[KEY], [LGBM_Sum_B0].[Estimator] 
FROM (SELECT [LGBM_Sum_esu_0].[KEY] AS [KEY], [LGBM_Sum_esu_0].[Estimator] AS [Estimator] 
FROM (SELECT [LGBM_Tree_0].[KEY] AS [KEY], [LGBM_Tree_0].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_0] UNION ALL SELECT [LGBM_Tree_1].[KEY] AS [KEY], [LGBM_Tree_1].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_1] UNION ALL SELECT [LGBM_Tree_2].[KEY] AS [KEY], [LGBM_Tree_2].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_2] UNION ALL SELECT [LGBM_Tree_3].[KEY] AS [KEY], [LGBM_Tree_3].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_3] UNION ALL SELECT [LGBM_Tree_4].[KEY] AS [KEY], [LGBM_Tree_4].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_4] UNION ALL SELECT [LGBM_Tree_5].[KEY] AS [KEY], [LGBM_Tree_5].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_5] UNION ALL SELECT [LGBM_Tree_6].[KEY] AS [KEY], [LGBM_Tree_6].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_6] UNION ALL SELECT [LGBM_Tree_7].[KEY] AS [KEY], [LGBM_Tree_7].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_7] UNION ALL SELECT [LGBM_Tree_8].[KEY] AS [KEY], [LGBM_Tree_8].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_8] UNION ALL SELECT [LGBM_Tree_9].[KEY] AS [KEY], [LGBM_Tree_9].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_9]) AS [LGBM_Sum_esu_0]) AS [LGBM_Sum_B0]
-- Code For temporary table ##TMP_20180329232321_J62O6O_LGBM_Sum_B1 part 1/2. Create 


CREATE TABLE ##TMP_20180329232321_J62O6O_LGBM_Sum_B1 (
	[KEY] BIGINT NULL, 
	[Estimator] FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329232321_J62O6O_LGBM_Sum_B1 part 2/2. Populate

WITH [DT_node_lookup_10] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -0.2702165971766578) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 0.2944709088803666) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -9.681227424939474 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -2.085434001463431 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 15.075806097362353 AS [Estimator]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[LGBM_Tree_10] AS 
(SELECT [DT_Output_10].[KEY] AS [KEY], [DT_Output_10].[Estimator] AS [Estimator] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= -0.4017176226368672) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= 0.32140712198882604) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -10.14657541204382 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -1.7300191707909107 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 15.681816484246935 AS [Estimator]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[LGBM_Tree_11] AS 
(SELECT [DT_Output_11].[KEY] AS [KEY], [DT_Output_11].[Estimator] AS [Estimator] 
FROM [DT_Output_11]), 
[DT_node_lookup_12] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -0.2702165971766578) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 0.2944709088803666) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -8.942333932717641 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -1.9510654467123527 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 13.954295237168024 AS [Estimator]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].depth AS depth, [DT_node_data_12].parent_id AS parent_id, [DT_node_data_12].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[LGBM_Tree_12] AS 
(SELECT [DT_Output_12].[KEY] AS [KEY], [DT_Output_12].[Estimator] AS [Estimator] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= -0.4017176226368672) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= 0.32140712198882604) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -9.386331801944308 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -1.6227087751030922 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 14.54084018298558 AS [Estimator]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].depth AS depth, [DT_node_data_13].parent_id AS parent_id, [DT_node_data_13].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[LGBM_Tree_13] AS 
(SELECT [DT_Output_13].[KEY] AS [KEY], [DT_Output_13].[Estimator] AS [Estimator] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 0.53678257444202) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= -0.778099550330666) THEN 4 ELSE 5 END ELSE 3 END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, 8.862405347824097 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, -10.147826476324173 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 2 AS parent_id, -1.130419070489945 AS [Estimator]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].depth AS depth, [DT_node_data_14].parent_id AS parent_id, [DT_node_data_14].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[LGBM_Tree_14] AS 
(SELECT [DT_Output_14].[KEY] AS [KEY], [DT_Output_14].[Estimator] AS [Estimator] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -0.45492743380573836) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 0.53678257444202) THEN 6 ELSE 7 END END AS node_id_2 
FROM ##TMP_20180329232321_HQOF7Y_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS depth, 1 AS parent_id, -8.947397152582806 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, -1.2455032962741275 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS depth, 3 AS parent_id, 14.134066591262817 AS [Estimator]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].depth AS depth, [DT_node_data_15].parent_id AS parent_id, [DT_node_data_15].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[LGBM_Tree_15] AS 
(SELECT [DT_Output_15].[KEY] AS [KEY], [DT_Output_15].[Estimator] AS [Estimator] 
FROM [DT_Output_15])
 INSERT INTO ##TMP_20180329232321_J62O6O_LGBM_Sum_B1 ([KEY], [Estimator]) SELECT [LGBM_Sum_B1].[KEY], [LGBM_Sum_B1].[Estimator] 
FROM (SELECT [LGBM_Sum_esu_1].[KEY] AS [KEY], [LGBM_Sum_esu_1].[Estimator] AS [Estimator] 
FROM (SELECT [LGBM_Tree_10].[KEY] AS [KEY], [LGBM_Tree_10].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_10] UNION ALL SELECT [LGBM_Tree_11].[KEY] AS [KEY], [LGBM_Tree_11].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_11] UNION ALL SELECT [LGBM_Tree_12].[KEY] AS [KEY], [LGBM_Tree_12].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_12] UNION ALL SELECT [LGBM_Tree_13].[KEY] AS [KEY], [LGBM_Tree_13].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_13] UNION ALL SELECT [LGBM_Tree_14].[KEY] AS [KEY], [LGBM_Tree_14].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_14] UNION ALL SELECT [LGBM_Tree_15].[KEY] AS [KEY], [LGBM_Tree_15].[Estimator] AS [Estimator] 
FROM [LGBM_Tree_15]) AS [LGBM_Sum_esu_1]) AS [LGBM_Sum_B1]
-- Code For temporary table ##TMP_20180329232321_9ZDSGU_LGBM_Sum_Union part 1/2. Create 


CREATE TABLE ##TMP_20180329232321_9ZDSGU_LGBM_Sum_Union (
	[KEY] BIGINT NULL, 
	[Estimator] FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329232321_9ZDSGU_LGBM_Sum_Union part 2/2. Populate

INSERT INTO ##TMP_20180329232321_9ZDSGU_LGBM_Sum_Union ([KEY], [Estimator]) SELECT [LGBM_Sum_Union].[KEY], [LGBM_Sum_Union].[Estimator] 
FROM (SELECT [LGBM_Sum_EnsembleUnion].[KEY] AS [KEY], [LGBM_Sum_EnsembleUnion].[Estimator] AS [Estimator] 
FROM (SELECT [LGBM_Sum_B0].[KEY] AS [KEY], [LGBM_Sum_B0].[Estimator] AS [Estimator] 
FROM ##TMP_20180329232321_ARNBF4_LGBM_Sum_B0 AS [LGBM_Sum_B0] UNION ALL SELECT [LGBM_Sum_B1].[KEY] AS [KEY], [LGBM_Sum_B1].[Estimator] AS [Estimator] 
FROM ##TMP_20180329232321_J62O6O_LGBM_Sum_B1 AS [LGBM_Sum_B1]) AS [LGBM_Sum_EnsembleUnion]) AS [LGBM_Sum_Union]

-- Model deployment code

WITH [LGBM_Sum_sum] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Estimator] AS [Estimator] 
FROM (SELECT [LGBM_Sum_Union].[KEY] AS [KEY], sum(CAST([LGBM_Sum_Union].[Estimator] AS FLOAT(53))) AS [Estimator] 
FROM ##TMP_20180329232321_9ZDSGU_LGBM_Sum_Union AS [LGBM_Sum_Union] GROUP BY [LGBM_Sum_Union].[KEY]) AS [T])
 SELECT [LGBM_Sum_sum].[KEY] AS [KEY], [LGBM_Sum_sum].[Estimator] AS [Estimator] 
FROM [LGBM_Sum_sum]