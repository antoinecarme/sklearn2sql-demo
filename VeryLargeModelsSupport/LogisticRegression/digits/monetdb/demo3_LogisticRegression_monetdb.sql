-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", 0.0 * "ADS"."Feature_0" + -0.023839101363016313 * "ADS"."Feature_1" + -0.10949761893839369 * "ADS"."Feature_2" + 0.12417000715085634 * "ADS"."Feature_3" + -0.1421331688987322 * "ADS"."Feature_4" + -0.3158058151243545 * "ADS"."Feature_5" + -0.2975991315142991 * "ADS"."Feature_6" + -0.04478939505573691 * "ADS"."Feature_7" + -1.6823547734749617e-05 * "ADS"."Feature_8" + -0.04111642325591271 * "ADS"."Feature_9" + -0.03647179977686538 * "ADS"."Feature_10" + 0.0895144718102951 * "ADS"."Feature_11" + 0.18237367434867985 * "ADS"."Feature_12" + 0.24084625184407346 * "ADS"."Feature_13" + -0.008710664219609185 * "ADS"."Feature_14" + -0.05158647582782971 * "ADS"."Feature_15" + -5.992107497936194e-06 * "ADS"."Feature_16" + 0.08160351180807245 * "ADS"."Feature_17" + 0.2380714777917422 * "ADS"."Feature_18" + -0.132304858907488 * "ADS"."Feature_19" + -0.30787085249083884 * "ADS"."Feature_20" + 0.2847429837839233 * "ADS"."Feature_21" + 0.007631081454035536 * "ADS"."Feature_22" + -0.014707948129243443 * "ADS"."Feature_23" + -9.415458129392729e-07 * "ADS"."Feature_24" + 0.018964885653128167 * "ADS"."Feature_25" + 0.019500105933373365 * "ADS"."Feature_26" + -0.1655289051949923 * "ADS"."Feature_27" + -0.5390346945508236 * "ADS"."Feature_28" + 0.008783185061224844 * "ADS"."Feature_29" + 0.013389967177215724 * "ADS"."Feature_30" + -0.0002658106829410328 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + 0.14599977211410084 * "ADS"."Feature_33" + 0.14773278697575654 * "ADS"."Feature_34" + -0.18739917517786434 * "ADS"."Feature_35" + -0.5651640661235939 * "ADS"."Feature_36" + -0.006690175054236776 * "ADS"."Feature_37" + -0.031076265014570316 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -0.0018502544486597684 * "ADS"."Feature_40" + -0.08350895868892745 * "ADS"."Feature_41" + 0.24714435153383385 * "ADS"."Feature_42" + -0.3161902974038869 * "ADS"."Feature_43" + -0.2896999525462098 * "ADS"."Feature_44" + 0.03166764040117742 * "ADS"."Feature_45" + 0.10871544195192684 * "ADS"."Feature_46" + -0.00011437469505932535 * "ADS"."Feature_47" + -0.002080243764114372 * "ADS"."Feature_48" + -0.13878145548486015 * "ADS"."Feature_49" + -0.010663596812300051 * "ADS"."Feature_50" + 0.010377082692129915 * "ADS"."Feature_51" + 0.18501513478023685 * "ADS"."Feature_52" + -0.022847451130596323 * "ADS"."Feature_53" + -0.14777676337824427 * "ADS"."Feature_54" + -0.07401576580585388 * "ADS"."Feature_55" + -5.2133264741188716e-06 * "ADS"."Feature_56" + -0.03881304140430972 * "ADS"."Feature_57" + -0.2662411229300359 * "ADS"."Feature_58" + 0.015594052709099034 * "ADS"."Feature_59" + -0.3294125876766754 * "ADS"."Feature_60" + -0.1922302227128207 * "ADS"."Feature_61" + -0.12670243940185535 * "ADS"."Feature_62" + -0.062453740924034676 * "ADS"."Feature_63" + -0.020296222585609803 AS "Score_0", 0.0 * "ADS"."Feature_0" + -0.004701894486888714 * "ADS"."Feature_1" + 0.11647854215492803 * "ADS"."Feature_2" + 0.08991515494032166 * "ADS"."Feature_3" + -0.6430704744017158 * "ADS"."Feature_4" + 0.4061999313897893 * "ADS"."Feature_5" + -0.2265652618012258 * "ADS"."Feature_6" + -0.17521133137524286 * "ADS"."Feature_7" + -1.2778743633654502e-05 * "ADS"."Feature_8" + -1.4414367304131988 * "ADS"."Feature_9" + -0.32270687320381625 * "ADS"."Feature_10" + -0.3411643188348721 * "ADS"."Feature_11" + 0.04767965372807302 * "ADS"."Feature_12" + 0.003252992394901556 * "ADS"."Feature_13" + -0.32591167530544246 * "ADS"."Feature_14" + -0.07590434435555266 * "ADS"."Feature_15" + -1.0897797703069917e-05 * "ADS"."Feature_16" + 0.5098586993035703 * "ADS"."Feature_17" + 0.09202788117070151 * "ADS"."Feature_18" + 0.7502575574533565 * "ADS"."Feature_19" + 0.5130415908689847 * "ADS"."Feature_20" + -0.20228952822399732 * "ADS"."Feature_21" + 0.31500287041410857 * "ADS"."Feature_22" + -0.11525113480062799 * "ADS"."Feature_23" + -0.39690626171398186 * "ADS"."Feature_24" + -0.29007380747784 * "ADS"."Feature_25" + 0.030368588636321133 * "ADS"."Feature_26" + 0.09924606966270146 * "ADS"."Feature_27" + -0.15735910879023507 * "ADS"."Feature_28" + 0.08294131148915486 * "ADS"."Feature_29" + -0.651759044504835 * "ADS"."Feature_30" + -4.7724326301884685e-06 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + 0.029777179569770995 * "ADS"."Feature_33" + 0.022564555842630726 * "ADS"."Feature_34" + -0.1273379448065699 * "ADS"."Feature_35" + 0.278179885771475 * "ADS"."Feature_36" + -0.021460711980346964 * "ADS"."Feature_37" + -0.3523896764491887 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -0.00014632712786791948 * "ADS"."Feature_40" + -0.7137602240397264 * "ADS"."Feature_41" + -0.011439480888347498 * "ADS"."Feature_42" + -0.24312539807787306 * "ADS"."Feature_43" + -0.11214941357073342 * "ADS"."Feature_44" + -0.3652332190464373 * "ADS"."Feature_45" + -0.19551011318444383 * "ADS"."Feature_46" + -0.08234745343396657 * "ADS"."Feature_47" + -0.11356876808163006 * "ADS"."Feature_48" + 0.12420773573974189 * "ADS"."Feature_49" + -0.15616943209954487 * "ADS"."Feature_50" + 0.3737204932870642 * "ADS"."Feature_51" + 0.08931441833717238 * "ADS"."Feature_52" + -0.005057655972801858 * "ADS"."Feature_53" + -0.28411128609062986 * "ADS"."Feature_54" + 0.4501924546662872 * "ADS"."Feature_55" + -0.03785429172879303 * "ADS"."Feature_56" + -0.21449578748247197 * "ADS"."Feature_57" + -0.16216093003702525 * "ADS"."Feature_58" + -0.20058346577178476 * "ADS"."Feature_59" + 0.06307621973459884 * "ADS"."Feature_60" + 0.08795007087693865 * "ADS"."Feature_61" + -0.13361336063125917 * "ADS"."Feature_62" + -0.03536958484316455 * "ADS"."Feature_63" + -2.289774289023766 AS "Score_1", 0.0 * "ADS"."Feature_0" + 0.045545887353140184 * "ADS"."Feature_1" + -0.09344936299083026 * "ADS"."Feature_2" + 0.007116337097822216 * "ADS"."Feature_3" + -0.04775975564220417 * "ADS"."Feature_4" + -0.2546938099421806 * "ADS"."Feature_5" + -0.13834637986176293 * "ADS"."Feature_6" + -0.016149152496509146 * "ADS"."Feature_7" + -0.00033590909567287393 * "ADS"."Feature_8" + 0.15071182054624882 * "ADS"."Feature_9" + 0.22413063349331222 * "ADS"."Feature_10" + -0.14980530706778217 * "ADS"."Feature_11" + 0.2078926338784598 * "ADS"."Feature_12" + -0.05569055878510877 * "ADS"."Feature_13" + 0.013841593920468413 * "ADS"."Feature_14" + -0.003238670415992354 * "ADS"."Feature_15" + 1.9225074431259553e-05 * "ADS"."Feature_16" + -0.11330304704477595 * "ADS"."Feature_17" + 0.06938743900166423 * "ADS"."Feature_18" + -0.2155440789855718 * "ADS"."Feature_19" + 0.19841834631754404 * "ADS"."Feature_20" + -0.0028593021847857264 * "ADS"."Feature_21" + 0.090337839791285 * "ADS"."Feature_22" + -0.00011579589449634868 * "ADS"."Feature_23" + -1.6516592031768818e-06 * "ADS"."Feature_24" + -0.3275446446518637 * "ADS"."Feature_25" + -0.5549743437831126 * "ADS"."Feature_26" + -0.5288803446031607 * "ADS"."Feature_27" + -0.34985863306081766 * "ADS"."Feature_28" + 0.17289737072433647 * "ADS"."Feature_29" + -0.0924256085446195 * "ADS"."Feature_30" + -4.463426592643474e-06 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + -0.31367405926865455 * "ADS"."Feature_33" + -0.5427663995809648 * "ADS"."Feature_34" + -0.15411729849909292 * "ADS"."Feature_35" + -0.21691138841498933 * "ADS"."Feature_36" + -0.29914391691339115 * "ADS"."Feature_37" + -0.5209422662208029 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -4.093971306918242e-05 * "ADS"."Feature_40" + 0.09196655389310752 * "ADS"."Feature_41" + 0.11206006171225828 * "ADS"."Feature_42" + 0.4802303432784325 * "ADS"."Feature_43" + -0.46211587808537086 * "ADS"."Feature_44" + -0.44673239230091977 * "ADS"."Feature_45" + -0.41888747301338203 * "ADS"."Feature_46" + 0.012143707948506742 * "ADS"."Feature_47" + 0.0035441176662203157 * "ADS"."Feature_48" + 0.24871351778779535 * "ADS"."Feature_49" + -0.037323813438492226 * "ADS"."Feature_50" + 0.415126115812204 * "ADS"."Feature_51" + 0.26319894810058597 * "ADS"."Feature_52" + 0.2813223967677329 * "ADS"."Feature_53" + 0.21241666857051944 * "ADS"."Feature_54" + -0.00817098871315686 * "ADS"."Feature_55" + 0.0011902020770011615 * "ADS"."Feature_56" + 0.10181975557458574 * "ADS"."Feature_57" + -3.395072757281627e-05 * "ADS"."Feature_58" + -0.017059389387961695 * "ADS"."Feature_59" + -0.03538636428592419 * "ADS"."Feature_60" + 0.20976417105576362 * "ADS"."Feature_61" + 0.3437145490244086 * "ADS"."Feature_62" + 0.007697513878486549 * "ADS"."Feature_63" + -0.03171508236840767 AS "Score_2", 0.0 * "ADS"."Feature_0" + 0.7068647256337062 * "ADS"."Feature_1" + -0.8329557961327807 * "ADS"."Feature_2" + 0.011302784318131993 * "ADS"."Feature_3" + 0.5295744793954923 * "ADS"."Feature_4" + -0.32620831675934225 * "ADS"."Feature_5" + -0.29306939696076506 * "ADS"."Feature_6" + 0.12063167179381534 * "ADS"."Feature_7" + -0.04721303179662981 * "ADS"."Feature_8" + -0.3962082892573572 * "ADS"."Feature_9" + 0.29632168729961506 * "ADS"."Feature_10" + 0.0614990585644356 * "ADS"."Feature_11" + -0.10898081288680384 * "ADS"."Feature_12" + 0.5755630225642406 * "ADS"."Feature_13" + 0.9091743112526987 * "ADS"."Feature_14" + -0.11839737806283698 * "ADS"."Feature_15" + -1.5220773307031989e-05 * "ADS"."Feature_16" + -0.01790977549845776 * "ADS"."Feature_17" + -0.6678852286455603 * "ADS"."Feature_18" + -0.4927136737474202 * "ADS"."Feature_19" + 0.2401147584210192 * "ADS"."Feature_20" + -0.4944230704994729 * "ADS"."Feature_21" + -0.025565663414519303 * "ADS"."Feature_22" + -0.00021859771951123516 * "ADS"."Feature_23" + -3.714850941094235e-08 * "ADS"."Feature_24" + -0.6527396492313738 * "ADS"."Feature_25" + -0.34058921433917805 * "ADS"."Feature_26" + -0.06854709790192143 * "ADS"."Feature_27" + 0.1251761348143745 * "ADS"."Feature_28" + -0.5324400416990158 * "ADS"."Feature_29" + -1.7074548766036413 * "ADS"."Feature_30" + -2.455175871166258e-07 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + -0.3625588023856291 * "ADS"."Feature_33" + -0.37865409654997695 * "ADS"."Feature_34" + -0.13580570228131383 * "ADS"."Feature_35" + -0.10030688412045022 * "ADS"."Feature_36" + -0.006193568925938788 * "ADS"."Feature_37" + 0.13594901112059254 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -8.40834248177114e-07 * "ADS"."Feature_40" + 0.3008798898730151 * "ADS"."Feature_41" + -0.07513692855182318 * "ADS"."Feature_42" + -0.7737454315515647 * "ADS"."Feature_43" + 0.4423613126583317 * "ADS"."Feature_44" + 0.5205873722361968 * "ADS"."Feature_45" + 0.4407406348601627 * "ADS"."Feature_46" + -0.0348349312911542 * "ADS"."Feature_47" + -1.099940054473699e-06 * "ADS"."Feature_48" + -0.3676438595143883 * "ADS"."Feature_49" + -0.12210847913973209 * "ADS"."Feature_50" + -0.49481457373858845 * "ADS"."Feature_51" + 0.02727151272865232 * "ADS"."Feature_52" + 0.13412059371872675 * "ADS"."Feature_53" + 0.5591725274874542 * "ADS"."Feature_54" + -0.33095753595304866 * "ADS"."Feature_55" + -1.4748525051654412e-07 * "ADS"."Feature_56" + 0.29143789369819073 * "ADS"."Feature_57" + 0.6484211148473836 * "ADS"."Feature_58" + -0.36865993503132655 * "ADS"."Feature_59" + 0.37500934403564035 * "ADS"."Feature_60" + -0.2902016786639653 * "ADS"."Feature_61" + -0.13361030908664204 * "ADS"."Feature_62" + -0.46731207724167595 * "ADS"."Feature_63" + -0.18895922119189695 AS "Score_3", 0.0 * "ADS"."Feature_0" + -0.037837622595813865 * "ADS"."Feature_1" + -0.23419423235723097 * "ADS"."Feature_2" + -0.47546938500785535 * "ADS"."Feature_3" + -0.1766742576367417 * "ADS"."Feature_4" + -0.3673947770332975 * "ADS"."Feature_5" + -0.40753189013047497 * "ADS"."Feature_6" + 0.06707126577995427 * "ADS"."Feature_7" + -1.8685318110197013e-05 * "ADS"."Feature_8" + -0.04085253206433946 * "ADS"."Feature_9" + -0.05760191626797723 * "ADS"."Feature_10" + -0.3347992136633163 * "ADS"."Feature_11" + -0.5128751093022426 * "ADS"."Feature_12" + -0.3739904931981359 * "ADS"."Feature_13" + -0.30670613549394177 * "ADS"."Feature_14" + 0.13349881474101452 * "ADS"."Feature_15" + -1.5614255132731085e-06 * "ADS"."Feature_16" + 0.2626683074927838 * "ADS"."Feature_17" + 0.3781195030464561 * "ADS"."Feature_18" + 0.18813825333815862 * "ADS"."Feature_19" + -0.005116496607617281 * "ADS"."Feature_20" + 0.33446835444320383 * "ADS"."Feature_21" + -0.033487972341702726 * "ADS"."Feature_22" + 0.0961282619733597 * "ADS"."Feature_23" + 0.044839658887519694 * "ADS"."Feature_24" + 0.016070272021392492 * "ADS"."Feature_25" + 0.22878624982943638 * "ADS"."Feature_26" + 0.08785888264335859 * "ADS"."Feature_27" + -0.0913613040876568 * "ADS"."Feature_28" + -0.05293806450598403 * "ADS"."Feature_29" + 0.5222463880441697 * "ADS"."Feature_30" + 0.0015913096510881517 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + 0.08879602145415944 * "ADS"."Feature_33" + 0.1774371609930681 * "ADS"."Feature_34" + -0.03396364535971211 * "ADS"."Feature_35" + 0.2871325900386313 * "ADS"."Feature_36" + 0.13085898194296575 * "ADS"."Feature_37" + 0.31988437634568845 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + 0.00048785659490278486 * "ADS"."Feature_40" + 0.4713449654547287 * "ADS"."Feature_41" + -0.12208422109069793 * "ADS"."Feature_42" + 0.45396495916249713 * "ADS"."Feature_43" + 0.1279578327995013 * "ADS"."Feature_44" + 0.1584166794239773 * "ADS"."Feature_45" + -0.08063156258709818 * "ADS"."Feature_46" + -0.0008324494821097903 * "ADS"."Feature_47" + 0.001205116972279251 * "ADS"."Feature_48" + 0.3686223749290905 * "ADS"."Feature_49" + -0.2313993537033414 * "ADS"."Feature_50" + -0.013964352268608964 * "ADS"."Feature_51" + 0.008908414328838158 * "ADS"."Feature_52" + -0.37143514863429883 * "ADS"."Feature_53" + -0.47359341235854496 * "ADS"."Feature_54" + -0.0015169367252482785 * "ADS"."Feature_55" + -6.883228085594792e-06 * "ADS"."Feature_56" + -0.09615922659197146 * "ADS"."Feature_57" + -0.22793923094568316 * "ADS"."Feature_58" + -0.3482246488270436 * "ADS"."Feature_59" + -0.1543844624759689 * "ADS"."Feature_60" + -0.26129144799167753 * "ADS"."Feature_61" + -0.05175489485140636 * "ADS"."Feature_62" + -0.0012309361856903825 * "ADS"."Feature_63" + 0.007960276578297553 AS "Score_4", 0.0 * "ADS"."Feature_0" + 0.03609795538229008 * "ADS"."Feature_1" + 0.2748581757680444 * "ADS"."Feature_2" + -0.08413036289044144 * "ADS"."Feature_3" + 0.21763955896254997 * "ADS"."Feature_4" + 0.30034247407526143 * "ADS"."Feature_5" + 0.4366386246673328 * "ADS"."Feature_6" + -0.09558362298831025 * "ADS"."Feature_7" + 0.0015317071301004478 * "ADS"."Feature_8" + 0.03152871098936886 * "ADS"."Feature_9" + 0.08817349499873445 * "ADS"."Feature_10" + -0.11192290970555432 * "ADS"."Feature_11" + -0.009315929307491578 * "ADS"."Feature_12" + -0.17320675317743775 * "ADS"."Feature_13" + -0.04188163585508077 * "ADS"."Feature_14" + -0.046355244764572055 * "ADS"."Feature_15" + -1.3299428663108704e-05 * "ADS"."Feature_16" + -0.12143573307304743 * "ADS"."Feature_17" + 0.2885810559812296 * "ADS"."Feature_18" + -0.010502059808989394 * "ADS"."Feature_19" + -0.542453366838412 * "ADS"."Feature_20" + -0.8581373054764759 * "ADS"."Feature_21" + -0.8143690231721374 * "ADS"."Feature_22" + -0.010993400090041768 * "ADS"."Feature_23" + -0.0228413882305261 * "ADS"."Feature_24" + 0.10533257836397422 * "ADS"."Feature_25" + 0.20784297683649214 * "ADS"."Feature_26" + 0.06729988692853556 * "ADS"."Feature_27" + 0.30997249255091863 * "ADS"."Feature_28" + -0.07581069855401933 * "ADS"."Feature_29" + -0.41758561357824237 * "ADS"."Feature_30" + -3.164907757207464e-05 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + -0.05902275363588519 * "ADS"."Feature_33" + 0.09660862145691304 * "ADS"."Feature_34" + -0.21165263662038528 * "ADS"."Feature_35" + -0.19966969962910683 * "ADS"."Feature_36" + -0.21091013256053653 * "ADS"."Feature_37" + 0.011377642047639708 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -3.4293278835733195e-05 * "ADS"."Feature_40" + -0.11030989994531848 * "ADS"."Feature_41" + -0.3589186321261603 * "ADS"."Feature_42" + -0.17565019887546798 * "ADS"."Feature_43" + -0.1770839494684353 * "ADS"."Feature_44" + 0.1495375780278816 * "ADS"."Feature_45" + -0.004720665533790497 * "ADS"."Feature_46" + -0.0006166050960635936 * "ADS"."Feature_47" + 2.8314200455144996e-05 * "ADS"."Feature_48" + -0.0966653954892356 * "ADS"."Feature_49" + -0.13885823317185803 * "ADS"."Feature_50" + -0.20209263972195574 * "ADS"."Feature_51" + 0.04467629665067777 * "ADS"."Feature_52" + -0.28463115452532095 * "ADS"."Feature_53" + -0.1813067750770177 * "ADS"."Feature_54" + -0.0037897633098264404 * "ADS"."Feature_55" + 3.843818108481381e-06 * "ADS"."Feature_56" + 0.0599763709689002 * "ADS"."Feature_57" + 0.20830957883460927 * "ADS"."Feature_58" + 0.19307315426904154 * "ADS"."Feature_59" + -0.13005238718434103 * "ADS"."Feature_60" + -0.052743477738122685 * "ADS"."Feature_61" + -0.27761707002237485 * "ADS"."Feature_62" + -0.03297269894650946 * "ADS"."Feature_63" + -0.031148046890623737 AS "Score_5", 0.0 * "ADS"."Feature_0" + -0.0403291621517899 * "ADS"."Feature_1" + -0.2657621226159522 * "ADS"."Feature_2" + -0.06342119980205607 * "ADS"."Feature_3" + -0.33866428520442293 * "ADS"."Feature_4" + -0.13533864282641295 * "ADS"."Feature_5" + -0.28828896991292374 * "ADS"."Feature_6" + -0.0002067993439606889 * "ADS"."Feature_7" + -3.267519171574581e-05 * "ADS"."Feature_8" + -0.3092882305956518 * "ADS"."Feature_9" + -0.18990060014925578 * "ADS"."Feature_10" + -0.3061629402787585 * "ADS"."Feature_11" + -0.3240463806696991 * "ADS"."Feature_12" + 0.0350851615154994 * "ADS"."Feature_13" + 0.14017871299706108 * "ADS"."Feature_14" + -0.00038447445612712825 * "ADS"."Feature_15" + -5.543841442862852e-06 * "ADS"."Feature_16" + -0.08912163644566269 * "ADS"."Feature_17" + 0.20858044589953936 * "ADS"."Feature_18" + 0.06413927238032954 * "ADS"."Feature_19" + -0.5345800716979066 * "ADS"."Feature_20" + -0.9625082638403536 * "ADS"."Feature_21" + -0.2551119316377137 * "ADS"."Feature_22" + -0.00033611360975976067 * "ADS"."Feature_23" + -4.39257170208076e-06 * "ADS"."Feature_24" + 0.3886864764700606 * "ADS"."Feature_25" + -0.03068321001876599 * "ADS"."Feature_26" + 0.2725629380083073 * "ADS"."Feature_27" + -0.057527190719458 * "ADS"."Feature_28" + -0.03388546595003343 * "ADS"."Feature_29" + -0.5144884970170303 * "ADS"."Feature_30" + -2.6526700974583334e-05 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + 0.15048678949645483 * "ADS"."Feature_33" + 0.0900146772697886 * "ADS"."Feature_34" + 0.2725653328375137 * "ADS"."Feature_35" + -0.04303090392247039 * "ADS"."Feature_36" + -0.07968074504699699 * "ADS"."Feature_37" + -0.035478210587106415 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -0.0007747771855980763 * "ADS"."Feature_40" + -0.7452179802323253 * "ADS"."Feature_41" + 0.6750958002868909 * "ADS"."Feature_42" + -0.18874366478090238 * "ADS"."Feature_43" + 0.19943870287970447 * "ADS"."Feature_44" + -0.11294500079071794 * "ADS"."Feature_45" + 0.5182425741169915 * "ADS"."Feature_46" + 0.07828173901707017 * "ADS"."Feature_47" + -0.00025976082963658913 * "ADS"."Feature_48" + -0.27714872351481035 * "ADS"."Feature_49" + 0.36272085451265257 * "ADS"."Feature_50" + 0.3173412202161196 * "ADS"."Feature_51" + -0.35726563502789677 * "ADS"."Feature_52" + 0.3848096620410507 * "ADS"."Feature_53" + -0.03773603971917752 * "ADS"."Feature_54" + -0.35514185264234593 * "ADS"."Feature_55" + -8.87005739524747e-07 * "ADS"."Feature_56" + -0.02978367869099671 * "ADS"."Feature_57" + -0.3279912833811824 * "ADS"."Feature_58" + -0.4183618672808988 * "ADS"."Feature_59" + -0.08078384360017646 * "ADS"."Feature_60" + 0.118991157474897 * "ADS"."Feature_61" + -0.15400077856113345 * "ADS"."Feature_62" + -0.19989021690956224 * "ADS"."Feature_63" + -0.06958195727664777 AS "Score_6", 0.0 * "ADS"."Feature_0" + -0.13233351382697073 * "ADS"."Feature_1" + 0.25428130464798404 * "ADS"."Feature_2" + 0.19421722473507205 * "ADS"."Feature_3" + -0.16998549688045725 * "ADS"."Feature_4" + 0.4233019392547716 * "ADS"."Feature_5" + 0.25775130206130276 * "ADS"."Feature_6" + 0.2224183909163341 * "ADS"."Feature_7" + -7.028219830990713e-06 * "ADS"."Feature_8" + 0.16290288578880677 * "ADS"."Feature_9" + 0.15371156631074218 * "ADS"."Feature_10" + -0.10110990582454274 * "ADS"."Feature_11" + 0.8581754703027469 * "ADS"."Feature_12" + -0.16369864802444106 * "ADS"."Feature_13" + -0.15584919347784443 * "ADS"."Feature_14" + 0.20363088957364142 * "ADS"."Feature_15" + -2.5160185783786648e-06 * "ADS"."Feature_16" + -0.20280461848930637 * "ADS"."Feature_17" + -0.4126661315381767 * "ADS"."Feature_18" + -0.3599158769408414 * "ADS"."Feature_19" + -0.2547052481248979 * "ADS"."Feature_20" + 0.2777538641954056 * "ADS"."Feature_21" + 0.14450771225542844 * "ADS"."Feature_22" + 0.05609562118150352 * "ADS"."Feature_23" + -1.8798741239765179e-06 * "ADS"."Feature_24" + -0.4811878389908 * "ADS"."Feature_25" + -0.0412944322215608 * "ADS"."Feature_26" + -0.4836083680544224 * "ADS"."Feature_27" + -0.06848928690213606 * "ADS"."Feature_28" + 0.04927285408346288 * "ADS"."Feature_29" + 0.2300178342478298 * "ADS"."Feature_30" + -0.0024909102836638336 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + 0.5034857791062087 * "ADS"."Feature_33" + -0.20768846210726147 * "ADS"."Feature_34" + 0.1375153121889861 * "ADS"."Feature_35" + 0.09563557163526677 * "ADS"."Feature_36" + 0.062197907820427514 * "ADS"."Feature_37" + 0.3150703160079455 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -6.406480233906033e-05 * "ADS"."Feature_40" + -0.4879198604777928 * "ADS"."Feature_41" + 0.07057458747371913 * "ADS"."Feature_42" + -0.09119897424416265 * "ADS"."Feature_43" + 0.21521406277128927 * "ADS"."Feature_44" + 0.2963578652045291 * "ADS"."Feature_45" + 0.08594857405946604 * "ADS"."Feature_46" + -2.3392788782164512e-05 * "ADS"."Feature_47" + -2.4507507099000365e-05 * "ADS"."Feature_48" + -0.22858387356796483 * "ADS"."Feature_49" + 0.1723440244899735 * "ADS"."Feature_50" + 0.1793309895359055 * "ADS"."Feature_51" + -0.7071634681384117 * "ADS"."Feature_52" + -1.08253266280758 * "ADS"."Feature_53" + -0.2651652052773962 * "ADS"."Feature_54" + -0.0002787249495345809 * "ADS"."Feature_55" + -3.4621629215731763e-06 * "ADS"."Feature_56" + -0.42347089706623287 * "ADS"."Feature_57" + -0.3508801713460465 * "ADS"."Feature_58" + -0.3062259509015561 * "ADS"."Feature_59" + -0.09789684656198802 * "ADS"."Feature_60" + -0.7563673565663601 * "ADS"."Feature_61" + -0.2918621848081344 * "ADS"."Feature_62" + -0.017628103074876555 * "ADS"."Feature_63" + -0.028324036471010276 AS "Score_7", 0.0 * "ADS"."Feature_0" + 0.5316874729147425 * "ADS"."Feature_1" + 0.0975402791786082 * "ADS"."Feature_2" + -0.2243306866899758 * "ADS"."Feature_3" + -0.11055700969175081 * "ADS"."Feature_4" + 0.08872771999745359 * "ADS"."Feature_5" + -0.5289659502924734 * "ADS"."Feature_6" + -0.010020625630183912 * "ADS"."Feature_7" + 1.040516529408186 * "ADS"."Feature_8" + -0.1527398126120849 * "ADS"."Feature_9" + 0.23003926351147044 * "ADS"."Feature_10" + -0.04650039953147733 * "ADS"."Feature_11" + -0.22791345681498262 * "ADS"."Feature_12" + 0.15937428267036932 * "ADS"."Feature_13" + -0.06631600624272457 * "ADS"."Feature_14" + -0.14927051265726504 * "ADS"."Feature_15" + 0.5216558981915101 * "ADS"."Feature_16" + 0.17932373814858987 * "ADS"."Feature_17" + 0.12412959644104612 * "ADS"."Feature_18" + 0.1657478192057625 * "ADS"."Feature_19" + -0.1264829875571733 * "ADS"."Feature_20" + 0.07635658021740202 * "ADS"."Feature_21" + 0.44396099624828833 * "ADS"."Feature_22" + -0.15111732484221518 * "ADS"."Feature_23" + -0.001273956176477805 * "ADS"."Feature_24" + -0.12294316643590945 * "ADS"."Feature_25" + -0.06804926759628176 * "ADS"."Feature_26" + 0.1815977332589916 * "ADS"."Feature_27" + -0.00601551877124157 * "ADS"."Feature_28" + -0.015225409918566182 * "ADS"."Feature_29" + -0.564499577855932 * "ADS"."Feature_30" + -0.00012847891903795534 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + -0.40209999331516155 * "ADS"."Feature_33" + -0.20482532338479356 * "ADS"."Feature_34" + 0.46604874281254066 * "ADS"."Feature_35" + -0.10880769231203993 * "ADS"."Feature_36" + -0.05977396397604281 * "ADS"."Feature_37" + -1.1553962333164594 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -0.00014673247647920858 * "ADS"."Feature_40" + 0.13876697360641557 * "ADS"."Feature_41" + 0.17552514959179083 * "ADS"."Feature_42" + 0.03191256371870685 * "ADS"."Feature_43" + 0.042257014569805545 * "ADS"."Feature_44" + 0.11989028010101697 * "ADS"."Feature_45" + 0.08558263763246644 * "ADS"."Feature_46" + -0.047090665984549196 * "ADS"."Feature_47" + -0.005384451238187114 * "ADS"."Feature_48" + 0.03542954070851524 * "ADS"."Feature_49" + 0.1558390817034318 * "ADS"."Feature_50" + -0.2750346968822043 * "ADS"."Feature_51" + -0.21230013177634297 * "ADS"."Feature_52" + 0.10722940339262538 * "ADS"."Feature_53" + -0.08007826571314636 * "ADS"."Feature_54" + -0.3093395748732139 * "ADS"."Feature_55" + -0.0017840752044043814 * "ADS"."Feature_56" + -0.4266977327606592 * "ADS"."Feature_57" + -0.568630300744372 * "ADS"."Feature_58" + -0.0015336610868383475 * "ADS"."Feature_59" + 0.09640870088423364 * "ADS"."Feature_60" + -0.2706152346393346 * "ADS"."Feature_61" + -0.23019035538314914 * "ADS"."Feature_62" + 0.01859699864839899 * "ADS"."Feature_63" + -2.2917842182144663 AS "Score_8", 0.0 * "ADS"."Feature_0" + -0.7483738999567856 * "ADS"."Feature_1" + -0.032473152590643914 * "ADS"."Feature_2" + 0.13604290296219634 * "ADS"."Feature_3" + 0.056704660690710035 * "ADS"."Feature_4" + -0.3479442862623055 * "ADS"."Feature_5" + -0.26531044138350773 * "ADS"."Feature_6" + 0.12103922277189526 * "ADS"."Feature_7" + -0.0006525887955188038 * "ADS"."Feature_8" + 0.1096004758280011 * "ADS"."Feature_9" + -0.06642294137153182 * "ADS"."Feature_10" + 0.2672669263065745 * "ADS"."Feature_11" + -0.07964422912355704 * "ADS"."Feature_12" + -0.15226560676256368 * "ADS"."Feature_13" + 0.4121908516520089 * "ADS"."Feature_14" + -0.6154068532438182 * "ADS"."Feature_15" + -0.0004822806173043722 * "ADS"."Feature_16" + 0.276845638580293 * "ADS"."Feature_17" + 0.31638877478408306 * "ADS"."Feature_18" + 0.250367029034598 * "ADS"."Feature_19" + 0.2534475614726695 * "ADS"."Feature_20" + 0.8161856941628405 * "ADS"."Feature_21" + -0.1602675241020303 * "ADS"."Feature_22" + -0.7042889246091418 * "ADS"."Feature_23" + -2.0226995817186736e-07 * "ADS"."Feature_24" + -0.1738191001430455 * "ADS"."Feature_25" + 0.2924435267124327 * "ADS"."Feature_26" + 0.37172729803072524 * "ADS"."Feature_27" + -0.04821064317569108 * "ADS"."Feature_28" + 0.3878989884984577 * "ADS"."Feature_29" + -0.2638730101941719 * "ADS"."Feature_30" + -0.0028487707562229563 * "ADS"."Feature_31" + 0.0 * "ADS"."Feature_32" + -0.7784092033065619 * "ADS"."Feature_33" + -0.392448792898205 * "ADS"."Feature_34" + 0.6173413402499428 * "ADS"."Feature_35" + -0.3679409971062035 * "ADS"."Feature_36" + -0.18682776066775475 * "ADS"."Feature_37" + -0.02675198770022637 * "ADS"."Feature_38" + 0.0 * "ADS"."Feature_39" + -2.7332639533624587e-06 * "ADS"."Feature_40" + -0.2819254476438427 * "ADS"."Feature_41" + -0.640614139797162 * "ADS"."Feature_42" + -2.001977431579755 * "ADS"."Feature_43" + -0.879769857839625 * "ADS"."Feature_44" + -0.35709186794349856 * "ADS"."Feature_45" + -0.48901159872363853 * "ADS"."Feature_46" + 0.006867322777398981 * "ADS"."Feature_47" + -3.569626279085201e-06 * "ADS"."Feature_48" + 0.3836088049258967 * "ADS"."Feature_49" + -0.1866112322511506 * "ADS"."Feature_50" + 0.36484608393255125 * "ADS"."Feature_51" + -0.21829689703393365 * "ADS"."Feature_52" + -0.5290990792410021 * "ADS"."Feature_53" + -0.3930925556691758 * "ADS"."Feature_54" + 0.1058719041366782 * "ADS"."Feature_55" + -4.370781563127961e-07 * "ADS"."Feature_56" + -0.27211667836600456 * "ADS"."Feature_57" + -0.04573272567012419 * "ADS"."Feature_58" + -0.1294711316359098 * "ADS"."Feature_59" + -0.006914059465159872 * "ADS"."Feature_60" + 0.11276139161724753 * "ADS"."Feature_61" + -0.21601948250163133 * "ADS"."Feature_62" + -0.4506209953006884 * "ADS"."Feature_63" + -0.9770890525320225 AS "Score_9" 
FROM digits AS "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", linear_model_cte."Score_4" AS "Score_4", linear_model_cte."Score_5" AS "Score_5", linear_model_cte."Score_6" AS "Score_6", linear_model_cte."Score_7" AS "Score_7", linear_model_cte."Score_8" AS "Score_8", linear_model_cte."Score_9" AS "Score_9", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_0", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_1", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_2", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_3", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_4", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_5", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_6", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_7", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_8", (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) / (1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_0") THEN -linear_model_cte."Score_0" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_1") THEN -linear_model_cte."Score_1" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_2") THEN -linear_model_cte."Score_2" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_3") THEN -linear_model_cte."Score_3" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_4") THEN -linear_model_cte."Score_4" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_5") THEN -linear_model_cte."Score_5" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_6") THEN -linear_model_cte."Score_6" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_7") THEN -linear_model_cte."Score_7" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_8") THEN -linear_model_cte."Score_8" ELSE -100.0 END ELSE 100.0 END)) + 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -linear_model_cte."Score_9") THEN -linear_model_cte."Score_9" ELSE -100.0 END ELSE 100.0 END))) AS "Proba_9", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_3", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_4", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_5", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_6", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_7", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_8", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_9", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 4 AS class, orig_cte."LogProba_4" AS "LogProba", orig_cte."Proba_4" AS "Proba", orig_cte."Score_4" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 5 AS class, orig_cte."LogProba_5" AS "LogProba", orig_cte."Proba_5" AS "Proba", orig_cte."Score_5" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 6 AS class, orig_cte."LogProba_6" AS "LogProba", orig_cte."Proba_6" AS "Proba", orig_cte."Score_6" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 7 AS class, orig_cte."LogProba_7" AS "LogProba", orig_cte."Proba_7" AS "Proba", orig_cte."Score_7" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 8 AS class, orig_cte."LogProba_8" AS "LogProba", orig_cte."Proba_8" AS "Proba", orig_cte."Score_8" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 9 AS class, orig_cte."LogProba_9" AS "LogProba", orig_cte."Proba_9" AS "Proba", orig_cte."Score_9" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Score_4" AS "Score_4", orig_cte."Score_5" AS "Score_5", orig_cte."Score_6" AS "Score_6", orig_cte."Score_7" AS "Score_7", orig_cte."Score_8" AS "Score_8", orig_cte."Score_9" AS "Score_9", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."Proba_4" AS "Proba_4", orig_cte."Proba_5" AS "Proba_5", orig_cte."Proba_6" AS "Proba_6", orig_cte."Proba_7" AS "Proba_7", orig_cte."Proba_8" AS "Proba_8", orig_cte."Proba_9" AS "Proba_9", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."LogProba_4" AS "LogProba_4", orig_cte."LogProba_5" AS "LogProba_5", orig_cte."LogProba_6" AS "LogProba_6", orig_cte."LogProba_7" AS "LogProba_7", orig_cte."LogProba_8" AS "LogProba_8", orig_cte."LogProba_9" AS "LogProba_9", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Score_4" AS "Score_4", score_max."Score_5" AS "Score_5", score_max."Score_6" AS "Score_6", score_max."Score_7" AS "Score_7", score_max."Score_8" AS "Score_8", score_max."Score_9" AS "Score_9", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."Proba_4" AS "Proba_4", score_max."Proba_5" AS "Proba_5", score_max."Proba_6" AS "Proba_6", score_max."Proba_7" AS "Proba_7", score_max."Proba_8" AS "Proba_8", score_max."Proba_9" AS "Proba_9", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."LogProba_4" AS "LogProba_4", score_max."LogProba_5" AS "LogProba_5", score_max."LogProba_6" AS "LogProba_6", score_max."LogProba_7" AS "LogProba_7", score_max."LogProba_8" AS "LogProba_8", score_max."LogProba_9" AS "LogProba_9", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Score_4" AS "Score_4", score_max."Score_5" AS "Score_5", score_max."Score_6" AS "Score_6", score_max."Score_7" AS "Score_7", score_max."Score_8" AS "Score_8", score_max."Score_9" AS "Score_9", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."Proba_4" AS "Proba_4", score_max."Proba_5" AS "Proba_5", score_max."Proba_6" AS "Proba_6", score_max."Proba_7" AS "Proba_7", score_max."Proba_8" AS "Proba_8", score_max."Proba_9" AS "Proba_9", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."LogProba_4" AS "LogProba_4", score_max."LogProba_5" AS "LogProba_5", score_max."LogProba_6" AS "LogProba_6", score_max."LogProba_7" AS "LogProba_7", score_max."LogProba_8" AS "LogProba_8", score_max."LogProba_9" AS "LogProba_9", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Score_4" AS "Score_4", arg_max_cte."Score_5" AS "Score_5", arg_max_cte."Score_6" AS "Score_6", arg_max_cte."Score_7" AS "Score_7", arg_max_cte."Score_8" AS "Score_8", arg_max_cte."Score_9" AS "Score_9", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", arg_max_cte."Proba_4" AS "Proba_4", arg_max_cte."Proba_5" AS "Proba_5", arg_max_cte."Proba_6" AS "Proba_6", arg_max_cte."Proba_7" AS "Proba_7", arg_max_cte."Proba_8" AS "Proba_8", arg_max_cte."Proba_9" AS "Proba_9", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN log(arg_max_cte."Proba_0") ELSE -1e+125 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN log(arg_max_cte."Proba_1") ELSE -1e+125 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN log(arg_max_cte."Proba_2") ELSE -1e+125 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN log(arg_max_cte."Proba_3") ELSE -1e+125 END AS "LogProba_3", CASE WHEN (arg_max_cte."Proba_4" IS NULL OR arg_max_cte."Proba_4" > 0.0) THEN log(arg_max_cte."Proba_4") ELSE -1e+125 END AS "LogProba_4", CASE WHEN (arg_max_cte."Proba_5" IS NULL OR arg_max_cte."Proba_5" > 0.0) THEN log(arg_max_cte."Proba_5") ELSE -1e+125 END AS "LogProba_5", CASE WHEN (arg_max_cte."Proba_6" IS NULL OR arg_max_cte."Proba_6" > 0.0) THEN log(arg_max_cte."Proba_6") ELSE -1e+125 END AS "LogProba_6", CASE WHEN (arg_max_cte."Proba_7" IS NULL OR arg_max_cte."Proba_7" > 0.0) THEN log(arg_max_cte."Proba_7") ELSE -1e+125 END AS "LogProba_7", CASE WHEN (arg_max_cte."Proba_8" IS NULL OR arg_max_cte."Proba_8" > 0.0) THEN log(arg_max_cte."Proba_8") ELSE -1e+125 END AS "LogProba_8", CASE WHEN (arg_max_cte."Proba_9" IS NULL OR arg_max_cte."Proba_9" > 0.0) THEN log(arg_max_cte."Proba_9") ELSE -1e+125 END AS "LogProba_9", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte