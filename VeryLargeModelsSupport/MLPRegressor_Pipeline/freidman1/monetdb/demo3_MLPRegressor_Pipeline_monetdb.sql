-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.5629846484809591 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.45606442423375926 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.47113817481474773 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.533968020094518 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.4780936262373869 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.5682849224172329 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.47914374714280494 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.4594152477223205 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.4901106996809651 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.5378806933707533 ELSE "ADS"."Feature_9" END AS impter_11 
FROM freidman1 AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS DOUBLE PRECISION) - 0.5629846484809591) / 0.2583714683396337 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS DOUBLE PRECISION) - 0.45606442423375926) / 0.2878721730712705 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS DOUBLE PRECISION) - 0.47113817481474773) / 0.3109216791553051 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS DOUBLE PRECISION) - 0.533968020094518) / 0.2826199867400281 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS DOUBLE PRECISION) - 0.4780936262373869) / 0.286140491317745 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS DOUBLE PRECISION) - 0.5682849224172329) / 0.29767408106451737 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS DOUBLE PRECISION) - 0.47914374714280494) / 0.2735314971431575 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS DOUBLE PRECISION) - 0.4594152477223205) / 0.28721149346998975 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS DOUBLE PRECISION) - 0.4901106996809651) / 0.2790486717322703 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS DOUBLE PRECISION) - 0.5378806933707533) / 0.2958192296543193 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.5672417757003642 * "IL".scaler_2 + 0.5057796789629737 * "IL".scaler_3 + -0.8498679164644488 * "IL".scaler_4 + -0.34628707191552416 * "IL".scaler_5 + 0.7319999603929198 * "IL".scaler_6 + 0.978724530263257 * "IL".scaler_7 + -0.742740310138656 * "IL".scaler_8 + 0.6660161563614796 * "IL".scaler_9 + 0.19442506613376276 * "IL".scaler_10 + -0.12890055432033962 * "IL".scaler_11 + 0.3453057484747701 AS "NEUR_1_1", 0.4019199706196294 * "IL".scaler_2 + 0.32078869165657486 * "IL".scaler_3 + -0.502877599278676 * "IL".scaler_4 + -0.2993313152808058 * "IL".scaler_5 + 0.8726776216688985 * "IL".scaler_6 + -0.3463769339885429 * "IL".scaler_7 + -0.5958267057174076 * "IL".scaler_8 + -0.6838561135691036 * "IL".scaler_9 + 0.6771746398303877 * "IL".scaler_10 + 0.2188735659041657 * "IL".scaler_11 + -1.1953071756107314 AS "NEUR_1_2", 0.26862546252948466 * "IL".scaler_2 + 0.5830124077086065 * "IL".scaler_3 + 0.3388457843504076 * "IL".scaler_4 + 0.8059036754931677 * "IL".scaler_5 + 0.10590149147170344 * "IL".scaler_6 + -0.25955866520903487 * "IL".scaler_7 + 0.15033562480131626 * "IL".scaler_8 + 0.006808924516458687 * "IL".scaler_9 + -0.10748228978944972 * "IL".scaler_10 + -0.1534628199994319 * "IL".scaler_11 + 1.5444727911212666 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(CASE WHEN ("HL_BA_1"."NEUR_1_1" <= 0.0) THEN 0.0 ELSE "HL_BA_1"."NEUR_1_1" END AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(CASE WHEN ("HL_BA_1"."NEUR_1_2" <= 0.0) THEN 0.0 ELSE "HL_BA_1"."NEUR_1_2" END AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(CASE WHEN ("HL_BA_1"."NEUR_1_3" <= 0.0) THEN 0.0 ELSE "HL_BA_1"."NEUR_1_3" END AS DOUBLE PRECISION) AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_1_relu_1" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", -0.7595003395441787 * "HL_1_relu_1"."NEUR_1_1" + 0.5280256743305564 * "HL_1_relu_1"."NEUR_1_2" + 0.05395390841629002 * "HL_1_relu_1"."NEUR_1_3" + -0.22766348946958154 AS "NEUR_2_1", -0.7586036338440688 * "HL_1_relu_1"."NEUR_1_1" + -0.3219311095900301 * "HL_1_relu_1"."NEUR_1_2" + -0.887424755524296 * "HL_1_relu_1"."NEUR_1_3" + -1.4752699231523443 AS "NEUR_2_2", 0.7752399588824818 * "HL_1_relu_1"."NEUR_1_1" + 1.5336340142063307 * "HL_1_relu_1"."NEUR_1_2" + 1.9994012931795995 * "HL_1_relu_1"."NEUR_1_3" + 0.8303625565280884 AS "NEUR_2_3", 0.11108949252665852 * "HL_1_relu_1"."NEUR_1_1" + -0.5047387303305901 * "HL_1_relu_1"."NEUR_1_2" + -0.40662851962234314 * "HL_1_relu_1"."NEUR_1_3" + -0.7964330424336139 AS "NEUR_2_4", -0.6381037095684027 * "HL_1_relu_1"."NEUR_1_1" + 0.3107516317696397 * "HL_1_relu_1"."NEUR_1_2" + -0.6607928342177893 * "HL_1_relu_1"."NEUR_1_3" + -0.6138178020691967 AS "NEUR_2_5" 
FROM "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CAST(CASE WHEN ("HL_BA_2"."NEUR_2_1" <= 0.0) THEN 0.0 ELSE "HL_BA_2"."NEUR_2_1" END AS DOUBLE PRECISION) AS "NEUR_2_1", CAST(CASE WHEN ("HL_BA_2"."NEUR_2_2" <= 0.0) THEN 0.0 ELSE "HL_BA_2"."NEUR_2_2" END AS DOUBLE PRECISION) AS "NEUR_2_2", CAST(CASE WHEN ("HL_BA_2"."NEUR_2_3" <= 0.0) THEN 0.0 ELSE "HL_BA_2"."NEUR_2_3" END AS DOUBLE PRECISION) AS "NEUR_2_3", CAST(CASE WHEN ("HL_BA_2"."NEUR_2_4" <= 0.0) THEN 0.0 ELSE "HL_BA_2"."NEUR_2_4" END AS DOUBLE PRECISION) AS "NEUR_2_4", CAST(CASE WHEN ("HL_BA_2"."NEUR_2_5" <= 0.0) THEN 0.0 ELSE "HL_BA_2"."NEUR_2_5" END AS DOUBLE PRECISION) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.21536964791711305 * "HL_2_relu"."NEUR_2_1" + 0.25962254093522197 * "HL_2_relu"."NEUR_2_2" + 2.027453178689807 * "HL_2_relu"."NEUR_2_3" + 0.7008364212197095 * "HL_2_relu"."NEUR_2_4" + -0.21602054638180057 * "HL_2_relu"."NEUR_2_5" + 5.184786172736181 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", CAST("OL_BA"."NEUR_3_1" AS DOUBLE PRECISION) AS "NEUR_3_1" 
FROM "OL_BA"), 
"OL_identity_1" AS 
(SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_identity")
 SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity_1"