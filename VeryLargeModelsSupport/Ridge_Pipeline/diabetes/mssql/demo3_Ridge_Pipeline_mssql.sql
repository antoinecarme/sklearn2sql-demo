-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.


-- Code For temporary table ##TMP_20180329232137_DPF1G2_ADS_imp_1_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180329232137_DPF1G2_ADS_imp_1_OUT (
	[KEY] BIGINT NULL, 
	impter_2 FLOAT(53) NULL, 
	impter_3 FLOAT(53) NULL, 
	impter_4 FLOAT(53) NULL, 
	impter_5 FLOAT(53) NULL, 
	impter_6 FLOAT(53) NULL, 
	impter_7 FLOAT(53) NULL, 
	impter_8 FLOAT(53) NULL, 
	impter_9 FLOAT(53) NULL, 
	impter_10 FLOAT(53) NULL, 
	impter_11 FLOAT(53) NULL
)


-- Code For temporary table ##TMP_20180329232137_DPF1G2_ADS_imp_1_OUT part 2/2. Populate

INSERT INTO ##TMP_20180329232137_DPF1G2_ADS_imp_1_OUT ([KEY], impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11) SELECT [ADS_imp_1_OUT].[KEY], [ADS_imp_1_OUT].impter_2, [ADS_imp_1_OUT].impter_3, [ADS_imp_1_OUT].impter_4, [ADS_imp_1_OUT].impter_5, [ADS_imp_1_OUT].impter_6, [ADS_imp_1_OUT].impter_7, [ADS_imp_1_OUT].impter_8, [ADS_imp_1_OUT].impter_9, [ADS_imp_1_OUT].impter_10, [ADS_imp_1_OUT].impter_11 
FROM (SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.0002686932066652995 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.0007239580580639441 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.0007280719825586765 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.001013565221084393 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN 0.0009763580732882109 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN 0.0017643808242337245 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.0016512815450565026 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.0013905501983388136 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.0012726482548090939 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.001034425005681627 ELSE [ADS].[Feature_9] END AS impter_11 
FROM diabetes AS [ADS]) AS [ADS_imp_1_OUT]
-- Code For temporary table ##TMP_20180329232137_0JQ929_ADS_sca_2_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180329232137_0JQ929_ADS_sca_2_OUT (
	[KEY] BIGINT NULL, 
	scaler_2 FLOAT NULL, 
	scaler_3 FLOAT NULL, 
	scaler_4 FLOAT NULL, 
	scaler_5 FLOAT NULL, 
	scaler_6 FLOAT NULL, 
	scaler_7 FLOAT NULL, 
	scaler_8 FLOAT NULL, 
	scaler_9 FLOAT NULL, 
	scaler_10 FLOAT NULL, 
	scaler_11 FLOAT NULL
)


-- Code For temporary table ##TMP_20180329232137_0JQ929_ADS_sca_2_OUT part 2/2. Populate

INSERT INTO ##TMP_20180329232137_0JQ929_ADS_sca_2_OUT ([KEY], scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11) SELECT [ADS_sca_2_OUT].[KEY], [ADS_sca_2_OUT].scaler_2, [ADS_sca_2_OUT].scaler_3, [ADS_sca_2_OUT].scaler_4, [ADS_sca_2_OUT].scaler_5, [ADS_sca_2_OUT].scaler_6, [ADS_sca_2_OUT].scaler_7, [ADS_sca_2_OUT].scaler_8, [ADS_sca_2_OUT].scaler_9, [ADS_sca_2_OUT].scaler_10, [ADS_sca_2_OUT].scaler_11 
FROM (SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT(53)) - 0.0002686932066652995) / 0.04724209583653783 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT(53)) - 0.0007239580580639441) / 0.047605576685038974 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT(53)) - 0.0007280719825586765) / 0.04693591143936869 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT(53)) - 0.001013565221084393) / 0.0483352719489719 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT(53)) - 0.0009763580732882109) / 0.048050762009702486 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT(53)) - 0.0017643808242337245) / 0.04806080873154401 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT(53)) - -0.0016512815450565026) / 0.04620240378043046 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT(53)) - 0.0013905501983388136) / 0.047363093040531656 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT(53)) - 0.0012726482548090939) / 0.04589286131364784 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT(53)) - 0.001034425005681627) / 0.04776158519570627 AS scaler_11 
FROM ##TMP_20180329232137_DPF1G2_ADS_imp_1_OUT AS [ADS_imp_1_OUT]) AS [ADS_sca_2_OUT]

-- Model deployment code

WITH linear_model_cte AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], -0.6079395648662999 * [ADS_sca_2_OUT].scaler_2 + -10.876895255552196 * [ADS_sca_2_OUT].scaler_3 + 23.789968160154114 * [ADS_sca_2_OUT].scaler_4 + 14.807141589954835 * [ADS_sca_2_OUT].scaler_5 + -11.736389468352947 * [ADS_sca_2_OUT].scaler_6 + 1.8416063430142193 * [ADS_sca_2_OUT].scaler_7 + -8.652930577312823 * [ADS_sca_2_OUT].scaler_8 + 3.0102356703739828 * [ADS_sca_2_OUT].scaler_9 + 26.15109157565191 * [ADS_sca_2_OUT].scaler_10 + 4.022578178122655 * [ADS_sca_2_OUT].scaler_11 + 154.07365439093485 AS [Estimator] 
FROM ##TMP_20180329232137_0JQ929_ADS_sca_2_OUT AS [ADS_sca_2_OUT])
 SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Estimator] AS [Estimator] 
FROM linear_model_cte