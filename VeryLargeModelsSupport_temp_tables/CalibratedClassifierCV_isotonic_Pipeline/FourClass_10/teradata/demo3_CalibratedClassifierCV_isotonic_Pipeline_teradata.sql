-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CalibratedClassifierCV_isotonic_Pipeline
-- Dataset : FourClass_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180416233013_pb5q9a_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233013_pb5q9a_ads_  (
	"KEY" BIGINT, 
	impter_2 FLOAT, 
	impter_3 FLOAT, 
	impter_4 FLOAT, 
	impter_5 FLOAT, 
	impter_6 FLOAT, 
	impter_7 FLOAT, 
	impter_8 FLOAT, 
	impter_9 FLOAT, 
	impter_10 FLOAT, 
	impter_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233013_pb5q9a_ads_ part 2/2. Populate

INSERT INTO tmp_20180416233013_pb5q9a_ads_ ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.003903374463034205 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.6152232215702322 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.042796236914291665 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.7709819558904074 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.43300733624893334 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0424956965794036 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.29809080119845455 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.14672241507251663 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.01746942384662034 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.11507331415602866 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180416233013_33yzdf_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233013_33yzdf_ads_  (
	"KEY" BIGINT, 
	scaler_2 FLOAT, 
	scaler_3 FLOAT, 
	scaler_4 FLOAT, 
	scaler_5 FLOAT, 
	scaler_6 FLOAT, 
	scaler_7 FLOAT, 
	scaler_8 FLOAT, 
	scaler_9 FLOAT, 
	scaler_10 FLOAT, 
	scaler_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233013_33yzdf_ads_ part 2/2. Populate

INSERT INTO tmp_20180416233013_33yzdf_ads_ ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.003903374463034) / 0.9795060640184 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.615223221570232) / 1.390080723620524 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.042796236914292) / 1.496268513587076 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.770981955890407) / 2.333356106011174 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.433007336248933) / 1.402975777264875 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.042495696579404) / 0.955809107687323 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.298090801198455) / 1.017013180721433 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.146722415072517) / 1.600798539929603 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.01746942384662) / 1.148729636167142 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.115073314156029) / 0.969091185733622 AS scaler_11 
FROM tmp_20180416233013_pb5q9a_ads_ AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Code For temporary table tmp_20180416233013_aje8dv_calp part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233013_aje8dv_calp  (
	"KEY" BIGINT, 
	"Proba_0" FLOAT, 
	"Proba_1" FLOAT, 
	"Proba_2" FLOAT, 
	"Proba_3" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233013_aje8dv_calp part 2/2. Populate

INSERT INTO tmp_20180416233013_aje8dv_calp ("KEY", "Proba_0", "Proba_1", "Proba_2", "Proba_3") SELECT "U"."KEY", "U"."Proba_0", "U"."Proba_1", "U"."Proba_2", "U"."Proba_3" 
FROM (WITH "DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.091245621442795) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -1.091533422470093) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.055714450776577) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= -0.962825059890747) THEN 5 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= 0.428131729364395) THEN 7 ELSE 8 END END ELSE 9 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 0.13469922542572) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.870732128620148) THEN 12 ELSE 13 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 1.864720702171326) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -1.759305238723755) THEN 16 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= 1.923135876655578) THEN 18 ELSE 19 END END ELSE 20 END END END AS node_id_2 
FROM tmp_20180416233013_33yzdf_ads_ AS "ADS_sca_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, CAST("Values".feature AS FLOAT) AS feature, CAST("Values"."threshold" AS FLOAT) AS "threshold", CAST("Values"."count" AS FLOAT) AS "count", CAST("Values".depth AS FLOAT) AS depth, CAST("Values".parent_id AS FLOAT) AS parent_id, CAST("Values"."Proba_0" AS FLOAT) AS "Proba_0", CAST("Values"."LogProba_0" AS FLOAT) AS "LogProba_0", CAST("Values"."Proba_1" AS FLOAT) AS "Proba_1", CAST("Values"."LogProba_1" AS FLOAT) AS "LogProba_1", CAST("Values"."Proba_2" AS FLOAT) AS "Proba_2", CAST("Values"."LogProba_2" AS FLOAT) AS "LogProba_2", CAST("Values"."Proba_3" AS FLOAT) AS "Proba_3", CAST("Values"."LogProba_3" AS FLOAT) AS "LogProba_3", CAST("Values"."Decision" AS FLOAT) AS "Decision", CAST("Values"."DecisionProba" AS FLOAT) AS "DecisionProba" 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 8 AS "count", 2 AS depth, 1 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 3 AS "count", 4 AS depth, 4 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 5 AS "count", 5 AS depth, 6 AS parent_id, 0.2 AS "Proba_0", -1.6094379124341 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.8 AS "Proba_2", -0.22314355131421 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 0.8 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 5 AS depth, 6 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 11 AS "count", 3 AS depth, 3 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 3 AS depth, 11 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 10 AS "count", 3 AS depth, 11 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 4 AS depth, 15 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 16 AS "count", 5 AS depth, 17 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.875 AS "Proba_1", -0.133531392624523 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.125 AS "Proba_3", -2.079441541679836 AS "LogProba_3", 1 AS "Decision", 0.875 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 5 AS depth, 17 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 2 AS "count", 3 AS depth, 14 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte) AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data"."threshold" AS "threshold", "DT_node_data"."count" AS "count", "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Proba_3" AS "Proba_3", "DT_node_data"."LogProba_3" AS "LogProba_3", "DT_node_data"."Decision" AS "Decision", "DT_node_data"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"Calibrated_Model_0" AS 
(SELECT "DT_Output"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output"."Proba_0" AS "Proba_0", "DT_Output"."Proba_1" AS "Proba_1", "DT_Output"."Proba_2" AS "Proba_2", "DT_Output"."Proba_3" AS "Proba_3", "DT_Output"."LogProba_0" AS "LogProba_0", "DT_Output"."LogProba_1" AS "LogProba_1", "DT_Output"."LogProba_2" AS "LogProba_2", "DT_Output"."LogProba_3" AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_1") AS "ScoreOrProba_1", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_2") AS "ScoreOrProba_2", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_3") AS "ScoreOrProba_3" 
FROM "DT_Output"), 
isotonic_cte_0 AS 
(SELECT "Calibrated_Model_0"."KEY" AS "KEY", CASE WHEN ("Calibrated_Model_0"."ScoreOrProba_0" < 0.0) THEN 0.066666666666667 WHEN ("Calibrated_Model_0"."ScoreOrProba_0" < 0.2) THEN ("Calibrated_Model_0"."ScoreOrProba_0" - 0.0) * 2.166666666666666 + 0.066666666666667 WHEN ("Calibrated_Model_0"."ScoreOrProba_0" < 1.0) THEN ("Calibrated_Model_0"."ScoreOrProba_0" - 0.2) * 0.3125 + 0.5 ELSE 0.75 END AS "Proba_0", CASE WHEN ("Calibrated_Model_0"."ScoreOrProba_1" < 0.0) THEN 0.133333333333333 WHEN ("Calibrated_Model_0"."ScoreOrProba_1" < 0.875) THEN ("Calibrated_Model_0"."ScoreOrProba_1" - 0.0) * 0.419047619047619 + 0.133333333333333 ELSE 0.5 END AS "Proba_1", CASE WHEN ("Calibrated_Model_0"."ScoreOrProba_2" < 0.0) THEN 0.088235294117647 WHEN ("Calibrated_Model_0"."ScoreOrProba_2" < 0.8) THEN ("Calibrated_Model_0"."ScoreOrProba_2" - 0.0) * 0.0 + 0.088235294117647 WHEN ("Calibrated_Model_0"."ScoreOrProba_2" < 1.0) THEN ("Calibrated_Model_0"."ScoreOrProba_2" - 0.8) * 4.558823529411765 + 0.088235294117647 ELSE 1.0 END AS "Proba_2", CASE WHEN ("Calibrated_Model_0"."ScoreOrProba_3" < 0.0) THEN 0.0625 WHEN ("Calibrated_Model_0"."ScoreOrProba_3" < 0.125) THEN ("Calibrated_Model_0"."ScoreOrProba_3" - 0.0) * 0.0 + 0.0625 WHEN ("Calibrated_Model_0"."ScoreOrProba_3" < 1.0) THEN ("Calibrated_Model_0"."ScoreOrProba_3" - 0.125) * 0.744897959183674 + 0.0625 ELSE 0.714285714285714 END AS "Proba_3" 
FROM "Calibrated_Model_0"), 
"Normalized_Probas" AS 
(SELECT isotonic_cte_0."KEY" AS "KEY", isotonic_cte_0."Proba_0" / (isotonic_cte_0."Proba_0" + isotonic_cte_0."Proba_1" + isotonic_cte_0."Proba_2" + isotonic_cte_0."Proba_3") AS "Proba_0", isotonic_cte_0."Proba_1" / (isotonic_cte_0."Proba_0" + isotonic_cte_0."Proba_1" + isotonic_cte_0."Proba_2" + isotonic_cte_0."Proba_3") AS "Proba_1", isotonic_cte_0."Proba_2" / (isotonic_cte_0."Proba_0" + isotonic_cte_0."Proba_1" + isotonic_cte_0."Proba_2" + isotonic_cte_0."Proba_3") AS "Proba_2", isotonic_cte_0."Proba_3" / (isotonic_cte_0."Proba_0" + isotonic_cte_0."Proba_1" + isotonic_cte_0."Proba_2" + isotonic_cte_0."Proba_3") AS "Proba_3" 
FROM isotonic_cte_0), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.057175017893314) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.037758152931929) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= -1.213514804840088) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= -1.966012716293335) THEN 5 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 2.119138240814209) THEN 7 ELSE 8 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -1.297159671783447) THEN 10 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= -1.725775718688965) THEN 12 ELSE 13 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.203095823526382) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 0.026903592050076) THEN 16 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.274374336004257) THEN 18 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.680728375911713) THEN 20 ELSE 21 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -1.593790531158447) THEN 23 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= -0.787576198577881) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= -0.624219357967377) THEN 26 ELSE 27 END ELSE 28 END END END END AS node_id_2 
FROM tmp_20180416233013_33yzdf_ads_ AS "ADS_sca_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, CAST("Values".feature AS FLOAT) AS feature, CAST("Values"."threshold" AS FLOAT) AS "threshold", CAST("Values"."count" AS FLOAT) AS "count", CAST("Values".depth AS FLOAT) AS depth, CAST("Values".parent_id AS FLOAT) AS parent_id, CAST("Values"."Proba_0" AS FLOAT) AS "Proba_0", CAST("Values"."LogProba_0" AS FLOAT) AS "LogProba_0", CAST("Values"."Proba_1" AS FLOAT) AS "Proba_1", CAST("Values"."LogProba_1" AS FLOAT) AS "LogProba_1", CAST("Values"."Proba_2" AS FLOAT) AS "Proba_2", CAST("Values"."LogProba_2" AS FLOAT) AS "LogProba_2", CAST("Values"."Proba_3" AS FLOAT) AS "Proba_3", CAST("Values"."LogProba_3" AS FLOAT) AS "LogProba_3", CAST("Values"."Decision" AS FLOAT) AS "Decision", CAST("Values"."DecisionProba" AS FLOAT) AS "DecisionProba" 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 4 AS "count", 3 AS depth, 2 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 4 AS depth, 4 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 10 AS "count", 5 AS depth, 6 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 5 AS depth, 6 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 2 AS "count", 3 AS depth, 9 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 4 AS depth, 11 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 10 AS "count", 4 AS depth, 11 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 9 AS "count", 3 AS depth, 15 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 4 AS "count", 4 AS depth, 17 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 3 AS "count", 5 AS depth, 19 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.333333333333333 AS "Proba_1", -1.09861228866811 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.666666666666667 AS "Proba_3", -0.405465108108164 AS "LogProba_3", 3 AS "Decision", 0.666666666666667 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 21 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 3 AS "count", 5 AS depth, 19 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.333333333333333 AS "Proba_1", -1.09861228866811 AS "LogProba_1", 0.666666666666667 AS "Proba_2", -0.405465108108164 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 0.666666666666667 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 23 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 3 AS depth, 22 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 26 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 5 AS depth, 25 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 27 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 5 AS depth, 25 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 28 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 8 AS "count", 4 AS depth, 24 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte) AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1"."threshold" AS "threshold", "DT_node_data_1"."count" AS "count", "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Proba_3" AS "Proba_3", "DT_node_data_1"."LogProba_3" AS "LogProba_3", "DT_node_data_1"."Decision" AS "Decision", "DT_node_data_1"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"Calibrated_Model_1" AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_1"."Proba_0" AS "Proba_0", "DT_Output_1"."Proba_1" AS "Proba_1", "DT_Output_1"."Proba_2" AS "Proba_2", "DT_Output_1"."Proba_3" AS "Proba_3", "DT_Output_1"."LogProba_0" AS "LogProba_0", "DT_Output_1"."LogProba_1" AS "LogProba_1", "DT_Output_1"."LogProba_2" AS "LogProba_2", "DT_Output_1"."LogProba_3" AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_1") AS "ScoreOrProba_1", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_2") AS "ScoreOrProba_2", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_3") AS "ScoreOrProba_3" 
FROM "DT_Output_1"), 
isotonic_cte_1 AS 
(SELECT "Calibrated_Model_1"."KEY" AS "KEY", CASE WHEN ("Calibrated_Model_1"."ScoreOrProba_0" < 0.0) THEN 0.0625 WHEN ("Calibrated_Model_1"."ScoreOrProba_0" < 1.0) THEN ("Calibrated_Model_1"."ScoreOrProba_0" - 0.0) * 0.7375 + 0.0625 ELSE 0.8 END AS "Proba_0", CASE WHEN ("Calibrated_Model_1"."ScoreOrProba_1" < 0.0) THEN 0.0 WHEN ("Calibrated_Model_1"."ScoreOrProba_1" < 0.333333333333333) THEN ("Calibrated_Model_1"."ScoreOrProba_1" - 0.0) * 1.9 + 0.0 WHEN ("Calibrated_Model_1"."ScoreOrProba_1" < 1.0) THEN ("Calibrated_Model_1"."ScoreOrProba_1" - 0.333333333333333) * 0.0 + 0.633333333333333 ELSE 0.633333333333333 END AS "Proba_1", CASE WHEN ("Calibrated_Model_1"."ScoreOrProba_2" < 0.0) THEN 0.076923076923077 WHEN ("Calibrated_Model_1"."ScoreOrProba_2" < 0.666666666666667) THEN ("Calibrated_Model_1"."ScoreOrProba_2" - 0.0) * 0.384615384615385 + 0.076923076923077 WHEN ("Calibrated_Model_1"."ScoreOrProba_2" < 1.0) THEN ("Calibrated_Model_1"."ScoreOrProba_2" - 0.666666666666667) * 0.8 + 0.333333333333333 ELSE 0.6 END AS "Proba_2", CASE WHEN ("Calibrated_Model_1"."ScoreOrProba_3" < 0.0) THEN 0.166666666666667 WHEN ("Calibrated_Model_1"."ScoreOrProba_3" < 1.0) THEN ("Calibrated_Model_1"."ScoreOrProba_3" - 0.0) * 0.833333333333333 + 0.166666666666667 ELSE 1.0 END AS "Proba_3" 
FROM "Calibrated_Model_1"), 
"Normalized_Probas_1" AS 
(SELECT isotonic_cte_1."KEY" AS "KEY", isotonic_cte_1."Proba_0" / (isotonic_cte_1."Proba_0" + isotonic_cte_1."Proba_1" + isotonic_cte_1."Proba_2" + isotonic_cte_1."Proba_3") AS "Proba_0", isotonic_cte_1."Proba_1" / (isotonic_cte_1."Proba_0" + isotonic_cte_1."Proba_1" + isotonic_cte_1."Proba_2" + isotonic_cte_1."Proba_3") AS "Proba_1", isotonic_cte_1."Proba_2" / (isotonic_cte_1."Proba_0" + isotonic_cte_1."Proba_1" + isotonic_cte_1."Proba_2" + isotonic_cte_1."Proba_3") AS "Proba_2", isotonic_cte_1."Proba_3" / (isotonic_cte_1."Proba_0" + isotonic_cte_1."Proba_1" + isotonic_cte_1."Proba_2" + isotonic_cte_1."Proba_3") AS "Proba_3" 
FROM isotonic_cte_1), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.053778067231178) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -1.148135781288147) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.19233238697052) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= -0.120611242949963) THEN 5 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.420415341854095) THEN 7 ELSE 8 END END ELSE 9 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= -0.237923324108124) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.57902181148529) THEN 12 ELSE 13 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= 1.506195425987244) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.012925520539284) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -1.759305238723755) THEN 17 ELSE 18 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= -0.412983775138855) THEN 20 ELSE 21 END END ELSE 22 END END END AS node_id_2 
FROM tmp_20180416233013_33yzdf_ads_ AS "ADS_sca_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, CAST("Values".feature AS FLOAT) AS feature, CAST("Values"."threshold" AS FLOAT) AS "threshold", CAST("Values"."count" AS FLOAT) AS "count", CAST("Values".depth AS FLOAT) AS depth, CAST("Values".parent_id AS FLOAT) AS parent_id, CAST("Values"."Proba_0" AS FLOAT) AS "Proba_0", CAST("Values"."LogProba_0" AS FLOAT) AS "LogProba_0", CAST("Values"."Proba_1" AS FLOAT) AS "Proba_1", CAST("Values"."LogProba_1" AS FLOAT) AS "LogProba_1", CAST("Values"."Proba_2" AS FLOAT) AS "Proba_2", CAST("Values"."LogProba_2" AS FLOAT) AS "LogProba_2", CAST("Values"."Proba_3" AS FLOAT) AS "Proba_3", CAST("Values"."LogProba_3" AS FLOAT) AS "LogProba_3", CAST("Values"."Decision" AS FLOAT) AS "Decision", CAST("Values"."DecisionProba" AS FLOAT) AS "DecisionProba" 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 8 AS "count", 2 AS depth, 1 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 5 AS "count", 4 AS depth, 4 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 4 AS "count", 5 AS depth, 6 AS parent_id, 0.75 AS "Proba_0", -0.287682072451781 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436111989 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 0.75 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 3 AS "count", 5 AS depth, 6 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 9 AS "count", 3 AS depth, 3 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 3 AS depth, 11 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 8 AS "count", 3 AS depth, 11 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 17 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 5 AS depth, 16 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 10 AS "count", 5 AS depth, 16 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 3 AS "count", 5 AS depth, 19 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 21 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 7 AS "count", 5 AS depth, 19 AS parent_id, 0.142857142857143 AS "Proba_0", -1.945910149055314 AS "LogProba_0", 0.571428571428571 AS "Proba_1", -0.559615787935423 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.285714285714286 AS "Proba_3", -1.252762968495368 AS "LogProba_3", 1 AS "Decision", 0.571428571428571 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 22 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 2 AS "count", 3 AS depth, 14 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte) AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2"."threshold" AS "threshold", "DT_node_data_2"."count" AS "count", "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Proba_3" AS "Proba_3", "DT_node_data_2"."LogProba_3" AS "LogProba_3", "DT_node_data_2"."Decision" AS "Decision", "DT_node_data_2"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"Calibrated_Model_2" AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_2"."Proba_0" AS "Proba_0", "DT_Output_2"."Proba_1" AS "Proba_1", "DT_Output_2"."Proba_2" AS "Proba_2", "DT_Output_2"."Proba_3" AS "Proba_3", "DT_Output_2"."LogProba_0" AS "LogProba_0", "DT_Output_2"."LogProba_1" AS "LogProba_1", "DT_Output_2"."LogProba_2" AS "LogProba_2", "DT_Output_2"."LogProba_3" AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_1") AS "ScoreOrProba_1", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_2") AS "ScoreOrProba_2", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_3") AS "ScoreOrProba_3" 
FROM "DT_Output_2"), 
isotonic_cte_2 AS 
(SELECT "Calibrated_Model_2"."KEY" AS "KEY", CASE WHEN ("Calibrated_Model_2"."ScoreOrProba_0" < 0.0) THEN 0.045454545454545 WHEN ("Calibrated_Model_2"."ScoreOrProba_0" < 0.142857142857143) THEN ("Calibrated_Model_2"."ScoreOrProba_0" - 0.0) * 0.0 + 0.045454545454545 WHEN ("Calibrated_Model_2"."ScoreOrProba_0" < 0.75) THEN ("Calibrated_Model_2"."ScoreOrProba_0" - 0.142857142857143) * 1.07807486631016 + 0.045454545454545 WHEN ("Calibrated_Model_2"."ScoreOrProba_0" < 1.0) THEN ("Calibrated_Model_2"."ScoreOrProba_0" - 0.75) * 0.0 + 0.7 ELSE 0.7 END AS "Proba_0", CASE WHEN ("Calibrated_Model_2"."ScoreOrProba_1" < 0.0) THEN 0.142857142857143 WHEN ("Calibrated_Model_2"."ScoreOrProba_1" < 0.571428571428571) THEN ("Calibrated_Model_2"."ScoreOrProba_1" - 0.0) * 0.916666666666666 + 0.142857142857143 WHEN ("Calibrated_Model_2"."ScoreOrProba_1" < 1.0) THEN ("Calibrated_Model_2"."ScoreOrProba_1" - 0.571428571428571) * 0.0 + 0.666666666666667 ELSE 0.666666666666667 END AS "Proba_1", CASE WHEN ("Calibrated_Model_2"."ScoreOrProba_2" < 0.0) THEN 0.133333333333333 WHEN ("Calibrated_Model_2"."ScoreOrProba_2" < 0.25) THEN ("Calibrated_Model_2"."ScoreOrProba_2" - 0.0) * 0.0 + 0.133333333333333 WHEN ("Calibrated_Model_2"."ScoreOrProba_2" < 1.0) THEN ("Calibrated_Model_2"."ScoreOrProba_2" - 0.25) * 0.266666666666667 + 0.133333333333333 ELSE 0.333333333333333 END AS "Proba_2", CASE WHEN ("Calibrated_Model_2"."ScoreOrProba_3" < 0.0) THEN 0.083333333333333 WHEN ("Calibrated_Model_2"."ScoreOrProba_3" < 0.285714285714286) THEN ("Calibrated_Model_2"."ScoreOrProba_3" - 0.0) * 0.0 + 0.083333333333333 WHEN ("Calibrated_Model_2"."ScoreOrProba_3" < 1.0) THEN ("Calibrated_Model_2"."ScoreOrProba_3" - 0.285714285714286) * 0.723333333333333 + 0.083333333333333 ELSE 0.6 END AS "Proba_3" 
FROM "Calibrated_Model_2"), 
"Normalized_Probas_2" AS 
(SELECT isotonic_cte_2."KEY" AS "KEY", isotonic_cte_2."Proba_0" / (isotonic_cte_2."Proba_0" + isotonic_cte_2."Proba_1" + isotonic_cte_2."Proba_2" + isotonic_cte_2."Proba_3") AS "Proba_0", isotonic_cte_2."Proba_1" / (isotonic_cte_2."Proba_0" + isotonic_cte_2."Proba_1" + isotonic_cte_2."Proba_2" + isotonic_cte_2."Proba_3") AS "Proba_1", isotonic_cte_2."Proba_2" / (isotonic_cte_2."Proba_0" + isotonic_cte_2."Proba_1" + isotonic_cte_2."Proba_2" + isotonic_cte_2."Proba_3") AS "Proba_2", isotonic_cte_2."Proba_3" / (isotonic_cte_2."Proba_0" + isotonic_cte_2."Proba_1" + isotonic_cte_2."Proba_2" + isotonic_cte_2."Proba_3") AS "Proba_3" 
FROM isotonic_cte_2), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 0.150100976228714) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.629313826560974) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 0.217398881912231) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= -0.809355020523071) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -1.766975998878479) THEN 7 ELSE 8 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.234688296914101) THEN 10 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= 1.043267965316772) THEN 12 ELSE 13 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= 0.174078956246376) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= -1.496924638748169) THEN 16 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -2.201436519622803) THEN 18 ELSE 19 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.885828495025635) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 1.948196649551392) THEN 22 ELSE 23 END ELSE 24 END END END AS node_id_2 
FROM tmp_20180416233013_33yzdf_ads_ AS "ADS_sca_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, CAST("Values".feature AS FLOAT) AS feature, CAST("Values"."threshold" AS FLOAT) AS "threshold", CAST("Values"."count" AS FLOAT) AS "count", CAST("Values".depth AS FLOAT) AS depth, CAST("Values".parent_id AS FLOAT) AS parent_id, CAST("Values"."Proba_0" AS FLOAT) AS "Proba_0", CAST("Values"."LogProba_0" AS FLOAT) AS "LogProba_0", CAST("Values"."Proba_1" AS FLOAT) AS "Proba_1", CAST("Values"."LogProba_1" AS FLOAT) AS "LogProba_1", CAST("Values"."Proba_2" AS FLOAT) AS "Proba_2", CAST("Values"."LogProba_2" AS FLOAT) AS "LogProba_2", CAST("Values"."Proba_3" AS FLOAT) AS "Proba_3", CAST("Values"."LogProba_3" AS FLOAT) AS "LogProba_3", CAST("Values"."Decision" AS FLOAT) AS "Decision", CAST("Values"."DecisionProba" AS FLOAT) AS "DecisionProba" 
FROM (SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 2 AS "count", 4 AS depth, 3 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 6 AS "count", 4 AS depth, 3 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 4 AS depth, 6 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 4 AS "count", 4 AS depth, 6 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 14 AS "count", 3 AS depth, 9 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 2 AS "count", 4 AS depth, 11 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 4 AS depth, 11 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 3 AS "count", 3 AS depth, 15 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 4 AS depth, 17 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 10 AS "count", 4 AS depth, 17 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 22 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 13 AS "count", 4 AS depth, 21 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 23 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 1 AS "count", 4 AS depth, 21 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte UNION ALL SELECT 24 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS "threshold", 3 AS "count", 3 AS depth, 20 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" 
FROM (SELECT 0.0 AS "X") AS dummy_cte) AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3"."threshold" AS "threshold", "DT_node_data_3"."count" AS "count", "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Proba_3" AS "Proba_3", "DT_node_data_3"."LogProba_3" AS "LogProba_3", "DT_node_data_3"."Decision" AS "Decision", "DT_node_data_3"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"Calibrated_Model_3" AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_3"."Proba_0" AS "Proba_0", "DT_Output_3"."Proba_1" AS "Proba_1", "DT_Output_3"."Proba_2" AS "Proba_2", "DT_Output_3"."Proba_3" AS "Proba_3", "DT_Output_3"."LogProba_0" AS "LogProba_0", "DT_Output_3"."LogProba_1" AS "LogProba_1", "DT_Output_3"."LogProba_2" AS "LogProba_2", "DT_Output_3"."LogProba_3" AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_1") AS "ScoreOrProba_1", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_2") AS "ScoreOrProba_2", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_3") AS "ScoreOrProba_3" 
FROM "DT_Output_3"), 
isotonic_cte_3 AS 
(SELECT "Calibrated_Model_3"."KEY" AS "KEY", CASE WHEN ("Calibrated_Model_3"."ScoreOrProba_0" < 0.0) THEN 0.076923076923077 WHEN ("Calibrated_Model_3"."ScoreOrProba_0" < 1.0) THEN ("Calibrated_Model_3"."ScoreOrProba_0" - 0.0) * 0.423076923076923 + 0.076923076923077 ELSE 0.5 END AS "Proba_0", CASE WHEN ("Calibrated_Model_3"."ScoreOrProba_1" < 0.0) THEN 0.153846153846154 WHEN ("Calibrated_Model_3"."ScoreOrProba_1" < 1.0) THEN ("Calibrated_Model_3"."ScoreOrProba_1" - 0.0) * 0.346153846153846 + 0.153846153846154 ELSE 0.5 END AS "Proba_1", CASE WHEN ("Calibrated_Model_3"."ScoreOrProba_2" < 0.0) THEN 0.1875 WHEN ("Calibrated_Model_3"."ScoreOrProba_2" < 1.0) THEN ("Calibrated_Model_3"."ScoreOrProba_2" - 0.0) * 0.479166666666667 + 0.1875 ELSE 0.666666666666667 END AS "Proba_2", CASE WHEN ("Calibrated_Model_3"."ScoreOrProba_3" < 0.0) THEN 0.133333333333333 WHEN ("Calibrated_Model_3"."ScoreOrProba_3" < 1.0) THEN ("Calibrated_Model_3"."ScoreOrProba_3" - 0.0) * 0.616666666666667 + 0.133333333333333 ELSE 0.75 END AS "Proba_3" 
FROM "Calibrated_Model_3"), 
"Normalized_Probas_3" AS 
(SELECT isotonic_cte_3."KEY" AS "KEY", isotonic_cte_3."Proba_0" / (isotonic_cte_3."Proba_0" + isotonic_cte_3."Proba_1" + isotonic_cte_3."Proba_2" + isotonic_cte_3."Proba_3") AS "Proba_0", isotonic_cte_3."Proba_1" / (isotonic_cte_3."Proba_0" + isotonic_cte_3."Proba_1" + isotonic_cte_3."Proba_2" + isotonic_cte_3."Proba_3") AS "Proba_1", isotonic_cte_3."Proba_2" / (isotonic_cte_3."Proba_0" + isotonic_cte_3."Proba_1" + isotonic_cte_3."Proba_2" + isotonic_cte_3."Proba_3") AS "Proba_2", isotonic_cte_3."Proba_3" / (isotonic_cte_3."Proba_0" + isotonic_cte_3."Proba_1" + isotonic_cte_3."Proba_2" + isotonic_cte_3."Proba_3") AS "Proba_3" 
FROM isotonic_cte_3)
 SELECT "CalProb_B0"."KEY", "CalProb_B0"."Proba_0", "CalProb_B0"."Proba_1", "CalProb_B0"."Proba_2", "CalProb_B0"."Proba_3" 
FROM (SELECT "CalProb_esu_0"."KEY" AS "KEY", "CalProb_esu_0"."Proba_0" AS "Proba_0", "CalProb_esu_0"."Proba_1" AS "Proba_1", "CalProb_esu_0"."Proba_2" AS "Proba_2", "CalProb_esu_0"."Proba_3" AS "Proba_3" 
FROM (SELECT "Normalized_Probas"."KEY" AS "KEY", "Normalized_Probas"."Proba_0" AS "Proba_0", "Normalized_Probas"."Proba_1" AS "Proba_1", "Normalized_Probas"."Proba_2" AS "Proba_2", "Normalized_Probas"."Proba_3" AS "Proba_3" 
FROM "Normalized_Probas" UNION ALL SELECT "Normalized_Probas_1"."KEY" AS "KEY", "Normalized_Probas_1"."Proba_0" AS "Proba_0", "Normalized_Probas_1"."Proba_1" AS "Proba_1", "Normalized_Probas_1"."Proba_2" AS "Proba_2", "Normalized_Probas_1"."Proba_3" AS "Proba_3" 
FROM "Normalized_Probas_1" UNION ALL SELECT "Normalized_Probas_2"."KEY" AS "KEY", "Normalized_Probas_2"."Proba_0" AS "Proba_0", "Normalized_Probas_2"."Proba_1" AS "Proba_1", "Normalized_Probas_2"."Proba_2" AS "Proba_2", "Normalized_Probas_2"."Proba_3" AS "Proba_3" 
FROM "Normalized_Probas_2" UNION ALL SELECT "Normalized_Probas_3"."KEY" AS "KEY", "Normalized_Probas_3"."Proba_0" AS "Proba_0", "Normalized_Probas_3"."Proba_1" AS "Proba_1", "Normalized_Probas_3"."Proba_2" AS "Proba_2", "Normalized_Probas_3"."Proba_3" AS "Proba_3" 
FROM "Normalized_Probas_3") AS "CalProb_esu_0") AS "CalProb_B0") AS "U"

-- Code For temporary table tmp_20180416233013_15z6p4_calp part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233013_15z6p4_calp  (
	"KEY" BIGINT, 
	"Proba_0" FLOAT, 
	"Proba_1" FLOAT, 
	"Proba_2" FLOAT, 
	"Proba_3" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233013_15z6p4_calp part 2/2. Populate

INSERT INTO tmp_20180416233013_15z6p4_calp ("KEY", "Proba_0", "Proba_1", "Proba_2", "Proba_3") SELECT "U"."KEY", "U"."Proba_0", "U"."Proba_1", "U"."Proba_2", "U"."Proba_3" 
FROM (SELECT "CalProb_Union"."KEY", "CalProb_Union"."Proba_0", "CalProb_Union"."Proba_1", "CalProb_Union"."Proba_2", "CalProb_Union"."Proba_3" 
FROM (SELECT "CalProb_EnsembleUnion"."KEY" AS "KEY", "CalProb_EnsembleUnion"."Proba_0" AS "Proba_0", "CalProb_EnsembleUnion"."Proba_1" AS "Proba_1", "CalProb_EnsembleUnion"."Proba_2" AS "Proba_2", "CalProb_EnsembleUnion"."Proba_3" AS "Proba_3" 
FROM (SELECT "CalProb_B0"."KEY" AS "KEY", "CalProb_B0"."Proba_0" AS "Proba_0", "CalProb_B0"."Proba_1" AS "Proba_1", "CalProb_B0"."Proba_2" AS "Proba_2", "CalProb_B0"."Proba_3" AS "Proba_3" 
FROM tmp_20180416233013_aje8dv_calp AS "CalProb_B0") AS "CalProb_EnsembleUnion") AS "CalProb_Union") AS "U"

-- Code For temporary table tmp_20180416233013_vjr284_calp part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233013_vjr284_calp  (
	"KEY" BIGINT, 
	"Proba_0" FLOAT, 
	"Proba_1" FLOAT, 
	"Proba_2" FLOAT, 
	"Proba_3" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233013_vjr284_calp part 2/2. Populate

INSERT INTO tmp_20180416233013_vjr284_calp ("KEY", "Proba_0", "Proba_1", "Proba_2", "Proba_3") SELECT "U"."KEY", "U"."Proba_0", "U"."Proba_1", "U"."Proba_2", "U"."Proba_3" 
FROM (SELECT "CalProb_avg"."KEY", "CalProb_avg"."Proba_0", "CalProb_avg"."Proba_1", "CalProb_avg"."Proba_2", "CalProb_avg"."Proba_3" 
FROM (SELECT "T"."KEY" AS "KEY", CAST("T"."Proba_0" AS FLOAT) AS "Proba_0", CAST("T"."Proba_1" AS FLOAT) AS "Proba_1", CAST("T"."Proba_2" AS FLOAT) AS "Proba_2", CAST("T"."Proba_3" AS FLOAT) AS "Proba_3" 
FROM (SELECT "CalProb_Union"."KEY" AS "KEY", avg(CAST("CalProb_Union"."Proba_0" AS FLOAT)) AS "Proba_0", avg(CAST("CalProb_Union"."Proba_1" AS FLOAT)) AS "Proba_1", avg(CAST("CalProb_Union"."Proba_2" AS FLOAT)) AS "Proba_2", avg(CAST("CalProb_Union"."Proba_3" AS FLOAT)) AS "Proba_3" 
FROM tmp_20180416233013_15z6p4_calp AS "CalProb_Union" GROUP BY "CalProb_Union"."KEY") AS "T") AS "CalProb_avg") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "CalProb_avg"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "CalProb_avg"."Proba_0" AS "Proba_0", "CalProb_avg"."Proba_1" AS "Proba_1", "CalProb_avg"."Proba_2" AS "Proba_2", "CalProb_avg"."Proba_3" AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM tmp_20180416233013_vjr284_calp AS "CalProb_avg"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max."class") AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."Proba" >= union_with_max."max_Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte