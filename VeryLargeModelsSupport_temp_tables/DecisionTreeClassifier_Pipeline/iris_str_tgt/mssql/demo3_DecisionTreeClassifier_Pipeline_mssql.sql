-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : DecisionTreeClassifier_Pipeline
-- Dataset : iris_str_tgt
-- Database : mssql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table ##TMP_20180417050940_AKHU14_ADS_imp_1_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180417050940_AKHU14_ADS_imp_1_OUT (
	[KEY] BIGINT NULL, 
	imputer_output_2 FLOAT(53) NULL, 
	imputer_output_3 FLOAT(53) NULL, 
	imputer_output_4 FLOAT(53) NULL, 
	imputer_output_5 FLOAT(53) NULL
)



-- Code For temporary table ##TMP_20180417050940_AKHU14_ADS_imp_1_OUT part 2/2. Populate

INSERT INTO ##TMP_20180417050940_AKHU14_ADS_imp_1_OUT ([KEY], imputer_output_2, imputer_output_3, imputer_output_4, imputer_output_5) SELECT [ADS_imp_1_OUT].[KEY], [ADS_imp_1_OUT].imputer_output_2, [ADS_imp_1_OUT].imputer_output_3, [ADS_imp_1_OUT].imputer_output_4, [ADS_imp_1_OUT].imputer_output_5 
FROM (SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 5.8474999999999975 ELSE [ADS].[Feature_0] END AS imputer_output_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 3.0366666666666657 ELSE [ADS].[Feature_1] END AS imputer_output_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 3.8450000000000006 ELSE [ADS].[Feature_2] END AS imputer_output_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 1.245 ELSE [ADS].[Feature_3] END AS imputer_output_5 
FROM iris_str_tgt AS [ADS]) AS [ADS_imp_1_OUT]

-- Code For temporary table ##TMP_20180417050940_9J9VJT_ADS_sca_2_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180417050940_9J9VJT_ADS_sca_2_OUT (
	[KEY] BIGINT NULL, 
	scaler_output_2 FLOAT NULL, 
	scaler_output_3 FLOAT NULL, 
	scaler_output_4 FLOAT NULL, 
	scaler_output_5 FLOAT NULL
)



-- Code For temporary table ##TMP_20180417050940_9J9VJT_ADS_sca_2_OUT part 2/2. Populate

INSERT INTO ##TMP_20180417050940_9J9VJT_ADS_sca_2_OUT ([KEY], scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) SELECT [ADS_sca_2_OUT].[KEY], [ADS_sca_2_OUT].scaler_output_2, [ADS_sca_2_OUT].scaler_output_3, [ADS_sca_2_OUT].scaler_output_4, [ADS_sca_2_OUT].scaler_output_5 
FROM (SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].imputer_output_2 AS FLOAT(53)) - 5.8474999999999975) / 0.827039146594646 AS scaler_output_2, (CAST([ADS_imp_1_OUT].imputer_output_3 AS FLOAT(53)) - 3.0366666666666657) / 0.43625935201691934 AS scaler_output_3, (CAST([ADS_imp_1_OUT].imputer_output_4 AS FLOAT(53)) - 3.8450000000000006) / 1.709817241695732 AS scaler_output_4, (CAST([ADS_imp_1_OUT].imputer_output_5 AS FLOAT(53)) - 1.245) / 0.7498722113355939 AS scaler_output_5 
FROM ##TMP_20180417050940_AKHU14_ADS_imp_1_OUT AS [ADS_imp_1_OUT]) AS [ADS_sca_2_OUT]

-- Model deployment code

WITH [DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_output_5 <= -0.5934344530105591) THEN 1 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 0.5877821445465088) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_output_5 <= 0.5400919914245605) THEN 4 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= 0.1451735943555832) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_output_5 <= 0.6734480857849121) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_output_4 <= 0.7047536373138428) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_output_3 <= -1.5739872455596924) THEN 11 ELSE 12 END ELSE 13 END ELSE 14 END END END AS node_id_2 
FROM ##TMP_20180417050940_9J9VJT_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, CAST([Values].feature AS FLOAT(53)) AS feature, CAST([Values].threshold AS FLOAT(53)) AS threshold, CAST([Values].count AS FLOAT(53)) AS count, CAST([Values].depth AS FLOAT(53)) AS depth, CAST([Values].parent_id AS FLOAT(53)) AS parent_id, CAST([Values].[Proba_CLASS_0] AS FLOAT(53)) AS [Proba_CLASS_0], CAST([Values].[LogProba_CLASS_0] AS FLOAT(53)) AS [LogProba_CLASS_0], CAST([Values].[Proba_CLASS_1] AS FLOAT(53)) AS [Proba_CLASS_1], CAST([Values].[LogProba_CLASS_1] AS FLOAT(53)) AS [LogProba_CLASS_1], CAST([Values].[Proba_CLASS_2] AS FLOAT(53)) AS [Proba_CLASS_2], CAST([Values].[LogProba_CLASS_2] AS FLOAT(53)) AS [LogProba_CLASS_2], CAST([Values].[Decision] AS FLOAT(53)) AS [Decision], CAST([Values].[DecisionProba] AS FLOAT(53)) AS [DecisionProba] 
FROM (SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 37 AS count, 1 AS depth, 0 AS parent_id, 1.0 AS [Proba_CLASS_0], 0.0 AS [LogProba_CLASS_0], 0.0 AS [Proba_CLASS_1], -1.79769313486231e+308 AS [LogProba_CLASS_1], 0.0 AS [Proba_CLASS_2], -1.79769313486231e+308 AS [LogProba_CLASS_2], 'CLASS_0' AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 36 AS count, 3 AS depth, 3 AS parent_id, 0.0 AS [Proba_CLASS_0], -1.79769313486231e+308 AS [LogProba_CLASS_0], 1.0 AS [Proba_CLASS_1], 0.0 AS [LogProba_CLASS_1], 0.0 AS [Proba_CLASS_2], -1.79769313486231e+308 AS [LogProba_CLASS_2], 'CLASS_1' AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 2 AS count, 4 AS depth, 5 AS parent_id, 0.0 AS [Proba_CLASS_0], -1.79769313486231e+308 AS [LogProba_CLASS_0], 0.0 AS [Proba_CLASS_1], -1.79769313486231e+308 AS [LogProba_CLASS_1], 1.0 AS [Proba_CLASS_2], 0.0 AS [LogProba_CLASS_2], 'CLASS_2' AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 4 AS depth, 5 AS parent_id, 0.0 AS [Proba_CLASS_0], -1.79769313486231e+308 AS [LogProba_CLASS_0], 1.0 AS [Proba_CLASS_1], 0.0 AS [LogProba_CLASS_1], 0.0 AS [Proba_CLASS_2], -1.79769313486231e+308 AS [LogProba_CLASS_2], 'CLASS_1' AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 1 AS count, 5 AS depth, 10 AS parent_id, 0.0 AS [Proba_CLASS_0], -1.79769313486231e+308 AS [LogProba_CLASS_0], 0.0 AS [Proba_CLASS_1], -1.79769313486231e+308 AS [LogProba_CLASS_1], 1.0 AS [Proba_CLASS_2], 0.0 AS [LogProba_CLASS_2], 'CLASS_2' AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 5 AS depth, 10 AS parent_id, 0.0 AS [Proba_CLASS_0], -1.79769313486231e+308 AS [LogProba_CLASS_0], 1.0 AS [Proba_CLASS_1], 0.0 AS [LogProba_CLASS_1], 0.0 AS [Proba_CLASS_2], -1.79769313486231e+308 AS [LogProba_CLASS_2], 'CLASS_1' AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 3 AS count, 4 AS depth, 9 AS parent_id, 0.0 AS [Proba_CLASS_0], -1.79769313486231e+308 AS [LogProba_CLASS_0], 0.0 AS [Proba_CLASS_1], -1.79769313486231e+308 AS [LogProba_CLASS_1], 1.0 AS [Proba_CLASS_2], 0.0 AS [LogProba_CLASS_2], 'CLASS_2' AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT(53)) AS threshold, 37 AS count, 3 AS depth, 8 AS parent_id, 0.0 AS [Proba_CLASS_0], -1.79769313486231e+308 AS [LogProba_CLASS_0], 0.0 AS [Proba_CLASS_1], -1.79769313486231e+308 AS [LogProba_CLASS_1], 1.0 AS [Proba_CLASS_2], 0.0 AS [LogProba_CLASS_2], 'CLASS_2' AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_CLASS_0] AS [Proba_CLASS_0], [DT_node_data].[LogProba_CLASS_0] AS [LogProba_CLASS_0], [DT_node_data].[Proba_CLASS_1] AS [Proba_CLASS_1], [DT_node_data].[LogProba_CLASS_1] AS [LogProba_CLASS_1], [DT_node_data].[Proba_CLASS_2] AS [Proba_CLASS_2], [DT_node_data].[LogProba_CLASS_2] AS [LogProba_CLASS_2], [DT_node_data].[Decision] AS [Decision], [DT_node_data].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id)
 SELECT [DT_Output].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_CLASS_0], CAST(NULL AS FLOAT(53)) AS [Score_CLASS_1], CAST(NULL AS FLOAT(53)) AS [Score_CLASS_2], [DT_Output].[Proba_CLASS_0] AS [Proba_CLASS_0], [DT_Output].[Proba_CLASS_1] AS [Proba_CLASS_1], [DT_Output].[Proba_CLASS_2] AS [Proba_CLASS_2], [DT_Output].[LogProba_CLASS_0] AS [LogProba_CLASS_0], [DT_Output].[LogProba_CLASS_1] AS [LogProba_CLASS_1], [DT_Output].[LogProba_CLASS_2] AS [LogProba_CLASS_2], [DT_Output].[Decision] AS [Decision], [DT_Output].[DecisionProba] AS [DecisionProba] 
FROM [DT_Output]