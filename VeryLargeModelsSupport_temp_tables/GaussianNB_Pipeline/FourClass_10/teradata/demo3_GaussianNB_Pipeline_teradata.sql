-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : GaussianNB_Pipeline
-- Dataset : FourClass_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180416233105_zjwzj0_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233105_zjwzj0_ads_  (
	"KEY" BIGINT, 
	impter_2 FLOAT, 
	impter_3 FLOAT, 
	impter_4 FLOAT, 
	impter_5 FLOAT, 
	impter_6 FLOAT, 
	impter_7 FLOAT, 
	impter_8 FLOAT, 
	impter_9 FLOAT, 
	impter_10 FLOAT, 
	impter_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233105_zjwzj0_ads_ part 2/2. Populate

INSERT INTO tmp_20180416233105_zjwzj0_ads_ ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.003903374463034205 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.6152232215702322 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.042796236914291665 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.7709819558904074 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.43300733624893334 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0424956965794036 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.29809080119845455 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.14672241507251663 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.01746942384662034 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.11507331415602866 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180416233105_7htx08_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233105_7htx08_ads_  (
	"KEY" BIGINT, 
	scaler_2 FLOAT, 
	scaler_3 FLOAT, 
	scaler_4 FLOAT, 
	scaler_5 FLOAT, 
	scaler_6 FLOAT, 
	scaler_7 FLOAT, 
	scaler_8 FLOAT, 
	scaler_9 FLOAT, 
	scaler_10 FLOAT, 
	scaler_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233105_7htx08_ads_ part 2/2. Populate

INSERT INTO tmp_20180416233105_7htx08_ads_ ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.003903374463034) / 0.9795060640184 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.615223221570232) / 1.390080723620524 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.042796236914292) / 1.496268513587076 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.770981955890407) / 2.333356106011174 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.433007336248933) / 1.402975777264875 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.042495696579404) / 0.955809107687323 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.298090801198455) / 1.017013180721433 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.146722415072517) / 1.600798539929603 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.01746942384662) / 1.148729636167142 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.115073314156029) / 0.969091185733622 AS scaler_11 
FROM tmp_20180416233105_zjwzj0_ads_ AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Model deployment code

WITH "RawScores" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -1.491654876777717 + (-0.5 * 2.320981933042071 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - 0.128509361103381) * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - 0.128509361103381)) / 1.6210998953860998) + (-0.5 * 1.440003172328726 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - -0.589485395912359) * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - -0.589485395912359)) / 0.6717467335603663) + (-0.5 * 1.144841499168878 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - -0.148011040711781) * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - -0.148011040711781)) / 0.5000558097742381) + (-0.5 * -0.070657267062727 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - -0.47548298171953) * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - -0.47548298171953)) / 0.14829758219081385) + (-0.5 * 0.966026495803153 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - 0.801905341367292) * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - 0.801905341367292)) / 0.4181769667560316) + (-0.5 * 0.681074440796672 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - -0.199196519222011) * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - -0.199196519222011)) / 0.31449011769377605) + (-0.5 * 0.56551740947667 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - 0.439518212954736) * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - 0.439518212954736)) / 0.2801697367130911) + (-0.5 * 1.571230670406848 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - 0.123400319090763) * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - 0.123400319090763)) / 0.7659438643981343) + (-0.5 * 1.701091245032074 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - 0.403570258391707) * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - 0.403570258391707)) / 0.8721570035153503) + (-0.5 * 2.073462573997818 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - 0.098703207950857) * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - 0.098703207950857)) / 1.2656495992754975) AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -1.38629436111989 + (-0.5 * 1.583775445349261 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - -0.052986994728447) * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - -0.052986994728447)) / 0.7756129794283401) + (-0.5 * 1.246061370310004 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - 0.360555272984455) * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - 0.360555272984455)) / 0.5533217080329645) + (-0.5 * 1.792638824674474 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - 0.794840644564148) * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - 0.794840644564148)) / 0.9557697504631304) + (-0.5 * 1.184448486561368 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - 0.893656658384402) * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - 0.893656658384402)) / 0.5202589659931404) + (-0.5 * 2.223187107319372 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - 0.169874351862195) * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - 0.169874351862195)) / 1.4700700326436593) + (-0.5 * 1.813949062619517 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - -0.278679175011744) * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - -0.278679175011744)) / 0.9763560011593833) + (-0.5 * 1.427298539224616 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - -0.895671880555032) * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - -0.895671880555032)) / 0.6632664214638294) + (-0.5 * 1.021812872599277 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - 0.673858282251232) * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - 0.673858282251232)) / 0.4421685238865845) + (-0.5 * 1.674910236493988 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - -0.204012633199091) * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - -0.204012633199091)) / 0.8496193698936102) + (-0.5 * 1.694673838304048 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - -0.070832662622743) * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - -0.070832662622743)) / 0.8665779380062887) AS "Score_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "Proba_2", -1.38629436111989 + (-0.5 * 1.772880998807283 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - 0.045360401938139) * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - 0.045360401938139)) / 0.9370711483068086) + (-0.5 * 1.958675886894301 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - -0.587677805021288) * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - -0.587677805021288)) / 1.1283978789928049) + (-0.5 * 1.294793368841542 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - -0.740813864090552) * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - -0.740813864090552)) / 0.5809540008917913) + (-0.5 * 1.979638418362196 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - -0.730678839244223) * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - -0.730678839244223)) / 1.1523016211893171) + (-0.5 * 1.593941222922931 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - -0.352378185458216) * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - -0.352378185458216)) / 0.7835379017103893) + (-0.5 * 2.225631539024949 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - 0.233568134705316) * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - 0.233568134705316)) / 1.4736679140370286) + (-0.5 * 1.959091580412214 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - 0.624201944134461) * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - 0.624201944134461)) / 1.1288670441844375) + (-0.5 * 2.259233248602523 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - -0.117254914937402) * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - -0.117254914937402)) / 1.5240270130307754) + (-0.5 * 0.838374885315564 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - 0.219536933928883) * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - 0.219536933928883)) / 0.36806262410464724) + (-0.5 * 1.840283489875267 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - 0.027656495977069) * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - 0.027656495977069)) / 1.002409321226817) AS "Score_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Proba_3", -1.290984181315566 + (-0.5 * 1.516904797020467 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - -0.09821075654794) * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - -0.09821075654794)) / 0.7254433676991361) + (-0.5 * 0.835577093575847 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - 0.688781262143597) * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - 0.688781262143597)) / 0.3670343007233382) + (-0.5 * 1.528423556847709 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - 0.071984687424551) * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - 0.071984687424551)) / 0.7338478875154928) + (-0.5 * 1.221963645800614 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - 0.240869876733998) * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - 0.240869876733998)) / 0.540147288243371) + (-0.5 * 0.758910614860571 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - -0.49019179421322) * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - -0.49019179421322)) / 0.33994669551879164) + (-0.5 * 1.794433107585358 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - 0.203989006914762) * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - 0.203989006914762)) / 0.9574862112407423) + (-0.5 * 1.190917567825462 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - -0.112814959307902) * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - -0.112814959307902)) / 0.5236354731969861) + (-0.5 * 0.960952659581662 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - -0.606966958632288) * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - -0.606966958632288)) / 0.4160605789579687) + (-0.5 * 2.231499662749405 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - -0.344306848438481) * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - -0.344306848438481)) / 1.4823410021744456) + (-0.5 * 1.717744170173738 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - -0.041506109554634) * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - -0.041506109554634)) / 0.8868025761616198) AS "Score_3" 
FROM tmp_20180416233105_7htx08_ads_ AS "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu."class" AS "class", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS "class", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS "class", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS "class", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS "class", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."max_Score" <= union_with_max."Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3") AS "DecisionProba" 
FROM arg_max_cte