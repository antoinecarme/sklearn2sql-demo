-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : LogisticRegression_Pipeline
-- Dataset : FourClass_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180416233149_k2uz8m_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233149_k2uz8m_ads_  (
	"KEY" BIGINT, 
	impter_2 FLOAT, 
	impter_3 FLOAT, 
	impter_4 FLOAT, 
	impter_5 FLOAT, 
	impter_6 FLOAT, 
	impter_7 FLOAT, 
	impter_8 FLOAT, 
	impter_9 FLOAT, 
	impter_10 FLOAT, 
	impter_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233149_k2uz8m_ads_ part 2/2. Populate

INSERT INTO tmp_20180416233149_k2uz8m_ads_ ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.003903374463034205 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.6152232215702322 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.042796236914291665 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.7709819558904074 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.43300733624893334 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0424956965794036 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.29809080119845455 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.14672241507251663 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.01746942384662034 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.11507331415602866 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180416233149_o325nf_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233149_o325nf_ads_  (
	"KEY" BIGINT, 
	scaler_2 FLOAT, 
	scaler_3 FLOAT, 
	scaler_4 FLOAT, 
	scaler_5 FLOAT, 
	scaler_6 FLOAT, 
	scaler_7 FLOAT, 
	scaler_8 FLOAT, 
	scaler_9 FLOAT, 
	scaler_10 FLOAT, 
	scaler_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233149_o325nf_ads_ part 2/2. Populate

INSERT INTO tmp_20180416233149_o325nf_ads_ ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.003903374463034) / 0.9795060640184 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.615223221570232) / 1.390080723620524 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.042796236914292) / 1.496268513587076 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.770981955890407) / 2.333356106011174 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.433007336248933) / 1.402975777264875 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.042495696579404) / 0.955809107687323 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.298090801198455) / 1.017013180721433 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.146722415072517) / 1.600798539929603 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.01746942384662) / 1.148729636167142 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.115073314156029) / 0.969091185733622 AS scaler_11 
FROM tmp_20180416233149_k2uz8m_ads_ AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Model deployment code

WITH linear_input AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11 
FROM tmp_20180416233149_o325nf_ads_ AS "ADS_sca_2_OUT"), 
linear_model_cte AS 
(SELECT linear_input."KEY" AS "KEY", 0.29528535484002 * linear_input.scaler_2 + -0.552675987262323 * linear_input.scaler_3 + -0.149895936255041 * linear_input.scaler_4 + -0.309024988120952 * linear_input.scaler_5 + 0.9661792392905 * linear_input.scaler_6 + -0.316382037151114 * linear_input.scaler_7 + 0.250955126128057 * linear_input.scaler_8 + 0.576383338711538 * linear_input.scaler_9 + 0.567398748127365 * linear_input.scaler_10 + 0.10443684934404 * linear_input.scaler_11 + -1.69000197554308 AS "Score_0", -0.047201699059281 * linear_input.scaler_2 + 0.238687945504582 * linear_input.scaler_3 + 0.471481531304852 * linear_input.scaler_4 + 0.463784916908129 * linear_input.scaler_5 + 0.483969494331467 * linear_input.scaler_6 + -0.057581453557212 * linear_input.scaler_7 + -0.422575903636914 * linear_input.scaler_8 + 0.360598528737288 * linear_input.scaler_9 + -0.30088387779502 * linear_input.scaler_10 + 0.039644623193591 * linear_input.scaler_11 + -1.489182886571369 AS "Score_1", -0.209918903903811 * linear_input.scaler_2 + -0.652133258622162 * linear_input.scaler_3 + -0.966770120529734 * linear_input.scaler_4 + -0.503349164401245 * linear_input.scaler_5 + -0.97667605707769 * linear_input.scaler_6 + 0.009332957669153 * linear_input.scaler_7 + 0.262343135676999 * linear_input.scaler_8 + 0.63268581372207 * linear_input.scaler_9 + 0.479992337695572 * linear_input.scaler_10 + -0.040319348174 * linear_input.scaler_11 + -1.569145872409298 AS "Score_2", -0.267047685438372 * linear_input.scaler_2 + 1.402887118082646 * linear_input.scaler_3 + 0.131612305089028 * linear_input.scaler_4 + 0.340327685485069 * linear_input.scaler_5 + -0.620773611495924 * linear_input.scaler_6 + 0.368307546201463 * linear_input.scaler_7 + -0.026038414457844 * linear_input.scaler_8 + -1.437975216938557 * linear_input.scaler_9 + -0.512175147667885 * linear_input.scaler_10 + -0.090780592589467 * linear_input.scaler_11 + -1.599622942163221 AS "Score_3" 
FROM linear_input), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", (1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_0"), 100.0)))) / (1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_0"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_1"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_2"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_3"), 100.0)))) AS "Proba_0", (1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_1"), 100.0)))) / (1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_0"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_1"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_2"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_3"), 100.0)))) AS "Proba_1", (1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_2"), 100.0)))) / (1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_0"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_1"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_2"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_3"), 100.0)))) AS "Proba_2", (1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_3"), 100.0)))) / (1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_0"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_1"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_2"), 100.0))) + 1.0 / (1.0 + exp(least(greatest(-100.0, -linear_model_cte."Score_3"), 100.0)))) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max."class") AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte