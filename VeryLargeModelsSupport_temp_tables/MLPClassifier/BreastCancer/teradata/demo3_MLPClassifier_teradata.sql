-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : BreastCancer
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180416231720_2gtb0y_hl_1 part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416231720_2gtb0y_hl_1  (
	"KEY" BIGINT, 
	"NEUR_1_1" FLOAT, 
	"NEUR_1_2" FLOAT, 
	"NEUR_1_3" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416231720_2gtb0y_hl_1 part 2/2. Populate

INSERT INTO tmp_20180416231720_2gtb0y_hl_1 ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "U"."KEY", "U"."NEUR_1_1", "U"."NEUR_1_2", "U"."NEUR_1_3" 
FROM (WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS FLOAT) AS "Feature_0", CAST("ADS"."Feature_1" AS FLOAT) AS "Feature_1", CAST("ADS"."Feature_2" AS FLOAT) AS "Feature_2", CAST("ADS"."Feature_3" AS FLOAT) AS "Feature_3", CAST("ADS"."Feature_4" AS FLOAT) AS "Feature_4", CAST("ADS"."Feature_5" AS FLOAT) AS "Feature_5", CAST("ADS"."Feature_6" AS FLOAT) AS "Feature_6", CAST("ADS"."Feature_7" AS FLOAT) AS "Feature_7", CAST("ADS"."Feature_8" AS FLOAT) AS "Feature_8", CAST("ADS"."Feature_9" AS FLOAT) AS "Feature_9", CAST("ADS"."Feature_10" AS FLOAT) AS "Feature_10", CAST("ADS"."Feature_11" AS FLOAT) AS "Feature_11", CAST("ADS"."Feature_12" AS FLOAT) AS "Feature_12", CAST("ADS"."Feature_13" AS FLOAT) AS "Feature_13", CAST("ADS"."Feature_14" AS FLOAT) AS "Feature_14", CAST("ADS"."Feature_15" AS FLOAT) AS "Feature_15", CAST("ADS"."Feature_16" AS FLOAT) AS "Feature_16", CAST("ADS"."Feature_17" AS FLOAT) AS "Feature_17", CAST("ADS"."Feature_18" AS FLOAT) AS "Feature_18", CAST("ADS"."Feature_19" AS FLOAT) AS "Feature_19", CAST("ADS"."Feature_20" AS FLOAT) AS "Feature_20", CAST("ADS"."Feature_21" AS FLOAT) AS "Feature_21", CAST("ADS"."Feature_22" AS FLOAT) AS "Feature_22", CAST("ADS"."Feature_23" AS FLOAT) AS "Feature_23", CAST("ADS"."Feature_24" AS FLOAT) AS "Feature_24", CAST("ADS"."Feature_25" AS FLOAT) AS "Feature_25", CAST("ADS"."Feature_26" AS FLOAT) AS "Feature_26", CAST("ADS"."Feature_27" AS FLOAT) AS "Feature_27", CAST("ADS"."Feature_28" AS FLOAT) AS "Feature_28", CAST("ADS"."Feature_29" AS FLOAT) AS "Feature_29" 
FROM "BreastCancer" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.061982603352846 * "IL"."Feature_0" + -0.272340235116454 * "IL"."Feature_1" + -0.337302800162056 * "IL"."Feature_2" + -0.377223205325801 * "IL"."Feature_3" + 0.160089938662832 * "IL"."Feature_4" + 0.33126178698933 * "IL"."Feature_5" + -0.168060860146823 * "IL"."Feature_6" + -0.034167875643547 * "IL"."Feature_7" + -0.013585552372538 * "IL"."Feature_8" + -0.148225710932173 * "IL"."Feature_9" + -0.199566707874153 * "IL"."Feature_10" + -0.364660087062808 * "IL"."Feature_11" + 0.054696829180746 * "IL"."Feature_12" + 0.32751257035381 * "IL"."Feature_13" + 0.213299141154323 * "IL"."Feature_14" + 0.171956410153836 * "IL"."Feature_15" + -0.105823854967052 * "IL"."Feature_16" + -0.392136410586617 * "IL"."Feature_17" + -0.33927877519522 * "IL"."Feature_18" + -0.106163215045771 * "IL"."Feature_19" + -0.413591098107795 * "IL"."Feature_20" + 0.325176973825531 * "IL"."Feature_21" + 0.214457572291541 * "IL"."Feature_22" + -0.353817646975277 * "IL"."Feature_23" + 0.248174909672975 * "IL"."Feature_24" + -0.007549470343773 * "IL"."Feature_25" + 0.226456992711243 * "IL"."Feature_26" + 0.001515975732731 * "IL"."Feature_27" + -0.249205720850078 * "IL"."Feature_28" + 0.203360667656736 * "IL"."Feature_29" + 0.259260350984076 AS "NEUR_1_1", 0.084825205451421 * "IL"."Feature_0" + 0.008644941845634 * "IL"."Feature_1" + -0.251295303779869 * "IL"."Feature_2" + 0.305569856634776 * "IL"."Feature_3" + 0.119101670918445 * "IL"."Feature_4" + 0.319479809408425 * "IL"."Feature_5" + -0.190426545843559 * "IL"."Feature_6" + -0.407355373874918 * "IL"."Feature_7" + 0.359471497206904 * "IL"."Feature_8" + -0.060219270166546 * "IL"."Feature_9" + -0.260557494069312 * "IL"."Feature_10" + -0.073330795833806 * "IL"."Feature_11" + -0.305999685237634 * "IL"."Feature_12" + 0.228427341613364 * "IL"."Feature_13" + 0.039166593127247 * "IL"."Feature_14" + -0.200206836962298 * "IL"."Feature_15" + 0.12343910709228 * "IL"."Feature_16" + -0.272666350968973 * "IL"."Feature_17" + 0.06809799391714 * "IL"."Feature_18" + 0.263594452406248 * "IL"."Feature_19" + -0.423442482547205 * "IL"."Feature_20" + -0.003568371950069 * "IL"."Feature_21" + -0.298514098130931 * "IL"."Feature_22" + 0.091438164784892 * "IL"."Feature_23" + 0.194638592408419 * "IL"."Feature_24" + -0.066647603276432 * "IL"."Feature_25" + 0.091657955942712 * "IL"."Feature_26" + 0.250496108830723 * "IL"."Feature_27" + -0.048826748457854 * "IL"."Feature_28" + -0.372721401589906 * "IL"."Feature_29" + -0.043245236825671 AS "NEUR_1_2", 0.402633645509382 * "IL"."Feature_0" + -0.278901898955778 * "IL"."Feature_1" + 0.216788070226462 * "IL"."Feature_2" + 0.009866995093818 * "IL"."Feature_3" + -0.272902233376193 * "IL"."Feature_4" + -0.148073733556301 * "IL"."Feature_5" + 0.27265153351628 * "IL"."Feature_6" + -0.255492108972784 * "IL"."Feature_7" + -0.318057352626873 * "IL"."Feature_8" + 0.357095917315609 * "IL"."Feature_9" + -0.005147862704581 * "IL"."Feature_10" + 0.001502924769061 * "IL"."Feature_11" + 0.291007561619827 * "IL"."Feature_12" + -0.250459378289901 * "IL"."Feature_13" + -0.379023161673074 * "IL"."Feature_14" + -0.324410517801777 * "IL"."Feature_15" + 0.08540673807057 * "IL"."Feature_16" + -0.042384076531503 * "IL"."Feature_17" + 0.298835996167326 * "IL"."Feature_18" + -0.048963700383945 * "IL"."Feature_19" + -0.137668151273687 * "IL"."Feature_20" + 0.19321719865027 * "IL"."Feature_21" + -0.435241154500054 * "IL"."Feature_22" + 0.175056581231115 * "IL"."Feature_23" + 0.414755578980649 * "IL"."Feature_24" + 0.093301128468143 * "IL"."Feature_25" + 0.166992353207673 * "IL"."Feature_26" + 0.39899314592529 * "IL"."Feature_27" + 0.141533675897786 * "IL"."Feature_28" + 0.134249894991666 * "IL"."Feature_29" + -0.369974167604811 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(greatest("HL_BA_1"."NEUR_1_1", 0.0) AS FLOAT) AS "NEUR_1_1", CAST(greatest("HL_BA_1"."NEUR_1_2", 0.0) AS FLOAT) AS "NEUR_1_2", CAST(greatest("HL_BA_1"."NEUR_1_3", 0.0) AS FLOAT) AS "NEUR_1_3" 
FROM "HL_BA_1")
 SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "U"

-- Code For temporary table tmp_20180416231720_8yty5r_ol_l part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416231720_8yty5r_ol_l  (
	"KEY" BIGINT, 
	"NEUR_3_1" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416231720_8yty5r_ol_l part 2/2. Populate

INSERT INTO tmp_20180416231720_8yty5r_ol_l ("KEY", "NEUR_3_1") SELECT "U"."KEY", "U"."NEUR_3_1" 
FROM (WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", 0.55700179721743 * "HL_1_relu_1"."NEUR_1_1" + -0.631851209981196 * "HL_1_relu_1"."NEUR_1_2" + -0.602794216350332 * "HL_1_relu_1"."NEUR_1_3" + -0.088584894897019 AS "NEUR_2_1", -0.6117147512994 * "HL_1_relu_1"."NEUR_1_1" + -0.780145564937695 * "HL_1_relu_1"."NEUR_1_2" + -0.203528212741285 * "HL_1_relu_1"."NEUR_1_3" + 0.726167810183951 AS "NEUR_2_2", 0.318166556432532 * "HL_1_relu_1"."NEUR_1_1" + 0.245207445992043 * "HL_1_relu_1"."NEUR_1_2" + -0.855166210103904 * "HL_1_relu_1"."NEUR_1_3" + 0.563923773330481 AS "NEUR_2_3", -0.842190224648725 * "HL_1_relu_1"."NEUR_1_1" + -0.422382209975692 * "HL_1_relu_1"."NEUR_1_2" + 0.198672153050701 * "HL_1_relu_1"."NEUR_1_3" + 0.703329432274723 AS "NEUR_2_4", -0.694808378023772 * "HL_1_relu_1"."NEUR_1_1" + -0.269531648052273 * "HL_1_relu_1"."NEUR_1_2" + -0.661736510015186 * "HL_1_relu_1"."NEUR_1_3" + -0.815750113657602 AS "NEUR_2_5" 
FROM tmp_20180416231720_2gtb0y_hl_1 AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CAST(greatest("HL_BA_2"."NEUR_2_1", 0.0) AS FLOAT) AS "NEUR_2_1", CAST(greatest("HL_BA_2"."NEUR_2_2", 0.0) AS FLOAT) AS "NEUR_2_2", CAST(greatest("HL_BA_2"."NEUR_2_3", 0.0) AS FLOAT) AS "NEUR_2_3", CAST(greatest("HL_BA_2"."NEUR_2_4", 0.0) AS FLOAT) AS "NEUR_2_4", CAST(greatest("HL_BA_2"."NEUR_2_5", 0.0) AS FLOAT) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.178018546456193 * "HL_2_relu"."NEUR_2_1" + -0.137536229531865 * "HL_2_relu"."NEUR_2_2" + 0.811744115312213 * "HL_2_relu"."NEUR_2_3" + -0.015116677783574 * "HL_2_relu"."NEUR_2_4" + 0.379375855321192 * "HL_2_relu"."NEUR_2_5" + 0.611787688080697 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", CAST(1.0 / (1.0 + exp(least(greatest(-100.0, -"OL_BA"."NEUR_3_1"), 100.0))) AS FLOAT) AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_logistic_1"."KEY", "OL_logistic_1"."NEUR_3_1" 
FROM (SELECT "OL_logistic"."KEY" AS "KEY", "OL_logistic"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_logistic") AS "OL_logistic_1") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_logistic_1"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", 1.0 - "OL_logistic_1"."NEUR_3_1" AS "Proba_0", "OL_logistic_1"."NEUR_3_1" AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM tmp_20180416231720_8yty5r_ol_l AS "OL_logistic_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max."class") AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte