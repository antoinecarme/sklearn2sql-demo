-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : FourClass_100
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180416233710_13oml5_hl_1 part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233710_13oml5_hl_1  (
	"KEY" BIGINT, 
	"NEUR_1_1" FLOAT, 
	"NEUR_1_2" FLOAT, 
	"NEUR_1_3" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233710_13oml5_hl_1 part 2/2. Populate

INSERT INTO tmp_20180416233710_13oml5_hl_1 ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "U"."KEY", "U"."NEUR_1_1", "U"."NEUR_1_2", "U"."NEUR_1_3" 
FROM (WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS FLOAT) AS "Feature_0", CAST("ADS"."Feature_1" AS FLOAT) AS "Feature_1", CAST("ADS"."Feature_2" AS FLOAT) AS "Feature_2", CAST("ADS"."Feature_3" AS FLOAT) AS "Feature_3", CAST("ADS"."Feature_4" AS FLOAT) AS "Feature_4", CAST("ADS"."Feature_5" AS FLOAT) AS "Feature_5", CAST("ADS"."Feature_6" AS FLOAT) AS "Feature_6", CAST("ADS"."Feature_7" AS FLOAT) AS "Feature_7", CAST("ADS"."Feature_8" AS FLOAT) AS "Feature_8", CAST("ADS"."Feature_9" AS FLOAT) AS "Feature_9", CAST("ADS"."Feature_10" AS FLOAT) AS "Feature_10", CAST("ADS"."Feature_11" AS FLOAT) AS "Feature_11", CAST("ADS"."Feature_12" AS FLOAT) AS "Feature_12", CAST("ADS"."Feature_13" AS FLOAT) AS "Feature_13", CAST("ADS"."Feature_14" AS FLOAT) AS "Feature_14", CAST("ADS"."Feature_15" AS FLOAT) AS "Feature_15", CAST("ADS"."Feature_16" AS FLOAT) AS "Feature_16", CAST("ADS"."Feature_17" AS FLOAT) AS "Feature_17", CAST("ADS"."Feature_18" AS FLOAT) AS "Feature_18", CAST("ADS"."Feature_19" AS FLOAT) AS "Feature_19", CAST("ADS"."Feature_20" AS FLOAT) AS "Feature_20", CAST("ADS"."Feature_21" AS FLOAT) AS "Feature_21", CAST("ADS"."Feature_22" AS FLOAT) AS "Feature_22", CAST("ADS"."Feature_23" AS FLOAT) AS "Feature_23", CAST("ADS"."Feature_24" AS FLOAT) AS "Feature_24", CAST("ADS"."Feature_25" AS FLOAT) AS "Feature_25", CAST("ADS"."Feature_26" AS FLOAT) AS "Feature_26", CAST("ADS"."Feature_27" AS FLOAT) AS "Feature_27", CAST("ADS"."Feature_28" AS FLOAT) AS "Feature_28", CAST("ADS"."Feature_29" AS FLOAT) AS "Feature_29", CAST("ADS"."Feature_30" AS FLOAT) AS "Feature_30", CAST("ADS"."Feature_31" AS FLOAT) AS "Feature_31", CAST("ADS"."Feature_32" AS FLOAT) AS "Feature_32", CAST("ADS"."Feature_33" AS FLOAT) AS "Feature_33", CAST("ADS"."Feature_34" AS FLOAT) AS "Feature_34", CAST("ADS"."Feature_35" AS FLOAT) AS "Feature_35", CAST("ADS"."Feature_36" AS FLOAT) AS "Feature_36", CAST("ADS"."Feature_37" AS FLOAT) AS "Feature_37", CAST("ADS"."Feature_38" AS FLOAT) AS "Feature_38", CAST("ADS"."Feature_39" AS FLOAT) AS "Feature_39", CAST("ADS"."Feature_40" AS FLOAT) AS "Feature_40", CAST("ADS"."Feature_41" AS FLOAT) AS "Feature_41", CAST("ADS"."Feature_42" AS FLOAT) AS "Feature_42", CAST("ADS"."Feature_43" AS FLOAT) AS "Feature_43", CAST("ADS"."Feature_44" AS FLOAT) AS "Feature_44", CAST("ADS"."Feature_45" AS FLOAT) AS "Feature_45", CAST("ADS"."Feature_46" AS FLOAT) AS "Feature_46", CAST("ADS"."Feature_47" AS FLOAT) AS "Feature_47", CAST("ADS"."Feature_48" AS FLOAT) AS "Feature_48", CAST("ADS"."Feature_49" AS FLOAT) AS "Feature_49", CAST("ADS"."Feature_50" AS FLOAT) AS "Feature_50", CAST("ADS"."Feature_51" AS FLOAT) AS "Feature_51", CAST("ADS"."Feature_52" AS FLOAT) AS "Feature_52", CAST("ADS"."Feature_53" AS FLOAT) AS "Feature_53", CAST("ADS"."Feature_54" AS FLOAT) AS "Feature_54", CAST("ADS"."Feature_55" AS FLOAT) AS "Feature_55", CAST("ADS"."Feature_56" AS FLOAT) AS "Feature_56", CAST("ADS"."Feature_57" AS FLOAT) AS "Feature_57", CAST("ADS"."Feature_58" AS FLOAT) AS "Feature_58", CAST("ADS"."Feature_59" AS FLOAT) AS "Feature_59", CAST("ADS"."Feature_60" AS FLOAT) AS "Feature_60", CAST("ADS"."Feature_61" AS FLOAT) AS "Feature_61", CAST("ADS"."Feature_62" AS FLOAT) AS "Feature_62", CAST("ADS"."Feature_63" AS FLOAT) AS "Feature_63", CAST("ADS"."Feature_64" AS FLOAT) AS "Feature_64", CAST("ADS"."Feature_65" AS FLOAT) AS "Feature_65", CAST("ADS"."Feature_66" AS FLOAT) AS "Feature_66", CAST("ADS"."Feature_67" AS FLOAT) AS "Feature_67", CAST("ADS"."Feature_68" AS FLOAT) AS "Feature_68", CAST("ADS"."Feature_69" AS FLOAT) AS "Feature_69", CAST("ADS"."Feature_70" AS FLOAT) AS "Feature_70", CAST("ADS"."Feature_71" AS FLOAT) AS "Feature_71", CAST("ADS"."Feature_72" AS FLOAT) AS "Feature_72", CAST("ADS"."Feature_73" AS FLOAT) AS "Feature_73", CAST("ADS"."Feature_74" AS FLOAT) AS "Feature_74", CAST("ADS"."Feature_75" AS FLOAT) AS "Feature_75", CAST("ADS"."Feature_76" AS FLOAT) AS "Feature_76", CAST("ADS"."Feature_77" AS FLOAT) AS "Feature_77", CAST("ADS"."Feature_78" AS FLOAT) AS "Feature_78", CAST("ADS"."Feature_79" AS FLOAT) AS "Feature_79", CAST("ADS"."Feature_80" AS FLOAT) AS "Feature_80", CAST("ADS"."Feature_81" AS FLOAT) AS "Feature_81", CAST("ADS"."Feature_82" AS FLOAT) AS "Feature_82", CAST("ADS"."Feature_83" AS FLOAT) AS "Feature_83", CAST("ADS"."Feature_84" AS FLOAT) AS "Feature_84", CAST("ADS"."Feature_85" AS FLOAT) AS "Feature_85", CAST("ADS"."Feature_86" AS FLOAT) AS "Feature_86", CAST("ADS"."Feature_87" AS FLOAT) AS "Feature_87", CAST("ADS"."Feature_88" AS FLOAT) AS "Feature_88", CAST("ADS"."Feature_89" AS FLOAT) AS "Feature_89", CAST("ADS"."Feature_90" AS FLOAT) AS "Feature_90", CAST("ADS"."Feature_91" AS FLOAT) AS "Feature_91", CAST("ADS"."Feature_92" AS FLOAT) AS "Feature_92", CAST("ADS"."Feature_93" AS FLOAT) AS "Feature_93", CAST("ADS"."Feature_94" AS FLOAT) AS "Feature_94", CAST("ADS"."Feature_95" AS FLOAT) AS "Feature_95", CAST("ADS"."Feature_96" AS FLOAT) AS "Feature_96", CAST("ADS"."Feature_97" AS FLOAT) AS "Feature_97", CAST("ADS"."Feature_98" AS FLOAT) AS "Feature_98", CAST("ADS"."Feature_99" AS FLOAT) AS "Feature_99" 
FROM "FourClass_100" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.014328706576971 * "IL"."Feature_0" + -0.278229250184735 * "IL"."Feature_1" + -0.557902456661009 * "IL"."Feature_2" + -0.271934202487813 * "IL"."Feature_3" + 0.655564550592556 * "IL"."Feature_4" + 0.087777195134227 * "IL"."Feature_5" + 0.027821972718344 * "IL"."Feature_6" + -0.136553331730692 * "IL"."Feature_7" + -0.344033275463287 * "IL"."Feature_8" + 0.176423210676642 * "IL"."Feature_9" + -0.337681090291193 * "IL"."Feature_10" + -0.739802267277277 * "IL"."Feature_11" + 0.314735780232939 * "IL"."Feature_12" + 0.615702090348855 * "IL"."Feature_13" + 0.197353532733126 * "IL"."Feature_14" + -0.158052448382379 * "IL"."Feature_15" + 0.410897266126607 * "IL"."Feature_16" + -1.496156952905629 * "IL"."Feature_17" + 0.045469820562124 * "IL"."Feature_18" + 0.508320496961629 * "IL"."Feature_19" + -0.558887261241701 * "IL"."Feature_20" + -0.290572708302739 * "IL"."Feature_21" + 0.466812726083389 * "IL"."Feature_22" + -0.778876844639531 * "IL"."Feature_23" + -0.347900646096771 * "IL"."Feature_24" + 0.791718849706358 * "IL"."Feature_25" + 0.135409090259662 * "IL"."Feature_26" + 0.08697776314823 * "IL"."Feature_27" + -0.261771575667723 * "IL"."Feature_28" + 0.534779607203674 * "IL"."Feature_29" + -0.202403837291621 * "IL"."Feature_30" + 0.385349496067648 * "IL"."Feature_31" + -0.356019123901132 * "IL"."Feature_32" + -0.530556373062118 * "IL"."Feature_33" + 0.173718404752492 * "IL"."Feature_34" + -0.220059313682132 * "IL"."Feature_35" + -0.160043306607369 * "IL"."Feature_36" + -0.370220588758402 * "IL"."Feature_37" + 0.26854247664745 * "IL"."Feature_38" + 0.397014428240376 * "IL"."Feature_39" + -0.311117332097398 * "IL"."Feature_40" + -0.604337171886985 * "IL"."Feature_41" + -0.14396671640852 * "IL"."Feature_42" + 0.364090231213414 * "IL"."Feature_43" + 0.073712059848913 * "IL"."Feature_44" + 0.046492945966401 * "IL"."Feature_45" + 0.285634893476465 * "IL"."Feature_46" + 0.690156133054782 * "IL"."Feature_47" + -0.259900725535736 * "IL"."Feature_48" + 0.353303408237443 * "IL"."Feature_49" + 0.685705391598307 * "IL"."Feature_50" + 0.18030334270218 * "IL"."Feature_51" + 0.193106860406927 * "IL"."Feature_52" + 0.134032859641357 * "IL"."Feature_53" + 0.50360851746833 * "IL"."Feature_54" + -0.328702983548371 * "IL"."Feature_55" + -0.372079362499825 * "IL"."Feature_56" + -0.402161049509309 * "IL"."Feature_57" + -0.427566113180803 * "IL"."Feature_58" + 0.115255255880679 * "IL"."Feature_59" + 0.632998833538697 * "IL"."Feature_60" + 0.032309423921104 * "IL"."Feature_61" + 0.034986943961915 * "IL"."Feature_62" + -0.172798798784903 * "IL"."Feature_63" + -0.7398443951876 * "IL"."Feature_64" + -0.440354829699859 * "IL"."Feature_65" + 0.044922732787289 * "IL"."Feature_66" + 0.436432612360023 * "IL"."Feature_67" + -0.820383412318619 * "IL"."Feature_68" + 0.397591567783111 * "IL"."Feature_69" + 0.102500104340621 * "IL"."Feature_70" + 0.403761987412974 * "IL"."Feature_71" + -0.241734112875409 * "IL"."Feature_72" + -0.016963600004873 * "IL"."Feature_73" + -0.081714459453992 * "IL"."Feature_74" + 0.040572050886617 * "IL"."Feature_75" + -0.432355165008949 * "IL"."Feature_76" + -0.397429532241464 * "IL"."Feature_77" + -0.111338748758604 * "IL"."Feature_78" + 0.401240761620744 * "IL"."Feature_79" + -0.180997251345269 * "IL"."Feature_80" + -0.002736638290721 * "IL"."Feature_81" + -0.677472997973835 * "IL"."Feature_82" + 0.168635000268132 * "IL"."Feature_83" + 0.374958533398052 * "IL"."Feature_84" + -0.744916306850564 * "IL"."Feature_85" + 0.229007739085461 * "IL"."Feature_86" + 0.224856229496142 * "IL"."Feature_87" + -0.484809958120607 * "IL"."Feature_88" + -0.378527408269216 * "IL"."Feature_89" + 0.027669050297055 * "IL"."Feature_90" + 0.078363784754582 * "IL"."Feature_91" + 0.042665955963906 * "IL"."Feature_92" + -0.463955041560517 * "IL"."Feature_93" + 4.5284679351e-05 * "IL"."Feature_94" + 0.086923004795121 * "IL"."Feature_95" + 0.167938968331443 * "IL"."Feature_96" + -0.090496621411794 * "IL"."Feature_97" + 0.074767784278506 * "IL"."Feature_98" + 0.234868068467955 * "IL"."Feature_99" + 0.025600085821707 AS "NEUR_1_1", 0.693816467588264 * "IL"."Feature_0" + -0.464937748663219 * "IL"."Feature_1" + -0.276464393986464 * "IL"."Feature_2" + 0.326010681987486 * "IL"."Feature_3" + -0.70830042573869 * "IL"."Feature_4" + 0.492088210189205 * "IL"."Feature_5" + -0.918506329422732 * "IL"."Feature_6" + 0.034020786089693 * "IL"."Feature_7" + 0.490397502914194 * "IL"."Feature_8" + 0.256740500967673 * "IL"."Feature_9" + -0.635315512688158 * "IL"."Feature_10" + 0.232867294271682 * "IL"."Feature_11" + -0.127759642875564 * "IL"."Feature_12" + 0.485196377823172 * "IL"."Feature_13" + 0.156896535096025 * "IL"."Feature_14" + -0.394990699393547 * "IL"."Feature_15" + -0.180117553229254 * "IL"."Feature_16" + 0.181242947217608 * "IL"."Feature_17" + -0.198362454209724 * "IL"."Feature_18" + -0.099038034082256 * "IL"."Feature_19" + -0.532462366007069 * "IL"."Feature_20" + -0.014829733532914 * "IL"."Feature_21" + -1.081992560657929 * "IL"."Feature_22" + -0.056923091831045 * "IL"."Feature_23" + 0.065640557673876 * "IL"."Feature_24" + 0.295247284591047 * "IL"."Feature_25" + 0.045255991245417 * "IL"."Feature_26" + 0.340823199525613 * "IL"."Feature_27" + 0.196146573049333 * "IL"."Feature_28" + -0.37565646837174 * "IL"."Feature_29" + -0.51045685659982 * "IL"."Feature_30" + 0.086445556976439 * "IL"."Feature_31" + -0.03784983076196 * "IL"."Feature_32" + -0.078259563609695 * "IL"."Feature_33" + -0.823736879722674 * "IL"."Feature_34" + -0.426234329028812 * "IL"."Feature_35" + 0.285597671449402 * "IL"."Feature_36" + 0.367631858624079 * "IL"."Feature_37" + -0.403251989764061 * "IL"."Feature_38" + 0.350080755968778 * "IL"."Feature_39" + 0.131637435051966 * "IL"."Feature_40" + 1.025853957497538 * "IL"."Feature_41" + 0.160951564199228 * "IL"."Feature_42" + -0.438326293361034 * "IL"."Feature_43" + -0.466674908879993 * "IL"."Feature_44" + -0.155914976879938 * "IL"."Feature_45" + 0.0630066921204 * "IL"."Feature_46" + -0.242507704033273 * "IL"."Feature_47" + 0.54490833327645 * "IL"."Feature_48" + -0.46975251908126 * "IL"."Feature_49" + 0.160007859268779 * "IL"."Feature_50" + -0.631327296101121 * "IL"."Feature_51" + -0.636719538143404 * "IL"."Feature_52" + 0.106024832771601 * "IL"."Feature_53" + 0.050058103086054 * "IL"."Feature_54" + 0.289483474243756 * "IL"."Feature_55" + -0.375667810244276 * "IL"."Feature_56" + 0.04845060538391 * "IL"."Feature_57" + 0.238011263222711 * "IL"."Feature_58" + 0.002801985415386 * "IL"."Feature_59" + 0.088740861966084 * "IL"."Feature_60" + -0.066210247569541 * "IL"."Feature_61" + -0.006569852208888 * "IL"."Feature_62" + 0.314628560340149 * "IL"."Feature_63" + 0.92798115249295 * "IL"."Feature_64" + 0.66436139568969 * "IL"."Feature_65" + 0.102280364275322 * "IL"."Feature_66" + 0.068622645668671 * "IL"."Feature_67" + 0.743294711082247 * "IL"."Feature_68" + -0.165359632001421 * "IL"."Feature_69" + 0.115639248901039 * "IL"."Feature_70" + 0.25461876317493 * "IL"."Feature_71" + -0.165668532452971 * "IL"."Feature_72" + 0.546807685787945 * "IL"."Feature_73" + 0.026061005705306 * "IL"."Feature_74" + 0.42689271226397 * "IL"."Feature_75" + 0.767365304193925 * "IL"."Feature_76" + -0.107684431466288 * "IL"."Feature_77" + -0.055385247690106 * "IL"."Feature_78" + 0.654237844033221 * "IL"."Feature_79" + -0.301187683110552 * "IL"."Feature_80" + 0.559079685962252 * "IL"."Feature_81" + 0.011601118808769 * "IL"."Feature_82" + 0.07559792380567 * "IL"."Feature_83" + -0.635119957577426 * "IL"."Feature_84" + -9.6126397963e-05 * "IL"."Feature_85" + -0.336745944665734 * "IL"."Feature_86" + -0.305155730990302 * "IL"."Feature_87" + 0.368821252833575 * "IL"."Feature_88" + -0.120869461340801 * "IL"."Feature_89" + -0.227505118442072 * "IL"."Feature_90" + -0.54032772800074 * "IL"."Feature_91" + 0.626739438628819 * "IL"."Feature_92" + -0.18725692072218 * "IL"."Feature_93" + 0.443947260481744 * "IL"."Feature_94" + -0.566568894110711 * "IL"."Feature_95" + -0.27508322600163 * "IL"."Feature_96" + -1.111806007025929 * "IL"."Feature_97" + 0.334502222107883 * "IL"."Feature_98" + 0.033322802725805 * "IL"."Feature_99" + -0.428292514207995 AS "NEUR_1_2", -0.205104046475064 * "IL"."Feature_0" + 0.16284066960633 * "IL"."Feature_1" + 0.378234796812027 * "IL"."Feature_2" + 0.399167857713455 * "IL"."Feature_3" + -0.408063724982371 * "IL"."Feature_4" + 0.264107935844274 * "IL"."Feature_5" + 0.849629124180107 * "IL"."Feature_6" + -0.152497941026242 * "IL"."Feature_7" + 0.143811518764328 * "IL"."Feature_8" + 0.20134283702151 * "IL"."Feature_9" + 0.070509909203127 * "IL"."Feature_10" + 0.217086594130143 * "IL"."Feature_11" + -0.211467449826877 * "IL"."Feature_12" + -0.342625277301975 * "IL"."Feature_13" + -0.262223259920479 * "IL"."Feature_14" + -1.283837869432612 * "IL"."Feature_15" + 0.343543543453013 * "IL"."Feature_16" + -0.131004123930096 * "IL"."Feature_17" + 0.544311213887644 * "IL"."Feature_18" + -0.020879204679997 * "IL"."Feature_19" + 0.145034954806513 * "IL"."Feature_20" + -0.119784066749785 * "IL"."Feature_21" + 0.211873094564943 * "IL"."Feature_22" + -0.293841286736466 * "IL"."Feature_23" + 0.407908609189024 * "IL"."Feature_24" + 0.027347030074618 * "IL"."Feature_25" + 0.42177974838705 * "IL"."Feature_26" + 0.085555967612635 * "IL"."Feature_27" + -0.530642006336611 * "IL"."Feature_28" + 0.50842328050473 * "IL"."Feature_29" + 0.20944015316826 * "IL"."Feature_30" + 0.253612646366674 * "IL"."Feature_31" + -0.4282793231611 * "IL"."Feature_32" + 0.385793791244498 * "IL"."Feature_33" + -0.528546288314325 * "IL"."Feature_34" + -1.540294255974941 * "IL"."Feature_35" + 0.310130749948361 * "IL"."Feature_36" + 0.388560371655794 * "IL"."Feature_37" + 1.531610567492563 * "IL"."Feature_38" + -0.790034485490577 * "IL"."Feature_39" + -0.976040405048838 * "IL"."Feature_40" + -0.138132552930969 * "IL"."Feature_41" + -0.311100607150154 * "IL"."Feature_42" + 0.56890946224739 * "IL"."Feature_43" + -0.290683390576592 * "IL"."Feature_44" + -0.006342881248073 * "IL"."Feature_45" + 0.314989250006809 * "IL"."Feature_46" + -0.334732535629883 * "IL"."Feature_47" + 0.342723306800966 * "IL"."Feature_48" + 0.092486387404486 * "IL"."Feature_49" + 0.107860267803039 * "IL"."Feature_50" + -0.580481879709092 * "IL"."Feature_51" + -0.421987806750018 * "IL"."Feature_52" + 0.555662141724664 * "IL"."Feature_53" + -0.070221805602074 * "IL"."Feature_54" + 0.050698924889772 * "IL"."Feature_55" + 1.182968564491446 * "IL"."Feature_56" + 0.113889645557658 * "IL"."Feature_57" + -0.145816651725962 * "IL"."Feature_58" + -0.471694925229594 * "IL"."Feature_59" + -0.279181901324233 * "IL"."Feature_60" + -0.873601749034714 * "IL"."Feature_61" + 0.014478569102621 * "IL"."Feature_62" + 0.114880048632112 * "IL"."Feature_63" + -0.322000265334917 * "IL"."Feature_64" + -0.15088707287488 * "IL"."Feature_65" + 0.96639376403294 * "IL"."Feature_66" + 0.43397377450206 * "IL"."Feature_67" + 0.160390712305361 * "IL"."Feature_68" + -0.057789196149305 * "IL"."Feature_69" + -0.403145499998726 * "IL"."Feature_70" + -0.667435544320091 * "IL"."Feature_71" + 0.495426374122001 * "IL"."Feature_72" + 0.162190403212237 * "IL"."Feature_73" + -0.447161426279837 * "IL"."Feature_74" + -0.908604831050165 * "IL"."Feature_75" + 0.429005987843327 * "IL"."Feature_76" + 0.242118468925642 * "IL"."Feature_77" + -0.367979759723726 * "IL"."Feature_78" + 0.307067335904632 * "IL"."Feature_79" + 0.027702217497262 * "IL"."Feature_80" + 0.120915926622673 * "IL"."Feature_81" + 0.167155412084452 * "IL"."Feature_82" + -0.594181998491674 * "IL"."Feature_83" + 0.444434556965083 * "IL"."Feature_84" + 0.379808595817772 * "IL"."Feature_85" + -0.623745373526507 * "IL"."Feature_86" + -0.183193486237001 * "IL"."Feature_87" + 0.172595434713687 * "IL"."Feature_88" + -0.033414647533999 * "IL"."Feature_89" + 0.120679463458104 * "IL"."Feature_90" + -0.249481291776302 * "IL"."Feature_91" + 0.077063962436295 * "IL"."Feature_92" + -0.0239468256514 * "IL"."Feature_93" + 0.55672152856446 * "IL"."Feature_94" + 0.031073813218062 * "IL"."Feature_95" + -0.72295260369116 * "IL"."Feature_96" + 0.696609487398147 * "IL"."Feature_97" + -0.020329786841307 * "IL"."Feature_98" + 0.381108110500925 * "IL"."Feature_99" + -0.037165304990035 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(greatest("HL_BA_1"."NEUR_1_1", 0.0) AS FLOAT) AS "NEUR_1_1", CAST(greatest("HL_BA_1"."NEUR_1_2", 0.0) AS FLOAT) AS "NEUR_1_2", CAST(greatest("HL_BA_1"."NEUR_1_3", 0.0) AS FLOAT) AS "NEUR_1_3" 
FROM "HL_BA_1")
 SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "U"

-- Code For temporary table tmp_20180416233710_uhxe2a_ol_s part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180416233710_uhxe2a_ol_s  (
	"KEY" BIGINT, 
	"NEUR_3_1" FLOAT, 
	"NEUR_3_2" FLOAT, 
	"NEUR_3_3" FLOAT, 
	"NEUR_3_4" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180416233710_uhxe2a_ol_s part 2/2. Populate

INSERT INTO tmp_20180416233710_uhxe2a_ol_s ("KEY", "NEUR_3_1", "NEUR_3_2", "NEUR_3_3", "NEUR_3_4") SELECT "U"."KEY", "U"."NEUR_3_1", "U"."NEUR_3_2", "U"."NEUR_3_3", "U"."NEUR_3_4" 
FROM (WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", -0.787176167548041 * "HL_1_relu_1"."NEUR_1_1" + 0.499242299727235 * "HL_1_relu_1"."NEUR_1_2" + 1.306194468359156 * "HL_1_relu_1"."NEUR_1_3" + -0.876342857776534 AS "NEUR_2_1", -0.737873051423271 * "HL_1_relu_1"."NEUR_1_1" + 0.017288746851914 * "HL_1_relu_1"."NEUR_1_2" + -0.664529474373471 * "HL_1_relu_1"."NEUR_1_3" + 0.447383174603667 AS "NEUR_2_2", -1.591314503163161 * "HL_1_relu_1"."NEUR_1_1" + 1.780085950665901 * "HL_1_relu_1"."NEUR_1_2" + 0.175993681334535 * "HL_1_relu_1"."NEUR_1_3" + -0.382644301834934 AS "NEUR_2_3", -0.807828986682962 * "HL_1_relu_1"."NEUR_1_1" + -0.016887612276829 * "HL_1_relu_1"."NEUR_1_2" + -0.740127577117089 * "HL_1_relu_1"."NEUR_1_3" + 1.352484687525165 AS "NEUR_2_4", -0.609344750023257 * "HL_1_relu_1"."NEUR_1_1" + -0.37766721934345 * "HL_1_relu_1"."NEUR_1_2" + -0.672999402943057 * "HL_1_relu_1"."NEUR_1_3" + -0.018078316226986 AS "NEUR_2_5" 
FROM tmp_20180416233710_13oml5_hl_1 AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CAST(greatest("HL_BA_2"."NEUR_2_1", 0.0) AS FLOAT) AS "NEUR_2_1", CAST(greatest("HL_BA_2"."NEUR_2_2", 0.0) AS FLOAT) AS "NEUR_2_2", CAST(greatest("HL_BA_2"."NEUR_2_3", 0.0) AS FLOAT) AS "NEUR_2_3", CAST(greatest("HL_BA_2"."NEUR_2_4", 0.0) AS FLOAT) AS "NEUR_2_4", CAST(greatest("HL_BA_2"."NEUR_2_5", 0.0) AS FLOAT) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -1.345102862046061 * "HL_2_relu"."NEUR_2_1" + -0.643987434614075 * "HL_2_relu"."NEUR_2_2" + -1.912751509895332 * "HL_2_relu"."NEUR_2_3" + -0.040308214156078 * "HL_2_relu"."NEUR_2_4" + 0.589886994439444 * "HL_2_relu"."NEUR_2_5" + 1.110150521830317 AS "NEUR_3_1", 0.736950415053374 * "HL_2_relu"."NEUR_2_1" + -0.063011893999461 * "HL_2_relu"."NEUR_2_2" + -0.729833722432938 * "HL_2_relu"."NEUR_2_3" + -0.413925638556405 * "HL_2_relu"."NEUR_2_4" + 0.396103109488259 * "HL_2_relu"."NEUR_2_5" + 0.396893789838698 AS "NEUR_3_2", 0.687238921710384 * "HL_2_relu"."NEUR_2_1" + 0.285194083656727 * "HL_2_relu"."NEUR_2_2" + 0.906454768639134 * "HL_2_relu"."NEUR_2_3" + -0.948315726609259 * "HL_2_relu"."NEUR_2_4" + 0.663504610119899 * "HL_2_relu"."NEUR_2_5" + -1.338987425950608 AS "NEUR_3_3", 0.537187016031998 * "HL_2_relu"."NEUR_2_1" + 0.786458229818764 * "HL_2_relu"."NEUR_2_2" + 0.944109012516611 * "HL_2_relu"."NEUR_2_3" + 1.126780755432215 * "HL_2_relu"."NEUR_2_4" + -0.485525647358942 * "HL_2_relu"."NEUR_2_5" + -1.485507105372623 AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", CAST("OL_BA"."NEUR_3_1" AS FLOAT) AS "NEUR_3_1", CAST("OL_BA"."NEUR_3_2" AS FLOAT) AS "NEUR_3_2", CAST("OL_BA"."NEUR_3_3" AS FLOAT) AS "NEUR_3_3", CAST("OL_BA"."NEUR_3_4" AS FLOAT) AS "NEUR_3_4" 
FROM "OL_BA")
 SELECT "OL_softmax_1"."KEY", "OL_softmax_1"."NEUR_3_1", "OL_softmax_1"."NEUR_3_2", "OL_softmax_1"."NEUR_3_3", "OL_softmax_1"."NEUR_3_4" 
FROM (SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_softmax") AS "OL_softmax_1") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "Score_0", "OL_softmax_1"."NEUR_3_2" AS "Score_1", "OL_softmax_1"."NEUR_3_3" AS "Score_2", "OL_softmax_1"."NEUR_3_4" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM tmp_20180416233710_uhxe2a_ol_s AS "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu."class" AS "class", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS "class", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS "class", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS "class", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS "class", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3") AS "DecisionProba" 
FROM arg_max_cte