-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPRegressor_Pipeline
-- Dataset : RandomReg_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180417011658_vefbe0_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180417011658_vefbe0_ads_  (
	"KEY" BIGINT, 
	impter_2 FLOAT, 
	impter_3 FLOAT, 
	impter_4 FLOAT, 
	impter_5 FLOAT, 
	impter_6 FLOAT, 
	impter_7 FLOAT, 
	impter_8 FLOAT, 
	impter_9 FLOAT, 
	impter_10 FLOAT, 
	impter_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180417011658_vefbe0_ads_ part 2/2. Populate

INSERT INTO tmp_20180417011658_vefbe0_ads_ ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.16680947298137394 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.16351271994443456 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.19149292241003152 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.058384844753055345 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.09933205162122274 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.21293121660488037 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.047865568690029614 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.05078698959084227 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.1913199225908187 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.19940405677473352 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "RandomReg_10" AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180417011658_464kyz_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180417011658_464kyz_ads_  (
	"KEY" BIGINT, 
	scaler_2 FLOAT, 
	scaler_3 FLOAT, 
	scaler_4 FLOAT, 
	scaler_5 FLOAT, 
	scaler_6 FLOAT, 
	scaler_7 FLOAT, 
	scaler_8 FLOAT, 
	scaler_9 FLOAT, 
	scaler_10 FLOAT, 
	scaler_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180417011658_464kyz_ads_ part 2/2. Populate

INSERT INTO tmp_20180417011658_464kyz_ads_ ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.166809472981374) / 1.028983599704731 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - -0.163512719944435) / 0.991581253504681 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.191492922410032) / 0.932114762914776 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.058384844753055) / 1.08557293295068 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.099332051621223) / 1.074390441288283 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.21293121660488) / 0.935807438188625 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.04786556869003) / 1.136357409061339 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.050786989590842) / 0.972545746009845 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.191319922590819) / 1.141597467793656 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.199404056774734) / 0.882245682091319 AS scaler_11 
FROM tmp_20180417011658_vefbe0_ads_ AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Code For temporary table tmp_20180417011658_wu7zaa_hl_1 part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180417011658_wu7zaa_hl_1  (
	"KEY" BIGINT, 
	"NEUR_1_1" FLOAT, 
	"NEUR_1_2" FLOAT, 
	"NEUR_1_3" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180417011658_wu7zaa_hl_1 part 2/2. Populate

INSERT INTO tmp_20180417011658_wu7zaa_hl_1 ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "U"."KEY", "U"."NEUR_1_1", "U"."NEUR_1_2", "U"."NEUR_1_3" 
FROM (WITH "IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11 
FROM tmp_20180417011658_464kyz_ads_ AS "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -1.265262838384639 * "IL".scaler_2 + -2.668180464330116 * "IL".scaler_3 + -3.158237912064006 * "IL".scaler_4 + -1.33854818885512 * "IL".scaler_5 + -2.057765548628674 * "IL".scaler_6 + -2.84417541907169 * "IL".scaler_7 + -1.379265067181442 * "IL".scaler_8 + -1.411481658802069 * "IL".scaler_9 + -3.356484043999449 * "IL".scaler_10 + -1.917243770264228 * "IL".scaler_11 + -0.649728152587234 AS "NEUR_1_1", -0.041332851423886 * "IL".scaler_2 + -0.949721922508506 * "IL".scaler_3 + -1.510806887744057 * "IL".scaler_4 + 0.607253118130005 * "IL".scaler_5 + -0.105302069350983 * "IL".scaler_6 + -0.016259353825251 * "IL".scaler_7 + -0.686702996744942 * "IL".scaler_8 + -0.659594957728415 * "IL".scaler_9 + -0.421846267721271 * "IL".scaler_10 + -0.446347841509293 * "IL".scaler_11 + -0.7720217085016 AS "NEUR_1_2", 1.714626878851648 * "IL".scaler_2 + 3.615819646165203 * "IL".scaler_3 + 4.279843760109578 * "IL".scaler_4 + 1.814037775149173 * "IL".scaler_5 + 2.78865104928233 * "IL".scaler_6 + 3.854275947903176 * "IL".scaler_7 + 1.869068036153398 * "IL".scaler_8 + 1.912744355612302 * "IL".scaler_9 + 4.548565544128607 * "IL".scaler_10 + 2.598208870717786 * "IL".scaler_11 + 1.097527009600231 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(greatest("HL_BA_1"."NEUR_1_1", 0.0) AS FLOAT) AS "NEUR_1_1", CAST(greatest("HL_BA_1"."NEUR_1_2", 0.0) AS FLOAT) AS "NEUR_1_2", CAST(greatest("HL_BA_1"."NEUR_1_3", 0.0) AS FLOAT) AS "NEUR_1_3" 
FROM "HL_BA_1")
 SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "U"

-- Code For temporary table tmp_20180417011658_2r4tch_ol_i part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180417011658_2r4tch_ol_i  (
	"KEY" BIGINT, 
	"NEUR_3_1" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180417011658_2r4tch_ol_i part 2/2. Populate

INSERT INTO tmp_20180417011658_2r4tch_ol_i ("KEY", "NEUR_3_1") SELECT "U"."KEY", "U"."NEUR_3_1" 
FROM (WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", -0.741714792318346 * "HL_1_relu_1"."NEUR_1_1" + 0.440055458908202 * "HL_1_relu_1"."NEUR_1_2" + 0.430052254270289 * "HL_1_relu_1"."NEUR_1_3" + -0.254512596532487 AS "NEUR_2_1", 4.995645153506303 * "HL_1_relu_1"."NEUR_1_1" + 8.207578353e-06 * "HL_1_relu_1"."NEUR_1_2" + -0.506498415217461 * "HL_1_relu_1"."NEUR_1_3" + -0.672026054695173 AS "NEUR_2_2", -1.99638740106185 * "HL_1_relu_1"."NEUR_1_1" + -1.016601235410726 * "HL_1_relu_1"."NEUR_1_2" + 4.959397453629041 * "HL_1_relu_1"."NEUR_1_3" + -0.162795274679575 AS "NEUR_2_3", -2.246948908540948 * "HL_1_relu_1"."NEUR_1_1" + -0.504740098649541 * "HL_1_relu_1"."NEUR_1_2" + -0.406629621969914 * "HL_1_relu_1"."NEUR_1_3" + -1.106754442995298 AS "NEUR_2_4", -0.632700414721291 * "HL_1_relu_1"."NEUR_1_1" + 0.552007705104472 * "HL_1_relu_1"."NEUR_1_2" + -0.590170837065246 * "HL_1_relu_1"."NEUR_1_3" + -0.480908036421287 AS "NEUR_2_5" 
FROM tmp_20180417011658_wu7zaa_hl_1 AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CAST(greatest("HL_BA_2"."NEUR_2_1", 0.0) AS FLOAT) AS "NEUR_2_1", CAST(greatest("HL_BA_2"."NEUR_2_2", 0.0) AS FLOAT) AS "NEUR_2_2", CAST(greatest("HL_BA_2"."NEUR_2_3", 0.0) AS FLOAT) AS "NEUR_2_3", CAST(greatest("HL_BA_2"."NEUR_2_4", 0.0) AS FLOAT) AS "NEUR_2_4", CAST(greatest("HL_BA_2"."NEUR_2_5", 0.0) AS FLOAT) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.175779371682193 * "HL_2_relu"."NEUR_2_1" + -5.590583669878125 * "HL_2_relu"."NEUR_2_2" + 4.140366763848186 * "HL_2_relu"."NEUR_2_3" + 0.679715195707471 * "HL_2_relu"."NEUR_2_4" + -0.298931698269003 * "HL_2_relu"."NEUR_2_5" + 4.502809328939574 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", CAST("OL_BA"."NEUR_3_1" AS FLOAT) AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity_1"."KEY", "OL_identity_1"."NEUR_3_1" 
FROM (SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_identity") AS "OL_identity_1") AS "U"

-- Model deployment code

SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_3_1" AS "Estimator" 
FROM tmp_20180417011658_2r4tch_ol_i AS "OL_identity_1"