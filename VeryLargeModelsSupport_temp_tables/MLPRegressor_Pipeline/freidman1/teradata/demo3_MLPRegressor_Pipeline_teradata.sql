-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPRegressor_Pipeline
-- Dataset : freidman1
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180417035145_bh8sem_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180417035145_bh8sem_ads_  (
	"KEY" BIGINT, 
	impter_2 FLOAT, 
	impter_3 FLOAT, 
	impter_4 FLOAT, 
	impter_5 FLOAT, 
	impter_6 FLOAT, 
	impter_7 FLOAT, 
	impter_8 FLOAT, 
	impter_9 FLOAT, 
	impter_10 FLOAT, 
	impter_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180417035145_bh8sem_ads_ part 2/2. Populate

INSERT INTO tmp_20180417035145_bh8sem_ads_ ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.5629846484809591 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.45606442423375926 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.47113817481474773 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.533968020094518 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.4780936262373869 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.5682849224172329 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.47914374714280494 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.4594152477223205 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.4901106996809651 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.5378806933707533 ELSE "ADS"."Feature_9" END AS impter_11 
FROM freidman1 AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180417035145_gp3vpr_ads_ part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180417035145_gp3vpr_ads_  (
	"KEY" BIGINT, 
	scaler_2 FLOAT, 
	scaler_3 FLOAT, 
	scaler_4 FLOAT, 
	scaler_5 FLOAT, 
	scaler_6 FLOAT, 
	scaler_7 FLOAT, 
	scaler_8 FLOAT, 
	scaler_9 FLOAT, 
	scaler_10 FLOAT, 
	scaler_11 FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180417035145_gp3vpr_ads_ part 2/2. Populate

INSERT INTO tmp_20180417035145_gp3vpr_ads_ ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.562984648480959) / 0.258371468339634 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.456064424233759) / 0.28787217307127 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.471138174814748) / 0.310921679155305 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.533968020094518) / 0.282619986740028 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.478093626237387) / 0.286140491317745 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.568284922417233) / 0.297674081064517 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.479143747142805) / 0.273531497143158 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.45941524772232) / 0.28721149346999 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.490110699680965) / 0.27904867173227 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.537880693370753) / 0.295819229654319 AS scaler_11 
FROM tmp_20180417035145_bh8sem_ads_ AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Code For temporary table tmp_20180417035145_kkb0b0_hl_1 part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180417035145_kkb0b0_hl_1  (
	"KEY" BIGINT, 
	"NEUR_1_1" FLOAT, 
	"NEUR_1_2" FLOAT, 
	"NEUR_1_3" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180417035145_kkb0b0_hl_1 part 2/2. Populate

INSERT INTO tmp_20180417035145_kkb0b0_hl_1 ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "U"."KEY", "U"."NEUR_1_1", "U"."NEUR_1_2", "U"."NEUR_1_3" 
FROM (WITH "IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11 
FROM tmp_20180417035145_gp3vpr_ads_ AS "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.567241775700364 * "IL".scaler_2 + 0.505779678962974 * "IL".scaler_3 + -0.849867916464449 * "IL".scaler_4 + -0.346287071915524 * "IL".scaler_5 + 0.73199996039292 * "IL".scaler_6 + 0.978724530263257 * "IL".scaler_7 + -0.742740310138656 * "IL".scaler_8 + 0.66601615636148 * "IL".scaler_9 + 0.194425066133763 * "IL".scaler_10 + -0.12890055432034 * "IL".scaler_11 + 0.34530574847477 AS "NEUR_1_1", 0.401919970619629 * "IL".scaler_2 + 0.320788691656575 * "IL".scaler_3 + -0.502877599278676 * "IL".scaler_4 + -0.299331315280806 * "IL".scaler_5 + 0.872677621668898 * "IL".scaler_6 + -0.346376933988543 * "IL".scaler_7 + -0.595826705717408 * "IL".scaler_8 + -0.683856113569104 * "IL".scaler_9 + 0.677174639830388 * "IL".scaler_10 + 0.218873565904166 * "IL".scaler_11 + -1.195307175610732 AS "NEUR_1_2", 0.268625462529485 * "IL".scaler_2 + 0.583012407708606 * "IL".scaler_3 + 0.338845784350408 * "IL".scaler_4 + 0.805903675493168 * "IL".scaler_5 + 0.105901491471703 * "IL".scaler_6 + -0.259558665209035 * "IL".scaler_7 + 0.150335624801316 * "IL".scaler_8 + 0.006808924516459 * "IL".scaler_9 + -0.10748228978945 * "IL".scaler_10 + -0.153462819999432 * "IL".scaler_11 + 1.544472791121266 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CAST(greatest("HL_BA_1"."NEUR_1_1", 0.0) AS FLOAT) AS "NEUR_1_1", CAST(greatest("HL_BA_1"."NEUR_1_2", 0.0) AS FLOAT) AS "NEUR_1_2", CAST(greatest("HL_BA_1"."NEUR_1_3", 0.0) AS FLOAT) AS "NEUR_1_3" 
FROM "HL_BA_1")
 SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "U"

-- Code For temporary table tmp_20180417035145_ptvebj_ol_i part 1/2. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180417035145_ptvebj_ol_i  (
	"KEY" BIGINT, 
	"NEUR_3_1" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180417035145_ptvebj_ol_i part 2/2. Populate

INSERT INTO tmp_20180417035145_ptvebj_ol_i ("KEY", "NEUR_3_1") SELECT "U"."KEY", "U"."NEUR_3_1" 
FROM (WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", -0.759500339544179 * "HL_1_relu_1"."NEUR_1_1" + 0.528025674330556 * "HL_1_relu_1"."NEUR_1_2" + 0.05395390841629 * "HL_1_relu_1"."NEUR_1_3" + -0.227663489469582 AS "NEUR_2_1", -0.758603633844069 * "HL_1_relu_1"."NEUR_1_1" + -0.32193110959003 * "HL_1_relu_1"."NEUR_1_2" + -0.887424755524296 * "HL_1_relu_1"."NEUR_1_3" + -1.475269923152344 AS "NEUR_2_2", 0.775239958882482 * "HL_1_relu_1"."NEUR_1_1" + 1.533634014206331 * "HL_1_relu_1"."NEUR_1_2" + 1.9994012931796 * "HL_1_relu_1"."NEUR_1_3" + 0.830362556528088 AS "NEUR_2_3", 0.111089492526659 * "HL_1_relu_1"."NEUR_1_1" + -0.50473873033059 * "HL_1_relu_1"."NEUR_1_2" + -0.406628519622343 * "HL_1_relu_1"."NEUR_1_3" + -0.796433042433614 AS "NEUR_2_4", -0.638103709568403 * "HL_1_relu_1"."NEUR_1_1" + 0.31075163176964 * "HL_1_relu_1"."NEUR_1_2" + -0.660792834217789 * "HL_1_relu_1"."NEUR_1_3" + -0.613817802069197 AS "NEUR_2_5" 
FROM tmp_20180417035145_kkb0b0_hl_1 AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CAST(greatest("HL_BA_2"."NEUR_2_1", 0.0) AS FLOAT) AS "NEUR_2_1", CAST(greatest("HL_BA_2"."NEUR_2_2", 0.0) AS FLOAT) AS "NEUR_2_2", CAST(greatest("HL_BA_2"."NEUR_2_3", 0.0) AS FLOAT) AS "NEUR_2_3", CAST(greatest("HL_BA_2"."NEUR_2_4", 0.0) AS FLOAT) AS "NEUR_2_4", CAST(greatest("HL_BA_2"."NEUR_2_5", 0.0) AS FLOAT) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.215369647917113 * "HL_2_relu"."NEUR_2_1" + 0.259622540935222 * "HL_2_relu"."NEUR_2_2" + 2.027453178689807 * "HL_2_relu"."NEUR_2_3" + 0.70083642121971 * "HL_2_relu"."NEUR_2_4" + -0.216020546381801 * "HL_2_relu"."NEUR_2_5" + 5.184786172736181 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", CAST("OL_BA"."NEUR_3_1" AS FLOAT) AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity_1"."KEY", "OL_identity_1"."NEUR_3_1" 
FROM (SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_identity") AS "OL_identity_1") AS "U"

-- Model deployment code

SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_3_1" AS "Estimator" 
FROM tmp_20180417035145_ptvebj_ol_i AS "OL_identity_1"