-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : RidgeClassifier_Pipeline
-- Dataset : iris_str_tgt
-- Database : mssql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table ##TMP_20180417051131_RVQA4O_ADS_imp_1_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180417051131_RVQA4O_ADS_imp_1_OUT (
	[KEY] BIGINT NULL, 
	imputer_output_2 FLOAT(53) NULL, 
	imputer_output_3 FLOAT(53) NULL, 
	imputer_output_4 FLOAT(53) NULL, 
	imputer_output_5 FLOAT(53) NULL
)



-- Code For temporary table ##TMP_20180417051131_RVQA4O_ADS_imp_1_OUT part 2/2. Populate

INSERT INTO ##TMP_20180417051131_RVQA4O_ADS_imp_1_OUT ([KEY], imputer_output_2, imputer_output_3, imputer_output_4, imputer_output_5) SELECT [ADS_imp_1_OUT].[KEY], [ADS_imp_1_OUT].imputer_output_2, [ADS_imp_1_OUT].imputer_output_3, [ADS_imp_1_OUT].imputer_output_4, [ADS_imp_1_OUT].imputer_output_5 
FROM (SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 5.8474999999999975 ELSE [ADS].[Feature_0] END AS imputer_output_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 3.0366666666666657 ELSE [ADS].[Feature_1] END AS imputer_output_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 3.8450000000000006 ELSE [ADS].[Feature_2] END AS imputer_output_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 1.245 ELSE [ADS].[Feature_3] END AS imputer_output_5 
FROM iris_str_tgt AS [ADS]) AS [ADS_imp_1_OUT]

-- Code For temporary table ##TMP_20180417051131_1YF4E8_ADS_sca_2_OUT part 1/2. Create 


CREATE TABLE ##TMP_20180417051131_1YF4E8_ADS_sca_2_OUT (
	[KEY] BIGINT NULL, 
	scaler_output_2 FLOAT NULL, 
	scaler_output_3 FLOAT NULL, 
	scaler_output_4 FLOAT NULL, 
	scaler_output_5 FLOAT NULL
)



-- Code For temporary table ##TMP_20180417051131_1YF4E8_ADS_sca_2_OUT part 2/2. Populate

INSERT INTO ##TMP_20180417051131_1YF4E8_ADS_sca_2_OUT ([KEY], scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) SELECT [ADS_sca_2_OUT].[KEY], [ADS_sca_2_OUT].scaler_output_2, [ADS_sca_2_OUT].scaler_output_3, [ADS_sca_2_OUT].scaler_output_4, [ADS_sca_2_OUT].scaler_output_5 
FROM (SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].imputer_output_2 AS FLOAT(53)) - 5.8474999999999975) / 0.827039146594646 AS scaler_output_2, (CAST([ADS_imp_1_OUT].imputer_output_3 AS FLOAT(53)) - 3.0366666666666657) / 0.43625935201691934 AS scaler_output_3, (CAST([ADS_imp_1_OUT].imputer_output_4 AS FLOAT(53)) - 3.8450000000000006) / 1.709817241695732 AS scaler_output_4, (CAST([ADS_imp_1_OUT].imputer_output_5 AS FLOAT(53)) - 1.245) / 0.7498722113355939 AS scaler_output_5 
FROM ##TMP_20180417051131_RVQA4O_ADS_imp_1_OUT AS [ADS_imp_1_OUT]) AS [ADS_sca_2_OUT]

-- Model deployment code

WITH linear_input AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CAST([ADS_sca_2_OUT].scaler_output_2 AS FLOAT(53)) AS scaler_output_2, CAST([ADS_sca_2_OUT].scaler_output_3 AS FLOAT(53)) AS scaler_output_3, CAST([ADS_sca_2_OUT].scaler_output_4 AS FLOAT(53)) AS scaler_output_4, CAST([ADS_sca_2_OUT].scaler_output_5 AS FLOAT(53)) AS scaler_output_5 
FROM ##TMP_20180417051131_1YF4E8_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
linear_model_cte AS 
(SELECT linear_input.[KEY] AS [KEY], 0.04902526586186135 * linear_input.scaler_output_2 + 0.23258226657287756 * linear_input.scaler_output_3 + -0.6617920365460979 * linear_input.scaler_output_4 + -0.13957440677755487 * linear_input.scaler_output_5 + -0.38333333333333425 AS [Score_CLASS_0], 0.0886306707385939 * linear_input.scaler_output_2 + -0.4115503870698435 * linear_input.scaler_output_3 + 0.4660812728575237 * linear_input.scaler_output_4 + -0.5763815228752289 * linear_input.scaler_output_5 + -0.33333333333333265 AS [Score_CLASS_1], -0.13765593660045333 * linear_input.scaler_output_2 + 0.17896812049696517 * linear_input.scaler_output_3 + 0.19571076368857368 * linear_input.scaler_output_4 + 0.7159559296527818 * linear_input.scaler_output_5 + -0.28333333333333305 AS [Score_CLASS_2] 
FROM linear_input), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_CLASS_0] AS [Score_CLASS_0], linear_model_cte.[Score_CLASS_1] AS [Score_CLASS_1], linear_model_cte.[Score_CLASS_2] AS [Score_CLASS_2], CAST(NULL AS FLOAT(53)) AS [Proba_CLASS_0], CAST(NULL AS FLOAT(53)) AS [Proba_CLASS_1], CAST(NULL AS FLOAT(53)) AS [Proba_CLASS_2], CAST(NULL AS FLOAT(53)) AS [LogProba_CLASS_0], CAST(NULL AS FLOAT(53)) AS [LogProba_CLASS_1], CAST(NULL AS FLOAT(53)) AS [LogProba_CLASS_2], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 'CLASS_0' AS class, orig_cte.[LogProba_CLASS_0] AS [LogProba], orig_cte.[Proba_CLASS_0] AS [Proba], orig_cte.[Score_CLASS_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 'CLASS_1' AS class, orig_cte.[LogProba_CLASS_1] AS [LogProba], orig_cte.[Proba_CLASS_1] AS [Proba], orig_cte.[Score_CLASS_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 'CLASS_2' AS class, orig_cte.[LogProba_CLASS_2] AS [LogProba], orig_cte.[Proba_CLASS_2] AS [Proba], orig_cte.[Score_CLASS_2] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_CLASS_0] AS [Score_CLASS_0], orig_cte.[Score_CLASS_1] AS [Score_CLASS_1], orig_cte.[Score_CLASS_2] AS [Score_CLASS_2], orig_cte.[Proba_CLASS_0] AS [Proba_CLASS_0], orig_cte.[Proba_CLASS_1] AS [Proba_CLASS_1], orig_cte.[Proba_CLASS_2] AS [Proba_CLASS_2], orig_cte.[LogProba_CLASS_0] AS [LogProba_CLASS_0], orig_cte.[LogProba_CLASS_1] AS [LogProba_CLASS_1], orig_cte.[LogProba_CLASS_2] AS [LogProba_CLASS_2], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_CLASS_0] AS [Score_CLASS_0], score_max.[Score_CLASS_1] AS [Score_CLASS_1], score_max.[Score_CLASS_2] AS [Score_CLASS_2], score_max.[Proba_CLASS_0] AS [Proba_CLASS_0], score_max.[Proba_CLASS_1] AS [Proba_CLASS_1], score_max.[Proba_CLASS_2] AS [Proba_CLASS_2], score_max.[LogProba_CLASS_0] AS [LogProba_CLASS_0], score_max.[LogProba_CLASS_1] AS [LogProba_CLASS_1], score_max.[LogProba_CLASS_2] AS [LogProba_CLASS_2], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_CLASS_0] AS [Score_CLASS_0], score_max.[Score_CLASS_1] AS [Score_CLASS_1], score_max.[Score_CLASS_2] AS [Score_CLASS_2], score_max.[Proba_CLASS_0] AS [Proba_CLASS_0], score_max.[Proba_CLASS_1] AS [Proba_CLASS_1], score_max.[Proba_CLASS_2] AS [Proba_CLASS_2], score_max.[LogProba_CLASS_0] AS [LogProba_CLASS_0], score_max.[LogProba_CLASS_1] AS [LogProba_CLASS_1], score_max.[LogProba_CLASS_2] AS [LogProba_CLASS_2], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] <= union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_max.[KEY] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_CLASS_0] AS [Score_CLASS_0], arg_max_cte.[Score_CLASS_1] AS [Score_CLASS_1], arg_max_cte.[Score_CLASS_2] AS [Score_CLASS_2], arg_max_cte.[Proba_CLASS_0] AS [Proba_CLASS_0], arg_max_cte.[Proba_CLASS_1] AS [Proba_CLASS_1], arg_max_cte.[Proba_CLASS_2] AS [Proba_CLASS_2], CASE WHEN (arg_max_cte.[Proba_CLASS_0] IS NULL OR arg_max_cte.[Proba_CLASS_0] > 0.0) THEN log(arg_max_cte.[Proba_CLASS_0]) ELSE -1.79769313486231e+308 END AS [LogProba_CLASS_0], CASE WHEN (arg_max_cte.[Proba_CLASS_1] IS NULL OR arg_max_cte.[Proba_CLASS_1] > 0.0) THEN log(arg_max_cte.[Proba_CLASS_1]) ELSE -1.79769313486231e+308 END AS [LogProba_CLASS_1], CASE WHEN (arg_max_cte.[Proba_CLASS_2] IS NULL OR arg_max_cte.[Proba_CLASS_2] > 0.0) THEN log(arg_max_cte.[Proba_CLASS_2]) ELSE -1.79769313486231e+308 END AS [LogProba_CLASS_2], arg_max_cte.[arg_max_Score] AS [Decision], CASE WHEN (arg_max_cte.[arg_max_Score] = 'CLASS_0') THEN arg_max_cte.[Proba_CLASS_0] WHEN (arg_max_cte.[arg_max_Score] = 'CLASS_1') THEN arg_max_cte.[Proba_CLASS_1] WHEN (arg_max_cte.[arg_max_Score] = 'CLASS_2') THEN arg_max_cte.[Proba_CLASS_2] END AS [DecisionProba] 
FROM arg_max_cte