-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : LogisticRegression
-- Dataset : FourClass_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Model deployment code

WITH linear_input AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE PRECISION) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE PRECISION) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE PRECISION) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE PRECISION) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE PRECISION) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE PRECISION) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE PRECISION) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE PRECISION) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE PRECISION) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE PRECISION) AS "Feature_9" 
FROM "FourClass_10" AS "ADS"), 
linear_model_cte AS 
(SELECT linear_input."KEY" AS "KEY", CAST(0.32945284092287 AS DOUBLE PRECISION) * linear_input."Feature_0" + CAST(-0.378250711896054 AS DOUBLE PRECISION) * linear_input."Feature_1" + CAST(-0.047036817239428 AS DOUBLE PRECISION) * linear_input."Feature_2" + CAST(-0.320787891925769 AS DOUBLE PRECISION) * linear_input."Feature_3" + CAST(0.78450698935514 AS DOUBLE PRECISION) * linear_input."Feature_4" + CAST(-0.35072133016909 AS DOUBLE PRECISION) * linear_input."Feature_5" + CAST(0.116843192344101 AS DOUBLE PRECISION) * linear_input."Feature_6" + CAST(0.467512277082843 AS DOUBLE PRECISION) * linear_input."Feature_7" + CAST(0.541283386627539 AS DOUBLE PRECISION) * linear_input."Feature_8" + CAST(0.094592976503095 AS DOUBLE PRECISION) * linear_input."Feature_9" + CAST(-1.147159790549458 AS DOUBLE PRECISION) AS "Score_0", CAST(-0.02709454295053 AS DOUBLE PRECISION) * linear_input."Feature_0" + CAST(0.075896111518084 AS DOUBLE PRECISION) * linear_input."Feature_1" + CAST(0.293051359680526 AS DOUBLE PRECISION) * linear_input."Feature_2" + CAST(0.355777894375334 AS DOUBLE PRECISION) * linear_input."Feature_3" + CAST(0.383955283194351 AS DOUBLE PRECISION) * linear_input."Feature_4" + CAST(-0.040147477670155 AS DOUBLE PRECISION) * linear_input."Feature_5" + CAST(-0.137293614593452 AS DOUBLE PRECISION) * linear_input."Feature_6" + CAST(0.217916483767306 AS DOUBLE PRECISION) * linear_input."Feature_7" + CAST(-0.27514356549578 AS DOUBLE PRECISION) * linear_input."Feature_8" + CAST(0.014649731117628 AS DOUBLE PRECISION) * linear_input."Feature_9" + CAST(-1.706122580820191 AS DOUBLE PRECISION) AS "Score_1", CAST(-0.255900819024922 AS DOUBLE PRECISION) * linear_input."Feature_0" + CAST(-0.42696143941844 AS DOUBLE PRECISION) * linear_input."Feature_1" + CAST(-0.64218170350665 AS DOUBLE PRECISION) * linear_input."Feature_2" + CAST(-0.452555632605967 AS DOUBLE PRECISION) * linear_input."Feature_3" + CAST(-0.78395542172123 AS DOUBLE PRECISION) * linear_input."Feature_4" + CAST(0.00208239962036 AS DOUBLE PRECISION) * linear_input."Feature_5" + CAST(0.069553713337154 AS DOUBLE PRECISION) * linear_input."Feature_6" + CAST(0.522443519955679 AS DOUBLE PRECISION) * linear_input."Feature_7" + CAST(0.462573000045854 AS DOUBLE PRECISION) * linear_input."Feature_8" + CAST(-0.07675814541731 AS DOUBLE PRECISION) * linear_input."Feature_9" + CAST(-1.46592214310059 AS DOUBLE PRECISION) AS "Score_2", CAST(-0.230760321562586 AS DOUBLE PRECISION) * linear_input."Feature_0" + CAST(0.872769331326938 AS DOUBLE PRECISION) * linear_input."Feature_1" + CAST(0.011199260453392 AS DOUBLE PRECISION) * linear_input."Feature_2" + CAST(0.281410363469622 AS DOUBLE PRECISION) * linear_input."Feature_3" + CAST(-0.35772568792991 AS DOUBLE PRECISION) * linear_input."Feature_4" + CAST(0.388895010054155 AS DOUBLE PRECISION) * linear_input."Feature_5" + CAST(0.022680344438942 AS DOUBLE PRECISION) * linear_input."Feature_6" + CAST(-1.018428071558878 AS DOUBLE PRECISION) * linear_input."Feature_7" + CAST(-0.479939459440071 AS DOUBLE PRECISION) * linear_input."Feature_8" + CAST(-0.171380786707424 AS DOUBLE PRECISION) * linear_input."Feature_9" + CAST(-2.220350831438812 AS DOUBLE PRECISION) AS "Score_3" 
FROM linear_input), 
linear_model_cte_logistic AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -linear_model_cte."Score_0"), CAST(100.0 AS DOUBLE PRECISION)))) AS "Logistic_0", linear_model_cte."Score_1" AS "Score_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -linear_model_cte."Score_1"), CAST(100.0 AS DOUBLE PRECISION)))) AS "Logistic_1", linear_model_cte."Score_2" AS "Score_2", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -linear_model_cte."Score_2"), CAST(100.0 AS DOUBLE PRECISION)))) AS "Logistic_2", linear_model_cte."Score_3" AS "Score_3", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -linear_model_cte."Score_3"), CAST(100.0 AS DOUBLE PRECISION)))) AS "Logistic_3" 
FROM linear_model_cte), 
orig_cte AS 
(SELECT linear_model_cte_logistic."KEY" AS "KEY", linear_model_cte_logistic."Score_0" AS "Score_0", linear_model_cte_logistic."Score_1" AS "Score_1", linear_model_cte_logistic."Score_2" AS "Score_2", linear_model_cte_logistic."Score_3" AS "Score_3", linear_model_cte_logistic."Logistic_0" / (linear_model_cte_logistic."Logistic_0" + linear_model_cte_logistic."Logistic_1" + linear_model_cte_logistic."Logistic_2" + linear_model_cte_logistic."Logistic_3") AS "Proba_0", linear_model_cte_logistic."Logistic_1" / (linear_model_cte_logistic."Logistic_0" + linear_model_cte_logistic."Logistic_1" + linear_model_cte_logistic."Logistic_2" + linear_model_cte_logistic."Logistic_3") AS "Proba_1", linear_model_cte_logistic."Logistic_2" / (linear_model_cte_logistic."Logistic_0" + linear_model_cte_logistic."Logistic_1" + linear_model_cte_logistic."Logistic_2" + linear_model_cte_logistic."Logistic_3") AS "Proba_2", linear_model_cte_logistic."Logistic_3" / (linear_model_cte_logistic."Logistic_0" + linear_model_cte_logistic."Logistic_1" + linear_model_cte_logistic."Logistic_2" + linear_model_cte_logistic."Logistic_3") AS "Proba_3", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM linear_model_cte_logistic), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max."class") AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte