-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : RandomForestClassifier_Pipeline
-- Dataset : iris_str_tgt
-- Database : oracle


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table DEGEN_NHHSCV_ADS_IMP_1_OUT part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "DEGEN_NHHSCV_ADS_IMP_1_OUT" (
	"KEY" NUMBER(19), 
	imputer_output_2 BINARY_DOUBLE, 
	imputer_output_3 BINARY_DOUBLE, 
	imputer_output_4 BINARY_DOUBLE, 
	imputer_output_5 BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table DEGEN_NHHSCV_ADS_IMP_1_OUT part 2. Populate

INSERT INTO "DEGEN_NHHSCV_ADS_IMP_1_OUT" ("KEY", imputer_output_2, imputer_output_3, imputer_output_4, imputer_output_5) SELECT "U"."KEY", "U".imputer_output_2, "U".imputer_output_3, "U".imputer_output_4, "U".imputer_output_5 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".imputer_output_2, "ADS_imp_1_OUT".imputer_output_3, "ADS_imp_1_OUT".imputer_output_4, "ADS_imp_1_OUT".imputer_output_5 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 5.8474999999999975 ELSE "ADS"."Feature_0" END AS imputer_output_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 3.0366666666666657 ELSE "ADS"."Feature_1" END AS imputer_output_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 3.8450000000000006 ELSE "ADS"."Feature_2" END AS imputer_output_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 1.245 ELSE "ADS"."Feature_3" END AS imputer_output_5 
FROM "IRIS_STR_TGT" "ADS") "ADS_imp_1_OUT") "U"

-- Code For temporary table DEGEN_RW5IFV_ADS_SCA_2_OUT part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "DEGEN_RW5IFV_ADS_SCA_2_OUT" (
	"KEY" NUMBER(19), 
	scaler_output_2 BINARY_DOUBLE, 
	scaler_output_3 BINARY_DOUBLE, 
	scaler_output_4 BINARY_DOUBLE, 
	scaler_output_5 BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table DEGEN_RW5IFV_ADS_SCA_2_OUT part 2. Populate

INSERT INTO "DEGEN_RW5IFV_ADS_SCA_2_OUT" ("KEY", scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) SELECT "U"."KEY", "U".scaler_output_2, "U".scaler_output_3, "U".scaler_output_4, "U".scaler_output_5 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_output_2, "ADS_sca_2_OUT".scaler_output_3, "ADS_sca_2_OUT".scaler_output_4, "ADS_sca_2_OUT".scaler_output_5 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".imputer_output_2 AS BINARY_DOUBLE) - 5.8474999999999975) / 0.827039146594646 AS scaler_output_2, (CAST("ADS_imp_1_OUT".imputer_output_3 AS BINARY_DOUBLE) - 3.0366666666666657) / 0.43625935201691934 AS scaler_output_3, (CAST("ADS_imp_1_OUT".imputer_output_4 AS BINARY_DOUBLE) - 3.8450000000000006) / 1.709817241695732 AS scaler_output_4, (CAST("ADS_imp_1_OUT".imputer_output_5 AS BINARY_DOUBLE) - 1.245) / 0.7498722113355939 AS scaler_output_5 
FROM "DEGEN_NHHSCV_ADS_IMP_1_OUT" "ADS_imp_1_OUT") "ADS_sca_2_OUT") "U"

-- Code For temporary table 90701_CODEGEN_AMHRW7_RF_B0 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "90701_CODEGEN_AMHRW7_RF_B0" (
	"KEY" NUMBER(19), 
	"Score_CLASS_0" BINARY_DOUBLE, 
	"Proba_CLASS_0" BINARY_DOUBLE, 
	"LogProba_CLASS_0" BINARY_DOUBLE, 
	"Score_CLASS_1" BINARY_DOUBLE, 
	"Proba_CLASS_1" BINARY_DOUBLE, 
	"LogProba_CLASS_1" BINARY_DOUBLE, 
	"Score_CLASS_2" BINARY_DOUBLE, 
	"Proba_CLASS_2" BINARY_DOUBLE, 
	"LogProba_CLASS_2" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table 90701_CODEGEN_AMHRW7_RF_B0 part 2. Populate

INSERT INTO "90701_CODEGEN_AMHRW7_RF_B0" ("KEY", "Score_CLASS_0", "Proba_CLASS_0", "LogProba_CLASS_0", "Score_CLASS_1", "Proba_CLASS_1", "LogProba_CLASS_1", "Score_CLASS_2", "Proba_CLASS_2", "LogProba_CLASS_2") SELECT "U"."KEY", "U"."Score_CLASS_0", "U"."Proba_CLASS_0", "U"."LogProba_CLASS_0", "U"."Score_CLASS_1", "U"."Proba_CLASS_1", "U"."LogProba_CLASS_1", "U"."Score_CLASS_2", "U"."Proba_CLASS_2", "U"."LogProba_CLASS_2" 
FROM (WITH "DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= -0.48063021898269653) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.5934344530105591) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.47341400384902954) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.6734480857849121) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.7267905473709106) THEN 8 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN 10 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= -1.0009336471557617) THEN 12 ELSE 13 END END END ELSE 14 END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 5 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 8 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 10 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 13 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 14 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".nid AS nid, "DT_node_data"."P_0.0" AS "P_0.0", "DT_node_data"."P_1.0" AS "P_1.0", "DT_node_data"."P_2.0" AS "P_2.0", "DT_node_data"."D" AS "D", "DT_node_data"."DP" AS "DP" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".nid), 
"RF_Model_0" AS 
(SELECT "DT_Output"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output"."P_0.0" IS NULL OR "DT_Output"."P_0.0" > 0.0) THEN ln("DT_Output"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output"."P_1.0" IS NULL OR "DT_Output"."P_1.0" > 0.0) THEN ln("DT_Output"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output"."P_2.0" IS NULL OR "DT_Output"."P_2.0" > 0.0) THEN ln("DT_Output"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.7281479835510254) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.5877821445465088) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.6067700386047363) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= 0.1451735943555832) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.6734480857849121) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= -1.5739872455596924) THEN 10 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.7047536373138428) THEN 12 ELSE 13 END END ELSE 14 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 7 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 10 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 13 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 14 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".nid AS nid, "DT_node_data_1"."P_0.0" AS "P_0.0", "DT_node_data_1"."P_1.0" AS "P_1.0", "DT_node_data_1"."P_2.0" AS "P_2.0", "DT_node_data_1"."D" AS "D", "DT_node_data_1"."DP" AS "DP" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".nid), 
"RF_Model_1" AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_1"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_1"."P_0.0" IS NULL OR "DT_Output_1"."P_0.0" > 0.0) THEN ln("DT_Output_1"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_1"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_1"."P_1.0" IS NULL OR "DT_Output_1"."P_1.0" > 0.0) THEN ln("DT_Output_1"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_1"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_1"."P_2.0" IS NULL OR "DT_Output_1"."P_2.0" > 0.0) THEN ln("DT_Output_1"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.6734480857849121) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.5934344530105591) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.273379921913147) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= -0.42788004875183105) THEN 6 ELSE 7 END END END ELSE 8 END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 7 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 8 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".nid AS nid, "DT_node_data_2"."P_0.0" AS "P_0.0", "DT_node_data_2"."P_1.0" AS "P_1.0", "DT_node_data_2"."P_2.0" AS "P_2.0", "DT_node_data_2"."D" AS "D", "DT_node_data_2"."DP" AS "DP" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".nid), 
"RF_Model_2" AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_2"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_2"."P_0.0" IS NULL OR "DT_Output_2"."P_0.0" > 0.0) THEN ln("DT_Output_2"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_2"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_2"."P_1.0" IS NULL OR "DT_Output_2"."P_1.0" > 0.0) THEN ln("DT_Output_2"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_2"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_2"."P_2.0" IS NULL OR "DT_Output_2"."P_2.0" > 0.0) THEN ln("DT_Output_2"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.6601125001907349) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.5877821445465088) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.5400919914245605) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.47081053256988525) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.7047536373138428) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= 0.7889590263366699) THEN 10 ELSE 11 END ELSE 12 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 7 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 10 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 11 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".nid AS nid, "DT_node_data_3"."P_0.0" AS "P_0.0", "DT_node_data_3"."P_1.0" AS "P_1.0", "DT_node_data_3"."P_2.0" AS "P_2.0", "DT_node_data_3"."D" AS "D", "DT_node_data_3"."DP" AS "DP" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".nid), 
"RF_Model_3" AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_3"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_3"."P_0.0" IS NULL OR "DT_Output_3"."P_0.0" > 0.0) THEN ln("DT_Output_3"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_3"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_3"."P_1.0" IS NULL OR "DT_Output_3"."P_1.0" > 0.0) THEN ln("DT_Output_3"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_3"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_3"."P_2.0" IS NULL OR "DT_Output_3"."P_2.0" > 0.0) THEN ln("DT_Output_3"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.8158766627311707) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= -0.2388036847114563) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.6734480857849121) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN 6 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= -0.31326931715011597) THEN 8 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= 1.3330687284469604) THEN 10 ELSE 11 END END END ELSE 12 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 3 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 8 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 10 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 11 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".nid AS nid, "DT_node_data_4"."P_0.0" AS "P_0.0", "DT_node_data_4"."P_1.0" AS "P_1.0", "DT_node_data_4"."P_2.0" AS "P_2.0", "DT_node_data_4"."D" AS "D", "DT_node_data_4"."DP" AS "DP" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".nid), 
"RF_Model_4" AS 
(SELECT "DT_Output_4"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_4"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_4"."P_0.0" IS NULL OR "DT_Output_4"."P_0.0" > 0.0) THEN ln("DT_Output_4"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_4"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_4"."P_1.0" IS NULL OR "DT_Output_4"."P_1.0" > 0.0) THEN ln("DT_Output_4"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_4"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_4"."P_2.0" IS NULL OR "DT_Output_4"."P_2.0" > 0.0) THEN ln("DT_Output_4"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= -0.48063021898269653) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.8743624687194824) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= -1.3447659015655518) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.2067018747329712) THEN 6 ELSE 7 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.529296338558197) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.7934684753417969) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.5400920510292053) THEN 14 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= 0.1451735943555832) THEN 16 ELSE 17 END END ELSE 18 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 7 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 10 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 11 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 14 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 16 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 17 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 18 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".nid AS nid, "DT_node_data_5"."P_0.0" AS "P_0.0", "DT_node_data_5"."P_1.0" AS "P_1.0", "DT_node_data_5"."P_2.0" AS "P_2.0", "DT_node_data_5"."D" AS "D", "DT_node_data_5"."DP" AS "DP" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".nid), 
"RF_Model_5" AS 
(SELECT "DT_Output_5"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_5"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_5"."P_0.0" IS NULL OR "DT_Output_5"."P_0.0" > 0.0) THEN ln("DT_Output_5"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_5"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_5"."P_1.0" IS NULL OR "DT_Output_5"."P_1.0" > 0.0) THEN ln("DT_Output_5"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_5"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_5"."P_2.0" IS NULL OR "DT_Output_5"."P_2.0" > 0.0) THEN ln("DT_Output_5"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.5934344530105591) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.5877821445465088) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.5400919914245605) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= 0.1451735943555832) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.40673595666885376) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6755107641220093) THEN 10 ELSE 11 END ELSE 12 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 7 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 10 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 11 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".nid AS nid, "DT_node_data_6"."P_0.0" AS "P_0.0", "DT_node_data_6"."P_1.0" AS "P_1.0", "DT_node_data_6"."P_2.0" AS "P_2.0", "DT_node_data_6"."D" AS "D", "DT_node_data_6"."DP" AS "DP" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".nid), 
"RF_Model_6" AS 
(SELECT "DT_Output_6"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_6"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_6"."P_0.0" IS NULL OR "DT_Output_6"."P_0.0" > 0.0) THEN ln("DT_Output_6"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_6"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_6"."P_1.0" IS NULL OR "DT_Output_6"."P_1.0" > 0.0) THEN ln("DT_Output_6"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_6"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_6"."P_2.0" IS NULL OR "DT_Output_6"."P_2.0" > 0.0) THEN ln("DT_Output_6"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.8158766627311707) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.5400919914245605) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6170250177383423) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.5877821445465088) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= 0.12393608689308167) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= -0.42788004875183105) THEN 9 ELSE 10 END ELSE 11 END ELSE 12 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 5 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 9 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 10 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 11 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".nid AS nid, "DT_node_data_7"."P_0.0" AS "P_0.0", "DT_node_data_7"."P_1.0" AS "P_1.0", "DT_node_data_7"."P_2.0" AS "P_2.0", "DT_node_data_7"."D" AS "D", "DT_node_data_7"."DP" AS "DP" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".nid), 
"RF_Model_7" AS 
(SELECT "DT_Output_7"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_7"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_7"."P_0.0" IS NULL OR "DT_Output_7"."P_0.0" > 0.0) THEN ln("DT_Output_7"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_7"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_7"."P_1.0" IS NULL OR "DT_Output_7"."P_1.0" > 0.0) THEN ln("DT_Output_7"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_7"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_7"."P_2.0" IS NULL OR "DT_Output_7"."P_2.0" > 0.0) THEN ln("DT_Output_7"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.5877821445465088) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= -0.48063021898269653) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.7267905473709106) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.20762452483177185) THEN 5 ELSE 6 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.6696621775627136) THEN 8 ELSE 9 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= 0.030562859028577805) THEN 12 ELSE 13 END ELSE 14 END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 3 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 5 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 8 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 9 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 13 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 14 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".nid AS nid, "DT_node_data_8"."P_0.0" AS "P_0.0", "DT_node_data_8"."P_1.0" AS "P_1.0", "DT_node_data_8"."P_2.0" AS "P_2.0", "DT_node_data_8"."D" AS "D", "DT_node_data_8"."DP" AS "DP" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".nid), 
"RF_Model_8" AS 
(SELECT "DT_Output_8"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_8"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_8"."P_0.0" IS NULL OR "DT_Output_8"."P_0.0" > 0.0) THEN ln("DT_Output_8"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_8"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_8"."P_1.0" IS NULL OR "DT_Output_8"."P_1.0" > 0.0) THEN ln("DT_Output_8"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_8"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_8"."P_2.0" IS NULL OR "DT_Output_8"."P_2.0" > 0.0) THEN ln("DT_Output_8"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.5934344530105591) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.40673595666885376) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 5 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".nid AS nid, "DT_node_data_9"."P_0.0" AS "P_0.0", "DT_node_data_9"."P_1.0" AS "P_1.0", "DT_node_data_9"."P_2.0" AS "P_2.0", "DT_node_data_9"."D" AS "D", "DT_node_data_9"."DP" AS "DP" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".nid), 
"RF_Model_9" AS 
(SELECT "DT_Output_9"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_9"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_9"."P_0.0" IS NULL OR "DT_Output_9"."P_0.0" > 0.0) THEN ln("DT_Output_9"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_9"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_9"."P_1.0" IS NULL OR "DT_Output_9"."P_1.0" > 0.0) THEN ln("DT_Output_9"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_9"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_9"."P_2.0" IS NULL OR "DT_Output_9"."P_2.0" > 0.0) THEN ln("DT_Output_9"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_9")
 SELECT "RF_B0"."KEY", "RF_B0"."Score_CLASS_0", "RF_B0"."Proba_CLASS_0", "RF_B0"."LogProba_CLASS_0", "RF_B0"."Score_CLASS_1", "RF_B0"."Proba_CLASS_1", "RF_B0"."LogProba_CLASS_1", "RF_B0"."Score_CLASS_2", "RF_B0"."Proba_CLASS_2", "RF_B0"."LogProba_CLASS_2" 
FROM (SELECT "RF_esu_0"."KEY" AS "KEY", "RF_esu_0"."Score_CLASS_0" AS "Score_CLASS_0", "RF_esu_0"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_esu_0"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_esu_0"."Score_CLASS_1" AS "Score_CLASS_1", "RF_esu_0"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_esu_0"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_esu_0"."Score_CLASS_2" AS "Score_CLASS_2", "RF_esu_0"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_esu_0"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "RF_Model_0"."KEY" AS "KEY", "RF_Model_0"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_0"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_0"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_0"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_0"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_0"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_0"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_0"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_0"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_0" UNION ALL SELECT "RF_Model_1"."KEY" AS "KEY", "RF_Model_1"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_1"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_1"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_1"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_1"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_1"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_1"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_1"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_1"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_1" UNION ALL SELECT "RF_Model_2"."KEY" AS "KEY", "RF_Model_2"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_2"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_2"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_2"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_2"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_2"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_2"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_2"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_2"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_2" UNION ALL SELECT "RF_Model_3"."KEY" AS "KEY", "RF_Model_3"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_3"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_3"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_3"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_3"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_3"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_3"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_3"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_3"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_3" UNION ALL SELECT "RF_Model_4"."KEY" AS "KEY", "RF_Model_4"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_4"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_4"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_4"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_4"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_4"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_4"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_4"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_4"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_4" UNION ALL SELECT "RF_Model_5"."KEY" AS "KEY", "RF_Model_5"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_5"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_5"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_5"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_5"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_5"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_5"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_5"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_5"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_5" UNION ALL SELECT "RF_Model_6"."KEY" AS "KEY", "RF_Model_6"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_6"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_6"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_6"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_6"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_6"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_6"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_6"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_6"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_6" UNION ALL SELECT "RF_Model_7"."KEY" AS "KEY", "RF_Model_7"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_7"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_7"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_7"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_7"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_7"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_7"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_7"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_7"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_7" UNION ALL SELECT "RF_Model_8"."KEY" AS "KEY", "RF_Model_8"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_8"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_8"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_8"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_8"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_8"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_8"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_8"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_8"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_8" UNION ALL SELECT "RF_Model_9"."KEY" AS "KEY", "RF_Model_9"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_9"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_9"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_9"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_9"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_9"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_9"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_9"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_9"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_9") "RF_esu_0") "RF_B0") "U"

-- Code For temporary table 90701_CODEGEN_OB8HWT_RF_B1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "90701_CODEGEN_OB8HWT_RF_B1" (
	"KEY" NUMBER(19), 
	"Score_CLASS_0" BINARY_DOUBLE, 
	"Proba_CLASS_0" BINARY_DOUBLE, 
	"LogProba_CLASS_0" BINARY_DOUBLE, 
	"Score_CLASS_1" BINARY_DOUBLE, 
	"Proba_CLASS_1" BINARY_DOUBLE, 
	"LogProba_CLASS_1" BINARY_DOUBLE, 
	"Score_CLASS_2" BINARY_DOUBLE, 
	"Proba_CLASS_2" BINARY_DOUBLE, 
	"LogProba_CLASS_2" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table 90701_CODEGEN_OB8HWT_RF_B1 part 2. Populate

INSERT INTO "90701_CODEGEN_OB8HWT_RF_B1" ("KEY", "Score_CLASS_0", "Proba_CLASS_0", "LogProba_CLASS_0", "Score_CLASS_1", "Proba_CLASS_1", "LogProba_CLASS_1", "Score_CLASS_2", "Proba_CLASS_2", "LogProba_CLASS_2") SELECT "U"."KEY", "U"."Score_CLASS_0", "U"."Proba_CLASS_0", "U"."LogProba_CLASS_0", "U"."Score_CLASS_1", "U"."Proba_CLASS_1", "U"."LogProba_CLASS_1", "U"."Score_CLASS_2", "U"."Proba_CLASS_2", "U"."LogProba_CLASS_2" 
FROM (WITH "DT_node_lookup_10" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= -0.48063021898269653) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.7281479835510254) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.47341400384902954) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.5877821445465088) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= 1.1766700744628906) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.529296338558197) THEN 9 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= 0.12393608689308167) THEN 11 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.47341400384902954) THEN 13 ELSE 14 END END END ELSE 15 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= 0.42621922492980957) THEN 18 ELSE 19 END ELSE 20 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_10" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 5 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 9 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 11 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 13 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 14 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 15 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 18 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 19 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 20 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", "DT_node_lookup_10".node_id_2 AS node_id_2, "DT_node_data_10".nid AS nid, "DT_node_data_10"."P_0.0" AS "P_0.0", "DT_node_data_10"."P_1.0" AS "P_1.0", "DT_node_data_10"."P_2.0" AS "P_2.0", "DT_node_data_10"."D" AS "D", "DT_node_data_10"."DP" AS "DP" 
FROM "DT_node_lookup_10" LEFT OUTER JOIN "DT_node_data_10" ON "DT_node_lookup_10".node_id_2 = "DT_node_data_10".nid), 
"RF_Model_10" AS 
(SELECT "DT_Output_10"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_10"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_10"."P_0.0" IS NULL OR "DT_Output_10"."P_0.0" > 0.0) THEN ln("DT_Output_10"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_10"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_10"."P_1.0" IS NULL OR "DT_Output_10"."P_1.0" > 0.0) THEN ln("DT_Output_10"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_10"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_10"."P_2.0" IS NULL OR "DT_Output_10"."P_2.0" > 0.0) THEN ln("DT_Output_10"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_10"), 
"DT_node_lookup_11" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.8158766627311707) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.8734821677207947) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= -1.0851964950561523) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= -1.3447659015655518) THEN 6 ELSE 7 END ELSE 8 END ELSE 9 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.7047536373138428) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.7401261329650879) THEN 12 ELSE 13 END ELSE 14 END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_11" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 7 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 8 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 9 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 13 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 14 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", "DT_node_lookup_11".node_id_2 AS node_id_2, "DT_node_data_11".nid AS nid, "DT_node_data_11"."P_0.0" AS "P_0.0", "DT_node_data_11"."P_1.0" AS "P_1.0", "DT_node_data_11"."P_2.0" AS "P_2.0", "DT_node_data_11"."D" AS "D", "DT_node_data_11"."DP" AS "DP" 
FROM "DT_node_lookup_11" LEFT OUTER JOIN "DT_node_data_11" ON "DT_node_lookup_11".node_id_2 = "DT_node_data_11".nid), 
"RF_Model_11" AS 
(SELECT "DT_Output_11"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_11"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_11"."P_0.0" IS NULL OR "DT_Output_11"."P_0.0" > 0.0) THEN ln("DT_Output_11"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_11"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_11"."P_1.0" IS NULL OR "DT_Output_11"."P_1.0" > 0.0) THEN ln("DT_Output_11"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_11"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_11"."P_2.0" IS NULL OR "DT_Output_11"."P_2.0" > 0.0) THEN ln("DT_Output_11"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_11"), 
"DT_node_lookup_12" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= -0.6601125001907349) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.5400919914245605) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.7047536373138428) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= 0.7889590263366699) THEN 8 ELSE 9 END ELSE 10 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_12" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 5 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 8 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 9 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 10 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_12" AS 
(SELECT "DT_node_lookup_12"."KEY" AS "KEY", "DT_node_lookup_12".node_id_2 AS node_id_2, "DT_node_data_12".nid AS nid, "DT_node_data_12"."P_0.0" AS "P_0.0", "DT_node_data_12"."P_1.0" AS "P_1.0", "DT_node_data_12"."P_2.0" AS "P_2.0", "DT_node_data_12"."D" AS "D", "DT_node_data_12"."DP" AS "DP" 
FROM "DT_node_lookup_12" LEFT OUTER JOIN "DT_node_data_12" ON "DT_node_lookup_12".node_id_2 = "DT_node_data_12".nid), 
"RF_Model_12" AS 
(SELECT "DT_Output_12"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_12"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_12"."P_0.0" IS NULL OR "DT_Output_12"."P_0.0" > 0.0) THEN ln("DT_Output_12"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_12"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_12"."P_1.0" IS NULL OR "DT_Output_12"."P_1.0" > 0.0) THEN ln("DT_Output_12"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_12"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_12"."P_2.0" IS NULL OR "DT_Output_12"."P_2.0" > 0.0) THEN ln("DT_Output_12"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_12"), 
"DT_node_lookup_13" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.5877821445465088) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.8158766627311707) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.5400919914245605) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.47081053256988525) THEN 6 ELSE 7 END END END ELSE 8 END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_13" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 7 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 8 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_13" AS 
(SELECT "DT_node_lookup_13"."KEY" AS "KEY", "DT_node_lookup_13".node_id_2 AS node_id_2, "DT_node_data_13".nid AS nid, "DT_node_data_13"."P_0.0" AS "P_0.0", "DT_node_data_13"."P_1.0" AS "P_1.0", "DT_node_data_13"."P_2.0" AS "P_2.0", "DT_node_data_13"."D" AS "D", "DT_node_data_13"."DP" AS "DP" 
FROM "DT_node_lookup_13" LEFT OUTER JOIN "DT_node_data_13" ON "DT_node_lookup_13".node_id_2 = "DT_node_data_13".nid), 
"RF_Model_13" AS 
(SELECT "DT_Output_13"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_13"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_13"."P_0.0" IS NULL OR "DT_Output_13"."P_0.0" > 0.0) THEN ln("DT_Output_13"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_13"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_13"."P_1.0" IS NULL OR "DT_Output_13"."P_1.0" > 0.0) THEN ln("DT_Output_13"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_13"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_13"."P_2.0" IS NULL OR "DT_Output_13"."P_2.0" > 0.0) THEN ln("DT_Output_13"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_13"), 
"DT_node_lookup_14" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.8158766627311707) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.6462678909301758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.6067700386047363) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_14" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 4 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 5 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 6 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_14" AS 
(SELECT "DT_node_lookup_14"."KEY" AS "KEY", "DT_node_lookup_14".node_id_2 AS node_id_2, "DT_node_data_14".nid AS nid, "DT_node_data_14"."P_0.0" AS "P_0.0", "DT_node_data_14"."P_1.0" AS "P_1.0", "DT_node_data_14"."P_2.0" AS "P_2.0", "DT_node_data_14"."D" AS "D", "DT_node_data_14"."DP" AS "DP" 
FROM "DT_node_lookup_14" LEFT OUTER JOIN "DT_node_data_14" ON "DT_node_lookup_14".node_id_2 = "DT_node_data_14".nid), 
"RF_Model_14" AS 
(SELECT "DT_Output_14"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_14"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_14"."P_0.0" IS NULL OR "DT_Output_14"."P_0.0" > 0.0) THEN ln("DT_Output_14"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_14"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_14"."P_1.0" IS NULL OR "DT_Output_14"."P_1.0" > 0.0) THEN ln("DT_Output_14"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_14"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_14"."P_2.0" IS NULL OR "DT_Output_14"."P_2.0" > 0.0) THEN ln("DT_Output_14"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_14"), 
"DT_node_lookup_15" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= -0.8158766627311707) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.6734480857849121) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.8509681224822998) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.5400919914245605) THEN 5 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= 0.529296338558197) THEN 7 ELSE 8 END END ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= 0.8068041801452637) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= 0.12393608689308167) THEN 12 ELSE 13 END ELSE 14 END END END AS node_id_2 
FROM "DEGEN_RW5IFV_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_15" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_0.0" AS BINARY_DOUBLE) AS "P_0.0", CAST("Values"."P_1.0" AS BINARY_DOUBLE) AS "P_1.0", CAST("Values"."P_2.0" AS BINARY_DOUBLE) AS "P_2.0", CAST("Values"."D" AS BINARY_DOUBLE) AS "D", CAST("Values"."DP" AS BINARY_DOUBLE) AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0.0", 0.0 AS "P_1.0", 0.0 AS "P_2.0", 0.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 5 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 7 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 8 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 9 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 12 AS nid, 0.0 AS "P_0.0", 1.0 AS "P_1.0", 0.0 AS "P_2.0", 1.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 13 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL UNION ALL SELECT 14 AS nid, 0.0 AS "P_0.0", 0.0 AS "P_1.0", 1.0 AS "P_2.0", 2.0 AS "D", 1.0 AS "DP" FROM DUAL) "Values"), 
"DT_Output_15" AS 
(SELECT "DT_node_lookup_15"."KEY" AS "KEY", "DT_node_lookup_15".node_id_2 AS node_id_2, "DT_node_data_15".nid AS nid, "DT_node_data_15"."P_0.0" AS "P_0.0", "DT_node_data_15"."P_1.0" AS "P_1.0", "DT_node_data_15"."P_2.0" AS "P_2.0", "DT_node_data_15"."D" AS "D", "DT_node_data_15"."DP" AS "DP" 
FROM "DT_node_lookup_15" LEFT OUTER JOIN "DT_node_data_15" ON "DT_node_lookup_15".node_id_2 = "DT_node_data_15".nid), 
"RF_Model_15" AS 
(SELECT "DT_Output_15"."KEY" AS "KEY", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_0", "DT_Output_15"."P_0.0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_15"."P_0.0" IS NULL OR "DT_Output_15"."P_0.0" > 0.0) THEN ln("DT_Output_15"."P_0.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_1", "DT_Output_15"."P_1.0" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_15"."P_1.0" IS NULL OR "DT_Output_15"."P_1.0" > 0.0) THEN ln("DT_Output_15"."P_1.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "Score_CLASS_2", "DT_Output_15"."P_2.0" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_15"."P_2.0" IS NULL OR "DT_Output_15"."P_2.0" > 0.0) THEN ln("DT_Output_15"."P_2.0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2" 
FROM "DT_Output_15")
 SELECT "RF_B1"."KEY", "RF_B1"."Score_CLASS_0", "RF_B1"."Proba_CLASS_0", "RF_B1"."LogProba_CLASS_0", "RF_B1"."Score_CLASS_1", "RF_B1"."Proba_CLASS_1", "RF_B1"."LogProba_CLASS_1", "RF_B1"."Score_CLASS_2", "RF_B1"."Proba_CLASS_2", "RF_B1"."LogProba_CLASS_2" 
FROM (SELECT "RF_esu_1"."KEY" AS "KEY", "RF_esu_1"."Score_CLASS_0" AS "Score_CLASS_0", "RF_esu_1"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_esu_1"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_esu_1"."Score_CLASS_1" AS "Score_CLASS_1", "RF_esu_1"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_esu_1"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_esu_1"."Score_CLASS_2" AS "Score_CLASS_2", "RF_esu_1"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_esu_1"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "RF_Model_10"."KEY" AS "KEY", "RF_Model_10"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_10"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_10"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_10"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_10"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_10"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_10"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_10"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_10"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_10" UNION ALL SELECT "RF_Model_11"."KEY" AS "KEY", "RF_Model_11"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_11"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_11"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_11"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_11"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_11"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_11"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_11"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_11"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_11" UNION ALL SELECT "RF_Model_12"."KEY" AS "KEY", "RF_Model_12"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_12"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_12"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_12"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_12"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_12"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_12"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_12"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_12"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_12" UNION ALL SELECT "RF_Model_13"."KEY" AS "KEY", "RF_Model_13"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_13"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_13"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_13"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_13"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_13"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_13"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_13"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_13"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_13" UNION ALL SELECT "RF_Model_14"."KEY" AS "KEY", "RF_Model_14"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_14"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_14"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_14"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_14"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_14"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_14"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_14"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_14"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_14" UNION ALL SELECT "RF_Model_15"."KEY" AS "KEY", "RF_Model_15"."Score_CLASS_0" AS "Score_CLASS_0", "RF_Model_15"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_Model_15"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_Model_15"."Score_CLASS_1" AS "Score_CLASS_1", "RF_Model_15"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_Model_15"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_Model_15"."Score_CLASS_2" AS "Score_CLASS_2", "RF_Model_15"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_Model_15"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "RF_Model_15") "RF_esu_1") "RF_B1") "U"

-- Code For temporary table 01_CODEGEN_XN3QTM_RF_UNION part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "01_CODEGEN_XN3QTM_RF_UNION" (
	"KEY" NUMBER(19), 
	"Score_CLASS_0" BINARY_DOUBLE, 
	"Proba_CLASS_0" BINARY_DOUBLE, 
	"LogProba_CLASS_0" BINARY_DOUBLE, 
	"Score_CLASS_1" BINARY_DOUBLE, 
	"Proba_CLASS_1" BINARY_DOUBLE, 
	"LogProba_CLASS_1" BINARY_DOUBLE, 
	"Score_CLASS_2" BINARY_DOUBLE, 
	"Proba_CLASS_2" BINARY_DOUBLE, 
	"LogProba_CLASS_2" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table 01_CODEGEN_XN3QTM_RF_UNION part 2. Populate

INSERT INTO "01_CODEGEN_XN3QTM_RF_UNION" ("KEY", "Score_CLASS_0", "Proba_CLASS_0", "LogProba_CLASS_0", "Score_CLASS_1", "Proba_CLASS_1", "LogProba_CLASS_1", "Score_CLASS_2", "Proba_CLASS_2", "LogProba_CLASS_2") SELECT "U"."KEY", "U"."Score_CLASS_0", "U"."Proba_CLASS_0", "U"."LogProba_CLASS_0", "U"."Score_CLASS_1", "U"."Proba_CLASS_1", "U"."LogProba_CLASS_1", "U"."Score_CLASS_2", "U"."Proba_CLASS_2", "U"."LogProba_CLASS_2" 
FROM (SELECT "RF_Union"."KEY", "RF_Union"."Score_CLASS_0", "RF_Union"."Proba_CLASS_0", "RF_Union"."LogProba_CLASS_0", "RF_Union"."Score_CLASS_1", "RF_Union"."Proba_CLASS_1", "RF_Union"."LogProba_CLASS_1", "RF_Union"."Score_CLASS_2", "RF_Union"."Proba_CLASS_2", "RF_Union"."LogProba_CLASS_2" 
FROM (SELECT "RF_EnsembleUnion"."KEY" AS "KEY", "RF_EnsembleUnion"."Score_CLASS_0" AS "Score_CLASS_0", "RF_EnsembleUnion"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_EnsembleUnion"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_EnsembleUnion"."Score_CLASS_1" AS "Score_CLASS_1", "RF_EnsembleUnion"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_EnsembleUnion"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_EnsembleUnion"."Score_CLASS_2" AS "Score_CLASS_2", "RF_EnsembleUnion"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_EnsembleUnion"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "RF_B0"."KEY" AS "KEY", "RF_B0"."Score_CLASS_0" AS "Score_CLASS_0", "RF_B0"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_B0"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_B0"."Score_CLASS_1" AS "Score_CLASS_1", "RF_B0"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_B0"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_B0"."Score_CLASS_2" AS "Score_CLASS_2", "RF_B0"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_B0"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "90701_CODEGEN_AMHRW7_RF_B0" "RF_B0" UNION ALL SELECT "RF_B1"."KEY" AS "KEY", "RF_B1"."Score_CLASS_0" AS "Score_CLASS_0", "RF_B1"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_B1"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_B1"."Score_CLASS_1" AS "Score_CLASS_1", "RF_B1"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_B1"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_B1"."Score_CLASS_2" AS "Score_CLASS_2", "RF_B1"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_B1"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "90701_CODEGEN_OB8HWT_RF_B1" "RF_B1") "RF_EnsembleUnion") "RF_Union") "U"

-- Code For temporary table 0701_CODEGEN_YZQSQJ_RF_AVG part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "0701_CODEGEN_YZQSQJ_RF_AVG" (
	"KEY" NUMBER(19), 
	"Score_CLASS_0" BINARY_DOUBLE, 
	"Proba_CLASS_0" BINARY_DOUBLE, 
	"LogProba_CLASS_0" BINARY_DOUBLE, 
	"Score_CLASS_1" BINARY_DOUBLE, 
	"Proba_CLASS_1" BINARY_DOUBLE, 
	"LogProba_CLASS_1" BINARY_DOUBLE, 
	"Score_CLASS_2" BINARY_DOUBLE, 
	"Proba_CLASS_2" BINARY_DOUBLE, 
	"LogProba_CLASS_2" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table 0701_CODEGEN_YZQSQJ_RF_AVG part 2. Populate

INSERT INTO "0701_CODEGEN_YZQSQJ_RF_AVG" ("KEY", "Score_CLASS_0", "Proba_CLASS_0", "LogProba_CLASS_0", "Score_CLASS_1", "Proba_CLASS_1", "LogProba_CLASS_1", "Score_CLASS_2", "Proba_CLASS_2", "LogProba_CLASS_2") SELECT "U"."KEY", "U"."Score_CLASS_0", "U"."Proba_CLASS_0", "U"."LogProba_CLASS_0", "U"."Score_CLASS_1", "U"."Proba_CLASS_1", "U"."LogProba_CLASS_1", "U"."Score_CLASS_2", "U"."Proba_CLASS_2", "U"."LogProba_CLASS_2" 
FROM (SELECT "RF_avg"."KEY", "RF_avg"."Score_CLASS_0", "RF_avg"."Proba_CLASS_0", "RF_avg"."LogProba_CLASS_0", "RF_avg"."Score_CLASS_1", "RF_avg"."Proba_CLASS_1", "RF_avg"."LogProba_CLASS_1", "RF_avg"."Score_CLASS_2", "RF_avg"."Proba_CLASS_2", "RF_avg"."LogProba_CLASS_2" 
FROM (SELECT "T"."KEY" AS "KEY", CAST("T"."Score_CLASS_0" AS BINARY_DOUBLE) AS "Score_CLASS_0", CAST("T"."Proba_CLASS_0" AS BINARY_DOUBLE) AS "Proba_CLASS_0", CAST("T"."LogProba_CLASS_0" AS BINARY_DOUBLE) AS "LogProba_CLASS_0", CAST("T"."Score_CLASS_1" AS BINARY_DOUBLE) AS "Score_CLASS_1", CAST("T"."Proba_CLASS_1" AS BINARY_DOUBLE) AS "Proba_CLASS_1", CAST("T"."LogProba_CLASS_1" AS BINARY_DOUBLE) AS "LogProba_CLASS_1", CAST("T"."Score_CLASS_2" AS BINARY_DOUBLE) AS "Score_CLASS_2", CAST("T"."Proba_CLASS_2" AS BINARY_DOUBLE) AS "Proba_CLASS_2", CAST("T"."LogProba_CLASS_2" AS BINARY_DOUBLE) AS "LogProba_CLASS_2" 
FROM (SELECT "RF_Union"."KEY" AS "KEY", avg(CAST("RF_Union"."Score_CLASS_0" AS BINARY_DOUBLE)) AS "Score_CLASS_0", avg(CAST("RF_Union"."Proba_CLASS_0" AS BINARY_DOUBLE)) AS "Proba_CLASS_0", CAST(NULL AS BINARY_DOUBLE) AS "LogProba_CLASS_0", avg(CAST("RF_Union"."Score_CLASS_1" AS BINARY_DOUBLE)) AS "Score_CLASS_1", avg(CAST("RF_Union"."Proba_CLASS_1" AS BINARY_DOUBLE)) AS "Proba_CLASS_1", CAST(NULL AS BINARY_DOUBLE) AS "LogProba_CLASS_1", avg(CAST("RF_Union"."Score_CLASS_2" AS BINARY_DOUBLE)) AS "Score_CLASS_2", avg(CAST("RF_Union"."Proba_CLASS_2" AS BINARY_DOUBLE)) AS "Proba_CLASS_2", CAST(NULL AS BINARY_DOUBLE) AS "LogProba_CLASS_2" 
FROM "01_CODEGEN_XN3QTM_RF_UNION" "RF_Union" GROUP BY "RF_Union"."KEY") "T") "RF_avg") "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "RF_avg"."KEY" AS "KEY", "RF_avg"."Score_CLASS_0" AS "Score_CLASS_0", "RF_avg"."Score_CLASS_1" AS "Score_CLASS_1", "RF_avg"."Score_CLASS_2" AS "Score_CLASS_2", "RF_avg"."Proba_CLASS_0" AS "Proba_CLASS_0", "RF_avg"."Proba_CLASS_1" AS "Proba_CLASS_1", "RF_avg"."Proba_CLASS_2" AS "Proba_CLASS_2", "RF_avg"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "RF_avg"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "RF_avg"."LogProba_CLASS_2" AS "LogProba_CLASS_2", CAST(NULL AS NUMBER(19)) AS "Decision", CAST(NULL AS BINARY_DOUBLE) AS "DecisionProba" 
FROM "0701_CODEGEN_YZQSQJ_RF_AVG" "RF_avg"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_0' AS class, orig_cte."LogProba_CLASS_0" AS "LogProba", orig_cte."Proba_CLASS_0" AS "Proba", orig_cte."Score_CLASS_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_1' AS class, orig_cte."LogProba_CLASS_1" AS "LogProba", orig_cte."Proba_CLASS_1" AS "Proba", orig_cte."Score_CLASS_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_2' AS class, orig_cte."LogProba_CLASS_2" AS "LogProba", orig_cte."Proba_CLASS_2" AS "Proba", orig_cte."Score_CLASS_2" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_CLASS_0" AS "Score_CLASS_0", orig_cte."Score_CLASS_1" AS "Score_CLASS_1", orig_cte."Score_CLASS_2" AS "Score_CLASS_2", orig_cte."Proba_CLASS_0" AS "Proba_CLASS_0", orig_cte."Proba_CLASS_1" AS "Proba_CLASS_1", orig_cte."Proba_CLASS_2" AS "Proba_CLASS_2", orig_cte."LogProba_CLASS_0" AS "LogProba_CLASS_0", orig_cte."LogProba_CLASS_1" AS "LogProba_CLASS_1", orig_cte."LogProba_CLASS_2" AS "LogProba_CLASS_2", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_CLASS_0" AS "Score_CLASS_0", score_max."Score_CLASS_1" AS "Score_CLASS_1", score_max."Score_CLASS_2" AS "Score_CLASS_2", score_max."Proba_CLASS_0" AS "Proba_CLASS_0", score_max."Proba_CLASS_1" AS "Proba_CLASS_1", score_max."Proba_CLASS_2" AS "Proba_CLASS_2", score_max."LogProba_CLASS_0" AS "LogProba_CLASS_0", score_max."LogProba_CLASS_1" AS "LogProba_CLASS_1", score_max."LogProba_CLASS_2" AS "LogProba_CLASS_2", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_CLASS_0" AS "Score_CLASS_0", score_max."Score_CLASS_1" AS "Score_CLASS_1", score_max."Score_CLASS_2" AS "Score_CLASS_2", score_max."Proba_CLASS_0" AS "Proba_CLASS_0", score_max."Proba_CLASS_1" AS "Proba_CLASS_1", score_max."Proba_CLASS_2" AS "Proba_CLASS_2", score_max."LogProba_CLASS_0" AS "LogProba_CLASS_0", score_max."LogProba_CLASS_1" AS "LogProba_CLASS_1", score_max."LogProba_CLASS_2" AS "LogProba_CLASS_2", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."Proba" >= union_with_max."max_Proba" GROUP BY union_with_max."KEY") "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_CLASS_0" AS "Score_CLASS_0", arg_max_cte."Score_CLASS_1" AS "Score_CLASS_1", arg_max_cte."Score_CLASS_2" AS "Score_CLASS_2", arg_max_cte."Proba_CLASS_0" AS "Proba_CLASS_0", arg_max_cte."Proba_CLASS_1" AS "Proba_CLASS_1", arg_max_cte."Proba_CLASS_2" AS "Proba_CLASS_2", CASE WHEN (arg_max_cte."Proba_CLASS_0" IS NULL OR arg_max_cte."Proba_CLASS_0" > 0.0) THEN ln(arg_max_cte."Proba_CLASS_0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_0", CASE WHEN (arg_max_cte."Proba_CLASS_1" IS NULL OR arg_max_cte."Proba_CLASS_1" > 0.0) THEN ln(arg_max_cte."Proba_CLASS_1") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_1", CASE WHEN (arg_max_cte."Proba_CLASS_2" IS NULL OR arg_max_cte."Proba_CLASS_2" > 0.0) THEN ln(arg_max_cte."Proba_CLASS_2") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_CLASS_2", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte