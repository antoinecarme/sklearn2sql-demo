-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : CalibratedClassifierCV_sigmoid_Pipeline
-- Dataset : iris_str_tgt
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180602160143_b9m_ads_imp_1_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602160143_b9m_ads_imp_1_out  (
	"KEY" BIGINT, 
	imputer_output_2 DOUBLE PRECISION, 
	imputer_output_3 DOUBLE PRECISION, 
	imputer_output_4 DOUBLE PRECISION, 
	imputer_output_5 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602160143_b9m_ads_imp_1_out part 2. Populate

INSERT INTO tmp_20180602160143_b9m_ads_imp_1_out ("KEY", imputer_output_2, imputer_output_3, imputer_output_4, imputer_output_5) SELECT "U"."KEY", "U".imputer_output_2, "U".imputer_output_3, "U".imputer_output_4, "U".imputer_output_5 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".imputer_output_2, "ADS_imp_1_OUT".imputer_output_3, "ADS_imp_1_OUT".imputer_output_4, "ADS_imp_1_OUT".imputer_output_5 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 5.8474999999999975 ELSE "ADS"."Feature_0" END AS imputer_output_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 3.0366666666666657 ELSE "ADS"."Feature_1" END AS imputer_output_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 3.8450000000000006 ELSE "ADS"."Feature_2" END AS imputer_output_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 1.245 ELSE "ADS"."Feature_3" END AS imputer_output_5 
FROM iris_str_tgt AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180602160143_1jd_ads_sca_2_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602160143_1jd_ads_sca_2_out  (
	"KEY" BIGINT, 
	scaler_output_2 DOUBLE PRECISION, 
	scaler_output_3 DOUBLE PRECISION, 
	scaler_output_4 DOUBLE PRECISION, 
	scaler_output_5 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602160143_1jd_ads_sca_2_out part 2. Populate

INSERT INTO tmp_20180602160143_1jd_ads_sca_2_out ("KEY", scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) SELECT "U"."KEY", "U".scaler_output_2, "U".scaler_output_3, "U".scaler_output_4, "U".scaler_output_5 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_output_2, "ADS_sca_2_OUT".scaler_output_3, "ADS_sca_2_OUT".scaler_output_4, "ADS_sca_2_OUT".scaler_output_5 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".imputer_output_2 AS DOUBLE PRECISION) - CAST(5.847499999999997 AS DOUBLE PRECISION)) / CAST(0.827039146594646 AS DOUBLE PRECISION) AS scaler_output_2, (CAST("ADS_imp_1_OUT".imputer_output_3 AS DOUBLE PRECISION) - CAST(3.036666666666666 AS DOUBLE PRECISION)) / CAST(0.436259352016919 AS DOUBLE PRECISION) AS scaler_output_3, (CAST("ADS_imp_1_OUT".imputer_output_4 AS DOUBLE PRECISION) - CAST(3.845 AS DOUBLE PRECISION)) / CAST(1.709817241695732 AS DOUBLE PRECISION) AS scaler_output_4, (CAST("ADS_imp_1_OUT".imputer_output_5 AS DOUBLE PRECISION) - CAST(1.245 AS DOUBLE PRECISION)) / CAST(0.749872211335594 AS DOUBLE PRECISION) AS scaler_output_5 
FROM tmp_20180602160143_b9m_ads_imp_1_out AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Code For temporary table tmp_20180602160143_vc7_calprob_b0 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602160143_vc7_calprob_b0  (
	"KEY" BIGINT, 
	"Proba_CLASS_0" DOUBLE PRECISION, 
	"Proba_CLASS_1" DOUBLE PRECISION, 
	"Proba_CLASS_2" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602160143_vc7_calprob_b0 part 2. Populate

INSERT INTO tmp_20180602160143_vc7_calprob_b0 ("KEY", "Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2") SELECT "U"."KEY", "U"."Proba_CLASS_0", "U"."Proba_CLASS_1", "U"."Proba_CLASS_2" 
FROM (WITH "DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(-0.660112500190735 AS DOUBLE PRECISION)) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= CAST(0.529296338558197 AS DOUBLE PRECISION)) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= CAST(0.704753637313843 AS DOUBLE PRECISION)) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= CAST(0.030562859028578 AS DOUBLE PRECISION)) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(0.673448085784912 AS DOUBLE PRECISION)) THEN 7 ELSE 8 END ELSE 9 END ELSE 10 END END END AS node_id_2 
FROM tmp_20180602160143_1jd_ads_sca_2_out AS "ADS_sca_2_OUT"), 
dummy_cte AS 
(SELECT CAST(0.0 AS DOUBLE PRECISION) AS "X"), 
"DT_node_data" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_CLASS_0" AS DOUBLE PRECISION) AS "P_CLASS_0", CAST("Values"."P_CLASS_1" AS DOUBLE PRECISION) AS "P_CLASS_1", CAST("Values"."P_CLASS_2" AS DOUBLE PRECISION) AS "P_CLASS_2", CAST("Values"."D" AS DOUBLE PRECISION) AS "D", CAST("Values"."DP" AS DOUBLE PRECISION) AS "DP" 
FROM (SELECT 1 AS nid, CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_0' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte UNION ALL SELECT 3 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte UNION ALL SELECT 7 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.666666666666667 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.333333333333333 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(0.666666666666667 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte UNION ALL SELECT 8 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte UNION ALL SELECT 9 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte UNION ALL SELECT 10 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte) AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".nid AS nid, "DT_node_data"."P_CLASS_0" AS "P_CLASS_0", "DT_node_data"."P_CLASS_1" AS "P_CLASS_1", "DT_node_data"."P_CLASS_2" AS "P_CLASS_2", "DT_node_data"."D" AS "D", "DT_node_data"."DP" AS "DP" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".nid), 
"Calibrated_Model_0" AS 
(SELECT "DT_Output"."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_2", "DT_Output"."P_CLASS_0" AS "Proba_CLASS_0", "DT_Output"."P_CLASS_1" AS "Proba_CLASS_1", "DT_Output"."P_CLASS_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output"."P_CLASS_0" IS NULL OR "DT_Output"."P_CLASS_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output"."P_CLASS_0") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_0", CASE WHEN ("DT_Output"."P_CLASS_1" IS NULL OR "DT_Output"."P_CLASS_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output"."P_CLASS_1") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_1", CASE WHEN ("DT_Output"."P_CLASS_2" IS NULL OR "DT_Output"."P_CLASS_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output"."P_CLASS_2") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_2", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output"."P_CLASS_0") AS "ScoreOrProba_CLASS_0", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output"."P_CLASS_1") AS "ScoreOrProba_CLASS_1", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output"."P_CLASS_2") AS "ScoreOrProba_CLASS_2" 
FROM "DT_Output"), 
sigmoid_calibration_0 AS 
(SELECT "Calibrated_Model_0"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(5.488937334779731 AS DOUBLE PRECISION) * "Calibrated_Model_0"."ScoreOrProba_CLASS_0" + CAST(-3.091042493961387 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(4.718121478468529 AS DOUBLE PRECISION) * "Calibrated_Model_0"."ScoreOrProba_CLASS_1" + CAST(-2.95244363385918 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(4.801955584523639 AS DOUBLE PRECISION) * "Calibrated_Model_0"."ScoreOrProba_CLASS_2" + CAST(-2.43232009336447 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_2" 
FROM "Calibrated_Model_0"), 
"Normalized_Probas" AS 
(SELECT sigmoid_calibration_0."KEY" AS "KEY", sigmoid_calibration_0."Proba_CLASS_0" / (sigmoid_calibration_0."Proba_CLASS_0" + sigmoid_calibration_0."Proba_CLASS_1" + sigmoid_calibration_0."Proba_CLASS_2") AS "Proba_CLASS_0", sigmoid_calibration_0."Proba_CLASS_1" / (sigmoid_calibration_0."Proba_CLASS_0" + sigmoid_calibration_0."Proba_CLASS_1" + sigmoid_calibration_0."Proba_CLASS_2") AS "Proba_CLASS_1", sigmoid_calibration_0."Proba_CLASS_2" / (sigmoid_calibration_0."Proba_CLASS_0" + sigmoid_calibration_0."Proba_CLASS_1" + sigmoid_calibration_0."Proba_CLASS_2") AS "Proba_CLASS_2" 
FROM sigmoid_calibration_0), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(-0.593434453010559 AS DOUBLE PRECISION)) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= CAST(0.646267890930176 AS DOUBLE PRECISION)) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(0.540091991424561 AS DOUBLE PRECISION)) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= CAST(0.145173594355583 AS DOUBLE PRECISION)) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= CAST(0.704753637313843 AS DOUBLE PRECISION)) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= CAST(0.78895902633667 AS DOUBLE PRECISION)) THEN 10 ELSE 11 END ELSE 12 END END END AS node_id_2 
FROM tmp_20180602160143_1jd_ads_sca_2_out AS "ADS_sca_2_OUT"), 
dummy_cte_1 AS 
(SELECT CAST(0.0 AS DOUBLE PRECISION) AS "X"), 
"DT_node_data_1" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_CLASS_0" AS DOUBLE PRECISION) AS "P_CLASS_0", CAST("Values"."P_CLASS_1" AS DOUBLE PRECISION) AS "P_CLASS_1", CAST("Values"."P_CLASS_2" AS DOUBLE PRECISION) AS "P_CLASS_2", CAST("Values"."D" AS DOUBLE PRECISION) AS "D", CAST("Values"."DP" AS DOUBLE PRECISION) AS "DP" 
FROM (SELECT 1 AS nid, CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_0' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_1 UNION ALL SELECT 4 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_1 UNION ALL SELECT 6 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_1 UNION ALL SELECT 7 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_1 UNION ALL SELECT 10 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_1 UNION ALL SELECT 11 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_1 UNION ALL SELECT 12 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_1) AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".nid AS nid, "DT_node_data_1"."P_CLASS_0" AS "P_CLASS_0", "DT_node_data_1"."P_CLASS_1" AS "P_CLASS_1", "DT_node_data_1"."P_CLASS_2" AS "P_CLASS_2", "DT_node_data_1"."D" AS "D", "DT_node_data_1"."DP" AS "DP" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".nid), 
"Calibrated_Model_1" AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_2", "DT_Output_1"."P_CLASS_0" AS "Proba_CLASS_0", "DT_Output_1"."P_CLASS_1" AS "Proba_CLASS_1", "DT_Output_1"."P_CLASS_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_1"."P_CLASS_0" IS NULL OR "DT_Output_1"."P_CLASS_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_1"."P_CLASS_0") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_0", CASE WHEN ("DT_Output_1"."P_CLASS_1" IS NULL OR "DT_Output_1"."P_CLASS_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_1"."P_CLASS_1") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_1", CASE WHEN ("DT_Output_1"."P_CLASS_2" IS NULL OR "DT_Output_1"."P_CLASS_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_1"."P_CLASS_2") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_2", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_1"."P_CLASS_0") AS "ScoreOrProba_CLASS_0", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_1"."P_CLASS_1") AS "ScoreOrProba_CLASS_1", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_1"."P_CLASS_2") AS "ScoreOrProba_CLASS_2" 
FROM "DT_Output_1"), 
sigmoid_calibration_1 AS 
(SELECT "Calibrated_Model_1"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(5.393626322122635 AS DOUBLE PRECISION) * "Calibrated_Model_1"."ScoreOrProba_CLASS_0" + CAST(-3.091045517303994 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(5.442417342523719 AS DOUBLE PRECISION) * "Calibrated_Model_1"."ScoreOrProba_CLASS_1" + CAST(-3.044522487819658 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(5.480638259777759 AS DOUBLE PRECISION) * "Calibrated_Model_1"."ScoreOrProba_CLASS_2" + CAST(-2.995732594243071 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_2" 
FROM "Calibrated_Model_1"), 
"Normalized_Probas_1" AS 
(SELECT sigmoid_calibration_1."KEY" AS "KEY", sigmoid_calibration_1."Proba_CLASS_0" / (sigmoid_calibration_1."Proba_CLASS_0" + sigmoid_calibration_1."Proba_CLASS_1" + sigmoid_calibration_1."Proba_CLASS_2") AS "Proba_CLASS_0", sigmoid_calibration_1."Proba_CLASS_1" / (sigmoid_calibration_1."Proba_CLASS_0" + sigmoid_calibration_1."Proba_CLASS_1" + sigmoid_calibration_1."Proba_CLASS_2") AS "Proba_CLASS_1", sigmoid_calibration_1."Proba_CLASS_2" / (sigmoid_calibration_1."Proba_CLASS_0" + sigmoid_calibration_1."Proba_CLASS_1" + sigmoid_calibration_1."Proba_CLASS_2") AS "Proba_CLASS_2" 
FROM sigmoid_calibration_1), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(-0.593434453010559 AS DOUBLE PRECISION)) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(0.673448085784912 AS DOUBLE PRECISION)) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= CAST(0.646267890930176 AS DOUBLE PRECISION)) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_2 <= CAST(-1.085196495056152 AS DOUBLE PRECISION)) THEN 5 ELSE 6 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(0.540091991424561 AS DOUBLE PRECISION)) THEN 8 ELSE 9 END END ELSE 10 END END AS node_id_2 
FROM tmp_20180602160143_1jd_ads_sca_2_out AS "ADS_sca_2_OUT"), 
dummy_cte_2 AS 
(SELECT CAST(0.0 AS DOUBLE PRECISION) AS "X"), 
"DT_node_data_2" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_CLASS_0" AS DOUBLE PRECISION) AS "P_CLASS_0", CAST("Values"."P_CLASS_1" AS DOUBLE PRECISION) AS "P_CLASS_1", CAST("Values"."P_CLASS_2" AS DOUBLE PRECISION) AS "P_CLASS_2", CAST("Values"."D" AS DOUBLE PRECISION) AS "D", CAST("Values"."DP" AS DOUBLE PRECISION) AS "DP" 
FROM (SELECT 1 AS nid, CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_0' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_2 UNION ALL SELECT 5 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_2 UNION ALL SELECT 6 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_2 UNION ALL SELECT 8 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_2 UNION ALL SELECT 9 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_2 UNION ALL SELECT 10 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_2) AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".nid AS nid, "DT_node_data_2"."P_CLASS_0" AS "P_CLASS_0", "DT_node_data_2"."P_CLASS_1" AS "P_CLASS_1", "DT_node_data_2"."P_CLASS_2" AS "P_CLASS_2", "DT_node_data_2"."D" AS "D", "DT_node_data_2"."DP" AS "DP" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".nid), 
"Calibrated_Model_2" AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_2", "DT_Output_2"."P_CLASS_0" AS "Proba_CLASS_0", "DT_Output_2"."P_CLASS_1" AS "Proba_CLASS_1", "DT_Output_2"."P_CLASS_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_2"."P_CLASS_0" IS NULL OR "DT_Output_2"."P_CLASS_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_2"."P_CLASS_0") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_0", CASE WHEN ("DT_Output_2"."P_CLASS_1" IS NULL OR "DT_Output_2"."P_CLASS_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_2"."P_CLASS_1") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_1", CASE WHEN ("DT_Output_2"."P_CLASS_2" IS NULL OR "DT_Output_2"."P_CLASS_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_2"."P_CLASS_2") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_2", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_2"."P_CLASS_0") AS "ScoreOrProba_CLASS_0", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_2"."P_CLASS_1") AS "ScoreOrProba_CLASS_1", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_2"."P_CLASS_2") AS "ScoreOrProba_CLASS_2" 
FROM "DT_Output_2"), 
sigmoid_calibration_2 AS 
(SELECT "Calibrated_Model_2"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(5.393626322122635 AS DOUBLE PRECISION) * "Calibrated_Model_2"."ScoreOrProba_CLASS_0" + CAST(-3.091045517303994 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(4.346958263204309 AS DOUBLE PRECISION) * "Calibrated_Model_2"."ScoreOrProba_CLASS_1" + CAST(-1.949062502016408 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(4.310987825487246 AS DOUBLE PRECISION) * "Calibrated_Model_2"."ScoreOrProba_CLASS_2" + CAST(-2.995735836256492 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_2" 
FROM "Calibrated_Model_2"), 
"Normalized_Probas_2" AS 
(SELECT sigmoid_calibration_2."KEY" AS "KEY", sigmoid_calibration_2."Proba_CLASS_0" / (sigmoid_calibration_2."Proba_CLASS_0" + sigmoid_calibration_2."Proba_CLASS_1" + sigmoid_calibration_2."Proba_CLASS_2") AS "Proba_CLASS_0", sigmoid_calibration_2."Proba_CLASS_1" / (sigmoid_calibration_2."Proba_CLASS_0" + sigmoid_calibration_2."Proba_CLASS_1" + sigmoid_calibration_2."Proba_CLASS_2") AS "Proba_CLASS_1", sigmoid_calibration_2."Proba_CLASS_2" / (sigmoid_calibration_2."Proba_CLASS_0" + sigmoid_calibration_2."Proba_CLASS_1" + sigmoid_calibration_2."Proba_CLASS_2") AS "Proba_CLASS_2" 
FROM sigmoid_calibration_2), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(-0.593434453010559 AS DOUBLE PRECISION)) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= CAST(0.587782144546509 AS DOUBLE PRECISION)) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_5 <= CAST(0.540091991424561 AS DOUBLE PRECISION)) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= CAST(0.145173594355583 AS DOUBLE PRECISION)) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_output_3 <= CAST(-1.115544319152832 AS DOUBLE PRECISION)) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_output_4 <= CAST(0.646267890930176 AS DOUBLE PRECISION)) THEN 10 ELSE 11 END ELSE 12 END END END AS node_id_2 
FROM tmp_20180602160143_1jd_ads_sca_2_out AS "ADS_sca_2_OUT"), 
dummy_cte_3 AS 
(SELECT CAST(0.0 AS DOUBLE PRECISION) AS "X"), 
"DT_node_data_3" AS 
(SELECT "Values".nid AS nid, CAST("Values"."P_CLASS_0" AS DOUBLE PRECISION) AS "P_CLASS_0", CAST("Values"."P_CLASS_1" AS DOUBLE PRECISION) AS "P_CLASS_1", CAST("Values"."P_CLASS_2" AS DOUBLE PRECISION) AS "P_CLASS_2", CAST("Values"."D" AS DOUBLE PRECISION) AS "D", CAST("Values"."DP" AS DOUBLE PRECISION) AS "DP" 
FROM (SELECT 1 AS nid, CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_0' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_3 UNION ALL SELECT 4 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_3 UNION ALL SELECT 6 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_3 UNION ALL SELECT 7 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_3 UNION ALL SELECT 10 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_1' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_3 UNION ALL SELECT 11 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_3 UNION ALL SELECT 12 AS nid, CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_0", CAST(0.0 AS DOUBLE PRECISION) AS "P_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) AS "P_CLASS_2", 'CLASS_2' AS "D", CAST(1.0 AS DOUBLE PRECISION) AS "DP" 
FROM dummy_cte_3) AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".nid AS nid, "DT_node_data_3"."P_CLASS_0" AS "P_CLASS_0", "DT_node_data_3"."P_CLASS_1" AS "P_CLASS_1", "DT_node_data_3"."P_CLASS_2" AS "P_CLASS_2", "DT_node_data_3"."D" AS "D", "DT_node_data_3"."DP" AS "DP" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".nid), 
"Calibrated_Model_3" AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_2", "DT_Output_3"."P_CLASS_0" AS "Proba_CLASS_0", "DT_Output_3"."P_CLASS_1" AS "Proba_CLASS_1", "DT_Output_3"."P_CLASS_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_3"."P_CLASS_0" IS NULL OR "DT_Output_3"."P_CLASS_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_3"."P_CLASS_0") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_0", CASE WHEN ("DT_Output_3"."P_CLASS_1" IS NULL OR "DT_Output_3"."P_CLASS_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_3"."P_CLASS_1") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_1", CASE WHEN ("DT_Output_3"."P_CLASS_2" IS NULL OR "DT_Output_3"."P_CLASS_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln("DT_Output_3"."P_CLASS_2") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_2", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_3"."P_CLASS_0") AS "ScoreOrProba_CLASS_0", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_3"."P_CLASS_1") AS "ScoreOrProba_CLASS_1", coalesce(CAST(NULL AS DOUBLE PRECISION), "DT_Output_3"."P_CLASS_2") AS "ScoreOrProba_CLASS_2" 
FROM "DT_Output_3"), 
sigmoid_calibration_3 AS 
(SELECT "Calibrated_Model_3"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(5.347106624132866 AS DOUBLE PRECISION) * "Calibrated_Model_3"."ScoreOrProba_CLASS_0" + CAST(-3.044525810415106 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_0", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(4.295450701778824 AS DOUBLE PRECISION) * "Calibrated_Model_3"."ScoreOrProba_CLASS_1" + CAST(-1.897554927621845 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_1", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(CAST(4.214379795150796 AS DOUBLE PRECISION) * "Calibrated_Model_3"."ScoreOrProba_CLASS_2" + CAST(-2.99573366824266 AS DOUBLE PRECISION))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_CLASS_2" 
FROM "Calibrated_Model_3"), 
"Normalized_Probas_3" AS 
(SELECT sigmoid_calibration_3."KEY" AS "KEY", sigmoid_calibration_3."Proba_CLASS_0" / (sigmoid_calibration_3."Proba_CLASS_0" + sigmoid_calibration_3."Proba_CLASS_1" + sigmoid_calibration_3."Proba_CLASS_2") AS "Proba_CLASS_0", sigmoid_calibration_3."Proba_CLASS_1" / (sigmoid_calibration_3."Proba_CLASS_0" + sigmoid_calibration_3."Proba_CLASS_1" + sigmoid_calibration_3."Proba_CLASS_2") AS "Proba_CLASS_1", sigmoid_calibration_3."Proba_CLASS_2" / (sigmoid_calibration_3."Proba_CLASS_0" + sigmoid_calibration_3."Proba_CLASS_1" + sigmoid_calibration_3."Proba_CLASS_2") AS "Proba_CLASS_2" 
FROM sigmoid_calibration_3)
 SELECT "CalProb_B0"."KEY", "CalProb_B0"."Proba_CLASS_0", "CalProb_B0"."Proba_CLASS_1", "CalProb_B0"."Proba_CLASS_2" 
FROM (SELECT "CalProb_esu_0"."KEY" AS "KEY", "CalProb_esu_0"."Proba_CLASS_0" AS "Proba_CLASS_0", "CalProb_esu_0"."Proba_CLASS_1" AS "Proba_CLASS_1", "CalProb_esu_0"."Proba_CLASS_2" AS "Proba_CLASS_2" 
FROM (SELECT "Normalized_Probas"."KEY" AS "KEY", "Normalized_Probas"."Proba_CLASS_0" AS "Proba_CLASS_0", "Normalized_Probas"."Proba_CLASS_1" AS "Proba_CLASS_1", "Normalized_Probas"."Proba_CLASS_2" AS "Proba_CLASS_2" 
FROM "Normalized_Probas" UNION ALL SELECT "Normalized_Probas_1"."KEY" AS "KEY", "Normalized_Probas_1"."Proba_CLASS_0" AS "Proba_CLASS_0", "Normalized_Probas_1"."Proba_CLASS_1" AS "Proba_CLASS_1", "Normalized_Probas_1"."Proba_CLASS_2" AS "Proba_CLASS_2" 
FROM "Normalized_Probas_1" UNION ALL SELECT "Normalized_Probas_2"."KEY" AS "KEY", "Normalized_Probas_2"."Proba_CLASS_0" AS "Proba_CLASS_0", "Normalized_Probas_2"."Proba_CLASS_1" AS "Proba_CLASS_1", "Normalized_Probas_2"."Proba_CLASS_2" AS "Proba_CLASS_2" 
FROM "Normalized_Probas_2" UNION ALL SELECT "Normalized_Probas_3"."KEY" AS "KEY", "Normalized_Probas_3"."Proba_CLASS_0" AS "Proba_CLASS_0", "Normalized_Probas_3"."Proba_CLASS_1" AS "Proba_CLASS_1", "Normalized_Probas_3"."Proba_CLASS_2" AS "Proba_CLASS_2" 
FROM "Normalized_Probas_3") AS "CalProb_esu_0") AS "CalProb_B0") AS "U"

-- Code For temporary table tmp_20180602160143_i81_calprob_avg part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602160143_i81_calprob_avg  (
	"KEY" BIGINT, 
	"Proba_CLASS_0" DOUBLE PRECISION, 
	"Proba_CLASS_1" DOUBLE PRECISION, 
	"Proba_CLASS_2" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602160143_i81_calprob_avg part 2. Populate

INSERT INTO tmp_20180602160143_i81_calprob_avg ("KEY", "Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2") SELECT "U"."KEY", "U"."Proba_CLASS_0", "U"."Proba_CLASS_1", "U"."Proba_CLASS_2" 
FROM (WITH "CalProb_Union" AS 
(SELECT "CalProb_EnsembleUnion"."KEY" AS "KEY", "CalProb_EnsembleUnion"."Proba_CLASS_0" AS "Proba_CLASS_0", "CalProb_EnsembleUnion"."Proba_CLASS_1" AS "Proba_CLASS_1", "CalProb_EnsembleUnion"."Proba_CLASS_2" AS "Proba_CLASS_2" 
FROM (SELECT "CalProb_B0"."KEY" AS "KEY", "CalProb_B0"."Proba_CLASS_0" AS "Proba_CLASS_0", "CalProb_B0"."Proba_CLASS_1" AS "Proba_CLASS_1", "CalProb_B0"."Proba_CLASS_2" AS "Proba_CLASS_2" 
FROM tmp_20180602160143_vc7_calprob_b0 AS "CalProb_B0") AS "CalProb_EnsembleUnion")
 SELECT "CalProb_avg"."KEY", "CalProb_avg"."Proba_CLASS_0", "CalProb_avg"."Proba_CLASS_1", "CalProb_avg"."Proba_CLASS_2" 
FROM (SELECT "T"."KEY" AS "KEY", CAST("T"."Proba_CLASS_0" AS DOUBLE PRECISION) AS "Proba_CLASS_0", CAST("T"."Proba_CLASS_1" AS DOUBLE PRECISION) AS "Proba_CLASS_1", CAST("T"."Proba_CLASS_2" AS DOUBLE PRECISION) AS "Proba_CLASS_2" 
FROM (SELECT "CalProb_Union"."KEY" AS "KEY", avg(CAST("CalProb_Union"."Proba_CLASS_0" AS DOUBLE PRECISION)) AS "Proba_CLASS_0", avg(CAST("CalProb_Union"."Proba_CLASS_1" AS DOUBLE PRECISION)) AS "Proba_CLASS_1", avg(CAST("CalProb_Union"."Proba_CLASS_2" AS DOUBLE PRECISION)) AS "Proba_CLASS_2" 
FROM "CalProb_Union" GROUP BY "CalProb_Union"."KEY") AS "T") AS "CalProb_avg") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "CalProb_avg"."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_CLASS_2", "CalProb_avg"."Proba_CLASS_0" AS "Proba_CLASS_0", "CalProb_avg"."Proba_CLASS_1" AS "Proba_CLASS_1", "CalProb_avg"."Proba_CLASS_2" AS "Proba_CLASS_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_CLASS_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_CLASS_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_CLASS_2", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM tmp_20180602160143_i81_calprob_avg AS "CalProb_avg"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_0' AS "class", orig_cte."LogProba_CLASS_0" AS "LogProba", orig_cte."Proba_CLASS_0" AS "Proba", orig_cte."Score_CLASS_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_1' AS "class", orig_cte."LogProba_CLASS_1" AS "LogProba", orig_cte."Proba_CLASS_1" AS "Proba", orig_cte."Score_CLASS_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_2' AS "class", orig_cte."LogProba_CLASS_2" AS "LogProba", orig_cte."Proba_CLASS_2" AS "Proba", orig_cte."Score_CLASS_2" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_CLASS_0" AS "Score_CLASS_0", orig_cte."Score_CLASS_1" AS "Score_CLASS_1", orig_cte."Score_CLASS_2" AS "Score_CLASS_2", orig_cte."Proba_CLASS_0" AS "Proba_CLASS_0", orig_cte."Proba_CLASS_1" AS "Proba_CLASS_1", orig_cte."Proba_CLASS_2" AS "Proba_CLASS_2", orig_cte."LogProba_CLASS_0" AS "LogProba_CLASS_0", orig_cte."LogProba_CLASS_1" AS "LogProba_CLASS_1", orig_cte."LogProba_CLASS_2" AS "LogProba_CLASS_2", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_CLASS_0" AS "Score_CLASS_0", score_max."Score_CLASS_1" AS "Score_CLASS_1", score_max."Score_CLASS_2" AS "Score_CLASS_2", score_max."Proba_CLASS_0" AS "Proba_CLASS_0", score_max."Proba_CLASS_1" AS "Proba_CLASS_1", score_max."Proba_CLASS_2" AS "Proba_CLASS_2", score_max."LogProba_CLASS_0" AS "LogProba_CLASS_0", score_max."LogProba_CLASS_1" AS "LogProba_CLASS_1", score_max."LogProba_CLASS_2" AS "LogProba_CLASS_2", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_CLASS_0" AS "Score_CLASS_0", score_max."Score_CLASS_1" AS "Score_CLASS_1", score_max."Score_CLASS_2" AS "Score_CLASS_2", score_max."Proba_CLASS_0" AS "Proba_CLASS_0", score_max."Proba_CLASS_1" AS "Proba_CLASS_1", score_max."Proba_CLASS_2" AS "Proba_CLASS_2", score_max."LogProba_CLASS_0" AS "LogProba_CLASS_0", score_max."LogProba_CLASS_1" AS "LogProba_CLASS_1", score_max."LogProba_CLASS_2" AS "LogProba_CLASS_2", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max."class") AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."Proba" >= union_with_max."max_Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_CLASS_0" AS "Score_CLASS_0", arg_max_cte."Score_CLASS_1" AS "Score_CLASS_1", arg_max_cte."Score_CLASS_2" AS "Score_CLASS_2", arg_max_cte."Proba_CLASS_0" AS "Proba_CLASS_0", arg_max_cte."Proba_CLASS_1" AS "Proba_CLASS_1", arg_max_cte."Proba_CLASS_2" AS "Proba_CLASS_2", CASE WHEN (arg_max_cte."Proba_CLASS_0" IS NULL OR arg_max_cte."Proba_CLASS_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_CLASS_0") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_0", CASE WHEN (arg_max_cte."Proba_CLASS_1" IS NULL OR arg_max_cte."Proba_CLASS_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_CLASS_1") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_1", CASE WHEN (arg_max_cte."Proba_CLASS_2" IS NULL OR arg_max_cte."Proba_CLASS_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_CLASS_2") ELSE -1.79769313486231e+308 END AS "LogProba_CLASS_2", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte