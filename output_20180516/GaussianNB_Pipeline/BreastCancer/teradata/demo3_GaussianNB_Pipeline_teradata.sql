-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : GaussianNB_Pipeline
-- Dataset : BreastCancer
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180516111639_codegen_mtaq1f_ads_imp_1_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516111639_codegen_mtaq1f_ads_imp_1_out  (
	"KEY" BIGINT, 
	impter_2 DOUBLE PRECISION, 
	impter_3 DOUBLE PRECISION, 
	impter_4 DOUBLE PRECISION, 
	impter_5 DOUBLE PRECISION, 
	impter_6 DOUBLE PRECISION, 
	impter_7 DOUBLE PRECISION, 
	impter_8 DOUBLE PRECISION, 
	impter_9 DOUBLE PRECISION, 
	impter_10 DOUBLE PRECISION, 
	impter_11 DOUBLE PRECISION, 
	impter_12 DOUBLE PRECISION, 
	impter_13 DOUBLE PRECISION, 
	impter_14 DOUBLE PRECISION, 
	impter_15 DOUBLE PRECISION, 
	impter_16 DOUBLE PRECISION, 
	impter_17 DOUBLE PRECISION, 
	impter_18 DOUBLE PRECISION, 
	impter_19 DOUBLE PRECISION, 
	impter_20 DOUBLE PRECISION, 
	impter_21 DOUBLE PRECISION, 
	impter_22 DOUBLE PRECISION, 
	impter_23 DOUBLE PRECISION, 
	impter_24 DOUBLE PRECISION, 
	impter_25 DOUBLE PRECISION, 
	impter_26 DOUBLE PRECISION, 
	impter_27 DOUBLE PRECISION, 
	impter_28 DOUBLE PRECISION, 
	impter_29 DOUBLE PRECISION, 
	impter_30 DOUBLE PRECISION, 
	impter_31 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516111639_codegen_mtaq1f_ads_imp_1_out part 2. Populate

INSERT INTO tmp_20180516111639_codegen_mtaq1f_ads_imp_1_out ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11, impter_12, impter_13, impter_14, impter_15, impter_16, impter_17, impter_18, impter_19, impter_20, impter_21, impter_22, impter_23, impter_24, impter_25, impter_26, impter_27, impter_28, impter_29, impter_30, impter_31) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11, "U".impter_12, "U".impter_13, "U".impter_14, "U".impter_15, "U".impter_16, "U".impter_17, "U".impter_18, "U".impter_19, "U".impter_20, "U".impter_21, "U".impter_22, "U".impter_23, "U".impter_24, "U".impter_25, "U".impter_26, "U".impter_27, "U".impter_28, "U".impter_29, "U".impter_30, "U".impter_31 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11, "ADS_imp_1_OUT".impter_12, "ADS_imp_1_OUT".impter_13, "ADS_imp_1_OUT".impter_14, "ADS_imp_1_OUT".impter_15, "ADS_imp_1_OUT".impter_16, "ADS_imp_1_OUT".impter_17, "ADS_imp_1_OUT".impter_18, "ADS_imp_1_OUT".impter_19, "ADS_imp_1_OUT".impter_20, "ADS_imp_1_OUT".impter_21, "ADS_imp_1_OUT".impter_22, "ADS_imp_1_OUT".impter_23, "ADS_imp_1_OUT".impter_24, "ADS_imp_1_OUT".impter_25, "ADS_imp_1_OUT".impter_26, "ADS_imp_1_OUT".impter_27, "ADS_imp_1_OUT".impter_28, "ADS_imp_1_OUT".impter_29, "ADS_imp_1_OUT".impter_30, "ADS_imp_1_OUT".impter_31 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 14.077712087912083 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 19.03905494505495 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 91.66178021978023 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 650.9676923076925 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.09642184615384615 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.10441613186813191 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.08826232681318694 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.048516399999999966 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.1815885714285715 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.06294030769230768 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.4099173626373627 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 1.2170694505494501 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 2.90524901098901 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 40.87988571428572 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.007055971428571433 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.025567830769230776 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.03199925626373623 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.011972369230769237 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.020896200000000014 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.0038465518681318647 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN 16.17776483516484 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN 25.26505494505494 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 106.68156043956041 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 870.8639560439567 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN 0.1318275604395605 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN 0.24991806593406582 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN 0.2654615934065932 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 0.11348798021978022 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 0.2897881318681319 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 0.08364145054945049 ELSE "ADS"."Feature_29" END AS impter_31 
FROM "BreastCancer" AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180516111639_codegen_h9dn21_ads_sca_2_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516111639_codegen_h9dn21_ads_sca_2_out  (
	"KEY" BIGINT, 
	scaler_2 DOUBLE PRECISION, 
	scaler_3 DOUBLE PRECISION, 
	scaler_4 DOUBLE PRECISION, 
	scaler_5 DOUBLE PRECISION, 
	scaler_6 DOUBLE PRECISION, 
	scaler_7 DOUBLE PRECISION, 
	scaler_8 DOUBLE PRECISION, 
	scaler_9 DOUBLE PRECISION, 
	scaler_10 DOUBLE PRECISION, 
	scaler_11 DOUBLE PRECISION, 
	scaler_12 DOUBLE PRECISION, 
	scaler_13 DOUBLE PRECISION, 
	scaler_14 DOUBLE PRECISION, 
	scaler_15 DOUBLE PRECISION, 
	scaler_16 DOUBLE PRECISION, 
	scaler_17 DOUBLE PRECISION, 
	scaler_18 DOUBLE PRECISION, 
	scaler_19 DOUBLE PRECISION, 
	scaler_20 DOUBLE PRECISION, 
	scaler_21 DOUBLE PRECISION, 
	scaler_22 DOUBLE PRECISION, 
	scaler_23 DOUBLE PRECISION, 
	scaler_24 DOUBLE PRECISION, 
	scaler_25 DOUBLE PRECISION, 
	scaler_26 DOUBLE PRECISION, 
	scaler_27 DOUBLE PRECISION, 
	scaler_28 DOUBLE PRECISION, 
	scaler_29 DOUBLE PRECISION, 
	scaler_30 DOUBLE PRECISION, 
	scaler_31 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516111639_codegen_h9dn21_ads_sca_2_out part 2. Populate

INSERT INTO tmp_20180516111639_codegen_h9dn21_ads_sca_2_out ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11, "U".scaler_12, "U".scaler_13, "U".scaler_14, "U".scaler_15, "U".scaler_16, "U".scaler_17, "U".scaler_18, "U".scaler_19, "U".scaler_20, "U".scaler_21, "U".scaler_22, "U".scaler_23, "U".scaler_24, "U".scaler_25, "U".scaler_26, "U".scaler_27, "U".scaler_28, "U".scaler_29, "U".scaler_30, "U".scaler_31 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11, "ADS_sca_2_OUT".scaler_12, "ADS_sca_2_OUT".scaler_13, "ADS_sca_2_OUT".scaler_14, "ADS_sca_2_OUT".scaler_15, "ADS_sca_2_OUT".scaler_16, "ADS_sca_2_OUT".scaler_17, "ADS_sca_2_OUT".scaler_18, "ADS_sca_2_OUT".scaler_19, "ADS_sca_2_OUT".scaler_20, "ADS_sca_2_OUT".scaler_21, "ADS_sca_2_OUT".scaler_22, "ADS_sca_2_OUT".scaler_23, "ADS_sca_2_OUT".scaler_24, "ADS_sca_2_OUT".scaler_25, "ADS_sca_2_OUT".scaler_26, "ADS_sca_2_OUT".scaler_27, "ADS_sca_2_OUT".scaler_28, "ADS_sca_2_OUT".scaler_29, "ADS_sca_2_OUT".scaler_30, "ADS_sca_2_OUT".scaler_31 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS DOUBLE PRECISION) - CAST(14.077712087912081 AS DOUBLE PRECISION)) / CAST(3.545149298700082 AS DOUBLE PRECISION) AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS DOUBLE PRECISION) - CAST(19.039054945054946 AS DOUBLE PRECISION)) / CAST(4.16229715042182 AS DOUBLE PRECISION) AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS DOUBLE PRECISION) - CAST(91.66178021978023 AS DOUBLE PRECISION)) / CAST(24.503971943475648 AS DOUBLE PRECISION) AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS DOUBLE PRECISION) - CAST(650.9676923076925 AS DOUBLE PRECISION)) / CAST(355.702823163891 AS DOUBLE PRECISION) AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS DOUBLE PRECISION) - CAST(0.096421846153846 AS DOUBLE PRECISION)) / CAST(0.014197819663072 AS DOUBLE PRECISION) AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS DOUBLE PRECISION) - CAST(0.104416131868132 AS DOUBLE PRECISION)) / CAST(0.053403694669734 AS DOUBLE PRECISION) AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS DOUBLE PRECISION) - CAST(0.088262326813187 AS DOUBLE PRECISION)) / CAST(0.081912001626314 AS DOUBLE PRECISION) AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS DOUBLE PRECISION) - CAST(0.0485164 AS DOUBLE PRECISION)) / CAST(0.03937311739673 AS DOUBLE PRECISION) AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS DOUBLE PRECISION) - CAST(0.181588571428572 AS DOUBLE PRECISION)) / CAST(0.027790058328748 AS DOUBLE PRECISION) AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS DOUBLE PRECISION) - CAST(0.062940307692308 AS DOUBLE PRECISION)) / CAST(0.007019354586173 AS DOUBLE PRECISION) AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS DOUBLE PRECISION) - CAST(0.409917362637363 AS DOUBLE PRECISION)) / CAST(0.29120400836827 AS DOUBLE PRECISION) AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS DOUBLE PRECISION) - CAST(1.21706945054945 AS DOUBLE PRECISION)) / CAST(0.536389639633626 AS DOUBLE PRECISION) AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS DOUBLE PRECISION) - CAST(2.90524901098901 AS DOUBLE PRECISION)) / CAST(2.142494429980862 AS DOUBLE PRECISION) AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS DOUBLE PRECISION) - CAST(40.87988571428572 AS DOUBLE PRECISION)) / CAST(48.224754479577314 AS DOUBLE PRECISION) AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS DOUBLE PRECISION) - CAST(0.007055971428571 AS DOUBLE PRECISION)) / CAST(0.002863651656569 AS DOUBLE PRECISION) AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS DOUBLE PRECISION) - CAST(0.025567830769231 AS DOUBLE PRECISION)) / CAST(0.017947013631032 AS DOUBLE PRECISION) AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS DOUBLE PRECISION) - CAST(0.031999256263736 AS DOUBLE PRECISION)) / CAST(0.031664936721364 AS DOUBLE PRECISION) AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS DOUBLE PRECISION) - CAST(0.011972369230769 AS DOUBLE PRECISION)) / CAST(0.006392005589397 AS DOUBLE PRECISION) AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS DOUBLE PRECISION) - CAST(0.0208962 AS DOUBLE PRECISION)) / CAST(0.008582910079869 AS DOUBLE PRECISION) AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS DOUBLE PRECISION) - CAST(0.003846551868132 AS DOUBLE PRECISION)) / CAST(0.002743607586619 AS DOUBLE PRECISION) AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS DOUBLE PRECISION) - CAST(16.17776483516484 AS DOUBLE PRECISION)) / CAST(4.817458816201383 AS DOUBLE PRECISION) AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS DOUBLE PRECISION) - CAST(25.26505494505494 AS DOUBLE PRECISION)) / CAST(5.92332412866667 AS DOUBLE PRECISION) AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS DOUBLE PRECISION) - CAST(106.68156043956041 AS DOUBLE PRECISION)) / CAST(33.70385837605481 AS DOUBLE PRECISION) AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS DOUBLE PRECISION) - CAST(870.8639560439567 AS DOUBLE PRECISION)) / CAST(566.9950559872813 AS DOUBLE PRECISION) AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS DOUBLE PRECISION) - CAST(0.131827560439561 AS DOUBLE PRECISION)) / CAST(0.022748207522289 AS DOUBLE PRECISION) AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS DOUBLE PRECISION) - CAST(0.249918065934066 AS DOUBLE PRECISION)) / CAST(0.15246893644279 AS DOUBLE PRECISION) AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS DOUBLE PRECISION) - CAST(0.265461593406593 AS DOUBLE PRECISION)) / CAST(0.206925686782041 AS DOUBLE PRECISION) AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS DOUBLE PRECISION) - CAST(0.11348798021978 AS DOUBLE PRECISION)) / CAST(0.066381412785207 AS DOUBLE PRECISION) AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS DOUBLE PRECISION) - CAST(0.289788131868132 AS DOUBLE PRECISION)) / CAST(0.062204706650519 AS DOUBLE PRECISION) AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS DOUBLE PRECISION) - CAST(0.08364145054945 AS DOUBLE PRECISION)) / CAST(0.017065145806948 AS DOUBLE PRECISION) AS scaler_31 
FROM tmp_20180516111639_codegen_mtaq1f_ads_imp_1_out AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Code For temporary table tmp_20180516111640_codegen_091m4o_naivebayes_scores part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516111640_codegen_091m4o_naivebayes_scores  (
	"KEY" BIGINT, 
	"Score_0" DOUBLE PRECISION, 
	"Score_1" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516111640_codegen_091m4o_naivebayes_scores part 2. Populate

INSERT INTO tmp_20180516111640_codegen_091m4o_naivebayes_scores ("KEY", "Score_0", "Score_1") SELECT "U"."KEY", "U"."Score_0", "U"."Score_1" 
FROM (WITH centered_data AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) - CAST(1.004957792156816 AS DOUBLE PRECISION) AS scaler_2_0, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) - CAST(0.527234715744082 AS DOUBLE PRECISION) AS scaler_3_0, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) - CAST(1.022465657323391 AS DOUBLE PRECISION) AS scaler_4_0, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) - CAST(0.975548716779298 AS DOUBLE PRECISION) AS scaler_5_0, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) - CAST(0.510978376843531 AS DOUBLE PRECISION) AS scaler_6_0, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) - CAST(0.845499658986285 AS DOUBLE PRECISION) AS scaler_7_0, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) - CAST(0.950156682068075 AS DOUBLE PRECISION) AS scaler_8_0, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) - CAST(1.079373194450925 AS DOUBLE PRECISION) AS scaler_9_0, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) - CAST(0.480484006671388 AS DOUBLE PRECISION) AS scaler_10_0, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) - CAST(0.008254648911234 AS DOUBLE PRECISION) AS scaler_11_0, CAST("ADS_sca_2_OUT".scaler_12 AS DOUBLE PRECISION) - CAST(0.796312913623698 AS DOUBLE PRECISION) AS scaler_12_0, CAST("ADS_sca_2_OUT".scaler_13 AS DOUBLE PRECISION) - CAST(0.025859092767012 AS DOUBLE PRECISION) AS scaler_13_0, CAST("ADS_sca_2_OUT".scaler_14 AS DOUBLE PRECISION) - CAST(0.782934235691792 AS DOUBLE PRECISION) AS scaler_14_0, CAST("ADS_sca_2_OUT".scaler_15 AS DOUBLE PRECISION) - CAST(0.75274596371636 AS DOUBLE PRECISION) AS scaler_15_0, CAST("ADS_sca_2_OUT".scaler_16 AS DOUBLE PRECISION) - CAST(-0.078790197143507 AS DOUBLE PRECISION) AS scaler_16_0, CAST("ADS_sca_2_OUT".scaler_17 AS DOUBLE PRECISION) - CAST(0.41895691591653 AS DOUBLE PRECISION) AS scaler_17_0, CAST("ADS_sca_2_OUT".scaler_18 AS DOUBLE PRECISION) - CAST(0.323727355796287 AS DOUBLE PRECISION) AS scaler_18_0, CAST("ADS_sca_2_OUT".scaler_19 AS DOUBLE PRECISION) - CAST(0.577883884419358 AS DOUBLE PRECISION) AS scaler_19_0, CAST("ADS_sca_2_OUT".scaler_20 AS DOUBLE PRECISION) - CAST(0.054665316965214 AS DOUBLE PRECISION) AS scaler_20_0, CAST("ADS_sca_2_OUT".scaler_21 AS DOUBLE PRECISION) - CAST(0.106685950022771 AS DOUBLE PRECISION) AS scaler_21_0, CAST("ADS_sca_2_OUT".scaler_22 AS DOUBLE PRECISION) - CAST(1.071438358222467 AS DOUBLE PRECISION) AS scaler_22_0, CAST("ADS_sca_2_OUT".scaler_23 AS DOUBLE PRECISION) - CAST(0.581178318148185 AS DOUBLE PRECISION) AS scaler_23_0, CAST("ADS_sca_2_OUT".scaler_24 AS DOUBLE PRECISION) - CAST(1.080004376777838 AS DOUBLE PRECISION) AS scaler_24_0, CAST("ADS_sca_2_OUT".scaler_25 AS DOUBLE PRECISION) - CAST(1.012900884922225 AS DOUBLE PRECISION) AS scaler_25_0, CAST("ADS_sca_2_OUT".scaler_26 AS DOUBLE PRECISION) - CAST(0.581578880334937 AS DOUBLE PRECISION) AS scaler_26_0, CAST("ADS_sca_2_OUT".scaler_27 AS DOUBLE PRECISION) - CAST(0.832143251773391 AS DOUBLE PRECISION) AS scaler_27_0, CAST("ADS_sca_2_OUT".scaler_28 AS DOUBLE PRECISION) - CAST(0.890731157932798 AS DOUBLE PRECISION) AS scaler_28_0, CAST("ADS_sca_2_OUT".scaler_29 AS DOUBLE PRECISION) - CAST(1.097339665184901 AS DOUBLE PRECISION) AS scaler_29_0, CAST("ADS_sca_2_OUT".scaler_30 AS DOUBLE PRECISION) - CAST(0.579045703635154 AS DOUBLE PRECISION) AS scaler_30_0, CAST("ADS_sca_2_OUT".scaler_31 AS DOUBLE PRECISION) - CAST(0.446981205835578 AS DOUBLE PRECISION) AS scaler_31_0, CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) - CAST(-0.545061853373186 AS DOUBLE PRECISION) AS scaler_2_1, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) - CAST(-0.285957811928995 AS DOUBLE PRECISION) AS scaler_3_1, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) - CAST(-0.554557644649976 AS DOUBLE PRECISION) AS scaler_4_1, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) - CAST(-0.529111168422671 AS DOUBLE PRECISION) AS scaler_5_1, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) - CAST(-0.277140814559203 AS DOUBLE PRECISION) AS scaler_6_1, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) - CAST(-0.458576086229851 AS DOUBLE PRECISION) AS scaler_7_1, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) - CAST(-0.515339217392857 AS DOUBLE PRECISION) AS scaler_8_1, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) - CAST(-0.585422749532704 AS DOUBLE PRECISION) AS scaler_9_1, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) - CAST(-0.260601495143807 AS DOUBLE PRECISION) AS scaler_10_1, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) - CAST(-0.004477097714566 AS DOUBLE PRECISION) AS scaler_11_1, CAST("ADS_sca_2_OUT".scaler_12 AS DOUBLE PRECISION) - CAST(-0.431898529423024 AS DOUBLE PRECISION) AS scaler_12_1, CAST("ADS_sca_2_OUT".scaler_13 AS DOUBLE PRECISION) - CAST(-0.014025270653293 AS DOUBLE PRECISION) AS scaler_13_1, CAST("ADS_sca_2_OUT".scaler_14 AS DOUBLE PRECISION) - CAST(-0.424642297324361 AS DOUBLE PRECISION) AS scaler_14_1, CAST("ADS_sca_2_OUT".scaler_15 AS DOUBLE PRECISION) - CAST(-0.40826899726989 AS DOUBLE PRECISION) AS scaler_15_1, CAST("ADS_sca_2_OUT".scaler_16 AS DOUBLE PRECISION) - CAST(0.042733666247323 AS DOUBLE PRECISION) AS scaler_16_1, CAST("ADS_sca_2_OUT".scaler_17 AS DOUBLE PRECISION) - CAST(-0.227230869649644 AS DOUBLE PRECISION) AS scaler_17_1, CAST("ADS_sca_2_OUT".scaler_18 AS DOUBLE PRECISION) - CAST(-0.175580938736968 AS DOUBLE PRECISION) AS scaler_18_1, CAST("ADS_sca_2_OUT".scaler_19 AS DOUBLE PRECISION) - CAST(-0.313428547481687 AS DOUBLE PRECISION) AS scaler_19_1, CAST("ADS_sca_2_OUT".scaler_20 AS DOUBLE PRECISION) - CAST(-0.029648985472661 AS DOUBLE PRECISION) AS scaler_20_1, CAST("ADS_sca_2_OUT".scaler_21 AS DOUBLE PRECISION) - CAST(-0.057863566114043 AS DOUBLE PRECISION) AS scaler_21_1, CAST("ADS_sca_2_OUT".scaler_22 AS DOUBLE PRECISION) - CAST(-0.581119109544391 AS DOUBLE PRECISION) AS scaler_22_1, CAST("ADS_sca_2_OUT".scaler_23 AS DOUBLE PRECISION) - CAST(-0.315215358995624 AS DOUBLE PRECISION) AS scaler_23_1, CAST("ADS_sca_2_OUT".scaler_24 AS DOUBLE PRECISION) - CAST(-0.585765085710012 AS DOUBLE PRECISION) AS scaler_24_1, CAST("ADS_sca_2_OUT".scaler_25 AS DOUBLE PRECISION) - CAST(-0.549369971483242 AS DOUBLE PRECISION) AS scaler_25_1, CAST("ADS_sca_2_OUT".scaler_26 AS DOUBLE PRECISION) - CAST(-0.315432613063021 AS DOUBLE PRECISION) AS scaler_26_1, CAST("ADS_sca_2_OUT".scaler_27 AS DOUBLE PRECISION) - CAST(-0.451331933165228 AS DOUBLE PRECISION) AS scaler_27_1, CAST("ADS_sca_2_OUT".scaler_28 AS DOUBLE PRECISION) - CAST(-0.483108424641516 AS DOUBLE PRECISION) AS scaler_28_1, CAST("ADS_sca_2_OUT".scaler_29 AS DOUBLE PRECISION) - CAST(-0.595167276032488 AS DOUBLE PRECISION) AS scaler_29_1, CAST("ADS_sca_2_OUT".scaler_30 AS DOUBLE PRECISION) - CAST(-0.314058686717373 AS DOUBLE PRECISION) AS scaler_30_1, CAST("ADS_sca_2_OUT".scaler_31 AS DOUBLE PRECISION) - CAST(-0.242430484520986 AS DOUBLE PRECISION) AS scaler_31_1 
FROM tmp_20180516111639_codegen_h9dn21_ads_sca_2_out AS "ADS_sca_2_OUT"), 
dummy_cte AS 
(SELECT CAST(0.0 AS DOUBLE PRECISION) AS "X"), 
"NaiveBayes_data" AS 
(SELECT "Values"."KEY" AS "KEY", CAST("Values"."Feature" AS DOUBLE PRECISION) AS "Feature", CAST("Values".log_proba_0 AS DOUBLE PRECISION) AS log_proba_0, CAST("Values".log_proba_1 AS DOUBLE PRECISION) AS log_proba_1 
FROM (SELECT centered_data."KEY" AS "KEY", 0 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.641378520955835 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_2_0 * centered_data.scaler_2_0) / CAST(0.821602526353455 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.459159419731757 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_2_1 * centered_data.scaler_2_1) / CAST(0.251901372593233 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 1 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.600265587768098 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_3_0 * centered_data.scaler_3_0) / CAST(0.788508984171135 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.712504570468895 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_3_1 * centered_data.scaler_3_1) / CAST(0.882168237287968 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 2 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.617702742616231 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_4_0 * centered_data.scaler_4_0) / CAST(0.802378912034649 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.379588158443574 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_4_1 * centered_data.scaler_4_1) / CAST(0.232633992538357 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 3 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.947179988131112 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_5_0 * centered_data.scaler_5_0) / CAST(1.115500208410354 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(-0.119534677731615 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_5_1 * centered_data.scaler_5_1) / CAST(0.141223470771705 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 4 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.663596769121622 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_6_0 * centered_data.scaler_6_0) / CAST(0.840061397723674 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.696689430753847 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_6_1 * centered_data.scaler_6_1) / CAST(0.86832636742393 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 5 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.884586294697884 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_7_0 * centered_data.scaler_7_0) / CAST(1.04781728915337 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.859836585840107 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_7_1 * centered_data.scaler_7_1) / CAST(0.376047249257141 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 6 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.735191974496684 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_8_0 * centered_data.scaler_8_0) / CAST(0.902411105296628 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.626214980619265 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_8_1 * centered_data.scaler_8_1) / CAST(0.297702061630345 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 7 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.56027877613823 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_9_0 * centered_data.scaler_9_0) / CAST(0.757601096126135 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(-0.014517037017179 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_9_1 * centered_data.scaler_9_1) / CAST(0.156861174536171 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 8 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.854661381823106 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_10_0 * centered_data.scaler_10_0) / CAST(1.016925963414268 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.611844130081231 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_10_1 * centered_data.scaler_10_1) / CAST(0.797691828193213 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 9 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.044886537308597 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_11_0 * centered_data.scaler_11_0) / CAST(1.229994220876935 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.704574644136445 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_11_1 * centered_data.scaler_11_1) / CAST(0.875200371996417 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 10 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.290109494933003 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_12_0 * centered_data.scaler_12_0) / CAST(1.571817241284634 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.001533037490926 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_12_1 * centered_data.scaler_12_1) / CAST(0.159399120705417 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 11 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.766236351316072 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_13_0 * centered_data.scaler_13_0) / CAST(0.930865281583597 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.874148636052879 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_13_1 * centered_data.scaler_13_1) / CAST(1.036937408979804 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 12 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.336180792693972 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_14_0 * centered_data.scaler_14_0) / CAST(1.645926958773616 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(-0.150783353697861 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_14_1 * centered_data.scaler_14_1) / CAST(0.136878662591885 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 13 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.482316568303756 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_15_0 * centered_data.scaler_15_0) / CAST(1.904919026487466 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(-1.509114902463237 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_15_1 * centered_data.scaler_15_1) / CAST(0.035190047815362 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 14 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.586570751630816 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_16_0 * centered_data.scaler_16_0) / CAST(0.777784088305227 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.947028042256666 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_16_1 * centered_data.scaler_16_1) / CAST(1.115330725632172 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 15 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.798643680514931 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_17_0 * centered_data.scaler_17_0) / CAST(0.961526276287659 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.703240255558072 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_17_1 * centered_data.scaler_17_1) / CAST(0.874033293457547 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 16 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.00455855895793 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_18_0 * centered_data.scaler_18_0) / CAST(0.434604651856564 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.035896503017966 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_18_1 * centered_data.scaler_18_1) / CAST(1.218986086546866 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 17 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.562723820175166 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_19_0 * centered_data.scaler_19_0) / CAST(0.759455730576092 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.676653684574643 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_19_1 * centered_data.scaler_19_1) / CAST(0.851101929160359 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 18 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.290219275644699 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_20_0 * centered_data.scaler_20_0) / CAST(1.571989805972002 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.462846700353178 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_20_1 * centered_data.scaler_20_1) / CAST(0.687268408843 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 19 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.175820303991784 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_21_0 * centered_data.scaler_21_0) / CAST(0.515789386553116 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.06349857332186 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_21_1 * centered_data.scaler_21_1) / CAST(1.253101285334668 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 20 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.561652407609784 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_22_0 * centered_data.scaler_22_0) / CAST(0.758642475906934 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.069285456796987 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_22_1 * centered_data.scaler_22_1) / CAST(0.170573053182054 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 21 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.601015370700248 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_23_0 * centered_data.scaler_23_0) / CAST(0.789100416444518 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.653748872560812 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_23_1 * centered_data.scaler_23_1) / CAST(0.831829161609831 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 22 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.541924834957444 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_24_0 * centered_data.scaler_24_0) / CAST(0.743822958514324 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.025060788710214 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_24_1 * centered_data.scaler_24_1) / CAST(0.163193889702879 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 23 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.939901516498202 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_25_0 * centered_data.scaler_25_0) / CAST(1.107410547683219 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(-0.645286254162434 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_25_1 * centered_data.scaler_25_1) / CAST(0.083478737474836 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 24 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.806298669768264 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_26_0 * centered_data.scaler_26_0) / CAST(0.968914993795163 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.52851226216787 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_26_1 * centered_data.scaler_26_1) / CAST(0.73391298661458 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 25 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.988081517818989 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_27_0 * centered_data.scaler_27_0) / CAST(1.162071805661192 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.737733544796432 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_27_1 * centered_data.scaler_27_1) / CAST(0.332823312931406 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 26 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.571197889399957 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_28_0 * centered_data.scaler_28_0) / CAST(0.765918756398572 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.068379680416913 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_28_1 * centered_data.scaler_28_1) / CAST(0.463245843658223 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 27 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.081208439284808 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_29_0 * centered_data.scaler_29_0) / CAST(0.469226996235336 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.56688137415304 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_29_1 * centered_data.scaler_29_1) / CAST(0.280552139069724 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 28 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.252359165318476 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_30_0 * centered_data.scaler_30_0) / CAST(1.513586649491832 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.01906992054368 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_30_1 * centered_data.scaler_30_1) / CAST(0.440957338695915 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 29 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.169920832418199 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_31_0 * centered_data.scaler_31_0) / CAST(1.393813848846885 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.3586657998738 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_31_1 * centered_data.scaler_31_1) / CAST(0.619271639497842 AS DOUBLE PRECISION) AS log_proba_1 
FROM centered_data, dummy_cte) AS "Values")
 SELECT "NaiveBayes_Scores"."KEY", "NaiveBayes_Scores"."Score_0", "NaiveBayes_Scores"."Score_1" 
FROM (SELECT nb_sums."KEY" AS "KEY", nb_sums."Score_0" AS "Score_0", nb_sums."Score_1" AS "Score_1" 
FROM (SELECT "NaiveBayes_data"."KEY" AS "KEY", CAST(-1.045123603717123 AS DOUBLE PRECISION) + sum("NaiveBayes_data".log_proba_0) AS "Score_0", CAST(-0.433322062611131 AS DOUBLE PRECISION) + sum("NaiveBayes_data".log_proba_1) AS "Score_1" 
FROM "NaiveBayes_data" GROUP BY "NaiveBayes_data"."KEY") AS nb_sums) AS "NaiveBayes_Scores") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "NaiveBayes_Scores"."KEY" AS "KEY", "NaiveBayes_Scores"."Score_0" AS "Score_0", "NaiveBayes_Scores"."Score_1" AS "Score_1", CAST(NULL AS DOUBLE PRECISION) AS "Proba_0", CAST(NULL AS DOUBLE PRECISION) AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM tmp_20180516111640_codegen_091m4o_naivebayes_scores AS "NaiveBayes_Scores"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_0" - score_max."max_Score")) AS "exp_delta_Score_0", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_1" - score_max."max_Score")) AS "exp_delta_Score_1" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu."class" AS "class", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS "class", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS "class", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_1", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1") AS "DecisionProba" 
FROM arg_max_cte