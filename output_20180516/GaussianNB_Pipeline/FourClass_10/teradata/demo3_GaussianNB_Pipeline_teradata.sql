-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : GaussianNB_Pipeline
-- Dataset : FourClass_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180602143124_2d4_ads_imp_1_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602143124_2d4_ads_imp_1_out  (
	"KEY" BIGINT, 
	impter_2 DOUBLE PRECISION, 
	impter_3 DOUBLE PRECISION, 
	impter_4 DOUBLE PRECISION, 
	impter_5 DOUBLE PRECISION, 
	impter_6 DOUBLE PRECISION, 
	impter_7 DOUBLE PRECISION, 
	impter_8 DOUBLE PRECISION, 
	impter_9 DOUBLE PRECISION, 
	impter_10 DOUBLE PRECISION, 
	impter_11 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602143124_2d4_ads_imp_1_out part 2. Populate

INSERT INTO tmp_20180602143124_2d4_ads_imp_1_out ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.003903374463034205 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.6152232215702322 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.042796236914291665 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.7709819558904074 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.43300733624893334 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0424956965794036 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.29809080119845455 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.14672241507251663 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.01746942384662034 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.11507331415602866 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180602143124_vl2_ads_sca_2_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602143124_vl2_ads_sca_2_out  (
	"KEY" BIGINT, 
	scaler_2 DOUBLE PRECISION, 
	scaler_3 DOUBLE PRECISION, 
	scaler_4 DOUBLE PRECISION, 
	scaler_5 DOUBLE PRECISION, 
	scaler_6 DOUBLE PRECISION, 
	scaler_7 DOUBLE PRECISION, 
	scaler_8 DOUBLE PRECISION, 
	scaler_9 DOUBLE PRECISION, 
	scaler_10 DOUBLE PRECISION, 
	scaler_11 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602143124_vl2_ads_sca_2_out part 2. Populate

INSERT INTO tmp_20180602143124_vl2_ads_sca_2_out ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS DOUBLE PRECISION) - CAST(-0.003903374463034 AS DOUBLE PRECISION)) / CAST(0.9795060640184 AS DOUBLE PRECISION) AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS DOUBLE PRECISION) - CAST(0.615223221570232 AS DOUBLE PRECISION)) / CAST(1.390080723620524 AS DOUBLE PRECISION) AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS DOUBLE PRECISION) - CAST(0.042796236914292 AS DOUBLE PRECISION)) / CAST(1.496268513587076 AS DOUBLE PRECISION) AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS DOUBLE PRECISION) - CAST(0.770981955890407 AS DOUBLE PRECISION)) / CAST(2.333356106011174 AS DOUBLE PRECISION) AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS DOUBLE PRECISION) - CAST(-0.433007336248933 AS DOUBLE PRECISION)) / CAST(1.402975777264875 AS DOUBLE PRECISION) AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS DOUBLE PRECISION) - CAST(-0.042495696579404 AS DOUBLE PRECISION)) / CAST(0.955809107687323 AS DOUBLE PRECISION) AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS DOUBLE PRECISION) - CAST(-0.298090801198455 AS DOUBLE PRECISION)) / CAST(1.017013180721433 AS DOUBLE PRECISION) AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS DOUBLE PRECISION) - CAST(0.146722415072517 AS DOUBLE PRECISION)) / CAST(1.600798539929603 AS DOUBLE PRECISION) AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS DOUBLE PRECISION) - CAST(0.01746942384662 AS DOUBLE PRECISION)) / CAST(1.148729636167142 AS DOUBLE PRECISION) AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS DOUBLE PRECISION) - CAST(0.115073314156029 AS DOUBLE PRECISION)) / CAST(0.969091185733622 AS DOUBLE PRECISION) AS scaler_11 
FROM tmp_20180602143124_2d4_ads_imp_1_out AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Code For temporary table tmp_20180602143124_1su_naivebayes_scores part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602143124_1su_naivebayes_scores  (
	"KEY" BIGINT, 
	"Score_0" DOUBLE PRECISION, 
	"Score_1" DOUBLE PRECISION, 
	"Score_2" DOUBLE PRECISION, 
	"Score_3" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602143124_1su_naivebayes_scores part 2. Populate

INSERT INTO tmp_20180602143124_1su_naivebayes_scores ("KEY", "Score_0", "Score_1", "Score_2", "Score_3") SELECT "U"."KEY", "U"."Score_0", "U"."Score_1", "U"."Score_2", "U"."Score_3" 
FROM (WITH centered_data AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) - CAST(0.128509361103381 AS DOUBLE PRECISION) AS scaler_2_0, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) - CAST(-0.589485395912359 AS DOUBLE PRECISION) AS scaler_3_0, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) - CAST(-0.148011040711781 AS DOUBLE PRECISION) AS scaler_4_0, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) - CAST(-0.47548298171953 AS DOUBLE PRECISION) AS scaler_5_0, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) - CAST(0.801905341367292 AS DOUBLE PRECISION) AS scaler_6_0, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) - CAST(-0.199196519222011 AS DOUBLE PRECISION) AS scaler_7_0, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) - CAST(0.439518212954736 AS DOUBLE PRECISION) AS scaler_8_0, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) - CAST(0.123400319090763 AS DOUBLE PRECISION) AS scaler_9_0, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) - CAST(0.403570258391707 AS DOUBLE PRECISION) AS scaler_10_0, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) - CAST(0.098703207950857 AS DOUBLE PRECISION) AS scaler_11_0, CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) - CAST(-0.052986994728447 AS DOUBLE PRECISION) AS scaler_2_1, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) - CAST(0.360555272984455 AS DOUBLE PRECISION) AS scaler_3_1, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) - CAST(0.794840644564148 AS DOUBLE PRECISION) AS scaler_4_1, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) - CAST(0.893656658384402 AS DOUBLE PRECISION) AS scaler_5_1, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) - CAST(0.169874351862195 AS DOUBLE PRECISION) AS scaler_6_1, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) - CAST(-0.278679175011744 AS DOUBLE PRECISION) AS scaler_7_1, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) - CAST(-0.895671880555032 AS DOUBLE PRECISION) AS scaler_8_1, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) - CAST(0.673858282251232 AS DOUBLE PRECISION) AS scaler_9_1, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) - CAST(-0.204012633199091 AS DOUBLE PRECISION) AS scaler_10_1, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) - CAST(-0.070832662622743 AS DOUBLE PRECISION) AS scaler_11_1, CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) - CAST(0.045360401938139 AS DOUBLE PRECISION) AS scaler_2_2, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) - CAST(-0.587677805021288 AS DOUBLE PRECISION) AS scaler_3_2, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) - CAST(-0.740813864090552 AS DOUBLE PRECISION) AS scaler_4_2, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) - CAST(-0.730678839244223 AS DOUBLE PRECISION) AS scaler_5_2, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) - CAST(-0.352378185458216 AS DOUBLE PRECISION) AS scaler_6_2, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) - CAST(0.233568134705316 AS DOUBLE PRECISION) AS scaler_7_2, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) - CAST(0.624201944134461 AS DOUBLE PRECISION) AS scaler_8_2, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) - CAST(-0.117254914937402 AS DOUBLE PRECISION) AS scaler_9_2, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) - CAST(0.219536933928883 AS DOUBLE PRECISION) AS scaler_10_2, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) - CAST(0.027656495977069 AS DOUBLE PRECISION) AS scaler_11_2, CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) - CAST(-0.09821075654794 AS DOUBLE PRECISION) AS scaler_2_3, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) - CAST(0.688781262143597 AS DOUBLE PRECISION) AS scaler_3_3, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) - CAST(0.071984687424551 AS DOUBLE PRECISION) AS scaler_4_3, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) - CAST(0.240869876733998 AS DOUBLE PRECISION) AS scaler_5_3, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) - CAST(-0.49019179421322 AS DOUBLE PRECISION) AS scaler_6_3, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) - CAST(0.203989006914762 AS DOUBLE PRECISION) AS scaler_7_3, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) - CAST(-0.112814959307902 AS DOUBLE PRECISION) AS scaler_8_3, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) - CAST(-0.606966958632288 AS DOUBLE PRECISION) AS scaler_9_3, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) - CAST(-0.344306848438481 AS DOUBLE PRECISION) AS scaler_10_3, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) - CAST(-0.041506109554634 AS DOUBLE PRECISION) AS scaler_11_3 
FROM tmp_20180602143124_vl2_ads_sca_2_out AS "ADS_sca_2_OUT"), 
dummy_cte AS 
(SELECT CAST(0.0 AS DOUBLE PRECISION) AS "X"), 
"NaiveBayes_data" AS 
(SELECT "Values"."KEY" AS "KEY", CAST("Values"."Feature" AS DOUBLE PRECISION) AS "Feature", CAST("Values".log_proba_0 AS DOUBLE PRECISION) AS log_proba_0, CAST("Values".log_proba_1 AS DOUBLE PRECISION) AS log_proba_1, CAST("Values".log_proba_2 AS DOUBLE PRECISION) AS log_proba_2, CAST("Values".log_proba_3 AS DOUBLE PRECISION) AS log_proba_3 
FROM (SELECT centered_data."KEY" AS "KEY", 0 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.320981933042071 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_2_0 * centered_data.scaler_2_0) / CAST(1.6210998953861 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.583775445349261 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_2_1 * centered_data.scaler_2_1) / CAST(0.77561297942834 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.772880998807283 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_2_2 * centered_data.scaler_2_2) / CAST(0.937071148306809 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.516904797020467 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_2_3 * centered_data.scaler_2_3) / CAST(0.725443367699136 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 1 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.440003172328726 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_3_0 * centered_data.scaler_3_0) / CAST(0.671746733560366 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.246061370310004 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_3_1 * centered_data.scaler_3_1) / CAST(0.553321708032965 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.958675886894301 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_3_2 * centered_data.scaler_3_2) / CAST(1.128397878992805 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.835577093575847 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_3_3 * centered_data.scaler_3_3) / CAST(0.367034300723338 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 2 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.144841499168878 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_4_0 * centered_data.scaler_4_0) / CAST(0.500055809774238 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.792638824674474 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_4_1 * centered_data.scaler_4_1) / CAST(0.95576975046313 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.294793368841542 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_4_2 * centered_data.scaler_4_2) / CAST(0.580954000891791 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.528423556847709 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_4_3 * centered_data.scaler_4_3) / CAST(0.733847887515493 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 3 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(-0.070657267062727 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_5_0 * centered_data.scaler_5_0) / CAST(0.148297582190814 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.184448486561368 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_5_1 * centered_data.scaler_5_1) / CAST(0.52025896599314 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.979638418362196 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_5_2 * centered_data.scaler_5_2) / CAST(1.152301621189317 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.221963645800614 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_5_3 * centered_data.scaler_5_3) / CAST(0.540147288243371 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 4 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.966026495803153 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_6_0 * centered_data.scaler_6_0) / CAST(0.418176966756032 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.223187107319372 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_6_1 * centered_data.scaler_6_1) / CAST(1.470070032643659 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.593941222922931 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_6_2 * centered_data.scaler_6_2) / CAST(0.783537901710389 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.758910614860571 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_6_3 * centered_data.scaler_6_3) / CAST(0.339946695518792 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 5 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.681074440796672 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_7_0 * centered_data.scaler_7_0) / CAST(0.314490117693776 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.813949062619517 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_7_1 * centered_data.scaler_7_1) / CAST(0.976356001159383 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.225631539024949 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_7_2 * centered_data.scaler_7_2) / CAST(1.473667914037028 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.794433107585358 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_7_3 * centered_data.scaler_7_3) / CAST(0.957486211240742 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 6 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.56551740947667 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_8_0 * centered_data.scaler_8_0) / CAST(0.280169736713091 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.427298539224616 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_8_1 * centered_data.scaler_8_1) / CAST(0.663266421463829 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.959091580412214 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_8_2 * centered_data.scaler_8_2) / CAST(1.128867044184438 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.190917567825462 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_8_3 * centered_data.scaler_8_3) / CAST(0.523635473196986 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 7 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.571230670406848 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_9_0 * centered_data.scaler_9_0) / CAST(0.765943864398134 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.021812872599277 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_9_1 * centered_data.scaler_9_1) / CAST(0.442168523886584 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.259233248602523 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_9_2 * centered_data.scaler_9_2) / CAST(1.524027013030775 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.960952659581662 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_9_3 * centered_data.scaler_9_3) / CAST(0.416060578957969 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 8 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.701091245032074 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_10_0 * centered_data.scaler_10_0) / CAST(0.87215700351535 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.674910236493988 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_10_1 * centered_data.scaler_10_1) / CAST(0.84961936989361 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(0.838374885315564 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_10_2 * centered_data.scaler_10_2) / CAST(0.368062624104647 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.231499662749405 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_10_3 * centered_data.scaler_10_3) / CAST(1.482341002174446 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte UNION ALL SELECT centered_data."KEY" AS "KEY", 9 AS "Feature", CAST(-0.5 AS DOUBLE PRECISION) * CAST(2.073462573997818 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_11_0 * centered_data.scaler_11_0) / CAST(1.265649599275498 AS DOUBLE PRECISION) AS log_proba_0, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.694673838304048 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_11_1 * centered_data.scaler_11_1) / CAST(0.866577938006289 AS DOUBLE PRECISION) AS log_proba_1, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.840283489875267 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_11_2 * centered_data.scaler_11_2) / CAST(1.002409321226817 AS DOUBLE PRECISION) AS log_proba_2, CAST(-0.5 AS DOUBLE PRECISION) * CAST(1.717744170173738 AS DOUBLE PRECISION) - (CAST(0.5 AS DOUBLE PRECISION) * centered_data.scaler_11_3 * centered_data.scaler_11_3) / CAST(0.88680257616162 AS DOUBLE PRECISION) AS log_proba_3 
FROM centered_data, dummy_cte) AS "Values")
 SELECT "NaiveBayes_Scores"."KEY", "NaiveBayes_Scores"."Score_0", "NaiveBayes_Scores"."Score_1", "NaiveBayes_Scores"."Score_2", "NaiveBayes_Scores"."Score_3" 
FROM (SELECT nb_sums."KEY" AS "KEY", nb_sums."Score_0" AS "Score_0", nb_sums."Score_1" AS "Score_1", nb_sums."Score_2" AS "Score_2", nb_sums."Score_3" AS "Score_3" 
FROM (SELECT "NaiveBayes_data"."KEY" AS "KEY", CAST(-1.491654876777717 AS DOUBLE PRECISION) + sum("NaiveBayes_data".log_proba_0) AS "Score_0", CAST(-1.38629436111989 AS DOUBLE PRECISION) + sum("NaiveBayes_data".log_proba_1) AS "Score_1", CAST(-1.38629436111989 AS DOUBLE PRECISION) + sum("NaiveBayes_data".log_proba_2) AS "Score_2", CAST(-1.290984181315566 AS DOUBLE PRECISION) + sum("NaiveBayes_data".log_proba_3) AS "Score_3" 
FROM "NaiveBayes_data" GROUP BY "NaiveBayes_data"."KEY") AS nb_sums) AS "NaiveBayes_Scores") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "NaiveBayes_Scores"."KEY" AS "KEY", "NaiveBayes_Scores"."Score_0" AS "Score_0", "NaiveBayes_Scores"."Score_1" AS "Score_1", "NaiveBayes_Scores"."Score_2" AS "Score_2", "NaiveBayes_Scores"."Score_3" AS "Score_3", CAST(NULL AS DOUBLE PRECISION) AS "Proba_0", CAST(NULL AS DOUBLE PRECISION) AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "Proba_2", CAST(NULL AS DOUBLE PRECISION) AS "Proba_3", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM tmp_20180602143124_1su_naivebayes_scores AS "NaiveBayes_Scores"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_0" - score_max."max_Score")) AS "exp_delta_Score_0", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_1" - score_max."max_Score")) AS "exp_delta_Score_1", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_2" - score_max."max_Score")) AS "exp_delta_Score_2", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_3" - score_max."max_Score")) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu."class" AS "class", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS "class", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS "class", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS "class", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS "class", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_2", CAST(NULL AS DOUBLE PRECISION) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3") AS "DecisionProba" 
FROM arg_max_cte