-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : BinaryClass_10
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180602141338_0da_hl_1_relu_1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602141338_0da_hl_1_relu_1  (
	"KEY" BIGINT, 
	"NEUR_1_1" DOUBLE PRECISION, 
	"NEUR_1_2" DOUBLE PRECISION, 
	"NEUR_1_3" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602141338_0da_hl_1_relu_1 part 2. Populate

INSERT INTO tmp_20180602141338_0da_hl_1_relu_1 ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "U"."KEY", "U"."NEUR_1_1", "U"."NEUR_1_2", "U"."NEUR_1_3" 
FROM (WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE PRECISION) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE PRECISION) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE PRECISION) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE PRECISION) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE PRECISION) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE PRECISION) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE PRECISION) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE PRECISION) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE PRECISION) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE PRECISION) AS "Feature_9" 
FROM "BinaryClass_10" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-1.09387856853759 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.492242707012688 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-1.664174697352711 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(0.42207766254502 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.750200966201692 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.534285584185276 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-1.290489613288312 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.449199374928095 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.566377802024083 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(0.788482565585648 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-1.529188375707104 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(5.05146338022372 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.281279432559977 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(2.733980116998645 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(1.512787272452296 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(1.953130547200595 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-0.578486957581503 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-0.138608259069288 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(1.248801237388289 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-0.338876070082589 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-4.920073315526665 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(0.821625470964486 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(-3.276748499722454 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-0.167540868623976 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-0.448590135215691 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(0.397757191089655 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.483385455533098 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-2.739662671181846 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-2.135657082181811 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-2.091461237040985 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.73954859681984 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(5.185024697312112 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(1.951861050185976 AS DOUBLE PRECISION) AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", greatest("HL_BA_1"."NEUR_1_1", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_1", greatest("HL_BA_1"."NEUR_1_2", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_2", greatest("HL_BA_1"."NEUR_1_3", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_3" 
FROM "HL_BA_1")
 SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "U"

-- Code For temporary table tmp_20180602141338_w74_ol_logistic_1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602141338_w74_ol_logistic_1  (
	"KEY" BIGINT, 
	"NEUR_3_1" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602141338_w74_ol_logistic_1 part 2. Populate

INSERT INTO tmp_20180602141338_w74_ol_logistic_1 ("KEY", "NEUR_3_1") SELECT "U"."KEY", "U"."NEUR_3_1" 
FROM (WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", CAST(-0.654923775212115 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(0.891826745758854 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-0.394805832150812 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-0.205655720647696 AS DOUBLE PRECISION) AS "NEUR_2_1", CAST(-1.834382425248476 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(0.592940669501692 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-1.498602723437949 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(3.23797223883291 AS DOUBLE PRECISION) AS "NEUR_2_2", CAST(1.090645860338893 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(0.691609029741496 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(2.502762033997912 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(0.685457697790745 AS DOUBLE PRECISION) AS "NEUR_2_3", CAST(0.111087287210924 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-0.504728710406666 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-0.406620447353302 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-0.796433042433614 AS DOUBLE PRECISION) AS "NEUR_2_4", CAST(-0.546822494142592 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(0.918028833025683 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-0.601994915701529 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-0.365173436783015 AS DOUBLE PRECISION) AS "NEUR_2_5" 
FROM tmp_20180602141338_0da_hl_1_relu_1 AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", greatest("HL_BA_2"."NEUR_2_1", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_1", greatest("HL_BA_2"."NEUR_2_2", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_2", greatest("HL_BA_2"."NEUR_2_3", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_3", greatest("HL_BA_2"."NEUR_2_4", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_4", greatest("HL_BA_2"."NEUR_2_5", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", CAST(-1.244303881532287 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(-2.862502374850306 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(4.561706335502054 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(0.700822508422435 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(-0.358693728236872 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(3.00916718885165 AS DOUBLE PRECISION) AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -"OL_BA"."NEUR_3_1"), CAST(100.0 AS DOUBLE PRECISION)))) AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_logistic_1"."KEY", "OL_logistic_1"."NEUR_3_1" 
FROM (SELECT "OL_logistic"."KEY" AS "KEY", "OL_logistic"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_logistic") AS "OL_logistic_1") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_logistic_1"."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_1", CAST(1.0 AS DOUBLE PRECISION) - "OL_logistic_1"."NEUR_3_1" AS "Proba_0", "OL_logistic_1"."NEUR_3_1" AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM tmp_20180602141338_w74_ol_logistic_1 AS "OL_logistic_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max."class") AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte