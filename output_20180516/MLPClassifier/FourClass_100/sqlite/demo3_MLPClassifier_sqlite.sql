-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : FourClass_100
-- Database : sqlite


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table TMP_20180516113126_CODEGEN_RUBTVJ_HL_1_relu_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20180516113126_CODEGEN_RUBTVJ_HL_1_relu_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_1_1" FLOAT, 
	"NEUR_1_2" FLOAT, 
	"NEUR_1_3" FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20180516113126_CODEGEN_RUBTVJ_HL_1_relu_1 part 2. Populate

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS FLOAT) AS "Feature_0", CAST("ADS"."Feature_1" AS FLOAT) AS "Feature_1", CAST("ADS"."Feature_2" AS FLOAT) AS "Feature_2", CAST("ADS"."Feature_3" AS FLOAT) AS "Feature_3", CAST("ADS"."Feature_4" AS FLOAT) AS "Feature_4", CAST("ADS"."Feature_5" AS FLOAT) AS "Feature_5", CAST("ADS"."Feature_6" AS FLOAT) AS "Feature_6", CAST("ADS"."Feature_7" AS FLOAT) AS "Feature_7", CAST("ADS"."Feature_8" AS FLOAT) AS "Feature_8", CAST("ADS"."Feature_9" AS FLOAT) AS "Feature_9", CAST("ADS"."Feature_10" AS FLOAT) AS "Feature_10", CAST("ADS"."Feature_11" AS FLOAT) AS "Feature_11", CAST("ADS"."Feature_12" AS FLOAT) AS "Feature_12", CAST("ADS"."Feature_13" AS FLOAT) AS "Feature_13", CAST("ADS"."Feature_14" AS FLOAT) AS "Feature_14", CAST("ADS"."Feature_15" AS FLOAT) AS "Feature_15", CAST("ADS"."Feature_16" AS FLOAT) AS "Feature_16", CAST("ADS"."Feature_17" AS FLOAT) AS "Feature_17", CAST("ADS"."Feature_18" AS FLOAT) AS "Feature_18", CAST("ADS"."Feature_19" AS FLOAT) AS "Feature_19", CAST("ADS"."Feature_20" AS FLOAT) AS "Feature_20", CAST("ADS"."Feature_21" AS FLOAT) AS "Feature_21", CAST("ADS"."Feature_22" AS FLOAT) AS "Feature_22", CAST("ADS"."Feature_23" AS FLOAT) AS "Feature_23", CAST("ADS"."Feature_24" AS FLOAT) AS "Feature_24", CAST("ADS"."Feature_25" AS FLOAT) AS "Feature_25", CAST("ADS"."Feature_26" AS FLOAT) AS "Feature_26", CAST("ADS"."Feature_27" AS FLOAT) AS "Feature_27", CAST("ADS"."Feature_28" AS FLOAT) AS "Feature_28", CAST("ADS"."Feature_29" AS FLOAT) AS "Feature_29", CAST("ADS"."Feature_30" AS FLOAT) AS "Feature_30", CAST("ADS"."Feature_31" AS FLOAT) AS "Feature_31", CAST("ADS"."Feature_32" AS FLOAT) AS "Feature_32", CAST("ADS"."Feature_33" AS FLOAT) AS "Feature_33", CAST("ADS"."Feature_34" AS FLOAT) AS "Feature_34", CAST("ADS"."Feature_35" AS FLOAT) AS "Feature_35", CAST("ADS"."Feature_36" AS FLOAT) AS "Feature_36", CAST("ADS"."Feature_37" AS FLOAT) AS "Feature_37", CAST("ADS"."Feature_38" AS FLOAT) AS "Feature_38", CAST("ADS"."Feature_39" AS FLOAT) AS "Feature_39", CAST("ADS"."Feature_40" AS FLOAT) AS "Feature_40", CAST("ADS"."Feature_41" AS FLOAT) AS "Feature_41", CAST("ADS"."Feature_42" AS FLOAT) AS "Feature_42", CAST("ADS"."Feature_43" AS FLOAT) AS "Feature_43", CAST("ADS"."Feature_44" AS FLOAT) AS "Feature_44", CAST("ADS"."Feature_45" AS FLOAT) AS "Feature_45", CAST("ADS"."Feature_46" AS FLOAT) AS "Feature_46", CAST("ADS"."Feature_47" AS FLOAT) AS "Feature_47", CAST("ADS"."Feature_48" AS FLOAT) AS "Feature_48", CAST("ADS"."Feature_49" AS FLOAT) AS "Feature_49", CAST("ADS"."Feature_50" AS FLOAT) AS "Feature_50", CAST("ADS"."Feature_51" AS FLOAT) AS "Feature_51", CAST("ADS"."Feature_52" AS FLOAT) AS "Feature_52", CAST("ADS"."Feature_53" AS FLOAT) AS "Feature_53", CAST("ADS"."Feature_54" AS FLOAT) AS "Feature_54", CAST("ADS"."Feature_55" AS FLOAT) AS "Feature_55", CAST("ADS"."Feature_56" AS FLOAT) AS "Feature_56", CAST("ADS"."Feature_57" AS FLOAT) AS "Feature_57", CAST("ADS"."Feature_58" AS FLOAT) AS "Feature_58", CAST("ADS"."Feature_59" AS FLOAT) AS "Feature_59", CAST("ADS"."Feature_60" AS FLOAT) AS "Feature_60", CAST("ADS"."Feature_61" AS FLOAT) AS "Feature_61", CAST("ADS"."Feature_62" AS FLOAT) AS "Feature_62", CAST("ADS"."Feature_63" AS FLOAT) AS "Feature_63", CAST("ADS"."Feature_64" AS FLOAT) AS "Feature_64", CAST("ADS"."Feature_65" AS FLOAT) AS "Feature_65", CAST("ADS"."Feature_66" AS FLOAT) AS "Feature_66", CAST("ADS"."Feature_67" AS FLOAT) AS "Feature_67", CAST("ADS"."Feature_68" AS FLOAT) AS "Feature_68", CAST("ADS"."Feature_69" AS FLOAT) AS "Feature_69", CAST("ADS"."Feature_70" AS FLOAT) AS "Feature_70", CAST("ADS"."Feature_71" AS FLOAT) AS "Feature_71", CAST("ADS"."Feature_72" AS FLOAT) AS "Feature_72", CAST("ADS"."Feature_73" AS FLOAT) AS "Feature_73", CAST("ADS"."Feature_74" AS FLOAT) AS "Feature_74", CAST("ADS"."Feature_75" AS FLOAT) AS "Feature_75", CAST("ADS"."Feature_76" AS FLOAT) AS "Feature_76", CAST("ADS"."Feature_77" AS FLOAT) AS "Feature_77", CAST("ADS"."Feature_78" AS FLOAT) AS "Feature_78", CAST("ADS"."Feature_79" AS FLOAT) AS "Feature_79", CAST("ADS"."Feature_80" AS FLOAT) AS "Feature_80", CAST("ADS"."Feature_81" AS FLOAT) AS "Feature_81", CAST("ADS"."Feature_82" AS FLOAT) AS "Feature_82", CAST("ADS"."Feature_83" AS FLOAT) AS "Feature_83", CAST("ADS"."Feature_84" AS FLOAT) AS "Feature_84", CAST("ADS"."Feature_85" AS FLOAT) AS "Feature_85", CAST("ADS"."Feature_86" AS FLOAT) AS "Feature_86", CAST("ADS"."Feature_87" AS FLOAT) AS "Feature_87", CAST("ADS"."Feature_88" AS FLOAT) AS "Feature_88", CAST("ADS"."Feature_89" AS FLOAT) AS "Feature_89", CAST("ADS"."Feature_90" AS FLOAT) AS "Feature_90", CAST("ADS"."Feature_91" AS FLOAT) AS "Feature_91", CAST("ADS"."Feature_92" AS FLOAT) AS "Feature_92", CAST("ADS"."Feature_93" AS FLOAT) AS "Feature_93", CAST("ADS"."Feature_94" AS FLOAT) AS "Feature_94", CAST("ADS"."Feature_95" AS FLOAT) AS "Feature_95", CAST("ADS"."Feature_96" AS FLOAT) AS "Feature_96", CAST("ADS"."Feature_97" AS FLOAT) AS "Feature_97", CAST("ADS"."Feature_98" AS FLOAT) AS "Feature_98", CAST("ADS"."Feature_99" AS FLOAT) AS "Feature_99" 
FROM "FourClass_100" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.8891444085484967 * "IL"."Feature_0" + -0.0784845357251597 * "IL"."Feature_1" + -1.8206990678773054 * "IL"."Feature_2" + -1.5439784622064812 * "IL"."Feature_3" + -0.4633372014120199 * "IL"."Feature_4" + 0.19883745423090307 * "IL"."Feature_5" + 0.10355938378806902 * "IL"."Feature_6" + -0.6479076950725557 * "IL"."Feature_7" + 0.1250657553441878 * "IL"."Feature_8" + 0.026477543191763493 * "IL"."Feature_9" + -0.785258531901299 * "IL"."Feature_10" + 0.03893956575956411 * "IL"."Feature_11" + -0.3581574875018472 * "IL"."Feature_12" + 0.9840926989953321 * "IL"."Feature_13" + 0.48821389991271225 * "IL"."Feature_14" + -1.399583055489549 * "IL"."Feature_15" + 0.4133306988033604 * "IL"."Feature_16" + -1.902030354964097 * "IL"."Feature_17" + 0.11224600118650298 * "IL"."Feature_18" + -0.20718556290646267 * "IL"."Feature_19" + -0.4714719864807307 * "IL"."Feature_20" + -0.6668695110327181 * "IL"."Feature_21" + -0.3231964327587434 * "IL"."Feature_22" + -0.2766884940560021 * "IL"."Feature_23" + -0.033488018539885755 * "IL"."Feature_24" + 0.1850308072473037 * "IL"."Feature_25" + 0.1841402915395511 * "IL"."Feature_26" + -0.030296361139638718 * "IL"."Feature_27" + -0.6081170097740393 * "IL"."Feature_28" + -0.16762178138250874 * "IL"."Feature_29" + 0.4429629081642648 * "IL"."Feature_30" + 1.2009818631467335 * "IL"."Feature_31" + 0.9107003689595016 * "IL"."Feature_32" + -1.1942883696149211 * "IL"."Feature_33" + -1.9640689005948877 * "IL"."Feature_34" + -0.359589510299133 * "IL"."Feature_35" + -1.2488733612567942 * "IL"."Feature_36" + 0.29061307004504755 * "IL"."Feature_37" + -0.29440933057020413 * "IL"."Feature_38" + -0.3511003074920947 * "IL"."Feature_39" + -0.4340668998873154 * "IL"."Feature_40" + -0.19497346584869787 * "IL"."Feature_41" + -0.004153887592737316 * "IL"."Feature_42" + 0.008521936306751262 * "IL"."Feature_43" + 1.2019677261528565 * "IL"."Feature_44" + 2.6065809628727865 * "IL"."Feature_45" + -0.6547114602732312 * "IL"."Feature_46" + 0.4366144672671418 * "IL"."Feature_47" + -0.06312215534156182 * "IL"."Feature_48" + -1.1438146301446472 * "IL"."Feature_49" + -0.8320471897216692 * "IL"."Feature_50" + -0.6797475349440515 * "IL"."Feature_51" + 0.6827502594431236 * "IL"."Feature_52" + -0.5026295012739184 * "IL"."Feature_53" + 1.0595737162044556 * "IL"."Feature_54" + -0.13498404170115488 * "IL"."Feature_55" + -0.14626311559779678 * "IL"."Feature_56" + 1.1085372642786149 * "IL"."Feature_57" + 0.3098664631684432 * "IL"."Feature_58" + -0.8297712115520133 * "IL"."Feature_59" + 0.5201570215194397 * "IL"."Feature_60" + 1.3337329653827006 * "IL"."Feature_61" + -0.9176257038228145 * "IL"."Feature_62" + 0.5321157409425539 * "IL"."Feature_63" + 0.6841336153724689 * "IL"."Feature_64" + 0.4614632449462911 * "IL"."Feature_65" + -0.005848673660351732 * "IL"."Feature_66" + 0.7324962132536836 * "IL"."Feature_67" + -0.23873722572308556 * "IL"."Feature_68" + -0.5766559558807463 * "IL"."Feature_69" + 0.9938564588984703 * "IL"."Feature_70" + 0.6447277356942983 * "IL"."Feature_71" + 0.675970037282627 * "IL"."Feature_72" + 0.08482213027241788 * "IL"."Feature_73" + 0.7236834756576234 * "IL"."Feature_74" + 0.6526823754927619 * "IL"."Feature_75" + -0.1448406087468224 * "IL"."Feature_76" + 0.7576640062030862 * "IL"."Feature_77" + 0.11485285431197222 * "IL"."Feature_78" + 0.6023597799012343 * "IL"."Feature_79" + -1.6926639504248133 * "IL"."Feature_80" + 2.2988906591346434 * "IL"."Feature_81" + 0.05884373561360453 * "IL"."Feature_82" + -1.0190704466483065 * "IL"."Feature_83" + 1.3921167289578567 * "IL"."Feature_84" + 0.3171476357516235 * "IL"."Feature_85" + -0.6346667650025724 * "IL"."Feature_86" + -0.4939894050676469 * "IL"."Feature_87" + -0.5705853282102702 * "IL"."Feature_88" + 0.06875938307348009 * "IL"."Feature_89" + 0.2285988656466015 * "IL"."Feature_90" + 0.17731159895412468 * "IL"."Feature_91" + 0.011403828013814305 * "IL"."Feature_92" + 1.2007867896900117 * "IL"."Feature_93" + 1.0493249048356732 * "IL"."Feature_94" + 0.3135119981882325 * "IL"."Feature_95" + -1.876588060959782 * "IL"."Feature_96" + -1.313975556847792 * "IL"."Feature_97" + 0.34050908806487273 * "IL"."Feature_98" + 0.10633546863176008 * "IL"."Feature_99" + 0.306500013338786 AS "NEUR_1_1", -0.10260084982048348 * "IL"."Feature_0" + -0.7100593756957758 * "IL"."Feature_1" + -0.23219144333845437 * "IL"."Feature_2" + -0.04939789729140471 * "IL"."Feature_3" + -0.39337392338751026 * "IL"."Feature_4" + -0.003907151958592558 * "IL"."Feature_5" + 0.32117433574157694 * "IL"."Feature_6" + -0.35461417869189 * "IL"."Feature_7" + 0.929226246920765 * "IL"."Feature_8" + -0.4617125933306753 * "IL"."Feature_9" + 0.5679289844317086 * "IL"."Feature_10" + -0.6463059884337141 * "IL"."Feature_11" + 1.102073232101593 * "IL"."Feature_12" + 1.5989299392894287 * "IL"."Feature_13" + 1.5200115096901043 * "IL"."Feature_14" + -0.18877569166482316 * "IL"."Feature_15" + -0.7131147389577557 * "IL"."Feature_16" + 0.09694539513842108 * "IL"."Feature_17" + -0.33621100601640946 * "IL"."Feature_18" + 1.5952910263460747 * "IL"."Feature_19" + 0.16827825111705594 * "IL"."Feature_20" + -0.07021494796024069 * "IL"."Feature_21" + -1.1541044557941815 * "IL"."Feature_22" + 1.994181650885573 * "IL"."Feature_23" + 1.5046553525253932 * "IL"."Feature_24" + 0.4117941313612221 * "IL"."Feature_25" + -0.22204019886372703 * "IL"."Feature_26" + -1.6596865719962979 * "IL"."Feature_27" + 0.3627632691504969 * "IL"."Feature_28" + -0.6213564921569056 * "IL"."Feature_29" + -0.9479830668927922 * "IL"."Feature_30" + -0.05231236538980689 * "IL"."Feature_31" + -1.0641385833065973 * "IL"."Feature_32" + 0.43844864000103273 * "IL"."Feature_33" + 0.003453047602979065 * "IL"."Feature_34" + -0.704135309603691 * "IL"."Feature_35" + 1.8783905799152054 * "IL"."Feature_36" + -0.9174282427804965 * "IL"."Feature_37" + 0.36695857264399995 * "IL"."Feature_38" + 0.367868039358333 * "IL"."Feature_39" + 0.4342438731051271 * "IL"."Feature_40" + 0.38216823448848153 * "IL"."Feature_41" + 0.8101233367938289 * "IL"."Feature_42" + 0.7018375844541611 * "IL"."Feature_43" + 0.5105605804917246 * "IL"."Feature_44" + -1.0691587728817324 * "IL"."Feature_45" + 0.5003711373981856 * "IL"."Feature_46" + -0.8192190910545668 * "IL"."Feature_47" + -0.7725834073621521 * "IL"."Feature_48" + 0.498376137794746 * "IL"."Feature_49" + 1.2215458915233401 * "IL"."Feature_50" + 0.09322434097105194 * "IL"."Feature_51" + -0.5702721517203849 * "IL"."Feature_52" + 0.7329064026196744 * "IL"."Feature_53" + 0.7119183123270126 * "IL"."Feature_54" + -1.1577003161070478 * "IL"."Feature_55" + 0.9454651080159325 * "IL"."Feature_56" + -1.060089402415796 * "IL"."Feature_57" + 0.33880106454190034 * "IL"."Feature_58" + 0.46803210512126486 * "IL"."Feature_59" + -0.38554888487733324 * "IL"."Feature_60" + 0.5914329862215921 * "IL"."Feature_61" + -0.12226873438926282 * "IL"."Feature_62" + -0.41523141837384486 * "IL"."Feature_63" + -0.4169704585888884 * "IL"."Feature_64" + -0.3156074126153885 * "IL"."Feature_65" + 0.5492339343783834 * "IL"."Feature_66" + 1.537488588847753 * "IL"."Feature_67" + -0.1575817023352074 * "IL"."Feature_68" + -0.04382566346463712 * "IL"."Feature_69" + -0.8951770806808845 * "IL"."Feature_70" + -0.13477821203671458 * "IL"."Feature_71" + 0.3017977130443756 * "IL"."Feature_72" + 0.1128999628836986 * "IL"."Feature_73" + -1.4112339388698296 * "IL"."Feature_74" + -0.6060683009962337 * "IL"."Feature_75" + 0.10899673600121576 * "IL"."Feature_76" + 0.06997533847413631 * "IL"."Feature_77" + -1.563723778633766 * "IL"."Feature_78" + 1.1962043055125422 * "IL"."Feature_79" + -0.024346274847508585 * "IL"."Feature_80" + -0.5605328673814758 * "IL"."Feature_81" + 0.007113797898925177 * "IL"."Feature_82" + -0.9346812579761246 * "IL"."Feature_83" + -0.3581823950021628 * "IL"."Feature_84" + -1.420992143969103 * "IL"."Feature_85" + -2.022941604215177 * "IL"."Feature_86" + -0.034795600888708984 * "IL"."Feature_87" + -1.8916359993330467 * "IL"."Feature_88" + -0.35849214395925555 * "IL"."Feature_89" + -0.4540534560319224 * "IL"."Feature_90" + -0.04264297741009062 * "IL"."Feature_91" + -0.2949441067964625 * "IL"."Feature_92" + 0.1382819401005051 * "IL"."Feature_93" + -0.1571896840286277 * "IL"."Feature_94" + 0.6997913183528935 * "IL"."Feature_95" + 1.290675866529003 * "IL"."Feature_96" + -0.5166856583545488 * "IL"."Feature_97" + -0.19287858266417288 * "IL"."Feature_98" + -0.7947501251150606 * "IL"."Feature_99" + 0.5801394365582953 AS "NEUR_1_2", 0.23111473103806415 * "IL"."Feature_0" + -1.651041236723285 * "IL"."Feature_1" + -0.19646623058823273 * "IL"."Feature_2" + -0.48285659480279103 * "IL"."Feature_3" + 0.26224501034065734 * "IL"."Feature_4" + 0.9306631098079062 * "IL"."Feature_5" + -0.19098424903589503 * "IL"."Feature_6" + -0.21891353678136216 * "IL"."Feature_7" + -0.09330727656553586 * "IL"."Feature_8" + 1.8403926055780495 * "IL"."Feature_9" + -0.4170739209480328 * "IL"."Feature_10" + 0.5485794169372297 * "IL"."Feature_11" + 0.09851219886102662 * "IL"."Feature_12" + -1.207030841739198 * "IL"."Feature_13" + -0.7852833114581081 * "IL"."Feature_14" + -1.4056352148880908 * "IL"."Feature_15" + -0.8747959886268624 * "IL"."Feature_16" + -1.131030048570886 * "IL"."Feature_17" + -0.4653362123832762 * "IL"."Feature_18" + -1.0136347829890398 * "IL"."Feature_19" + 0.5623544621471904 * "IL"."Feature_20" + -0.019826490360508958 * "IL"."Feature_21" + -0.3553191432314277 * "IL"."Feature_22" + 0.21531147355425162 * "IL"."Feature_23" + -0.4734730410048467 * "IL"."Feature_24" + -0.5664678368075585 * "IL"."Feature_25" + 0.36923173114558266 * "IL"."Feature_26" + 1.1847748450275521 * "IL"."Feature_27" + 1.212151806652555 * "IL"."Feature_28" + -0.6949753910129651 * "IL"."Feature_29" + 0.9172180078892092 * "IL"."Feature_30" + 0.5734125902940436 * "IL"."Feature_31" + -0.5231895416096819 * "IL"."Feature_32" + -0.25699794724903363 * "IL"."Feature_33" + 0.4532107745847901 * "IL"."Feature_34" + -1.0281567454819265 * "IL"."Feature_35" + 0.09717753033872743 * "IL"."Feature_36" + 0.24125868505700052 * "IL"."Feature_37" + 0.9721735558222087 * "IL"."Feature_38" + 0.1483931699094096 * "IL"."Feature_39" + 0.7454924202396124 * "IL"."Feature_40" + 0.2129028473440491 * "IL"."Feature_41" + -0.08887274652278832 * "IL"."Feature_42" + -1.9597653117729565 * "IL"."Feature_43" + -2.9620188561013348 * "IL"."Feature_44" + -0.9433345951202218 * "IL"."Feature_45" + 1.0426364262419394 * "IL"."Feature_46" + 2.131623889148962 * "IL"."Feature_47" + 0.0316853501898593 * "IL"."Feature_48" + -1.0172415717533005 * "IL"."Feature_49" + 0.30976193919382244 * "IL"."Feature_50" + -0.3560779306100486 * "IL"."Feature_51" + -0.09723300977152187 * "IL"."Feature_52" + 0.733133559891167 * "IL"."Feature_53" + -2.239133989416841 * "IL"."Feature_54" + 0.5372815216947946 * "IL"."Feature_55" + -0.7737005470619415 * "IL"."Feature_56" + 0.24287457320123282 * "IL"."Feature_57" + 0.8025839791249203 * "IL"."Feature_58" + -0.9239006463254094 * "IL"."Feature_59" + -1.0829545064395583 * "IL"."Feature_60" + -0.7456319748580371 * "IL"."Feature_61" + -0.03831421583522793 * "IL"."Feature_62" + -0.13513784561719724 * "IL"."Feature_63" + -0.3954235116851645 * "IL"."Feature_64" + -0.08133870925861722 * "IL"."Feature_65" + 0.1424429796941194 * "IL"."Feature_66" + -0.0720057053737529 * "IL"."Feature_67" + -0.8549054848913618 * "IL"."Feature_68" + -1.4189624707231596 * "IL"."Feature_69" + -0.4208680593942737 * "IL"."Feature_70" + 0.9683067610297069 * "IL"."Feature_71" + 0.3242271483305702 * "IL"."Feature_72" + -1.1274280778529553 * "IL"."Feature_73" + -0.4452641876664441 * "IL"."Feature_74" + -0.7212079699475449 * "IL"."Feature_75" + 0.3944228272842 * "IL"."Feature_76" + -0.0724081507458043 * "IL"."Feature_77" + -1.3122747650191344 * "IL"."Feature_78" + 0.4482258009830773 * "IL"."Feature_79" + 0.13300046666876553 * "IL"."Feature_80" + 0.3835944034337562 * "IL"."Feature_81" + -0.5641401437007411 * "IL"."Feature_82" + 0.8698667536219652 * "IL"."Feature_83" + -0.12488535770931582 * "IL"."Feature_84" + 0.36057501191534613 * "IL"."Feature_85" + 0.44589620462057256 * "IL"."Feature_86" + -0.5949327398367007 * "IL"."Feature_87" + -0.4008561258953818 * "IL"."Feature_88" + -0.6548927308308442 * "IL"."Feature_89" + -0.2653429216931447 * "IL"."Feature_90" + -0.02058312060546156 * "IL"."Feature_91" + 0.9924231829312401 * "IL"."Feature_92" + -0.7750087337404221 * "IL"."Feature_93" + 0.14393423500257788 * "IL"."Feature_94" + -0.44387636702087807 * "IL"."Feature_95" + 1.3758682485628337 * "IL"."Feature_96" + 1.1385686766713492 * "IL"."Feature_97" + -1.3475199886301372 * "IL"."Feature_98" + 1.1659123353353604 * "IL"."Feature_99" + -0.7712021417807484 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", max("HL_BA_1"."NEUR_1_1", 0) AS "NEUR_1_1", max("HL_BA_1"."NEUR_1_2", 0) AS "NEUR_1_2", max("HL_BA_1"."NEUR_1_3", 0) AS "NEUR_1_3" 
FROM "HL_BA_1")
 INSERT INTO "TMP_20180516113126_CODEGEN_RUBTVJ_HL_1_relu_1" ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1"

-- Code For temporary table TMP_20180516113126_CODEGEN_RUBTVJ_HL_1_relu_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20180516113126_CODEGEN_RUBTVJ_HL_1_relu_1_KEY" ON "TMP_20180516113126_CODEGEN_RUBTVJ_HL_1_relu_1" ("KEY")

-- Code For temporary table TMP_20180516113126_CODEGEN_498EAU_OL_softmax_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20180516113126_CODEGEN_498EAU_OL_softmax_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_3_1" FLOAT, 
	"NEUR_3_2" FLOAT, 
	"NEUR_3_3" FLOAT, 
	"NEUR_3_4" FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20180516113126_CODEGEN_498EAU_OL_softmax_1 part 2. Populate

WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", 0.40850400024197087 * "HL_1_relu_1"."NEUR_1_1" + -0.3724854879085448 * "HL_1_relu_1"."NEUR_1_2" + 3.3318906201565635 * "HL_1_relu_1"."NEUR_1_3" + -1.5632332564550018 AS "NEUR_2_1", -2.762339357200178 * "HL_1_relu_1"."NEUR_1_1" + -2.5926459360642204 * "HL_1_relu_1"."NEUR_1_2" + 1.1938936236490711 * "HL_1_relu_1"."NEUR_1_3" + 4.414871798715717 AS "NEUR_2_2", -1.0959572451235382 * "HL_1_relu_1"."NEUR_1_1" + 1.0889889482527488 * "HL_1_relu_1"."NEUR_1_2" + 0.5322912426271365 * "HL_1_relu_1"."NEUR_1_3" + -1.8292351276529497 AS "NEUR_2_3", -0.16573869802078015 * "HL_1_relu_1"."NEUR_1_1" + 3.8662513683140896 * "HL_1_relu_1"."NEUR_1_2" + -1.5657067269338925 * "HL_1_relu_1"."NEUR_1_3" + 1.8982459372321105 AS "NEUR_2_4", -0.609304507588836 * "HL_1_relu_1"."NEUR_1_1" + -0.3776422773901093 * "HL_1_relu_1"."NEUR_1_2" + -0.6729549566187693 * "HL_1_relu_1"."NEUR_1_3" + -0.01807831622698608 AS "NEUR_2_5" 
FROM "TMP_20180516113126_CODEGEN_RUBTVJ_HL_1_relu_1" AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", max("HL_BA_2"."NEUR_2_1", 0) AS "NEUR_2_1", max("HL_BA_2"."NEUR_2_2", 0) AS "NEUR_2_2", max("HL_BA_2"."NEUR_2_3", 0) AS "NEUR_2_3", max("HL_BA_2"."NEUR_2_4", 0) AS "NEUR_2_4", max("HL_BA_2"."NEUR_2_5", 0) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.37676002551854637 * "HL_2_relu"."NEUR_2_1" + -4.613943776969705 * "HL_2_relu"."NEUR_2_2" + -1.000016110246175 * "HL_2_relu"."NEUR_2_3" + 1.994781214825498 * "HL_2_relu"."NEUR_2_4" + 0.5898480370369207 * "HL_2_relu"."NEUR_2_5" + 2.8698083697017367 AS "NEUR_3_1", 1.4938235311289767 * "HL_2_relu"."NEUR_2_1" + 2.339316184000328 * "HL_2_relu"."NEUR_2_2" + -1.6658515794840187 * "HL_2_relu"."NEUR_2_3" + -5.296733529720302 * "HL_2_relu"."NEUR_2_4" + 0.396076949989207 * "HL_2_relu"."NEUR_2_5" + 4.126517672588679 AS "NEUR_3_2", 2.0608093685895903 * "HL_2_relu"."NEUR_2_1" + 0.9808488024045704 * "HL_2_relu"."NEUR_2_2" + 0.6090851277567603 * "HL_2_relu"."NEUR_2_3" + 1.1502536603992473 * "HL_2_relu"."NEUR_2_4" + 0.6634607908520893 * "HL_2_relu"."NEUR_2_5" + -2.9234253820069984 AS "NEUR_3_3", -3.315160134510799 * "HL_2_relu"."NEUR_2_1" + 1.6584076929614762 * "HL_2_relu"."NEUR_2_2" + 1.2648134175965982 * "HL_2_relu"."NEUR_2_3" + 1.8759480429708577 * "HL_2_relu"."NEUR_2_4" + -0.48549358220365046 * "HL_2_relu"."NEUR_2_5" + -5.390350879937685 AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA")
 INSERT INTO "TMP_20180516113126_CODEGEN_498EAU_OL_softmax_1" ("KEY", "NEUR_3_1", "NEUR_3_2", "NEUR_3_3", "NEUR_3_4") SELECT "OL_softmax_1"."KEY", "OL_softmax_1"."NEUR_3_1", "OL_softmax_1"."NEUR_3_2", "OL_softmax_1"."NEUR_3_3", "OL_softmax_1"."NEUR_3_4" 
FROM (SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_softmax") AS "OL_softmax_1"

-- Code For temporary table TMP_20180516113126_CODEGEN_498EAU_OL_softmax_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20180516113126_CODEGEN_498EAU_OL_softmax_1_KEY" ON "TMP_20180516113126_CODEGEN_498EAU_OL_softmax_1" ("KEY")

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "Score_0", "OL_softmax_1"."NEUR_3_2" AS "Score_1", "OL_softmax_1"."NEUR_3_3" AS "Score_2", "OL_softmax_1"."NEUR_3_4" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "TMP_20180516113126_CODEGEN_498EAU_OL_softmax_1" AS "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(max(-100.0, score_max."Score_0" - score_max."max_Score")) AS "exp_delta_Score_0", exp(max(-100.0, score_max."Score_1" - score_max."max_Score")) AS "exp_delta_Score_1", exp(max(-100.0, score_max."Score_2" - score_max."max_Score")) AS "exp_delta_Score_2", exp(max(-100.0, score_max."Score_3" - score_max."max_Score")) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS class, score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS class, score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS class, score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS class, score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max.class) AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", max(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3") AS "DecisionProba" 
FROM arg_max_cte