-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : FourClass_100
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180516113127_codegen_y6u4wr_hl_1_relu_1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516113127_codegen_y6u4wr_hl_1_relu_1  (
	"KEY" BIGINT, 
	"NEUR_1_1" DOUBLE PRECISION, 
	"NEUR_1_2" DOUBLE PRECISION, 
	"NEUR_1_3" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516113127_codegen_y6u4wr_hl_1_relu_1 part 2. Populate

INSERT INTO tmp_20180516113127_codegen_y6u4wr_hl_1_relu_1 ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "U"."KEY", "U"."NEUR_1_1", "U"."NEUR_1_2", "U"."NEUR_1_3" 
FROM (WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE PRECISION) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE PRECISION) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE PRECISION) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE PRECISION) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE PRECISION) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE PRECISION) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE PRECISION) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE PRECISION) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE PRECISION) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE PRECISION) AS "Feature_9", CAST("ADS"."Feature_10" AS DOUBLE PRECISION) AS "Feature_10", CAST("ADS"."Feature_11" AS DOUBLE PRECISION) AS "Feature_11", CAST("ADS"."Feature_12" AS DOUBLE PRECISION) AS "Feature_12", CAST("ADS"."Feature_13" AS DOUBLE PRECISION) AS "Feature_13", CAST("ADS"."Feature_14" AS DOUBLE PRECISION) AS "Feature_14", CAST("ADS"."Feature_15" AS DOUBLE PRECISION) AS "Feature_15", CAST("ADS"."Feature_16" AS DOUBLE PRECISION) AS "Feature_16", CAST("ADS"."Feature_17" AS DOUBLE PRECISION) AS "Feature_17", CAST("ADS"."Feature_18" AS DOUBLE PRECISION) AS "Feature_18", CAST("ADS"."Feature_19" AS DOUBLE PRECISION) AS "Feature_19", CAST("ADS"."Feature_20" AS DOUBLE PRECISION) AS "Feature_20", CAST("ADS"."Feature_21" AS DOUBLE PRECISION) AS "Feature_21", CAST("ADS"."Feature_22" AS DOUBLE PRECISION) AS "Feature_22", CAST("ADS"."Feature_23" AS DOUBLE PRECISION) AS "Feature_23", CAST("ADS"."Feature_24" AS DOUBLE PRECISION) AS "Feature_24", CAST("ADS"."Feature_25" AS DOUBLE PRECISION) AS "Feature_25", CAST("ADS"."Feature_26" AS DOUBLE PRECISION) AS "Feature_26", CAST("ADS"."Feature_27" AS DOUBLE PRECISION) AS "Feature_27", CAST("ADS"."Feature_28" AS DOUBLE PRECISION) AS "Feature_28", CAST("ADS"."Feature_29" AS DOUBLE PRECISION) AS "Feature_29", CAST("ADS"."Feature_30" AS DOUBLE PRECISION) AS "Feature_30", CAST("ADS"."Feature_31" AS DOUBLE PRECISION) AS "Feature_31", CAST("ADS"."Feature_32" AS DOUBLE PRECISION) AS "Feature_32", CAST("ADS"."Feature_33" AS DOUBLE PRECISION) AS "Feature_33", CAST("ADS"."Feature_34" AS DOUBLE PRECISION) AS "Feature_34", CAST("ADS"."Feature_35" AS DOUBLE PRECISION) AS "Feature_35", CAST("ADS"."Feature_36" AS DOUBLE PRECISION) AS "Feature_36", CAST("ADS"."Feature_37" AS DOUBLE PRECISION) AS "Feature_37", CAST("ADS"."Feature_38" AS DOUBLE PRECISION) AS "Feature_38", CAST("ADS"."Feature_39" AS DOUBLE PRECISION) AS "Feature_39", CAST("ADS"."Feature_40" AS DOUBLE PRECISION) AS "Feature_40", CAST("ADS"."Feature_41" AS DOUBLE PRECISION) AS "Feature_41", CAST("ADS"."Feature_42" AS DOUBLE PRECISION) AS "Feature_42", CAST("ADS"."Feature_43" AS DOUBLE PRECISION) AS "Feature_43", CAST("ADS"."Feature_44" AS DOUBLE PRECISION) AS "Feature_44", CAST("ADS"."Feature_45" AS DOUBLE PRECISION) AS "Feature_45", CAST("ADS"."Feature_46" AS DOUBLE PRECISION) AS "Feature_46", CAST("ADS"."Feature_47" AS DOUBLE PRECISION) AS "Feature_47", CAST("ADS"."Feature_48" AS DOUBLE PRECISION) AS "Feature_48", CAST("ADS"."Feature_49" AS DOUBLE PRECISION) AS "Feature_49", CAST("ADS"."Feature_50" AS DOUBLE PRECISION) AS "Feature_50", CAST("ADS"."Feature_51" AS DOUBLE PRECISION) AS "Feature_51", CAST("ADS"."Feature_52" AS DOUBLE PRECISION) AS "Feature_52", CAST("ADS"."Feature_53" AS DOUBLE PRECISION) AS "Feature_53", CAST("ADS"."Feature_54" AS DOUBLE PRECISION) AS "Feature_54", CAST("ADS"."Feature_55" AS DOUBLE PRECISION) AS "Feature_55", CAST("ADS"."Feature_56" AS DOUBLE PRECISION) AS "Feature_56", CAST("ADS"."Feature_57" AS DOUBLE PRECISION) AS "Feature_57", CAST("ADS"."Feature_58" AS DOUBLE PRECISION) AS "Feature_58", CAST("ADS"."Feature_59" AS DOUBLE PRECISION) AS "Feature_59", CAST("ADS"."Feature_60" AS DOUBLE PRECISION) AS "Feature_60", CAST("ADS"."Feature_61" AS DOUBLE PRECISION) AS "Feature_61", CAST("ADS"."Feature_62" AS DOUBLE PRECISION) AS "Feature_62", CAST("ADS"."Feature_63" AS DOUBLE PRECISION) AS "Feature_63", CAST("ADS"."Feature_64" AS DOUBLE PRECISION) AS "Feature_64", CAST("ADS"."Feature_65" AS DOUBLE PRECISION) AS "Feature_65", CAST("ADS"."Feature_66" AS DOUBLE PRECISION) AS "Feature_66", CAST("ADS"."Feature_67" AS DOUBLE PRECISION) AS "Feature_67", CAST("ADS"."Feature_68" AS DOUBLE PRECISION) AS "Feature_68", CAST("ADS"."Feature_69" AS DOUBLE PRECISION) AS "Feature_69", CAST("ADS"."Feature_70" AS DOUBLE PRECISION) AS "Feature_70", CAST("ADS"."Feature_71" AS DOUBLE PRECISION) AS "Feature_71", CAST("ADS"."Feature_72" AS DOUBLE PRECISION) AS "Feature_72", CAST("ADS"."Feature_73" AS DOUBLE PRECISION) AS "Feature_73", CAST("ADS"."Feature_74" AS DOUBLE PRECISION) AS "Feature_74", CAST("ADS"."Feature_75" AS DOUBLE PRECISION) AS "Feature_75", CAST("ADS"."Feature_76" AS DOUBLE PRECISION) AS "Feature_76", CAST("ADS"."Feature_77" AS DOUBLE PRECISION) AS "Feature_77", CAST("ADS"."Feature_78" AS DOUBLE PRECISION) AS "Feature_78", CAST("ADS"."Feature_79" AS DOUBLE PRECISION) AS "Feature_79", CAST("ADS"."Feature_80" AS DOUBLE PRECISION) AS "Feature_80", CAST("ADS"."Feature_81" AS DOUBLE PRECISION) AS "Feature_81", CAST("ADS"."Feature_82" AS DOUBLE PRECISION) AS "Feature_82", CAST("ADS"."Feature_83" AS DOUBLE PRECISION) AS "Feature_83", CAST("ADS"."Feature_84" AS DOUBLE PRECISION) AS "Feature_84", CAST("ADS"."Feature_85" AS DOUBLE PRECISION) AS "Feature_85", CAST("ADS"."Feature_86" AS DOUBLE PRECISION) AS "Feature_86", CAST("ADS"."Feature_87" AS DOUBLE PRECISION) AS "Feature_87", CAST("ADS"."Feature_88" AS DOUBLE PRECISION) AS "Feature_88", CAST("ADS"."Feature_89" AS DOUBLE PRECISION) AS "Feature_89", CAST("ADS"."Feature_90" AS DOUBLE PRECISION) AS "Feature_90", CAST("ADS"."Feature_91" AS DOUBLE PRECISION) AS "Feature_91", CAST("ADS"."Feature_92" AS DOUBLE PRECISION) AS "Feature_92", CAST("ADS"."Feature_93" AS DOUBLE PRECISION) AS "Feature_93", CAST("ADS"."Feature_94" AS DOUBLE PRECISION) AS "Feature_94", CAST("ADS"."Feature_95" AS DOUBLE PRECISION) AS "Feature_95", CAST("ADS"."Feature_96" AS DOUBLE PRECISION) AS "Feature_96", CAST("ADS"."Feature_97" AS DOUBLE PRECISION) AS "Feature_97", CAST("ADS"."Feature_98" AS DOUBLE PRECISION) AS "Feature_98", CAST("ADS"."Feature_99" AS DOUBLE PRECISION) AS "Feature_99" 
FROM "FourClass_100" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-0.889144408548497 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-0.07848453572516 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-1.820699067877306 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-1.543978462206481 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.46333720141202 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.198837454230903 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.103559383788069 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.647907695072556 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.125065755344188 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(0.026477543191763 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.785258531901299 AS DOUBLE PRECISION) * "IL"."Feature_10" + CAST(0.038939565759564 AS DOUBLE PRECISION) * "IL"."Feature_11" + CAST(-0.358157487501847 AS DOUBLE PRECISION) * "IL"."Feature_12" + CAST(0.984092698995332 AS DOUBLE PRECISION) * "IL"."Feature_13" + CAST(0.488213899912712 AS DOUBLE PRECISION) * "IL"."Feature_14" + CAST(-1.399583055489549 AS DOUBLE PRECISION) * "IL"."Feature_15" + CAST(0.41333069880336 AS DOUBLE PRECISION) * "IL"."Feature_16" + CAST(-1.902030354964097 AS DOUBLE PRECISION) * "IL"."Feature_17" + CAST(0.112246001186503 AS DOUBLE PRECISION) * "IL"."Feature_18" + CAST(-0.207185562906463 AS DOUBLE PRECISION) * "IL"."Feature_19" + CAST(-0.471471986480731 AS DOUBLE PRECISION) * "IL"."Feature_20" + CAST(-0.666869511032718 AS DOUBLE PRECISION) * "IL"."Feature_21" + CAST(-0.323196432758743 AS DOUBLE PRECISION) * "IL"."Feature_22" + CAST(-0.276688494056002 AS DOUBLE PRECISION) * "IL"."Feature_23" + CAST(-0.033488018539886 AS DOUBLE PRECISION) * "IL"."Feature_24" + CAST(0.185030807247304 AS DOUBLE PRECISION) * "IL"."Feature_25" + CAST(0.184140291539551 AS DOUBLE PRECISION) * "IL"."Feature_26" + CAST(-0.030296361139639 AS DOUBLE PRECISION) * "IL"."Feature_27" + CAST(-0.608117009774039 AS DOUBLE PRECISION) * "IL"."Feature_28" + CAST(-0.167621781382509 AS DOUBLE PRECISION) * "IL"."Feature_29" + CAST(0.442962908164265 AS DOUBLE PRECISION) * "IL"."Feature_30" + CAST(1.200981863146734 AS DOUBLE PRECISION) * "IL"."Feature_31" + CAST(0.910700368959502 AS DOUBLE PRECISION) * "IL"."Feature_32" + CAST(-1.194288369614921 AS DOUBLE PRECISION) * "IL"."Feature_33" + CAST(-1.964068900594888 AS DOUBLE PRECISION) * "IL"."Feature_34" + CAST(-0.359589510299133 AS DOUBLE PRECISION) * "IL"."Feature_35" + CAST(-1.248873361256794 AS DOUBLE PRECISION) * "IL"."Feature_36" + CAST(0.290613070045048 AS DOUBLE PRECISION) * "IL"."Feature_37" + CAST(-0.294409330570204 AS DOUBLE PRECISION) * "IL"."Feature_38" + CAST(-0.351100307492095 AS DOUBLE PRECISION) * "IL"."Feature_39" + CAST(-0.434066899887315 AS DOUBLE PRECISION) * "IL"."Feature_40" + CAST(-0.194973465848698 AS DOUBLE PRECISION) * "IL"."Feature_41" + CAST(-0.004153887592737 AS DOUBLE PRECISION) * "IL"."Feature_42" + CAST(0.008521936306751 AS DOUBLE PRECISION) * "IL"."Feature_43" + CAST(1.201967726152856 AS DOUBLE PRECISION) * "IL"."Feature_44" + CAST(2.606580962872786 AS DOUBLE PRECISION) * "IL"."Feature_45" + CAST(-0.654711460273231 AS DOUBLE PRECISION) * "IL"."Feature_46" + CAST(0.436614467267142 AS DOUBLE PRECISION) * "IL"."Feature_47" + CAST(-0.063122155341562 AS DOUBLE PRECISION) * "IL"."Feature_48" + CAST(-1.143814630144647 AS DOUBLE PRECISION) * "IL"."Feature_49" + CAST(-0.832047189721669 AS DOUBLE PRECISION) * "IL"."Feature_50" + CAST(-0.679747534944052 AS DOUBLE PRECISION) * "IL"."Feature_51" + CAST(0.682750259443124 AS DOUBLE PRECISION) * "IL"."Feature_52" + CAST(-0.502629501273918 AS DOUBLE PRECISION) * "IL"."Feature_53" + CAST(1.059573716204456 AS DOUBLE PRECISION) * "IL"."Feature_54" + CAST(-0.134984041701155 AS DOUBLE PRECISION) * "IL"."Feature_55" + CAST(-0.146263115597797 AS DOUBLE PRECISION) * "IL"."Feature_56" + CAST(1.108537264278615 AS DOUBLE PRECISION) * "IL"."Feature_57" + CAST(0.309866463168443 AS DOUBLE PRECISION) * "IL"."Feature_58" + CAST(-0.829771211552013 AS DOUBLE PRECISION) * "IL"."Feature_59" + CAST(0.52015702151944 AS DOUBLE PRECISION) * "IL"."Feature_60" + CAST(1.3337329653827 AS DOUBLE PRECISION) * "IL"."Feature_61" + CAST(-0.917625703822814 AS DOUBLE PRECISION) * "IL"."Feature_62" + CAST(0.532115740942554 AS DOUBLE PRECISION) * "IL"."Feature_63" + CAST(0.684133615372469 AS DOUBLE PRECISION) * "IL"."Feature_64" + CAST(0.461463244946291 AS DOUBLE PRECISION) * "IL"."Feature_65" + CAST(-0.005848673660352 AS DOUBLE PRECISION) * "IL"."Feature_66" + CAST(0.732496213253684 AS DOUBLE PRECISION) * "IL"."Feature_67" + CAST(-0.238737225723086 AS DOUBLE PRECISION) * "IL"."Feature_68" + CAST(-0.576655955880746 AS DOUBLE PRECISION) * "IL"."Feature_69" + CAST(0.99385645889847 AS DOUBLE PRECISION) * "IL"."Feature_70" + CAST(0.644727735694298 AS DOUBLE PRECISION) * "IL"."Feature_71" + CAST(0.675970037282627 AS DOUBLE PRECISION) * "IL"."Feature_72" + CAST(0.084822130272418 AS DOUBLE PRECISION) * "IL"."Feature_73" + CAST(0.723683475657623 AS DOUBLE PRECISION) * "IL"."Feature_74" + CAST(0.652682375492762 AS DOUBLE PRECISION) * "IL"."Feature_75" + CAST(-0.144840608746822 AS DOUBLE PRECISION) * "IL"."Feature_76" + CAST(0.757664006203086 AS DOUBLE PRECISION) * "IL"."Feature_77" + CAST(0.114852854311972 AS DOUBLE PRECISION) * "IL"."Feature_78" + CAST(0.602359779901234 AS DOUBLE PRECISION) * "IL"."Feature_79" + CAST(-1.692663950424813 AS DOUBLE PRECISION) * "IL"."Feature_80" + CAST(2.298890659134644 AS DOUBLE PRECISION) * "IL"."Feature_81" + CAST(0.058843735613605 AS DOUBLE PRECISION) * "IL"."Feature_82" + CAST(-1.019070446648306 AS DOUBLE PRECISION) * "IL"."Feature_83" + CAST(1.392116728957857 AS DOUBLE PRECISION) * "IL"."Feature_84" + CAST(0.317147635751624 AS DOUBLE PRECISION) * "IL"."Feature_85" + CAST(-0.634666765002572 AS DOUBLE PRECISION) * "IL"."Feature_86" + CAST(-0.493989405067647 AS DOUBLE PRECISION) * "IL"."Feature_87" + CAST(-0.57058532821027 AS DOUBLE PRECISION) * "IL"."Feature_88" + CAST(0.06875938307348 AS DOUBLE PRECISION) * "IL"."Feature_89" + CAST(0.228598865646602 AS DOUBLE PRECISION) * "IL"."Feature_90" + CAST(0.177311598954125 AS DOUBLE PRECISION) * "IL"."Feature_91" + CAST(0.011403828013814 AS DOUBLE PRECISION) * "IL"."Feature_92" + CAST(1.200786789690012 AS DOUBLE PRECISION) * "IL"."Feature_93" + CAST(1.049324904835673 AS DOUBLE PRECISION) * "IL"."Feature_94" + CAST(0.313511998188232 AS DOUBLE PRECISION) * "IL"."Feature_95" + CAST(-1.876588060959782 AS DOUBLE PRECISION) * "IL"."Feature_96" + CAST(-1.313975556847792 AS DOUBLE PRECISION) * "IL"."Feature_97" + CAST(0.340509088064873 AS DOUBLE PRECISION) * "IL"."Feature_98" + CAST(0.10633546863176 AS DOUBLE PRECISION) * "IL"."Feature_99" + CAST(0.306500013338786 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(-0.102600849820483 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-0.710059375695776 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-0.232191443338454 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-0.049397897291405 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.39337392338751 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-0.003907151958593 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.321174335741577 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.35461417869189 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.929226246920765 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-0.461712593330675 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(0.567928984431709 AS DOUBLE PRECISION) * "IL"."Feature_10" + CAST(-0.646305988433714 AS DOUBLE PRECISION) * "IL"."Feature_11" + CAST(1.102073232101593 AS DOUBLE PRECISION) * "IL"."Feature_12" + CAST(1.598929939289429 AS DOUBLE PRECISION) * "IL"."Feature_13" + CAST(1.520011509690104 AS DOUBLE PRECISION) * "IL"."Feature_14" + CAST(-0.188775691664823 AS DOUBLE PRECISION) * "IL"."Feature_15" + CAST(-0.713114738957756 AS DOUBLE PRECISION) * "IL"."Feature_16" + CAST(0.096945395138421 AS DOUBLE PRECISION) * "IL"."Feature_17" + CAST(-0.336211006016409 AS DOUBLE PRECISION) * "IL"."Feature_18" + CAST(1.595291026346075 AS DOUBLE PRECISION) * "IL"."Feature_19" + CAST(0.168278251117056 AS DOUBLE PRECISION) * "IL"."Feature_20" + CAST(-0.070214947960241 AS DOUBLE PRECISION) * "IL"."Feature_21" + CAST(-1.154104455794182 AS DOUBLE PRECISION) * "IL"."Feature_22" + CAST(1.994181650885573 AS DOUBLE PRECISION) * "IL"."Feature_23" + CAST(1.504655352525393 AS DOUBLE PRECISION) * "IL"."Feature_24" + CAST(0.411794131361222 AS DOUBLE PRECISION) * "IL"."Feature_25" + CAST(-0.222040198863727 AS DOUBLE PRECISION) * "IL"."Feature_26" + CAST(-1.659686571996298 AS DOUBLE PRECISION) * "IL"."Feature_27" + CAST(0.362763269150497 AS DOUBLE PRECISION) * "IL"."Feature_28" + CAST(-0.621356492156906 AS DOUBLE PRECISION) * "IL"."Feature_29" + CAST(-0.947983066892792 AS DOUBLE PRECISION) * "IL"."Feature_30" + CAST(-0.052312365389807 AS DOUBLE PRECISION) * "IL"."Feature_31" + CAST(-1.064138583306597 AS DOUBLE PRECISION) * "IL"."Feature_32" + CAST(0.438448640001033 AS DOUBLE PRECISION) * "IL"."Feature_33" + CAST(0.003453047602979 AS DOUBLE PRECISION) * "IL"."Feature_34" + CAST(-0.704135309603691 AS DOUBLE PRECISION) * "IL"."Feature_35" + CAST(1.878390579915206 AS DOUBLE PRECISION) * "IL"."Feature_36" + CAST(-0.917428242780496 AS DOUBLE PRECISION) * "IL"."Feature_37" + CAST(0.366958572644 AS DOUBLE PRECISION) * "IL"."Feature_38" + CAST(0.367868039358333 AS DOUBLE PRECISION) * "IL"."Feature_39" + CAST(0.434243873105127 AS DOUBLE PRECISION) * "IL"."Feature_40" + CAST(0.382168234488482 AS DOUBLE PRECISION) * "IL"."Feature_41" + CAST(0.810123336793829 AS DOUBLE PRECISION) * "IL"."Feature_42" + CAST(0.701837584454161 AS DOUBLE PRECISION) * "IL"."Feature_43" + CAST(0.510560580491725 AS DOUBLE PRECISION) * "IL"."Feature_44" + CAST(-1.069158772881732 AS DOUBLE PRECISION) * "IL"."Feature_45" + CAST(0.500371137398186 AS DOUBLE PRECISION) * "IL"."Feature_46" + CAST(-0.819219091054567 AS DOUBLE PRECISION) * "IL"."Feature_47" + CAST(-0.772583407362152 AS DOUBLE PRECISION) * "IL"."Feature_48" + CAST(0.498376137794746 AS DOUBLE PRECISION) * "IL"."Feature_49" + CAST(1.22154589152334 AS DOUBLE PRECISION) * "IL"."Feature_50" + CAST(0.093224340971052 AS DOUBLE PRECISION) * "IL"."Feature_51" + CAST(-0.570272151720385 AS DOUBLE PRECISION) * "IL"."Feature_52" + CAST(0.732906402619674 AS DOUBLE PRECISION) * "IL"."Feature_53" + CAST(0.711918312327013 AS DOUBLE PRECISION) * "IL"."Feature_54" + CAST(-1.157700316107048 AS DOUBLE PRECISION) * "IL"."Feature_55" + CAST(0.945465108015932 AS DOUBLE PRECISION) * "IL"."Feature_56" + CAST(-1.060089402415796 AS DOUBLE PRECISION) * "IL"."Feature_57" + CAST(0.3388010645419 AS DOUBLE PRECISION) * "IL"."Feature_58" + CAST(0.468032105121265 AS DOUBLE PRECISION) * "IL"."Feature_59" + CAST(-0.385548884877333 AS DOUBLE PRECISION) * "IL"."Feature_60" + CAST(0.591432986221592 AS DOUBLE PRECISION) * "IL"."Feature_61" + CAST(-0.122268734389263 AS DOUBLE PRECISION) * "IL"."Feature_62" + CAST(-0.415231418373845 AS DOUBLE PRECISION) * "IL"."Feature_63" + CAST(-0.416970458588888 AS DOUBLE PRECISION) * "IL"."Feature_64" + CAST(-0.315607412615388 AS DOUBLE PRECISION) * "IL"."Feature_65" + CAST(0.549233934378383 AS DOUBLE PRECISION) * "IL"."Feature_66" + CAST(1.537488588847753 AS DOUBLE PRECISION) * "IL"."Feature_67" + CAST(-0.157581702335207 AS DOUBLE PRECISION) * "IL"."Feature_68" + CAST(-0.043825663464637 AS DOUBLE PRECISION) * "IL"."Feature_69" + CAST(-0.895177080680884 AS DOUBLE PRECISION) * "IL"."Feature_70" + CAST(-0.134778212036715 AS DOUBLE PRECISION) * "IL"."Feature_71" + CAST(0.301797713044376 AS DOUBLE PRECISION) * "IL"."Feature_72" + CAST(0.112899962883699 AS DOUBLE PRECISION) * "IL"."Feature_73" + CAST(-1.41123393886983 AS DOUBLE PRECISION) * "IL"."Feature_74" + CAST(-0.606068300996234 AS DOUBLE PRECISION) * "IL"."Feature_75" + CAST(0.108996736001216 AS DOUBLE PRECISION) * "IL"."Feature_76" + CAST(0.069975338474136 AS DOUBLE PRECISION) * "IL"."Feature_77" + CAST(-1.563723778633766 AS DOUBLE PRECISION) * "IL"."Feature_78" + CAST(1.196204305512542 AS DOUBLE PRECISION) * "IL"."Feature_79" + CAST(-0.024346274847509 AS DOUBLE PRECISION) * "IL"."Feature_80" + CAST(-0.560532867381476 AS DOUBLE PRECISION) * "IL"."Feature_81" + CAST(0.007113797898925 AS DOUBLE PRECISION) * "IL"."Feature_82" + CAST(-0.934681257976124 AS DOUBLE PRECISION) * "IL"."Feature_83" + CAST(-0.358182395002163 AS DOUBLE PRECISION) * "IL"."Feature_84" + CAST(-1.420992143969103 AS DOUBLE PRECISION) * "IL"."Feature_85" + CAST(-2.022941604215177 AS DOUBLE PRECISION) * "IL"."Feature_86" + CAST(-0.034795600888709 AS DOUBLE PRECISION) * "IL"."Feature_87" + CAST(-1.891635999333047 AS DOUBLE PRECISION) * "IL"."Feature_88" + CAST(-0.358492143959256 AS DOUBLE PRECISION) * "IL"."Feature_89" + CAST(-0.454053456031922 AS DOUBLE PRECISION) * "IL"."Feature_90" + CAST(-0.042642977410091 AS DOUBLE PRECISION) * "IL"."Feature_91" + CAST(-0.294944106796462 AS DOUBLE PRECISION) * "IL"."Feature_92" + CAST(0.138281940100505 AS DOUBLE PRECISION) * "IL"."Feature_93" + CAST(-0.157189684028628 AS DOUBLE PRECISION) * "IL"."Feature_94" + CAST(0.699791318352894 AS DOUBLE PRECISION) * "IL"."Feature_95" + CAST(1.290675866529003 AS DOUBLE PRECISION) * "IL"."Feature_96" + CAST(-0.516685658354549 AS DOUBLE PRECISION) * "IL"."Feature_97" + CAST(-0.192878582664173 AS DOUBLE PRECISION) * "IL"."Feature_98" + CAST(-0.794750125115061 AS DOUBLE PRECISION) * "IL"."Feature_99" + CAST(0.580139436558295 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(0.231114731038064 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-1.651041236723285 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-0.196466230588233 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-0.482856594802791 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(0.262245010340657 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.930663109807906 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-0.190984249035895 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.218913536781362 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-0.093307276565536 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(1.84039260557805 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.417073920948033 AS DOUBLE PRECISION) * "IL"."Feature_10" + CAST(0.54857941693723 AS DOUBLE PRECISION) * "IL"."Feature_11" + CAST(0.098512198861027 AS DOUBLE PRECISION) * "IL"."Feature_12" + CAST(-1.207030841739198 AS DOUBLE PRECISION) * "IL"."Feature_13" + CAST(-0.785283311458108 AS DOUBLE PRECISION) * "IL"."Feature_14" + CAST(-1.405635214888091 AS DOUBLE PRECISION) * "IL"."Feature_15" + CAST(-0.874795988626862 AS DOUBLE PRECISION) * "IL"."Feature_16" + CAST(-1.131030048570886 AS DOUBLE PRECISION) * "IL"."Feature_17" + CAST(-0.465336212383276 AS DOUBLE PRECISION) * "IL"."Feature_18" + CAST(-1.01363478298904 AS DOUBLE PRECISION) * "IL"."Feature_19" + CAST(0.56235446214719 AS DOUBLE PRECISION) * "IL"."Feature_20" + CAST(-0.019826490360509 AS DOUBLE PRECISION) * "IL"."Feature_21" + CAST(-0.355319143231428 AS DOUBLE PRECISION) * "IL"."Feature_22" + CAST(0.215311473554252 AS DOUBLE PRECISION) * "IL"."Feature_23" + CAST(-0.473473041004847 AS DOUBLE PRECISION) * "IL"."Feature_24" + CAST(-0.566467836807558 AS DOUBLE PRECISION) * "IL"."Feature_25" + CAST(0.369231731145583 AS DOUBLE PRECISION) * "IL"."Feature_26" + CAST(1.184774845027552 AS DOUBLE PRECISION) * "IL"."Feature_27" + CAST(1.212151806652555 AS DOUBLE PRECISION) * "IL"."Feature_28" + CAST(-0.694975391012965 AS DOUBLE PRECISION) * "IL"."Feature_29" + CAST(0.917218007889209 AS DOUBLE PRECISION) * "IL"."Feature_30" + CAST(0.573412590294044 AS DOUBLE PRECISION) * "IL"."Feature_31" + CAST(-0.523189541609682 AS DOUBLE PRECISION) * "IL"."Feature_32" + CAST(-0.256997947249034 AS DOUBLE PRECISION) * "IL"."Feature_33" + CAST(0.45321077458479 AS DOUBLE PRECISION) * "IL"."Feature_34" + CAST(-1.028156745481926 AS DOUBLE PRECISION) * "IL"."Feature_35" + CAST(0.097177530338727 AS DOUBLE PRECISION) * "IL"."Feature_36" + CAST(0.241258685057001 AS DOUBLE PRECISION) * "IL"."Feature_37" + CAST(0.972173555822209 AS DOUBLE PRECISION) * "IL"."Feature_38" + CAST(0.14839316990941 AS DOUBLE PRECISION) * "IL"."Feature_39" + CAST(0.745492420239612 AS DOUBLE PRECISION) * "IL"."Feature_40" + CAST(0.212902847344049 AS DOUBLE PRECISION) * "IL"."Feature_41" + CAST(-0.088872746522788 AS DOUBLE PRECISION) * "IL"."Feature_42" + CAST(-1.959765311772956 AS DOUBLE PRECISION) * "IL"."Feature_43" + CAST(-2.962018856101335 AS DOUBLE PRECISION) * "IL"."Feature_44" + CAST(-0.943334595120222 AS DOUBLE PRECISION) * "IL"."Feature_45" + CAST(1.042636426241939 AS DOUBLE PRECISION) * "IL"."Feature_46" + CAST(2.131623889148962 AS DOUBLE PRECISION) * "IL"."Feature_47" + CAST(0.031685350189859 AS DOUBLE PRECISION) * "IL"."Feature_48" + CAST(-1.0172415717533 AS DOUBLE PRECISION) * "IL"."Feature_49" + CAST(0.309761939193822 AS DOUBLE PRECISION) * "IL"."Feature_50" + CAST(-0.356077930610049 AS DOUBLE PRECISION) * "IL"."Feature_51" + CAST(-0.097233009771522 AS DOUBLE PRECISION) * "IL"."Feature_52" + CAST(0.733133559891167 AS DOUBLE PRECISION) * "IL"."Feature_53" + CAST(-2.239133989416841 AS DOUBLE PRECISION) * "IL"."Feature_54" + CAST(0.537281521694795 AS DOUBLE PRECISION) * "IL"."Feature_55" + CAST(-0.773700547061942 AS DOUBLE PRECISION) * "IL"."Feature_56" + CAST(0.242874573201233 AS DOUBLE PRECISION) * "IL"."Feature_57" + CAST(0.80258397912492 AS DOUBLE PRECISION) * "IL"."Feature_58" + CAST(-0.923900646325409 AS DOUBLE PRECISION) * "IL"."Feature_59" + CAST(-1.082954506439558 AS DOUBLE PRECISION) * "IL"."Feature_60" + CAST(-0.745631974858037 AS DOUBLE PRECISION) * "IL"."Feature_61" + CAST(-0.038314215835228 AS DOUBLE PRECISION) * "IL"."Feature_62" + CAST(-0.135137845617197 AS DOUBLE PRECISION) * "IL"."Feature_63" + CAST(-0.395423511685164 AS DOUBLE PRECISION) * "IL"."Feature_64" + CAST(-0.081338709258617 AS DOUBLE PRECISION) * "IL"."Feature_65" + CAST(0.142442979694119 AS DOUBLE PRECISION) * "IL"."Feature_66" + CAST(-0.072005705373753 AS DOUBLE PRECISION) * "IL"."Feature_67" + CAST(-0.854905484891362 AS DOUBLE PRECISION) * "IL"."Feature_68" + CAST(-1.41896247072316 AS DOUBLE PRECISION) * "IL"."Feature_69" + CAST(-0.420868059394274 AS DOUBLE PRECISION) * "IL"."Feature_70" + CAST(0.968306761029707 AS DOUBLE PRECISION) * "IL"."Feature_71" + CAST(0.32422714833057 AS DOUBLE PRECISION) * "IL"."Feature_72" + CAST(-1.127428077852955 AS DOUBLE PRECISION) * "IL"."Feature_73" + CAST(-0.445264187666444 AS DOUBLE PRECISION) * "IL"."Feature_74" + CAST(-0.721207969947545 AS DOUBLE PRECISION) * "IL"."Feature_75" + CAST(0.3944228272842 AS DOUBLE PRECISION) * "IL"."Feature_76" + CAST(-0.072408150745804 AS DOUBLE PRECISION) * "IL"."Feature_77" + CAST(-1.312274765019134 AS DOUBLE PRECISION) * "IL"."Feature_78" + CAST(0.448225800983077 AS DOUBLE PRECISION) * "IL"."Feature_79" + CAST(0.133000466668766 AS DOUBLE PRECISION) * "IL"."Feature_80" + CAST(0.383594403433756 AS DOUBLE PRECISION) * "IL"."Feature_81" + CAST(-0.564140143700741 AS DOUBLE PRECISION) * "IL"."Feature_82" + CAST(0.869866753621965 AS DOUBLE PRECISION) * "IL"."Feature_83" + CAST(-0.124885357709316 AS DOUBLE PRECISION) * "IL"."Feature_84" + CAST(0.360575011915346 AS DOUBLE PRECISION) * "IL"."Feature_85" + CAST(0.445896204620573 AS DOUBLE PRECISION) * "IL"."Feature_86" + CAST(-0.594932739836701 AS DOUBLE PRECISION) * "IL"."Feature_87" + CAST(-0.400856125895382 AS DOUBLE PRECISION) * "IL"."Feature_88" + CAST(-0.654892730830844 AS DOUBLE PRECISION) * "IL"."Feature_89" + CAST(-0.265342921693145 AS DOUBLE PRECISION) * "IL"."Feature_90" + CAST(-0.020583120605462 AS DOUBLE PRECISION) * "IL"."Feature_91" + CAST(0.99242318293124 AS DOUBLE PRECISION) * "IL"."Feature_92" + CAST(-0.775008733740422 AS DOUBLE PRECISION) * "IL"."Feature_93" + CAST(0.143934235002578 AS DOUBLE PRECISION) * "IL"."Feature_94" + CAST(-0.443876367020878 AS DOUBLE PRECISION) * "IL"."Feature_95" + CAST(1.375868248562834 AS DOUBLE PRECISION) * "IL"."Feature_96" + CAST(1.138568676671349 AS DOUBLE PRECISION) * "IL"."Feature_97" + CAST(-1.347519988630137 AS DOUBLE PRECISION) * "IL"."Feature_98" + CAST(1.16591233533536 AS DOUBLE PRECISION) * "IL"."Feature_99" + CAST(-0.771202141780748 AS DOUBLE PRECISION) AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", greatest("HL_BA_1"."NEUR_1_1", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_1", greatest("HL_BA_1"."NEUR_1_2", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_2", greatest("HL_BA_1"."NEUR_1_3", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_3" 
FROM "HL_BA_1")
 SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "U"

-- Code For temporary table tmp_20180516113127_codegen_ehpn8f_ol_softmax_1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516113127_codegen_ehpn8f_ol_softmax_1  (
	"KEY" BIGINT, 
	"NEUR_3_1" DOUBLE PRECISION, 
	"NEUR_3_2" DOUBLE PRECISION, 
	"NEUR_3_3" DOUBLE PRECISION, 
	"NEUR_3_4" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516113127_codegen_ehpn8f_ol_softmax_1 part 2. Populate

INSERT INTO tmp_20180516113127_codegen_ehpn8f_ol_softmax_1 ("KEY", "NEUR_3_1", "NEUR_3_2", "NEUR_3_3", "NEUR_3_4") SELECT "U"."KEY", "U"."NEUR_3_1", "U"."NEUR_3_2", "U"."NEUR_3_3", "U"."NEUR_3_4" 
FROM (WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", CAST(0.408504000241971 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-0.372485487908545 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(3.331890620156564 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-1.563233256455002 AS DOUBLE PRECISION) AS "NEUR_2_1", CAST(-2.762339357200178 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-2.59264593606422 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(1.193893623649071 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(4.414871798715718 AS DOUBLE PRECISION) AS "NEUR_2_2", CAST(-1.095957245123538 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(1.088988948252749 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(0.532291242627136 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-1.82923512765295 AS DOUBLE PRECISION) AS "NEUR_2_3", CAST(-0.16573869802078 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(3.86625136831409 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-1.565706726933892 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(1.89824593723211 AS DOUBLE PRECISION) AS "NEUR_2_4", CAST(-0.609304507588836 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-0.377642277390109 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-0.672954956618769 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-0.018078316226986 AS DOUBLE PRECISION) AS "NEUR_2_5" 
FROM tmp_20180516113127_codegen_y6u4wr_hl_1_relu_1 AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", greatest("HL_BA_2"."NEUR_2_1", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_1", greatest("HL_BA_2"."NEUR_2_2", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_2", greatest("HL_BA_2"."NEUR_2_3", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_3", greatest("HL_BA_2"."NEUR_2_4", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_4", greatest("HL_BA_2"."NEUR_2_5", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", CAST(0.376760025518546 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(-4.613943776969705 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-1.000016110246175 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(1.994781214825498 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.589848037036921 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(2.869808369701736 AS DOUBLE PRECISION) AS "NEUR_3_1", CAST(1.493823531128977 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(2.339316184000328 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-1.665851579484019 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(-5.296733529720302 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.396076949989207 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(4.126517672588678 AS DOUBLE PRECISION) AS "NEUR_3_2", CAST(2.06080936858959 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(0.98084880240457 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(0.60908512775676 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(1.150253660399247 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.663460790852089 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(-2.923425382006998 AS DOUBLE PRECISION) AS "NEUR_3_3", CAST(-3.315160134510799 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(1.658407692961476 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(1.264813417596598 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(1.875948042970858 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(-0.48549358220365 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(-5.390350879937685 AS DOUBLE PRECISION) AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA")
 SELECT "OL_softmax_1"."KEY", "OL_softmax_1"."NEUR_3_1", "OL_softmax_1"."NEUR_3_2", "OL_softmax_1"."NEUR_3_3", "OL_softmax_1"."NEUR_3_4" 
FROM (SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_softmax") AS "OL_softmax_1") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "Score_0", "OL_softmax_1"."NEUR_3_2" AS "Score_1", "OL_softmax_1"."NEUR_3_3" AS "Score_2", "OL_softmax_1"."NEUR_3_4" AS "Score_3", CAST(NULL AS DOUBLE PRECISION) AS "Proba_0", CAST(NULL AS DOUBLE PRECISION) AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "Proba_2", CAST(NULL AS DOUBLE PRECISION) AS "Proba_3", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM tmp_20180516113127_codegen_ehpn8f_ol_softmax_1 AS "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_0" - score_max."max_Score")) AS "exp_delta_Score_0", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_1" - score_max."max_Score")) AS "exp_delta_Score_1", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_2" - score_max."max_Score")) AS "exp_delta_Score_2", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_3" - score_max."max_Score")) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu."class" AS "class", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS "class", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS "class", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS "class", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS "class", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_2", CAST(NULL AS DOUBLE PRECISION) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3") AS "DecisionProba" 
FROM arg_max_cte