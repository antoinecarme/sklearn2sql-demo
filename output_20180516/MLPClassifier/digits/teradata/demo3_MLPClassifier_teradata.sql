-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : digits
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180602150647_h5s_hl_1_relu_1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602150647_h5s_hl_1_relu_1  (
	"KEY" BIGINT, 
	"NEUR_1_1" DOUBLE PRECISION, 
	"NEUR_1_2" DOUBLE PRECISION, 
	"NEUR_1_3" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602150647_h5s_hl_1_relu_1 part 2. Populate

INSERT INTO tmp_20180602150647_h5s_hl_1_relu_1 ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "U"."KEY", "U"."NEUR_1_1", "U"."NEUR_1_2", "U"."NEUR_1_3" 
FROM (WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE PRECISION) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE PRECISION) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE PRECISION) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE PRECISION) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE PRECISION) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE PRECISION) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE PRECISION) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE PRECISION) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE PRECISION) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE PRECISION) AS "Feature_9", CAST("ADS"."Feature_10" AS DOUBLE PRECISION) AS "Feature_10", CAST("ADS"."Feature_11" AS DOUBLE PRECISION) AS "Feature_11", CAST("ADS"."Feature_12" AS DOUBLE PRECISION) AS "Feature_12", CAST("ADS"."Feature_13" AS DOUBLE PRECISION) AS "Feature_13", CAST("ADS"."Feature_14" AS DOUBLE PRECISION) AS "Feature_14", CAST("ADS"."Feature_15" AS DOUBLE PRECISION) AS "Feature_15", CAST("ADS"."Feature_16" AS DOUBLE PRECISION) AS "Feature_16", CAST("ADS"."Feature_17" AS DOUBLE PRECISION) AS "Feature_17", CAST("ADS"."Feature_18" AS DOUBLE PRECISION) AS "Feature_18", CAST("ADS"."Feature_19" AS DOUBLE PRECISION) AS "Feature_19", CAST("ADS"."Feature_20" AS DOUBLE PRECISION) AS "Feature_20", CAST("ADS"."Feature_21" AS DOUBLE PRECISION) AS "Feature_21", CAST("ADS"."Feature_22" AS DOUBLE PRECISION) AS "Feature_22", CAST("ADS"."Feature_23" AS DOUBLE PRECISION) AS "Feature_23", CAST("ADS"."Feature_24" AS DOUBLE PRECISION) AS "Feature_24", CAST("ADS"."Feature_25" AS DOUBLE PRECISION) AS "Feature_25", CAST("ADS"."Feature_26" AS DOUBLE PRECISION) AS "Feature_26", CAST("ADS"."Feature_27" AS DOUBLE PRECISION) AS "Feature_27", CAST("ADS"."Feature_28" AS DOUBLE PRECISION) AS "Feature_28", CAST("ADS"."Feature_29" AS DOUBLE PRECISION) AS "Feature_29", CAST("ADS"."Feature_30" AS DOUBLE PRECISION) AS "Feature_30", CAST("ADS"."Feature_31" AS DOUBLE PRECISION) AS "Feature_31", CAST("ADS"."Feature_32" AS DOUBLE PRECISION) AS "Feature_32", CAST("ADS"."Feature_33" AS DOUBLE PRECISION) AS "Feature_33", CAST("ADS"."Feature_34" AS DOUBLE PRECISION) AS "Feature_34", CAST("ADS"."Feature_35" AS DOUBLE PRECISION) AS "Feature_35", CAST("ADS"."Feature_36" AS DOUBLE PRECISION) AS "Feature_36", CAST("ADS"."Feature_37" AS DOUBLE PRECISION) AS "Feature_37", CAST("ADS"."Feature_38" AS DOUBLE PRECISION) AS "Feature_38", CAST("ADS"."Feature_39" AS DOUBLE PRECISION) AS "Feature_39", CAST("ADS"."Feature_40" AS DOUBLE PRECISION) AS "Feature_40", CAST("ADS"."Feature_41" AS DOUBLE PRECISION) AS "Feature_41", CAST("ADS"."Feature_42" AS DOUBLE PRECISION) AS "Feature_42", CAST("ADS"."Feature_43" AS DOUBLE PRECISION) AS "Feature_43", CAST("ADS"."Feature_44" AS DOUBLE PRECISION) AS "Feature_44", CAST("ADS"."Feature_45" AS DOUBLE PRECISION) AS "Feature_45", CAST("ADS"."Feature_46" AS DOUBLE PRECISION) AS "Feature_46", CAST("ADS"."Feature_47" AS DOUBLE PRECISION) AS "Feature_47", CAST("ADS"."Feature_48" AS DOUBLE PRECISION) AS "Feature_48", CAST("ADS"."Feature_49" AS DOUBLE PRECISION) AS "Feature_49", CAST("ADS"."Feature_50" AS DOUBLE PRECISION) AS "Feature_50", CAST("ADS"."Feature_51" AS DOUBLE PRECISION) AS "Feature_51", CAST("ADS"."Feature_52" AS DOUBLE PRECISION) AS "Feature_52", CAST("ADS"."Feature_53" AS DOUBLE PRECISION) AS "Feature_53", CAST("ADS"."Feature_54" AS DOUBLE PRECISION) AS "Feature_54", CAST("ADS"."Feature_55" AS DOUBLE PRECISION) AS "Feature_55", CAST("ADS"."Feature_56" AS DOUBLE PRECISION) AS "Feature_56", CAST("ADS"."Feature_57" AS DOUBLE PRECISION) AS "Feature_57", CAST("ADS"."Feature_58" AS DOUBLE PRECISION) AS "Feature_58", CAST("ADS"."Feature_59" AS DOUBLE PRECISION) AS "Feature_59", CAST("ADS"."Feature_60" AS DOUBLE PRECISION) AS "Feature_60", CAST("ADS"."Feature_61" AS DOUBLE PRECISION) AS "Feature_61", CAST("ADS"."Feature_62" AS DOUBLE PRECISION) AS "Feature_62", CAST("ADS"."Feature_63" AS DOUBLE PRECISION) AS "Feature_63" 
FROM digits AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-0.043499804929168 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.252114170602964 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(1.493681556393314 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-0.228766905858978 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(2.00364966541813 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(2.169674320450325 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-1.206920817873404 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.046002424730667 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-0.097913674367475 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(1.169567854400363 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(0.449897053040766 AS DOUBLE PRECISION) * "IL"."Feature_10" + CAST(0.068746821402854 AS DOUBLE PRECISION) * "IL"."Feature_11" + CAST(0.992574758527523 AS DOUBLE PRECISION) * "IL"."Feature_12" + CAST(2.936973609666042 AS DOUBLE PRECISION) * "IL"."Feature_13" + CAST(0.86221055548846 AS DOUBLE PRECISION) * "IL"."Feature_14" + CAST(0.129992862312392 AS DOUBLE PRECISION) * "IL"."Feature_15" + CAST(-0.070048087990224 AS DOUBLE PRECISION) * "IL"."Feature_16" + CAST(-0.627400532694916 AS DOUBLE PRECISION) * "IL"."Feature_17" + CAST(-2.298753235862819 AS DOUBLE PRECISION) * "IL"."Feature_18" + CAST(-1.684478265238088 AS DOUBLE PRECISION) * "IL"."Feature_19" + CAST(3.387219976837897 AS DOUBLE PRECISION) * "IL"."Feature_20" + CAST(0.616224925643874 AS DOUBLE PRECISION) * "IL"."Feature_21" + CAST(0.563612296779404 AS DOUBLE PRECISION) * "IL"."Feature_22" + CAST(-0.244503025904354 AS DOUBLE PRECISION) * "IL"."Feature_23" + CAST(0.174132566830443 AS DOUBLE PRECISION) * "IL"."Feature_24" + CAST(-1.518611381372375 AS DOUBLE PRECISION) * "IL"."Feature_25" + CAST(-2.474368831415074 AS DOUBLE PRECISION) * "IL"."Feature_26" + CAST(-0.299571425394289 AS DOUBLE PRECISION) * "IL"."Feature_27" + CAST(2.271704610747708 AS DOUBLE PRECISION) * "IL"."Feature_28" + CAST(-1.856815995954276 AS DOUBLE PRECISION) * "IL"."Feature_29" + CAST(-1.767329307760536 AS DOUBLE PRECISION) * "IL"."Feature_30" + CAST(0.192456179303357 AS DOUBLE PRECISION) * "IL"."Feature_31" + CAST(-0.291015228655601 AS DOUBLE PRECISION) * "IL"."Feature_32" + CAST(-1.467246429364954 AS DOUBLE PRECISION) * "IL"."Feature_33" + CAST(-2.870061782304601 AS DOUBLE PRECISION) * "IL"."Feature_34" + CAST(-0.02454653078128 AS DOUBLE PRECISION) * "IL"."Feature_35" + CAST(2.141854506807176 AS DOUBLE PRECISION) * "IL"."Feature_36" + CAST(-1.488907475766556 AS DOUBLE PRECISION) * "IL"."Feature_37" + CAST(-3.333441299998184 AS DOUBLE PRECISION) * "IL"."Feature_38" + CAST(0.113528745520612 AS DOUBLE PRECISION) * "IL"."Feature_39" + CAST(0.026220771996155 AS DOUBLE PRECISION) * "IL"."Feature_40" + CAST(0.04676344994776 AS DOUBLE PRECISION) * "IL"."Feature_41" + CAST(-2.019066995938978 AS DOUBLE PRECISION) * "IL"."Feature_42" + CAST(-0.09270448265674 AS DOUBLE PRECISION) * "IL"."Feature_43" + CAST(-0.636168582730758 AS DOUBLE PRECISION) * "IL"."Feature_44" + CAST(-1.738991155420743 AS DOUBLE PRECISION) * "IL"."Feature_45" + CAST(-0.130144015757153 AS DOUBLE PRECISION) * "IL"."Feature_46" + CAST(0.136438332297891 AS DOUBLE PRECISION) * "IL"."Feature_47" + CAST(0.069736652264535 AS DOUBLE PRECISION) * "IL"."Feature_48" + CAST(0.927577758594311 AS DOUBLE PRECISION) * "IL"."Feature_49" + CAST(0.58433721965343 AS DOUBLE PRECISION) * "IL"."Feature_50" + CAST(0.814644709929568 AS DOUBLE PRECISION) * "IL"."Feature_51" + CAST(2.980175149408544 AS DOUBLE PRECISION) * "IL"."Feature_52" + CAST(2.780584834700434 AS DOUBLE PRECISION) * "IL"."Feature_53" + CAST(1.362898831304602 AS DOUBLE PRECISION) * "IL"."Feature_54" + CAST(-0.537169073048678 AS DOUBLE PRECISION) * "IL"."Feature_55" + CAST(-0.117213241512074 AS DOUBLE PRECISION) * "IL"."Feature_56" + CAST(0.212342672016338 AS DOUBLE PRECISION) * "IL"."Feature_57" + CAST(2.326505356969855 AS DOUBLE PRECISION) * "IL"."Feature_58" + CAST(0.677567807724958 AS DOUBLE PRECISION) * "IL"."Feature_59" + CAST(2.341401798194978 AS DOUBLE PRECISION) * "IL"."Feature_60" + CAST(1.83414931466166 AS DOUBLE PRECISION) * "IL"."Feature_61" + CAST(-0.078994400415732 AS DOUBLE PRECISION) * "IL"."Feature_62" + CAST(-0.734134314884123 AS DOUBLE PRECISION) * "IL"."Feature_63" + CAST(-0.254758480314627 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(0.057959116722545 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(0.002867850098876 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(-0.198788917519089 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(0.123594286889264 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(0.024278836738773 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(0.17858137402793 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(-0.137272195378691 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.285943189129219 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(0.252249540001213 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(-0.045591001294248 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.206787138676838 AS DOUBLE PRECISION) * "IL"."Feature_10" + CAST(-0.115300468651319 AS DOUBLE PRECISION) * "IL"."Feature_11" + CAST(-0.254590954684298 AS DOUBLE PRECISION) * "IL"."Feature_12" + CAST(0.09934817594395 AS DOUBLE PRECISION) * "IL"."Feature_13" + CAST(0.022668895613704 AS DOUBLE PRECISION) * "IL"."Feature_14" + CAST(-0.140535740989687 AS DOUBLE PRECISION) * "IL"."Feature_15" + CAST(0.086627214236223 AS DOUBLE PRECISION) * "IL"."Feature_16" + CAST(-0.195932044333856 AS DOUBLE PRECISION) * "IL"."Feature_17" + CAST(0.02312229849273 AS DOUBLE PRECISION) * "IL"."Feature_18" + CAST(0.119068025057617 AS DOUBLE PRECISION) * "IL"."Feature_19" + CAST(-0.333493823086108 AS DOUBLE PRECISION) * "IL"."Feature_20" + CAST(-0.04661719055231 AS DOUBLE PRECISION) * "IL"."Feature_21" + CAST(-0.223380430649654 AS DOUBLE PRECISION) * "IL"."Feature_22" + CAST(-0.001366806788437 AS DOUBLE PRECISION) * "IL"."Feature_23" + CAST(0.136582114384552 AS DOUBLE PRECISION) * "IL"."Feature_24" + CAST(-0.052730551438689 AS DOUBLE PRECISION) * "IL"."Feature_25" + CAST(0.042840083770516 AS DOUBLE PRECISION) * "IL"."Feature_26" + CAST(0.109326031112304 AS DOUBLE PRECISION) * "IL"."Feature_27" + CAST(-0.107432167652826 AS DOUBLE PRECISION) * "IL"."Feature_28" + CAST(-0.272904874702881 AS DOUBLE PRECISION) * "IL"."Feature_29" + CAST(-0.031165660952282 AS DOUBLE PRECISION) * "IL"."Feature_30" + CAST(-0.211375414973089 AS DOUBLE PRECISION) * "IL"."Feature_31" + CAST(-0.240088062155737 AS DOUBLE PRECISION) * "IL"."Feature_32" + CAST(0.080216779904459 AS DOUBLE PRECISION) * "IL"."Feature_33" + CAST(-0.230017795115086 AS DOUBLE PRECISION) * "IL"."Feature_34" + CAST(0.019610514661038 AS DOUBLE PRECISION) * "IL"."Feature_35" + CAST(0.18305645248744 AS DOUBLE PRECISION) * "IL"."Feature_36" + CAST(-0.291230686827245 AS DOUBLE PRECISION) * "IL"."Feature_37" + CAST(0.247928183819458 AS DOUBLE PRECISION) * "IL"."Feature_38" + CAST(0.147850630620264 AS DOUBLE PRECISION) * "IL"."Feature_39" + CAST(0.258341039852185 AS DOUBLE PRECISION) * "IL"."Feature_40" + CAST(0.023764636196255 AS DOUBLE PRECISION) * "IL"."Feature_41" + CAST(0.165667452061337 AS DOUBLE PRECISION) * "IL"."Feature_42" + CAST(0.001053413285912 AS DOUBLE PRECISION) * "IL"."Feature_43" + CAST(0.205343534523643 AS DOUBLE PRECISION) * "IL"."Feature_44" + CAST(-0.224103988790297 AS DOUBLE PRECISION) * "IL"."Feature_45" + CAST(0.06506529957345 AS DOUBLE PRECISION) * "IL"."Feature_46" + CAST(0.209110111352938 AS DOUBLE PRECISION) * "IL"."Feature_47" + CAST(-0.045732334400849 AS DOUBLE PRECISION) * "IL"."Feature_48" + CAST(-0.107076598131461 AS DOUBLE PRECISION) * "IL"."Feature_49" + CAST(0.064972025057449 AS DOUBLE PRECISION) * "IL"."Feature_50" + CAST(-0.148646725666922 AS DOUBLE PRECISION) * "IL"."Feature_51" + CAST(-0.245426255567677 AS DOUBLE PRECISION) * "IL"."Feature_52" + CAST(-0.098438316278174 AS DOUBLE PRECISION) * "IL"."Feature_53" + CAST(0.271286306536771 AS DOUBLE PRECISION) * "IL"."Feature_54" + CAST(-0.052430893315706 AS DOUBLE PRECISION) * "IL"."Feature_55" + CAST(0.081820741309539 AS DOUBLE PRECISION) * "IL"."Feature_56" + CAST(0.069079661151647 AS DOUBLE PRECISION) * "IL"."Feature_57" + CAST(0.134159586480984 AS DOUBLE PRECISION) * "IL"."Feature_58" + CAST(-0.177565484677612 AS DOUBLE PRECISION) * "IL"."Feature_59" + CAST(-0.185459034859195 AS DOUBLE PRECISION) * "IL"."Feature_60" + CAST(0.200999104726373 AS DOUBLE PRECISION) * "IL"."Feature_61" + CAST(-0.188845408606191 AS DOUBLE PRECISION) * "IL"."Feature_62" + CAST(0.081923930883706 AS DOUBLE PRECISION) * "IL"."Feature_63" + CAST(0.282809622258679 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(0.283576179521631 AS DOUBLE PRECISION) * "IL"."Feature_0" + CAST(-0.1962274503913 AS DOUBLE PRECISION) * "IL"."Feature_1" + CAST(0.125756750577574 AS DOUBLE PRECISION) * "IL"."Feature_2" + CAST(-0.018418202612177 AS DOUBLE PRECISION) * "IL"."Feature_3" + CAST(-0.243134797504391 AS DOUBLE PRECISION) * "IL"."Feature_4" + CAST(-0.130011749871982 AS DOUBLE PRECISION) * "IL"."Feature_5" + CAST(0.184480931443791 AS DOUBLE PRECISION) * "IL"."Feature_6" + CAST(-0.179491551356021 AS DOUBLE PRECISION) * "IL"."Feature_7" + CAST(-0.223199884965542 AS DOUBLE PRECISION) * "IL"."Feature_8" + CAST(0.237763886263295 AS DOUBLE PRECISION) * "IL"."Feature_9" + CAST(-0.059661391649654 AS DOUBLE PRECISION) * "IL"."Feature_10" + CAST(-0.05821341936579 AS DOUBLE PRECISION) * "IL"."Feature_11" + CAST(0.150168571496687 AS DOUBLE PRECISION) * "IL"."Feature_12" + CAST(-0.207028718972958 AS DOUBLE PRECISION) * "IL"."Feature_13" + CAST(-0.270234225636313 AS DOUBLE PRECISION) * "IL"."Feature_14" + CAST(-0.227763181881327 AS DOUBLE PRECISION) * "IL"."Feature_15" + CAST(0.059943956774313 AS DOUBLE PRECISION) * "IL"."Feature_16" + CAST(-0.047352790059202 AS DOUBLE PRECISION) * "IL"."Feature_17" + CAST(0.154048877347683 AS DOUBLE PRECISION) * "IL"."Feature_18" + CAST(-0.071751612779569 AS DOUBLE PRECISION) * "IL"."Feature_19" + CAST(-0.134888264306346 AS DOUBLE PRECISION) * "IL"."Feature_20" + CAST(0.106137788158061 AS DOUBLE PRECISION) * "IL"."Feature_21" + CAST(-0.301252026325653 AS DOUBLE PRECISION) * "IL"."Feature_22" + CAST(0.164761099101417 AS DOUBLE PRECISION) * "IL"."Feature_23" + CAST(0.291083218103566 AS DOUBLE PRECISION) * "IL"."Feature_24" + CAST(0.050672158975575 AS DOUBLE PRECISION) * "IL"."Feature_25" + CAST(0.067457754652127 AS DOUBLE PRECISION) * "IL"."Feature_26" + CAST(0.228452189054617 AS DOUBLE PRECISION) * "IL"."Feature_27" + CAST(0.045559210311209 AS DOUBLE PRECISION) * "IL"."Feature_28" + CAST(0.059274311062351 AS DOUBLE PRECISION) * "IL"."Feature_29" + CAST(-0.267422016731511 AS DOUBLE PRECISION) * "IL"."Feature_30" + CAST(0.109941061935669 AS DOUBLE PRECISION) * "IL"."Feature_31" + CAST(-0.218333482112883 AS DOUBLE PRECISION) * "IL"."Feature_32" + CAST(-0.145832675477108 AS DOUBLE PRECISION) * "IL"."Feature_33" + CAST(-0.098720366038441 AS DOUBLE PRECISION) * "IL"."Feature_34" + CAST(-0.267450526975582 AS DOUBLE PRECISION) * "IL"."Feature_35" + CAST(0.15076960678309 AS DOUBLE PRECISION) * "IL"."Feature_36" + CAST(0.018331973067728 AS DOUBLE PRECISION) * "IL"."Feature_37" + CAST(-0.038668858314369 AS DOUBLE PRECISION) * "IL"."Feature_38" + CAST(-0.261471064933608 AS DOUBLE PRECISION) * "IL"."Feature_39" + CAST(0.040188961659004 AS DOUBLE PRECISION) * "IL"."Feature_40" + CAST(-0.086405628145888 AS DOUBLE PRECISION) * "IL"."Feature_41" + CAST(-0.155458883503175 AS DOUBLE PRECISION) * "IL"."Feature_42" + CAST(-0.10231213666742 AS DOUBLE PRECISION) * "IL"."Feature_43" + CAST(-0.078618372289015 AS DOUBLE PRECISION) * "IL"."Feature_44" + CAST(-0.315312194921874 AS DOUBLE PRECISION) * "IL"."Feature_45" + CAST(0.224477343256009 AS DOUBLE PRECISION) * "IL"."Feature_46" + CAST(0.200396081713014 AS DOUBLE PRECISION) * "IL"."Feature_47" + CAST(-0.051536406569482 AS DOUBLE PRECISION) * "IL"."Feature_48" + CAST(-0.136712143229732 AS DOUBLE PRECISION) * "IL"."Feature_49" + CAST(0.120032852197508 AS DOUBLE PRECISION) * "IL"."Feature_50" + CAST(-0.008892536446259 AS DOUBLE PRECISION) * "IL"."Feature_51" + CAST(0.245659638997601 AS DOUBLE PRECISION) * "IL"."Feature_52" + CAST(0.156265742346697 AS DOUBLE PRECISION) * "IL"."Feature_53" + CAST(-0.055028567775789 AS DOUBLE PRECISION) * "IL"."Feature_54" + CAST(-0.176078538155381 AS DOUBLE PRECISION) * "IL"."Feature_55" + CAST(0.050061479893552 AS DOUBLE PRECISION) * "IL"."Feature_56" + CAST(-0.046812456696156 AS DOUBLE PRECISION) * "IL"."Feature_57" + CAST(-0.149426274610389 AS DOUBLE PRECISION) * "IL"."Feature_58" + CAST(-0.06966282217039 AS DOUBLE PRECISION) * "IL"."Feature_59" + CAST(-0.209052125015852 AS DOUBLE PRECISION) * "IL"."Feature_60" + CAST(-0.263018647603837 AS DOUBLE PRECISION) * "IL"."Feature_61" + CAST(-0.141006971852599 AS DOUBLE PRECISION) * "IL"."Feature_62" + CAST(0.190542602830796 AS DOUBLE PRECISION) * "IL"."Feature_63" + CAST(-0.300539859238546 AS DOUBLE PRECISION) AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", greatest("HL_BA_1"."NEUR_1_1", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_1", greatest("HL_BA_1"."NEUR_1_2", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_2", greatest("HL_BA_1"."NEUR_1_3", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_3" 
FROM "HL_BA_1")
 SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "U"

-- Code For temporary table tmp_20180602150647_dlj_ol_softmax_1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602150647_dlj_ol_softmax_1  (
	"KEY" BIGINT, 
	"NEUR_3_1" DOUBLE PRECISION, 
	"NEUR_3_2" DOUBLE PRECISION, 
	"NEUR_3_3" DOUBLE PRECISION, 
	"NEUR_3_4" DOUBLE PRECISION, 
	"NEUR_3_5" DOUBLE PRECISION, 
	"NEUR_3_6" DOUBLE PRECISION, 
	"NEUR_3_7" DOUBLE PRECISION, 
	"NEUR_3_8" DOUBLE PRECISION, 
	"NEUR_3_9" DOUBLE PRECISION, 
	"NEUR_3_10" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602150647_dlj_ol_softmax_1 part 2. Populate

INSERT INTO tmp_20180602150647_dlj_ol_softmax_1 ("KEY", "NEUR_3_1", "NEUR_3_2", "NEUR_3_3", "NEUR_3_4", "NEUR_3_5", "NEUR_3_6", "NEUR_3_7", "NEUR_3_8", "NEUR_3_9", "NEUR_3_10") SELECT "U"."KEY", "U"."NEUR_3_1", "U"."NEUR_3_2", "U"."NEUR_3_3", "U"."NEUR_3_4", "U"."NEUR_3_5", "U"."NEUR_3_6", "U"."NEUR_3_7", "U"."NEUR_3_8", "U"."NEUR_3_9", "U"."NEUR_3_10" 
FROM (WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", CAST(-0.557336490102975 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-0.864153424396568 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-0.276660478089548 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(2.295386642805444 AS DOUBLE PRECISION) AS "NEUR_2_1", CAST(0.011735522860249 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-0.403411986583338 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(0.186123673830817 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-0.508232954910367 AS DOUBLE PRECISION) AS "NEUR_2_2", CAST(-0.050921304936018 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(0.849172101050994 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(0.824555574035096 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-0.284559233995735 AS DOUBLE PRECISION) AS "NEUR_2_3", CAST(-0.003847843462337 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(0.400236972498278 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-0.283183347167081 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-0.691559145758 AS DOUBLE PRECISION) AS "NEUR_2_4", CAST(0.062905432305623 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-0.262408031786624 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(0.109919725290648 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-3.800284390483226 AS DOUBLE PRECISION) AS "NEUR_2_5" 
FROM tmp_20180602150647_h5s_hl_1_relu_1 AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", greatest("HL_BA_2"."NEUR_2_1", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_1", greatest("HL_BA_2"."NEUR_2_2", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_2", greatest("HL_BA_2"."NEUR_2_3", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_3", greatest("HL_BA_2"."NEUR_2_4", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_4", greatest("HL_BA_2"."NEUR_2_5", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", CAST(1.763154374324467 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(0.084789003588615 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-0.310671364771011 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(-1.623754710269348 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(-2.198278182540392 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(2.418473832045558 AS DOUBLE PRECISION) AS "NEUR_3_1", CAST(-1.479325083416576 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(0.177459436769823 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-0.562718407518866 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(-0.102728482939328 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.502936378280425 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(-0.449878276396994 AS DOUBLE PRECISION) AS "NEUR_3_2", CAST(-2.458115466921616 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(0.048359429067797 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-0.302188286698309 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(1.553370265253775 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(1.049802676250587 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(-6.048867040106392 AS DOUBLE PRECISION) AS "NEUR_3_3", CAST(-2.321493263283275 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(0.788456679656487 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(0.377171877228938 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(0.64637470058577 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.828052671989098 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(-4.921429725102976 AS DOUBLE PRECISION) AS "NEUR_3_4", CAST(2.671400256313335 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(-0.545598194937426 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-0.05171142318335 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(-0.579261396741701 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(-1.707119191022665 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(0.92052260615882 AS DOUBLE PRECISION) AS "NEUR_3_5", CAST(0.672214312286394 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(0.606726995782398 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-0.512978387099283 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(0.416028868001655 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(-0.01090196729085 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(1.561244998748783 AS DOUBLE PRECISION) AS "NEUR_3_6", CAST(1.943929805398442 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(-0.263714501083816 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(0.182618698127809 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(-0.565384205147533 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(-0.406485655847583 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(2.165341102861783 AS DOUBLE PRECISION) AS "NEUR_3_7", CAST(0.584335235461989 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(0.311854116214585 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-0.358975214391525 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(0.252270801777313 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.060220248020601 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(1.448084264896552 AS DOUBLE PRECISION) AS "NEUR_3_8", CAST(-1.428650563547325 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(0.895564813137191 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(0.543082060109193 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(-0.075008556908508 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.290865090997948 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(-0.179244925888525 AS DOUBLE PRECISION) AS "NEUR_3_9", CAST(-0.269544115156945 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(-0.442568531088958 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-0.398726480687509 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(0.045458113575002 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.46928397530256 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(0.478556480684556 AS DOUBLE PRECISION) AS "NEUR_3_10" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4", "OL_BA"."NEUR_3_5" AS "NEUR_3_5", "OL_BA"."NEUR_3_6" AS "NEUR_3_6", "OL_BA"."NEUR_3_7" AS "NEUR_3_7", "OL_BA"."NEUR_3_8" AS "NEUR_3_8", "OL_BA"."NEUR_3_9" AS "NEUR_3_9", "OL_BA"."NEUR_3_10" AS "NEUR_3_10" 
FROM "OL_BA")
 SELECT "OL_softmax_1"."KEY", "OL_softmax_1"."NEUR_3_1", "OL_softmax_1"."NEUR_3_2", "OL_softmax_1"."NEUR_3_3", "OL_softmax_1"."NEUR_3_4", "OL_softmax_1"."NEUR_3_5", "OL_softmax_1"."NEUR_3_6", "OL_softmax_1"."NEUR_3_7", "OL_softmax_1"."NEUR_3_8", "OL_softmax_1"."NEUR_3_9", "OL_softmax_1"."NEUR_3_10" 
FROM (SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax"."NEUR_3_4" AS "NEUR_3_4", "OL_softmax"."NEUR_3_5" AS "NEUR_3_5", "OL_softmax"."NEUR_3_6" AS "NEUR_3_6", "OL_softmax"."NEUR_3_7" AS "NEUR_3_7", "OL_softmax"."NEUR_3_8" AS "NEUR_3_8", "OL_softmax"."NEUR_3_9" AS "NEUR_3_9", "OL_softmax"."NEUR_3_10" AS "NEUR_3_10" 
FROM "OL_softmax") AS "OL_softmax_1") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "Score_0", "OL_softmax_1"."NEUR_3_2" AS "Score_1", "OL_softmax_1"."NEUR_3_3" AS "Score_2", "OL_softmax_1"."NEUR_3_4" AS "Score_3", "OL_softmax_1"."NEUR_3_5" AS "Score_4", "OL_softmax_1"."NEUR_3_6" AS "Score_5", "OL_softmax_1"."NEUR_3_7" AS "Score_6", "OL_softmax_1"."NEUR_3_8" AS "Score_7", "OL_softmax_1"."NEUR_3_9" AS "Score_8", "OL_softmax_1"."NEUR_3_10" AS "Score_9", CAST(NULL AS DOUBLE PRECISION) AS "Proba_0", CAST(NULL AS DOUBLE PRECISION) AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "Proba_2", CAST(NULL AS DOUBLE PRECISION) AS "Proba_3", CAST(NULL AS DOUBLE PRECISION) AS "Proba_4", CAST(NULL AS DOUBLE PRECISION) AS "Proba_5", CAST(NULL AS DOUBLE PRECISION) AS "Proba_6", CAST(NULL AS DOUBLE PRECISION) AS "Proba_7", CAST(NULL AS DOUBLE PRECISION) AS "Proba_8", CAST(NULL AS DOUBLE PRECISION) AS "Proba_9", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_3", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_4", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_5", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_6", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_7", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_8", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_9", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM tmp_20180602150647_dlj_ol_softmax_1 AS "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 4 AS "class", orig_cte."LogProba_4" AS "LogProba", orig_cte."Proba_4" AS "Proba", orig_cte."Score_4" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 5 AS "class", orig_cte."LogProba_5" AS "LogProba", orig_cte."Proba_5" AS "Proba", orig_cte."Score_5" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 6 AS "class", orig_cte."LogProba_6" AS "LogProba", orig_cte."Proba_6" AS "Proba", orig_cte."Score_6" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 7 AS "class", orig_cte."LogProba_7" AS "LogProba", orig_cte."Proba_7" AS "Proba", orig_cte."Score_7" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 8 AS "class", orig_cte."LogProba_8" AS "LogProba", orig_cte."Proba_8" AS "Proba", orig_cte."Score_8" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 9 AS "class", orig_cte."LogProba_9" AS "LogProba", orig_cte."Proba_9" AS "Proba", orig_cte."Score_9" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Score_4" AS "Score_4", orig_cte."Score_5" AS "Score_5", orig_cte."Score_6" AS "Score_6", orig_cte."Score_7" AS "Score_7", orig_cte."Score_8" AS "Score_8", orig_cte."Score_9" AS "Score_9", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."Proba_4" AS "Proba_4", orig_cte."Proba_5" AS "Proba_5", orig_cte."Proba_6" AS "Proba_6", orig_cte."Proba_7" AS "Proba_7", orig_cte."Proba_8" AS "Proba_8", orig_cte."Proba_9" AS "Proba_9", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."LogProba_4" AS "LogProba_4", orig_cte."LogProba_5" AS "LogProba_5", orig_cte."LogProba_6" AS "LogProba_6", orig_cte."LogProba_7" AS "LogProba_7", orig_cte."LogProba_8" AS "LogProba_8", orig_cte."LogProba_9" AS "LogProba_9", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Score_4" AS "Score_4", score_max."Score_5" AS "Score_5", score_max."Score_6" AS "Score_6", score_max."Score_7" AS "Score_7", score_max."Score_8" AS "Score_8", score_max."Score_9" AS "Score_9", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."Proba_4" AS "Proba_4", score_max."Proba_5" AS "Proba_5", score_max."Proba_6" AS "Proba_6", score_max."Proba_7" AS "Proba_7", score_max."Proba_8" AS "Proba_8", score_max."Proba_9" AS "Proba_9", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."LogProba_4" AS "LogProba_4", score_max."LogProba_5" AS "LogProba_5", score_max."LogProba_6" AS "LogProba_6", score_max."LogProba_7" AS "LogProba_7", score_max."LogProba_8" AS "LogProba_8", score_max."LogProba_9" AS "LogProba_9", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_0" - score_max."max_Score")) AS "exp_delta_Score_0", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_1" - score_max."max_Score")) AS "exp_delta_Score_1", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_2" - score_max."max_Score")) AS "exp_delta_Score_2", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_3" - score_max."max_Score")) AS "exp_delta_Score_3", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_4" - score_max."max_Score")) AS "exp_delta_Score_4", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_5" - score_max."max_Score")) AS "exp_delta_Score_5", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_6" - score_max."max_Score")) AS "exp_delta_Score_6", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_7" - score_max."max_Score")) AS "exp_delta_Score_7", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_8" - score_max."max_Score")) AS "exp_delta_Score_8", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_9" - score_max."max_Score")) AS "exp_delta_Score_9" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu."class" AS "class", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS "class", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS "class", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS "class", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS "class", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 4 AS "class", score_soft_max_deltas."exp_delta_Score_4" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 5 AS "class", score_soft_max_deltas."exp_delta_Score_5" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 6 AS "class", score_soft_max_deltas."exp_delta_Score_6" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 7 AS "class", score_soft_max_deltas."exp_delta_Score_7" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 8 AS "class", score_soft_max_deltas."exp_delta_Score_8" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 9 AS "class", score_soft_max_deltas."exp_delta_Score_9" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Score_4" AS "Score_4", score_soft_max_deltas."Score_5" AS "Score_5", score_soft_max_deltas."Score_6" AS "Score_6", score_soft_max_deltas."Score_7" AS "Score_7", score_soft_max_deltas."Score_8" AS "Score_8", score_soft_max_deltas."Score_9" AS "Score_9", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."Proba_4" AS "Proba_4", score_soft_max_deltas."Proba_5" AS "Proba_5", score_soft_max_deltas."Proba_6" AS "Proba_6", score_soft_max_deltas."Proba_7" AS "Proba_7", score_soft_max_deltas."Proba_8" AS "Proba_8", score_soft_max_deltas."Proba_9" AS "Proba_9", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."LogProba_4" AS "LogProba_4", score_soft_max_deltas."LogProba_5" AS "LogProba_5", score_soft_max_deltas."LogProba_6" AS "LogProba_6", score_soft_max_deltas."LogProba_7" AS "LogProba_7", score_soft_max_deltas."LogProba_8" AS "LogProba_8", score_soft_max_deltas."LogProba_9" AS "LogProba_9", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max_deltas."exp_delta_Score_4" AS "exp_delta_Score_4", score_soft_max_deltas."exp_delta_Score_5" AS "exp_delta_Score_5", score_soft_max_deltas."exp_delta_Score_6" AS "exp_delta_Score_6", score_soft_max_deltas."exp_delta_Score_7" AS "exp_delta_Score_7", score_soft_max_deltas."exp_delta_Score_8" AS "exp_delta_Score_8", score_soft_max_deltas."exp_delta_Score_9" AS "exp_delta_Score_9", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Score_4" AS "Score_4", score_soft_max."Score_5" AS "Score_5", score_soft_max."Score_6" AS "Score_6", score_soft_max."Score_7" AS "Score_7", score_soft_max."Score_8" AS "Score_8", score_soft_max."Score_9" AS "Score_9", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."Proba_4" AS "Proba_4", score_soft_max."Proba_5" AS "Proba_5", score_soft_max."Proba_6" AS "Proba_6", score_soft_max."Proba_7" AS "Proba_7", score_soft_max."Proba_8" AS "Proba_8", score_soft_max."Proba_9" AS "Proba_9", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."LogProba_4" AS "LogProba_4", score_soft_max."LogProba_5" AS "LogProba_5", score_soft_max."LogProba_6" AS "LogProba_6", score_soft_max."LogProba_7" AS "LogProba_7", score_soft_max."LogProba_8" AS "LogProba_8", score_soft_max."LogProba_9" AS "LogProba_9", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."exp_delta_Score_4" AS "exp_delta_Score_4", score_soft_max."exp_delta_Score_5" AS "exp_delta_Score_5", score_soft_max."exp_delta_Score_6" AS "exp_delta_Score_6", score_soft_max."exp_delta_Score_7" AS "exp_delta_Score_7", score_soft_max."exp_delta_Score_8" AS "exp_delta_Score_8", score_soft_max."exp_delta_Score_9" AS "exp_delta_Score_9", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Score_4" AS "Score_4", score_soft_max."Score_5" AS "Score_5", score_soft_max."Score_6" AS "Score_6", score_soft_max."Score_7" AS "Score_7", score_soft_max."Score_8" AS "Score_8", score_soft_max."Score_9" AS "Score_9", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."Proba_4" AS "Proba_4", score_soft_max."Proba_5" AS "Proba_5", score_soft_max."Proba_6" AS "Proba_6", score_soft_max."Proba_7" AS "Proba_7", score_soft_max."Proba_8" AS "Proba_8", score_soft_max."Proba_9" AS "Proba_9", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."LogProba_4" AS "LogProba_4", score_soft_max."LogProba_5" AS "LogProba_5", score_soft_max."LogProba_6" AS "LogProba_6", score_soft_max."LogProba_7" AS "LogProba_7", score_soft_max."LogProba_8" AS "LogProba_8", score_soft_max."LogProba_9" AS "LogProba_9", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."exp_delta_Score_4" AS "exp_delta_Score_4", score_soft_max."exp_delta_Score_5" AS "exp_delta_Score_5", score_soft_max."exp_delta_Score_6" AS "exp_delta_Score_6", score_soft_max."exp_delta_Score_7" AS "exp_delta_Score_7", score_soft_max."exp_delta_Score_8" AS "exp_delta_Score_8", score_soft_max."exp_delta_Score_9" AS "exp_delta_Score_9", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3", soft_max_comp."SoftProba_4" AS "SoftProba_4", soft_max_comp."SoftProba_5" AS "SoftProba_5", soft_max_comp."SoftProba_6" AS "SoftProba_6", soft_max_comp."SoftProba_7" AS "SoftProba_7", soft_max_comp."SoftProba_8" AS "SoftProba_8", soft_max_comp."SoftProba_9" AS "SoftProba_9" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3", score_soft_max."exp_delta_Score_4" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_4", score_soft_max."exp_delta_Score_5" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_5", score_soft_max."exp_delta_Score_6" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_6", score_soft_max."exp_delta_Score_7" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_7", score_soft_max."exp_delta_Score_8" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_8", score_soft_max."exp_delta_Score_9" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_9" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_2", CAST(NULL AS DOUBLE PRECISION) AS "Score_3", CAST(NULL AS DOUBLE PRECISION) AS "Score_4", CAST(NULL AS DOUBLE PRECISION) AS "Score_5", CAST(NULL AS DOUBLE PRECISION) AS "Score_6", CAST(NULL AS DOUBLE PRECISION) AS "Score_7", CAST(NULL AS DOUBLE PRECISION) AS "Score_8", CAST(NULL AS DOUBLE PRECISION) AS "Score_9", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", arg_max_cte."SoftProba_4" AS "Proba_4", arg_max_cte."SoftProba_5" AS "Proba_5", arg_max_cte."SoftProba_6" AS "Proba_6", arg_max_cte."SoftProba_7" AS "Proba_7", arg_max_cte."SoftProba_8" AS "Proba_8", arg_max_cte."SoftProba_9" AS "Proba_9", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", CASE WHEN (arg_max_cte."SoftProba_4" IS NULL OR arg_max_cte."SoftProba_4" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_4") ELSE -1.79769313486231e+308 END AS "LogProba_4", CASE WHEN (arg_max_cte."SoftProba_5" IS NULL OR arg_max_cte."SoftProba_5" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_5") ELSE -1.79769313486231e+308 END AS "LogProba_5", CASE WHEN (arg_max_cte."SoftProba_6" IS NULL OR arg_max_cte."SoftProba_6" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_6") ELSE -1.79769313486231e+308 END AS "LogProba_6", CASE WHEN (arg_max_cte."SoftProba_7" IS NULL OR arg_max_cte."SoftProba_7" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_7") ELSE -1.79769313486231e+308 END AS "LogProba_7", CASE WHEN (arg_max_cte."SoftProba_8" IS NULL OR arg_max_cte."SoftProba_8" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_8") ELSE -1.79769313486231e+308 END AS "LogProba_8", CASE WHEN (arg_max_cte."SoftProba_9" IS NULL OR arg_max_cte."SoftProba_9" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_9") ELSE -1.79769313486231e+308 END AS "LogProba_9", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3", arg_max_cte."SoftProba_4", arg_max_cte."SoftProba_5", arg_max_cte."SoftProba_6", arg_max_cte."SoftProba_7", arg_max_cte."SoftProba_8", arg_max_cte."SoftProba_9") AS "DecisionProba" 
FROM arg_max_cte