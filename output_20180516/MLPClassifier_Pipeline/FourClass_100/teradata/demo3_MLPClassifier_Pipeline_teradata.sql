-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier_Pipeline
-- Dataset : FourClass_100
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180516113140_codegen_99473s_ads_imp_1_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516113140_codegen_99473s_ads_imp_1_out  (
	"KEY" BIGINT, 
	impter_2 DOUBLE PRECISION, 
	impter_3 DOUBLE PRECISION, 
	impter_4 DOUBLE PRECISION, 
	impter_5 DOUBLE PRECISION, 
	impter_6 DOUBLE PRECISION, 
	impter_7 DOUBLE PRECISION, 
	impter_8 DOUBLE PRECISION, 
	impter_9 DOUBLE PRECISION, 
	impter_10 DOUBLE PRECISION, 
	impter_11 DOUBLE PRECISION, 
	impter_12 DOUBLE PRECISION, 
	impter_13 DOUBLE PRECISION, 
	impter_14 DOUBLE PRECISION, 
	impter_15 DOUBLE PRECISION, 
	impter_16 DOUBLE PRECISION, 
	impter_17 DOUBLE PRECISION, 
	impter_18 DOUBLE PRECISION, 
	impter_19 DOUBLE PRECISION, 
	impter_20 DOUBLE PRECISION, 
	impter_21 DOUBLE PRECISION, 
	impter_22 DOUBLE PRECISION, 
	impter_23 DOUBLE PRECISION, 
	impter_24 DOUBLE PRECISION, 
	impter_25 DOUBLE PRECISION, 
	impter_26 DOUBLE PRECISION, 
	impter_27 DOUBLE PRECISION, 
	impter_28 DOUBLE PRECISION, 
	impter_29 DOUBLE PRECISION, 
	impter_30 DOUBLE PRECISION, 
	impter_31 DOUBLE PRECISION, 
	impter_32 DOUBLE PRECISION, 
	impter_33 DOUBLE PRECISION, 
	impter_34 DOUBLE PRECISION, 
	impter_35 DOUBLE PRECISION, 
	impter_36 DOUBLE PRECISION, 
	impter_37 DOUBLE PRECISION, 
	impter_38 DOUBLE PRECISION, 
	impter_39 DOUBLE PRECISION, 
	impter_40 DOUBLE PRECISION, 
	impter_41 DOUBLE PRECISION, 
	impter_42 DOUBLE PRECISION, 
	impter_43 DOUBLE PRECISION, 
	impter_44 DOUBLE PRECISION, 
	impter_45 DOUBLE PRECISION, 
	impter_46 DOUBLE PRECISION, 
	impter_47 DOUBLE PRECISION, 
	impter_48 DOUBLE PRECISION, 
	impter_49 DOUBLE PRECISION, 
	impter_50 DOUBLE PRECISION, 
	impter_51 DOUBLE PRECISION, 
	impter_52 DOUBLE PRECISION, 
	impter_53 DOUBLE PRECISION, 
	impter_54 DOUBLE PRECISION, 
	impter_55 DOUBLE PRECISION, 
	impter_56 DOUBLE PRECISION, 
	impter_57 DOUBLE PRECISION, 
	impter_58 DOUBLE PRECISION, 
	impter_59 DOUBLE PRECISION, 
	impter_60 DOUBLE PRECISION, 
	impter_61 DOUBLE PRECISION, 
	impter_62 DOUBLE PRECISION, 
	impter_63 DOUBLE PRECISION, 
	impter_64 DOUBLE PRECISION, 
	impter_65 DOUBLE PRECISION, 
	impter_66 DOUBLE PRECISION, 
	impter_67 DOUBLE PRECISION, 
	impter_68 DOUBLE PRECISION, 
	impter_69 DOUBLE PRECISION, 
	impter_70 DOUBLE PRECISION, 
	impter_71 DOUBLE PRECISION, 
	impter_72 DOUBLE PRECISION, 
	impter_73 DOUBLE PRECISION, 
	impter_74 DOUBLE PRECISION, 
	impter_75 DOUBLE PRECISION, 
	impter_76 DOUBLE PRECISION, 
	impter_77 DOUBLE PRECISION, 
	impter_78 DOUBLE PRECISION, 
	impter_79 DOUBLE PRECISION, 
	impter_80 DOUBLE PRECISION, 
	impter_81 DOUBLE PRECISION, 
	impter_82 DOUBLE PRECISION, 
	impter_83 DOUBLE PRECISION, 
	impter_84 DOUBLE PRECISION, 
	impter_85 DOUBLE PRECISION, 
	impter_86 DOUBLE PRECISION, 
	impter_87 DOUBLE PRECISION, 
	impter_88 DOUBLE PRECISION, 
	impter_89 DOUBLE PRECISION, 
	impter_90 DOUBLE PRECISION, 
	impter_91 DOUBLE PRECISION, 
	impter_92 DOUBLE PRECISION, 
	impter_93 DOUBLE PRECISION, 
	impter_94 DOUBLE PRECISION, 
	impter_95 DOUBLE PRECISION, 
	impter_96 DOUBLE PRECISION, 
	impter_97 DOUBLE PRECISION, 
	impter_98 DOUBLE PRECISION, 
	impter_99 DOUBLE PRECISION, 
	impter_100 DOUBLE PRECISION, 
	impter_101 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516113140_codegen_99473s_ads_imp_1_out part 2. Populate

INSERT INTO tmp_20180516113140_codegen_99473s_ads_imp_1_out ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11, impter_12, impter_13, impter_14, impter_15, impter_16, impter_17, impter_18, impter_19, impter_20, impter_21, impter_22, impter_23, impter_24, impter_25, impter_26, impter_27, impter_28, impter_29, impter_30, impter_31, impter_32, impter_33, impter_34, impter_35, impter_36, impter_37, impter_38, impter_39, impter_40, impter_41, impter_42, impter_43, impter_44, impter_45, impter_46, impter_47, impter_48, impter_49, impter_50, impter_51, impter_52, impter_53, impter_54, impter_55, impter_56, impter_57, impter_58, impter_59, impter_60, impter_61, impter_62, impter_63, impter_64, impter_65, impter_66, impter_67, impter_68, impter_69, impter_70, impter_71, impter_72, impter_73, impter_74, impter_75, impter_76, impter_77, impter_78, impter_79, impter_80, impter_81, impter_82, impter_83, impter_84, impter_85, impter_86, impter_87, impter_88, impter_89, impter_90, impter_91, impter_92, impter_93, impter_94, impter_95, impter_96, impter_97, impter_98, impter_99, impter_100, impter_101) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11, "U".impter_12, "U".impter_13, "U".impter_14, "U".impter_15, "U".impter_16, "U".impter_17, "U".impter_18, "U".impter_19, "U".impter_20, "U".impter_21, "U".impter_22, "U".impter_23, "U".impter_24, "U".impter_25, "U".impter_26, "U".impter_27, "U".impter_28, "U".impter_29, "U".impter_30, "U".impter_31, "U".impter_32, "U".impter_33, "U".impter_34, "U".impter_35, "U".impter_36, "U".impter_37, "U".impter_38, "U".impter_39, "U".impter_40, "U".impter_41, "U".impter_42, "U".impter_43, "U".impter_44, "U".impter_45, "U".impter_46, "U".impter_47, "U".impter_48, "U".impter_49, "U".impter_50, "U".impter_51, "U".impter_52, "U".impter_53, "U".impter_54, "U".impter_55, "U".impter_56, "U".impter_57, "U".impter_58, "U".impter_59, "U".impter_60, "U".impter_61, "U".impter_62, "U".impter_63, "U".impter_64, "U".impter_65, "U".impter_66, "U".impter_67, "U".impter_68, "U".impter_69, "U".impter_70, "U".impter_71, "U".impter_72, "U".impter_73, "U".impter_74, "U".impter_75, "U".impter_76, "U".impter_77, "U".impter_78, "U".impter_79, "U".impter_80, "U".impter_81, "U".impter_82, "U".impter_83, "U".impter_84, "U".impter_85, "U".impter_86, "U".impter_87, "U".impter_88, "U".impter_89, "U".impter_90, "U".impter_91, "U".impter_92, "U".impter_93, "U".impter_94, "U".impter_95, "U".impter_96, "U".impter_97, "U".impter_98, "U".impter_99, "U".impter_100, "U".impter_101 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11, "ADS_imp_1_OUT".impter_12, "ADS_imp_1_OUT".impter_13, "ADS_imp_1_OUT".impter_14, "ADS_imp_1_OUT".impter_15, "ADS_imp_1_OUT".impter_16, "ADS_imp_1_OUT".impter_17, "ADS_imp_1_OUT".impter_18, "ADS_imp_1_OUT".impter_19, "ADS_imp_1_OUT".impter_20, "ADS_imp_1_OUT".impter_21, "ADS_imp_1_OUT".impter_22, "ADS_imp_1_OUT".impter_23, "ADS_imp_1_OUT".impter_24, "ADS_imp_1_OUT".impter_25, "ADS_imp_1_OUT".impter_26, "ADS_imp_1_OUT".impter_27, "ADS_imp_1_OUT".impter_28, "ADS_imp_1_OUT".impter_29, "ADS_imp_1_OUT".impter_30, "ADS_imp_1_OUT".impter_31, "ADS_imp_1_OUT".impter_32, "ADS_imp_1_OUT".impter_33, "ADS_imp_1_OUT".impter_34, "ADS_imp_1_OUT".impter_35, "ADS_imp_1_OUT".impter_36, "ADS_imp_1_OUT".impter_37, "ADS_imp_1_OUT".impter_38, "ADS_imp_1_OUT".impter_39, "ADS_imp_1_OUT".impter_40, "ADS_imp_1_OUT".impter_41, "ADS_imp_1_OUT".impter_42, "ADS_imp_1_OUT".impter_43, "ADS_imp_1_OUT".impter_44, "ADS_imp_1_OUT".impter_45, "ADS_imp_1_OUT".impter_46, "ADS_imp_1_OUT".impter_47, "ADS_imp_1_OUT".impter_48, "ADS_imp_1_OUT".impter_49, "ADS_imp_1_OUT".impter_50, "ADS_imp_1_OUT".impter_51, "ADS_imp_1_OUT".impter_52, "ADS_imp_1_OUT".impter_53, "ADS_imp_1_OUT".impter_54, "ADS_imp_1_OUT".impter_55, "ADS_imp_1_OUT".impter_56, "ADS_imp_1_OUT".impter_57, "ADS_imp_1_OUT".impter_58, "ADS_imp_1_OUT".impter_59, "ADS_imp_1_OUT".impter_60, "ADS_imp_1_OUT".impter_61, "ADS_imp_1_OUT".impter_62, "ADS_imp_1_OUT".impter_63, "ADS_imp_1_OUT".impter_64, "ADS_imp_1_OUT".impter_65, "ADS_imp_1_OUT".impter_66, "ADS_imp_1_OUT".impter_67, "ADS_imp_1_OUT".impter_68, "ADS_imp_1_OUT".impter_69, "ADS_imp_1_OUT".impter_70, "ADS_imp_1_OUT".impter_71, "ADS_imp_1_OUT".impter_72, "ADS_imp_1_OUT".impter_73, "ADS_imp_1_OUT".impter_74, "ADS_imp_1_OUT".impter_75, "ADS_imp_1_OUT".impter_76, "ADS_imp_1_OUT".impter_77, "ADS_imp_1_OUT".impter_78, "ADS_imp_1_OUT".impter_79, "ADS_imp_1_OUT".impter_80, "ADS_imp_1_OUT".impter_81, "ADS_imp_1_OUT".impter_82, "ADS_imp_1_OUT".impter_83, "ADS_imp_1_OUT".impter_84, "ADS_imp_1_OUT".impter_85, "ADS_imp_1_OUT".impter_86, "ADS_imp_1_OUT".impter_87, "ADS_imp_1_OUT".impter_88, "ADS_imp_1_OUT".impter_89, "ADS_imp_1_OUT".impter_90, "ADS_imp_1_OUT".impter_91, "ADS_imp_1_OUT".impter_92, "ADS_imp_1_OUT".impter_93, "ADS_imp_1_OUT".impter_94, "ADS_imp_1_OUT".impter_95, "ADS_imp_1_OUT".impter_96, "ADS_imp_1_OUT".impter_97, "ADS_imp_1_OUT".impter_98, "ADS_imp_1_OUT".impter_99, "ADS_imp_1_OUT".impter_100, "ADS_imp_1_OUT".impter_101 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.0014807007689716506 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.08599214990681354 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.006358164676411468 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.024301807422776375 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.015786548044298444 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.13959329445651672 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.06476745048019888 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.025579810774090658 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.03173937260977112 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.1518141420862488 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN -0.13244576558492482 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.044172679762224144 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.010165946719810038 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.03645872019103299 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.06491512811593925 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.11930146867074032 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.007738863934852773 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN -0.1226774060147726 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.019160881669086405 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.26340351121131067 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN 0.035692361937735194 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN -0.010021324964069293 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN -0.1258614387723542 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 0.09372773898231128 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN -0.1687929597880227 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN 0.10006283199629364 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN -0.10297858086822659 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 0.19240514535870415 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN -0.052866434246092435 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 0.2624612146366151 ELSE "ADS"."Feature_29" END AS impter_31, CASE WHEN ("ADS"."Feature_30" IS NULL) THEN 0.002677575140361194 ELSE "ADS"."Feature_30" END AS impter_32, CASE WHEN ("ADS"."Feature_31" IS NULL) THEN 0.09707041941284063 ELSE "ADS"."Feature_31" END AS impter_33, CASE WHEN ("ADS"."Feature_32" IS NULL) THEN -0.032793219857333473 ELSE "ADS"."Feature_32" END AS impter_34, CASE WHEN ("ADS"."Feature_33" IS NULL) THEN -0.003130273745908922 ELSE "ADS"."Feature_33" END AS impter_35, CASE WHEN ("ADS"."Feature_34" IS NULL) THEN 0.053446276216279974 ELSE "ADS"."Feature_34" END AS impter_36, CASE WHEN ("ADS"."Feature_35" IS NULL) THEN -0.18668146437412367 ELSE "ADS"."Feature_35" END AS impter_37, CASE WHEN ("ADS"."Feature_36" IS NULL) THEN -0.029335964960866243 ELSE "ADS"."Feature_36" END AS impter_38, CASE WHEN ("ADS"."Feature_37" IS NULL) THEN 0.07219772199502426 ELSE "ADS"."Feature_37" END AS impter_39, CASE WHEN ("ADS"."Feature_38" IS NULL) THEN -0.0007762839781489412 ELSE "ADS"."Feature_38" END AS impter_40, CASE WHEN ("ADS"."Feature_39" IS NULL) THEN 0.08270823712098274 ELSE "ADS"."Feature_39" END AS impter_41, CASE WHEN ("ADS"."Feature_40" IS NULL) THEN 0.10432022852347983 ELSE "ADS"."Feature_40" END AS impter_42, CASE WHEN ("ADS"."Feature_41" IS NULL) THEN 0.07058566385022276 ELSE "ADS"."Feature_41" END AS impter_43, CASE WHEN ("ADS"."Feature_42" IS NULL) THEN 0.05096693098357383 ELSE "ADS"."Feature_42" END AS impter_44, CASE WHEN ("ADS"."Feature_43" IS NULL) THEN 0.0660758203367818 ELSE "ADS"."Feature_43" END AS impter_45, CASE WHEN ("ADS"."Feature_44" IS NULL) THEN -0.07075895636353369 ELSE "ADS"."Feature_44" END AS impter_46, CASE WHEN ("ADS"."Feature_45" IS NULL) THEN 0.08422536561649958 ELSE "ADS"."Feature_45" END AS impter_47, CASE WHEN ("ADS"."Feature_46" IS NULL) THEN 0.21367580667795616 ELSE "ADS"."Feature_46" END AS impter_48, CASE WHEN ("ADS"."Feature_47" IS NULL) THEN -0.055897457335624984 ELSE "ADS"."Feature_47" END AS impter_49, CASE WHEN ("ADS"."Feature_48" IS NULL) THEN -0.17453036726139817 ELSE "ADS"."Feature_48" END AS impter_50, CASE WHEN ("ADS"."Feature_49" IS NULL) THEN -0.054944001818473996 ELSE "ADS"."Feature_49" END AS impter_51, CASE WHEN ("ADS"."Feature_50" IS NULL) THEN -0.5961651261710368 ELSE "ADS"."Feature_50" END AS impter_52, CASE WHEN ("ADS"."Feature_51" IS NULL) THEN 0.5020404526565605 ELSE "ADS"."Feature_51" END AS impter_53, CASE WHEN ("ADS"."Feature_52" IS NULL) THEN -0.052340545201383926 ELSE "ADS"."Feature_52" END AS impter_54, CASE WHEN ("ADS"."Feature_53" IS NULL) THEN 0.05294307611674654 ELSE "ADS"."Feature_53" END AS impter_55, CASE WHEN ("ADS"."Feature_54" IS NULL) THEN 0.03835884479069335 ELSE "ADS"."Feature_54" END AS impter_56, CASE WHEN ("ADS"."Feature_55" IS NULL) THEN -0.13571979014964694 ELSE "ADS"."Feature_55" END AS impter_57, CASE WHEN ("ADS"."Feature_56" IS NULL) THEN -0.21903068431411843 ELSE "ADS"."Feature_56" END AS impter_58, CASE WHEN ("ADS"."Feature_57" IS NULL) THEN -0.1191752362029383 ELSE "ADS"."Feature_57" END AS impter_59, CASE WHEN ("ADS"."Feature_58" IS NULL) THEN 0.38058346912807667 ELSE "ADS"."Feature_58" END AS impter_60, CASE WHEN ("ADS"."Feature_59" IS NULL) THEN -0.12720928974168508 ELSE "ADS"."Feature_59" END AS impter_61, CASE WHEN ("ADS"."Feature_60" IS NULL) THEN -0.09072936496613782 ELSE "ADS"."Feature_60" END AS impter_62, CASE WHEN ("ADS"."Feature_61" IS NULL) THEN -0.03915125937954538 ELSE "ADS"."Feature_61" END AS impter_63, CASE WHEN ("ADS"."Feature_62" IS NULL) THEN 0.07075412393313481 ELSE "ADS"."Feature_62" END AS impter_64, CASE WHEN ("ADS"."Feature_63" IS NULL) THEN 0.10124894587016948 ELSE "ADS"."Feature_63" END AS impter_65, CASE WHEN ("ADS"."Feature_64" IS NULL) THEN -0.1945661449475579 ELSE "ADS"."Feature_64" END AS impter_66, CASE WHEN ("ADS"."Feature_65" IS NULL) THEN -0.1759482981261233 ELSE "ADS"."Feature_65" END AS impter_67, CASE WHEN ("ADS"."Feature_66" IS NULL) THEN 0.07473228971855511 ELSE "ADS"."Feature_66" END AS impter_68, CASE WHEN ("ADS"."Feature_67" IS NULL) THEN 0.0377705562115906 ELSE "ADS"."Feature_67" END AS impter_69, CASE WHEN ("ADS"."Feature_68" IS NULL) THEN 0.0139470898598917 ELSE "ADS"."Feature_68" END AS impter_70, CASE WHEN ("ADS"."Feature_69" IS NULL) THEN 0.2582685725145942 ELSE "ADS"."Feature_69" END AS impter_71, CASE WHEN ("ADS"."Feature_70" IS NULL) THEN 0.022975786233048922 ELSE "ADS"."Feature_70" END AS impter_72, CASE WHEN ("ADS"."Feature_71" IS NULL) THEN 0.17445434061949525 ELSE "ADS"."Feature_71" END AS impter_73, CASE WHEN ("ADS"."Feature_72" IS NULL) THEN -0.011413879692078346 ELSE "ADS"."Feature_72" END AS impter_74, CASE WHEN ("ADS"."Feature_73" IS NULL) THEN 0.07898984156871978 ELSE "ADS"."Feature_73" END AS impter_75, CASE WHEN ("ADS"."Feature_74" IS NULL) THEN 0.0952547273770713 ELSE "ADS"."Feature_74" END AS impter_76, CASE WHEN ("ADS"."Feature_75" IS NULL) THEN -0.03997776839639901 ELSE "ADS"."Feature_75" END AS impter_77, CASE WHEN ("ADS"."Feature_76" IS NULL) THEN -0.020839895874293496 ELSE "ADS"."Feature_76" END AS impter_78, CASE WHEN ("ADS"."Feature_77" IS NULL) THEN -0.07284631986613152 ELSE "ADS"."Feature_77" END AS impter_79, CASE WHEN ("ADS"."Feature_78" IS NULL) THEN -0.27389951764434384 ELSE "ADS"."Feature_78" END AS impter_80, CASE WHEN ("ADS"."Feature_79" IS NULL) THEN 0.08057287885287609 ELSE "ADS"."Feature_79" END AS impter_81, CASE WHEN ("ADS"."Feature_80" IS NULL) THEN -0.06244274245437891 ELSE "ADS"."Feature_80" END AS impter_82, CASE WHEN ("ADS"."Feature_81" IS NULL) THEN -0.12290855334066887 ELSE "ADS"."Feature_81" END AS impter_83, CASE WHEN ("ADS"."Feature_82" IS NULL) THEN 0.11639531793890918 ELSE "ADS"."Feature_82" END AS impter_84, CASE WHEN ("ADS"."Feature_83" IS NULL) THEN -0.03350462786128603 ELSE "ADS"."Feature_83" END AS impter_85, CASE WHEN ("ADS"."Feature_84" IS NULL) THEN -0.03914049968144583 ELSE "ADS"."Feature_84" END AS impter_86, CASE WHEN ("ADS"."Feature_85" IS NULL) THEN 0.24193903072305167 ELSE "ADS"."Feature_85" END AS impter_87, CASE WHEN ("ADS"."Feature_86" IS NULL) THEN -0.07389719862221904 ELSE "ADS"."Feature_86" END AS impter_88, CASE WHEN ("ADS"."Feature_87" IS NULL) THEN 0.1400756228320113 ELSE "ADS"."Feature_87" END AS impter_89, CASE WHEN ("ADS"."Feature_88" IS NULL) THEN 0.2765301935136145 ELSE "ADS"."Feature_88" END AS impter_90, CASE WHEN ("ADS"."Feature_89" IS NULL) THEN -0.07957147169250885 ELSE "ADS"."Feature_89" END AS impter_91, CASE WHEN ("ADS"."Feature_90" IS NULL) THEN 0.16295767680642717 ELSE "ADS"."Feature_90" END AS impter_92, CASE WHEN ("ADS"."Feature_91" IS NULL) THEN 0.07062813888509549 ELSE "ADS"."Feature_91" END AS impter_93, CASE WHEN ("ADS"."Feature_92" IS NULL) THEN 0.012995630151896219 ELSE "ADS"."Feature_92" END AS impter_94, CASE WHEN ("ADS"."Feature_93" IS NULL) THEN 0.1055212408190415 ELSE "ADS"."Feature_93" END AS impter_95, CASE WHEN ("ADS"."Feature_94" IS NULL) THEN -0.1408434425354362 ELSE "ADS"."Feature_94" END AS impter_96, CASE WHEN ("ADS"."Feature_95" IS NULL) THEN -0.1574012366732725 ELSE "ADS"."Feature_95" END AS impter_97, CASE WHEN ("ADS"."Feature_96" IS NULL) THEN 0.05477536676313335 ELSE "ADS"."Feature_96" END AS impter_98, CASE WHEN ("ADS"."Feature_97" IS NULL) THEN 0.05673272205919614 ELSE "ADS"."Feature_97" END AS impter_99, CASE WHEN ("ADS"."Feature_98" IS NULL) THEN -0.14226649213619527 ELSE "ADS"."Feature_98" END AS impter_100, CASE WHEN ("ADS"."Feature_99" IS NULL) THEN -0.04042675289131955 ELSE "ADS"."Feature_99" END AS impter_101 
FROM "FourClass_100" AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180516113140_codegen_ikyb8i_ads_sca_2_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516113140_codegen_ikyb8i_ads_sca_2_out  (
	"KEY" BIGINT, 
	scaler_2 DOUBLE PRECISION, 
	scaler_3 DOUBLE PRECISION, 
	scaler_4 DOUBLE PRECISION, 
	scaler_5 DOUBLE PRECISION, 
	scaler_6 DOUBLE PRECISION, 
	scaler_7 DOUBLE PRECISION, 
	scaler_8 DOUBLE PRECISION, 
	scaler_9 DOUBLE PRECISION, 
	scaler_10 DOUBLE PRECISION, 
	scaler_11 DOUBLE PRECISION, 
	scaler_12 DOUBLE PRECISION, 
	scaler_13 DOUBLE PRECISION, 
	scaler_14 DOUBLE PRECISION, 
	scaler_15 DOUBLE PRECISION, 
	scaler_16 DOUBLE PRECISION, 
	scaler_17 DOUBLE PRECISION, 
	scaler_18 DOUBLE PRECISION, 
	scaler_19 DOUBLE PRECISION, 
	scaler_20 DOUBLE PRECISION, 
	scaler_21 DOUBLE PRECISION, 
	scaler_22 DOUBLE PRECISION, 
	scaler_23 DOUBLE PRECISION, 
	scaler_24 DOUBLE PRECISION, 
	scaler_25 DOUBLE PRECISION, 
	scaler_26 DOUBLE PRECISION, 
	scaler_27 DOUBLE PRECISION, 
	scaler_28 DOUBLE PRECISION, 
	scaler_29 DOUBLE PRECISION, 
	scaler_30 DOUBLE PRECISION, 
	scaler_31 DOUBLE PRECISION, 
	scaler_32 DOUBLE PRECISION, 
	scaler_33 DOUBLE PRECISION, 
	scaler_34 DOUBLE PRECISION, 
	scaler_35 DOUBLE PRECISION, 
	scaler_36 DOUBLE PRECISION, 
	scaler_37 DOUBLE PRECISION, 
	scaler_38 DOUBLE PRECISION, 
	scaler_39 DOUBLE PRECISION, 
	scaler_40 DOUBLE PRECISION, 
	scaler_41 DOUBLE PRECISION, 
	scaler_42 DOUBLE PRECISION, 
	scaler_43 DOUBLE PRECISION, 
	scaler_44 DOUBLE PRECISION, 
	scaler_45 DOUBLE PRECISION, 
	scaler_46 DOUBLE PRECISION, 
	scaler_47 DOUBLE PRECISION, 
	scaler_48 DOUBLE PRECISION, 
	scaler_49 DOUBLE PRECISION, 
	scaler_50 DOUBLE PRECISION, 
	scaler_51 DOUBLE PRECISION, 
	scaler_52 DOUBLE PRECISION, 
	scaler_53 DOUBLE PRECISION, 
	scaler_54 DOUBLE PRECISION, 
	scaler_55 DOUBLE PRECISION, 
	scaler_56 DOUBLE PRECISION, 
	scaler_57 DOUBLE PRECISION, 
	scaler_58 DOUBLE PRECISION, 
	scaler_59 DOUBLE PRECISION, 
	scaler_60 DOUBLE PRECISION, 
	scaler_61 DOUBLE PRECISION, 
	scaler_62 DOUBLE PRECISION, 
	scaler_63 DOUBLE PRECISION, 
	scaler_64 DOUBLE PRECISION, 
	scaler_65 DOUBLE PRECISION, 
	scaler_66 DOUBLE PRECISION, 
	scaler_67 DOUBLE PRECISION, 
	scaler_68 DOUBLE PRECISION, 
	scaler_69 DOUBLE PRECISION, 
	scaler_70 DOUBLE PRECISION, 
	scaler_71 DOUBLE PRECISION, 
	scaler_72 DOUBLE PRECISION, 
	scaler_73 DOUBLE PRECISION, 
	scaler_74 DOUBLE PRECISION, 
	scaler_75 DOUBLE PRECISION, 
	scaler_76 DOUBLE PRECISION, 
	scaler_77 DOUBLE PRECISION, 
	scaler_78 DOUBLE PRECISION, 
	scaler_79 DOUBLE PRECISION, 
	scaler_80 DOUBLE PRECISION, 
	scaler_81 DOUBLE PRECISION, 
	scaler_82 DOUBLE PRECISION, 
	scaler_83 DOUBLE PRECISION, 
	scaler_84 DOUBLE PRECISION, 
	scaler_85 DOUBLE PRECISION, 
	scaler_86 DOUBLE PRECISION, 
	scaler_87 DOUBLE PRECISION, 
	scaler_88 DOUBLE PRECISION, 
	scaler_89 DOUBLE PRECISION, 
	scaler_90 DOUBLE PRECISION, 
	scaler_91 DOUBLE PRECISION, 
	scaler_92 DOUBLE PRECISION, 
	scaler_93 DOUBLE PRECISION, 
	scaler_94 DOUBLE PRECISION, 
	scaler_95 DOUBLE PRECISION, 
	scaler_96 DOUBLE PRECISION, 
	scaler_97 DOUBLE PRECISION, 
	scaler_98 DOUBLE PRECISION, 
	scaler_99 DOUBLE PRECISION, 
	scaler_100 DOUBLE PRECISION, 
	scaler_101 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516113140_codegen_ikyb8i_ads_sca_2_out part 2. Populate

INSERT INTO tmp_20180516113140_codegen_ikyb8i_ads_sca_2_out ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65, scaler_66, scaler_67, scaler_68, scaler_69, scaler_70, scaler_71, scaler_72, scaler_73, scaler_74, scaler_75, scaler_76, scaler_77, scaler_78, scaler_79, scaler_80, scaler_81, scaler_82, scaler_83, scaler_84, scaler_85, scaler_86, scaler_87, scaler_88, scaler_89, scaler_90, scaler_91, scaler_92, scaler_93, scaler_94, scaler_95, scaler_96, scaler_97, scaler_98, scaler_99, scaler_100, scaler_101) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11, "U".scaler_12, "U".scaler_13, "U".scaler_14, "U".scaler_15, "U".scaler_16, "U".scaler_17, "U".scaler_18, "U".scaler_19, "U".scaler_20, "U".scaler_21, "U".scaler_22, "U".scaler_23, "U".scaler_24, "U".scaler_25, "U".scaler_26, "U".scaler_27, "U".scaler_28, "U".scaler_29, "U".scaler_30, "U".scaler_31, "U".scaler_32, "U".scaler_33, "U".scaler_34, "U".scaler_35, "U".scaler_36, "U".scaler_37, "U".scaler_38, "U".scaler_39, "U".scaler_40, "U".scaler_41, "U".scaler_42, "U".scaler_43, "U".scaler_44, "U".scaler_45, "U".scaler_46, "U".scaler_47, "U".scaler_48, "U".scaler_49, "U".scaler_50, "U".scaler_51, "U".scaler_52, "U".scaler_53, "U".scaler_54, "U".scaler_55, "U".scaler_56, "U".scaler_57, "U".scaler_58, "U".scaler_59, "U".scaler_60, "U".scaler_61, "U".scaler_62, "U".scaler_63, "U".scaler_64, "U".scaler_65, "U".scaler_66, "U".scaler_67, "U".scaler_68, "U".scaler_69, "U".scaler_70, "U".scaler_71, "U".scaler_72, "U".scaler_73, "U".scaler_74, "U".scaler_75, "U".scaler_76, "U".scaler_77, "U".scaler_78, "U".scaler_79, "U".scaler_80, "U".scaler_81, "U".scaler_82, "U".scaler_83, "U".scaler_84, "U".scaler_85, "U".scaler_86, "U".scaler_87, "U".scaler_88, "U".scaler_89, "U".scaler_90, "U".scaler_91, "U".scaler_92, "U".scaler_93, "U".scaler_94, "U".scaler_95, "U".scaler_96, "U".scaler_97, "U".scaler_98, "U".scaler_99, "U".scaler_100, "U".scaler_101 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11, "ADS_sca_2_OUT".scaler_12, "ADS_sca_2_OUT".scaler_13, "ADS_sca_2_OUT".scaler_14, "ADS_sca_2_OUT".scaler_15, "ADS_sca_2_OUT".scaler_16, "ADS_sca_2_OUT".scaler_17, "ADS_sca_2_OUT".scaler_18, "ADS_sca_2_OUT".scaler_19, "ADS_sca_2_OUT".scaler_20, "ADS_sca_2_OUT".scaler_21, "ADS_sca_2_OUT".scaler_22, "ADS_sca_2_OUT".scaler_23, "ADS_sca_2_OUT".scaler_24, "ADS_sca_2_OUT".scaler_25, "ADS_sca_2_OUT".scaler_26, "ADS_sca_2_OUT".scaler_27, "ADS_sca_2_OUT".scaler_28, "ADS_sca_2_OUT".scaler_29, "ADS_sca_2_OUT".scaler_30, "ADS_sca_2_OUT".scaler_31, "ADS_sca_2_OUT".scaler_32, "ADS_sca_2_OUT".scaler_33, "ADS_sca_2_OUT".scaler_34, "ADS_sca_2_OUT".scaler_35, "ADS_sca_2_OUT".scaler_36, "ADS_sca_2_OUT".scaler_37, "ADS_sca_2_OUT".scaler_38, "ADS_sca_2_OUT".scaler_39, "ADS_sca_2_OUT".scaler_40, "ADS_sca_2_OUT".scaler_41, "ADS_sca_2_OUT".scaler_42, "ADS_sca_2_OUT".scaler_43, "ADS_sca_2_OUT".scaler_44, "ADS_sca_2_OUT".scaler_45, "ADS_sca_2_OUT".scaler_46, "ADS_sca_2_OUT".scaler_47, "ADS_sca_2_OUT".scaler_48, "ADS_sca_2_OUT".scaler_49, "ADS_sca_2_OUT".scaler_50, "ADS_sca_2_OUT".scaler_51, "ADS_sca_2_OUT".scaler_52, "ADS_sca_2_OUT".scaler_53, "ADS_sca_2_OUT".scaler_54, "ADS_sca_2_OUT".scaler_55, "ADS_sca_2_OUT".scaler_56, "ADS_sca_2_OUT".scaler_57, "ADS_sca_2_OUT".scaler_58, "ADS_sca_2_OUT".scaler_59, "ADS_sca_2_OUT".scaler_60, "ADS_sca_2_OUT".scaler_61, "ADS_sca_2_OUT".scaler_62, "ADS_sca_2_OUT".scaler_63, "ADS_sca_2_OUT".scaler_64, "ADS_sca_2_OUT".scaler_65, "ADS_sca_2_OUT".scaler_66, "ADS_sca_2_OUT".scaler_67, "ADS_sca_2_OUT".scaler_68, "ADS_sca_2_OUT".scaler_69, "ADS_sca_2_OUT".scaler_70, "ADS_sca_2_OUT".scaler_71, "ADS_sca_2_OUT".scaler_72, "ADS_sca_2_OUT".scaler_73, "ADS_sca_2_OUT".scaler_74, "ADS_sca_2_OUT".scaler_75, "ADS_sca_2_OUT".scaler_76, "ADS_sca_2_OUT".scaler_77, "ADS_sca_2_OUT".scaler_78, "ADS_sca_2_OUT".scaler_79, "ADS_sca_2_OUT".scaler_80, "ADS_sca_2_OUT".scaler_81, "ADS_sca_2_OUT".scaler_82, "ADS_sca_2_OUT".scaler_83, "ADS_sca_2_OUT".scaler_84, "ADS_sca_2_OUT".scaler_85, "ADS_sca_2_OUT".scaler_86, "ADS_sca_2_OUT".scaler_87, "ADS_sca_2_OUT".scaler_88, "ADS_sca_2_OUT".scaler_89, "ADS_sca_2_OUT".scaler_90, "ADS_sca_2_OUT".scaler_91, "ADS_sca_2_OUT".scaler_92, "ADS_sca_2_OUT".scaler_93, "ADS_sca_2_OUT".scaler_94, "ADS_sca_2_OUT".scaler_95, "ADS_sca_2_OUT".scaler_96, "ADS_sca_2_OUT".scaler_97, "ADS_sca_2_OUT".scaler_98, "ADS_sca_2_OUT".scaler_99, "ADS_sca_2_OUT".scaler_100, "ADS_sca_2_OUT".scaler_101 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS DOUBLE PRECISION) - CAST(-0.001480700768972 AS DOUBLE PRECISION)) / CAST(0.921122979031251 AS DOUBLE PRECISION) AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS DOUBLE PRECISION) - CAST(0.085992149906814 AS DOUBLE PRECISION)) / CAST(0.962751680923707 AS DOUBLE PRECISION) AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS DOUBLE PRECISION) - CAST(-0.006358164676411 AS DOUBLE PRECISION)) / CAST(0.789068783510289 AS DOUBLE PRECISION) AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS DOUBLE PRECISION) - CAST(-0.024301807422776 AS DOUBLE PRECISION)) / CAST(1.026527218908317 AS DOUBLE PRECISION) AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS DOUBLE PRECISION) - CAST(0.015786548044298 AS DOUBLE PRECISION)) / CAST(1.019809090802647 AS DOUBLE PRECISION) AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS DOUBLE PRECISION) - CAST(-0.139593294456517 AS DOUBLE PRECISION)) / CAST(0.918555176329368 AS DOUBLE PRECISION) AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS DOUBLE PRECISION) - CAST(-0.064767450480199 AS DOUBLE PRECISION)) / CAST(1.039354724961747 AS DOUBLE PRECISION) AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS DOUBLE PRECISION) - CAST(0.025579810774091 AS DOUBLE PRECISION)) / CAST(0.872213129464492 AS DOUBLE PRECISION) AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS DOUBLE PRECISION) - CAST(-0.031739372609771 AS DOUBLE PRECISION)) / CAST(1.016458829909102 AS DOUBLE PRECISION) AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS DOUBLE PRECISION) - CAST(-0.151814142086249 AS DOUBLE PRECISION)) / CAST(1.00754021142975 AS DOUBLE PRECISION) AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS DOUBLE PRECISION) - CAST(-0.132445765584925 AS DOUBLE PRECISION)) / CAST(0.921532545981637 AS DOUBLE PRECISION) AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS DOUBLE PRECISION) - CAST(0.044172679762224 AS DOUBLE PRECISION)) / CAST(0.905327996406631 AS DOUBLE PRECISION) AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS DOUBLE PRECISION) - CAST(0.01016594671981 AS DOUBLE PRECISION)) / CAST(1.219037104606336 AS DOUBLE PRECISION) AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS DOUBLE PRECISION) - CAST(-0.036458720191033 AS DOUBLE PRECISION)) / CAST(1.087900578658422 AS DOUBLE PRECISION) AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS DOUBLE PRECISION) - CAST(0.064915128115939 AS DOUBLE PRECISION)) / CAST(1.027467020140718 AS DOUBLE PRECISION) AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS DOUBLE PRECISION) - CAST(-0.11930146867074 AS DOUBLE PRECISION)) / CAST(0.95063123497614 AS DOUBLE PRECISION) AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS DOUBLE PRECISION) - CAST(0.007738863934853 AS DOUBLE PRECISION)) / CAST(1.092847758520398 AS DOUBLE PRECISION) AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS DOUBLE PRECISION) - CAST(-0.122677406014773 AS DOUBLE PRECISION)) / CAST(0.98305617159652 AS DOUBLE PRECISION) AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS DOUBLE PRECISION) - CAST(0.019160881669086 AS DOUBLE PRECISION)) / CAST(1.211741792083637 AS DOUBLE PRECISION) AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS DOUBLE PRECISION) - CAST(-0.263403511211311 AS DOUBLE PRECISION)) / CAST(0.980741926225598 AS DOUBLE PRECISION) AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS DOUBLE PRECISION) - CAST(0.035692361937735 AS DOUBLE PRECISION)) / CAST(1.115824498468156 AS DOUBLE PRECISION) AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS DOUBLE PRECISION) - CAST(-0.010021324964069 AS DOUBLE PRECISION)) / CAST(1.079095980341332 AS DOUBLE PRECISION) AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS DOUBLE PRECISION) - CAST(-0.125861438772354 AS DOUBLE PRECISION)) / CAST(1.027967261154737 AS DOUBLE PRECISION) AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS DOUBLE PRECISION) - CAST(0.093727738982311 AS DOUBLE PRECISION)) / CAST(0.969076029930399 AS DOUBLE PRECISION) AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS DOUBLE PRECISION) - CAST(-0.168792959788023 AS DOUBLE PRECISION)) / CAST(0.884585858199681 AS DOUBLE PRECISION) AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS DOUBLE PRECISION) - CAST(0.100062831996294 AS DOUBLE PRECISION)) / CAST(0.914934610400089 AS DOUBLE PRECISION) AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS DOUBLE PRECISION) - CAST(-0.102978580868227 AS DOUBLE PRECISION)) / CAST(1.076139750055733 AS DOUBLE PRECISION) AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS DOUBLE PRECISION) - CAST(0.192405145358704 AS DOUBLE PRECISION)) / CAST(2.089882492597775 AS DOUBLE PRECISION) AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS DOUBLE PRECISION) - CAST(-0.052866434246092 AS DOUBLE PRECISION)) / CAST(1.003077752989689 AS DOUBLE PRECISION) AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS DOUBLE PRECISION) - CAST(0.262461214636615 AS DOUBLE PRECISION)) / CAST(1.977849103847362 AS DOUBLE PRECISION) AS scaler_31, (CAST("ADS_imp_1_OUT".impter_32 AS DOUBLE PRECISION) - CAST(0.002677575140361 AS DOUBLE PRECISION)) / CAST(0.883392491521156 AS DOUBLE PRECISION) AS scaler_32, (CAST("ADS_imp_1_OUT".impter_33 AS DOUBLE PRECISION) - CAST(0.097070419412841 AS DOUBLE PRECISION)) / CAST(0.872000535171356 AS DOUBLE PRECISION) AS scaler_33, (CAST("ADS_imp_1_OUT".impter_34 AS DOUBLE PRECISION) - CAST(-0.032793219857333 AS DOUBLE PRECISION)) / CAST(0.874598909044319 AS DOUBLE PRECISION) AS scaler_34, (CAST("ADS_imp_1_OUT".impter_35 AS DOUBLE PRECISION) - CAST(-0.003130273745909 AS DOUBLE PRECISION)) / CAST(0.996769909753556 AS DOUBLE PRECISION) AS scaler_35, (CAST("ADS_imp_1_OUT".impter_36 AS DOUBLE PRECISION) - CAST(0.05344627621628 AS DOUBLE PRECISION)) / CAST(0.999728911219943 AS DOUBLE PRECISION) AS scaler_36, (CAST("ADS_imp_1_OUT".impter_37 AS DOUBLE PRECISION) - CAST(-0.186681464374124 AS DOUBLE PRECISION)) / CAST(1.027228717131086 AS DOUBLE PRECISION) AS scaler_37, (CAST("ADS_imp_1_OUT".impter_38 AS DOUBLE PRECISION) - CAST(-0.029335964960866 AS DOUBLE PRECISION)) / CAST(1.042755596045166 AS DOUBLE PRECISION) AS scaler_38, (CAST("ADS_imp_1_OUT".impter_39 AS DOUBLE PRECISION) - CAST(0.072197721995024 AS DOUBLE PRECISION)) / CAST(0.832822989045674 AS DOUBLE PRECISION) AS scaler_39, (CAST("ADS_imp_1_OUT".impter_40 AS DOUBLE PRECISION) - CAST(-0.000776283978149 AS DOUBLE PRECISION)) / CAST(0.966652435645779 AS DOUBLE PRECISION) AS scaler_40, (CAST("ADS_imp_1_OUT".impter_41 AS DOUBLE PRECISION) - CAST(0.082708237120983 AS DOUBLE PRECISION)) / CAST(1.083670494683493 AS DOUBLE PRECISION) AS scaler_41, (CAST("ADS_imp_1_OUT".impter_42 AS DOUBLE PRECISION) - CAST(0.10432022852348 AS DOUBLE PRECISION)) / CAST(1.075472547982714 AS DOUBLE PRECISION) AS scaler_42, (CAST("ADS_imp_1_OUT".impter_43 AS DOUBLE PRECISION) - CAST(0.070585663850223 AS DOUBLE PRECISION)) / CAST(0.999346279146371 AS DOUBLE PRECISION) AS scaler_43, (CAST("ADS_imp_1_OUT".impter_44 AS DOUBLE PRECISION) - CAST(0.050966930983574 AS DOUBLE PRECISION)) / CAST(0.887697125279404 AS DOUBLE PRECISION) AS scaler_44, (CAST("ADS_imp_1_OUT".impter_45 AS DOUBLE PRECISION) - CAST(0.066075820336782 AS DOUBLE PRECISION)) / CAST(1.041246125313479 AS DOUBLE PRECISION) AS scaler_45, (CAST("ADS_imp_1_OUT".impter_46 AS DOUBLE PRECISION) - CAST(-0.070758956363534 AS DOUBLE PRECISION)) / CAST(2.238310207242139 AS DOUBLE PRECISION) AS scaler_46, (CAST("ADS_imp_1_OUT".impter_47 AS DOUBLE PRECISION) - CAST(0.0842253656165 AS DOUBLE PRECISION)) / CAST(0.952095968667643 AS DOUBLE PRECISION) AS scaler_47, (CAST("ADS_imp_1_OUT".impter_48 AS DOUBLE PRECISION) - CAST(0.213675806677956 AS DOUBLE PRECISION)) / CAST(0.990723031611177 AS DOUBLE PRECISION) AS scaler_48, (CAST("ADS_imp_1_OUT".impter_49 AS DOUBLE PRECISION) - CAST(-0.055897457335625 AS DOUBLE PRECISION)) / CAST(1.039240071432049 AS DOUBLE PRECISION) AS scaler_49, (CAST("ADS_imp_1_OUT".impter_50 AS DOUBLE PRECISION) - CAST(-0.174530367261398 AS DOUBLE PRECISION)) / CAST(2.001507098381001 AS DOUBLE PRECISION) AS scaler_50, (CAST("ADS_imp_1_OUT".impter_51 AS DOUBLE PRECISION) - CAST(-0.054944001818474 AS DOUBLE PRECISION)) / CAST(1.004164554009125 AS DOUBLE PRECISION) AS scaler_51, (CAST("ADS_imp_1_OUT".impter_52 AS DOUBLE PRECISION) - CAST(-0.596165126171037 AS DOUBLE PRECISION)) / CAST(2.467511153399545 AS DOUBLE PRECISION) AS scaler_52, (CAST("ADS_imp_1_OUT".impter_53 AS DOUBLE PRECISION) - CAST(0.50204045265656 AS DOUBLE PRECISION)) / CAST(2.192932511828779 AS DOUBLE PRECISION) AS scaler_53, (CAST("ADS_imp_1_OUT".impter_54 AS DOUBLE PRECISION) - CAST(-0.052340545201384 AS DOUBLE PRECISION)) / CAST(0.98465558791252 AS DOUBLE PRECISION) AS scaler_54, (CAST("ADS_imp_1_OUT".impter_55 AS DOUBLE PRECISION) - CAST(0.052943076116747 AS DOUBLE PRECISION)) / CAST(1.813704256733718 AS DOUBLE PRECISION) AS scaler_55, (CAST("ADS_imp_1_OUT".impter_56 AS DOUBLE PRECISION) - CAST(0.038358844790693 AS DOUBLE PRECISION)) / CAST(0.924132635441134 AS DOUBLE PRECISION) AS scaler_56, (CAST("ADS_imp_1_OUT".impter_57 AS DOUBLE PRECISION) - CAST(-0.135719790149647 AS DOUBLE PRECISION)) / CAST(0.86790957559487 AS DOUBLE PRECISION) AS scaler_57, (CAST("ADS_imp_1_OUT".impter_58 AS DOUBLE PRECISION) - CAST(-0.219030684314118 AS DOUBLE PRECISION)) / CAST(4.150428869748412 AS DOUBLE PRECISION) AS scaler_58, (CAST("ADS_imp_1_OUT".impter_59 AS DOUBLE PRECISION) - CAST(-0.119175236202938 AS DOUBLE PRECISION)) / CAST(0.912333340812844 AS DOUBLE PRECISION) AS scaler_59, (CAST("ADS_imp_1_OUT".impter_60 AS DOUBLE PRECISION) - CAST(0.380583469128077 AS DOUBLE PRECISION)) / CAST(3.563501108698692 AS DOUBLE PRECISION) AS scaler_60, (CAST("ADS_imp_1_OUT".impter_61 AS DOUBLE PRECISION) - CAST(-0.127209289741685 AS DOUBLE PRECISION)) / CAST(0.930102447599163 AS DOUBLE PRECISION) AS scaler_61, (CAST("ADS_imp_1_OUT".impter_62 AS DOUBLE PRECISION) - CAST(-0.090729364966138 AS DOUBLE PRECISION)) / CAST(0.949050127730602 AS DOUBLE PRECISION) AS scaler_62, (CAST("ADS_imp_1_OUT".impter_63 AS DOUBLE PRECISION) - CAST(-0.039151259379545 AS DOUBLE PRECISION)) / CAST(0.902950460847361 AS DOUBLE PRECISION) AS scaler_63, (CAST("ADS_imp_1_OUT".impter_64 AS DOUBLE PRECISION) - CAST(0.070754123933135 AS DOUBLE PRECISION)) / CAST(0.97265616825281 AS DOUBLE PRECISION) AS scaler_64, (CAST("ADS_imp_1_OUT".impter_65 AS DOUBLE PRECISION) - CAST(0.101248945870169 AS DOUBLE PRECISION)) / CAST(0.940307592024949 AS DOUBLE PRECISION) AS scaler_65, (CAST("ADS_imp_1_OUT".impter_66 AS DOUBLE PRECISION) - CAST(-0.194566144947558 AS DOUBLE PRECISION)) / CAST(0.940090362573265 AS DOUBLE PRECISION) AS scaler_66, (CAST("ADS_imp_1_OUT".impter_67 AS DOUBLE PRECISION) - CAST(-0.175948298126123 AS DOUBLE PRECISION)) / CAST(0.943542204994379 AS DOUBLE PRECISION) AS scaler_67, (CAST("ADS_imp_1_OUT".impter_68 AS DOUBLE PRECISION) - CAST(0.074732289718555 AS DOUBLE PRECISION)) / CAST(0.887100396431977 AS DOUBLE PRECISION) AS scaler_68, (CAST("ADS_imp_1_OUT".impter_69 AS DOUBLE PRECISION) - CAST(0.037770556211591 AS DOUBLE PRECISION)) / CAST(1.022897854919659 AS DOUBLE PRECISION) AS scaler_69, (CAST("ADS_imp_1_OUT".impter_70 AS DOUBLE PRECISION) - CAST(0.013947089859892 AS DOUBLE PRECISION)) / CAST(0.946572832907949 AS DOUBLE PRECISION) AS scaler_70, (CAST("ADS_imp_1_OUT".impter_71 AS DOUBLE PRECISION) - CAST(0.258268572514594 AS DOUBLE PRECISION)) / CAST(1.102723201652148 AS DOUBLE PRECISION) AS scaler_71, (CAST("ADS_imp_1_OUT".impter_72 AS DOUBLE PRECISION) - CAST(0.022975786233049 AS DOUBLE PRECISION)) / CAST(0.920043690480938 AS DOUBLE PRECISION) AS scaler_72, (CAST("ADS_imp_1_OUT".impter_73 AS DOUBLE PRECISION) - CAST(0.174454340619495 AS DOUBLE PRECISION)) / CAST(0.900996474248213 AS DOUBLE PRECISION) AS scaler_73, (CAST("ADS_imp_1_OUT".impter_74 AS DOUBLE PRECISION) - CAST(-0.011413879692078 AS DOUBLE PRECISION)) / CAST(0.948337702556598 AS DOUBLE PRECISION) AS scaler_74, (CAST("ADS_imp_1_OUT".impter_75 AS DOUBLE PRECISION) - CAST(0.07898984156872 AS DOUBLE PRECISION)) / CAST(0.972666813886109 AS DOUBLE PRECISION) AS scaler_75, (CAST("ADS_imp_1_OUT".impter_76 AS DOUBLE PRECISION) - CAST(0.095254727377071 AS DOUBLE PRECISION)) / CAST(0.960786724587339 AS DOUBLE PRECISION) AS scaler_76, (CAST("ADS_imp_1_OUT".impter_77 AS DOUBLE PRECISION) - CAST(-0.039977768396399 AS DOUBLE PRECISION)) / CAST(1.031882868608097 AS DOUBLE PRECISION) AS scaler_77, (CAST("ADS_imp_1_OUT".impter_78 AS DOUBLE PRECISION) - CAST(-0.020839895874293 AS DOUBLE PRECISION)) / CAST(0.945141993694461 AS DOUBLE PRECISION) AS scaler_78, (CAST("ADS_imp_1_OUT".impter_79 AS DOUBLE PRECISION) - CAST(-0.072846319866132 AS DOUBLE PRECISION)) / CAST(0.910341678434891 AS DOUBLE PRECISION) AS scaler_79, (CAST("ADS_imp_1_OUT".impter_80 AS DOUBLE PRECISION) - CAST(-0.273899517644344 AS DOUBLE PRECISION)) / CAST(2.036260386299674 AS DOUBLE PRECISION) AS scaler_80, (CAST("ADS_imp_1_OUT".impter_81 AS DOUBLE PRECISION) - CAST(0.080572878852876 AS DOUBLE PRECISION)) / CAST(0.991929294422402 AS DOUBLE PRECISION) AS scaler_81, (CAST("ADS_imp_1_OUT".impter_82 AS DOUBLE PRECISION) - CAST(-0.062442742454379 AS DOUBLE PRECISION)) / CAST(0.811303929382455 AS DOUBLE PRECISION) AS scaler_82, (CAST("ADS_imp_1_OUT".impter_83 AS DOUBLE PRECISION) - CAST(-0.122908553340669 AS DOUBLE PRECISION)) / CAST(1.030730265471111 AS DOUBLE PRECISION) AS scaler_83, (CAST("ADS_imp_1_OUT".impter_84 AS DOUBLE PRECISION) - CAST(0.116395317938909 AS DOUBLE PRECISION)) / CAST(0.999359195113524 AS DOUBLE PRECISION) AS scaler_84, (CAST("ADS_imp_1_OUT".impter_85 AS DOUBLE PRECISION) - CAST(-0.033504627861286 AS DOUBLE PRECISION)) / CAST(1.019759864859449 AS DOUBLE PRECISION) AS scaler_85, (CAST("ADS_imp_1_OUT".impter_86 AS DOUBLE PRECISION) - CAST(-0.039140499681446 AS DOUBLE PRECISION)) / CAST(0.902205162205808 AS DOUBLE PRECISION) AS scaler_86, (CAST("ADS_imp_1_OUT".impter_87 AS DOUBLE PRECISION) - CAST(0.241939030723052 AS DOUBLE PRECISION)) / CAST(0.962574267839248 AS DOUBLE PRECISION) AS scaler_87, (CAST("ADS_imp_1_OUT".impter_88 AS DOUBLE PRECISION) - CAST(-0.073897198622219 AS DOUBLE PRECISION)) / CAST(1.00800709854307 AS DOUBLE PRECISION) AS scaler_88, (CAST("ADS_imp_1_OUT".impter_89 AS DOUBLE PRECISION) - CAST(0.140075622832011 AS DOUBLE PRECISION)) / CAST(0.931579127484883 AS DOUBLE PRECISION) AS scaler_89, (CAST("ADS_imp_1_OUT".impter_90 AS DOUBLE PRECISION) - CAST(0.276530193513615 AS DOUBLE PRECISION)) / CAST(1.945598232317866 AS DOUBLE PRECISION) AS scaler_90, (CAST("ADS_imp_1_OUT".impter_91 AS DOUBLE PRECISION) - CAST(-0.079571471692509 AS DOUBLE PRECISION)) / CAST(0.968884807788467 AS DOUBLE PRECISION) AS scaler_91, (CAST("ADS_imp_1_OUT".impter_92 AS DOUBLE PRECISION) - CAST(0.162957676806427 AS DOUBLE PRECISION)) / CAST(0.895274190411019 AS DOUBLE PRECISION) AS scaler_92, (CAST("ADS_imp_1_OUT".impter_93 AS DOUBLE PRECISION) - CAST(0.070628138885095 AS DOUBLE PRECISION)) / CAST(0.83317483227306 AS DOUBLE PRECISION) AS scaler_93, (CAST("ADS_imp_1_OUT".impter_94 AS DOUBLE PRECISION) - CAST(0.012995630151896 AS DOUBLE PRECISION)) / CAST(1.059167248118017 AS DOUBLE PRECISION) AS scaler_94, (CAST("ADS_imp_1_OUT".impter_95 AS DOUBLE PRECISION) - CAST(0.105521240819042 AS DOUBLE PRECISION)) / CAST(1.05259889780009 AS DOUBLE PRECISION) AS scaler_95, (CAST("ADS_imp_1_OUT".impter_96 AS DOUBLE PRECISION) - CAST(-0.140843442535436 AS DOUBLE PRECISION)) / CAST(0.917237203399668 AS DOUBLE PRECISION) AS scaler_96, (CAST("ADS_imp_1_OUT".impter_97 AS DOUBLE PRECISION) - CAST(-0.157401236673272 AS DOUBLE PRECISION)) / CAST(0.993012543364307 AS DOUBLE PRECISION) AS scaler_97, (CAST("ADS_imp_1_OUT".impter_98 AS DOUBLE PRECISION) - CAST(0.054775366763133 AS DOUBLE PRECISION)) / CAST(0.980313635365364 AS DOUBLE PRECISION) AS scaler_98, (CAST("ADS_imp_1_OUT".impter_99 AS DOUBLE PRECISION) - CAST(0.056732722059196 AS DOUBLE PRECISION)) / CAST(0.92963380321885 AS DOUBLE PRECISION) AS scaler_99, (CAST("ADS_imp_1_OUT".impter_100 AS DOUBLE PRECISION) - CAST(-0.142266492136195 AS DOUBLE PRECISION)) / CAST(1.174442941822933 AS DOUBLE PRECISION) AS scaler_100, (CAST("ADS_imp_1_OUT".impter_101 AS DOUBLE PRECISION) - CAST(-0.04042675289132 AS DOUBLE PRECISION)) / CAST(1.983747550989713 AS DOUBLE PRECISION) AS scaler_101 
FROM tmp_20180516113140_codegen_99473s_ads_imp_1_out AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Code For temporary table tmp_20180516113140_codegen_watyww_hl_1_relu_1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516113140_codegen_watyww_hl_1_relu_1  (
	"KEY" BIGINT, 
	"NEUR_1_1" DOUBLE PRECISION, 
	"NEUR_1_2" DOUBLE PRECISION, 
	"NEUR_1_3" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516113140_codegen_watyww_hl_1_relu_1 part 2. Populate

INSERT INTO tmp_20180516113140_codegen_watyww_hl_1_relu_1 ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "U"."KEY", "U"."NEUR_1_1", "U"."NEUR_1_2", "U"."NEUR_1_3" 
FROM (WITH "IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) AS scaler_11, CAST("ADS_sca_2_OUT".scaler_12 AS DOUBLE PRECISION) AS scaler_12, CAST("ADS_sca_2_OUT".scaler_13 AS DOUBLE PRECISION) AS scaler_13, CAST("ADS_sca_2_OUT".scaler_14 AS DOUBLE PRECISION) AS scaler_14, CAST("ADS_sca_2_OUT".scaler_15 AS DOUBLE PRECISION) AS scaler_15, CAST("ADS_sca_2_OUT".scaler_16 AS DOUBLE PRECISION) AS scaler_16, CAST("ADS_sca_2_OUT".scaler_17 AS DOUBLE PRECISION) AS scaler_17, CAST("ADS_sca_2_OUT".scaler_18 AS DOUBLE PRECISION) AS scaler_18, CAST("ADS_sca_2_OUT".scaler_19 AS DOUBLE PRECISION) AS scaler_19, CAST("ADS_sca_2_OUT".scaler_20 AS DOUBLE PRECISION) AS scaler_20, CAST("ADS_sca_2_OUT".scaler_21 AS DOUBLE PRECISION) AS scaler_21, CAST("ADS_sca_2_OUT".scaler_22 AS DOUBLE PRECISION) AS scaler_22, CAST("ADS_sca_2_OUT".scaler_23 AS DOUBLE PRECISION) AS scaler_23, CAST("ADS_sca_2_OUT".scaler_24 AS DOUBLE PRECISION) AS scaler_24, CAST("ADS_sca_2_OUT".scaler_25 AS DOUBLE PRECISION) AS scaler_25, CAST("ADS_sca_2_OUT".scaler_26 AS DOUBLE PRECISION) AS scaler_26, CAST("ADS_sca_2_OUT".scaler_27 AS DOUBLE PRECISION) AS scaler_27, CAST("ADS_sca_2_OUT".scaler_28 AS DOUBLE PRECISION) AS scaler_28, CAST("ADS_sca_2_OUT".scaler_29 AS DOUBLE PRECISION) AS scaler_29, CAST("ADS_sca_2_OUT".scaler_30 AS DOUBLE PRECISION) AS scaler_30, CAST("ADS_sca_2_OUT".scaler_31 AS DOUBLE PRECISION) AS scaler_31, CAST("ADS_sca_2_OUT".scaler_32 AS DOUBLE PRECISION) AS scaler_32, CAST("ADS_sca_2_OUT".scaler_33 AS DOUBLE PRECISION) AS scaler_33, CAST("ADS_sca_2_OUT".scaler_34 AS DOUBLE PRECISION) AS scaler_34, CAST("ADS_sca_2_OUT".scaler_35 AS DOUBLE PRECISION) AS scaler_35, CAST("ADS_sca_2_OUT".scaler_36 AS DOUBLE PRECISION) AS scaler_36, CAST("ADS_sca_2_OUT".scaler_37 AS DOUBLE PRECISION) AS scaler_37, CAST("ADS_sca_2_OUT".scaler_38 AS DOUBLE PRECISION) AS scaler_38, CAST("ADS_sca_2_OUT".scaler_39 AS DOUBLE PRECISION) AS scaler_39, CAST("ADS_sca_2_OUT".scaler_40 AS DOUBLE PRECISION) AS scaler_40, CAST("ADS_sca_2_OUT".scaler_41 AS DOUBLE PRECISION) AS scaler_41, CAST("ADS_sca_2_OUT".scaler_42 AS DOUBLE PRECISION) AS scaler_42, CAST("ADS_sca_2_OUT".scaler_43 AS DOUBLE PRECISION) AS scaler_43, CAST("ADS_sca_2_OUT".scaler_44 AS DOUBLE PRECISION) AS scaler_44, CAST("ADS_sca_2_OUT".scaler_45 AS DOUBLE PRECISION) AS scaler_45, CAST("ADS_sca_2_OUT".scaler_46 AS DOUBLE PRECISION) AS scaler_46, CAST("ADS_sca_2_OUT".scaler_47 AS DOUBLE PRECISION) AS scaler_47, CAST("ADS_sca_2_OUT".scaler_48 AS DOUBLE PRECISION) AS scaler_48, CAST("ADS_sca_2_OUT".scaler_49 AS DOUBLE PRECISION) AS scaler_49, CAST("ADS_sca_2_OUT".scaler_50 AS DOUBLE PRECISION) AS scaler_50, CAST("ADS_sca_2_OUT".scaler_51 AS DOUBLE PRECISION) AS scaler_51, CAST("ADS_sca_2_OUT".scaler_52 AS DOUBLE PRECISION) AS scaler_52, CAST("ADS_sca_2_OUT".scaler_53 AS DOUBLE PRECISION) AS scaler_53, CAST("ADS_sca_2_OUT".scaler_54 AS DOUBLE PRECISION) AS scaler_54, CAST("ADS_sca_2_OUT".scaler_55 AS DOUBLE PRECISION) AS scaler_55, CAST("ADS_sca_2_OUT".scaler_56 AS DOUBLE PRECISION) AS scaler_56, CAST("ADS_sca_2_OUT".scaler_57 AS DOUBLE PRECISION) AS scaler_57, CAST("ADS_sca_2_OUT".scaler_58 AS DOUBLE PRECISION) AS scaler_58, CAST("ADS_sca_2_OUT".scaler_59 AS DOUBLE PRECISION) AS scaler_59, CAST("ADS_sca_2_OUT".scaler_60 AS DOUBLE PRECISION) AS scaler_60, CAST("ADS_sca_2_OUT".scaler_61 AS DOUBLE PRECISION) AS scaler_61, CAST("ADS_sca_2_OUT".scaler_62 AS DOUBLE PRECISION) AS scaler_62, CAST("ADS_sca_2_OUT".scaler_63 AS DOUBLE PRECISION) AS scaler_63, CAST("ADS_sca_2_OUT".scaler_64 AS DOUBLE PRECISION) AS scaler_64, CAST("ADS_sca_2_OUT".scaler_65 AS DOUBLE PRECISION) AS scaler_65, CAST("ADS_sca_2_OUT".scaler_66 AS DOUBLE PRECISION) AS scaler_66, CAST("ADS_sca_2_OUT".scaler_67 AS DOUBLE PRECISION) AS scaler_67, CAST("ADS_sca_2_OUT".scaler_68 AS DOUBLE PRECISION) AS scaler_68, CAST("ADS_sca_2_OUT".scaler_69 AS DOUBLE PRECISION) AS scaler_69, CAST("ADS_sca_2_OUT".scaler_70 AS DOUBLE PRECISION) AS scaler_70, CAST("ADS_sca_2_OUT".scaler_71 AS DOUBLE PRECISION) AS scaler_71, CAST("ADS_sca_2_OUT".scaler_72 AS DOUBLE PRECISION) AS scaler_72, CAST("ADS_sca_2_OUT".scaler_73 AS DOUBLE PRECISION) AS scaler_73, CAST("ADS_sca_2_OUT".scaler_74 AS DOUBLE PRECISION) AS scaler_74, CAST("ADS_sca_2_OUT".scaler_75 AS DOUBLE PRECISION) AS scaler_75, CAST("ADS_sca_2_OUT".scaler_76 AS DOUBLE PRECISION) AS scaler_76, CAST("ADS_sca_2_OUT".scaler_77 AS DOUBLE PRECISION) AS scaler_77, CAST("ADS_sca_2_OUT".scaler_78 AS DOUBLE PRECISION) AS scaler_78, CAST("ADS_sca_2_OUT".scaler_79 AS DOUBLE PRECISION) AS scaler_79, CAST("ADS_sca_2_OUT".scaler_80 AS DOUBLE PRECISION) AS scaler_80, CAST("ADS_sca_2_OUT".scaler_81 AS DOUBLE PRECISION) AS scaler_81, CAST("ADS_sca_2_OUT".scaler_82 AS DOUBLE PRECISION) AS scaler_82, CAST("ADS_sca_2_OUT".scaler_83 AS DOUBLE PRECISION) AS scaler_83, CAST("ADS_sca_2_OUT".scaler_84 AS DOUBLE PRECISION) AS scaler_84, CAST("ADS_sca_2_OUT".scaler_85 AS DOUBLE PRECISION) AS scaler_85, CAST("ADS_sca_2_OUT".scaler_86 AS DOUBLE PRECISION) AS scaler_86, CAST("ADS_sca_2_OUT".scaler_87 AS DOUBLE PRECISION) AS scaler_87, CAST("ADS_sca_2_OUT".scaler_88 AS DOUBLE PRECISION) AS scaler_88, CAST("ADS_sca_2_OUT".scaler_89 AS DOUBLE PRECISION) AS scaler_89, CAST("ADS_sca_2_OUT".scaler_90 AS DOUBLE PRECISION) AS scaler_90, CAST("ADS_sca_2_OUT".scaler_91 AS DOUBLE PRECISION) AS scaler_91, CAST("ADS_sca_2_OUT".scaler_92 AS DOUBLE PRECISION) AS scaler_92, CAST("ADS_sca_2_OUT".scaler_93 AS DOUBLE PRECISION) AS scaler_93, CAST("ADS_sca_2_OUT".scaler_94 AS DOUBLE PRECISION) AS scaler_94, CAST("ADS_sca_2_OUT".scaler_95 AS DOUBLE PRECISION) AS scaler_95, CAST("ADS_sca_2_OUT".scaler_96 AS DOUBLE PRECISION) AS scaler_96, CAST("ADS_sca_2_OUT".scaler_97 AS DOUBLE PRECISION) AS scaler_97, CAST("ADS_sca_2_OUT".scaler_98 AS DOUBLE PRECISION) AS scaler_98, CAST("ADS_sca_2_OUT".scaler_99 AS DOUBLE PRECISION) AS scaler_99, CAST("ADS_sca_2_OUT".scaler_100 AS DOUBLE PRECISION) AS scaler_100, CAST("ADS_sca_2_OUT".scaler_101 AS DOUBLE PRECISION) AS scaler_101 
FROM tmp_20180516113140_codegen_ikyb8i_ads_sca_2_out AS "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", CAST(-4.342267702657588 AS DOUBLE PRECISION) * "IL".scaler_2 + CAST(0.2065657027113 AS DOUBLE PRECISION) * "IL".scaler_3 + CAST(-0.18655094667791 AS DOUBLE PRECISION) * "IL".scaler_4 + CAST(-2.972521339987424 AS DOUBLE PRECISION) * "IL".scaler_5 + CAST(-2.619347657539516 AS DOUBLE PRECISION) * "IL".scaler_6 + CAST(1.962056303423097 AS DOUBLE PRECISION) * "IL".scaler_7 + CAST(-3.113215330536186 AS DOUBLE PRECISION) * "IL".scaler_8 + CAST(-1.734733968164664 AS DOUBLE PRECISION) * "IL".scaler_9 + CAST(-1.378403913579822 AS DOUBLE PRECISION) * "IL".scaler_10 + CAST(-0.021862927083859 AS DOUBLE PRECISION) * "IL".scaler_11 + CAST(-3.281210911358882 AS DOUBLE PRECISION) * "IL".scaler_12 + CAST(2.494517022300222 AS DOUBLE PRECISION) * "IL".scaler_13 + CAST(2.3894745412854 AS DOUBLE PRECISION) * "IL".scaler_14 + CAST(3.751779993963954 AS DOUBLE PRECISION) * "IL".scaler_15 + CAST(3.963855287797522 AS DOUBLE PRECISION) * "IL".scaler_16 + CAST(-2.299387358114789 AS DOUBLE PRECISION) * "IL".scaler_17 + CAST(-0.231606960602256 AS DOUBLE PRECISION) * "IL".scaler_18 + CAST(-3.793205013302766 AS DOUBLE PRECISION) * "IL".scaler_19 + CAST(1.004559916731098 AS DOUBLE PRECISION) * "IL".scaler_20 + CAST(0.36317077522648 AS DOUBLE PRECISION) * "IL".scaler_21 + CAST(-0.816165922342185 AS DOUBLE PRECISION) * "IL".scaler_22 + CAST(0.247843607022766 AS DOUBLE PRECISION) * "IL".scaler_23 + CAST(3.044167613059934 AS DOUBLE PRECISION) * "IL".scaler_24 + CAST(-2.970065844944072 AS DOUBLE PRECISION) * "IL".scaler_25 + CAST(2.648785933964133 AS DOUBLE PRECISION) * "IL".scaler_26 + CAST(2.64509335344793 AS DOUBLE PRECISION) * "IL".scaler_27 + CAST(-1.109045890012959 AS DOUBLE PRECISION) * "IL".scaler_28 + CAST(-2.242387653690962 AS DOUBLE PRECISION) * "IL".scaler_29 + CAST(-0.166738292486526 AS DOUBLE PRECISION) * "IL".scaler_30 + CAST(2.136935814238205 AS DOUBLE PRECISION) * "IL".scaler_31 + CAST(-2.146159721227625 AS DOUBLE PRECISION) * "IL".scaler_32 + CAST(0.242032831199513 AS DOUBLE PRECISION) * "IL".scaler_33 + CAST(-0.308952238486527 AS DOUBLE PRECISION) * "IL".scaler_34 + CAST(-4.949397495191899 AS DOUBLE PRECISION) * "IL".scaler_35 + CAST(-1.553543033976015 AS DOUBLE PRECISION) * "IL".scaler_36 + CAST(-0.501933585527008 AS DOUBLE PRECISION) * "IL".scaler_37 + CAST(-1.713659069424207 AS DOUBLE PRECISION) * "IL".scaler_38 + CAST(3.104128211732224 AS DOUBLE PRECISION) * "IL".scaler_39 + CAST(-2.775826675403813 AS DOUBLE PRECISION) * "IL".scaler_40 + CAST(-2.753083757224883 AS DOUBLE PRECISION) * "IL".scaler_41 + CAST(-0.553872732586169 AS DOUBLE PRECISION) * "IL".scaler_42 + CAST(-2.037223539623256 AS DOUBLE PRECISION) * "IL".scaler_43 + CAST(0.767665902226543 AS DOUBLE PRECISION) * "IL".scaler_44 + CAST(2.654603463692974 AS DOUBLE PRECISION) * "IL".scaler_45 + CAST(-1.929727343135202 AS DOUBLE PRECISION) * "IL".scaler_46 + CAST(4.77858596135009 AS DOUBLE PRECISION) * "IL".scaler_47 + CAST(3.201809507035823 AS DOUBLE PRECISION) * "IL".scaler_48 + CAST(0.857714517851078 AS DOUBLE PRECISION) * "IL".scaler_49 + CAST(1.574238210645163 AS DOUBLE PRECISION) * "IL".scaler_50 + CAST(-4.057660095741506 AS DOUBLE PRECISION) * "IL".scaler_51 + CAST(0.146589661115275 AS DOUBLE PRECISION) * "IL".scaler_52 + CAST(-2.552803599331624 AS DOUBLE PRECISION) * "IL".scaler_53 + CAST(1.636775083669504 AS DOUBLE PRECISION) * "IL".scaler_54 + CAST(-3.946486979436728 AS DOUBLE PRECISION) * "IL".scaler_55 + CAST(-1.880553814615012 AS DOUBLE PRECISION) * "IL".scaler_56 + CAST(0.201979733996959 AS DOUBLE PRECISION) * "IL".scaler_57 + CAST(-4.07699132813501 AS DOUBLE PRECISION) * "IL".scaler_58 + CAST(4.586027097678119 AS DOUBLE PRECISION) * "IL".scaler_59 + CAST(1.956298849376998 AS DOUBLE PRECISION) * "IL".scaler_60 + CAST(0.350797556320144 AS DOUBLE PRECISION) * "IL".scaler_61 + CAST(-1.454202518647707 AS DOUBLE PRECISION) * "IL".scaler_62 + CAST(5.985596172379315 AS DOUBLE PRECISION) * "IL".scaler_63 + CAST(-3.382152742015482 AS DOUBLE PRECISION) * "IL".scaler_64 + CAST(1.58343737084292 AS DOUBLE PRECISION) * "IL".scaler_65 + CAST(-3.988799570710744 AS DOUBLE PRECISION) * "IL".scaler_66 + CAST(-2.163394232580996 AS DOUBLE PRECISION) * "IL".scaler_67 + CAST(-3.040253741271692 AS DOUBLE PRECISION) * "IL".scaler_68 + CAST(-1.93030789292223 AS DOUBLE PRECISION) * "IL".scaler_69 + CAST(0.637459884944046 AS DOUBLE PRECISION) * "IL".scaler_70 + CAST(-0.659284931916089 AS DOUBLE PRECISION) * "IL".scaler_71 + CAST(0.260376410522608 AS DOUBLE PRECISION) * "IL".scaler_72 + CAST(4.377411028245986 AS DOUBLE PRECISION) * "IL".scaler_73 + CAST(-0.743864021620813 AS DOUBLE PRECISION) * "IL".scaler_74 + CAST(0.875116591936533 AS DOUBLE PRECISION) * "IL".scaler_75 + CAST(-0.48693256795467 AS DOUBLE PRECISION) * "IL".scaler_76 + CAST(-5.093059641375698 AS DOUBLE PRECISION) * "IL".scaler_77 + CAST(-4.491438233516352 AS DOUBLE PRECISION) * "IL".scaler_78 + CAST(1.370536943128534 AS DOUBLE PRECISION) * "IL".scaler_79 + CAST(2.668426527157922 AS DOUBLE PRECISION) * "IL".scaler_80 + CAST(-0.38860093663659 AS DOUBLE PRECISION) * "IL".scaler_81 + CAST(-1.086364139165511 AS DOUBLE PRECISION) * "IL".scaler_82 + CAST(2.319348811162389 AS DOUBLE PRECISION) * "IL".scaler_83 + CAST(-4.745342718069026 AS DOUBLE PRECISION) * "IL".scaler_84 + CAST(2.097408752672199 AS DOUBLE PRECISION) * "IL".scaler_85 + CAST(0.178088789852026 AS DOUBLE PRECISION) * "IL".scaler_86 + CAST(1.431361329183215 AS DOUBLE PRECISION) * "IL".scaler_87 + CAST(1.097027729323385 AS DOUBLE PRECISION) * "IL".scaler_88 + CAST(-0.699203354106012 AS DOUBLE PRECISION) * "IL".scaler_89 + CAST(-0.997702168880182 AS DOUBLE PRECISION) * "IL".scaler_90 + CAST(-3.820071084094992 AS DOUBLE PRECISION) * "IL".scaler_91 + CAST(1.183366868240307 AS DOUBLE PRECISION) * "IL".scaler_92 + CAST(-2.879603339664532 AS DOUBLE PRECISION) * "IL".scaler_93 + CAST(-2.355766296494948 AS DOUBLE PRECISION) * "IL".scaler_94 + CAST(-0.696263889047273 AS DOUBLE PRECISION) * "IL".scaler_95 + CAST(0.600811626998755 AS DOUBLE PRECISION) * "IL".scaler_96 + CAST(3.027616492009074 AS DOUBLE PRECISION) * "IL".scaler_97 + CAST(-2.271966910112718 AS DOUBLE PRECISION) * "IL".scaler_98 + CAST(-0.033594460713 AS DOUBLE PRECISION) * "IL".scaler_99 + CAST(-6.137300781758013 AS DOUBLE PRECISION) * "IL".scaler_100 + CAST(3.024783111456305 AS DOUBLE PRECISION) * "IL".scaler_101 + CAST(1.956906756328667 AS DOUBLE PRECISION) AS "NEUR_1_1", CAST(0.814630905843874 AS DOUBLE PRECISION) * "IL".scaler_2 + CAST(0.646777668807087 AS DOUBLE PRECISION) * "IL".scaler_3 + CAST(-0.634546453751561 AS DOUBLE PRECISION) * "IL".scaler_4 + CAST(1.588017825376836 AS DOUBLE PRECISION) * "IL".scaler_5 + CAST(1.424082567093997 AS DOUBLE PRECISION) * "IL".scaler_6 + CAST(2.019147184604987 AS DOUBLE PRECISION) * "IL".scaler_7 + CAST(3.298383316000378 AS DOUBLE PRECISION) * "IL".scaler_8 + CAST(0.752078569386567 AS DOUBLE PRECISION) * "IL".scaler_9 + CAST(3.806279854974806 AS DOUBLE PRECISION) * "IL".scaler_10 + CAST(-1.063448284088337 AS DOUBLE PRECISION) * "IL".scaler_11 + CAST(0.118214400595133 AS DOUBLE PRECISION) * "IL".scaler_12 + CAST(-0.603942326097494 AS DOUBLE PRECISION) * "IL".scaler_13 + CAST(1.455790260977126 AS DOUBLE PRECISION) * "IL".scaler_14 + CAST(2.752046969103651 AS DOUBLE PRECISION) * "IL".scaler_15 + CAST(2.827764154170253 AS DOUBLE PRECISION) * "IL".scaler_16 + CAST(-0.484706731086123 AS DOUBLE PRECISION) * "IL".scaler_17 + CAST(-3.283528739334325 AS DOUBLE PRECISION) * "IL".scaler_18 + CAST(1.870906377502591 AS DOUBLE PRECISION) * "IL".scaler_19 + CAST(0.445866984563389 AS DOUBLE PRECISION) * "IL".scaler_20 + CAST(3.969465831574188 AS DOUBLE PRECISION) * "IL".scaler_21 + CAST(-0.460052634088975 AS DOUBLE PRECISION) * "IL".scaler_22 + CAST(1.124486294116046 AS DOUBLE PRECISION) * "IL".scaler_23 + CAST(-0.570888987462222 AS DOUBLE PRECISION) * "IL".scaler_24 + CAST(4.413986955790233 AS DOUBLE PRECISION) * "IL".scaler_25 + CAST(4.206437524214178 AS DOUBLE PRECISION) * "IL".scaler_26 + CAST(3.711904001640496 AS DOUBLE PRECISION) * "IL".scaler_27 + CAST(0.708724397916873 AS DOUBLE PRECISION) * "IL".scaler_28 + CAST(-2.147106071303287 AS DOUBLE PRECISION) * "IL".scaler_29 + CAST(0.02973108230218 AS DOUBLE PRECISION) * "IL".scaler_30 + CAST(1.60661926516964 AS DOUBLE PRECISION) * "IL".scaler_31 + CAST(-2.052933637036125 AS DOUBLE PRECISION) * "IL".scaler_32 + CAST(-2.079494011026492 AS DOUBLE PRECISION) * "IL".scaler_33 + CAST(-0.996459941810834 AS DOUBLE PRECISION) * "IL".scaler_34 + CAST(1.389588375789135 AS DOUBLE PRECISION) * "IL".scaler_35 + CAST(3.893956657050762 AS DOUBLE PRECISION) * "IL".scaler_36 + CAST(-3.896017801592234 AS DOUBLE PRECISION) * "IL".scaler_37 + CAST(5.028270722368751 AS DOUBLE PRECISION) * "IL".scaler_38 + CAST(-2.264434222178132 AS DOUBLE PRECISION) * "IL".scaler_39 + CAST(3.557470628632786 AS DOUBLE PRECISION) * "IL".scaler_40 + CAST(3.850277269433422 AS DOUBLE PRECISION) * "IL".scaler_41 + CAST(3.065718542981366 AS DOUBLE PRECISION) * "IL".scaler_42 + CAST(-0.227995741952964 AS DOUBLE PRECISION) * "IL".scaler_43 + CAST(4.022184952372344 AS DOUBLE PRECISION) * "IL".scaler_44 + CAST(1.582478117998517 AS DOUBLE PRECISION) * "IL".scaler_45 + CAST(1.744920136164775 AS DOUBLE PRECISION) * "IL".scaler_46 + CAST(-1.930844197288544 AS DOUBLE PRECISION) * "IL".scaler_47 + CAST(3.046767787635988 AS DOUBLE PRECISION) * "IL".scaler_48 + CAST(-0.996703184410015 AS DOUBLE PRECISION) * "IL".scaler_49 + CAST(0.962997025650224 AS DOUBLE PRECISION) * "IL".scaler_50 + CAST(1.993342833068797 AS DOUBLE PRECISION) * "IL".scaler_51 + CAST(3.389740005726106 AS DOUBLE PRECISION) * "IL".scaler_52 + CAST(0.166895012845057 AS DOUBLE PRECISION) * "IL".scaler_53 + CAST(-2.525945177914008 AS DOUBLE PRECISION) * "IL".scaler_54 + CAST(3.920783159869732 AS DOUBLE PRECISION) * "IL".scaler_55 + CAST(0.592206680608712 AS DOUBLE PRECISION) * "IL".scaler_56 + CAST(-3.281588968231632 AS DOUBLE PRECISION) * "IL".scaler_57 + CAST(1.987453456607332 AS DOUBLE PRECISION) * "IL".scaler_58 + CAST(-0.42574906535074 AS DOUBLE PRECISION) * "IL".scaler_59 + CAST(-2.827754874966696 AS DOUBLE PRECISION) * "IL".scaler_60 + CAST(3.352782509535107 AS DOUBLE PRECISION) * "IL".scaler_61 + CAST(-1.162539130431664 AS DOUBLE PRECISION) * "IL".scaler_62 + CAST(0.480245884225198 AS DOUBLE PRECISION) * "IL".scaler_63 + CAST(-1.04937879213661 AS DOUBLE PRECISION) * "IL".scaler_64 + CAST(-0.338980262430997 AS DOUBLE PRECISION) * "IL".scaler_65 + CAST(-1.515396790757365 AS DOUBLE PRECISION) * "IL".scaler_66 + CAST(-2.519770484425434 AS DOUBLE PRECISION) * "IL".scaler_67 + CAST(-0.845973592491234 AS DOUBLE PRECISION) * "IL".scaler_68 + CAST(0.919578684411132 AS DOUBLE PRECISION) * "IL".scaler_69 + CAST(-1.302610904378566 AS DOUBLE PRECISION) * "IL".scaler_70 + CAST(-1.509812084566232 AS DOUBLE PRECISION) * "IL".scaler_71 + CAST(-0.650701739574163 AS DOUBLE PRECISION) * "IL".scaler_72 + CAST(1.10317271868204 AS DOUBLE PRECISION) * "IL".scaler_73 + CAST(-0.16760316186479 AS DOUBLE PRECISION) * "IL".scaler_74 + CAST(0.052863314965122 AS DOUBLE PRECISION) * "IL".scaler_75 + CAST(-3.076413828615536 AS DOUBLE PRECISION) * "IL".scaler_76 + CAST(-0.523001077038066 AS DOUBLE PRECISION) * "IL".scaler_77 + CAST(0.206248346563615 AS DOUBLE PRECISION) * "IL".scaler_78 + CAST(-1.382769124537219 AS DOUBLE PRECISION) * "IL".scaler_79 + CAST(-2.125944605010706 AS DOUBLE PRECISION) * "IL".scaler_80 + CAST(-0.003899996097243 AS DOUBLE PRECISION) * "IL".scaler_81 + CAST(2.040159522995937 AS DOUBLE PRECISION) * "IL".scaler_82 + CAST(-0.688934866738974 AS DOUBLE PRECISION) * "IL".scaler_83 + CAST(0.862293054178665 AS DOUBLE PRECISION) * "IL".scaler_84 + CAST(-1.20230387192053 AS DOUBLE PRECISION) * "IL".scaler_85 + CAST(-0.395555274703242 AS DOUBLE PRECISION) * "IL".scaler_86 + CAST(-3.259203193046676 AS DOUBLE PRECISION) * "IL".scaler_87 + CAST(-3.036538524796008 AS DOUBLE PRECISION) * "IL".scaler_88 + CAST(-0.441149732370957 AS DOUBLE PRECISION) * "IL".scaler_89 + CAST(-7.618277331257557 AS DOUBLE PRECISION) * "IL".scaler_90 + CAST(0.837777631569821 AS DOUBLE PRECISION) * "IL".scaler_91 + CAST(-1.867075248309895 AS DOUBLE PRECISION) * "IL".scaler_92 + CAST(-1.180572767409212 AS DOUBLE PRECISION) * "IL".scaler_93 + CAST(-3.106959617113682 AS DOUBLE PRECISION) * "IL".scaler_94 + CAST(-3.396753389851802 AS DOUBLE PRECISION) * "IL".scaler_95 + CAST(-1.674055575612421 AS DOUBLE PRECISION) * "IL".scaler_96 + CAST(2.080999687406966 AS DOUBLE PRECISION) * "IL".scaler_97 + CAST(3.881171237830198 AS DOUBLE PRECISION) * "IL".scaler_98 + CAST(-0.646838457335513 AS DOUBLE PRECISION) * "IL".scaler_99 + CAST(1.079434264459465 AS DOUBLE PRECISION) * "IL".scaler_100 + CAST(-1.396663348662115 AS DOUBLE PRECISION) * "IL".scaler_101 + CAST(3.309364849542494 AS DOUBLE PRECISION) AS "NEUR_1_2", CAST(-1.069007230445226 AS DOUBLE PRECISION) * "IL".scaler_2 + CAST(-1.590655262292659 AS DOUBLE PRECISION) * "IL".scaler_3 + CAST(-2.421397772672915 AS DOUBLE PRECISION) * "IL".scaler_4 + CAST(-0.109766912271519 AS DOUBLE PRECISION) * "IL".scaler_5 + CAST(-0.530871761308288 AS DOUBLE PRECISION) * "IL".scaler_6 + CAST(2.792238576470412 AS DOUBLE PRECISION) * "IL".scaler_7 + CAST(0.961306259209218 AS DOUBLE PRECISION) * "IL".scaler_8 + CAST(-0.31821547978352 AS DOUBLE PRECISION) * "IL".scaler_9 + CAST(-0.723541581477274 AS DOUBLE PRECISION) * "IL".scaler_10 + CAST(2.130869432889898 AS DOUBLE PRECISION) * "IL".scaler_11 + CAST(-1.887927371804586 AS DOUBLE PRECISION) * "IL".scaler_12 + CAST(1.233290511393892 AS DOUBLE PRECISION) * "IL".scaler_13 + CAST(0.51382711161235 AS DOUBLE PRECISION) * "IL".scaler_14 + CAST(-3.802171110379755 AS DOUBLE PRECISION) * "IL".scaler_15 + CAST(-3.770185314806052 AS DOUBLE PRECISION) * "IL".scaler_16 + CAST(-3.227693962282533 AS DOUBLE PRECISION) * "IL".scaler_17 + CAST(-2.115218371017064 AS DOUBLE PRECISION) * "IL".scaler_18 + CAST(-2.150385772100419 AS DOUBLE PRECISION) * "IL".scaler_19 + CAST(-1.711421498970434 AS DOUBLE PRECISION) * "IL".scaler_20 + CAST(-5.394511900607145 AS DOUBLE PRECISION) * "IL".scaler_21 + CAST(1.372930159734354 AS DOUBLE PRECISION) * "IL".scaler_22 + CAST(0.088456829270898 AS DOUBLE PRECISION) * "IL".scaler_23 + CAST(-0.822642632865139 AS DOUBLE PRECISION) * "IL".scaler_24 + CAST(1.311202017800707 AS DOUBLE PRECISION) * "IL".scaler_25 + CAST(-1.034615568252784 AS DOUBLE PRECISION) * "IL".scaler_26 + CAST(0.180700532973517 AS DOUBLE PRECISION) * "IL".scaler_27 + CAST(0.340845414082425 AS DOUBLE PRECISION) * "IL".scaler_28 + CAST(2.600943069925467 AS DOUBLE PRECISION) * "IL".scaler_29 + CAST(4.199532684096307 AS DOUBLE PRECISION) * "IL".scaler_30 + CAST(-2.652794842892083 AS DOUBLE PRECISION) * "IL".scaler_31 + CAST(2.477511517981458 AS DOUBLE PRECISION) * "IL".scaler_32 + CAST(0.346675717985147 AS DOUBLE PRECISION) * "IL".scaler_33 + CAST(1.07906342909339 AS DOUBLE PRECISION) * "IL".scaler_34 + CAST(1.297742243764188 AS DOUBLE PRECISION) * "IL".scaler_35 + CAST(1.228148304044616 AS DOUBLE PRECISION) * "IL".scaler_36 + CAST(-2.873358208563203 AS DOUBLE PRECISION) * "IL".scaler_37 + CAST(0.981441292875492 AS DOUBLE PRECISION) * "IL".scaler_38 + CAST(-0.272197009993061 AS DOUBLE PRECISION) * "IL".scaler_39 + CAST(5.01118227206127 AS DOUBLE PRECISION) * "IL".scaler_40 + CAST(0.601516170417336 AS DOUBLE PRECISION) * "IL".scaler_41 + CAST(1.129920245856546 AS DOUBLE PRECISION) * "IL".scaler_42 + CAST(0.841618288589106 AS DOUBLE PRECISION) * "IL".scaler_43 + CAST(-0.254024543858927 AS DOUBLE PRECISION) * "IL".scaler_44 + CAST(-3.566068896327906 AS DOUBLE PRECISION) * "IL".scaler_45 + CAST(-5.755167808657207 AS DOUBLE PRECISION) * "IL".scaler_46 + CAST(-1.468864544074595 AS DOUBLE PRECISION) * "IL".scaler_47 + CAST(-1.517549802001796 AS DOUBLE PRECISION) * "IL".scaler_48 + CAST(4.097764147005774 AS DOUBLE PRECISION) * "IL".scaler_49 + CAST(-0.519612262273751 AS DOUBLE PRECISION) * "IL".scaler_50 + CAST(0.710551767292203 AS DOUBLE PRECISION) * "IL".scaler_51 + CAST(1.080313273680989 AS DOUBLE PRECISION) * "IL".scaler_52 + CAST(-0.087690954513042 AS DOUBLE PRECISION) * "IL".scaler_53 + CAST(0.518939383033166 AS DOUBLE PRECISION) * "IL".scaler_54 + CAST(-1.385736533331839 AS DOUBLE PRECISION) * "IL".scaler_55 + CAST(-3.100020455842732 AS DOUBLE PRECISION) * "IL".scaler_56 + CAST(2.112685526902268 AS DOUBLE PRECISION) * "IL".scaler_57 + CAST(-1.689246187045902 AS DOUBLE PRECISION) * "IL".scaler_58 + CAST(-1.245375017643664 AS DOUBLE PRECISION) * "IL".scaler_59 + CAST(1.9985325947962 AS DOUBLE PRECISION) * "IL".scaler_60 + CAST(-1.274901563479214 AS DOUBLE PRECISION) * "IL".scaler_61 + CAST(0.121231705876266 AS DOUBLE PRECISION) * "IL".scaler_62 + CAST(-4.915814584637571 AS DOUBLE PRECISION) * "IL".scaler_63 + CAST(2.444839361209729 AS DOUBLE PRECISION) * "IL".scaler_64 + CAST(-0.006401161043954 AS DOUBLE PRECISION) * "IL".scaler_65 + CAST(0.785907530540382 AS DOUBLE PRECISION) * "IL".scaler_66 + CAST(0.182631928614876 AS DOUBLE PRECISION) * "IL".scaler_67 + CAST(1.803489611766235 AS DOUBLE PRECISION) * "IL".scaler_68 + CAST(1.668967542893032 AS DOUBLE PRECISION) * "IL".scaler_69 + CAST(-2.074500399884187 AS DOUBLE PRECISION) * "IL".scaler_70 + CAST(-0.522334421289961 AS DOUBLE PRECISION) * "IL".scaler_71 + CAST(1.143452880106767 AS DOUBLE PRECISION) * "IL".scaler_72 + CAST(2.94716612163266 AS DOUBLE PRECISION) * "IL".scaler_73 + CAST(3.006578243282742 AS DOUBLE PRECISION) * "IL".scaler_74 + CAST(-2.548706627254198 AS DOUBLE PRECISION) * "IL".scaler_75 + CAST(2.061254118419453 AS DOUBLE PRECISION) * "IL".scaler_76 + CAST(-2.493594613963716 AS DOUBLE PRECISION) * "IL".scaler_77 + CAST(3.390070823005057 AS DOUBLE PRECISION) * "IL".scaler_78 + CAST(-3.201461849682573 AS DOUBLE PRECISION) * "IL".scaler_79 + CAST(-2.751521689217178 AS DOUBLE PRECISION) * "IL".scaler_80 + CAST(2.845054914642928 AS DOUBLE PRECISION) * "IL".scaler_81 + CAST(-0.120725868216334 AS DOUBLE PRECISION) * "IL".scaler_82 + CAST(1.491894568027891 AS DOUBLE PRECISION) * "IL".scaler_83 + CAST(1.774394781101625 AS DOUBLE PRECISION) * "IL".scaler_84 + CAST(0.465346444665465 AS DOUBLE PRECISION) * "IL".scaler_85 + CAST(-2.039298057975501 AS DOUBLE PRECISION) * "IL".scaler_86 + CAST(2.189057282346255 AS DOUBLE PRECISION) * "IL".scaler_87 + CAST(-0.258002596495741 AS DOUBLE PRECISION) * "IL".scaler_88 + CAST(-0.372943265275296 AS DOUBLE PRECISION) * "IL".scaler_89 + CAST(0.391284754985412 AS DOUBLE PRECISION) * "IL".scaler_90 + CAST(2.284921962257578 AS DOUBLE PRECISION) * "IL".scaler_91 + CAST(-3.62113796325736 AS DOUBLE PRECISION) * "IL".scaler_92 + CAST(0.893594773746752 AS DOUBLE PRECISION) * "IL".scaler_93 + CAST(1.589593578374822 AS DOUBLE PRECISION) * "IL".scaler_94 + CAST(0.945502040727489 AS DOUBLE PRECISION) * "IL".scaler_95 + CAST(1.86437633164006 AS DOUBLE PRECISION) * "IL".scaler_96 + CAST(-0.176833068133214 AS DOUBLE PRECISION) * "IL".scaler_97 + CAST(1.780927728811196 AS DOUBLE PRECISION) * "IL".scaler_98 + CAST(1.824027115881986 AS DOUBLE PRECISION) * "IL".scaler_99 + CAST(2.228790185748737 AS DOUBLE PRECISION) * "IL".scaler_100 + CAST(2.863503663945138 AS DOUBLE PRECISION) * "IL".scaler_101 + CAST(-2.302523009738856 AS DOUBLE PRECISION) AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", greatest("HL_BA_1"."NEUR_1_1", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_1", greatest("HL_BA_1"."NEUR_1_2", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_2", greatest("HL_BA_1"."NEUR_1_3", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_1_3" 
FROM "HL_BA_1")
 SELECT "HL_1_relu_1"."KEY", "HL_1_relu_1"."NEUR_1_1", "HL_1_relu_1"."NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "U"

-- Code For temporary table tmp_20180516113140_codegen_vghfgr_ol_softmax_1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180516113140_codegen_vghfgr_ol_softmax_1  (
	"KEY" BIGINT, 
	"NEUR_3_1" DOUBLE PRECISION, 
	"NEUR_3_2" DOUBLE PRECISION, 
	"NEUR_3_3" DOUBLE PRECISION, 
	"NEUR_3_4" DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180516113140_codegen_vghfgr_ol_softmax_1 part 2. Populate

INSERT INTO tmp_20180516113140_codegen_vghfgr_ol_softmax_1 ("KEY", "NEUR_3_1", "NEUR_3_2", "NEUR_3_3", "NEUR_3_4") SELECT "U"."KEY", "U"."NEUR_3_1", "U"."NEUR_3_2", "U"."NEUR_3_3", "U"."NEUR_3_4" 
FROM (WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", CAST(0.134193259568377 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-0.509077686961233 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(4.264946579825184 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-3.47057840653557 AS DOUBLE PRECISION) AS "NEUR_2_1", CAST(-2.46142895414079 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-8.560858556929986 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(7.079239509637343 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(14.170688380861408 AS DOUBLE PRECISION) AS "NEUR_2_2", CAST(-3.485898237914038 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(3.752385931646638 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(1.828067650877695 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-6.65383765028463 AS DOUBLE PRECISION) AS "NEUR_2_3", CAST(-0.676528527491889 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(8.800675102700424 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-2.727730909539844 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(4.30935672486754 AS DOUBLE PRECISION) AS "NEUR_2_4", CAST(-0.609274110200574 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_1" + CAST(-0.377623437321162 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_2" + CAST(-0.672921383794615 AS DOUBLE PRECISION) * "HL_1_relu_1"."NEUR_1_3" + CAST(-0.018078316226986 AS DOUBLE PRECISION) AS "NEUR_2_5" 
FROM tmp_20180516113140_codegen_watyww_hl_1_relu_1 AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", greatest("HL_BA_2"."NEUR_2_1", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_1", greatest("HL_BA_2"."NEUR_2_2", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_2", greatest("HL_BA_2"."NEUR_2_3", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_3", greatest("HL_BA_2"."NEUR_2_4", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_4", greatest("HL_BA_2"."NEUR_2_5", CAST(0 AS DOUBLE PRECISION)) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", CAST(1.784890782797845 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(-13.487908502625073 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-7.100449250401344 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(6.271671112579821 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.589818610306006 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(4.961834624906005 AS DOUBLE PRECISION) AS "NEUR_3_1", CAST(0.079431280929184 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(5.265943228109188 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(-2.854835506805054 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(-12.596736768603307 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.396057190239067 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(8.33132612423952 AS DOUBLE PRECISION) AS "NEUR_3_2", CAST(2.709898673761258 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(3.063976294266598 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(1.903482463709893 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(3.7661400527051 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(0.663427691679221 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(-2.145238524621162 AS DOUBLE PRECISION) AS "NEUR_3_3", CAST(-3.958018689792918 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_1" + CAST(5.522599691796946 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_2" + CAST(7.259872659402741 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_3" + CAST(2.28318874862328 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_4" + CAST(-0.485469361577141 AS DOUBLE PRECISION) * "HL_2_relu"."NEUR_2_5" + CAST(-12.465372444178541 AS DOUBLE PRECISION) AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA")
 SELECT "OL_softmax_1"."KEY", "OL_softmax_1"."NEUR_3_1", "OL_softmax_1"."NEUR_3_2", "OL_softmax_1"."NEUR_3_3", "OL_softmax_1"."NEUR_3_4" 
FROM (SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_softmax") AS "OL_softmax_1") AS "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "Score_0", "OL_softmax_1"."NEUR_3_2" AS "Score_1", "OL_softmax_1"."NEUR_3_3" AS "Score_2", "OL_softmax_1"."NEUR_3_4" AS "Score_3", CAST(NULL AS DOUBLE PRECISION) AS "Proba_0", CAST(NULL AS DOUBLE PRECISION) AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "Proba_2", CAST(NULL AS DOUBLE PRECISION) AS "Proba_3", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM tmp_20180516113140_codegen_vghfgr_ol_softmax_1 AS "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_0" - score_max."max_Score")) AS "exp_delta_Score_0", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_1" - score_max."max_Score")) AS "exp_delta_Score_1", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_2" - score_max."max_Score")) AS "exp_delta_Score_2", exp(greatest(CAST(-100.0 AS DOUBLE PRECISION), score_max."Score_3" - score_max."max_Score")) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu."class" AS "class", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS "class", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS "class", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS "class", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS "class", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS DOUBLE PRECISION) AS "Score_0", CAST(NULL AS DOUBLE PRECISION) AS "Score_1", CAST(NULL AS DOUBLE PRECISION) AS "Score_2", CAST(NULL AS DOUBLE PRECISION) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3") AS "DecisionProba" 
FROM arg_max_cte