-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : SVC_linear_Pipeline
-- Dataset : BreastCancer
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180602142808_jjm_ads_imp_1_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602142808_jjm_ads_imp_1_out  (
	"KEY" BIGINT, 
	impter_2 DOUBLE PRECISION, 
	impter_3 DOUBLE PRECISION, 
	impter_4 DOUBLE PRECISION, 
	impter_5 DOUBLE PRECISION, 
	impter_6 DOUBLE PRECISION, 
	impter_7 DOUBLE PRECISION, 
	impter_8 DOUBLE PRECISION, 
	impter_9 DOUBLE PRECISION, 
	impter_10 DOUBLE PRECISION, 
	impter_11 DOUBLE PRECISION, 
	impter_12 DOUBLE PRECISION, 
	impter_13 DOUBLE PRECISION, 
	impter_14 DOUBLE PRECISION, 
	impter_15 DOUBLE PRECISION, 
	impter_16 DOUBLE PRECISION, 
	impter_17 DOUBLE PRECISION, 
	impter_18 DOUBLE PRECISION, 
	impter_19 DOUBLE PRECISION, 
	impter_20 DOUBLE PRECISION, 
	impter_21 DOUBLE PRECISION, 
	impter_22 DOUBLE PRECISION, 
	impter_23 DOUBLE PRECISION, 
	impter_24 DOUBLE PRECISION, 
	impter_25 DOUBLE PRECISION, 
	impter_26 DOUBLE PRECISION, 
	impter_27 DOUBLE PRECISION, 
	impter_28 DOUBLE PRECISION, 
	impter_29 DOUBLE PRECISION, 
	impter_30 DOUBLE PRECISION, 
	impter_31 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602142808_jjm_ads_imp_1_out part 2. Populate

INSERT INTO tmp_20180602142808_jjm_ads_imp_1_out ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11, impter_12, impter_13, impter_14, impter_15, impter_16, impter_17, impter_18, impter_19, impter_20, impter_21, impter_22, impter_23, impter_24, impter_25, impter_26, impter_27, impter_28, impter_29, impter_30, impter_31) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11, "U".impter_12, "U".impter_13, "U".impter_14, "U".impter_15, "U".impter_16, "U".impter_17, "U".impter_18, "U".impter_19, "U".impter_20, "U".impter_21, "U".impter_22, "U".impter_23, "U".impter_24, "U".impter_25, "U".impter_26, "U".impter_27, "U".impter_28, "U".impter_29, "U".impter_30, "U".impter_31 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11, "ADS_imp_1_OUT".impter_12, "ADS_imp_1_OUT".impter_13, "ADS_imp_1_OUT".impter_14, "ADS_imp_1_OUT".impter_15, "ADS_imp_1_OUT".impter_16, "ADS_imp_1_OUT".impter_17, "ADS_imp_1_OUT".impter_18, "ADS_imp_1_OUT".impter_19, "ADS_imp_1_OUT".impter_20, "ADS_imp_1_OUT".impter_21, "ADS_imp_1_OUT".impter_22, "ADS_imp_1_OUT".impter_23, "ADS_imp_1_OUT".impter_24, "ADS_imp_1_OUT".impter_25, "ADS_imp_1_OUT".impter_26, "ADS_imp_1_OUT".impter_27, "ADS_imp_1_OUT".impter_28, "ADS_imp_1_OUT".impter_29, "ADS_imp_1_OUT".impter_30, "ADS_imp_1_OUT".impter_31 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 13.450740000000003 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 19.4476 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 87.29319999999998 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 583.3380000000001 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.09348100000000001 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.0959074 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.07945570000000003 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.04142684 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.178872 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0630418 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.3765220000000001 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 1.2955559999999997 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 2.7619079999999996 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 33.839960000000005 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.006920639999999998 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.02546753999999999 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.033411 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.011515259999999998 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.02063639999999999 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.0038469800000000003 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN 15.393479999999997 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN 26.079600000000006 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 101.605 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 769.482 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN 0.12837400000000002 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN 0.23153520000000005 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN 0.2537764 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 0.10431359999999998 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 0.284744 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 0.08354739999999998 ELSE "ADS"."Feature_29" END AS impter_31 
FROM "BreastCancer" AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180602142808_8ee_ads_sca_2_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602142808_8ee_ads_sca_2_out  (
	"KEY" BIGINT, 
	scaler_2 DOUBLE PRECISION, 
	scaler_3 DOUBLE PRECISION, 
	scaler_4 DOUBLE PRECISION, 
	scaler_5 DOUBLE PRECISION, 
	scaler_6 DOUBLE PRECISION, 
	scaler_7 DOUBLE PRECISION, 
	scaler_8 DOUBLE PRECISION, 
	scaler_9 DOUBLE PRECISION, 
	scaler_10 DOUBLE PRECISION, 
	scaler_11 DOUBLE PRECISION, 
	scaler_12 DOUBLE PRECISION, 
	scaler_13 DOUBLE PRECISION, 
	scaler_14 DOUBLE PRECISION, 
	scaler_15 DOUBLE PRECISION, 
	scaler_16 DOUBLE PRECISION, 
	scaler_17 DOUBLE PRECISION, 
	scaler_18 DOUBLE PRECISION, 
	scaler_19 DOUBLE PRECISION, 
	scaler_20 DOUBLE PRECISION, 
	scaler_21 DOUBLE PRECISION, 
	scaler_22 DOUBLE PRECISION, 
	scaler_23 DOUBLE PRECISION, 
	scaler_24 DOUBLE PRECISION, 
	scaler_25 DOUBLE PRECISION, 
	scaler_26 DOUBLE PRECISION, 
	scaler_27 DOUBLE PRECISION, 
	scaler_28 DOUBLE PRECISION, 
	scaler_29 DOUBLE PRECISION, 
	scaler_30 DOUBLE PRECISION, 
	scaler_31 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602142808_8ee_ads_sca_2_out part 2. Populate

INSERT INTO tmp_20180602142808_8ee_ads_sca_2_out ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11, "U".scaler_12, "U".scaler_13, "U".scaler_14, "U".scaler_15, "U".scaler_16, "U".scaler_17, "U".scaler_18, "U".scaler_19, "U".scaler_20, "U".scaler_21, "U".scaler_22, "U".scaler_23, "U".scaler_24, "U".scaler_25, "U".scaler_26, "U".scaler_27, "U".scaler_28, "U".scaler_29, "U".scaler_30, "U".scaler_31 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11, "ADS_sca_2_OUT".scaler_12, "ADS_sca_2_OUT".scaler_13, "ADS_sca_2_OUT".scaler_14, "ADS_sca_2_OUT".scaler_15, "ADS_sca_2_OUT".scaler_16, "ADS_sca_2_OUT".scaler_17, "ADS_sca_2_OUT".scaler_18, "ADS_sca_2_OUT".scaler_19, "ADS_sca_2_OUT".scaler_20, "ADS_sca_2_OUT".scaler_21, "ADS_sca_2_OUT".scaler_22, "ADS_sca_2_OUT".scaler_23, "ADS_sca_2_OUT".scaler_24, "ADS_sca_2_OUT".scaler_25, "ADS_sca_2_OUT".scaler_26, "ADS_sca_2_OUT".scaler_27, "ADS_sca_2_OUT".scaler_28, "ADS_sca_2_OUT".scaler_29, "ADS_sca_2_OUT".scaler_30, "ADS_sca_2_OUT".scaler_31 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS DOUBLE PRECISION) - CAST(13.450740000000003 AS DOUBLE PRECISION)) / CAST(2.842552647252114 AS DOUBLE PRECISION) AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS DOUBLE PRECISION) - CAST(19.4476 AS DOUBLE PRECISION)) / CAST(4.456612417520734 AS DOUBLE PRECISION) AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS DOUBLE PRECISION) - CAST(87.29319999999998 AS DOUBLE PRECISION)) / CAST(19.783373366541916 AS DOUBLE PRECISION) AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS DOUBLE PRECISION) - CAST(583.3380000000001 AS DOUBLE PRECISION)) / CAST(254.63059980293016 AS DOUBLE PRECISION) AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS DOUBLE PRECISION) - CAST(0.093481 AS DOUBLE PRECISION)) / CAST(0.012981839045374 AS DOUBLE PRECISION) AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS DOUBLE PRECISION) - CAST(0.0959074 AS DOUBLE PRECISION)) / CAST(0.047940225106272 AS DOUBLE PRECISION) AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS DOUBLE PRECISION) - CAST(0.0794557 AS DOUBLE PRECISION)) / CAST(0.072003293484465 AS DOUBLE PRECISION) AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS DOUBLE PRECISION) - CAST(0.04142684 AS DOUBLE PRECISION)) / CAST(0.032860289971551 AS DOUBLE PRECISION) AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS DOUBLE PRECISION) - CAST(0.178872 AS DOUBLE PRECISION)) / CAST(0.023767574886807 AS DOUBLE PRECISION) AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS DOUBLE PRECISION) - CAST(0.0630418 AS DOUBLE PRECISION)) / CAST(0.006170491614126 AS DOUBLE PRECISION) AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS DOUBLE PRECISION) - CAST(0.376522 AS DOUBLE PRECISION)) / CAST(0.229317474510775 AS DOUBLE PRECISION) AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS DOUBLE PRECISION) - CAST(1.295556 AS DOUBLE PRECISION)) / CAST(0.486497938807556 AS DOUBLE PRECISION) AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS DOUBLE PRECISION) - CAST(2.761908 AS DOUBLE PRECISION)) / CAST(1.844953232669056 AS DOUBLE PRECISION) AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS DOUBLE PRECISION) - CAST(33.839960000000005 AS DOUBLE PRECISION)) / CAST(28.135330141983403 AS DOUBLE PRECISION) AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS DOUBLE PRECISION) - CAST(0.00692064 AS DOUBLE PRECISION)) / CAST(0.002156646106898 AS DOUBLE PRECISION) AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS DOUBLE PRECISION) - CAST(0.02546754 AS DOUBLE PRECISION)) / CAST(0.019603893631838 AS DOUBLE PRECISION) AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS DOUBLE PRECISION) - CAST(0.033411 AS DOUBLE PRECISION)) / CAST(0.029953011615529 AS DOUBLE PRECISION) AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS DOUBLE PRECISION) - CAST(0.01151526 AS DOUBLE PRECISION)) / CAST(0.006801917382062 AS DOUBLE PRECISION) AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS DOUBLE PRECISION) - CAST(0.0206364 AS DOUBLE PRECISION)) / CAST(0.008194260127675 AS DOUBLE PRECISION) AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS DOUBLE PRECISION) - CAST(0.00384698 AS DOUBLE PRECISION)) / CAST(0.002177451744494 AS DOUBLE PRECISION) AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS DOUBLE PRECISION) - CAST(15.393479999999997 AS DOUBLE PRECISION)) / CAST(3.899252873256619 AS DOUBLE PRECISION) AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS DOUBLE PRECISION) - CAST(26.079600000000006 AS DOUBLE PRECISION)) / CAST(5.855341137798891 AS DOUBLE PRECISION) AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS DOUBLE PRECISION) - CAST(101.605 AS DOUBLE PRECISION)) / CAST(28.256795094277766 AS DOUBLE PRECISION) AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS DOUBLE PRECISION) - CAST(769.482 AS DOUBLE PRECISION)) / CAST(402.52477721998673 AS DOUBLE PRECISION) AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS DOUBLE PRECISION) - CAST(0.128374 AS DOUBLE PRECISION)) / CAST(0.022491495459395 AS DOUBLE PRECISION) AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS DOUBLE PRECISION) - CAST(0.2315352 AS DOUBLE PRECISION)) / CAST(0.135833539278633 AS DOUBLE PRECISION) AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS DOUBLE PRECISION) - CAST(0.2537764 AS DOUBLE PRECISION)) / CAST(0.1919107419376 AS DOUBLE PRECISION) AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS DOUBLE PRECISION) - CAST(0.1043136 AS DOUBLE PRECISION)) / CAST(0.062507648324345 AS DOUBLE PRECISION) AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS DOUBLE PRECISION) - CAST(0.284744 AS DOUBLE PRECISION)) / CAST(0.055113585112928 AS DOUBLE PRECISION) AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS DOUBLE PRECISION) - CAST(0.0835474 AS DOUBLE PRECISION)) / CAST(0.015270954103788 AS DOUBLE PRECISION) AS scaler_31 
FROM tmp_20180602142808_jjm_ads_imp_1_out AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Model deployment code

WITH kernel_input AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) AS scaler_11, CAST("ADS_sca_2_OUT".scaler_12 AS DOUBLE PRECISION) AS scaler_12, CAST("ADS_sca_2_OUT".scaler_13 AS DOUBLE PRECISION) AS scaler_13, CAST("ADS_sca_2_OUT".scaler_14 AS DOUBLE PRECISION) AS scaler_14, CAST("ADS_sca_2_OUT".scaler_15 AS DOUBLE PRECISION) AS scaler_15, CAST("ADS_sca_2_OUT".scaler_16 AS DOUBLE PRECISION) AS scaler_16, CAST("ADS_sca_2_OUT".scaler_17 AS DOUBLE PRECISION) AS scaler_17, CAST("ADS_sca_2_OUT".scaler_18 AS DOUBLE PRECISION) AS scaler_18, CAST("ADS_sca_2_OUT".scaler_19 AS DOUBLE PRECISION) AS scaler_19, CAST("ADS_sca_2_OUT".scaler_20 AS DOUBLE PRECISION) AS scaler_20, CAST("ADS_sca_2_OUT".scaler_21 AS DOUBLE PRECISION) AS scaler_21, CAST("ADS_sca_2_OUT".scaler_22 AS DOUBLE PRECISION) AS scaler_22, CAST("ADS_sca_2_OUT".scaler_23 AS DOUBLE PRECISION) AS scaler_23, CAST("ADS_sca_2_OUT".scaler_24 AS DOUBLE PRECISION) AS scaler_24, CAST("ADS_sca_2_OUT".scaler_25 AS DOUBLE PRECISION) AS scaler_25, CAST("ADS_sca_2_OUT".scaler_26 AS DOUBLE PRECISION) AS scaler_26, CAST("ADS_sca_2_OUT".scaler_27 AS DOUBLE PRECISION) AS scaler_27, CAST("ADS_sca_2_OUT".scaler_28 AS DOUBLE PRECISION) AS scaler_28, CAST("ADS_sca_2_OUT".scaler_29 AS DOUBLE PRECISION) AS scaler_29, CAST("ADS_sca_2_OUT".scaler_30 AS DOUBLE PRECISION) AS scaler_30, CAST("ADS_sca_2_OUT".scaler_31 AS DOUBLE PRECISION) AS scaler_31 
FROM tmp_20180602142808_8ee_ads_sca_2_out AS "ADS_sca_2_OUT"), 
dummy_cte AS 
(SELECT CAST(0.0 AS DOUBLE PRECISION) AS "X"), 
"SV_data" AS 
(SELECT "Values".sv_idx AS sv_idx, CAST("Values".dual_coeff AS DOUBLE PRECISION) AS dual_coeff, CAST("Values".sv_0 AS DOUBLE PRECISION) AS sv_0, CAST("Values".sv_1 AS DOUBLE PRECISION) AS sv_1, CAST("Values".sv_2 AS DOUBLE PRECISION) AS sv_2, CAST("Values".sv_3 AS DOUBLE PRECISION) AS sv_3, CAST("Values".sv_4 AS DOUBLE PRECISION) AS sv_4, CAST("Values".sv_5 AS DOUBLE PRECISION) AS sv_5, CAST("Values".sv_6 AS DOUBLE PRECISION) AS sv_6, CAST("Values".sv_7 AS DOUBLE PRECISION) AS sv_7, CAST("Values".sv_8 AS DOUBLE PRECISION) AS sv_8, CAST("Values".sv_9 AS DOUBLE PRECISION) AS sv_9, CAST("Values".sv_10 AS DOUBLE PRECISION) AS sv_10, CAST("Values".sv_11 AS DOUBLE PRECISION) AS sv_11, CAST("Values".sv_12 AS DOUBLE PRECISION) AS sv_12, CAST("Values".sv_13 AS DOUBLE PRECISION) AS sv_13, CAST("Values".sv_14 AS DOUBLE PRECISION) AS sv_14, CAST("Values".sv_15 AS DOUBLE PRECISION) AS sv_15, CAST("Values".sv_16 AS DOUBLE PRECISION) AS sv_16, CAST("Values".sv_17 AS DOUBLE PRECISION) AS sv_17, CAST("Values".sv_18 AS DOUBLE PRECISION) AS sv_18, CAST("Values".sv_19 AS DOUBLE PRECISION) AS sv_19, CAST("Values".sv_20 AS DOUBLE PRECISION) AS sv_20, CAST("Values".sv_21 AS DOUBLE PRECISION) AS sv_21, CAST("Values".sv_22 AS DOUBLE PRECISION) AS sv_22, CAST("Values".sv_23 AS DOUBLE PRECISION) AS sv_23, CAST("Values".sv_24 AS DOUBLE PRECISION) AS sv_24, CAST("Values".sv_25 AS DOUBLE PRECISION) AS sv_25, CAST("Values".sv_26 AS DOUBLE PRECISION) AS sv_26, CAST("Values".sv_27 AS DOUBLE PRECISION) AS sv_27, CAST("Values".sv_28 AS DOUBLE PRECISION) AS sv_28, CAST("Values".sv_29 AS DOUBLE PRECISION) AS sv_29 
FROM (SELECT 0 AS sv_idx, CAST(-0.037862739155382 AS DOUBLE PRECISION) AS dual_coeff, CAST(0.988287764068574 AS DOUBLE PRECISION) AS sv_0, CAST(0.545795723773792 AS DOUBLE PRECISION) AS sv_1, CAST(1.021403156358268 AS DOUBLE PRECISION) AS sv_2, CAST(0.956138029712163 AS DOUBLE PRECISION) AS sv_3, CAST(1.773169419181982 AS DOUBLE PRECISION) AS sv_4, CAST(0.675687273645328 AS DOUBLE PRECISION) AS sv_5, CAST(1.394995911147748 AS DOUBLE PRECISION) AS sv_6, CAST(1.168071250534634 AS DOUBLE PRECISION) AS sv_7, CAST(0.337771103624715 AS DOUBLE PRECISION) AS sv_8, CAST(0.369208831721697 AS DOUBLE PRECISION) AS sv_9, CAST(0.846328874038252 AS DOUBLE PRECISION) AS sv_10, CAST(0.331849299085855 AS DOUBLE PRECISION) AS sv_11, CAST(0.107911678450504 AS DOUBLE PRECISION) AS sv_12, CAST(0.848756345828916 AS DOUBLE PRECISION) AS sv_13, CAST(1.687509132054118 AS DOUBLE PRECISION) AS sv_14, CAST(0.616839706799947 AS DOUBLE PRECISION) AS sv_15, CAST(0.833939515686294 AS DOUBLE PRECISION) AS sv_16, CAST(0.050682767907346 AS DOUBLE PRECISION) AS sv_17, CAST(2.389916806992701 AS DOUBLE PRECISION) AS sv_18, CAST(1.074659866018647 AS DOUBLE PRECISION) AS sv_19, CAST(0.599222485934482 AS DOUBLE PRECISION) AS sv_20, CAST(-0.148513977159476 AS DOUBLE PRECISION) AS sv_21, CAST(0.428038634942338 AS DOUBLE PRECISION) AS sv_22, CAST(0.511069160563926 AS DOUBLE PRECISION) AS sv_23, CAST(0.632505740922505 AS DOUBLE PRECISION) AS sv_24, CAST(-0.146761986074053 AS DOUBLE PRECISION) AS sv_25, CAST(0.420109886429468 AS DOUBLE PRECISION) AS sv_26, CAST(0.006181643532565 AS DOUBLE PRECISION) AS sv_27, CAST(-0.202200600399444 AS DOUBLE PRECISION) AS sv_28, CAST(-0.263074590670366 AS DOUBLE PRECISION) AS sv_29 
FROM dummy_cte UNION ALL SELECT 1 AS sv_idx, CAST(-0.126999640172606 AS DOUBLE PRECISION) AS dual_coeff, CAST(0.056027106535371 AS DOUBLE PRECISION) AS sv_0, CAST(1.176319479654551 AS DOUBLE PRECISION) AS sv_1, CAST(0.023595571460501 AS DOUBLE PRECISION) AS sv_2, CAST(-0.04217089386865 AS DOUBLE PRECISION) AS sv_3, CAST(-0.069404650362005 AS DOUBLE PRECISION) AS sv_4, CAST(-0.360603229577627 AS DOUBLE PRECISION) AS sv_5, CAST(-0.369506708824928 AS DOUBLE PRECISION) AS sv_6, CAST(-0.321872996530373 AS DOUBLE PRECISION) AS sv_7, CAST(-0.116629484211224 AS DOUBLE PRECISION) AS sv_8, CAST(-0.282278967207816 AS DOUBLE PRECISION) AS sv_9, CAST(-0.634587487545186 AS DOUBLE PRECISION) AS sv_10, CAST(-0.597239940444918 AS DOUBLE PRECISION) AS sv_11, CAST(-0.547389485065151 AS DOUBLE PRECISION) AS sv_12, CAST(-0.497949017455971 AS DOUBLE PRECISION) AS sv_13, CAST(-1.313446833460216 AS DOUBLE PRECISION) AS sv_14, CAST(-0.700245586810668 AS DOUBLE PRECISION) AS sv_15, CAST(-0.515841284954119 AS DOUBLE PRECISION) AS sv_16, CAST(-0.681463731421371 AS DOUBLE PRECISION) AS sv_17, CAST(-0.903852194658322 AS DOUBLE PRECISION) AS sv_18, CAST(-1.093930097887666 AS DOUBLE PRECISION) AS sv_19, CAST(0.383796601206355 AS DOUBLE PRECISION) AS sv_20, CAST(1.632765670693935 AS DOUBLE PRECISION) AS sv_21, CAST(0.41034377611876 AS DOUBLE PRECISION) AS sv_22, CAST(0.196802791984917 AS DOUBLE PRECISION) AS sv_23, CAST(0.832581365423509 AS DOUBLE PRECISION) AS sv_24, CAST(0.418635929697408 AS DOUBLE PRECISION) AS sv_25, CAST(0.655636045849439 AS DOUBLE PRECISION) AS sv_26, CAST(0.457326435505435 AS DOUBLE PRECISION) AS sv_27, CAST(1.129594452482754 AS DOUBLE PRECISION) AS sv_28, CAST(-0.297781001049042 AS DOUBLE PRECISION) AS sv_29 
FROM dummy_cte UNION ALL SELECT 2 AS sv_idx, CAST(-0.153303257703211 AS DOUBLE PRECISION) AS dual_coeff, CAST(0.186191802115479 AS DOUBLE PRECISION) AS sv_0, CAST(0.038684090930193 AS DOUBLE PRECISION) AS sv_1, CAST(0.19343516037927 AS DOUBLE PRECISION) AS sv_2, CAST(0.063472339979988 AS DOUBLE PRECISION) AS sv_3, CAST(0.964347189658074 AS DOUBLE PRECISION) AS sv_4, CAST(0.362797628952407 AS DOUBLE PRECISION) AS sv_5, CAST(0.460316443818657 AS DOUBLE PRECISION) AS sv_6, CAST(0.706115497461783 AS DOUBLE PRECISION) AS sv_7, CAST(-0.503711466441839 AS DOUBLE PRECISION) AS sv_8, CAST(0.388656228704666 AS DOUBLE PRECISION) AS sv_9, CAST(-0.679067307592746 AS DOUBLE PRECISION) AS sv_10, CAST(-0.703509660984168 AS DOUBLE PRECISION) AS sv_11, CAST(-0.628692358950468 AS DOUBLE PRECISION) AS sv_12, CAST(-0.532780668446185 AS DOUBLE PRECISION) AS sv_13, CAST(-0.744971553219089 AS DOUBLE PRECISION) AS sv_14, CAST(-0.38551219170697 AS DOUBLE PRECISION) AS sv_15, CAST(-0.385971205446545 AS DOUBLE PRECISION) AS sv_16, CAST(-0.286428059996419 AS DOUBLE PRECISION) AS sv_17, CAST(-1.025888837920679 AS DOUBLE PRECISION) AS sv_18, CAST(-0.459702495144206 AS DOUBLE PRECISION) AS sv_19, CAST(0.42226550919352 AS DOUBLE PRECISION) AS sv_20, CAST(0.806169937653618 AS DOUBLE PRECISION) AS sv_21, CAST(0.435116578471769 AS DOUBLE PRECISION) AS sv_22, CAST(0.247979765840471 AS DOUBLE PRECISION) AS sv_23, CAST(1.463931113848897 AS DOUBLE PRECISION) AS sv_24, CAST(0.922193448431364 AS DOUBLE PRECISION) AS sv_25, CAST(0.79788967753451 AS DOUBLE PRECISION) AS sv_26, CAST(1.254028940478802 AS DOUBLE PRECISION) AS sv_27, CAST(0.601593961489948 AS DOUBLE PRECISION) AS sv_28, CAST(1.437539517884779 AS DOUBLE PRECISION) AS sv_29 
FROM dummy_cte UNION ALL SELECT 3 AS sv_idx, CAST(-0.100646279432859 AS DOUBLE PRECISION) AS dual_coeff, CAST(1.628557347732886 AS DOUBLE PRECISION) AS sv_0, CAST(0.536820296643817 AS DOUBLE PRECISION) AS sv_1, CAST(1.521823373708213 AS DOUBLE PRECISION) AS sv_2, CAST(1.730593260751252 AS DOUBLE PRECISION) AS sv_3, CAST(-1.522973742849254 AS DOUBLE PRECISION) AS sv_4, CAST(-0.197900614337308 AS DOUBLE PRECISION) AS sv_5, CAST(0.428373460536979 AS DOUBLE PRECISION) AS sv_6, CAST(0.497657203090964 AS DOUBLE PRECISION) AS sv_7, CAST(-0.07876276855823 AS DOUBLE PRECISION) AS sv_8, CAST(-1.562565935253375 AS DOUBLE PRECISION) AS sv_9, CAST(1.132395167677456 AS DOUBLE PRECISION) AS sv_10, CAST(0.019412209686126 AS DOUBLE PRECISION) AS sv_11, CAST(0.840179562577592 AS DOUBLE PRECISION) AS sv_12, CAST(1.511268564663181 AS DOUBLE PRECISION) AS sv_13, CAST(-0.644816038918858 AS DOUBLE PRECISION) AS sv_14, CAST(1.402397937690864 AS DOUBLE PRECISION) AS sv_15, CAST(0.924414558222419 AS DOUBLE PRECISION) AS sv_16, CAST(0.429987580812585 AS DOUBLE PRECISION) AS sv_17, CAST(0.093187180795137 AS DOUBLE PRECISION) AS sv_18, CAST(0.546060321661136 AS DOUBLE PRECISION) AS sv_19, CAST(1.119835040694124 AS DOUBLE PRECISION) AS sv_20, CAST(-0.235613940764964 AS DOUBLE PRECISION) AS sv_21, CAST(0.973040286708522 AS DOUBLE PRECISION) AS sv_22, CAST(1.139105033898105 AS DOUBLE PRECISION) AS sv_23, CAST(-1.785297028047398 AS DOUBLE PRECISION) AS sv_24, CAST(-0.259399852106648 AS DOUBLE PRECISION) AS sv_25, CAST(-0.001440252886365 AS DOUBLE PRECISION) AS sv_26, CAST(-0.200033121308935 AS DOUBLE PRECISION) AS sv_27, CAST(-0.868098126840544 AS DOUBLE PRECISION) AS sv_28, CAST(-1.176573505354397 AS DOUBLE PRECISION) AS sv_29 
FROM dummy_cte UNION ALL SELECT 4 AS sv_idx, CAST(0.024407560658559 AS DOUBLE PRECISION) AS dual_coeff, CAST(-0.784766467617214 AS DOUBLE PRECISION) AS sv_0, CAST(3.2227168652889 AS DOUBLE PRECISION) AS sv_1, CAST(-0.834195447572686 AS DOUBLE PRECISION) AS sv_2, CAST(-0.771855386399394 AS DOUBLE PRECISION) AS sv_3, CAST(-1.207918226777562 AS DOUBLE PRECISION) AS sv_4, CAST(-1.255050427206458 AS DOUBLE PRECISION) AS sv_5, CAST(-1.034517955988656 AS DOUBLE PRECISION) AS sv_6, CAST(-1.064897480524229 AS DOUBLE PRECISION) AS sv_7, CAST(0.236793195216728 AS DOUBLE PRECISION) AS sv_8, CAST(-0.771705124612575 AS DOUBLE PRECISION) AS sv_9, CAST(-0.665548930911625 AS DOUBLE PRECISION) AS sv_10, CAST(0.722395660835516 AS DOUBLE PRECISION) AS sv_11, CAST(-0.689940523944073 AS DOUBLE PRECISION) AS sv_12, CAST(-0.653269746871515 AS DOUBLE PRECISION) AS sv_13, CAST(-1.187788757648352 AS DOUBLE PRECISION) AS sv_14, CAST(-0.951573210421028 AS DOUBLE PRECISION) AS sv_15, CAST(-1.007845233978056 AS DOUBLE PRECISION) AS sv_16, CAST(-1.190290846717896 AS DOUBLE PRECISION) AS sv_17, CAST(-0.180174900112543 AS DOUBLE PRECISION) AS sv_18, CAST(-0.602989252606885 AS DOUBLE PRECISION) AS sv_19, CAST(-0.777964420006047 AS DOUBLE PRECISION) AS sv_20, CAST(2.681380918807065 AS DOUBLE PRECISION) AS sv_21, CAST(-0.819802809296342 AS DOUBLE PRECISION) AS sv_22, CAST(-0.741772971249469 AS DOUBLE PRECISION) AS sv_23, CAST(-1.264211179347008 AS DOUBLE PRECISION) AS sv_24, CAST(-1.197680638110198 AS DOUBLE PRECISION) AS sv_25, CAST(-1.20158151478034 AS DOUBLE PRECISION) AS sv_26, CAST(-1.188552153082114 AS DOUBLE PRECISION) AS sv_27, CAST(0.11532546806702 AS DOUBLE PRECISION) AS sv_28, CAST(-0.686099894531215 AS DOUBLE PRECISION) AS sv_29 
FROM dummy_cte UNION ALL SELECT 5 AS sv_idx, CAST(0.101543793132407 AS DOUBLE PRECISION) AS dual_coeff, CAST(0.348018180404261 AS DOUBLE PRECISION) AS sv_0, CAST(-0.957588320497056 AS DOUBLE PRECISION) AS sv_1, CAST(0.337495525980012 AS DOUBLE PRECISION) AS sv_2, CAST(0.222919005193918 AS DOUBLE PRECISION) AS sv_3, CAST(0.47905385194373 AS DOUBLE PRECISION) AS sv_4, CAST(0.129173360915025 AS DOUBLE PRECISION) AS sv_5, CAST(0.075195171470429 AS DOUBLE PRECISION) AS sv_6, CAST(0.422794808324217 AS DOUBLE PRECISION) AS sv_7, CAST(-0.272303759673537 AS DOUBLE PRECISION) AS sv_8, CAST(-0.361689171554945 AS DOUBLE PRECISION) AS sv_9, CAST(-0.592724127500425 AS DOUBLE PRECISION) AS sv_10, CAST(-1.143182644027602 AS DOUBLE PRECISION) AS sv_11, CAST(-0.347926434466506 AS DOUBLE PRECISION) AS sv_12, CAST(-0.449255791071693 AS DOUBLE PRECISION) AS sv_13, CAST(-0.563207842081632 AS DOUBLE PRECISION) AS sv_14, CAST(-0.127400201557097 AS DOUBLE PRECISION) AS sv_15, CAST(-0.075818753357764 AS DOUBLE PRECISION) AS sv_16, CAST(0.502026091790712 AS DOUBLE PRECISION) AS sv_17, CAST(-0.743984191984633 AS DOUBLE PRECISION) AS sv_18, CAST(-0.605744767173475 AS DOUBLE PRECISION) AS sv_19, CAST(0.117078839162006 AS DOUBLE PRECISION) AS sv_20, CAST(-1.063917516228918 AS DOUBLE PRECISION) AS sv_21, CAST(0.247551074941848 AS DOUBLE PRECISION) AS sv_22, CAST(-0.006414511965779 AS DOUBLE PRECISION) AS sv_23, CAST(0.143431992142274 AS DOUBLE PRECISION) AS sv_24, CAST(0.308942844476122 AS DOUBLE PRECISION) AS sv_25, CAST(0.294530673110413 AS DOUBLE PRECISION) AS sv_26, CAST(0.889273576756055 AS DOUBLE PRECISION) AS sv_27, CAST(-0.283850160862249 AS DOUBLE PRECISION) AS sv_28, CAST(-0.439880832222114 AS DOUBLE PRECISION) AS sv_29 
FROM dummy_cte UNION ALL SELECT 6 AS sv_idx, CAST(0.118832906226988 AS DOUBLE PRECISION) AS dual_coeff, CAST(0.400787651585386 AS DOUBLE PRECISION) AS sv_0, CAST(0.725304266373296 AS DOUBLE PRECISION) AS sv_1, CAST(0.459820467998887 AS DOUBLE PRECISION) AS sv_2, CAST(0.289682387180047 AS DOUBLE PRECISION) AS sv_3, CAST(-0.674095555291782 AS DOUBLE PRECISION) AS sv_4, CAST(0.773726028982443 AS DOUBLE PRECISION) AS sv_5, CAST(0.325600383891581 AS DOUBLE PRECISION) AS sv_6, CAST(-0.123761537208616 AS DOUBLE PRECISION) AS sv_7, CAST(-1.408305229263384 AS DOUBLE PRECISION) AS sv_8, CAST(-0.254728488148609 AS DOUBLE PRECISION) AS sv_9, CAST(-0.659007780904631 AS DOUBLE PRECISION) AS sv_10, CAST(-0.385522702233259 AS DOUBLE PRECISION) AS sv_11, CAST(-0.29155644190602 AS DOUBLE PRECISION) AS sv_12, CAST(-0.508256342748994 AS DOUBLE PRECISION) AS sv_13, CAST(-1.242039661227644 AS DOUBLE PRECISION) AS sv_14, CAST(1.067260432693895 AS DOUBLE PRECISION) AS sv_15, CAST(1.080659281126133 AS DOUBLE PRECISION) AS sv_16, CAST(0.668155719148433 AS DOUBLE PRECISION) AS sv_17, CAST(-0.519436768381896 AS DOUBLE PRECISION) AS sv_18, CAST(0.256731292169188 AS DOUBLE PRECISION) AS sv_19, CAST(0.022188866126998 AS DOUBLE PRECISION) AS sv_20, CAST(0.20330156210975 AS DOUBLE PRECISION) AS sv_21, CAST(0.15199883729453 AS DOUBLE PRECISION) AS sv_22, CAST(-0.089390770547114 AS DOUBLE PRECISION) AS sv_23, CAST(-1.14594425464197 AS DOUBLE PRECISION) AS sv_24, CAST(0.629923952908878 AS DOUBLE PRECISION) AS sv_25, CAST(0.585811918941748 AS DOUBLE PRECISION) AS sv_26, CAST(0.098970288690105 AS DOUBLE PRECISION) AS sv_27, CAST(-1.06950037598213 AS DOUBLE PRECISION) AS sv_28, CAST(-0.229677856155036 AS DOUBLE PRECISION) AS sv_29 
FROM dummy_cte UNION ALL SELECT 7 AS sv_idx, CAST(0.174027656446104 AS DOUBLE PRECISION) AS dual_coeff, CAST(-0.345020874441175 AS DOUBLE PRECISION) AS sv_0, CAST(-0.190189300884175 AS DOUBLE PRECISION) AS sv_1, CAST(-0.313556231541936 AS DOUBLE PRECISION) AS sv_2, CAST(-0.398373173053464 AS DOUBLE PRECISION) AS sv_3, CAST(0.475202317517426 AS DOUBLE PRECISION) AS sv_4, CAST(0.206352806605946 AS DOUBLE PRECISION) AS sv_5, CAST(0.008253789114913 AS DOUBLE PRECISION) AS sv_6, CAST(-0.09789444958596 AS DOUBLE PRECISION) AS sv_7, CAST(0.573386223243349 AS DOUBLE PRECISION) AS sv_8, CAST(0.111530821697336 AS DOUBLE PRECISION) AS sv_9, CAST(0.085375089891285 AS DOUBLE PRECISION) AS sv_10, CAST(-0.517075160927882 AS DOUBLE PRECISION) AS sv_11, CAST(-0.143585211434743 AS DOUBLE PRECISION) AS sv_12, CAST(-0.126174456886958 AS DOUBLE PRECISION) AS sv_13, CAST(0.015004779827573 AS DOUBLE PRECISION) AS sv_14, CAST(-0.324299862027158 AS DOUBLE PRECISION) AS sv_15, CAST(-0.213701382757836 AS DOUBLE PRECISION) AS sv_16, CAST(-0.168373112413897 AS DOUBLE PRECISION) AS sv_17, CAST(-0.343704002084102 AS DOUBLE PRECISION) AS sv_18, CAST(-0.119855698598109 AS DOUBLE PRECISION) AS sv_19, CAST(-0.108605421029365 AS DOUBLE PRECISION) AS sv_20, CAST(-0.245860995306786 AS DOUBLE PRECISION) AS sv_21, CAST(-0.196589881529945 AS DOUBLE PRECISION) AS sv_22, CAST(-0.227518913574726 AS DOUBLE PRECISION) AS sv_23, CAST(0.632505740922505 AS DOUBLE PRECISION) AS sv_24, CAST(0.046121157066732 AS DOUBLE PRECISION) AS sv_25, CAST(0.069426025169202 AS DOUBLE PRECISION) AS sv_26, CAST(-0.045012091726768 AS DOUBLE PRECISION) AS sv_27, CAST(0.302212239792996 AS DOUBLE PRECISION) AS sv_28, CAST(0.258831240873126 AS DOUBLE PRECISION) AS sv_29 
FROM dummy_cte) AS "Values"), 
kernel_dp AS 
(SELECT t."KEY" AS "KEY", t.dot_product AS dot_product 
FROM (SELECT full_join_data_sv."KEY" AS "KEY", sum(CAST(full_join_data_sv.dot_prod1 AS DOUBLE PRECISION)) + CAST(0.693248331739582 AS DOUBLE PRECISION) AS dot_product 
FROM (SELECT kernel_input."KEY" AS "KEY", "SV_data".dual_coeff * (kernel_input.scaler_2 * "SV_data".sv_0 + kernel_input.scaler_3 * "SV_data".sv_1 + kernel_input.scaler_4 * "SV_data".sv_2 + kernel_input.scaler_5 * "SV_data".sv_3 + kernel_input.scaler_6 * "SV_data".sv_4 + kernel_input.scaler_7 * "SV_data".sv_5 + kernel_input.scaler_8 * "SV_data".sv_6 + kernel_input.scaler_9 * "SV_data".sv_7 + kernel_input.scaler_10 * "SV_data".sv_8 + kernel_input.scaler_11 * "SV_data".sv_9 + kernel_input.scaler_12 * "SV_data".sv_10 + kernel_input.scaler_13 * "SV_data".sv_11 + kernel_input.scaler_14 * "SV_data".sv_12 + kernel_input.scaler_15 * "SV_data".sv_13 + kernel_input.scaler_16 * "SV_data".sv_14 + kernel_input.scaler_17 * "SV_data".sv_15 + kernel_input.scaler_18 * "SV_data".sv_16 + kernel_input.scaler_19 * "SV_data".sv_17 + kernel_input.scaler_20 * "SV_data".sv_18 + kernel_input.scaler_21 * "SV_data".sv_19 + kernel_input.scaler_22 * "SV_data".sv_20 + kernel_input.scaler_23 * "SV_data".sv_21 + kernel_input.scaler_24 * "SV_data".sv_22 + kernel_input.scaler_25 * "SV_data".sv_23 + kernel_input.scaler_26 * "SV_data".sv_24 + kernel_input.scaler_27 * "SV_data".sv_25 + kernel_input.scaler_28 * "SV_data".sv_26 + kernel_input.scaler_29 * "SV_data".sv_27 + kernel_input.scaler_30 * "SV_data".sv_28 + kernel_input.scaler_31 * "SV_data".sv_29) AS dot_prod1 
FROM kernel_input, "SV_data") AS full_join_data_sv GROUP BY full_join_data_sv."KEY") AS t)
 SELECT kernel_dp."KEY" AS "KEY", -kernel_dp.dot_product AS "Score_0", kernel_dp.dot_product AS "Score_1", CAST(1.0 AS DOUBLE PRECISION) - CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_0", CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION)))) AS "Proba_1", CASE WHEN (CAST(1.0 AS DOUBLE PRECISION) - CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION)))) IS NULL OR CAST(1.0 AS DOUBLE PRECISION) - CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION)))) > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(CAST(1.0 AS DOUBLE PRECISION) - CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION))))) ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION)))) IS NULL OR CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION)))) > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION))))) ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (kernel_dp.dot_product > CAST(0.0 AS DOUBLE PRECISION)) THEN 1 ELSE 0 END AS "Decision", greatest(CAST(1.0 AS DOUBLE PRECISION) - CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION)))), CAST(1.0 AS DOUBLE PRECISION) / (CAST(1.0 AS DOUBLE PRECISION) + exp(least(greatest(-CAST(100.0 AS DOUBLE PRECISION), -(-(kernel_dp.dot_product * CAST(-1.700050133484974 AS DOUBLE PRECISION) + CAST(0.062506177338873 AS DOUBLE PRECISION)))), CAST(100.0 AS DOUBLE PRECISION))))) AS "DecisionProba" 
FROM kernel_dp