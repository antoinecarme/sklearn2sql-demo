-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : GradientBoostingClassifier_Pipeline
-- Dataset : BinaryClass_100
-- Database : oracle


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table 20180602_12O_ADS_IMP_1_OUT part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "20180602_12O_ADS_IMP_1_OUT" (
	"KEY" NUMBER(19), 
	impter_2 BINARY_DOUBLE, 
	impter_3 BINARY_DOUBLE, 
	impter_4 BINARY_DOUBLE, 
	impter_5 BINARY_DOUBLE, 
	impter_6 BINARY_DOUBLE, 
	impter_7 BINARY_DOUBLE, 
	impter_8 BINARY_DOUBLE, 
	impter_9 BINARY_DOUBLE, 
	impter_10 BINARY_DOUBLE, 
	impter_11 BINARY_DOUBLE, 
	impter_12 BINARY_DOUBLE, 
	impter_13 BINARY_DOUBLE, 
	impter_14 BINARY_DOUBLE, 
	impter_15 BINARY_DOUBLE, 
	impter_16 BINARY_DOUBLE, 
	impter_17 BINARY_DOUBLE, 
	impter_18 BINARY_DOUBLE, 
	impter_19 BINARY_DOUBLE, 
	impter_20 BINARY_DOUBLE, 
	impter_21 BINARY_DOUBLE, 
	impter_22 BINARY_DOUBLE, 
	impter_23 BINARY_DOUBLE, 
	impter_24 BINARY_DOUBLE, 
	impter_25 BINARY_DOUBLE, 
	impter_26 BINARY_DOUBLE, 
	impter_27 BINARY_DOUBLE, 
	impter_28 BINARY_DOUBLE, 
	impter_29 BINARY_DOUBLE, 
	impter_30 BINARY_DOUBLE, 
	impter_31 BINARY_DOUBLE, 
	impter_32 BINARY_DOUBLE, 
	impter_33 BINARY_DOUBLE, 
	impter_34 BINARY_DOUBLE, 
	impter_35 BINARY_DOUBLE, 
	impter_36 BINARY_DOUBLE, 
	impter_37 BINARY_DOUBLE, 
	impter_38 BINARY_DOUBLE, 
	impter_39 BINARY_DOUBLE, 
	impter_40 BINARY_DOUBLE, 
	impter_41 BINARY_DOUBLE, 
	impter_42 BINARY_DOUBLE, 
	impter_43 BINARY_DOUBLE, 
	impter_44 BINARY_DOUBLE, 
	impter_45 BINARY_DOUBLE, 
	impter_46 BINARY_DOUBLE, 
	impter_47 BINARY_DOUBLE, 
	impter_48 BINARY_DOUBLE, 
	impter_49 BINARY_DOUBLE, 
	impter_50 BINARY_DOUBLE, 
	impter_51 BINARY_DOUBLE, 
	impter_52 BINARY_DOUBLE, 
	impter_53 BINARY_DOUBLE, 
	impter_54 BINARY_DOUBLE, 
	impter_55 BINARY_DOUBLE, 
	impter_56 BINARY_DOUBLE, 
	impter_57 BINARY_DOUBLE, 
	impter_58 BINARY_DOUBLE, 
	impter_59 BINARY_DOUBLE, 
	impter_60 BINARY_DOUBLE, 
	impter_61 BINARY_DOUBLE, 
	impter_62 BINARY_DOUBLE, 
	impter_63 BINARY_DOUBLE, 
	impter_64 BINARY_DOUBLE, 
	impter_65 BINARY_DOUBLE, 
	impter_66 BINARY_DOUBLE, 
	impter_67 BINARY_DOUBLE, 
	impter_68 BINARY_DOUBLE, 
	impter_69 BINARY_DOUBLE, 
	impter_70 BINARY_DOUBLE, 
	impter_71 BINARY_DOUBLE, 
	impter_72 BINARY_DOUBLE, 
	impter_73 BINARY_DOUBLE, 
	impter_74 BINARY_DOUBLE, 
	impter_75 BINARY_DOUBLE, 
	impter_76 BINARY_DOUBLE, 
	impter_77 BINARY_DOUBLE, 
	impter_78 BINARY_DOUBLE, 
	impter_79 BINARY_DOUBLE, 
	impter_80 BINARY_DOUBLE, 
	impter_81 BINARY_DOUBLE, 
	impter_82 BINARY_DOUBLE, 
	impter_83 BINARY_DOUBLE, 
	impter_84 BINARY_DOUBLE, 
	impter_85 BINARY_DOUBLE, 
	impter_86 BINARY_DOUBLE, 
	impter_87 BINARY_DOUBLE, 
	impter_88 BINARY_DOUBLE, 
	impter_89 BINARY_DOUBLE, 
	impter_90 BINARY_DOUBLE, 
	impter_91 BINARY_DOUBLE, 
	impter_92 BINARY_DOUBLE, 
	impter_93 BINARY_DOUBLE, 
	impter_94 BINARY_DOUBLE, 
	impter_95 BINARY_DOUBLE, 
	impter_96 BINARY_DOUBLE, 
	impter_97 BINARY_DOUBLE, 
	impter_98 BINARY_DOUBLE, 
	impter_99 BINARY_DOUBLE, 
	impter_100 BINARY_DOUBLE, 
	impter_101 BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table 20180602_12O_ADS_IMP_1_OUT part 2. Populate

INSERT INTO "20180602_12O_ADS_IMP_1_OUT" ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11, impter_12, impter_13, impter_14, impter_15, impter_16, impter_17, impter_18, impter_19, impter_20, impter_21, impter_22, impter_23, impter_24, impter_25, impter_26, impter_27, impter_28, impter_29, impter_30, impter_31, impter_32, impter_33, impter_34, impter_35, impter_36, impter_37, impter_38, impter_39, impter_40, impter_41, impter_42, impter_43, impter_44, impter_45, impter_46, impter_47, impter_48, impter_49, impter_50, impter_51, impter_52, impter_53, impter_54, impter_55, impter_56, impter_57, impter_58, impter_59, impter_60, impter_61, impter_62, impter_63, impter_64, impter_65, impter_66, impter_67, impter_68, impter_69, impter_70, impter_71, impter_72, impter_73, impter_74, impter_75, impter_76, impter_77, impter_78, impter_79, impter_80, impter_81, impter_82, impter_83, impter_84, impter_85, impter_86, impter_87, impter_88, impter_89, impter_90, impter_91, impter_92, impter_93, impter_94, impter_95, impter_96, impter_97, impter_98, impter_99, impter_100, impter_101) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11, "U".impter_12, "U".impter_13, "U".impter_14, "U".impter_15, "U".impter_16, "U".impter_17, "U".impter_18, "U".impter_19, "U".impter_20, "U".impter_21, "U".impter_22, "U".impter_23, "U".impter_24, "U".impter_25, "U".impter_26, "U".impter_27, "U".impter_28, "U".impter_29, "U".impter_30, "U".impter_31, "U".impter_32, "U".impter_33, "U".impter_34, "U".impter_35, "U".impter_36, "U".impter_37, "U".impter_38, "U".impter_39, "U".impter_40, "U".impter_41, "U".impter_42, "U".impter_43, "U".impter_44, "U".impter_45, "U".impter_46, "U".impter_47, "U".impter_48, "U".impter_49, "U".impter_50, "U".impter_51, "U".impter_52, "U".impter_53, "U".impter_54, "U".impter_55, "U".impter_56, "U".impter_57, "U".impter_58, "U".impter_59, "U".impter_60, "U".impter_61, "U".impter_62, "U".impter_63, "U".impter_64, "U".impter_65, "U".impter_66, "U".impter_67, "U".impter_68, "U".impter_69, "U".impter_70, "U".impter_71, "U".impter_72, "U".impter_73, "U".impter_74, "U".impter_75, "U".impter_76, "U".impter_77, "U".impter_78, "U".impter_79, "U".impter_80, "U".impter_81, "U".impter_82, "U".impter_83, "U".impter_84, "U".impter_85, "U".impter_86, "U".impter_87, "U".impter_88, "U".impter_89, "U".impter_90, "U".impter_91, "U".impter_92, "U".impter_93, "U".impter_94, "U".impter_95, "U".impter_96, "U".impter_97, "U".impter_98, "U".impter_99, "U".impter_100, "U".impter_101 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11, "ADS_imp_1_OUT".impter_12, "ADS_imp_1_OUT".impter_13, "ADS_imp_1_OUT".impter_14, "ADS_imp_1_OUT".impter_15, "ADS_imp_1_OUT".impter_16, "ADS_imp_1_OUT".impter_17, "ADS_imp_1_OUT".impter_18, "ADS_imp_1_OUT".impter_19, "ADS_imp_1_OUT".impter_20, "ADS_imp_1_OUT".impter_21, "ADS_imp_1_OUT".impter_22, "ADS_imp_1_OUT".impter_23, "ADS_imp_1_OUT".impter_24, "ADS_imp_1_OUT".impter_25, "ADS_imp_1_OUT".impter_26, "ADS_imp_1_OUT".impter_27, "ADS_imp_1_OUT".impter_28, "ADS_imp_1_OUT".impter_29, "ADS_imp_1_OUT".impter_30, "ADS_imp_1_OUT".impter_31, "ADS_imp_1_OUT".impter_32, "ADS_imp_1_OUT".impter_33, "ADS_imp_1_OUT".impter_34, "ADS_imp_1_OUT".impter_35, "ADS_imp_1_OUT".impter_36, "ADS_imp_1_OUT".impter_37, "ADS_imp_1_OUT".impter_38, "ADS_imp_1_OUT".impter_39, "ADS_imp_1_OUT".impter_40, "ADS_imp_1_OUT".impter_41, "ADS_imp_1_OUT".impter_42, "ADS_imp_1_OUT".impter_43, "ADS_imp_1_OUT".impter_44, "ADS_imp_1_OUT".impter_45, "ADS_imp_1_OUT".impter_46, "ADS_imp_1_OUT".impter_47, "ADS_imp_1_OUT".impter_48, "ADS_imp_1_OUT".impter_49, "ADS_imp_1_OUT".impter_50, "ADS_imp_1_OUT".impter_51, "ADS_imp_1_OUT".impter_52, "ADS_imp_1_OUT".impter_53, "ADS_imp_1_OUT".impter_54, "ADS_imp_1_OUT".impter_55, "ADS_imp_1_OUT".impter_56, "ADS_imp_1_OUT".impter_57, "ADS_imp_1_OUT".impter_58, "ADS_imp_1_OUT".impter_59, "ADS_imp_1_OUT".impter_60, "ADS_imp_1_OUT".impter_61, "ADS_imp_1_OUT".impter_62, "ADS_imp_1_OUT".impter_63, "ADS_imp_1_OUT".impter_64, "ADS_imp_1_OUT".impter_65, "ADS_imp_1_OUT".impter_66, "ADS_imp_1_OUT".impter_67, "ADS_imp_1_OUT".impter_68, "ADS_imp_1_OUT".impter_69, "ADS_imp_1_OUT".impter_70, "ADS_imp_1_OUT".impter_71, "ADS_imp_1_OUT".impter_72, "ADS_imp_1_OUT".impter_73, "ADS_imp_1_OUT".impter_74, "ADS_imp_1_OUT".impter_75, "ADS_imp_1_OUT".impter_76, "ADS_imp_1_OUT".impter_77, "ADS_imp_1_OUT".impter_78, "ADS_imp_1_OUT".impter_79, "ADS_imp_1_OUT".impter_80, "ADS_imp_1_OUT".impter_81, "ADS_imp_1_OUT".impter_82, "ADS_imp_1_OUT".impter_83, "ADS_imp_1_OUT".impter_84, "ADS_imp_1_OUT".impter_85, "ADS_imp_1_OUT".impter_86, "ADS_imp_1_OUT".impter_87, "ADS_imp_1_OUT".impter_88, "ADS_imp_1_OUT".impter_89, "ADS_imp_1_OUT".impter_90, "ADS_imp_1_OUT".impter_91, "ADS_imp_1_OUT".impter_92, "ADS_imp_1_OUT".impter_93, "ADS_imp_1_OUT".impter_94, "ADS_imp_1_OUT".impter_95, "ADS_imp_1_OUT".impter_96, "ADS_imp_1_OUT".impter_97, "ADS_imp_1_OUT".impter_98, "ADS_imp_1_OUT".impter_99, "ADS_imp_1_OUT".impter_100, "ADS_imp_1_OUT".impter_101 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.14903440845324958 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.03367636493032261 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.11933316355610842 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.17369203130189262 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.06534355492106358 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.2436228993764152 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.11367357911147091 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.21176443876708548 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.11513979914587343 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.029111924938589835 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.1107718926861467 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.0014580375424568769 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.0773739291867229 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.1139572875884789 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.12567631285043362 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.05799597833985687 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.14181264174476002 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN -0.1265454286904762 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.07812248683518369 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.07648737683022465 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN 0.05864262427869482 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN 0.10844037074552852 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 0.060065969333441514 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 0.15255771271935042 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN -0.047123256877991036 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN -0.05696296914089203 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN 0.09614684099943512 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 0.10433833409752227 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 0.03257716191960926 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 0.06142905749366723 ELSE "ADS"."Feature_29" END AS impter_31, CASE WHEN ("ADS"."Feature_30" IS NULL) THEN -0.014540423460679405 ELSE "ADS"."Feature_30" END AS impter_32, CASE WHEN ("ADS"."Feature_31" IS NULL) THEN -0.1123380099941879 ELSE "ADS"."Feature_31" END AS impter_33, CASE WHEN ("ADS"."Feature_32" IS NULL) THEN 0.1189128446049145 ELSE "ADS"."Feature_32" END AS impter_34, CASE WHEN ("ADS"."Feature_33" IS NULL) THEN 0.2286864930078044 ELSE "ADS"."Feature_33" END AS impter_35, CASE WHEN ("ADS"."Feature_34" IS NULL) THEN 0.23566181549921908 ELSE "ADS"."Feature_34" END AS impter_36, CASE WHEN ("ADS"."Feature_35" IS NULL) THEN 0.07316970399964386 ELSE "ADS"."Feature_35" END AS impter_37, CASE WHEN ("ADS"."Feature_36" IS NULL) THEN -0.03319409827469623 ELSE "ADS"."Feature_36" END AS impter_38, CASE WHEN ("ADS"."Feature_37" IS NULL) THEN 0.2734938774177451 ELSE "ADS"."Feature_37" END AS impter_39, CASE WHEN ("ADS"."Feature_38" IS NULL) THEN -0.023289567742236165 ELSE "ADS"."Feature_38" END AS impter_40, CASE WHEN ("ADS"."Feature_39" IS NULL) THEN 0.030288379260645946 ELSE "ADS"."Feature_39" END AS impter_41, CASE WHEN ("ADS"."Feature_40" IS NULL) THEN -0.10736826233135917 ELSE "ADS"."Feature_40" END AS impter_42, CASE WHEN ("ADS"."Feature_41" IS NULL) THEN 0.026402950097887946 ELSE "ADS"."Feature_41" END AS impter_43, CASE WHEN ("ADS"."Feature_42" IS NULL) THEN -0.09677146654911453 ELSE "ADS"."Feature_42" END AS impter_44, CASE WHEN ("ADS"."Feature_43" IS NULL) THEN 0.005974248342970334 ELSE "ADS"."Feature_43" END AS impter_45, CASE WHEN ("ADS"."Feature_44" IS NULL) THEN 0.036917268127071114 ELSE "ADS"."Feature_44" END AS impter_46, CASE WHEN ("ADS"."Feature_45" IS NULL) THEN -0.14525717382374131 ELSE "ADS"."Feature_45" END AS impter_47, CASE WHEN ("ADS"."Feature_46" IS NULL) THEN -0.16675269881177787 ELSE "ADS"."Feature_46" END AS impter_48, CASE WHEN ("ADS"."Feature_47" IS NULL) THEN 0.25084465695652713 ELSE "ADS"."Feature_47" END AS impter_49, CASE WHEN ("ADS"."Feature_48" IS NULL) THEN 0.14623398322257627 ELSE "ADS"."Feature_48" END AS impter_50, CASE WHEN ("ADS"."Feature_49" IS NULL) THEN 0.10185431133406106 ELSE "ADS"."Feature_49" END AS impter_51, CASE WHEN ("ADS"."Feature_50" IS NULL) THEN -0.13292560945085755 ELSE "ADS"."Feature_50" END AS impter_52, CASE WHEN ("ADS"."Feature_51" IS NULL) THEN -0.042191791365440365 ELSE "ADS"."Feature_51" END AS impter_53, CASE WHEN ("ADS"."Feature_52" IS NULL) THEN 0.15214028404681929 ELSE "ADS"."Feature_52" END AS impter_54, CASE WHEN ("ADS"."Feature_53" IS NULL) THEN -0.15821372314298002 ELSE "ADS"."Feature_53" END AS impter_55, CASE WHEN ("ADS"."Feature_54" IS NULL) THEN 0.17926260535776073 ELSE "ADS"."Feature_54" END AS impter_56, CASE WHEN ("ADS"."Feature_55" IS NULL) THEN 0.05077533210437681 ELSE "ADS"."Feature_55" END AS impter_57, CASE WHEN ("ADS"."Feature_56" IS NULL) THEN -0.011884551362322174 ELSE "ADS"."Feature_56" END AS impter_58, CASE WHEN ("ADS"."Feature_57" IS NULL) THEN -0.04948745069141103 ELSE "ADS"."Feature_57" END AS impter_59, CASE WHEN ("ADS"."Feature_58" IS NULL) THEN -0.13256733552482858 ELSE "ADS"."Feature_58" END AS impter_60, CASE WHEN ("ADS"."Feature_59" IS NULL) THEN 0.11866238202513515 ELSE "ADS"."Feature_59" END AS impter_61, CASE WHEN ("ADS"."Feature_60" IS NULL) THEN -0.06590828520229039 ELSE "ADS"."Feature_60" END AS impter_62, CASE WHEN ("ADS"."Feature_61" IS NULL) THEN 0.1554857338869047 ELSE "ADS"."Feature_61" END AS impter_63, CASE WHEN ("ADS"."Feature_62" IS NULL) THEN -0.006608301490984002 ELSE "ADS"."Feature_62" END AS impter_64, CASE WHEN ("ADS"."Feature_63" IS NULL) THEN -0.01827580148493827 ELSE "ADS"."Feature_63" END AS impter_65, CASE WHEN ("ADS"."Feature_64" IS NULL) THEN -0.027366317428668574 ELSE "ADS"."Feature_64" END AS impter_66, CASE WHEN ("ADS"."Feature_65" IS NULL) THEN 0.01436625003668961 ELSE "ADS"."Feature_65" END AS impter_67, CASE WHEN ("ADS"."Feature_66" IS NULL) THEN 0.054075300089557875 ELSE "ADS"."Feature_66" END AS impter_68, CASE WHEN ("ADS"."Feature_67" IS NULL) THEN -0.23085273383923544 ELSE "ADS"."Feature_67" END AS impter_69, CASE WHEN ("ADS"."Feature_68" IS NULL) THEN -0.24396528808375115 ELSE "ADS"."Feature_68" END AS impter_70, CASE WHEN ("ADS"."Feature_69" IS NULL) THEN 0.06545065787659607 ELSE "ADS"."Feature_69" END AS impter_71, CASE WHEN ("ADS"."Feature_70" IS NULL) THEN 0.04266518302023082 ELSE "ADS"."Feature_70" END AS impter_72, CASE WHEN ("ADS"."Feature_71" IS NULL) THEN -0.1540451820349279 ELSE "ADS"."Feature_71" END AS impter_73, CASE WHEN ("ADS"."Feature_72" IS NULL) THEN -0.2222352564572451 ELSE "ADS"."Feature_72" END AS impter_74, CASE WHEN ("ADS"."Feature_73" IS NULL) THEN 0.0685606372972674 ELSE "ADS"."Feature_73" END AS impter_75, CASE WHEN ("ADS"."Feature_74" IS NULL) THEN -0.09639592085393558 ELSE "ADS"."Feature_74" END AS impter_76, CASE WHEN ("ADS"."Feature_75" IS NULL) THEN 0.20747518927524572 ELSE "ADS"."Feature_75" END AS impter_77, CASE WHEN ("ADS"."Feature_76" IS NULL) THEN -0.13945256367132464 ELSE "ADS"."Feature_76" END AS impter_78, CASE WHEN ("ADS"."Feature_77" IS NULL) THEN 0.021954208773706758 ELSE "ADS"."Feature_77" END AS impter_79, CASE WHEN ("ADS"."Feature_78" IS NULL) THEN 0.07033517037026028 ELSE "ADS"."Feature_78" END AS impter_80, CASE WHEN ("ADS"."Feature_79" IS NULL) THEN 0.12062472190694748 ELSE "ADS"."Feature_79" END AS impter_81, CASE WHEN ("ADS"."Feature_80" IS NULL) THEN -0.03376594744247921 ELSE "ADS"."Feature_80" END AS impter_82, CASE WHEN ("ADS"."Feature_81" IS NULL) THEN -0.11063521313283846 ELSE "ADS"."Feature_81" END AS impter_83, CASE WHEN ("ADS"."Feature_82" IS NULL) THEN 0.040264280436689885 ELSE "ADS"."Feature_82" END AS impter_84, CASE WHEN ("ADS"."Feature_83" IS NULL) THEN 0.047619698634703535 ELSE "ADS"."Feature_83" END AS impter_85, CASE WHEN ("ADS"."Feature_84" IS NULL) THEN 0.10294542896565007 ELSE "ADS"."Feature_84" END AS impter_86, CASE WHEN ("ADS"."Feature_85" IS NULL) THEN 0.03543139086541035 ELSE "ADS"."Feature_85" END AS impter_87, CASE WHEN ("ADS"."Feature_86" IS NULL) THEN 0.15812674995414752 ELSE "ADS"."Feature_86" END AS impter_88, CASE WHEN ("ADS"."Feature_87" IS NULL) THEN -0.09370679202503561 ELSE "ADS"."Feature_87" END AS impter_89, CASE WHEN ("ADS"."Feature_88" IS NULL) THEN -0.05352174133125283 ELSE "ADS"."Feature_88" END AS impter_90, CASE WHEN ("ADS"."Feature_89" IS NULL) THEN -0.05671142135749989 ELSE "ADS"."Feature_89" END AS impter_91, CASE WHEN ("ADS"."Feature_90" IS NULL) THEN 0.1683501919918398 ELSE "ADS"."Feature_90" END AS impter_92, CASE WHEN ("ADS"."Feature_91" IS NULL) THEN -0.08014687785959375 ELSE "ADS"."Feature_91" END AS impter_93, CASE WHEN ("ADS"."Feature_92" IS NULL) THEN 0.06732751721128641 ELSE "ADS"."Feature_92" END AS impter_94, CASE WHEN ("ADS"."Feature_93" IS NULL) THEN -0.00888651681786575 ELSE "ADS"."Feature_93" END AS impter_95, CASE WHEN ("ADS"."Feature_94" IS NULL) THEN 0.026095385517810564 ELSE "ADS"."Feature_94" END AS impter_96, CASE WHEN ("ADS"."Feature_95" IS NULL) THEN 0.04435425200996614 ELSE "ADS"."Feature_95" END AS impter_97, CASE WHEN ("ADS"."Feature_96" IS NULL) THEN 0.026895408070568623 ELSE "ADS"."Feature_96" END AS impter_98, CASE WHEN ("ADS"."Feature_97" IS NULL) THEN 0.18232971539070067 ELSE "ADS"."Feature_97" END AS impter_99, CASE WHEN ("ADS"."Feature_98" IS NULL) THEN -0.12132540363011564 ELSE "ADS"."Feature_98" END AS impter_100, CASE WHEN ("ADS"."Feature_99" IS NULL) THEN 0.004420132524286926 ELSE "ADS"."Feature_99" END AS impter_101 
FROM "BINARYCLASS_100" "ADS") "ADS_imp_1_OUT") "U"

-- Code For temporary table 20180602_RVI_ADS_SCA_2_OUT part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "20180602_RVI_ADS_SCA_2_OUT" (
	"KEY" NUMBER(19), 
	scaler_2 BINARY_DOUBLE, 
	scaler_3 BINARY_DOUBLE, 
	scaler_4 BINARY_DOUBLE, 
	scaler_5 BINARY_DOUBLE, 
	scaler_6 BINARY_DOUBLE, 
	scaler_7 BINARY_DOUBLE, 
	scaler_8 BINARY_DOUBLE, 
	scaler_9 BINARY_DOUBLE, 
	scaler_10 BINARY_DOUBLE, 
	scaler_11 BINARY_DOUBLE, 
	scaler_12 BINARY_DOUBLE, 
	scaler_13 BINARY_DOUBLE, 
	scaler_14 BINARY_DOUBLE, 
	scaler_15 BINARY_DOUBLE, 
	scaler_16 BINARY_DOUBLE, 
	scaler_17 BINARY_DOUBLE, 
	scaler_18 BINARY_DOUBLE, 
	scaler_19 BINARY_DOUBLE, 
	scaler_20 BINARY_DOUBLE, 
	scaler_21 BINARY_DOUBLE, 
	scaler_22 BINARY_DOUBLE, 
	scaler_23 BINARY_DOUBLE, 
	scaler_24 BINARY_DOUBLE, 
	scaler_25 BINARY_DOUBLE, 
	scaler_26 BINARY_DOUBLE, 
	scaler_27 BINARY_DOUBLE, 
	scaler_28 BINARY_DOUBLE, 
	scaler_29 BINARY_DOUBLE, 
	scaler_30 BINARY_DOUBLE, 
	scaler_31 BINARY_DOUBLE, 
	scaler_32 BINARY_DOUBLE, 
	scaler_33 BINARY_DOUBLE, 
	scaler_34 BINARY_DOUBLE, 
	scaler_35 BINARY_DOUBLE, 
	scaler_36 BINARY_DOUBLE, 
	scaler_37 BINARY_DOUBLE, 
	scaler_38 BINARY_DOUBLE, 
	scaler_39 BINARY_DOUBLE, 
	scaler_40 BINARY_DOUBLE, 
	scaler_41 BINARY_DOUBLE, 
	scaler_42 BINARY_DOUBLE, 
	scaler_43 BINARY_DOUBLE, 
	scaler_44 BINARY_DOUBLE, 
	scaler_45 BINARY_DOUBLE, 
	scaler_46 BINARY_DOUBLE, 
	scaler_47 BINARY_DOUBLE, 
	scaler_48 BINARY_DOUBLE, 
	scaler_49 BINARY_DOUBLE, 
	scaler_50 BINARY_DOUBLE, 
	scaler_51 BINARY_DOUBLE, 
	scaler_52 BINARY_DOUBLE, 
	scaler_53 BINARY_DOUBLE, 
	scaler_54 BINARY_DOUBLE, 
	scaler_55 BINARY_DOUBLE, 
	scaler_56 BINARY_DOUBLE, 
	scaler_57 BINARY_DOUBLE, 
	scaler_58 BINARY_DOUBLE, 
	scaler_59 BINARY_DOUBLE, 
	scaler_60 BINARY_DOUBLE, 
	scaler_61 BINARY_DOUBLE, 
	scaler_62 BINARY_DOUBLE, 
	scaler_63 BINARY_DOUBLE, 
	scaler_64 BINARY_DOUBLE, 
	scaler_65 BINARY_DOUBLE, 
	scaler_66 BINARY_DOUBLE, 
	scaler_67 BINARY_DOUBLE, 
	scaler_68 BINARY_DOUBLE, 
	scaler_69 BINARY_DOUBLE, 
	scaler_70 BINARY_DOUBLE, 
	scaler_71 BINARY_DOUBLE, 
	scaler_72 BINARY_DOUBLE, 
	scaler_73 BINARY_DOUBLE, 
	scaler_74 BINARY_DOUBLE, 
	scaler_75 BINARY_DOUBLE, 
	scaler_76 BINARY_DOUBLE, 
	scaler_77 BINARY_DOUBLE, 
	scaler_78 BINARY_DOUBLE, 
	scaler_79 BINARY_DOUBLE, 
	scaler_80 BINARY_DOUBLE, 
	scaler_81 BINARY_DOUBLE, 
	scaler_82 BINARY_DOUBLE, 
	scaler_83 BINARY_DOUBLE, 
	scaler_84 BINARY_DOUBLE, 
	scaler_85 BINARY_DOUBLE, 
	scaler_86 BINARY_DOUBLE, 
	scaler_87 BINARY_DOUBLE, 
	scaler_88 BINARY_DOUBLE, 
	scaler_89 BINARY_DOUBLE, 
	scaler_90 BINARY_DOUBLE, 
	scaler_91 BINARY_DOUBLE, 
	scaler_92 BINARY_DOUBLE, 
	scaler_93 BINARY_DOUBLE, 
	scaler_94 BINARY_DOUBLE, 
	scaler_95 BINARY_DOUBLE, 
	scaler_96 BINARY_DOUBLE, 
	scaler_97 BINARY_DOUBLE, 
	scaler_98 BINARY_DOUBLE, 
	scaler_99 BINARY_DOUBLE, 
	scaler_100 BINARY_DOUBLE, 
	scaler_101 BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table 20180602_RVI_ADS_SCA_2_OUT part 2. Populate

INSERT INTO "20180602_RVI_ADS_SCA_2_OUT" ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65, scaler_66, scaler_67, scaler_68, scaler_69, scaler_70, scaler_71, scaler_72, scaler_73, scaler_74, scaler_75, scaler_76, scaler_77, scaler_78, scaler_79, scaler_80, scaler_81, scaler_82, scaler_83, scaler_84, scaler_85, scaler_86, scaler_87, scaler_88, scaler_89, scaler_90, scaler_91, scaler_92, scaler_93, scaler_94, scaler_95, scaler_96, scaler_97, scaler_98, scaler_99, scaler_100, scaler_101) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11, "U".scaler_12, "U".scaler_13, "U".scaler_14, "U".scaler_15, "U".scaler_16, "U".scaler_17, "U".scaler_18, "U".scaler_19, "U".scaler_20, "U".scaler_21, "U".scaler_22, "U".scaler_23, "U".scaler_24, "U".scaler_25, "U".scaler_26, "U".scaler_27, "U".scaler_28, "U".scaler_29, "U".scaler_30, "U".scaler_31, "U".scaler_32, "U".scaler_33, "U".scaler_34, "U".scaler_35, "U".scaler_36, "U".scaler_37, "U".scaler_38, "U".scaler_39, "U".scaler_40, "U".scaler_41, "U".scaler_42, "U".scaler_43, "U".scaler_44, "U".scaler_45, "U".scaler_46, "U".scaler_47, "U".scaler_48, "U".scaler_49, "U".scaler_50, "U".scaler_51, "U".scaler_52, "U".scaler_53, "U".scaler_54, "U".scaler_55, "U".scaler_56, "U".scaler_57, "U".scaler_58, "U".scaler_59, "U".scaler_60, "U".scaler_61, "U".scaler_62, "U".scaler_63, "U".scaler_64, "U".scaler_65, "U".scaler_66, "U".scaler_67, "U".scaler_68, "U".scaler_69, "U".scaler_70, "U".scaler_71, "U".scaler_72, "U".scaler_73, "U".scaler_74, "U".scaler_75, "U".scaler_76, "U".scaler_77, "U".scaler_78, "U".scaler_79, "U".scaler_80, "U".scaler_81, "U".scaler_82, "U".scaler_83, "U".scaler_84, "U".scaler_85, "U".scaler_86, "U".scaler_87, "U".scaler_88, "U".scaler_89, "U".scaler_90, "U".scaler_91, "U".scaler_92, "U".scaler_93, "U".scaler_94, "U".scaler_95, "U".scaler_96, "U".scaler_97, "U".scaler_98, "U".scaler_99, "U".scaler_100, "U".scaler_101 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11, "ADS_sca_2_OUT".scaler_12, "ADS_sca_2_OUT".scaler_13, "ADS_sca_2_OUT".scaler_14, "ADS_sca_2_OUT".scaler_15, "ADS_sca_2_OUT".scaler_16, "ADS_sca_2_OUT".scaler_17, "ADS_sca_2_OUT".scaler_18, "ADS_sca_2_OUT".scaler_19, "ADS_sca_2_OUT".scaler_20, "ADS_sca_2_OUT".scaler_21, "ADS_sca_2_OUT".scaler_22, "ADS_sca_2_OUT".scaler_23, "ADS_sca_2_OUT".scaler_24, "ADS_sca_2_OUT".scaler_25, "ADS_sca_2_OUT".scaler_26, "ADS_sca_2_OUT".scaler_27, "ADS_sca_2_OUT".scaler_28, "ADS_sca_2_OUT".scaler_29, "ADS_sca_2_OUT".scaler_30, "ADS_sca_2_OUT".scaler_31, "ADS_sca_2_OUT".scaler_32, "ADS_sca_2_OUT".scaler_33, "ADS_sca_2_OUT".scaler_34, "ADS_sca_2_OUT".scaler_35, "ADS_sca_2_OUT".scaler_36, "ADS_sca_2_OUT".scaler_37, "ADS_sca_2_OUT".scaler_38, "ADS_sca_2_OUT".scaler_39, "ADS_sca_2_OUT".scaler_40, "ADS_sca_2_OUT".scaler_41, "ADS_sca_2_OUT".scaler_42, "ADS_sca_2_OUT".scaler_43, "ADS_sca_2_OUT".scaler_44, "ADS_sca_2_OUT".scaler_45, "ADS_sca_2_OUT".scaler_46, "ADS_sca_2_OUT".scaler_47, "ADS_sca_2_OUT".scaler_48, "ADS_sca_2_OUT".scaler_49, "ADS_sca_2_OUT".scaler_50, "ADS_sca_2_OUT".scaler_51, "ADS_sca_2_OUT".scaler_52, "ADS_sca_2_OUT".scaler_53, "ADS_sca_2_OUT".scaler_54, "ADS_sca_2_OUT".scaler_55, "ADS_sca_2_OUT".scaler_56, "ADS_sca_2_OUT".scaler_57, "ADS_sca_2_OUT".scaler_58, "ADS_sca_2_OUT".scaler_59, "ADS_sca_2_OUT".scaler_60, "ADS_sca_2_OUT".scaler_61, "ADS_sca_2_OUT".scaler_62, "ADS_sca_2_OUT".scaler_63, "ADS_sca_2_OUT".scaler_64, "ADS_sca_2_OUT".scaler_65, "ADS_sca_2_OUT".scaler_66, "ADS_sca_2_OUT".scaler_67, "ADS_sca_2_OUT".scaler_68, "ADS_sca_2_OUT".scaler_69, "ADS_sca_2_OUT".scaler_70, "ADS_sca_2_OUT".scaler_71, "ADS_sca_2_OUT".scaler_72, "ADS_sca_2_OUT".scaler_73, "ADS_sca_2_OUT".scaler_74, "ADS_sca_2_OUT".scaler_75, "ADS_sca_2_OUT".scaler_76, "ADS_sca_2_OUT".scaler_77, "ADS_sca_2_OUT".scaler_78, "ADS_sca_2_OUT".scaler_79, "ADS_sca_2_OUT".scaler_80, "ADS_sca_2_OUT".scaler_81, "ADS_sca_2_OUT".scaler_82, "ADS_sca_2_OUT".scaler_83, "ADS_sca_2_OUT".scaler_84, "ADS_sca_2_OUT".scaler_85, "ADS_sca_2_OUT".scaler_86, "ADS_sca_2_OUT".scaler_87, "ADS_sca_2_OUT".scaler_88, "ADS_sca_2_OUT".scaler_89, "ADS_sca_2_OUT".scaler_90, "ADS_sca_2_OUT".scaler_91, "ADS_sca_2_OUT".scaler_92, "ADS_sca_2_OUT".scaler_93, "ADS_sca_2_OUT".scaler_94, "ADS_sca_2_OUT".scaler_95, "ADS_sca_2_OUT".scaler_96, "ADS_sca_2_OUT".scaler_97, "ADS_sca_2_OUT".scaler_98, "ADS_sca_2_OUT".scaler_99, "ADS_sca_2_OUT".scaler_100, "ADS_sca_2_OUT".scaler_101 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS BINARY_DOUBLE) - 0.14903440845324958) / 0.8636609678928474 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS BINARY_DOUBLE) - -0.03367636493032261) / 0.9578461188823892 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS BINARY_DOUBLE) - 0.11933316355610842) / 0.988940710894537 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS BINARY_DOUBLE) - -0.17369203130189262) / 0.9255555424369695 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS BINARY_DOUBLE) - 0.06534355492106358) / 1.2549066590522007 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS BINARY_DOUBLE) - 0.2436228993764152) / 1.0289985897454397 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS BINARY_DOUBLE) - -0.11367357911147091) / 0.8923136895775531 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS BINARY_DOUBLE) - -0.21176443876708548) / 0.9002988999952058 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS BINARY_DOUBLE) - 0.11513979914587343) / 1.0407931178174141 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS BINARY_DOUBLE) - 0.029111924938589835) / 0.8191882677751 AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS BINARY_DOUBLE) - 0.1107718926861467) / 1.1250344343026408 AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS BINARY_DOUBLE) - 0.0014580375424568769) / 1.0581752782303462 AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS BINARY_DOUBLE) - -0.0773739291867229) / 0.9419092604618728 AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS BINARY_DOUBLE) - -0.1139572875884789) / 0.9844340172570488 AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS BINARY_DOUBLE) - -0.12567631285043362) / 1.0696960659875883 AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS BINARY_DOUBLE) - -0.05799597833985687) / 0.9572246869765944 AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS BINARY_DOUBLE) - -0.14181264174476002) / 0.9402782318020427 AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS BINARY_DOUBLE) - -0.1265454286904762) / 1.0394075774622935 AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS BINARY_DOUBLE) - -0.07812248683518369) / 1.3223760230644108 AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS BINARY_DOUBLE) - -0.07648737683022465) / 0.9488949379248575 AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS BINARY_DOUBLE) - 0.05864262427869482) / 0.9538581426644901 AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS BINARY_DOUBLE) - 0.10844037074552852) / 1.210930082570065 AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS BINARY_DOUBLE) - 0.060065969333441514) / 0.9191502156507799 AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS BINARY_DOUBLE) - 0.15255771271935042) / 0.9299576154754636 AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS BINARY_DOUBLE) - -0.047123256877991036) / 0.7721855440773565 AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS BINARY_DOUBLE) - -0.05696296914089203) / 0.8655084393513448 AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS BINARY_DOUBLE) - 0.09614684099943512) / 0.96937898078964 AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS BINARY_DOUBLE) - 0.10433833409752227) / 1.0974731508769155 AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS BINARY_DOUBLE) - 0.03257716191960926) / 0.9435063968783003 AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS BINARY_DOUBLE) - 0.06142905749366723) / 1.1170732733267863 AS scaler_31, (CAST("ADS_imp_1_OUT".impter_32 AS BINARY_DOUBLE) - -0.014540423460679405) / 1.0573168197323033 AS scaler_32, (CAST("ADS_imp_1_OUT".impter_33 AS BINARY_DOUBLE) - -0.1123380099941879) / 0.9786151659749657 AS scaler_33, (CAST("ADS_imp_1_OUT".impter_34 AS BINARY_DOUBLE) - 0.1189128446049145) / 1.0063563400772833 AS scaler_34, (CAST("ADS_imp_1_OUT".impter_35 AS BINARY_DOUBLE) - 0.2286864930078044) / 0.9987517899102172 AS scaler_35, (CAST("ADS_imp_1_OUT".impter_36 AS BINARY_DOUBLE) - 0.23566181549921908) / 0.8892125575448739 AS scaler_36, (CAST("ADS_imp_1_OUT".impter_37 AS BINARY_DOUBLE) - 0.07316970399964386) / 0.8478593314579883 AS scaler_37, (CAST("ADS_imp_1_OUT".impter_38 AS BINARY_DOUBLE) - -0.03319409827469623) / 0.9417761591755847 AS scaler_38, (CAST("ADS_imp_1_OUT".impter_39 AS BINARY_DOUBLE) - 0.2734938774177451) / 0.8842710941098582 AS scaler_39, (CAST("ADS_imp_1_OUT".impter_40 AS BINARY_DOUBLE) - -0.023289567742236165) / 0.9947645749252034 AS scaler_40, (CAST("ADS_imp_1_OUT".impter_41 AS BINARY_DOUBLE) - 0.030288379260645946) / 1.038539402148216 AS scaler_41, (CAST("ADS_imp_1_OUT".impter_42 AS BINARY_DOUBLE) - -0.10736826233135917) / 0.9830117951146878 AS scaler_42, (CAST("ADS_imp_1_OUT".impter_43 AS BINARY_DOUBLE) - 0.026402950097887946) / 1.0398287539710105 AS scaler_43, (CAST("ADS_imp_1_OUT".impter_44 AS BINARY_DOUBLE) - -0.09677146654911453) / 1.0015225564098231 AS scaler_44, (CAST("ADS_imp_1_OUT".impter_45 AS BINARY_DOUBLE) - 0.005974248342970334) / 0.9192248357286628 AS scaler_45, (CAST("ADS_imp_1_OUT".impter_46 AS BINARY_DOUBLE) - 0.036917268127071114) / 1.069754938973098 AS scaler_46, (CAST("ADS_imp_1_OUT".impter_47 AS BINARY_DOUBLE) - -0.14525717382374131) / 1.0022143023048327 AS scaler_47, (CAST("ADS_imp_1_OUT".impter_48 AS BINARY_DOUBLE) - -0.16675269881177787) / 1.0264976173555715 AS scaler_48, (CAST("ADS_imp_1_OUT".impter_49 AS BINARY_DOUBLE) - 0.25084465695652713) / 1.0176351295531831 AS scaler_49, (CAST("ADS_imp_1_OUT".impter_50 AS BINARY_DOUBLE) - 0.14623398322257627) / 0.9499010882454708 AS scaler_50, (CAST("ADS_imp_1_OUT".impter_51 AS BINARY_DOUBLE) - 0.10185431133406106) / 1.0834913023248847 AS scaler_51, (CAST("ADS_imp_1_OUT".impter_52 AS BINARY_DOUBLE) - -0.13292560945085755) / 1.203043012940759 AS scaler_52, (CAST("ADS_imp_1_OUT".impter_53 AS BINARY_DOUBLE) - -0.042191791365440365) / 1.0890718481954653 AS scaler_53, (CAST("ADS_imp_1_OUT".impter_54 AS BINARY_DOUBLE) - 0.15214028404681929) / 1.0355928162656227 AS scaler_54, (CAST("ADS_imp_1_OUT".impter_55 AS BINARY_DOUBLE) - -0.15821372314298002) / 0.8130848573586256 AS scaler_55, (CAST("ADS_imp_1_OUT".impter_56 AS BINARY_DOUBLE) - 0.17926260535776073) / 1.0704671463335236 AS scaler_56, (CAST("ADS_imp_1_OUT".impter_57 AS BINARY_DOUBLE) - 0.05077533210437681) / 1.0052564941217246 AS scaler_57, (CAST("ADS_imp_1_OUT".impter_58 AS BINARY_DOUBLE) - -0.011884551362322174) / 0.9691413097866551 AS scaler_58, (CAST("ADS_imp_1_OUT".impter_59 AS BINARY_DOUBLE) - -0.04948745069141103) / 1.2609768269937562 AS scaler_59, (CAST("ADS_imp_1_OUT".impter_60 AS BINARY_DOUBLE) - -0.13256733552482858) / 0.8686251022330442 AS scaler_60, (CAST("ADS_imp_1_OUT".impter_61 AS BINARY_DOUBLE) - 0.11866238202513515) / 1.0631654849592418 AS scaler_61, (CAST("ADS_imp_1_OUT".impter_62 AS BINARY_DOUBLE) - -0.06590828520229039) / 1.0418727908296095 AS scaler_62, (CAST("ADS_imp_1_OUT".impter_63 AS BINARY_DOUBLE) - 0.1554857338869047) / 0.8946519794042862 AS scaler_63, (CAST("ADS_imp_1_OUT".impter_64 AS BINARY_DOUBLE) - -0.006608301490984002) / 0.9166153141716471 AS scaler_64, (CAST("ADS_imp_1_OUT".impter_65 AS BINARY_DOUBLE) - -0.01827580148493827) / 1.037281466599587 AS scaler_65, (CAST("ADS_imp_1_OUT".impter_66 AS BINARY_DOUBLE) - -0.027366317428668574) / 0.8876680722044222 AS scaler_66, (CAST("ADS_imp_1_OUT".impter_67 AS BINARY_DOUBLE) - 0.01436625003668961) / 0.9184976645949744 AS scaler_67, (CAST("ADS_imp_1_OUT".impter_68 AS BINARY_DOUBLE) - 0.054075300089557875) / 0.929588489370402 AS scaler_68, (CAST("ADS_imp_1_OUT".impter_69 AS BINARY_DOUBLE) - -0.23085273383923544) / 0.944088767881375 AS scaler_69, (CAST("ADS_imp_1_OUT".impter_70 AS BINARY_DOUBLE) - -0.24396528808375115) / 1.04592379692413 AS scaler_70, (CAST("ADS_imp_1_OUT".impter_71 AS BINARY_DOUBLE) - 0.06545065787659607) / 0.8967701639849762 AS scaler_71, (CAST("ADS_imp_1_OUT".impter_72 AS BINARY_DOUBLE) - 0.04266518302023082) / 0.8835391881690846 AS scaler_72, (CAST("ADS_imp_1_OUT".impter_73 AS BINARY_DOUBLE) - -0.1540451820349279) / 0.9869791561020547 AS scaler_73, (CAST("ADS_imp_1_OUT".impter_74 AS BINARY_DOUBLE) - -0.2222352564572451) / 0.9537927411956955 AS scaler_74, (CAST("ADS_imp_1_OUT".impter_75 AS BINARY_DOUBLE) - 0.0685606372972674) / 0.953717717145669 AS scaler_75, (CAST("ADS_imp_1_OUT".impter_76 AS BINARY_DOUBLE) - -0.09639592085393558) / 1.035877532027052 AS scaler_76, (CAST("ADS_imp_1_OUT".impter_77 AS BINARY_DOUBLE) - 0.20747518927524572) / 1.0611076222257592 AS scaler_77, (CAST("ADS_imp_1_OUT".impter_78 AS BINARY_DOUBLE) - -0.13945256367132464) / 1.022370053319208 AS scaler_78, (CAST("ADS_imp_1_OUT".impter_79 AS BINARY_DOUBLE) - 0.021954208773706758) / 0.48752447532965937 AS scaler_79, (CAST("ADS_imp_1_OUT".impter_80 AS BINARY_DOUBLE) - 0.07033517037026028) / 0.9984278761892057 AS scaler_80, (CAST("ADS_imp_1_OUT".impter_81 AS BINARY_DOUBLE) - 0.12062472190694748) / 1.0482914370539298 AS scaler_81, (CAST("ADS_imp_1_OUT".impter_82 AS BINARY_DOUBLE) - -0.03376594744247921) / 1.0120395039819923 AS scaler_82, (CAST("ADS_imp_1_OUT".impter_83 AS BINARY_DOUBLE) - -0.11063521313283846) / 0.8487965281981553 AS scaler_83, (CAST("ADS_imp_1_OUT".impter_84 AS BINARY_DOUBLE) - 0.040264280436689885) / 0.9278865519978795 AS scaler_84, (CAST("ADS_imp_1_OUT".impter_85 AS BINARY_DOUBLE) - 0.047619698634703535) / 1.0173681676828843 AS scaler_85, (CAST("ADS_imp_1_OUT".impter_86 AS BINARY_DOUBLE) - 0.10294542896565007) / 0.9363751138268347 AS scaler_86, (CAST("ADS_imp_1_OUT".impter_87 AS BINARY_DOUBLE) - 0.03543139086541035) / 0.9766573952044824 AS scaler_87, (CAST("ADS_imp_1_OUT".impter_88 AS BINARY_DOUBLE) - 0.15812674995414752) / 1.0065679998415296 AS scaler_88, (CAST("ADS_imp_1_OUT".impter_89 AS BINARY_DOUBLE) - -0.09370679202503561) / 0.9521441609239362 AS scaler_89, (CAST("ADS_imp_1_OUT".impter_90 AS BINARY_DOUBLE) - -0.05352174133125283) / 1.0336679876781851 AS scaler_90, (CAST("ADS_imp_1_OUT".impter_91 AS BINARY_DOUBLE) - -0.05671142135749989) / 1.0851107811586167 AS scaler_91, (CAST("ADS_imp_1_OUT".impter_92 AS BINARY_DOUBLE) - 0.1683501919918398) / 0.8286544432716997 AS scaler_92, (CAST("ADS_imp_1_OUT".impter_93 AS BINARY_DOUBLE) - -0.08014687785959375) / 1.070420432549587 AS scaler_93, (CAST("ADS_imp_1_OUT".impter_94 AS BINARY_DOUBLE) - 0.06732751721128641) / 1.1749792199760318 AS scaler_94, (CAST("ADS_imp_1_OUT".impter_95 AS BINARY_DOUBLE) - -0.00888651681786575) / 1.0750073377154254 AS scaler_95, (CAST("ADS_imp_1_OUT".impter_96 AS BINARY_DOUBLE) - 0.026095385517810564) / 1.1078183878209036 AS scaler_96, (CAST("ADS_imp_1_OUT".impter_97 AS BINARY_DOUBLE) - 0.04435425200996614) / 0.8861375411199117 AS scaler_97, (CAST("ADS_imp_1_OUT".impter_98 AS BINARY_DOUBLE) - 0.026895408070568623) / 1.0095288823928932 AS scaler_98, (CAST("ADS_imp_1_OUT".impter_99 AS BINARY_DOUBLE) - 0.18232971539070067) / 0.9551382056239349 AS scaler_99, (CAST("ADS_imp_1_OUT".impter_100 AS BINARY_DOUBLE) - -0.12132540363011564) / 0.9258857556869412 AS scaler_100, (CAST("ADS_imp_1_OUT".impter_101 AS BINARY_DOUBLE) - 0.004420132524286926) / 0.9371965982210728 AS scaler_101 
FROM "20180602_12O_ADS_IMP_1_OUT" "ADS_imp_1_OUT") "ADS_sca_2_OUT") "U"

-- Code For temporary table TMP_20180602_IHO_GB_B0 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "TMP_20180602_IHO_GB_B0" (
	"KEY" NUMBER(19), 
	"Score_0" BINARY_DOUBLE, 
	"Score_1" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20180602_IHO_GB_B0 part 2. Populate

INSERT INTO "TMP_20180602_IHO_GB_B0" ("KEY", "Score_0", "Score_1") SELECT "U"."KEY", "U"."Score_0", "U"."Score_1" 
FROM (WITH "DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= 0.06653057038784027) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 1.1668860912322998) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 2.114020586013794) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_21 <= 1.1025973558425903) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_85 <= 2.2016701698303223) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_72 <= -1.8241477012634277) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, -1.6183315431435734 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 2.1052631578947363 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 2.1052631578947363 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -1.904761904761905 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, -1.904761904761905 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, 2.105263157894737 AS "E" FROM DUAL UNION ALL SELECT 12 AS nid, -1.904761904761905 AS "E" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".nid AS nid, "DT_node_data"."E" AS "E" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".nid), 
"GB_Model_0_0" AS 
(SELECT "DT_Output"."KEY" AS "KEY", -"DT_Output"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output"), 
"GB_Model_0_1" AS 
(SELECT "DT_Output"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output"."E" AS "Score_1" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= 0.06653057038784027) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_39 <= 1.5735666751861572) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_62 <= -2.1253793239593506) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_96 <= -0.9484713077545166) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_20 <= 1.5954883098602295) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 1.990046501159668) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, 2.096008535366903 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, -1.4234854473404777 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 1.895437496504261 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, 2.2994181831603377 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, 1.8954374965042624 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, -1.7478449197552628 AS "E" FROM DUAL UNION ALL SELECT 12 AS nid, -1.7478449197552628 AS "E" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".nid AS nid, "DT_node_data_1"."E" AS "E" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".nid), 
"GB_Model_1_0" AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", -"DT_Output_1"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_1"), 
"GB_Model_1_1" AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_1"."E" AS "Score_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= 0.06653057038784027) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_73 <= -2.0547890663146973) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 2.114020586013794) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_49 <= -1.5966084003448486) THEN 7 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_74 <= -1.8504893779754639) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 2 AS nid, 2.0324558055611313 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, -1.3276995551562458 AS "E" FROM DUAL UNION ALL SELECT 5 AS nid, 2.0324201305914054 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -1.6279189753326482 AS "E" FROM DUAL UNION ALL SELECT 9 AS nid, -1.6279189753326482 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, 1.7408281426133267 AS "E" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".nid AS nid, "DT_node_data_2"."E" AS "E" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".nid), 
"GB_Model_2_0" AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", -"DT_Output_2"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_2"), 
"GB_Model_2_1" AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_2"."E" AS "Score_1" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= 0.06653057038784027) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_62 <= -2.1253793239593506) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_27 <= 0.16263672709465027) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_39 <= 1.5735666751861572) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_74 <= -1.8504893779754639) THEN 9 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_12 <= 1.962590217590332) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, 2.2033215782363085 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 1.8292167028822635 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, -1.2388948754014388 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, 1.8443051333640834 AS "E" FROM DUAL UNION ALL SELECT 9 AS nid, -1.5335854573777359 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, 1.6224640389018972 AS "E" FROM DUAL UNION ALL SELECT 12 AS nid, -1.5335854573777359 AS "E" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".nid AS nid, "DT_node_data_3"."E" AS "E" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".nid), 
"GB_Model_3_0" AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", -"DT_Output_3"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_3"), 
"GB_Model_3_1" AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_3"."E" AS "Score_1" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.11623701453208923) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 0.878835916519165) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_45 <= 1.391965389251709) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_35 <= -0.14811989665031433) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= 1.4252889156341553) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_74 <= -1.8504893779754639) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= 0.18246357142925262) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, -1.4201836338413583 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 0.8818891509469176 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 2.0543740519216325 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -1.5115435903792729 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, -1.4577213966216014 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, 1.5448043165070784 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, -1.4876585385597692 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, 1.529238644498216 AS "E" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".nid AS nid, "DT_node_data_4"."E" AS "E" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".nid), 
"GB_Model_4_0" AS 
(SELECT "DT_Output_4"."KEY" AS "KEY", -"DT_Output_4"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_4"), 
"GB_Model_4_1" AS 
(SELECT "DT_Output_4"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_4"."E" AS "Score_1" 
FROM "DT_Output_4")
 SELECT "GB_B0"."KEY", "GB_B0"."Score_0", "GB_B0"."Score_1" 
FROM (SELECT "GB_esu_0"."KEY" AS "KEY", "GB_esu_0"."Score_0" AS "Score_0", "GB_esu_0"."Score_1" AS "Score_1" 
FROM (SELECT "GB_Model_0_0"."KEY" AS "KEY", "GB_Model_0_0"."Score_0" AS "Score_0", "GB_Model_0_0"."Score_1" AS "Score_1" 
FROM "GB_Model_0_0" UNION ALL SELECT "GB_Model_0_1"."KEY" AS "KEY", "GB_Model_0_1"."Score_0" AS "Score_0", "GB_Model_0_1"."Score_1" AS "Score_1" 
FROM "GB_Model_0_1" UNION ALL SELECT "GB_Model_1_0"."KEY" AS "KEY", "GB_Model_1_0"."Score_0" AS "Score_0", "GB_Model_1_0"."Score_1" AS "Score_1" 
FROM "GB_Model_1_0" UNION ALL SELECT "GB_Model_1_1"."KEY" AS "KEY", "GB_Model_1_1"."Score_0" AS "Score_0", "GB_Model_1_1"."Score_1" AS "Score_1" 
FROM "GB_Model_1_1" UNION ALL SELECT "GB_Model_2_0"."KEY" AS "KEY", "GB_Model_2_0"."Score_0" AS "Score_0", "GB_Model_2_0"."Score_1" AS "Score_1" 
FROM "GB_Model_2_0" UNION ALL SELECT "GB_Model_2_1"."KEY" AS "KEY", "GB_Model_2_1"."Score_0" AS "Score_0", "GB_Model_2_1"."Score_1" AS "Score_1" 
FROM "GB_Model_2_1" UNION ALL SELECT "GB_Model_3_0"."KEY" AS "KEY", "GB_Model_3_0"."Score_0" AS "Score_0", "GB_Model_3_0"."Score_1" AS "Score_1" 
FROM "GB_Model_3_0" UNION ALL SELECT "GB_Model_3_1"."KEY" AS "KEY", "GB_Model_3_1"."Score_0" AS "Score_0", "GB_Model_3_1"."Score_1" AS "Score_1" 
FROM "GB_Model_3_1" UNION ALL SELECT "GB_Model_4_0"."KEY" AS "KEY", "GB_Model_4_0"."Score_0" AS "Score_0", "GB_Model_4_0"."Score_1" AS "Score_1" 
FROM "GB_Model_4_0" UNION ALL SELECT "GB_Model_4_1"."KEY" AS "KEY", "GB_Model_4_1"."Score_0" AS "Score_0", "GB_Model_4_1"."Score_1" AS "Score_1" 
FROM "GB_Model_4_1") "GB_esu_0") "GB_B0") "U"

-- Code For temporary table TMP_20180602_HS5_GB_B1 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "TMP_20180602_HS5_GB_B1" (
	"KEY" NUMBER(19), 
	"Score_0" BINARY_DOUBLE, 
	"Score_1" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20180602_HS5_GB_B1 part 2. Populate

INSERT INTO "TMP_20180602_HS5_GB_B1" ("KEY", "Score_0", "Score_1") SELECT "U"."KEY", "U"."Score_0", "U"."Score_1" 
FROM (WITH "DT_node_lookup_5" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.11623701453208923) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_62 <= -0.5680299997329712) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_75 <= -0.01915532350540161) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 1.1668860912322998) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= 1.4252889156341553) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_74 <= -1.8504893779754639) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_20 <= 0.5471101999282837) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, 1.958202526870995 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, -1.448008549051362 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, -1.3444944167722634 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, 0.7265051857481474 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, -1.395633609741032 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, 1.4673881774513675 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, 1.4541899894634762 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, -1.4203469592033384 AS "E" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".nid AS nid, "DT_node_data_5"."E" AS "E" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".nid), 
"GB_Model_5_0" AS 
(SELECT "DT_Output_5"."KEY" AS "KEY", -"DT_Output_5"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_5"), 
"GB_Model_5_1" AS 
(SELECT "DT_Output_5"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_5"."E" AS "Score_1" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.11623701453208923) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_37 <= 0.5512429475784302) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 1.3340132236480713) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_23 <= -0.333732932806015) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= 1.4252889156341553) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_74 <= -1.8504893779754639) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_78 <= 1.8757691383361816) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, -1.3946185074449031 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 0.525957561992705 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 1.937257098415046 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -0.8866233396726353 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, -1.344097550451214 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, 1.4040651025086777 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, -1.3647650410708272 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, 1.3927198824988734 AS "E" FROM DUAL) "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".nid AS nid, "DT_node_data_6"."E" AS "E" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".nid), 
"GB_Model_6_0" AS 
(SELECT "DT_Output_6"."KEY" AS "KEY", -"DT_Output_6"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_6"), 
"GB_Model_6_1" AS 
(SELECT "DT_Output_6"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_6"."E" AS "Score_1" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.11623701453208923) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_62 <= -0.5680299997329712) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_78 <= 0.17603853344917297) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_37 <= 2.1503937244415283) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= 1.4252889156341553) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_74 <= -1.8504893779754639) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_68 <= 0.29374879598617554) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, -1.337157307504241 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 1.720271726539447 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, -1.170701604442776 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, 1.8229070531835285 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, -1.300821010694913 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, 1.3515189609079086 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, -1.3182902998610377 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, 1.3416629081480635 AS "E" FROM DUAL) "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".nid AS nid, "DT_node_data_7"."E" AS "E" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".nid), 
"GB_Model_7_0" AS 
(SELECT "DT_Output_7"."KEY" AS "KEY", -"DT_Output_7"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_7"), 
"GB_Model_7_1" AS 
(SELECT "DT_Output_7"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_7"."E" AS "Score_1" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.11623701453208923) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_73 <= -2.0547890663146973) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= 0.3425602614879608) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_37 <= 1.2283591032028198) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= 1.4252889156341553) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_20 <= 1.5954883098602295) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_62 <= -1.2847321033477783) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, 1.6108718821416377 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 1.6688510571596784 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, -1.068080084295244 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, 0.9475315093373128 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, 1.307398426483107 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, -1.264127868945373 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, 1.298765298853743 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, -1.279025518068119 AS "E" FROM DUAL) "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".nid AS nid, "DT_node_data_8"."E" AS "E" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".nid), 
"GB_Model_8_0" AS 
(SELECT "DT_Output_8"."KEY" AS "KEY", -"DT_Output_8"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_8"), 
"GB_Model_8_1" AS 
(SELECT "DT_Output_8"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_8"."E" AS "Score_1" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.11623701453208923) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_20 <= 1.9128592014312744) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_62 <= -2.1253793239593506) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= -0.653716504573822) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= 1.4252889156341553) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_74 <= -1.8504893779754639) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_24 <= 0.4188730716705322) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, 1.4900163352519837 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, -0.9948753872812511 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 1.632261202074544 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, 1.519985051185009 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, -1.2327629493831462 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, 1.2699877686233394 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, -1.245562745293807 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, 1.262376837539426 AS "E" FROM DUAL) "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".nid AS nid, "DT_node_data_9"."E" AS "E" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".nid), 
"GB_Model_9_0" AS 
(SELECT "DT_Output_9"."KEY" AS "KEY", -"DT_Output_9"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_9"), 
"GB_Model_9_1" AS 
(SELECT "DT_Output_9"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_9"."E" AS "Score_1" 
FROM "DT_Output_9")
 SELECT "GB_B1"."KEY", "GB_B1"."Score_0", "GB_B1"."Score_1" 
FROM (SELECT "GB_esu_1"."KEY" AS "KEY", "GB_esu_1"."Score_0" AS "Score_0", "GB_esu_1"."Score_1" AS "Score_1" 
FROM (SELECT "GB_Model_5_0"."KEY" AS "KEY", "GB_Model_5_0"."Score_0" AS "Score_0", "GB_Model_5_0"."Score_1" AS "Score_1" 
FROM "GB_Model_5_0" UNION ALL SELECT "GB_Model_5_1"."KEY" AS "KEY", "GB_Model_5_1"."Score_0" AS "Score_0", "GB_Model_5_1"."Score_1" AS "Score_1" 
FROM "GB_Model_5_1" UNION ALL SELECT "GB_Model_6_0"."KEY" AS "KEY", "GB_Model_6_0"."Score_0" AS "Score_0", "GB_Model_6_0"."Score_1" AS "Score_1" 
FROM "GB_Model_6_0" UNION ALL SELECT "GB_Model_6_1"."KEY" AS "KEY", "GB_Model_6_1"."Score_0" AS "Score_0", "GB_Model_6_1"."Score_1" AS "Score_1" 
FROM "GB_Model_6_1" UNION ALL SELECT "GB_Model_7_0"."KEY" AS "KEY", "GB_Model_7_0"."Score_0" AS "Score_0", "GB_Model_7_0"."Score_1" AS "Score_1" 
FROM "GB_Model_7_0" UNION ALL SELECT "GB_Model_7_1"."KEY" AS "KEY", "GB_Model_7_1"."Score_0" AS "Score_0", "GB_Model_7_1"."Score_1" AS "Score_1" 
FROM "GB_Model_7_1" UNION ALL SELECT "GB_Model_8_0"."KEY" AS "KEY", "GB_Model_8_0"."Score_0" AS "Score_0", "GB_Model_8_0"."Score_1" AS "Score_1" 
FROM "GB_Model_8_0" UNION ALL SELECT "GB_Model_8_1"."KEY" AS "KEY", "GB_Model_8_1"."Score_0" AS "Score_0", "GB_Model_8_1"."Score_1" AS "Score_1" 
FROM "GB_Model_8_1" UNION ALL SELECT "GB_Model_9_0"."KEY" AS "KEY", "GB_Model_9_0"."Score_0" AS "Score_0", "GB_Model_9_0"."Score_1" AS "Score_1" 
FROM "GB_Model_9_0" UNION ALL SELECT "GB_Model_9_1"."KEY" AS "KEY", "GB_Model_9_1"."Score_0" AS "Score_0", "GB_Model_9_1"."Score_1" AS "Score_1" 
FROM "GB_Model_9_1") "GB_esu_1") "GB_B1") "U"

-- Code For temporary table TMP_20180602_MYE_GB_B2 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "TMP_20180602_MYE_GB_B2" (
	"KEY" NUMBER(19), 
	"Score_0" BINARY_DOUBLE, 
	"Score_1" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20180602_MYE_GB_B2 part 2. Populate

INSERT INTO "TMP_20180602_MYE_GB_B2" ("KEY", "Score_0", "Score_1") SELECT "U"."KEY", "U"."Score_0", "U"."Score_1" 
FROM (WITH "DT_node_lookup_10" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.1771824061870575) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 0.878835916519165) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_73 <= -2.0547890663146973) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.7380362749099731) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_20 <= 1.5777688026428223) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_86 <= 1.5461716651916504) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_73 <= 0.41944313049316406) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_10" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, 1.446661732834358 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, -1.2499360133065067 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 1.6219351936501099 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -1.2895245850004842 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, 1.1975528332766405 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, -0.6151746918646214 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, -1.317315323569 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, -1.2057669579063237 AS "E" FROM DUAL) "Values"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", "DT_node_lookup_10".node_id_2 AS node_id_2, "DT_node_data_10".nid AS nid, "DT_node_data_10"."E" AS "E" 
FROM "DT_node_lookup_10" LEFT OUTER JOIN "DT_node_data_10" ON "DT_node_lookup_10".node_id_2 = "DT_node_data_10".nid), 
"GB_Model_10_0" AS 
(SELECT "DT_Output_10"."KEY" AS "KEY", -"DT_Output_10"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_10"), 
"GB_Model_10_1" AS 
(SELECT "DT_Output_10"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_10"."E" AS "Score_1" 
FROM "DT_Output_10"), 
"DT_node_lookup_11" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.1771824061870575) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 0.878835916519165) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_90 <= 2.070770263671875) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.7380362749099731) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_99 <= -1.8769221305847168) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_96 <= -1.1359070539474487) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_20 <= 1.0198101997375488) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_11" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, -1.220589039043774 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 1.3865013593274123 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 1.5327998769743132 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -1.2548231207419789 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, -1.2256580639543597 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, -1.2318331300228573 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, 1.2459403972282284 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, -0.05217530635323901 AS "E" FROM DUAL) "Values"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", "DT_node_lookup_11".node_id_2 AS node_id_2, "DT_node_data_11".nid AS nid, "DT_node_data_11"."E" AS "E" 
FROM "DT_node_lookup_11" LEFT OUTER JOIN "DT_node_data_11" ON "DT_node_lookup_11".node_id_2 = "DT_node_data_11".nid), 
"GB_Model_11_0" AS 
(SELECT "DT_Output_11"."KEY" AS "KEY", -"DT_Output_11"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_11"), 
"GB_Model_11_1" AS 
(SELECT "DT_Output_11"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_11"."E" AS "Score_1" 
FROM "DT_Output_11"), 
"DT_node_lookup_12" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.1771824061870575) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 0.878835916519165) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_73 <= -2.0547890663146973) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.7380362749099731) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_20 <= 1.5777688026428223) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_86 <= 1.5461716651916504) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_100 <= -0.4960653781890869) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_12" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, 1.336462011301788 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, -1.195258567601929 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 1.460157504031824 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -1.225033227714185 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, 1.1286854488179339 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, -0.5693352361704495 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, -1.2767036085425458 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, -1.1814445377175218 AS "E" FROM DUAL) "Values"), 
"DT_Output_12" AS 
(SELECT "DT_node_lookup_12"."KEY" AS "KEY", "DT_node_lookup_12".node_id_2 AS node_id_2, "DT_node_data_12".nid AS nid, "DT_node_data_12"."E" AS "E" 
FROM "DT_node_lookup_12" LEFT OUTER JOIN "DT_node_data_12" ON "DT_node_lookup_12".node_id_2 = "DT_node_data_12".nid), 
"GB_Model_12_0" AS 
(SELECT "DT_Output_12"."KEY" AS "KEY", -"DT_Output_12"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_12"), 
"GB_Model_12_1" AS 
(SELECT "DT_Output_12"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_12"."E" AS "Score_1" 
FROM "DT_Output_12"), 
"DT_node_lookup_13" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= 0.06653057038784027) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 2.114020586013794) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 0.878835916519165) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_75 <= -0.337843656539917) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_12 <= 1.962590217590332) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_56 <= 1.2069389820098877) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_13" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, -1.0027112222309909 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 0.5020490769066449 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 1.4820602336151274 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, 1.289621326139366 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, 1.1667450118563434 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, -1.1612257530876875 AS "E" FROM DUAL UNION ALL SELECT 12 AS nid, -1.1796530087132728 AS "E" FROM DUAL) "Values"), 
"DT_Output_13" AS 
(SELECT "DT_node_lookup_13"."KEY" AS "KEY", "DT_node_lookup_13".node_id_2 AS node_id_2, "DT_node_data_13".nid AS nid, "DT_node_data_13"."E" AS "E" 
FROM "DT_node_lookup_13" LEFT OUTER JOIN "DT_node_data_13" ON "DT_node_lookup_13".node_id_2 = "DT_node_data_13".nid), 
"GB_Model_13_0" AS 
(SELECT "DT_Output_13"."KEY" AS "KEY", -"DT_Output_13"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_13"), 
"GB_Model_13_1" AS 
(SELECT "DT_Output_13"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_13"."E" AS "Score_1" 
FROM "DT_Output_13"), 
"DT_node_lookup_14" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.1771824061870575) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_73 <= -2.0547890663146973) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_89 <= -0.3544124364852905) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_21 <= -1.6406481266021729) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_20 <= 1.5777688026428223) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_99 <= -1.8769221305847168) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.44649940729141235) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_14" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, 1.3748289048641364 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, 1.3254178894915882 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 1.5416984936659368 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -0.9882844135467986 AS "E" FROM DUAL UNION ALL SELECT 10 AS nid, -1.1728890055441057 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, 1.017348509871444 AS "E" FROM DUAL UNION ALL SELECT 13 AS nid, -1.1435499417251889 AS "E" FROM DUAL UNION ALL SELECT 14 AS nid, -1.2203033466414503 AS "E" FROM DUAL) "Values"), 
"DT_Output_14" AS 
(SELECT "DT_node_lookup_14"."KEY" AS "KEY", "DT_node_lookup_14".node_id_2 AS node_id_2, "DT_node_data_14".nid AS nid, "DT_node_data_14"."E" AS "E" 
FROM "DT_node_lookup_14" LEFT OUTER JOIN "DT_node_data_14" ON "DT_node_lookup_14".node_id_2 = "DT_node_data_14".nid), 
"GB_Model_14_0" AS 
(SELECT "DT_Output_14"."KEY" AS "KEY", -"DT_Output_14"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_14"), 
"GB_Model_14_1" AS 
(SELECT "DT_Output_14"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_14"."E" AS "Score_1" 
FROM "DT_Output_14")
 SELECT "GB_B2"."KEY", "GB_B2"."Score_0", "GB_B2"."Score_1" 
FROM (SELECT "GB_esu_2"."KEY" AS "KEY", "GB_esu_2"."Score_0" AS "Score_0", "GB_esu_2"."Score_1" AS "Score_1" 
FROM (SELECT "GB_Model_10_0"."KEY" AS "KEY", "GB_Model_10_0"."Score_0" AS "Score_0", "GB_Model_10_0"."Score_1" AS "Score_1" 
FROM "GB_Model_10_0" UNION ALL SELECT "GB_Model_10_1"."KEY" AS "KEY", "GB_Model_10_1"."Score_0" AS "Score_0", "GB_Model_10_1"."Score_1" AS "Score_1" 
FROM "GB_Model_10_1" UNION ALL SELECT "GB_Model_11_0"."KEY" AS "KEY", "GB_Model_11_0"."Score_0" AS "Score_0", "GB_Model_11_0"."Score_1" AS "Score_1" 
FROM "GB_Model_11_0" UNION ALL SELECT "GB_Model_11_1"."KEY" AS "KEY", "GB_Model_11_1"."Score_0" AS "Score_0", "GB_Model_11_1"."Score_1" AS "Score_1" 
FROM "GB_Model_11_1" UNION ALL SELECT "GB_Model_12_0"."KEY" AS "KEY", "GB_Model_12_0"."Score_0" AS "Score_0", "GB_Model_12_0"."Score_1" AS "Score_1" 
FROM "GB_Model_12_0" UNION ALL SELECT "GB_Model_12_1"."KEY" AS "KEY", "GB_Model_12_1"."Score_0" AS "Score_0", "GB_Model_12_1"."Score_1" AS "Score_1" 
FROM "GB_Model_12_1" UNION ALL SELECT "GB_Model_13_0"."KEY" AS "KEY", "GB_Model_13_0"."Score_0" AS "Score_0", "GB_Model_13_0"."Score_1" AS "Score_1" 
FROM "GB_Model_13_0" UNION ALL SELECT "GB_Model_13_1"."KEY" AS "KEY", "GB_Model_13_1"."Score_0" AS "Score_0", "GB_Model_13_1"."Score_1" AS "Score_1" 
FROM "GB_Model_13_1" UNION ALL SELECT "GB_Model_14_0"."KEY" AS "KEY", "GB_Model_14_0"."Score_0" AS "Score_0", "GB_Model_14_0"."Score_1" AS "Score_1" 
FROM "GB_Model_14_0" UNION ALL SELECT "GB_Model_14_1"."KEY" AS "KEY", "GB_Model_14_1"."Score_0" AS "Score_0", "GB_Model_14_1"."Score_1" AS "Score_1" 
FROM "GB_Model_14_1") "GB_esu_2") "GB_B2") "U"

-- Code For temporary table TMP_20180602_2I5_GB_B3 part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "TMP_20180602_2I5_GB_B3" (
	"KEY" NUMBER(19), 
	"Score_0" BINARY_DOUBLE, 
	"Score_1" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20180602_2I5_GB_B3 part 2. Populate

INSERT INTO "TMP_20180602_2I5_GB_B3" ("KEY", "Score_0", "Score_1") SELECT "U"."KEY", "U"."Score_0", "U"."Score_1" 
FROM (WITH "DT_node_lookup_15" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_79 <= 0.6556057929992676) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_61 <= -1.5158387422561646) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.20308691263198853) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= 1.142817497253418) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_65 <= -1.2290515899658203) THEN 9 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_12 <= -0.9596459865570068) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "20180602_RVI_ADS_SCA_2_OUT" "ADS_sca_2_OUT"), 
"DT_node_data_15" AS 
(SELECT "Values".nid AS nid, CAST("Values"."E" AS BINARY_DOUBLE) AS "E" 
FROM (SELECT 3 AS nid, -1.1408123626661393 AS "E" FROM DUAL UNION ALL SELECT 4 AS nid, -1.1949952326507387 AS "E" FROM DUAL UNION ALL SELECT 6 AS nid, 0.8502158462658079 AS "E" FROM DUAL UNION ALL SELECT 7 AS nid, -0.5955307623945251 AS "E" FROM DUAL UNION ALL SELECT 9 AS nid, -1.2312159733472068 AS "E" FROM DUAL UNION ALL SELECT 11 AS nid, -1.1721830246591496 AS "E" FROM DUAL UNION ALL SELECT 12 AS nid, -1.1415942686578024 AS "E" FROM DUAL) "Values"), 
"DT_Output_15" AS 
(SELECT "DT_node_lookup_15"."KEY" AS "KEY", "DT_node_lookup_15".node_id_2 AS node_id_2, "DT_node_data_15".nid AS nid, "DT_node_data_15"."E" AS "E" 
FROM "DT_node_lookup_15" LEFT OUTER JOIN "DT_node_data_15" ON "DT_node_lookup_15".node_id_2 = "DT_node_data_15".nid), 
"GB_Model_15_0" AS 
(SELECT "DT_Output_15"."KEY" AS "KEY", -"DT_Output_15"."E" AS "Score_0", 0.0 AS "Score_1" 
FROM "DT_Output_15"), 
"GB_Model_15_1" AS 
(SELECT "DT_Output_15"."KEY" AS "KEY", 0.0 AS "Score_0", "DT_Output_15"."E" AS "Score_1" 
FROM "DT_Output_15")
 SELECT "GB_B3"."KEY", "GB_B3"."Score_0", "GB_B3"."Score_1" 
FROM (SELECT "GB_esu_3"."KEY" AS "KEY", "GB_esu_3"."Score_0" AS "Score_0", "GB_esu_3"."Score_1" AS "Score_1" 
FROM (SELECT "GB_Model_15_0"."KEY" AS "KEY", "GB_Model_15_0"."Score_0" AS "Score_0", "GB_Model_15_0"."Score_1" AS "Score_1" 
FROM "GB_Model_15_0" UNION ALL SELECT "GB_Model_15_1"."KEY" AS "KEY", "GB_Model_15_1"."Score_0" AS "Score_0", "GB_Model_15_1"."Score_1" AS "Score_1" 
FROM "GB_Model_15_1") "GB_esu_3") "GB_B3") "U"

-- Code For temporary table TMP_20180602_754_GB_SUM part 1. Create 


CREATE GLOBAL TEMPORARY TABLE "TMP_20180602_754_GB_SUM" (
	"KEY" NUMBER(19), 
	"Score_0" BINARY_DOUBLE, 
	"Score_1" BINARY_DOUBLE
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20180602_754_GB_SUM part 2. Populate

INSERT INTO "TMP_20180602_754_GB_SUM" ("KEY", "Score_0", "Score_1") SELECT "U"."KEY", "U"."Score_0", "U"."Score_1" 
FROM (WITH "GB_Union" AS 
(SELECT "GB_EnsembleUnion"."KEY" AS "KEY", "GB_EnsembleUnion"."Score_0" AS "Score_0", "GB_EnsembleUnion"."Score_1" AS "Score_1" 
FROM (SELECT "GB_B0"."KEY" AS "KEY", "GB_B0"."Score_0" AS "Score_0", "GB_B0"."Score_1" AS "Score_1" 
FROM "TMP_20180602_IHO_GB_B0" "GB_B0" UNION ALL SELECT "GB_B1"."KEY" AS "KEY", "GB_B1"."Score_0" AS "Score_0", "GB_B1"."Score_1" AS "Score_1" 
FROM "TMP_20180602_HS5_GB_B1" "GB_B1" UNION ALL SELECT "GB_B2"."KEY" AS "KEY", "GB_B2"."Score_0" AS "Score_0", "GB_B2"."Score_1" AS "Score_1" 
FROM "TMP_20180602_MYE_GB_B2" "GB_B2" UNION ALL SELECT "GB_B3"."KEY" AS "KEY", "GB_B3"."Score_0" AS "Score_0", "GB_B3"."Score_1" AS "Score_1" 
FROM "TMP_20180602_2I5_GB_B3" "GB_B3") "GB_EnsembleUnion")
 SELECT "GB_sum"."KEY", "GB_sum"."Score_0", "GB_sum"."Score_1" 
FROM (SELECT "T"."KEY" AS "KEY", CAST("T"."Score_0" AS BINARY_DOUBLE) AS "Score_0", CAST("T"."Score_1" AS BINARY_DOUBLE) AS "Score_1" 
FROM (SELECT "GB_Union"."KEY" AS "KEY", sum("GB_Union"."Score_0") AS "Score_0", sum("GB_Union"."Score_1") AS "Score_1" 
FROM "GB_Union" GROUP BY "GB_Union"."KEY") "T") "GB_sum") "U"

-- Model deployment code

WITH orig_cte AS 
(SELECT "GB_sum"."KEY" AS "KEY", -(-0.10008345855698253 + 0.1 * "GB_sum"."Score_1") AS "Score_0", -0.10008345855698253 + 0.1 * "GB_sum"."Score_1" AS "Score_1", 1.0 - 1.0 / (1.0 + exp(least(greatest(-100.0, -(-0.10008345855698253 + 0.1 * "GB_sum"."Score_1")), 100.0))) AS "Proba_0", 1.0 / (1.0 + exp(least(greatest(-100.0, -(-0.10008345855698253 + 0.1 * "GB_sum"."Score_1")), 100.0))) AS "Proba_1", CAST(NULL AS BINARY_DOUBLE) AS "LogProba_0", CAST(NULL AS BINARY_DOUBLE) AS "LogProba_1", CAST(NULL AS NUMBER(19)) AS "Decision", CAST(NULL AS BINARY_DOUBLE) AS "DecisionProba" 
FROM "TMP_20180602_754_GB_SUM" "GB_sum"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_DOUBLE_INFINITY END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte