-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : RidgeClassifier_Pipeline
-- Dataset : digits
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180602150756_apr_ads_imp_1_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602150756_apr_ads_imp_1_out  (
	"KEY" BIGINT, 
	impter_2 DOUBLE PRECISION, 
	impter_3 DOUBLE PRECISION, 
	impter_4 DOUBLE PRECISION, 
	impter_5 DOUBLE PRECISION, 
	impter_6 DOUBLE PRECISION, 
	impter_7 DOUBLE PRECISION, 
	impter_8 DOUBLE PRECISION, 
	impter_9 DOUBLE PRECISION, 
	impter_10 DOUBLE PRECISION, 
	impter_11 DOUBLE PRECISION, 
	impter_12 DOUBLE PRECISION, 
	impter_13 DOUBLE PRECISION, 
	impter_14 DOUBLE PRECISION, 
	impter_15 DOUBLE PRECISION, 
	impter_16 DOUBLE PRECISION, 
	impter_17 DOUBLE PRECISION, 
	impter_18 DOUBLE PRECISION, 
	impter_19 DOUBLE PRECISION, 
	impter_20 DOUBLE PRECISION, 
	impter_21 DOUBLE PRECISION, 
	impter_22 DOUBLE PRECISION, 
	impter_23 DOUBLE PRECISION, 
	impter_24 DOUBLE PRECISION, 
	impter_25 DOUBLE PRECISION, 
	impter_26 DOUBLE PRECISION, 
	impter_27 DOUBLE PRECISION, 
	impter_28 DOUBLE PRECISION, 
	impter_29 DOUBLE PRECISION, 
	impter_30 DOUBLE PRECISION, 
	impter_31 DOUBLE PRECISION, 
	impter_32 DOUBLE PRECISION, 
	impter_33 DOUBLE PRECISION, 
	impter_34 DOUBLE PRECISION, 
	impter_35 DOUBLE PRECISION, 
	impter_36 DOUBLE PRECISION, 
	impter_37 DOUBLE PRECISION, 
	impter_38 DOUBLE PRECISION, 
	impter_39 DOUBLE PRECISION, 
	impter_40 DOUBLE PRECISION, 
	impter_41 DOUBLE PRECISION, 
	impter_42 DOUBLE PRECISION, 
	impter_43 DOUBLE PRECISION, 
	impter_44 DOUBLE PRECISION, 
	impter_45 DOUBLE PRECISION, 
	impter_46 DOUBLE PRECISION, 
	impter_47 DOUBLE PRECISION, 
	impter_48 DOUBLE PRECISION, 
	impter_49 DOUBLE PRECISION, 
	impter_50 DOUBLE PRECISION, 
	impter_51 DOUBLE PRECISION, 
	impter_52 DOUBLE PRECISION, 
	impter_53 DOUBLE PRECISION, 
	impter_54 DOUBLE PRECISION, 
	impter_55 DOUBLE PRECISION, 
	impter_56 DOUBLE PRECISION, 
	impter_57 DOUBLE PRECISION, 
	impter_58 DOUBLE PRECISION, 
	impter_59 DOUBLE PRECISION, 
	impter_60 DOUBLE PRECISION, 
	impter_61 DOUBLE PRECISION, 
	impter_62 DOUBLE PRECISION, 
	impter_63 DOUBLE PRECISION, 
	impter_64 DOUBLE PRECISION, 
	impter_65 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602150756_apr_ads_imp_1_out part 2. Populate

INSERT INTO tmp_20180602150756_apr_ads_imp_1_out ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11, impter_12, impter_13, impter_14, impter_15, impter_16, impter_17, impter_18, impter_19, impter_20, impter_21, impter_22, impter_23, impter_24, impter_25, impter_26, impter_27, impter_28, impter_29, impter_30, impter_31, impter_32, impter_33, impter_34, impter_35, impter_36, impter_37, impter_38, impter_39, impter_40, impter_41, impter_42, impter_43, impter_44, impter_45, impter_46, impter_47, impter_48, impter_49, impter_50, impter_51, impter_52, impter_53, impter_54, impter_55, impter_56, impter_57, impter_58, impter_59, impter_60, impter_61, impter_62, impter_63, impter_64, impter_65) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11, "U".impter_12, "U".impter_13, "U".impter_14, "U".impter_15, "U".impter_16, "U".impter_17, "U".impter_18, "U".impter_19, "U".impter_20, "U".impter_21, "U".impter_22, "U".impter_23, "U".impter_24, "U".impter_25, "U".impter_26, "U".impter_27, "U".impter_28, "U".impter_29, "U".impter_30, "U".impter_31, "U".impter_32, "U".impter_33, "U".impter_34, "U".impter_35, "U".impter_36, "U".impter_37, "U".impter_38, "U".impter_39, "U".impter_40, "U".impter_41, "U".impter_42, "U".impter_43, "U".impter_44, "U".impter_45, "U".impter_46, "U".impter_47, "U".impter_48, "U".impter_49, "U".impter_50, "U".impter_51, "U".impter_52, "U".impter_53, "U".impter_54, "U".impter_55, "U".impter_56, "U".impter_57, "U".impter_58, "U".impter_59, "U".impter_60, "U".impter_61, "U".impter_62, "U".impter_63, "U".impter_64, "U".impter_65 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11, "ADS_imp_1_OUT".impter_12, "ADS_imp_1_OUT".impter_13, "ADS_imp_1_OUT".impter_14, "ADS_imp_1_OUT".impter_15, "ADS_imp_1_OUT".impter_16, "ADS_imp_1_OUT".impter_17, "ADS_imp_1_OUT".impter_18, "ADS_imp_1_OUT".impter_19, "ADS_imp_1_OUT".impter_20, "ADS_imp_1_OUT".impter_21, "ADS_imp_1_OUT".impter_22, "ADS_imp_1_OUT".impter_23, "ADS_imp_1_OUT".impter_24, "ADS_imp_1_OUT".impter_25, "ADS_imp_1_OUT".impter_26, "ADS_imp_1_OUT".impter_27, "ADS_imp_1_OUT".impter_28, "ADS_imp_1_OUT".impter_29, "ADS_imp_1_OUT".impter_30, "ADS_imp_1_OUT".impter_31, "ADS_imp_1_OUT".impter_32, "ADS_imp_1_OUT".impter_33, "ADS_imp_1_OUT".impter_34, "ADS_imp_1_OUT".impter_35, "ADS_imp_1_OUT".impter_36, "ADS_imp_1_OUT".impter_37, "ADS_imp_1_OUT".impter_38, "ADS_imp_1_OUT".impter_39, "ADS_imp_1_OUT".impter_40, "ADS_imp_1_OUT".impter_41, "ADS_imp_1_OUT".impter_42, "ADS_imp_1_OUT".impter_43, "ADS_imp_1_OUT".impter_44, "ADS_imp_1_OUT".impter_45, "ADS_imp_1_OUT".impter_46, "ADS_imp_1_OUT".impter_47, "ADS_imp_1_OUT".impter_48, "ADS_imp_1_OUT".impter_49, "ADS_imp_1_OUT".impter_50, "ADS_imp_1_OUT".impter_51, "ADS_imp_1_OUT".impter_52, "ADS_imp_1_OUT".impter_53, "ADS_imp_1_OUT".impter_54, "ADS_imp_1_OUT".impter_55, "ADS_imp_1_OUT".impter_56, "ADS_imp_1_OUT".impter_57, "ADS_imp_1_OUT".impter_58, "ADS_imp_1_OUT".impter_59, "ADS_imp_1_OUT".impter_60, "ADS_imp_1_OUT".impter_61, "ADS_imp_1_OUT".impter_62, "ADS_imp_1_OUT".impter_63, "ADS_imp_1_OUT".impter_64, "ADS_imp_1_OUT".impter_65 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.2950591510090466 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 5.104384133611691 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 11.791927627000696 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 11.84829505915101 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 5.823242867084203 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 1.394572025052192 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.13430758524704245 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0055671537926235215 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 1.977035490605428 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 10.362560890744607 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 12.03061934585943 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 10.271398747390396 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 8.121781489213639 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 1.8921363952679193 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.11760612386917188 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0020876826722338203 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 2.5427974947807934 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 9.935281837160751 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 7.099512874043145 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN 7.132915796798887 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN 7.81419624217119 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 1.8434237995824634 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 0.05775922059846903 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN 0.0006958942240779402 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN 2.4808629088378567 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN 9.143354210160055 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 8.960334029227557 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 10.03688239387613 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 7.5949895615866385 ELSE "ADS"."Feature_29" END AS impter_31, CASE WHEN ("ADS"."Feature_30" IS NULL) THEN 2.337508698677801 ELSE "ADS"."Feature_30" END AS impter_32, CASE WHEN ("ADS"."Feature_31" IS NULL) THEN 0.0027835768963117608 ELSE "ADS"."Feature_31" END AS impter_33, CASE WHEN ("ADS"."Feature_32" IS NULL) THEN 0.0 ELSE "ADS"."Feature_32" END AS impter_34, CASE WHEN ("ADS"."Feature_33" IS NULL) THEN 2.3319415448851775 ELSE "ADS"."Feature_33" END AS impter_35, CASE WHEN ("ADS"."Feature_34" IS NULL) THEN 7.608907446068198 ELSE "ADS"."Feature_34" END AS impter_36, CASE WHEN ("ADS"."Feature_35" IS NULL) THEN 9.028531663187195 ELSE "ADS"."Feature_35" END AS impter_37, CASE WHEN ("ADS"."Feature_36" IS NULL) THEN 10.270006958942242 ELSE "ADS"."Feature_36" END AS impter_38, CASE WHEN ("ADS"."Feature_37" IS NULL) THEN 8.806541405706332 ELSE "ADS"."Feature_37" END AS impter_39, CASE WHEN ("ADS"."Feature_38" IS NULL) THEN 2.8754349338900487 ELSE "ADS"."Feature_38" END AS impter_40, CASE WHEN ("ADS"."Feature_39" IS NULL) THEN 0.0 ELSE "ADS"."Feature_39" END AS impter_41, CASE WHEN ("ADS"."Feature_40" IS NULL) THEN 0.010438413361169102 ELSE "ADS"."Feature_40" END AS impter_42, CASE WHEN ("ADS"."Feature_41" IS NULL) THEN 1.5755045233124565 ELSE "ADS"."Feature_41" END AS impter_43, CASE WHEN ("ADS"."Feature_42" IS NULL) THEN 6.858733472512178 ELSE "ADS"."Feature_42" END AS impter_44, CASE WHEN ("ADS"."Feature_43" IS NULL) THEN 7.258872651356993 ELSE "ADS"."Feature_43" END AS impter_45, CASE WHEN ("ADS"."Feature_44" IS NULL) THEN 7.710508002783577 ELSE "ADS"."Feature_44" END AS impter_46, CASE WHEN ("ADS"."Feature_45" IS NULL) THEN 8.281141266527488 ELSE "ADS"."Feature_45" END AS impter_47, CASE WHEN ("ADS"."Feature_46" IS NULL) THEN 3.432150313152401 ELSE "ADS"."Feature_46" END AS impter_48, CASE WHEN ("ADS"."Feature_47" IS NULL) THEN 0.031315240083507306 ELSE "ADS"."Feature_47" END AS impter_49, CASE WHEN ("ADS"."Feature_48" IS NULL) THEN 0.009046624913013222 ELSE "ADS"."Feature_48" END AS impter_50, CASE WHEN ("ADS"."Feature_49" IS NULL) THEN 0.708420320111343 ELSE "ADS"."Feature_49" END AS impter_51, CASE WHEN ("ADS"."Feature_50" IS NULL) THEN 7.492693110647181 ELSE "ADS"."Feature_50" END AS impter_52, CASE WHEN ("ADS"."Feature_51" IS NULL) THEN 9.529575504523313 ELSE "ADS"."Feature_51" END AS impter_53, CASE WHEN ("ADS"."Feature_52" IS NULL) THEN 9.541405706332638 ELSE "ADS"."Feature_52" END AS impter_54, CASE WHEN ("ADS"."Feature_53" IS NULL) THEN 8.754349338900488 ELSE "ADS"."Feature_53" END AS impter_55, CASE WHEN ("ADS"."Feature_54" IS NULL) THEN 3.7397355601948505 ELSE "ADS"."Feature_54" END AS impter_56, CASE WHEN ("ADS"."Feature_55" IS NULL) THEN 0.21920668058455114 ELSE "ADS"."Feature_55" END AS impter_57, CASE WHEN ("ADS"."Feature_56" IS NULL) THEN 0.0006958942240779402 ELSE "ADS"."Feature_56" END AS impter_58, CASE WHEN ("ADS"."Feature_57" IS NULL) THEN 0.26374391092553934 ELSE "ADS"."Feature_57" END AS impter_59, CASE WHEN ("ADS"."Feature_58" IS NULL) THEN 5.474599860821155 ELSE "ADS"."Feature_58" END AS impter_60, CASE WHEN ("ADS"."Feature_59" IS NULL) THEN 12.097425191370911 ELSE "ADS"."Feature_59" END AS impter_61, CASE WHEN ("ADS"."Feature_60" IS NULL) THEN 11.8580375782881 ELSE "ADS"."Feature_60" END AS impter_62, CASE WHEN ("ADS"."Feature_61" IS NULL) THEN 6.716771050800278 ELSE "ADS"."Feature_61" END AS impter_63, CASE WHEN ("ADS"."Feature_62" IS NULL) THEN 2.0869867780097424 ELSE "ADS"."Feature_62" END AS impter_64, CASE WHEN ("ADS"."Feature_63" IS NULL) THEN 0.3862212943632568 ELSE "ADS"."Feature_63" END AS impter_65 
FROM digits AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180602150756_zwa_ads_sca_2_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602150756_zwa_ads_sca_2_out  (
	"KEY" BIGINT, 
	scaler_2 DOUBLE PRECISION, 
	scaler_3 DOUBLE PRECISION, 
	scaler_4 DOUBLE PRECISION, 
	scaler_5 DOUBLE PRECISION, 
	scaler_6 DOUBLE PRECISION, 
	scaler_7 DOUBLE PRECISION, 
	scaler_8 DOUBLE PRECISION, 
	scaler_9 DOUBLE PRECISION, 
	scaler_10 DOUBLE PRECISION, 
	scaler_11 DOUBLE PRECISION, 
	scaler_12 DOUBLE PRECISION, 
	scaler_13 DOUBLE PRECISION, 
	scaler_14 DOUBLE PRECISION, 
	scaler_15 DOUBLE PRECISION, 
	scaler_16 DOUBLE PRECISION, 
	scaler_17 DOUBLE PRECISION, 
	scaler_18 DOUBLE PRECISION, 
	scaler_19 DOUBLE PRECISION, 
	scaler_20 DOUBLE PRECISION, 
	scaler_21 DOUBLE PRECISION, 
	scaler_22 DOUBLE PRECISION, 
	scaler_23 DOUBLE PRECISION, 
	scaler_24 DOUBLE PRECISION, 
	scaler_25 DOUBLE PRECISION, 
	scaler_26 DOUBLE PRECISION, 
	scaler_27 DOUBLE PRECISION, 
	scaler_28 DOUBLE PRECISION, 
	scaler_29 DOUBLE PRECISION, 
	scaler_30 DOUBLE PRECISION, 
	scaler_31 DOUBLE PRECISION, 
	scaler_32 DOUBLE PRECISION, 
	scaler_33 DOUBLE PRECISION, 
	scaler_34 DOUBLE PRECISION, 
	scaler_35 DOUBLE PRECISION, 
	scaler_36 DOUBLE PRECISION, 
	scaler_37 DOUBLE PRECISION, 
	scaler_38 DOUBLE PRECISION, 
	scaler_39 DOUBLE PRECISION, 
	scaler_40 DOUBLE PRECISION, 
	scaler_41 DOUBLE PRECISION, 
	scaler_42 DOUBLE PRECISION, 
	scaler_43 DOUBLE PRECISION, 
	scaler_44 DOUBLE PRECISION, 
	scaler_45 DOUBLE PRECISION, 
	scaler_46 DOUBLE PRECISION, 
	scaler_47 DOUBLE PRECISION, 
	scaler_48 DOUBLE PRECISION, 
	scaler_49 DOUBLE PRECISION, 
	scaler_50 DOUBLE PRECISION, 
	scaler_51 DOUBLE PRECISION, 
	scaler_52 DOUBLE PRECISION, 
	scaler_53 DOUBLE PRECISION, 
	scaler_54 DOUBLE PRECISION, 
	scaler_55 DOUBLE PRECISION, 
	scaler_56 DOUBLE PRECISION, 
	scaler_57 DOUBLE PRECISION, 
	scaler_58 DOUBLE PRECISION, 
	scaler_59 DOUBLE PRECISION, 
	scaler_60 DOUBLE PRECISION, 
	scaler_61 DOUBLE PRECISION, 
	scaler_62 DOUBLE PRECISION, 
	scaler_63 DOUBLE PRECISION, 
	scaler_64 DOUBLE PRECISION, 
	scaler_65 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602150756_zwa_ads_sca_2_out part 2. Populate

INSERT INTO tmp_20180602150756_zwa_ads_sca_2_out ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11, "U".scaler_12, "U".scaler_13, "U".scaler_14, "U".scaler_15, "U".scaler_16, "U".scaler_17, "U".scaler_18, "U".scaler_19, "U".scaler_20, "U".scaler_21, "U".scaler_22, "U".scaler_23, "U".scaler_24, "U".scaler_25, "U".scaler_26, "U".scaler_27, "U".scaler_28, "U".scaler_29, "U".scaler_30, "U".scaler_31, "U".scaler_32, "U".scaler_33, "U".scaler_34, "U".scaler_35, "U".scaler_36, "U".scaler_37, "U".scaler_38, "U".scaler_39, "U".scaler_40, "U".scaler_41, "U".scaler_42, "U".scaler_43, "U".scaler_44, "U".scaler_45, "U".scaler_46, "U".scaler_47, "U".scaler_48, "U".scaler_49, "U".scaler_50, "U".scaler_51, "U".scaler_52, "U".scaler_53, "U".scaler_54, "U".scaler_55, "U".scaler_56, "U".scaler_57, "U".scaler_58, "U".scaler_59, "U".scaler_60, "U".scaler_61, "U".scaler_62, "U".scaler_63, "U".scaler_64, "U".scaler_65 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11, "ADS_sca_2_OUT".scaler_12, "ADS_sca_2_OUT".scaler_13, "ADS_sca_2_OUT".scaler_14, "ADS_sca_2_OUT".scaler_15, "ADS_sca_2_OUT".scaler_16, "ADS_sca_2_OUT".scaler_17, "ADS_sca_2_OUT".scaler_18, "ADS_sca_2_OUT".scaler_19, "ADS_sca_2_OUT".scaler_20, "ADS_sca_2_OUT".scaler_21, "ADS_sca_2_OUT".scaler_22, "ADS_sca_2_OUT".scaler_23, "ADS_sca_2_OUT".scaler_24, "ADS_sca_2_OUT".scaler_25, "ADS_sca_2_OUT".scaler_26, "ADS_sca_2_OUT".scaler_27, "ADS_sca_2_OUT".scaler_28, "ADS_sca_2_OUT".scaler_29, "ADS_sca_2_OUT".scaler_30, "ADS_sca_2_OUT".scaler_31, "ADS_sca_2_OUT".scaler_32, "ADS_sca_2_OUT".scaler_33, "ADS_sca_2_OUT".scaler_34, "ADS_sca_2_OUT".scaler_35, "ADS_sca_2_OUT".scaler_36, "ADS_sca_2_OUT".scaler_37, "ADS_sca_2_OUT".scaler_38, "ADS_sca_2_OUT".scaler_39, "ADS_sca_2_OUT".scaler_40, "ADS_sca_2_OUT".scaler_41, "ADS_sca_2_OUT".scaler_42, "ADS_sca_2_OUT".scaler_43, "ADS_sca_2_OUT".scaler_44, "ADS_sca_2_OUT".scaler_45, "ADS_sca_2_OUT".scaler_46, "ADS_sca_2_OUT".scaler_47, "ADS_sca_2_OUT".scaler_48, "ADS_sca_2_OUT".scaler_49, "ADS_sca_2_OUT".scaler_50, "ADS_sca_2_OUT".scaler_51, "ADS_sca_2_OUT".scaler_52, "ADS_sca_2_OUT".scaler_53, "ADS_sca_2_OUT".scaler_54, "ADS_sca_2_OUT".scaler_55, "ADS_sca_2_OUT".scaler_56, "ADS_sca_2_OUT".scaler_57, "ADS_sca_2_OUT".scaler_58, "ADS_sca_2_OUT".scaler_59, "ADS_sca_2_OUT".scaler_60, "ADS_sca_2_OUT".scaler_61, "ADS_sca_2_OUT".scaler_62, "ADS_sca_2_OUT".scaler_63, "ADS_sca_2_OUT".scaler_64, "ADS_sca_2_OUT".scaler_65 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS DOUBLE PRECISION) - CAST(0.0 AS DOUBLE PRECISION)) / CAST(1.0 AS DOUBLE PRECISION) AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS DOUBLE PRECISION) - CAST(0.295059151009047 AS DOUBLE PRECISION)) / CAST(0.886335971513945 AS DOUBLE PRECISION) AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS DOUBLE PRECISION) - CAST(5.104384133611691 AS DOUBLE PRECISION)) / CAST(4.714562522364591 AS DOUBLE PRECISION) AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS DOUBLE PRECISION) - CAST(11.791927627000696 AS DOUBLE PRECISION)) / CAST(4.242705177561994 AS DOUBLE PRECISION) AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS DOUBLE PRECISION) - CAST(11.84829505915101 AS DOUBLE PRECISION)) / CAST(4.298607850485783 AS DOUBLE PRECISION) AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS DOUBLE PRECISION) - CAST(5.823242867084203 AS DOUBLE PRECISION)) / CAST(5.664052593352563 AS DOUBLE PRECISION) AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS DOUBLE PRECISION) - CAST(1.394572025052192 AS DOUBLE PRECISION)) / CAST(3.367253749888978 AS DOUBLE PRECISION) AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS DOUBLE PRECISION) - CAST(0.134307585247042 AS DOUBLE PRECISION)) / CAST(1.073848896106088 AS DOUBLE PRECISION) AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS DOUBLE PRECISION) - CAST(0.005567153792624 AS DOUBLE PRECISION)) / CAST(0.091212595005212 AS DOUBLE PRECISION) AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS DOUBLE PRECISION) - CAST(1.977035490605428 AS DOUBLE PRECISION)) / CAST(3.176575951344838 AS DOUBLE PRECISION) AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS DOUBLE PRECISION) - CAST(10.362560890744607 AS DOUBLE PRECISION)) / CAST(5.427455768043861 AS DOUBLE PRECISION) AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS DOUBLE PRECISION) - CAST(12.03061934585943 AS DOUBLE PRECISION)) / CAST(3.92400431269586 AS DOUBLE PRECISION) AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS DOUBLE PRECISION) - CAST(10.271398747390396 AS DOUBLE PRECISION)) / CAST(4.751306782008032 AS DOUBLE PRECISION) AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS DOUBLE PRECISION) - CAST(8.121781489213639 AS DOUBLE PRECISION)) / CAST(6.055742470420089 AS DOUBLE PRECISION) AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS DOUBLE PRECISION) - CAST(1.892136395267919 AS DOUBLE PRECISION)) / CAST(3.63584960156055 AS DOUBLE PRECISION) AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS DOUBLE PRECISION) - CAST(0.117606123869172 AS DOUBLE PRECISION)) / CAST(0.880913584840726 AS DOUBLE PRECISION) AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS DOUBLE PRECISION) - CAST(0.002087682672234 AS DOUBLE PRECISION)) / CAST(0.045643446991807 AS DOUBLE PRECISION) AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS DOUBLE PRECISION) - CAST(2.542797494780794 AS DOUBLE PRECISION)) / CAST(3.535939148296097 AS DOUBLE PRECISION) AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS DOUBLE PRECISION) - CAST(9.935281837160751 AS DOUBLE PRECISION)) / CAST(5.674233427535142 AS DOUBLE PRECISION) AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS DOUBLE PRECISION) - CAST(7.099512874043145 AS DOUBLE PRECISION)) / CAST(5.828968622118506 AS DOUBLE PRECISION) AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS DOUBLE PRECISION) - CAST(7.132915796798887 AS DOUBLE PRECISION)) / CAST(6.164166380758013 AS DOUBLE PRECISION) AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS DOUBLE PRECISION) - CAST(7.81419624217119 AS DOUBLE PRECISION)) / CAST(6.237214641441282 AS DOUBLE PRECISION) AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS DOUBLE PRECISION) - CAST(1.843423799582464 AS DOUBLE PRECISION)) / CAST(3.355296849525941 AS DOUBLE PRECISION) AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS DOUBLE PRECISION) - CAST(0.057759220598469 AS DOUBLE PRECISION)) / CAST(0.470571680844726 AS DOUBLE PRECISION) AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS DOUBLE PRECISION) - CAST(0.000695894224078 AS DOUBLE PRECISION)) / CAST(0.026370626752256 AS DOUBLE PRECISION) AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS DOUBLE PRECISION) - CAST(2.480862908837856 AS DOUBLE PRECISION)) / CAST(3.1579531140533 AS DOUBLE PRECISION) AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS DOUBLE PRECISION) - CAST(9.143354210160055 AS DOUBLE PRECISION)) / CAST(6.211448620771221 AS DOUBLE PRECISION) AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS DOUBLE PRECISION) - CAST(8.960334029227557 AS DOUBLE PRECISION)) / CAST(5.872499336895779 AS DOUBLE PRECISION) AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS DOUBLE PRECISION) - CAST(10.03688239387613 AS DOUBLE PRECISION)) / CAST(6.131194138822921 AS DOUBLE PRECISION) AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS DOUBLE PRECISION) - CAST(7.594989561586639 AS DOUBLE PRECISION)) / CAST(5.883009512311774 AS DOUBLE PRECISION) AS scaler_31, (CAST("ADS_imp_1_OUT".impter_32 AS DOUBLE PRECISION) - CAST(2.337508698677801 AS DOUBLE PRECISION)) / CAST(3.75551631210054 AS DOUBLE PRECISION) AS scaler_32, (CAST("ADS_imp_1_OUT".impter_33 AS DOUBLE PRECISION) - CAST(0.002783576896312 AS DOUBLE PRECISION)) / CAST(0.052686132862207 AS DOUBLE PRECISION) AS scaler_33, (CAST("ADS_imp_1_OUT".impter_34 AS DOUBLE PRECISION) - CAST(0.0 AS DOUBLE PRECISION)) / CAST(1.0 AS DOUBLE PRECISION) AS scaler_34, (CAST("ADS_imp_1_OUT".impter_35 AS DOUBLE PRECISION) - CAST(2.331941544885178 AS DOUBLE PRECISION)) / CAST(3.520361676701363 AS DOUBLE PRECISION) AS scaler_35, (CAST("ADS_imp_1_OUT".impter_36 AS DOUBLE PRECISION) - CAST(7.608907446068198 AS DOUBLE PRECISION)) / CAST(6.337427127154217 AS DOUBLE PRECISION) AS scaler_36, (CAST("ADS_imp_1_OUT".impter_37 AS DOUBLE PRECISION) - CAST(9.028531663187197 AS DOUBLE PRECISION)) / CAST(6.255398792908601 AS DOUBLE PRECISION) AS scaler_37, (CAST("ADS_imp_1_OUT".impter_38 AS DOUBLE PRECISION) - CAST(10.270006958942242 AS DOUBLE PRECISION)) / CAST(5.918328236602452 AS DOUBLE PRECISION) AS scaler_38, (CAST("ADS_imp_1_OUT".impter_39 AS DOUBLE PRECISION) - CAST(8.806541405706332 AS DOUBLE PRECISION)) / CAST(5.862505948752236 AS DOUBLE PRECISION) AS scaler_39, (CAST("ADS_imp_1_OUT".impter_40 AS DOUBLE PRECISION) - CAST(2.875434933890048 AS DOUBLE PRECISION)) / CAST(3.521551388880749 AS DOUBLE PRECISION) AS scaler_40, (CAST("ADS_imp_1_OUT".impter_41 AS DOUBLE PRECISION) - CAST(0.0 AS DOUBLE PRECISION)) / CAST(1.0 AS DOUBLE PRECISION) AS scaler_41, (CAST("ADS_imp_1_OUT".impter_42 AS DOUBLE PRECISION) - CAST(0.010438413361169 AS DOUBLE PRECISION)) / CAST(0.160122221497781 AS DOUBLE PRECISION) AS scaler_42, (CAST("ADS_imp_1_OUT".impter_43 AS DOUBLE PRECISION) - CAST(1.575504523312456 AS DOUBLE PRECISION)) / CAST(3.014815857559124 AS DOUBLE PRECISION) AS scaler_43, (CAST("ADS_imp_1_OUT".impter_44 AS DOUBLE PRECISION) - CAST(6.858733472512178 AS DOUBLE PRECISION)) / CAST(6.542209340765544 AS DOUBLE PRECISION) AS scaler_44, (CAST("ADS_imp_1_OUT".impter_45 AS DOUBLE PRECISION) - CAST(7.258872651356993 AS DOUBLE PRECISION)) / CAST(6.490917554434448 AS DOUBLE PRECISION) AS scaler_45, (CAST("ADS_imp_1_OUT".impter_46 AS DOUBLE PRECISION) - CAST(7.710508002783577 AS DOUBLE PRECISION)) / CAST(6.292873620677289 AS DOUBLE PRECISION) AS scaler_46, (CAST("ADS_imp_1_OUT".impter_47 AS DOUBLE PRECISION) - CAST(8.281141266527488 AS DOUBLE PRECISION)) / CAST(5.713309549149251 AS DOUBLE PRECISION) AS scaler_47, (CAST("ADS_imp_1_OUT".impter_48 AS DOUBLE PRECISION) - CAST(3.432150313152401 AS DOUBLE PRECISION)) / CAST(4.326500259143386 AS DOUBLE PRECISION) AS scaler_48, (CAST("ADS_imp_1_OUT".impter_49 AS DOUBLE PRECISION) - CAST(0.031315240083507 AS DOUBLE PRECISION)) / CAST(0.333254145983304 AS DOUBLE PRECISION) AS scaler_49, (CAST("ADS_imp_1_OUT".impter_50 AS DOUBLE PRECISION) - CAST(0.009046624913013 AS DOUBLE PRECISION)) / CAST(0.228276642220633 AS DOUBLE PRECISION) AS scaler_50, (CAST("ADS_imp_1_OUT".impter_51 AS DOUBLE PRECISION) - CAST(0.708420320111343 AS DOUBLE PRECISION)) / CAST(1.763076823218346 AS DOUBLE PRECISION) AS scaler_51, (CAST("ADS_imp_1_OUT".impter_52 AS DOUBLE PRECISION) - CAST(7.492693110647181 AS DOUBLE PRECISION)) / CAST(5.674735747339335 AS DOUBLE PRECISION) AS scaler_52, (CAST("ADS_imp_1_OUT".impter_53 AS DOUBLE PRECISION) - CAST(9.529575504523313 AS DOUBLE PRECISION)) / CAST(5.230790022511772 AS DOUBLE PRECISION) AS scaler_53, (CAST("ADS_imp_1_OUT".impter_54 AS DOUBLE PRECISION) - CAST(9.541405706332638 AS DOUBLE PRECISION)) / CAST(5.251555514694703 AS DOUBLE PRECISION) AS scaler_54, (CAST("ADS_imp_1_OUT".impter_55 AS DOUBLE PRECISION) - CAST(8.754349338900488 AS DOUBLE PRECISION)) / CAST(6.034364897758397 AS DOUBLE PRECISION) AS scaler_55, (CAST("ADS_imp_1_OUT".impter_56 AS DOUBLE PRECISION) - CAST(3.73973556019485 AS DOUBLE PRECISION)) / CAST(4.953834269857758 AS DOUBLE PRECISION) AS scaler_56, (CAST("ADS_imp_1_OUT".impter_57 AS DOUBLE PRECISION) - CAST(0.219206680584551 AS DOUBLE PRECISION)) / CAST(1.025747142064914 AS DOUBLE PRECISION) AS scaler_57, (CAST("ADS_imp_1_OUT".impter_58 AS DOUBLE PRECISION) - CAST(0.000695894224078 AS DOUBLE PRECISION)) / CAST(0.026370626752257 AS DOUBLE PRECISION) AS scaler_58, (CAST("ADS_imp_1_OUT".impter_59 AS DOUBLE PRECISION) - CAST(0.263743910925539 AS DOUBLE PRECISION)) / CAST(0.893431165157604 AS DOUBLE PRECISION) AS scaler_59, (CAST("ADS_imp_1_OUT".impter_60 AS DOUBLE PRECISION) - CAST(5.474599860821155 AS DOUBLE PRECISION)) / CAST(5.06659361292149 AS DOUBLE PRECISION) AS scaler_60, (CAST("ADS_imp_1_OUT".impter_61 AS DOUBLE PRECISION) - CAST(12.097425191370911 AS DOUBLE PRECISION)) / CAST(4.359965306758356 AS DOUBLE PRECISION) AS scaler_61, (CAST("ADS_imp_1_OUT".impter_62 AS DOUBLE PRECISION) - CAST(11.8580375782881 AS DOUBLE PRECISION)) / CAST(4.889242282258171 AS DOUBLE PRECISION) AS scaler_62, (CAST("ADS_imp_1_OUT".impter_63 AS DOUBLE PRECISION) - CAST(6.716771050800278 AS DOUBLE PRECISION)) / CAST(5.87255780345831 AS DOUBLE PRECISION) AS scaler_63, (CAST("ADS_imp_1_OUT".impter_64 AS DOUBLE PRECISION) - CAST(2.086986778009742 AS DOUBLE PRECISION)) / CAST(4.12826085471658 AS DOUBLE PRECISION) AS scaler_64, (CAST("ADS_imp_1_OUT".impter_65 AS DOUBLE PRECISION) - CAST(0.386221294363257 AS DOUBLE PRECISION)) / CAST(1.915153500596726 AS DOUBLE PRECISION) AS scaler_65 
FROM tmp_20180602150756_apr_ads_imp_1_out AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Model deployment code

WITH linear_input AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) AS scaler_11, CAST("ADS_sca_2_OUT".scaler_12 AS DOUBLE PRECISION) AS scaler_12, CAST("ADS_sca_2_OUT".scaler_13 AS DOUBLE PRECISION) AS scaler_13, CAST("ADS_sca_2_OUT".scaler_14 AS DOUBLE PRECISION) AS scaler_14, CAST("ADS_sca_2_OUT".scaler_15 AS DOUBLE PRECISION) AS scaler_15, CAST("ADS_sca_2_OUT".scaler_16 AS DOUBLE PRECISION) AS scaler_16, CAST("ADS_sca_2_OUT".scaler_17 AS DOUBLE PRECISION) AS scaler_17, CAST("ADS_sca_2_OUT".scaler_18 AS DOUBLE PRECISION) AS scaler_18, CAST("ADS_sca_2_OUT".scaler_19 AS DOUBLE PRECISION) AS scaler_19, CAST("ADS_sca_2_OUT".scaler_20 AS DOUBLE PRECISION) AS scaler_20, CAST("ADS_sca_2_OUT".scaler_21 AS DOUBLE PRECISION) AS scaler_21, CAST("ADS_sca_2_OUT".scaler_22 AS DOUBLE PRECISION) AS scaler_22, CAST("ADS_sca_2_OUT".scaler_23 AS DOUBLE PRECISION) AS scaler_23, CAST("ADS_sca_2_OUT".scaler_24 AS DOUBLE PRECISION) AS scaler_24, CAST("ADS_sca_2_OUT".scaler_25 AS DOUBLE PRECISION) AS scaler_25, CAST("ADS_sca_2_OUT".scaler_26 AS DOUBLE PRECISION) AS scaler_26, CAST("ADS_sca_2_OUT".scaler_27 AS DOUBLE PRECISION) AS scaler_27, CAST("ADS_sca_2_OUT".scaler_28 AS DOUBLE PRECISION) AS scaler_28, CAST("ADS_sca_2_OUT".scaler_29 AS DOUBLE PRECISION) AS scaler_29, CAST("ADS_sca_2_OUT".scaler_30 AS DOUBLE PRECISION) AS scaler_30, CAST("ADS_sca_2_OUT".scaler_31 AS DOUBLE PRECISION) AS scaler_31, CAST("ADS_sca_2_OUT".scaler_32 AS DOUBLE PRECISION) AS scaler_32, CAST("ADS_sca_2_OUT".scaler_33 AS DOUBLE PRECISION) AS scaler_33, CAST("ADS_sca_2_OUT".scaler_34 AS DOUBLE PRECISION) AS scaler_34, CAST("ADS_sca_2_OUT".scaler_35 AS DOUBLE PRECISION) AS scaler_35, CAST("ADS_sca_2_OUT".scaler_36 AS DOUBLE PRECISION) AS scaler_36, CAST("ADS_sca_2_OUT".scaler_37 AS DOUBLE PRECISION) AS scaler_37, CAST("ADS_sca_2_OUT".scaler_38 AS DOUBLE PRECISION) AS scaler_38, CAST("ADS_sca_2_OUT".scaler_39 AS DOUBLE PRECISION) AS scaler_39, CAST("ADS_sca_2_OUT".scaler_40 AS DOUBLE PRECISION) AS scaler_40, CAST("ADS_sca_2_OUT".scaler_41 AS DOUBLE PRECISION) AS scaler_41, CAST("ADS_sca_2_OUT".scaler_42 AS DOUBLE PRECISION) AS scaler_42, CAST("ADS_sca_2_OUT".scaler_43 AS DOUBLE PRECISION) AS scaler_43, CAST("ADS_sca_2_OUT".scaler_44 AS DOUBLE PRECISION) AS scaler_44, CAST("ADS_sca_2_OUT".scaler_45 AS DOUBLE PRECISION) AS scaler_45, CAST("ADS_sca_2_OUT".scaler_46 AS DOUBLE PRECISION) AS scaler_46, CAST("ADS_sca_2_OUT".scaler_47 AS DOUBLE PRECISION) AS scaler_47, CAST("ADS_sca_2_OUT".scaler_48 AS DOUBLE PRECISION) AS scaler_48, CAST("ADS_sca_2_OUT".scaler_49 AS DOUBLE PRECISION) AS scaler_49, CAST("ADS_sca_2_OUT".scaler_50 AS DOUBLE PRECISION) AS scaler_50, CAST("ADS_sca_2_OUT".scaler_51 AS DOUBLE PRECISION) AS scaler_51, CAST("ADS_sca_2_OUT".scaler_52 AS DOUBLE PRECISION) AS scaler_52, CAST("ADS_sca_2_OUT".scaler_53 AS DOUBLE PRECISION) AS scaler_53, CAST("ADS_sca_2_OUT".scaler_54 AS DOUBLE PRECISION) AS scaler_54, CAST("ADS_sca_2_OUT".scaler_55 AS DOUBLE PRECISION) AS scaler_55, CAST("ADS_sca_2_OUT".scaler_56 AS DOUBLE PRECISION) AS scaler_56, CAST("ADS_sca_2_OUT".scaler_57 AS DOUBLE PRECISION) AS scaler_57, CAST("ADS_sca_2_OUT".scaler_58 AS DOUBLE PRECISION) AS scaler_58, CAST("ADS_sca_2_OUT".scaler_59 AS DOUBLE PRECISION) AS scaler_59, CAST("ADS_sca_2_OUT".scaler_60 AS DOUBLE PRECISION) AS scaler_60, CAST("ADS_sca_2_OUT".scaler_61 AS DOUBLE PRECISION) AS scaler_61, CAST("ADS_sca_2_OUT".scaler_62 AS DOUBLE PRECISION) AS scaler_62, CAST("ADS_sca_2_OUT".scaler_63 AS DOUBLE PRECISION) AS scaler_63, CAST("ADS_sca_2_OUT".scaler_64 AS DOUBLE PRECISION) AS scaler_64, CAST("ADS_sca_2_OUT".scaler_65 AS DOUBLE PRECISION) AS scaler_65 
FROM tmp_20180602150756_zwa_ads_sca_2_out AS "ADS_sca_2_OUT"), 
linear_model_cte AS 
(SELECT linear_input."KEY" AS "KEY", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-0.006255924864634 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(0.017106223433351 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(0.049531417460415 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-0.031758889064265 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-0.089562326341431 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(0.024962321101822 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(0.003978795134267 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(0.00120757215012 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-0.028617525922362 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-0.000667807939097 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(-0.012280504737917 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(0.074792856137094 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(0.094204499915713 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-0.015949972893502 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-0.019760394433543 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-0.00185600256244 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(0.033864821278614 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(-0.028968876113318 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(0.021034464912126 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-0.031716879410378 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(0.10118908575975 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(0.006885594129529 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(0.001286798624282 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.007647932185046 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(0.057957547004842 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(0.003628874939061 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-0.03396012974495 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(-0.155383150454518 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(-0.080543151284267 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(0.063546195372975 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(0.000466508650203 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(0.022259780546912 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(0.03253532182752 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-0.117783389002106 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-0.0261597674728 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-0.085960331337842 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(0.082711391860318 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(0.001974410878276 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-0.050721430440398 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(0.128899134103832 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-0.119114881328019 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(-0.130485959875754 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(0.023974375128824 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-0.00092512221046 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-0.000907949715599 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-0.015307230770454 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-0.042652297346259 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(0.034618526560159 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(0.060899897519529 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(0.085330926698701 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(0.014368359969306 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-0.08601021586671 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(0.021438811986564 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.006155698575093 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(0.012008827771063 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-0.042254992052624 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(0.001033466009426 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-0.036489490380603 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-0.017552705347632 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(0.00108779308759 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-0.004469120930673 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.807933194154488 AS DOUBLE PRECISION) AS "Score_0", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-0.002738483466439 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-0.000368798786777 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(0.071168614275073 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-0.124677193744 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(0.096870309655591 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(0.018553006447964 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-0.010607998565707 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-0.009175131660217 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-0.050399402537898 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-0.168787083158132 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(-0.05629876214638 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(0.018959544297292 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(0.135709759627188 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-0.076104690915857 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(0.002703307156568 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(0.000108650636448 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(0.003961016827455 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(-0.019129891881985 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(0.117704243338224 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(0.16412990655042 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-0.070823724933793 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(0.037826978206678 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-0.01540888836298 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(-0.020541101916052 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(0.080252960265112 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(0.041406267612156 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(0.053559178288869 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(-0.019305911392454 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(0.014374932576847 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-0.036879480575071 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(0.009108603936583 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-0.016961858033537 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-0.000139642486209 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-0.001080735993551 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(0.034605085427218 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-0.057362138629587 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-0.007421267055813 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(0.003847246238984 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-0.067340352585365 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-0.01463250953563 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-0.007927958432911 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(0.010568749228895 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(-0.068444081654591 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(0.018080239852293 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-0.037407247692789 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-0.003616495154942 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-0.01483472912804 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(0.003318628828647 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(0.04923448240384 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(0.078595245859398 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-0.031483806931184 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-0.085909352167377 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(0.038642153709048 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(-0.013680250619321 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(0.000956340456599 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-0.087183321354014 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(0.012171156418969 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(0.040919928266304 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(0.125415924755768 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-0.075299252166351 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(0.083194210539991 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.795407098121086 AS DOUBLE PRECISION) AS "Score_1", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-0.032910212065332 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(0.029988357014994 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-0.06019498849575 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(0.010954832496528 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-0.024298960747776 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(0.020015140753847 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-0.012416699095779 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-0.001980339699359 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(0.06638260427332 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(0.018757467397948 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(-0.024834153153777 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(0.056828765480298 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(-0.069720485711257 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(0.004419452342096 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-0.01531758392304 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-0.008664846132813 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(-0.019063866216503 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(0.025428133928939 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-0.06153310259978 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-0.008802257273491 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-0.029541373880231 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(0.038378267652925 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(0.027233041923642 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(-0.002994816986303 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-0.025258677477294 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(-0.059825990329226 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-0.153159399064622 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(0.063295176213649 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(0.033102087782652 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-0.015183507715014 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(0.000546617462475 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(0.027435794086153 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-0.045169271127863 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-0.030942630619639 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-0.015784079512614 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-0.017340624881554 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-0.025681440372983 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-0.017234187851278 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(0.01357611505297 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-0.00684385989056 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(0.184140164060816 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(-0.178044136856515 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(-0.159166944950213 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-0.213244072966456 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(0.016370149430175 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-0.009896423690919 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(0.044040012612985 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-0.031401556850828 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(0.033855148165205 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(0.175283509204083 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(0.158016409727787 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(0.111834353322205 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-0.020799342047701 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.016443766620849 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(0.011889817629639 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(0.022680531973476 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(0.031994380988967 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-0.011671441747482 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(0.063223263485515 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(0.137913287398043 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-0.019952955982813 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.79401530967293 AS DOUBLE PRECISION) AS "Score_2", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-0.005290100124521 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-0.0785897908482 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(0.038671430277132 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(0.06291303265594 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-0.005547908422899 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-0.051042138083663 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(0.008359700633806 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-0.019746983147741 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(0.061211728067661 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(0.043779698463495 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(0.056206761699991 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(-0.081580337585986 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(0.061847350544382 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(0.0616906866302 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-0.013550987742271 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(0.013884147390315 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(-0.068736395298511 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(-0.159095265734536 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-0.067342051543537 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(0.173513417184698 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-0.00644782879894 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(0.009553695641803 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-0.000732050969204 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.014522597408241 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-0.008683670609361 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(-0.074078945620274 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-0.011967659580227 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(-0.035572896414285 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(-0.128041466040372 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-0.025565623142708 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(0.021686442913372 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(0.051856921799197 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-0.02077309866035 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-0.06562928991731 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(0.063925805695909 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(0.068083025316951 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-0.097951555643409 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(0.009554238561038 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(0.012378550128413 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-0.059539921642023 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-0.120603378912101 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(0.022113413076922 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(0.085862017519426 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(0.176568102562574 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(0.010090718688662 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-0.013164128197487 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-0.006191983934735 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-0.018133629655156 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-0.024213457330437 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(0.016669690738356 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-0.032964721513704 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-0.01001038857119 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-0.009558787746172 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.010545947070866 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(0.029529956063541 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(0.089162464965198 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(0.009552387807752 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(0.054793402649046 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-0.00216077655753 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-0.054484904997714 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-0.016581166960502 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.798190675017397 AS DOUBLE PRECISION) AS "Score_3", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-0.00701076086906 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-0.005569943010709 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-0.118533191421815 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(0.05160863689537 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-0.131190418074172 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-0.053736996411869 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(0.026421290734421 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-0.001802042034104 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(0.067495656756423 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-0.038890394769274 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(-0.004495286673815 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(-0.084808532923259 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(-0.092836288560168 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(0.007547380271535 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-0.031970045795315 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(0.000174809399883 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(-0.013073572758736 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(0.029237367250021 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(0.03686625259309 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(0.025546194118887 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(0.042780543537773 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(-0.017244630131276 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(0.037207011007372 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.028997663757258 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-0.010325795723925 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(0.040315467743857 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-0.048562797858915 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(0.052899818839857 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(-0.02113211635296 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(0.102865482753287 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(0.027140701696378 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(0.148528630646062 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-0.032562892456968 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-0.009665863746565 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(0.030559143734326 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(0.101444842567117 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(0.030262395824572 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-0.001110838597093 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(0.099119703412245 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-0.068995515825668 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(0.129157539031407 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(0.067034048981022 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(0.030224251088016 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-0.041547323959519 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-0.001906654867541 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-0.010600924258037 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(0.044673964539703 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-0.056347402987671 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-0.049288324308998 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-0.006849794711683 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-0.068102477193867 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-0.023129589180142 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(0.007198637890075 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(-0.010619423016085 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(0.007093782579089 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(0.048445106465479 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-0.002235127433177 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(0.088137193762457 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-0.085468231422108 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(0.003062923843841 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-0.009339840132517 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.789839944328462 AS DOUBLE PRECISION) AS "Score_4", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-0.000296241757901 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(0.125525962382839 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-0.031944280165609 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(0.05275186324675 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(0.14419857857434 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(0.091644678961025 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-0.036396547767583 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(0.009416701980233 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-0.033114730643305 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-0.002564002624895 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(0.012185850471544 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(0.060029630280504 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(-0.059530684852186 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-0.084169349690269 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-0.00752962494839 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-0.010804135713813 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(0.035437444732988 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(0.035002572028928 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-0.003151455425067 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-0.215862637837402 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-0.197263454151844 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(-0.061455266603409 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(0.005192987520835 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(-0.028044519411509 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(0.079361975435079 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(0.016032958306419 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(0.072093572531544 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(0.055029963043322 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(0.041637516880071 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-0.088800444572289 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(0.007717221666282 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-0.03559412318321 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(0.082773997000251 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-0.068560946184411 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-0.012460271243551 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-0.041721267197394 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(0.015009389774332 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-0.005879758304954 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(0.016561772234607 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-0.13036047541845 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-0.019022209259455 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(-0.020418312882567 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(0.002290262553925 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(0.020906758277438 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-0.011555315689695 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-0.000242236677259 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-0.004206941974539 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(0.020496747540812 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-0.050172362940442 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(0.047439410155459 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-0.014048800647085 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-0.087162919443299 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(0.018706546935925 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(-0.002015491259938 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(0.014745222178457 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(0.013740998595213 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(0.064043621745437 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-0.064920790317166 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-0.003975388097501 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(0.007322277379525 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-0.039255734656678 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.799582463465553 AS DOUBLE PRECISION) AS "Score_5", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(0.011053426055827 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-0.089610266309726 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(0.017424501127874 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-0.000890390302142 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(0.011828974309035 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-0.023558071791929 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-0.002624882717872 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-0.000380759908879 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-0.018110791306038 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-0.053876762728287 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(-0.004972924766875 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(-0.060990574350779 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(-0.053955415906699 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(0.051854116255074 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(0.001278236801581 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(0.007748860955025 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(-0.051678421558937 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(0.049530526007126 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-0.028519740647356 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-0.035007235815296 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-0.076815664334939 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(-0.028462645480758 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(0.0053919513734 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.002792498437826 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-0.036303145681369 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(0.031731747735515 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-0.003731911910941 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(-0.067031366542014 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(-0.055910315777631 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-0.032276454533051 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(-0.004403645947352 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-0.026404319682645 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(0.077400773331951 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(0.014127371696266 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(0.02309768496637 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(0.071094684966035 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-0.074740565495292 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(0.001702115163082 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-0.087518667273041 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(0.109946181534166 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-0.00105792492535 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(0.070274987686399 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(0.001228594640772 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(0.128389534856218 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(0.056015698141232 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(0.008240648301314 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-0.023874897819122 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(0.031187848192275 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(0.074871478513761 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-0.086343883542513 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(0.064760185229711 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(0.098586203115247 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-0.050571187793003 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.002557708822753 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-0.001785709322247 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(0.037110505700874 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-0.03195824945526 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-0.017162726040994 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(0.040511714087416 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-0.000964275750163 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-0.013740130926109 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.802366040361865 AS DOUBLE PRECISION) AS "Score_6", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(0.031972602528101 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-0.015436090948575 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(0.073235407404082 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-0.016577704733259 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(0.062457791618538 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(0.062517033428004 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(0.026326982914668 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(0.012162264667759 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-0.053495718851161 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(0.118946412820765 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(0.02362873286838 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(0.06631166251821 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(0.023358864316243 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-4.9635570113e-05 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(0.05287557389959 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-0.008340871084038 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(0.004870317887157 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(-0.125302431371365 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-0.019576457131768 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-0.041641503477993 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-0.046390381327839 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(-0.034281057968141 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-0.011228837232398 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(-0.001055415650708 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-0.040220913310453 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(-0.037421793141908 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-0.068218617539453 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(0.00931589002593 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(0.056071648025119 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(0.09465008648172 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(-0.032225704489328 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-0.069603229405382 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(0.05236489533319 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(0.046619227707781 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(0.044619285532247 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(0.064346622954895 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(0.09438187063702 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(0.003251151926754 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-0.020629973030824 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(0.029546617061441 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(0.04225205517366 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(0.07739958120496 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(0.005049369276401 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-0.057187562178853 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-0.025137001266763 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(0.018225099594716 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(0.005175013732841 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-0.020634789450626 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(0.025872672644292 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-0.155826743765792 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-0.048471722176069 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(0.011293780156435 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(0.006679582007189 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.001565553745569 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-0.043883200994664 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(0.000455377330875 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-0.042569207638707 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-0.155093682010687 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-0.003063055765278 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-0.04041283761117 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(0.039728830569297 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.805149617258177 AS DOUBLE PRECISION) AS "Score_7", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(0.01022601310292 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(0.065970449998051 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-0.09634788220793 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(0.0289346769431 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-0.018571397478385 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-0.073097660332253 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(0.007466306390945 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(0.011114758154328 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-0.02245305102656 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(0.072027522060928 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(0.000306234049443 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(-0.058756531854582 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(0.03412982964792 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(0.001343172042303 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(0.022582493250358 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(0.020977050658839 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(0.055849457778623 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(0.075370131382256 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-0.001047130533029 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-0.040058063037158 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(0.096221499895444 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(0.056248611615027 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-0.019122047006304 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(-0.003292805549854 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-0.024991121261495 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(-0.035104895325241 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(0.122784866014975 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(0.038006597097415 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(0.058675438600402 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-0.072060539772304 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(-0.00761872981265 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-0.036885110056857 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-0.103635086109644 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(0.13824180848368 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(0.057020851080357 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-0.107723289121762 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-0.043071557285808 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-0.001356924539967 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-0.010275983811114 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(0.213201310720373 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-0.01374042071112 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(0.098991511301769 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(0.041868308372831 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-0.019893348815621 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(0.003743727020515 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(0.022953222736552 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-0.015876286044449 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(0.084938370573592 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-0.096953988076639 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-0.099430325948508 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(0.077847928952404 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(0.002357409861495 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-0.003571239357216 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(-0.011841741238303 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-0.017635996421153 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-0.105608559541936 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(0.028322951354204 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(0.029487009232316 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-0.143219291604612 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(0.007447912350007 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(0.023710615286312 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.812108559498956 AS DOUBLE PRECISION) AS "Score_8", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(0.001249681461035 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-0.04901610292525 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(0.056988971746525 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-0.033258864394019 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-0.046184643092841 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-0.016257314072945 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-0.010506947661166 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-0.00081604050214 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(0.01110123118992 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(0.011274950476552 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(0.010554052389406 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(0.009213518001205 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(-0.073207429021136 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(0.049418841528532 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(0.008689025734463 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-0.013227663547406 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(0.018569197327853 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(0.117927734503931 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(0.005564977037095 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(0.009899058997716 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(0.187091298234621 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(-0.007449547062377 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-0.029819966878647 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.001967967726055 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-0.071789158641139 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(0.073316308079644 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(0.071162898863722 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(0.058745879583094 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(0.081765425590139 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(0.009704285702455 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(-0.022418016075961 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-0.06463248671669 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-0.042794996651878 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(0.09467444757585 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-0.19942373820746 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(0.005138475363139 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(0.02650133775706 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(0.005252546525159 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(0.094850266312504 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-0.201220961107482 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-0.074082984696922 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(-0.017433881865131 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(0.037113848024611 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-0.011147205417605 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-0.009306124048198 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(0.003408468116515 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(0.013748145361616 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-0.048042742751205 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-0.024105546590112 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-0.0548680346875 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-0.119921355417298 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(0.06815071877333 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-0.008165175584706 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.000888231298517 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-0.012919039940316 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(0.023451887917463 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-0.07035537979761 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(0.072000596586808 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(0.026288546465961 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(0.014327076466393 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-0.043294706806309 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-0.795407098121086 AS DOUBLE PRECISION) AS "Score_9" 
FROM linear_input), 
linear_model_cte_logistic AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", linear_model_cte."Score_4" AS "Score_4", linear_model_cte."Score_5" AS "Score_5", linear_model_cte."Score_6" AS "Score_6", linear_model_cte."Score_7" AS "Score_7", linear_model_cte."Score_8" AS "Score_8", linear_model_cte."Score_9" AS "Score_9" 
FROM linear_model_cte), 
orig_cte AS 
(SELECT linear_model_cte_logistic."KEY" AS "KEY", linear_model_cte_logistic."Score_0" AS "Score_0", linear_model_cte_logistic."Score_1" AS "Score_1", linear_model_cte_logistic."Score_2" AS "Score_2", linear_model_cte_logistic."Score_3" AS "Score_3", linear_model_cte_logistic."Score_4" AS "Score_4", linear_model_cte_logistic."Score_5" AS "Score_5", linear_model_cte_logistic."Score_6" AS "Score_6", linear_model_cte_logistic."Score_7" AS "Score_7", linear_model_cte_logistic."Score_8" AS "Score_8", linear_model_cte_logistic."Score_9" AS "Score_9", CAST(NULL AS DOUBLE PRECISION) AS "Proba_0", CAST(NULL AS DOUBLE PRECISION) AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "Proba_2", CAST(NULL AS DOUBLE PRECISION) AS "Proba_3", CAST(NULL AS DOUBLE PRECISION) AS "Proba_4", CAST(NULL AS DOUBLE PRECISION) AS "Proba_5", CAST(NULL AS DOUBLE PRECISION) AS "Proba_6", CAST(NULL AS DOUBLE PRECISION) AS "Proba_7", CAST(NULL AS DOUBLE PRECISION) AS "Proba_8", CAST(NULL AS DOUBLE PRECISION) AS "Proba_9", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_3", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_4", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_5", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_6", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_7", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_8", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_9", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM linear_model_cte_logistic), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 4 AS "class", orig_cte."LogProba_4" AS "LogProba", orig_cte."Proba_4" AS "Proba", orig_cte."Score_4" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 5 AS "class", orig_cte."LogProba_5" AS "LogProba", orig_cte."Proba_5" AS "Proba", orig_cte."Score_5" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 6 AS "class", orig_cte."LogProba_6" AS "LogProba", orig_cte."Proba_6" AS "Proba", orig_cte."Score_6" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 7 AS "class", orig_cte."LogProba_7" AS "LogProba", orig_cte."Proba_7" AS "Proba", orig_cte."Score_7" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 8 AS "class", orig_cte."LogProba_8" AS "LogProba", orig_cte."Proba_8" AS "Proba", orig_cte."Score_8" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 9 AS "class", orig_cte."LogProba_9" AS "LogProba", orig_cte."Proba_9" AS "Proba", orig_cte."Score_9" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Score_4" AS "Score_4", orig_cte."Score_5" AS "Score_5", orig_cte."Score_6" AS "Score_6", orig_cte."Score_7" AS "Score_7", orig_cte."Score_8" AS "Score_8", orig_cte."Score_9" AS "Score_9", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."Proba_4" AS "Proba_4", orig_cte."Proba_5" AS "Proba_5", orig_cte."Proba_6" AS "Proba_6", orig_cte."Proba_7" AS "Proba_7", orig_cte."Proba_8" AS "Proba_8", orig_cte."Proba_9" AS "Proba_9", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."LogProba_4" AS "LogProba_4", orig_cte."LogProba_5" AS "LogProba_5", orig_cte."LogProba_6" AS "LogProba_6", orig_cte."LogProba_7" AS "LogProba_7", orig_cte."LogProba_8" AS "LogProba_8", orig_cte."LogProba_9" AS "LogProba_9", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Score_4" AS "Score_4", score_max."Score_5" AS "Score_5", score_max."Score_6" AS "Score_6", score_max."Score_7" AS "Score_7", score_max."Score_8" AS "Score_8", score_max."Score_9" AS "Score_9", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."Proba_4" AS "Proba_4", score_max."Proba_5" AS "Proba_5", score_max."Proba_6" AS "Proba_6", score_max."Proba_7" AS "Proba_7", score_max."Proba_8" AS "Proba_8", score_max."Proba_9" AS "Proba_9", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."LogProba_4" AS "LogProba_4", score_max."LogProba_5" AS "LogProba_5", score_max."LogProba_6" AS "LogProba_6", score_max."LogProba_7" AS "LogProba_7", score_max."LogProba_8" AS "LogProba_8", score_max."LogProba_9" AS "LogProba_9", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Score_4" AS "Score_4", score_max."Score_5" AS "Score_5", score_max."Score_6" AS "Score_6", score_max."Score_7" AS "Score_7", score_max."Score_8" AS "Score_8", score_max."Score_9" AS "Score_9", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."Proba_4" AS "Proba_4", score_max."Proba_5" AS "Proba_5", score_max."Proba_6" AS "Proba_6", score_max."Proba_7" AS "Proba_7", score_max."Proba_8" AS "Proba_8", score_max."Proba_9" AS "Proba_9", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."LogProba_4" AS "LogProba_4", score_max."LogProba_5" AS "LogProba_5", score_max."LogProba_6" AS "LogProba_6", score_max."LogProba_7" AS "LogProba_7", score_max."LogProba_8" AS "LogProba_8", score_max."LogProba_9" AS "LogProba_9", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."max_Score" <= union_with_max."Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_max."KEY" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Score_4" AS "Score_4", arg_max_cte."Score_5" AS "Score_5", arg_max_cte."Score_6" AS "Score_6", arg_max_cte."Score_7" AS "Score_7", arg_max_cte."Score_8" AS "Score_8", arg_max_cte."Score_9" AS "Score_9", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", arg_max_cte."Proba_4" AS "Proba_4", arg_max_cte."Proba_5" AS "Proba_5", arg_max_cte."Proba_6" AS "Proba_6", arg_max_cte."Proba_7" AS "Proba_7", arg_max_cte."Proba_8" AS "Proba_8", arg_max_cte."Proba_9" AS "Proba_9", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", CASE WHEN (arg_max_cte."Proba_4" IS NULL OR arg_max_cte."Proba_4" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_4") ELSE -1.79769313486231e+308 END AS "LogProba_4", CASE WHEN (arg_max_cte."Proba_5" IS NULL OR arg_max_cte."Proba_5" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_5") ELSE -1.79769313486231e+308 END AS "LogProba_5", CASE WHEN (arg_max_cte."Proba_6" IS NULL OR arg_max_cte."Proba_6" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_6") ELSE -1.79769313486231e+308 END AS "LogProba_6", CASE WHEN (arg_max_cte."Proba_7" IS NULL OR arg_max_cte."Proba_7" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_7") ELSE -1.79769313486231e+308 END AS "LogProba_7", CASE WHEN (arg_max_cte."Proba_8" IS NULL OR arg_max_cte."Proba_8" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_8") ELSE -1.79769313486231e+308 END AS "LogProba_8", CASE WHEN (arg_max_cte."Proba_9" IS NULL OR arg_max_cte."Proba_9" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_9") ELSE -1.79769313486231e+308 END AS "LogProba_9", arg_max_cte."arg_max_Score" AS "Decision", CASE WHEN (arg_max_cte."arg_max_Score" = 0) THEN arg_max_cte."Proba_0" WHEN (arg_max_cte."arg_max_Score" = 1) THEN arg_max_cte."Proba_1" WHEN (arg_max_cte."arg_max_Score" = 2) THEN arg_max_cte."Proba_2" WHEN (arg_max_cte."arg_max_Score" = 3) THEN arg_max_cte."Proba_3" WHEN (arg_max_cte."arg_max_Score" = 4) THEN arg_max_cte."Proba_4" WHEN (arg_max_cte."arg_max_Score" = 5) THEN arg_max_cte."Proba_5" WHEN (arg_max_cte."arg_max_Score" = 6) THEN arg_max_cte."Proba_6" WHEN (arg_max_cte."arg_max_Score" = 7) THEN arg_max_cte."Proba_7" WHEN (arg_max_cte."arg_max_Score" = 8) THEN arg_max_cte."Proba_8" WHEN (arg_max_cte."arg_max_Score" = 9) THEN arg_max_cte."Proba_9" END AS "DecisionProba" 
FROM arg_max_cte