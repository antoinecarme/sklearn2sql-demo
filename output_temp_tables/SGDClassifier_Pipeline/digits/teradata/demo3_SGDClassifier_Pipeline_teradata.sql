-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : SGDClassifier_Pipeline
-- Dataset : digits
-- Database : teradata


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table tmp_20180602150816_zbt_ads_imp_1_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602150816_zbt_ads_imp_1_out  (
	"KEY" BIGINT, 
	impter_2 DOUBLE PRECISION, 
	impter_3 DOUBLE PRECISION, 
	impter_4 DOUBLE PRECISION, 
	impter_5 DOUBLE PRECISION, 
	impter_6 DOUBLE PRECISION, 
	impter_7 DOUBLE PRECISION, 
	impter_8 DOUBLE PRECISION, 
	impter_9 DOUBLE PRECISION, 
	impter_10 DOUBLE PRECISION, 
	impter_11 DOUBLE PRECISION, 
	impter_12 DOUBLE PRECISION, 
	impter_13 DOUBLE PRECISION, 
	impter_14 DOUBLE PRECISION, 
	impter_15 DOUBLE PRECISION, 
	impter_16 DOUBLE PRECISION, 
	impter_17 DOUBLE PRECISION, 
	impter_18 DOUBLE PRECISION, 
	impter_19 DOUBLE PRECISION, 
	impter_20 DOUBLE PRECISION, 
	impter_21 DOUBLE PRECISION, 
	impter_22 DOUBLE PRECISION, 
	impter_23 DOUBLE PRECISION, 
	impter_24 DOUBLE PRECISION, 
	impter_25 DOUBLE PRECISION, 
	impter_26 DOUBLE PRECISION, 
	impter_27 DOUBLE PRECISION, 
	impter_28 DOUBLE PRECISION, 
	impter_29 DOUBLE PRECISION, 
	impter_30 DOUBLE PRECISION, 
	impter_31 DOUBLE PRECISION, 
	impter_32 DOUBLE PRECISION, 
	impter_33 DOUBLE PRECISION, 
	impter_34 DOUBLE PRECISION, 
	impter_35 DOUBLE PRECISION, 
	impter_36 DOUBLE PRECISION, 
	impter_37 DOUBLE PRECISION, 
	impter_38 DOUBLE PRECISION, 
	impter_39 DOUBLE PRECISION, 
	impter_40 DOUBLE PRECISION, 
	impter_41 DOUBLE PRECISION, 
	impter_42 DOUBLE PRECISION, 
	impter_43 DOUBLE PRECISION, 
	impter_44 DOUBLE PRECISION, 
	impter_45 DOUBLE PRECISION, 
	impter_46 DOUBLE PRECISION, 
	impter_47 DOUBLE PRECISION, 
	impter_48 DOUBLE PRECISION, 
	impter_49 DOUBLE PRECISION, 
	impter_50 DOUBLE PRECISION, 
	impter_51 DOUBLE PRECISION, 
	impter_52 DOUBLE PRECISION, 
	impter_53 DOUBLE PRECISION, 
	impter_54 DOUBLE PRECISION, 
	impter_55 DOUBLE PRECISION, 
	impter_56 DOUBLE PRECISION, 
	impter_57 DOUBLE PRECISION, 
	impter_58 DOUBLE PRECISION, 
	impter_59 DOUBLE PRECISION, 
	impter_60 DOUBLE PRECISION, 
	impter_61 DOUBLE PRECISION, 
	impter_62 DOUBLE PRECISION, 
	impter_63 DOUBLE PRECISION, 
	impter_64 DOUBLE PRECISION, 
	impter_65 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602150816_zbt_ads_imp_1_out part 2. Populate

INSERT INTO tmp_20180602150816_zbt_ads_imp_1_out ("KEY", impter_2, impter_3, impter_4, impter_5, impter_6, impter_7, impter_8, impter_9, impter_10, impter_11, impter_12, impter_13, impter_14, impter_15, impter_16, impter_17, impter_18, impter_19, impter_20, impter_21, impter_22, impter_23, impter_24, impter_25, impter_26, impter_27, impter_28, impter_29, impter_30, impter_31, impter_32, impter_33, impter_34, impter_35, impter_36, impter_37, impter_38, impter_39, impter_40, impter_41, impter_42, impter_43, impter_44, impter_45, impter_46, impter_47, impter_48, impter_49, impter_50, impter_51, impter_52, impter_53, impter_54, impter_55, impter_56, impter_57, impter_58, impter_59, impter_60, impter_61, impter_62, impter_63, impter_64, impter_65) SELECT "U"."KEY", "U".impter_2, "U".impter_3, "U".impter_4, "U".impter_5, "U".impter_6, "U".impter_7, "U".impter_8, "U".impter_9, "U".impter_10, "U".impter_11, "U".impter_12, "U".impter_13, "U".impter_14, "U".impter_15, "U".impter_16, "U".impter_17, "U".impter_18, "U".impter_19, "U".impter_20, "U".impter_21, "U".impter_22, "U".impter_23, "U".impter_24, "U".impter_25, "U".impter_26, "U".impter_27, "U".impter_28, "U".impter_29, "U".impter_30, "U".impter_31, "U".impter_32, "U".impter_33, "U".impter_34, "U".impter_35, "U".impter_36, "U".impter_37, "U".impter_38, "U".impter_39, "U".impter_40, "U".impter_41, "U".impter_42, "U".impter_43, "U".impter_44, "U".impter_45, "U".impter_46, "U".impter_47, "U".impter_48, "U".impter_49, "U".impter_50, "U".impter_51, "U".impter_52, "U".impter_53, "U".impter_54, "U".impter_55, "U".impter_56, "U".impter_57, "U".impter_58, "U".impter_59, "U".impter_60, "U".impter_61, "U".impter_62, "U".impter_63, "U".impter_64, "U".impter_65 
FROM (SELECT "ADS_imp_1_OUT"."KEY", "ADS_imp_1_OUT".impter_2, "ADS_imp_1_OUT".impter_3, "ADS_imp_1_OUT".impter_4, "ADS_imp_1_OUT".impter_5, "ADS_imp_1_OUT".impter_6, "ADS_imp_1_OUT".impter_7, "ADS_imp_1_OUT".impter_8, "ADS_imp_1_OUT".impter_9, "ADS_imp_1_OUT".impter_10, "ADS_imp_1_OUT".impter_11, "ADS_imp_1_OUT".impter_12, "ADS_imp_1_OUT".impter_13, "ADS_imp_1_OUT".impter_14, "ADS_imp_1_OUT".impter_15, "ADS_imp_1_OUT".impter_16, "ADS_imp_1_OUT".impter_17, "ADS_imp_1_OUT".impter_18, "ADS_imp_1_OUT".impter_19, "ADS_imp_1_OUT".impter_20, "ADS_imp_1_OUT".impter_21, "ADS_imp_1_OUT".impter_22, "ADS_imp_1_OUT".impter_23, "ADS_imp_1_OUT".impter_24, "ADS_imp_1_OUT".impter_25, "ADS_imp_1_OUT".impter_26, "ADS_imp_1_OUT".impter_27, "ADS_imp_1_OUT".impter_28, "ADS_imp_1_OUT".impter_29, "ADS_imp_1_OUT".impter_30, "ADS_imp_1_OUT".impter_31, "ADS_imp_1_OUT".impter_32, "ADS_imp_1_OUT".impter_33, "ADS_imp_1_OUT".impter_34, "ADS_imp_1_OUT".impter_35, "ADS_imp_1_OUT".impter_36, "ADS_imp_1_OUT".impter_37, "ADS_imp_1_OUT".impter_38, "ADS_imp_1_OUT".impter_39, "ADS_imp_1_OUT".impter_40, "ADS_imp_1_OUT".impter_41, "ADS_imp_1_OUT".impter_42, "ADS_imp_1_OUT".impter_43, "ADS_imp_1_OUT".impter_44, "ADS_imp_1_OUT".impter_45, "ADS_imp_1_OUT".impter_46, "ADS_imp_1_OUT".impter_47, "ADS_imp_1_OUT".impter_48, "ADS_imp_1_OUT".impter_49, "ADS_imp_1_OUT".impter_50, "ADS_imp_1_OUT".impter_51, "ADS_imp_1_OUT".impter_52, "ADS_imp_1_OUT".impter_53, "ADS_imp_1_OUT".impter_54, "ADS_imp_1_OUT".impter_55, "ADS_imp_1_OUT".impter_56, "ADS_imp_1_OUT".impter_57, "ADS_imp_1_OUT".impter_58, "ADS_imp_1_OUT".impter_59, "ADS_imp_1_OUT".impter_60, "ADS_imp_1_OUT".impter_61, "ADS_imp_1_OUT".impter_62, "ADS_imp_1_OUT".impter_63, "ADS_imp_1_OUT".impter_64, "ADS_imp_1_OUT".impter_65 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.2950591510090466 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 5.104384133611691 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 11.791927627000696 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 11.84829505915101 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 5.823242867084203 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 1.394572025052192 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.13430758524704245 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0055671537926235215 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 1.977035490605428 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 10.362560890744607 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 12.03061934585943 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 10.271398747390396 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 8.121781489213639 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 1.8921363952679193 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.11760612386917188 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0020876826722338203 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 2.5427974947807934 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 9.935281837160751 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 7.099512874043145 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN 7.132915796798887 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN 7.81419624217119 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 1.8434237995824634 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 0.05775922059846903 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN 0.0006958942240779402 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN 2.4808629088378567 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN 9.143354210160055 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 8.960334029227557 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 10.03688239387613 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 7.5949895615866385 ELSE "ADS"."Feature_29" END AS impter_31, CASE WHEN ("ADS"."Feature_30" IS NULL) THEN 2.337508698677801 ELSE "ADS"."Feature_30" END AS impter_32, CASE WHEN ("ADS"."Feature_31" IS NULL) THEN 0.0027835768963117608 ELSE "ADS"."Feature_31" END AS impter_33, CASE WHEN ("ADS"."Feature_32" IS NULL) THEN 0.0 ELSE "ADS"."Feature_32" END AS impter_34, CASE WHEN ("ADS"."Feature_33" IS NULL) THEN 2.3319415448851775 ELSE "ADS"."Feature_33" END AS impter_35, CASE WHEN ("ADS"."Feature_34" IS NULL) THEN 7.608907446068198 ELSE "ADS"."Feature_34" END AS impter_36, CASE WHEN ("ADS"."Feature_35" IS NULL) THEN 9.028531663187195 ELSE "ADS"."Feature_35" END AS impter_37, CASE WHEN ("ADS"."Feature_36" IS NULL) THEN 10.270006958942242 ELSE "ADS"."Feature_36" END AS impter_38, CASE WHEN ("ADS"."Feature_37" IS NULL) THEN 8.806541405706332 ELSE "ADS"."Feature_37" END AS impter_39, CASE WHEN ("ADS"."Feature_38" IS NULL) THEN 2.8754349338900487 ELSE "ADS"."Feature_38" END AS impter_40, CASE WHEN ("ADS"."Feature_39" IS NULL) THEN 0.0 ELSE "ADS"."Feature_39" END AS impter_41, CASE WHEN ("ADS"."Feature_40" IS NULL) THEN 0.010438413361169102 ELSE "ADS"."Feature_40" END AS impter_42, CASE WHEN ("ADS"."Feature_41" IS NULL) THEN 1.5755045233124565 ELSE "ADS"."Feature_41" END AS impter_43, CASE WHEN ("ADS"."Feature_42" IS NULL) THEN 6.858733472512178 ELSE "ADS"."Feature_42" END AS impter_44, CASE WHEN ("ADS"."Feature_43" IS NULL) THEN 7.258872651356993 ELSE "ADS"."Feature_43" END AS impter_45, CASE WHEN ("ADS"."Feature_44" IS NULL) THEN 7.710508002783577 ELSE "ADS"."Feature_44" END AS impter_46, CASE WHEN ("ADS"."Feature_45" IS NULL) THEN 8.281141266527488 ELSE "ADS"."Feature_45" END AS impter_47, CASE WHEN ("ADS"."Feature_46" IS NULL) THEN 3.432150313152401 ELSE "ADS"."Feature_46" END AS impter_48, CASE WHEN ("ADS"."Feature_47" IS NULL) THEN 0.031315240083507306 ELSE "ADS"."Feature_47" END AS impter_49, CASE WHEN ("ADS"."Feature_48" IS NULL) THEN 0.009046624913013222 ELSE "ADS"."Feature_48" END AS impter_50, CASE WHEN ("ADS"."Feature_49" IS NULL) THEN 0.708420320111343 ELSE "ADS"."Feature_49" END AS impter_51, CASE WHEN ("ADS"."Feature_50" IS NULL) THEN 7.492693110647181 ELSE "ADS"."Feature_50" END AS impter_52, CASE WHEN ("ADS"."Feature_51" IS NULL) THEN 9.529575504523313 ELSE "ADS"."Feature_51" END AS impter_53, CASE WHEN ("ADS"."Feature_52" IS NULL) THEN 9.541405706332638 ELSE "ADS"."Feature_52" END AS impter_54, CASE WHEN ("ADS"."Feature_53" IS NULL) THEN 8.754349338900488 ELSE "ADS"."Feature_53" END AS impter_55, CASE WHEN ("ADS"."Feature_54" IS NULL) THEN 3.7397355601948505 ELSE "ADS"."Feature_54" END AS impter_56, CASE WHEN ("ADS"."Feature_55" IS NULL) THEN 0.21920668058455114 ELSE "ADS"."Feature_55" END AS impter_57, CASE WHEN ("ADS"."Feature_56" IS NULL) THEN 0.0006958942240779402 ELSE "ADS"."Feature_56" END AS impter_58, CASE WHEN ("ADS"."Feature_57" IS NULL) THEN 0.26374391092553934 ELSE "ADS"."Feature_57" END AS impter_59, CASE WHEN ("ADS"."Feature_58" IS NULL) THEN 5.474599860821155 ELSE "ADS"."Feature_58" END AS impter_60, CASE WHEN ("ADS"."Feature_59" IS NULL) THEN 12.097425191370911 ELSE "ADS"."Feature_59" END AS impter_61, CASE WHEN ("ADS"."Feature_60" IS NULL) THEN 11.8580375782881 ELSE "ADS"."Feature_60" END AS impter_62, CASE WHEN ("ADS"."Feature_61" IS NULL) THEN 6.716771050800278 ELSE "ADS"."Feature_61" END AS impter_63, CASE WHEN ("ADS"."Feature_62" IS NULL) THEN 2.0869867780097424 ELSE "ADS"."Feature_62" END AS impter_64, CASE WHEN ("ADS"."Feature_63" IS NULL) THEN 0.3862212943632568 ELSE "ADS"."Feature_63" END AS impter_65 
FROM digits AS "ADS") AS "ADS_imp_1_OUT") AS "U"

-- Code For temporary table tmp_20180602150816_m5l_ads_sca_2_out part 1. Create 


CREATE GLOBAL TEMPORARY TABLE tmp_20180602150816_m5l_ads_sca_2_out  (
	"KEY" BIGINT, 
	scaler_2 DOUBLE PRECISION, 
	scaler_3 DOUBLE PRECISION, 
	scaler_4 DOUBLE PRECISION, 
	scaler_5 DOUBLE PRECISION, 
	scaler_6 DOUBLE PRECISION, 
	scaler_7 DOUBLE PRECISION, 
	scaler_8 DOUBLE PRECISION, 
	scaler_9 DOUBLE PRECISION, 
	scaler_10 DOUBLE PRECISION, 
	scaler_11 DOUBLE PRECISION, 
	scaler_12 DOUBLE PRECISION, 
	scaler_13 DOUBLE PRECISION, 
	scaler_14 DOUBLE PRECISION, 
	scaler_15 DOUBLE PRECISION, 
	scaler_16 DOUBLE PRECISION, 
	scaler_17 DOUBLE PRECISION, 
	scaler_18 DOUBLE PRECISION, 
	scaler_19 DOUBLE PRECISION, 
	scaler_20 DOUBLE PRECISION, 
	scaler_21 DOUBLE PRECISION, 
	scaler_22 DOUBLE PRECISION, 
	scaler_23 DOUBLE PRECISION, 
	scaler_24 DOUBLE PRECISION, 
	scaler_25 DOUBLE PRECISION, 
	scaler_26 DOUBLE PRECISION, 
	scaler_27 DOUBLE PRECISION, 
	scaler_28 DOUBLE PRECISION, 
	scaler_29 DOUBLE PRECISION, 
	scaler_30 DOUBLE PRECISION, 
	scaler_31 DOUBLE PRECISION, 
	scaler_32 DOUBLE PRECISION, 
	scaler_33 DOUBLE PRECISION, 
	scaler_34 DOUBLE PRECISION, 
	scaler_35 DOUBLE PRECISION, 
	scaler_36 DOUBLE PRECISION, 
	scaler_37 DOUBLE PRECISION, 
	scaler_38 DOUBLE PRECISION, 
	scaler_39 DOUBLE PRECISION, 
	scaler_40 DOUBLE PRECISION, 
	scaler_41 DOUBLE PRECISION, 
	scaler_42 DOUBLE PRECISION, 
	scaler_43 DOUBLE PRECISION, 
	scaler_44 DOUBLE PRECISION, 
	scaler_45 DOUBLE PRECISION, 
	scaler_46 DOUBLE PRECISION, 
	scaler_47 DOUBLE PRECISION, 
	scaler_48 DOUBLE PRECISION, 
	scaler_49 DOUBLE PRECISION, 
	scaler_50 DOUBLE PRECISION, 
	scaler_51 DOUBLE PRECISION, 
	scaler_52 DOUBLE PRECISION, 
	scaler_53 DOUBLE PRECISION, 
	scaler_54 DOUBLE PRECISION, 
	scaler_55 DOUBLE PRECISION, 
	scaler_56 DOUBLE PRECISION, 
	scaler_57 DOUBLE PRECISION, 
	scaler_58 DOUBLE PRECISION, 
	scaler_59 DOUBLE PRECISION, 
	scaler_60 DOUBLE PRECISION, 
	scaler_61 DOUBLE PRECISION, 
	scaler_62 DOUBLE PRECISION, 
	scaler_63 DOUBLE PRECISION, 
	scaler_64 DOUBLE PRECISION, 
	scaler_65 DOUBLE PRECISION
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table tmp_20180602150816_m5l_ads_sca_2_out part 2. Populate

INSERT INTO tmp_20180602150816_m5l_ads_sca_2_out ("KEY", scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65) SELECT "U"."KEY", "U".scaler_2, "U".scaler_3, "U".scaler_4, "U".scaler_5, "U".scaler_6, "U".scaler_7, "U".scaler_8, "U".scaler_9, "U".scaler_10, "U".scaler_11, "U".scaler_12, "U".scaler_13, "U".scaler_14, "U".scaler_15, "U".scaler_16, "U".scaler_17, "U".scaler_18, "U".scaler_19, "U".scaler_20, "U".scaler_21, "U".scaler_22, "U".scaler_23, "U".scaler_24, "U".scaler_25, "U".scaler_26, "U".scaler_27, "U".scaler_28, "U".scaler_29, "U".scaler_30, "U".scaler_31, "U".scaler_32, "U".scaler_33, "U".scaler_34, "U".scaler_35, "U".scaler_36, "U".scaler_37, "U".scaler_38, "U".scaler_39, "U".scaler_40, "U".scaler_41, "U".scaler_42, "U".scaler_43, "U".scaler_44, "U".scaler_45, "U".scaler_46, "U".scaler_47, "U".scaler_48, "U".scaler_49, "U".scaler_50, "U".scaler_51, "U".scaler_52, "U".scaler_53, "U".scaler_54, "U".scaler_55, "U".scaler_56, "U".scaler_57, "U".scaler_58, "U".scaler_59, "U".scaler_60, "U".scaler_61, "U".scaler_62, "U".scaler_63, "U".scaler_64, "U".scaler_65 
FROM (SELECT "ADS_sca_2_OUT"."KEY", "ADS_sca_2_OUT".scaler_2, "ADS_sca_2_OUT".scaler_3, "ADS_sca_2_OUT".scaler_4, "ADS_sca_2_OUT".scaler_5, "ADS_sca_2_OUT".scaler_6, "ADS_sca_2_OUT".scaler_7, "ADS_sca_2_OUT".scaler_8, "ADS_sca_2_OUT".scaler_9, "ADS_sca_2_OUT".scaler_10, "ADS_sca_2_OUT".scaler_11, "ADS_sca_2_OUT".scaler_12, "ADS_sca_2_OUT".scaler_13, "ADS_sca_2_OUT".scaler_14, "ADS_sca_2_OUT".scaler_15, "ADS_sca_2_OUT".scaler_16, "ADS_sca_2_OUT".scaler_17, "ADS_sca_2_OUT".scaler_18, "ADS_sca_2_OUT".scaler_19, "ADS_sca_2_OUT".scaler_20, "ADS_sca_2_OUT".scaler_21, "ADS_sca_2_OUT".scaler_22, "ADS_sca_2_OUT".scaler_23, "ADS_sca_2_OUT".scaler_24, "ADS_sca_2_OUT".scaler_25, "ADS_sca_2_OUT".scaler_26, "ADS_sca_2_OUT".scaler_27, "ADS_sca_2_OUT".scaler_28, "ADS_sca_2_OUT".scaler_29, "ADS_sca_2_OUT".scaler_30, "ADS_sca_2_OUT".scaler_31, "ADS_sca_2_OUT".scaler_32, "ADS_sca_2_OUT".scaler_33, "ADS_sca_2_OUT".scaler_34, "ADS_sca_2_OUT".scaler_35, "ADS_sca_2_OUT".scaler_36, "ADS_sca_2_OUT".scaler_37, "ADS_sca_2_OUT".scaler_38, "ADS_sca_2_OUT".scaler_39, "ADS_sca_2_OUT".scaler_40, "ADS_sca_2_OUT".scaler_41, "ADS_sca_2_OUT".scaler_42, "ADS_sca_2_OUT".scaler_43, "ADS_sca_2_OUT".scaler_44, "ADS_sca_2_OUT".scaler_45, "ADS_sca_2_OUT".scaler_46, "ADS_sca_2_OUT".scaler_47, "ADS_sca_2_OUT".scaler_48, "ADS_sca_2_OUT".scaler_49, "ADS_sca_2_OUT".scaler_50, "ADS_sca_2_OUT".scaler_51, "ADS_sca_2_OUT".scaler_52, "ADS_sca_2_OUT".scaler_53, "ADS_sca_2_OUT".scaler_54, "ADS_sca_2_OUT".scaler_55, "ADS_sca_2_OUT".scaler_56, "ADS_sca_2_OUT".scaler_57, "ADS_sca_2_OUT".scaler_58, "ADS_sca_2_OUT".scaler_59, "ADS_sca_2_OUT".scaler_60, "ADS_sca_2_OUT".scaler_61, "ADS_sca_2_OUT".scaler_62, "ADS_sca_2_OUT".scaler_63, "ADS_sca_2_OUT".scaler_64, "ADS_sca_2_OUT".scaler_65 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS DOUBLE PRECISION) - CAST(0.0 AS DOUBLE PRECISION)) / CAST(1.0 AS DOUBLE PRECISION) AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS DOUBLE PRECISION) - CAST(0.295059151009047 AS DOUBLE PRECISION)) / CAST(0.886335971513945 AS DOUBLE PRECISION) AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS DOUBLE PRECISION) - CAST(5.104384133611691 AS DOUBLE PRECISION)) / CAST(4.714562522364591 AS DOUBLE PRECISION) AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS DOUBLE PRECISION) - CAST(11.791927627000696 AS DOUBLE PRECISION)) / CAST(4.242705177561994 AS DOUBLE PRECISION) AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS DOUBLE PRECISION) - CAST(11.84829505915101 AS DOUBLE PRECISION)) / CAST(4.298607850485783 AS DOUBLE PRECISION) AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS DOUBLE PRECISION) - CAST(5.823242867084203 AS DOUBLE PRECISION)) / CAST(5.664052593352563 AS DOUBLE PRECISION) AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS DOUBLE PRECISION) - CAST(1.394572025052192 AS DOUBLE PRECISION)) / CAST(3.367253749888978 AS DOUBLE PRECISION) AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS DOUBLE PRECISION) - CAST(0.134307585247042 AS DOUBLE PRECISION)) / CAST(1.073848896106088 AS DOUBLE PRECISION) AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS DOUBLE PRECISION) - CAST(0.005567153792624 AS DOUBLE PRECISION)) / CAST(0.091212595005212 AS DOUBLE PRECISION) AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS DOUBLE PRECISION) - CAST(1.977035490605428 AS DOUBLE PRECISION)) / CAST(3.176575951344838 AS DOUBLE PRECISION) AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS DOUBLE PRECISION) - CAST(10.362560890744607 AS DOUBLE PRECISION)) / CAST(5.427455768043861 AS DOUBLE PRECISION) AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS DOUBLE PRECISION) - CAST(12.03061934585943 AS DOUBLE PRECISION)) / CAST(3.92400431269586 AS DOUBLE PRECISION) AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS DOUBLE PRECISION) - CAST(10.271398747390396 AS DOUBLE PRECISION)) / CAST(4.751306782008032 AS DOUBLE PRECISION) AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS DOUBLE PRECISION) - CAST(8.121781489213639 AS DOUBLE PRECISION)) / CAST(6.055742470420089 AS DOUBLE PRECISION) AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS DOUBLE PRECISION) - CAST(1.892136395267919 AS DOUBLE PRECISION)) / CAST(3.63584960156055 AS DOUBLE PRECISION) AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS DOUBLE PRECISION) - CAST(0.117606123869172 AS DOUBLE PRECISION)) / CAST(0.880913584840726 AS DOUBLE PRECISION) AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS DOUBLE PRECISION) - CAST(0.002087682672234 AS DOUBLE PRECISION)) / CAST(0.045643446991807 AS DOUBLE PRECISION) AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS DOUBLE PRECISION) - CAST(2.542797494780794 AS DOUBLE PRECISION)) / CAST(3.535939148296097 AS DOUBLE PRECISION) AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS DOUBLE PRECISION) - CAST(9.935281837160751 AS DOUBLE PRECISION)) / CAST(5.674233427535142 AS DOUBLE PRECISION) AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS DOUBLE PRECISION) - CAST(7.099512874043145 AS DOUBLE PRECISION)) / CAST(5.828968622118506 AS DOUBLE PRECISION) AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS DOUBLE PRECISION) - CAST(7.132915796798887 AS DOUBLE PRECISION)) / CAST(6.164166380758013 AS DOUBLE PRECISION) AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS DOUBLE PRECISION) - CAST(7.81419624217119 AS DOUBLE PRECISION)) / CAST(6.237214641441282 AS DOUBLE PRECISION) AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS DOUBLE PRECISION) - CAST(1.843423799582464 AS DOUBLE PRECISION)) / CAST(3.355296849525941 AS DOUBLE PRECISION) AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS DOUBLE PRECISION) - CAST(0.057759220598469 AS DOUBLE PRECISION)) / CAST(0.470571680844726 AS DOUBLE PRECISION) AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS DOUBLE PRECISION) - CAST(0.000695894224078 AS DOUBLE PRECISION)) / CAST(0.026370626752256 AS DOUBLE PRECISION) AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS DOUBLE PRECISION) - CAST(2.480862908837856 AS DOUBLE PRECISION)) / CAST(3.1579531140533 AS DOUBLE PRECISION) AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS DOUBLE PRECISION) - CAST(9.143354210160055 AS DOUBLE PRECISION)) / CAST(6.211448620771221 AS DOUBLE PRECISION) AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS DOUBLE PRECISION) - CAST(8.960334029227557 AS DOUBLE PRECISION)) / CAST(5.872499336895779 AS DOUBLE PRECISION) AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS DOUBLE PRECISION) - CAST(10.03688239387613 AS DOUBLE PRECISION)) / CAST(6.131194138822921 AS DOUBLE PRECISION) AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS DOUBLE PRECISION) - CAST(7.594989561586639 AS DOUBLE PRECISION)) / CAST(5.883009512311774 AS DOUBLE PRECISION) AS scaler_31, (CAST("ADS_imp_1_OUT".impter_32 AS DOUBLE PRECISION) - CAST(2.337508698677801 AS DOUBLE PRECISION)) / CAST(3.75551631210054 AS DOUBLE PRECISION) AS scaler_32, (CAST("ADS_imp_1_OUT".impter_33 AS DOUBLE PRECISION) - CAST(0.002783576896312 AS DOUBLE PRECISION)) / CAST(0.052686132862207 AS DOUBLE PRECISION) AS scaler_33, (CAST("ADS_imp_1_OUT".impter_34 AS DOUBLE PRECISION) - CAST(0.0 AS DOUBLE PRECISION)) / CAST(1.0 AS DOUBLE PRECISION) AS scaler_34, (CAST("ADS_imp_1_OUT".impter_35 AS DOUBLE PRECISION) - CAST(2.331941544885178 AS DOUBLE PRECISION)) / CAST(3.520361676701363 AS DOUBLE PRECISION) AS scaler_35, (CAST("ADS_imp_1_OUT".impter_36 AS DOUBLE PRECISION) - CAST(7.608907446068198 AS DOUBLE PRECISION)) / CAST(6.337427127154217 AS DOUBLE PRECISION) AS scaler_36, (CAST("ADS_imp_1_OUT".impter_37 AS DOUBLE PRECISION) - CAST(9.028531663187197 AS DOUBLE PRECISION)) / CAST(6.255398792908601 AS DOUBLE PRECISION) AS scaler_37, (CAST("ADS_imp_1_OUT".impter_38 AS DOUBLE PRECISION) - CAST(10.270006958942242 AS DOUBLE PRECISION)) / CAST(5.918328236602452 AS DOUBLE PRECISION) AS scaler_38, (CAST("ADS_imp_1_OUT".impter_39 AS DOUBLE PRECISION) - CAST(8.806541405706332 AS DOUBLE PRECISION)) / CAST(5.862505948752236 AS DOUBLE PRECISION) AS scaler_39, (CAST("ADS_imp_1_OUT".impter_40 AS DOUBLE PRECISION) - CAST(2.875434933890048 AS DOUBLE PRECISION)) / CAST(3.521551388880749 AS DOUBLE PRECISION) AS scaler_40, (CAST("ADS_imp_1_OUT".impter_41 AS DOUBLE PRECISION) - CAST(0.0 AS DOUBLE PRECISION)) / CAST(1.0 AS DOUBLE PRECISION) AS scaler_41, (CAST("ADS_imp_1_OUT".impter_42 AS DOUBLE PRECISION) - CAST(0.010438413361169 AS DOUBLE PRECISION)) / CAST(0.160122221497781 AS DOUBLE PRECISION) AS scaler_42, (CAST("ADS_imp_1_OUT".impter_43 AS DOUBLE PRECISION) - CAST(1.575504523312456 AS DOUBLE PRECISION)) / CAST(3.014815857559124 AS DOUBLE PRECISION) AS scaler_43, (CAST("ADS_imp_1_OUT".impter_44 AS DOUBLE PRECISION) - CAST(6.858733472512178 AS DOUBLE PRECISION)) / CAST(6.542209340765544 AS DOUBLE PRECISION) AS scaler_44, (CAST("ADS_imp_1_OUT".impter_45 AS DOUBLE PRECISION) - CAST(7.258872651356993 AS DOUBLE PRECISION)) / CAST(6.490917554434448 AS DOUBLE PRECISION) AS scaler_45, (CAST("ADS_imp_1_OUT".impter_46 AS DOUBLE PRECISION) - CAST(7.710508002783577 AS DOUBLE PRECISION)) / CAST(6.292873620677289 AS DOUBLE PRECISION) AS scaler_46, (CAST("ADS_imp_1_OUT".impter_47 AS DOUBLE PRECISION) - CAST(8.281141266527488 AS DOUBLE PRECISION)) / CAST(5.713309549149251 AS DOUBLE PRECISION) AS scaler_47, (CAST("ADS_imp_1_OUT".impter_48 AS DOUBLE PRECISION) - CAST(3.432150313152401 AS DOUBLE PRECISION)) / CAST(4.326500259143386 AS DOUBLE PRECISION) AS scaler_48, (CAST("ADS_imp_1_OUT".impter_49 AS DOUBLE PRECISION) - CAST(0.031315240083507 AS DOUBLE PRECISION)) / CAST(0.333254145983304 AS DOUBLE PRECISION) AS scaler_49, (CAST("ADS_imp_1_OUT".impter_50 AS DOUBLE PRECISION) - CAST(0.009046624913013 AS DOUBLE PRECISION)) / CAST(0.228276642220633 AS DOUBLE PRECISION) AS scaler_50, (CAST("ADS_imp_1_OUT".impter_51 AS DOUBLE PRECISION) - CAST(0.708420320111343 AS DOUBLE PRECISION)) / CAST(1.763076823218346 AS DOUBLE PRECISION) AS scaler_51, (CAST("ADS_imp_1_OUT".impter_52 AS DOUBLE PRECISION) - CAST(7.492693110647181 AS DOUBLE PRECISION)) / CAST(5.674735747339335 AS DOUBLE PRECISION) AS scaler_52, (CAST("ADS_imp_1_OUT".impter_53 AS DOUBLE PRECISION) - CAST(9.529575504523313 AS DOUBLE PRECISION)) / CAST(5.230790022511772 AS DOUBLE PRECISION) AS scaler_53, (CAST("ADS_imp_1_OUT".impter_54 AS DOUBLE PRECISION) - CAST(9.541405706332638 AS DOUBLE PRECISION)) / CAST(5.251555514694703 AS DOUBLE PRECISION) AS scaler_54, (CAST("ADS_imp_1_OUT".impter_55 AS DOUBLE PRECISION) - CAST(8.754349338900488 AS DOUBLE PRECISION)) / CAST(6.034364897758397 AS DOUBLE PRECISION) AS scaler_55, (CAST("ADS_imp_1_OUT".impter_56 AS DOUBLE PRECISION) - CAST(3.73973556019485 AS DOUBLE PRECISION)) / CAST(4.953834269857758 AS DOUBLE PRECISION) AS scaler_56, (CAST("ADS_imp_1_OUT".impter_57 AS DOUBLE PRECISION) - CAST(0.219206680584551 AS DOUBLE PRECISION)) / CAST(1.025747142064914 AS DOUBLE PRECISION) AS scaler_57, (CAST("ADS_imp_1_OUT".impter_58 AS DOUBLE PRECISION) - CAST(0.000695894224078 AS DOUBLE PRECISION)) / CAST(0.026370626752257 AS DOUBLE PRECISION) AS scaler_58, (CAST("ADS_imp_1_OUT".impter_59 AS DOUBLE PRECISION) - CAST(0.263743910925539 AS DOUBLE PRECISION)) / CAST(0.893431165157604 AS DOUBLE PRECISION) AS scaler_59, (CAST("ADS_imp_1_OUT".impter_60 AS DOUBLE PRECISION) - CAST(5.474599860821155 AS DOUBLE PRECISION)) / CAST(5.06659361292149 AS DOUBLE PRECISION) AS scaler_60, (CAST("ADS_imp_1_OUT".impter_61 AS DOUBLE PRECISION) - CAST(12.097425191370911 AS DOUBLE PRECISION)) / CAST(4.359965306758356 AS DOUBLE PRECISION) AS scaler_61, (CAST("ADS_imp_1_OUT".impter_62 AS DOUBLE PRECISION) - CAST(11.8580375782881 AS DOUBLE PRECISION)) / CAST(4.889242282258171 AS DOUBLE PRECISION) AS scaler_62, (CAST("ADS_imp_1_OUT".impter_63 AS DOUBLE PRECISION) - CAST(6.716771050800278 AS DOUBLE PRECISION)) / CAST(5.87255780345831 AS DOUBLE PRECISION) AS scaler_63, (CAST("ADS_imp_1_OUT".impter_64 AS DOUBLE PRECISION) - CAST(2.086986778009742 AS DOUBLE PRECISION)) / CAST(4.12826085471658 AS DOUBLE PRECISION) AS scaler_64, (CAST("ADS_imp_1_OUT".impter_65 AS DOUBLE PRECISION) - CAST(0.386221294363257 AS DOUBLE PRECISION)) / CAST(1.915153500596726 AS DOUBLE PRECISION) AS scaler_65 
FROM tmp_20180602150816_zbt_ads_imp_1_out AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "U"

-- Model deployment code

WITH linear_input AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS DOUBLE PRECISION) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS DOUBLE PRECISION) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS DOUBLE PRECISION) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS DOUBLE PRECISION) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS DOUBLE PRECISION) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS DOUBLE PRECISION) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS DOUBLE PRECISION) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS DOUBLE PRECISION) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS DOUBLE PRECISION) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS DOUBLE PRECISION) AS scaler_11, CAST("ADS_sca_2_OUT".scaler_12 AS DOUBLE PRECISION) AS scaler_12, CAST("ADS_sca_2_OUT".scaler_13 AS DOUBLE PRECISION) AS scaler_13, CAST("ADS_sca_2_OUT".scaler_14 AS DOUBLE PRECISION) AS scaler_14, CAST("ADS_sca_2_OUT".scaler_15 AS DOUBLE PRECISION) AS scaler_15, CAST("ADS_sca_2_OUT".scaler_16 AS DOUBLE PRECISION) AS scaler_16, CAST("ADS_sca_2_OUT".scaler_17 AS DOUBLE PRECISION) AS scaler_17, CAST("ADS_sca_2_OUT".scaler_18 AS DOUBLE PRECISION) AS scaler_18, CAST("ADS_sca_2_OUT".scaler_19 AS DOUBLE PRECISION) AS scaler_19, CAST("ADS_sca_2_OUT".scaler_20 AS DOUBLE PRECISION) AS scaler_20, CAST("ADS_sca_2_OUT".scaler_21 AS DOUBLE PRECISION) AS scaler_21, CAST("ADS_sca_2_OUT".scaler_22 AS DOUBLE PRECISION) AS scaler_22, CAST("ADS_sca_2_OUT".scaler_23 AS DOUBLE PRECISION) AS scaler_23, CAST("ADS_sca_2_OUT".scaler_24 AS DOUBLE PRECISION) AS scaler_24, CAST("ADS_sca_2_OUT".scaler_25 AS DOUBLE PRECISION) AS scaler_25, CAST("ADS_sca_2_OUT".scaler_26 AS DOUBLE PRECISION) AS scaler_26, CAST("ADS_sca_2_OUT".scaler_27 AS DOUBLE PRECISION) AS scaler_27, CAST("ADS_sca_2_OUT".scaler_28 AS DOUBLE PRECISION) AS scaler_28, CAST("ADS_sca_2_OUT".scaler_29 AS DOUBLE PRECISION) AS scaler_29, CAST("ADS_sca_2_OUT".scaler_30 AS DOUBLE PRECISION) AS scaler_30, CAST("ADS_sca_2_OUT".scaler_31 AS DOUBLE PRECISION) AS scaler_31, CAST("ADS_sca_2_OUT".scaler_32 AS DOUBLE PRECISION) AS scaler_32, CAST("ADS_sca_2_OUT".scaler_33 AS DOUBLE PRECISION) AS scaler_33, CAST("ADS_sca_2_OUT".scaler_34 AS DOUBLE PRECISION) AS scaler_34, CAST("ADS_sca_2_OUT".scaler_35 AS DOUBLE PRECISION) AS scaler_35, CAST("ADS_sca_2_OUT".scaler_36 AS DOUBLE PRECISION) AS scaler_36, CAST("ADS_sca_2_OUT".scaler_37 AS DOUBLE PRECISION) AS scaler_37, CAST("ADS_sca_2_OUT".scaler_38 AS DOUBLE PRECISION) AS scaler_38, CAST("ADS_sca_2_OUT".scaler_39 AS DOUBLE PRECISION) AS scaler_39, CAST("ADS_sca_2_OUT".scaler_40 AS DOUBLE PRECISION) AS scaler_40, CAST("ADS_sca_2_OUT".scaler_41 AS DOUBLE PRECISION) AS scaler_41, CAST("ADS_sca_2_OUT".scaler_42 AS DOUBLE PRECISION) AS scaler_42, CAST("ADS_sca_2_OUT".scaler_43 AS DOUBLE PRECISION) AS scaler_43, CAST("ADS_sca_2_OUT".scaler_44 AS DOUBLE PRECISION) AS scaler_44, CAST("ADS_sca_2_OUT".scaler_45 AS DOUBLE PRECISION) AS scaler_45, CAST("ADS_sca_2_OUT".scaler_46 AS DOUBLE PRECISION) AS scaler_46, CAST("ADS_sca_2_OUT".scaler_47 AS DOUBLE PRECISION) AS scaler_47, CAST("ADS_sca_2_OUT".scaler_48 AS DOUBLE PRECISION) AS scaler_48, CAST("ADS_sca_2_OUT".scaler_49 AS DOUBLE PRECISION) AS scaler_49, CAST("ADS_sca_2_OUT".scaler_50 AS DOUBLE PRECISION) AS scaler_50, CAST("ADS_sca_2_OUT".scaler_51 AS DOUBLE PRECISION) AS scaler_51, CAST("ADS_sca_2_OUT".scaler_52 AS DOUBLE PRECISION) AS scaler_52, CAST("ADS_sca_2_OUT".scaler_53 AS DOUBLE PRECISION) AS scaler_53, CAST("ADS_sca_2_OUT".scaler_54 AS DOUBLE PRECISION) AS scaler_54, CAST("ADS_sca_2_OUT".scaler_55 AS DOUBLE PRECISION) AS scaler_55, CAST("ADS_sca_2_OUT".scaler_56 AS DOUBLE PRECISION) AS scaler_56, CAST("ADS_sca_2_OUT".scaler_57 AS DOUBLE PRECISION) AS scaler_57, CAST("ADS_sca_2_OUT".scaler_58 AS DOUBLE PRECISION) AS scaler_58, CAST("ADS_sca_2_OUT".scaler_59 AS DOUBLE PRECISION) AS scaler_59, CAST("ADS_sca_2_OUT".scaler_60 AS DOUBLE PRECISION) AS scaler_60, CAST("ADS_sca_2_OUT".scaler_61 AS DOUBLE PRECISION) AS scaler_61, CAST("ADS_sca_2_OUT".scaler_62 AS DOUBLE PRECISION) AS scaler_62, CAST("ADS_sca_2_OUT".scaler_63 AS DOUBLE PRECISION) AS scaler_63, CAST("ADS_sca_2_OUT".scaler_64 AS DOUBLE PRECISION) AS scaler_64, CAST("ADS_sca_2_OUT".scaler_65 AS DOUBLE PRECISION) AS scaler_65 
FROM tmp_20180602150816_m5l_ads_sca_2_out AS "ADS_sca_2_OUT"), 
linear_model_cte AS 
(SELECT linear_input."KEY" AS "KEY", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-2.893413963816996 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-5.419948253021409 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(4.561493022401454 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-7.400296163419023 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-15.863610616322115 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-12.014309615255511 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-0.357117372837729 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-11.904569554759798 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-0.945986443207446 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-3.995826716017321 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(4.550153695313064 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(4.739133247183237 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(14.212136942955238 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(1.291421770337442 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-5.059892852031735 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-25.652702024629924 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(10.317167706813034 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(7.042871915072481 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-5.033037480087726 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-22.66546383975525 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(15.336147643900127 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(0.316272365954929 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-4.790287189859333 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.644892245807987 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(9.138147814337389 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(2.924605438363604 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-13.897747914930038 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(-38.515591533682255 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(1.848479540006367 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(6.100564571797894 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(1.291133874190695 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(3.692674273008166 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(13.337988471754242 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-14.538637268179857 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-37.90597562728951 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(1.903098426795736 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(5.381157543851811 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-28.930977217091446 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-1.00915332726669 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(18.149431018470235 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-20.297281403937873 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(-12.774508487547681 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(8.046333530713227 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(2.723391602939146 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(2.296384249549742 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-4.384222617898166 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-10.279002216666091 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(10.734641512504831 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(7.613276031105312 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(9.266935951515581 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(0.220103562698899 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-7.203679979166115 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-1.924861610253248 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.644892245807985 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-0.991708949413358 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-9.528035875043637 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(8.112925135105701 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-10.456267737550798 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-8.04489471183368 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-7.772600441143196 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-6.555968928655345 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-263.10827498233976 AS DOUBLE PRECISION) AS "Score_0", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-4.520479641082787 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-5.268988328633543 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-4.41478771078473 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-45.602092318773735 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(27.21884524685106 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-2.426498120793452 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-12.347075819641963 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-12.202882965685655 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-33.991268393960944 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-28.18636268595921 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(-6.698030799224974 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(18.347162167893327 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(10.683675146010842 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-9.317788151717629 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-14.034880211472984 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-25.876254983450234 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(8.8757509472709 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(9.46737135577118 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(69.09070034980759 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(43.04008933233039 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-1.75782075239965 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(5.642724759898014 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-5.390202447133292 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(-45.819594064657984 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-9.404715270763637 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(14.811530360167893 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(30.87051481747613 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(3.90414887499077 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(6.962042574323764 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-16.137831793901942 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(1.03290709935255 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-8.222287083167828 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(1.878419847343422 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-5.184865049041012 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(3.369445597825858 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-1.478850054081906 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-21.163165899936256 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(1.274492388418108 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-16.93815066210262 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-3.410491763997852 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(6.050631101419816 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(9.780052356888282 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(-10.159121167625157 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-23.46515241692401 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-16.495693525932424 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(0.774781906986243 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-10.856783132331003 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-4.116294486181222 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(11.323191596333228 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(11.555132252020847 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-5.048149893526574 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-13.606626849706432 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(10.134122818839579 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.515913796646385 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-2.434540779845762 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-8.538864201052334 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-12.17455591622338 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-0.317741981546276 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(18.61557447709021 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(1.003912829927209 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(1.390579350165802 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-294.6248791918034 AS DOUBLE PRECISION) AS "Score_1", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-6.373953042307772 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-1.397055644334766 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-2.074116488964577 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-1.930830259846916 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-10.013876053289954 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-9.48402434411901 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-6.42019436578316 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(1.864458818286592 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(9.010962546036582 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(11.045903258686533 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(1.795314952170141 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(20.00400653186834 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(4.851582315572536 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-0.234102352790224 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-9.79256256845896 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-25.373260826104552 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(4.689293762274307 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(-3.147848152006764 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-15.409975661817413 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(7.001906645662365 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(3.987611060003906 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(11.320421944877596 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-6.637014277009909 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.806115307259986 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-14.694867610568217 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(-41.98254405691407 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-35.37032011380544 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(-4.997826471814247 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(10.151244314118804 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-2.135107033553058 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(-21.57807487241218 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-18.292360547059932 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-27.52837703566376 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-3.572028517911524 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-5.625991417348853 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-30.396054264788933 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-25.7158772653372 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-43.79474469701788 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(4.21007035106496 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(8.865718910282839 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(32.27907154553875 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(-16.74482140154828 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(-47.25881481223304 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-24.62608726563303 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(6.537040497051656 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-30.90560328012 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(1.185463681723124 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(14.0642683836574 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(42.33696081515772 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(18.040352066918757 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(9.083428846797133 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(16.89435288670956 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-0.619238425003917 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(47.14162316856394 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(7.650054256606771 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-0.03255841614429 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(4.325892267164558 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(2.8617648091645 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(12.675404113832261 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(38.233548449405546 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(4.884343368829598 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-315.89473520914413 AS DOUBLE PRECISION) AS "Score_2", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(9.333562484739936 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-12.537248774159835 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-2.663543157632495 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(22.197327897625524 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(7.321701082318967 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-10.390078590909239 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-3.634520490743078 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-12.94866649300025 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-4.668900832604639 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(16.924413748331776 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(-4.302255046516078 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(10.448427792390854 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(25.97461235900972 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(25.323747217616727 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-1.795383575883073 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(0.335329438230444 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(0.43430074536756 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(-29.15468444812742 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-24.191314633147783 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(22.161140060789137 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-10.209511270859213 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(-6.897170442171181 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(0.899872885910916 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.19346767374239 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-15.52149598554656 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(-40.747896217155514 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(6.816820592267177 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(15.788150050720297 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(-23.559333532058325 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-35.13077490202489 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(0.387340162257195 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-23.95238384895684 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-25.131647483299876 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-7.975282942932796 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(5.495966333516649 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-0.241930354080907 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-10.321652226825487 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(0.477934645656775 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-0.22168656099262 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-25.185649849864618 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-50.91081809576023 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(4.517019718957385 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(23.672419214165753 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(29.539276749783657 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-17.64388565070732 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-5.062156786511138 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-1.905519530711193 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-1.086050833090945 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-26.588595197413827 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(3.315229214042288 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(8.61109392863665 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(24.773806981344073 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-4.389380803742778 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.193467673742389 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(6.26718179643643 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(3.821921705429846 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(12.214731463179575 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(10.033655249779894 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(4.015859232783936 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-0.733470165648473 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-16.385926403965495 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-256.2430320080053 AS DOUBLE PRECISION) AS "Score_3", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-7.029192345121751 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-12.158496275695715 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-25.966439321985003 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-18.201947343544155 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-27.94439488353768 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-20.36046315780358 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-2.632849810832372 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-11.9045695547598 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-4.4079113639778 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-12.550859597995014 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(-16.935768266367827 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(-23.035290808927012 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(-17.87006038886229 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-10.80706265977785 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(6.03673595891009 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-25.652702024629924 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(6.170389161343383 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(17.59459199158631 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(14.252444144673628 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(3.500332574197328 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(6.324555634041088 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(4.322135578014012 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(2.999576286369854 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(46.98040010711242 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(10.68585462195163 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(21.612702771176156 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(3.78828091411219 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(2.737799827401956 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(1.64078033764577 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(16.837458594928325 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(24.483126089341226 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(10.287460096918467 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(12.95237571166395 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(4.604162338464976 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(8.341001372240342 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(4.612631367194295 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(11.279761942970342 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(16.855161836829758 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(17.634517225831377 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-3.889572276272847 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(23.18779788555274 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(21.399666365452745 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(-1.150007753622049 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-6.314094106056575 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-12.369856490908013 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(27.731977391887835 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(16.056811373315142 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-24.36287127526071 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(2.941337842311587 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(0.658026448149802 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-20.231350201342003 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-23.976335165122055 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-6.689764511086731 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(-45.69061561549604 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-10.565221734584743 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-7.357530741054965 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-25.237264457876908 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-20.202963890696257 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-24.274265469570086 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-11.32440036713096 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-5.279939218445707 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-273.63217200277876 AS DOUBLE PRECISION) AS "Score_4", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(5.694729870430299 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(25.51872012151828 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(7.513035541773434 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(13.608980659455865 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(20.391802979529476 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(24.502858326238997 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-8.10125907206803 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(1.044096938240516 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-5.893543723853697 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(15.776347950449969 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(2.624605274675299 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(-8.023829883216797 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(-17.613945369656378 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(5.877816616061448 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(0.896726527954532 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-25.988031462860384 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(1.589309870506159 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(26.507201190891266 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(3.43641713287425 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-33.131285806429155 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-54.38324412920817 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(-30.296003632063567 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-5.690160075770276 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(-45.884083289238774 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(7.247942214223971 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(21.640218484203285 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(19.026978626297566 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(5.085198635902336 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(-7.408660900902723 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-14.079932766546301 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(0.903793711933481 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-1.16374310880121 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(4.535713067103112 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(-9.102705293475388 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-8.716709211158745 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-2.44033465672112 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(1.476763866920819 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-29.408911862748237 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-6.461627369390926 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-19.980360800461057 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-19.08369678188125 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(-1.563640916203783 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(3.408202091101908 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(2.555943407391477 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-5.725651395544078 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-4.674765833018012 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-11.838721316215626 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-7.988946773879247 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-20.69340248980752 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-1.028490157147566 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-6.568583594884595 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-15.204831774554277 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-3.491609432552363 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.451424572065586 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(10.520490140897216 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(17.760616006697592 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(17.477728114444353 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-6.494666972557866 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-20.799645891091046 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-10.29494687431686 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-8.03445846762475 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-262.9833292823083 AS DOUBLE PRECISION) AS "Score_5", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-7.435958764438203 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-14.2589494171781 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-3.154565033945497 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(-12.473745042074302 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-6.76489090179529 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-5.625718090856162 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-6.199272532032113 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(1.41698870189779 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-16.323485934701473 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(-8.129834932270928 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(6.408960172043963 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(-21.304892433978402 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(-14.060911133917568 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-1.696949722123988 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-9.384257593943621 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(1.061876554396438 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(-6.803083104345635 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(14.593751315401647 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(6.894715768908066 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-17.33971644962278 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(-29.881316847795464 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(-10.551788863193819 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-4.940266004177809 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.612647633517587 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(5.082822095917516 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(5.847157465307293 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(12.535513200257896 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(-4.244761628959612 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(-3.882977781082972 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-17.760558422690337 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(1.22657718048116 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(11.907715135075165 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(26.13861469432211 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(8.114613532432003 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-3.482948157193238 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-6.393604279520007 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(1.607634700124111 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-6.117563464407011 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-8.132455851986792 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(34.424911188871924 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(6.385074272847936 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(1.456218298818476 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(-5.487503026245385 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(17.56967879973658 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(20.51436596264451 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-15.138046490346792 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-15.621305390973376 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(19.456762503590785 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(17.76783284527995 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-5.284774911703305 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(21.733747247113914 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(11.606424724343674 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-11.715792048970116 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(-45.72286022778644 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-12.293574375788758 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-10.607162760650032 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-9.570361360367016 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(4.824043286332776 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(19.479125386205915 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-0.10278057081118 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-12.544517547760249 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-269.6010940089666 AS DOUBLE PRECISION) AS "Score_6", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-3.458473918952326 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(6.037855900515725 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(7.033637856818037 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(8.715935140802678 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(10.163249504252796 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(9.318873988098732 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(11.327192945551124 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-11.755412849296873 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(0.959638200028004 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(5.172719493540193 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(2.389491608639712 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(35.73919597431174 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(16.682579732379455 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-3.14997461511681 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(0.814679429056555 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-25.54092554521977 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(-17.64400885291423 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(-19.041289414202343 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(-19.87467756650596 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-9.331645240563605 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(5.859947822331895 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(6.028941976016088 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(3.299533915006866 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.709381470388786 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-12.93148349730002 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(-1.150047289257238 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(-25.774297447408085 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(-7.809961981678528 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(15.388386205790544 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-0.187019979821338 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(-21.771744953540676 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(13.988829835247698 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(9.331050591678306 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(12.62403107003748 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(17.123800681258615 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(12.660586737029927 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(9.458435937708062 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-13.509619317232183 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-5.406218830924717 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(4.275592113890008 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(10.484459374102165 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(11.77284325147631 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(-14.289594208426578 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-12.283268513537799 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-12.140218065953064 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(1.065325122106091 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-7.217920854625135 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(3.195219090070528 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(3.188752244654778 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-23.288048224530957 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-40.37730811139361 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-14.978429422940698 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-9.741192412612168 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.709381470388784 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-13.946739870156282 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(1.071071195013944 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-17.896060872799154 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(-33.01960063401915 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-33.13101966286112 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-10.0889737865189 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-7.977183647646644 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-282.08842884998035 AS DOUBLE PRECISION) AS "Score_7", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(-4.225957728983393 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(-1.485250868977118 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(-21.46847851786569 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(5.418430742518876 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(7.817410765815712 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-27.129355043313915 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-15.862029296419408 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-0.52204846912007 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(-6.092698764528936 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(21.716742445303076 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(8.652182910108577 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(-24.662606190394428 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(15.364654529382083 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(-1.762666766213931 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(-16.399767179706068 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-0.391217677935492 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(21.839844625435347 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(22.493042929070633 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(15.366212655498183 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(-11.086846488803465 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(12.59676109211492 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(26.255167994922928 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-16.62957865268783 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(-0.225712286032807 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-5.558604616629757 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(-4.131737565095037 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(30.852270602547513 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(1.742173214721808 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(3.288932045730298 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-27.44823866072167 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(-0.451896855966763 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-35.8629974724723 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-16.053512706781678 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(60.5147412926941 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(5.5971129180668 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(-12.640135789832472 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-48.9681473144885 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-0.557590419932955 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(2.420219312821628 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(21.85015251223208 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(8.318242263747148 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(3.694392178528034 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(18.82726554273248 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-0.289496704274319 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-4.470294672456886 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-16.397067089199478 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(-2.74373591754391 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(21.43556869865132 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-21.656075348333445 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-23.683770822778616 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(6.220391595250124 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-8.923582604767661 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(-17.31380688705798 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(-46.5612201473369 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-17.5690472228119 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-25.641430982483577 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(3.452171634330292 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(15.493182499205178 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-18.3136791642958 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(-27.11470922389692 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-13.847186709122516 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-202.75990667420612 AS DOUBLE PRECISION) AS "Score_8", CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_2 + CAST(2.440598515898658 AS DOUBLE PRECISION) * linear_input.scaler_3 + CAST(3.013246662780908 AS DOUBLE PRECISION) * linear_input.scaler_4 + CAST(11.160426205863246 AS DOUBLE PRECISION) * linear_input.scaler_5 + CAST(0.309771558950972 AS DOUBLE PRECISION) * linear_input.scaler_6 + CAST(-8.426464123158521 AS DOUBLE PRECISION) * linear_input.scaler_7 + CAST(-3.495430012282525 AS DOUBLE PRECISION) * linear_input.scaler_8 + CAST(-8.185985366732368 AS DOUBLE PRECISION) * linear_input.scaler_9 + CAST(-12.948666493000283 AS DOUBLE PRECISION) * linear_input.scaler_10 + CAST(5.716873929706281 AS DOUBLE PRECISION) * linear_input.scaler_11 + CAST(17.14954619259439 AS DOUBLE PRECISION) * linear_input.scaler_12 + CAST(0.991377900564662 AS DOUBLE PRECISION) * linear_input.scaler_13 + CAST(5.305015930148197 AS DOUBLE PRECISION) * linear_input.scaler_14 + CAST(8.823752150176361 AS DOUBLE PRECISION) * linear_input.scaler_15 + CAST(13.225262787501409 AS DOUBLE PRECISION) * linear_input.scaler_16 + CAST(2.365852228220118 AS DOUBLE PRECISION) * linear_input.scaler_17 + CAST(-26.435137380501004 AS DOUBLE PRECISION) * linear_input.scaler_18 + CAST(6.654468563572019 AS DOUBLE PRECISION) * linear_input.scaler_19 + CAST(36.524389497519934 AS DOUBLE PRECISION) * linear_input.scaler_20 + CAST(6.833155806685681 AS DOUBLE PRECISION) * linear_input.scaler_21 + CAST(16.80904533975338 AS DOUBLE PRECISION) * linear_input.scaler_22 + CAST(48.56174096735218 AS DOUBLE PRECISION) * linear_input.scaler_23 + CAST(5.484588576920529 AS DOUBLE PRECISION) * linear_input.scaler_24 + CAST(-9.486611749061295 AS DOUBLE PRECISION) * linear_input.scaler_25 + CAST(0.193467673742389 AS DOUBLE PRECISION) * linear_input.scaler_26 + CAST(-0.431354611307913 AS DOUBLE PRECISION) * linear_input.scaler_27 + CAST(16.890130293518975 AS DOUBLE PRECISION) * linear_input.scaler_28 + CAST(30.53690631592379 AS DOUBLE PRECISION) * linear_input.scaler_29 + CAST(26.151320827417774 AS DOUBLE PRECISION) * linear_input.scaler_30 + CAST(34.38874392653607 AS DOUBLE PRECISION) * linear_input.scaler_31 + CAST(-3.245453257576832 AS DOUBLE PRECISION) * linear_input.scaler_32 + CAST(-22.804652052893257 AS DOUBLE PRECISION) * linear_input.scaler_33 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_34 + CAST(-29.50588770067079 AS DOUBLE PRECISION) * linear_input.scaler_35 + CAST(-3.151720158149758 AS DOUBLE PRECISION) * linear_input.scaler_36 + CAST(17.613561429214798 AS DOUBLE PRECISION) * linear_input.scaler_37 + CAST(-33.937839947332385 AS DOUBLE PRECISION) * linear_input.scaler_38 + CAST(2.259176975517868 AS DOUBLE PRECISION) * linear_input.scaler_39 + CAST(-0.953280534107844 AS DOUBLE PRECISION) * linear_input.scaler_40 + CAST(0.0 AS DOUBLE PRECISION) * linear_input.scaler_41 + CAST(-30.0461580569573 AS DOUBLE PRECISION) * linear_input.scaler_42 + CAST(-12.380602139100132 AS DOUBLE PRECISION) * linear_input.scaler_43 + CAST(-42.36860157118976 AS DOUBLE PRECISION) * linear_input.scaler_44 + CAST(-62.58213807822092 AS DOUBLE PRECISION) * linear_input.scaler_45 + CAST(-30.62801237418516 AS DOUBLE PRECISION) * linear_input.scaler_46 + CAST(-12.685209119252832 AS DOUBLE PRECISION) * linear_input.scaler_47 + CAST(-14.800887509976455 AS DOUBLE PRECISION) * linear_input.scaler_48 + CAST(-2.977644910249538 AS DOUBLE PRECISION) * linear_input.scaler_49 + CAST(-5.062156786511138 AS DOUBLE PRECISION) * linear_input.scaler_50 + CAST(5.024957729810145 AS DOUBLE PRECISION) * linear_input.scaler_51 + CAST(-4.531205462564873 AS DOUBLE PRECISION) * linear_input.scaler_52 + CAST(-0.892935159048144 AS DOUBLE PRECISION) * linear_input.scaler_53 + CAST(-16.46199532071686 AS DOUBLE PRECISION) * linear_input.scaler_54 + CAST(-23.787248667863754 AS DOUBLE PRECISION) * linear_input.scaler_55 + CAST(-1.125145879323144 AS DOUBLE PRECISION) * linear_input.scaler_56 + CAST(0.375522097090745 AS DOUBLE PRECISION) * linear_input.scaler_57 + CAST(0.193467673742388 AS DOUBLE PRECISION) * linear_input.scaler_58 + CAST(-11.51219909031051 AS DOUBLE PRECISION) * linear_input.scaler_59 + CAST(-2.207259222316485 AS DOUBLE PRECISION) * linear_input.scaler_60 + CAST(-2.91896801598904 AS DOUBLE PRECISION) * linear_input.scaler_61 + CAST(7.53450238999906 AS DOUBLE PRECISION) * linear_input.scaler_62 + CAST(-5.347239281294765 AS DOUBLE PRECISION) * linear_input.scaler_63 + CAST(1.634396451676699 AS DOUBLE PRECISION) * linear_input.scaler_64 + CAST(-11.919822418231737 AS DOUBLE PRECISION) * linear_input.scaler_65 + CAST(-272.03499112445655 AS DOUBLE PRECISION) AS "Score_9" 
FROM linear_input), 
linear_model_cte_logistic AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", linear_model_cte."Score_4" AS "Score_4", linear_model_cte."Score_5" AS "Score_5", linear_model_cte."Score_6" AS "Score_6", linear_model_cte."Score_7" AS "Score_7", linear_model_cte."Score_8" AS "Score_8", linear_model_cte."Score_9" AS "Score_9" 
FROM linear_model_cte), 
orig_cte AS 
(SELECT linear_model_cte_logistic."KEY" AS "KEY", linear_model_cte_logistic."Score_0" AS "Score_0", linear_model_cte_logistic."Score_1" AS "Score_1", linear_model_cte_logistic."Score_2" AS "Score_2", linear_model_cte_logistic."Score_3" AS "Score_3", linear_model_cte_logistic."Score_4" AS "Score_4", linear_model_cte_logistic."Score_5" AS "Score_5", linear_model_cte_logistic."Score_6" AS "Score_6", linear_model_cte_logistic."Score_7" AS "Score_7", linear_model_cte_logistic."Score_8" AS "Score_8", linear_model_cte_logistic."Score_9" AS "Score_9", CAST(NULL AS DOUBLE PRECISION) AS "Proba_0", CAST(NULL AS DOUBLE PRECISION) AS "Proba_1", CAST(NULL AS DOUBLE PRECISION) AS "Proba_2", CAST(NULL AS DOUBLE PRECISION) AS "Proba_3", CAST(NULL AS DOUBLE PRECISION) AS "Proba_4", CAST(NULL AS DOUBLE PRECISION) AS "Proba_5", CAST(NULL AS DOUBLE PRECISION) AS "Proba_6", CAST(NULL AS DOUBLE PRECISION) AS "Proba_7", CAST(NULL AS DOUBLE PRECISION) AS "Proba_8", CAST(NULL AS DOUBLE PRECISION) AS "Proba_9", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_0", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_1", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_2", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_3", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_4", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_5", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_6", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_7", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_8", CAST(NULL AS DOUBLE PRECISION) AS "LogProba_9", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE PRECISION) AS "DecisionProba" 
FROM linear_model_cte_logistic), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu."class" AS "class", scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS "class", orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS "class", orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS "class", orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS "class", orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 4 AS "class", orig_cte."LogProba_4" AS "LogProba", orig_cte."Proba_4" AS "Proba", orig_cte."Score_4" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 5 AS "class", orig_cte."LogProba_5" AS "LogProba", orig_cte."Proba_5" AS "Proba", orig_cte."Score_5" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 6 AS "class", orig_cte."LogProba_6" AS "LogProba", orig_cte."Proba_6" AS "Proba", orig_cte."Score_6" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 7 AS "class", orig_cte."LogProba_7" AS "LogProba", orig_cte."Proba_7" AS "Proba", orig_cte."Score_7" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 8 AS "class", orig_cte."LogProba_8" AS "LogProba", orig_cte."Proba_8" AS "Proba", orig_cte."Score_8" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 9 AS "class", orig_cte."LogProba_9" AS "LogProba", orig_cte."Proba_9" AS "Proba", orig_cte."Score_9" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Score_4" AS "Score_4", orig_cte."Score_5" AS "Score_5", orig_cte."Score_6" AS "Score_6", orig_cte."Score_7" AS "Score_7", orig_cte."Score_8" AS "Score_8", orig_cte."Score_9" AS "Score_9", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."Proba_4" AS "Proba_4", orig_cte."Proba_5" AS "Proba_5", orig_cte."Proba_6" AS "Proba_6", orig_cte."Proba_7" AS "Proba_7", orig_cte."Proba_8" AS "Proba_8", orig_cte."Proba_9" AS "Proba_9", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."LogProba_4" AS "LogProba_4", orig_cte."LogProba_5" AS "LogProba_5", orig_cte."LogProba_6" AS "LogProba_6", orig_cte."LogProba_7" AS "LogProba_7", orig_cte."LogProba_8" AS "LogProba_8", orig_cte."LogProba_9" AS "LogProba_9", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union."class" AS "class", score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Score_4" AS "Score_4", score_max."Score_5" AS "Score_5", score_max."Score_6" AS "Score_6", score_max."Score_7" AS "Score_7", score_max."Score_8" AS "Score_8", score_max."Score_9" AS "Score_9", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."Proba_4" AS "Proba_4", score_max."Proba_5" AS "Proba_5", score_max."Proba_6" AS "Proba_6", score_max."Proba_7" AS "Proba_7", score_max."Proba_8" AS "Proba_8", score_max."Proba_9" AS "Proba_9", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."LogProba_4" AS "LogProba_4", score_max."LogProba_5" AS "LogProba_5", score_max."LogProba_6" AS "LogProba_6", score_max."LogProba_7" AS "LogProba_7", score_max."LogProba_8" AS "LogProba_8", score_max."LogProba_9" AS "LogProba_9", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Score_4" AS "Score_4", score_max."Score_5" AS "Score_5", score_max."Score_6" AS "Score_6", score_max."Score_7" AS "Score_7", score_max."Score_8" AS "Score_8", score_max."Score_9" AS "Score_9", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."Proba_4" AS "Proba_4", score_max."Proba_5" AS "Proba_5", score_max."Proba_6" AS "Proba_6", score_max."Proba_7" AS "Proba_7", score_max."Proba_8" AS "Proba_8", score_max."Proba_9" AS "Proba_9", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."LogProba_4" AS "LogProba_4", score_max."LogProba_5" AS "LogProba_5", score_max."LogProba_6" AS "LogProba_6", score_max."LogProba_7" AS "LogProba_7", score_max."LogProba_8" AS "LogProba_8", score_max."LogProba_9" AS "LogProba_9", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max."class") AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."max_Score" <= union_with_max."Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_max."KEY" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Score_4" AS "Score_4", arg_max_cte."Score_5" AS "Score_5", arg_max_cte."Score_6" AS "Score_6", arg_max_cte."Score_7" AS "Score_7", arg_max_cte."Score_8" AS "Score_8", arg_max_cte."Score_9" AS "Score_9", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", arg_max_cte."Proba_4" AS "Proba_4", arg_max_cte."Proba_5" AS "Proba_5", arg_max_cte."Proba_6" AS "Proba_6", arg_max_cte."Proba_7" AS "Proba_7", arg_max_cte."Proba_8" AS "Proba_8", arg_max_cte."Proba_9" AS "Proba_9", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", CASE WHEN (arg_max_cte."Proba_4" IS NULL OR arg_max_cte."Proba_4" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_4") ELSE -1.79769313486231e+308 END AS "LogProba_4", CASE WHEN (arg_max_cte."Proba_5" IS NULL OR arg_max_cte."Proba_5" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_5") ELSE -1.79769313486231e+308 END AS "LogProba_5", CASE WHEN (arg_max_cte."Proba_6" IS NULL OR arg_max_cte."Proba_6" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_6") ELSE -1.79769313486231e+308 END AS "LogProba_6", CASE WHEN (arg_max_cte."Proba_7" IS NULL OR arg_max_cte."Proba_7" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_7") ELSE -1.79769313486231e+308 END AS "LogProba_7", CASE WHEN (arg_max_cte."Proba_8" IS NULL OR arg_max_cte."Proba_8" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_8") ELSE -1.79769313486231e+308 END AS "LogProba_8", CASE WHEN (arg_max_cte."Proba_9" IS NULL OR arg_max_cte."Proba_9" > CAST(0.0 AS DOUBLE PRECISION)) THEN ln(arg_max_cte."Proba_9") ELSE -1.79769313486231e+308 END AS "LogProba_9", arg_max_cte."arg_max_Score" AS "Decision", CASE WHEN (arg_max_cte."arg_max_Score" = 0) THEN arg_max_cte."Proba_0" WHEN (arg_max_cte."arg_max_Score" = 1) THEN arg_max_cte."Proba_1" WHEN (arg_max_cte."arg_max_Score" = 2) THEN arg_max_cte."Proba_2" WHEN (arg_max_cte."arg_max_Score" = 3) THEN arg_max_cte."Proba_3" WHEN (arg_max_cte."arg_max_Score" = 4) THEN arg_max_cte."Proba_4" WHEN (arg_max_cte."arg_max_Score" = 5) THEN arg_max_cte."Proba_5" WHEN (arg_max_cte."arg_max_Score" = 6) THEN arg_max_cte."Proba_6" WHEN (arg_max_cte."arg_max_Score" = 7) THEN arg_max_cte."Proba_7" WHEN (arg_max_cte."arg_max_Score" = 8) THEN arg_max_cte."Proba_8" WHEN (arg_max_cte."arg_max_Score" = 9) THEN arg_max_cte."Proba_9" END AS "DecisionProba" 
FROM arg_max_cte