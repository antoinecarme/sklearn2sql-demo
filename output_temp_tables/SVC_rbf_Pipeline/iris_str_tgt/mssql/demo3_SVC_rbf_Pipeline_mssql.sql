-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : SVC_rbf_Pipeline
-- Dataset : iris_str_tgt
-- Database : mssql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table ##TMP_20180602160538_D7D_ADS_imp_1_OUT part 1. Create 


CREATE TABLE ##TMP_20180602160538_D7D_ADS_imp_1_OUT (
	[KEY] BIGINT NULL, 
	imputer_output_2 FLOAT(53) NULL, 
	imputer_output_3 FLOAT(53) NULL, 
	imputer_output_4 FLOAT(53) NULL, 
	imputer_output_5 FLOAT(53) NULL
)



-- Code For temporary table ##TMP_20180602160538_D7D_ADS_imp_1_OUT part 2. Populate

INSERT INTO ##TMP_20180602160538_D7D_ADS_imp_1_OUT ([KEY], imputer_output_2, imputer_output_3, imputer_output_4, imputer_output_5) SELECT [ADS_imp_1_OUT].[KEY], [ADS_imp_1_OUT].imputer_output_2, [ADS_imp_1_OUT].imputer_output_3, [ADS_imp_1_OUT].imputer_output_4, [ADS_imp_1_OUT].imputer_output_5 
FROM (SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 5.8474999999999975 ELSE [ADS].[Feature_0] END AS imputer_output_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 3.0366666666666657 ELSE [ADS].[Feature_1] END AS imputer_output_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 3.8450000000000006 ELSE [ADS].[Feature_2] END AS imputer_output_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 1.245 ELSE [ADS].[Feature_3] END AS imputer_output_5 
FROM iris_str_tgt AS [ADS]) AS [ADS_imp_1_OUT]

-- Code For temporary table ##TMP_20180602160538_5HM_ADS_sca_2_OUT part 1. Create 


CREATE TABLE ##TMP_20180602160538_5HM_ADS_sca_2_OUT (
	[KEY] BIGINT NULL, 
	scaler_output_2 FLOAT NULL, 
	scaler_output_3 FLOAT NULL, 
	scaler_output_4 FLOAT NULL, 
	scaler_output_5 FLOAT NULL
)



-- Code For temporary table ##TMP_20180602160538_5HM_ADS_sca_2_OUT part 2. Populate

INSERT INTO ##TMP_20180602160538_5HM_ADS_sca_2_OUT ([KEY], scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) SELECT [ADS_sca_2_OUT].[KEY], [ADS_sca_2_OUT].scaler_output_2, [ADS_sca_2_OUT].scaler_output_3, [ADS_sca_2_OUT].scaler_output_4, [ADS_sca_2_OUT].scaler_output_5 
FROM (SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].imputer_output_2 AS FLOAT(53)) - 5.8474999999999975) / 0.827039146594646 AS scaler_output_2, (CAST([ADS_imp_1_OUT].imputer_output_3 AS FLOAT(53)) - 3.0366666666666657) / 0.43625935201691934 AS scaler_output_3, (CAST([ADS_imp_1_OUT].imputer_output_4 AS FLOAT(53)) - 3.8450000000000006) / 1.709817241695732 AS scaler_output_4, (CAST([ADS_imp_1_OUT].imputer_output_5 AS FLOAT(53)) - 1.245) / 0.7498722113355939 AS scaler_output_5 
FROM ##TMP_20180602160538_D7D_ADS_imp_1_OUT AS [ADS_imp_1_OUT]) AS [ADS_sca_2_OUT]

-- Code For temporary table ##TMP_20180602160538_FRM_KernAgg_B0 part 1. Create 


CREATE TABLE ##TMP_20180602160538_FRM_KernAgg_B0 (
	[KEY] BIGINT NULL, 
	[OVO_Class1] VARCHAR(max) COLLATE utf8 NULL, 
	[OVO_Class2] VARCHAR(max) COLLATE utf8 NULL, 
	[OVO_Decision] BIGINT NULL, 
	[OVO_Conf] FLOAT NULL
)



-- Code For temporary table ##TMP_20180602160538_FRM_KernAgg_B0 part 2. Populate

WITH kernel_input AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CAST([ADS_sca_2_OUT].scaler_output_2 AS FLOAT(53)) AS scaler_output_2, CAST([ADS_sca_2_OUT].scaler_output_3 AS FLOAT(53)) AS scaler_output_3, CAST([ADS_sca_2_OUT].scaler_output_4 AS FLOAT(53)) AS scaler_output_4, CAST([ADS_sca_2_OUT].scaler_output_5 AS FLOAT(53)) AS scaler_output_5 
FROM ##TMP_20180602160538_5HM_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[SV_data_CLASS_0_CLASS_1] AS 
(SELECT [Values].sv_idx AS sv_idx, CAST([Values].dual_coeff AS FLOAT(53)) AS dual_coeff, CAST([Values].sv_0 AS FLOAT(53)) AS sv_0, CAST([Values].sv_1 AS FLOAT(53)) AS sv_1, CAST([Values].sv_2 AS FLOAT(53)) AS sv_2, CAST([Values].sv_3 AS FLOAT(53)) AS sv_3 
FROM (SELECT 0 AS sv_idx, 0.0 AS dual_coeff, -1.0247398850339788 AS sv_0, 1.062059371773341 AS sv_1, -1.313005826151042 AS sv_2, -0.8601465559727752 AS sv_3 UNION ALL SELECT 1 AS sv_idx, 0.0 AS dual_coeff, -0.5410868419500932 AS sv_0, 0.832837924628016 AS sv_1, -1.3714916090530929 AS sv_2, -1.1268586663519302 AS sv_3 UNION ALL SELECT 2 AS sv_idx, 1.0 AS dual_coeff, -0.903826624263008 AS sv_0, 0.6036164774826909 AS sv_1, -1.2545200432489911 AS sv_2, -0.9935026111623527 AS sv_3 UNION ALL SELECT 3 AS sv_idx, 0.33225923040998845 AS dual_coeff, -1.7502194496598062 AS sv_0, -0.3132693110986089 AS sv_1, -1.429977391955144 AS sv_2, -1.3935707767310854 AS sv_3 UNION ALL SELECT 4 AS sv_idx, 0.0 AS dual_coeff, -1.7502194496598062 AS sv_0, 0.37439503033736665 AS sv_1, -1.4884631748571948 AS sv_2, -1.3935707767310854 AS sv_3 UNION ALL SELECT 5 AS sv_idx, 0.021795563804219834 AS dual_coeff, -1.2665664065759217 AS sv_0, -0.08404786395328369 AS sv_1, -1.429977391955144 AS sv_2, -1.2602147215415076 AS sv_3 UNION ALL SELECT 6 AS sv_idx, 1.0 AS dual_coeff, -1.6293061888888354 AS sv_0, -1.6885979939705589 AS sv_1, -1.4884631748571948 AS sv_2, -1.2602147215415076 AS sv_3 UNION ALL SELECT 7 AS sv_idx, 0.8562495661878395 AS dual_coeff, -0.17834705963717942 AS sv_0, 3.1250523960812666 AS sv_1, -1.3714916090530929 AS sv_2, -1.1268586663519302 AS sv_3 UNION ALL SELECT 8 AS sv_idx, 0.0 AS dual_coeff, -0.5410868419500932 AS sv_0, 0.832837924628016 AS sv_1, -1.2545200432489911 AS sv_2, -1.3935707767310854 AS sv_3 UNION ALL SELECT 9 AS sv_idx, -0.0 AS dual_coeff, 0.1843927226757343 AS sv_0, -0.3132693110986089 AS sv_1, 0.38308187800843274 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 10 AS sv_idx, -0.0 AS dual_coeff, 1.1516988088435047 AS sv_0, -0.542490758243934 AS sv_1, 0.5585392267145852 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 11 AS sv_idx, -0.0 AS dual_coeff, -0.29926032040815137 AS sv_0, -0.08404786395328369 AS sv_1, 0.38308187800843274 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 12 AS sv_idx, -0.0 AS dual_coeff, 0.5471325049886481 AS sv_0, 0.6036164774826909 AS sv_1, 0.5000534438125346 AS sv_2, 0.4734139959230002 AS sv_3 UNION ALL SELECT 13 AS sv_idx, -0.9177156456094382 AS dual_coeff, -0.903826624263008 AS sv_0, -1.2301550996799087 AS sv_1, -0.4942048655223301 AS sv_2, -0.19336628002488743 AS sv_3 UNION ALL SELECT 14 AS sv_idx, -0.4909641792902076 AS dual_coeff, 1.3935253303854476 AS sv_0, 0.37439503033736665 AS sv_1, 0.5000534438125346 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 15 AS sv_idx, -0.0 AS dual_coeff, -0.4201735811791223 AS sv_0, -1.6885979939705589 AS sv_1, 0.09065296349817846 AS sv_2, 0.07334583035426756 AS sv_3 UNION ALL SELECT 16 AS sv_idx, -0.0 AS dual_coeff, -0.782913363492036 AS sv_0, -0.7717122053892582 AS sv_1, 0.03216718059612755 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 17 AS sv_idx, -0.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -1.6885979939705589 AS sv_1, 0.3245960951063821 AS sv_2, 0.07334583035426756 AS sv_3 UNION ALL SELECT 18 AS sv_idx, -0.13305742773498766 AS dual_coeff, 0.42621924421767715 AS sv_0, -1.917819441115883 AS sv_1, 0.38308187800843274 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 19 AS sv_idx, -0.546353336170716 AS dual_coeff, -1.1456531458049497 AS sv_0, -1.4593765468252338 AS sv_1, -0.31874751681617763 AS sv_2, -0.3267223352144651 AS sv_3 UNION ALL SELECT 20 AS sv_idx, -0.0 AS dual_coeff, 0.06347946190476342 AS sv_0, 0.37439503033736665 AS sv_1, 0.5585392267145852 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 21 AS sv_idx, -0.731380109079638 AS dual_coeff, 0.1843927226757343 AS sv_0, 0.832837924628016 AS sv_1, 0.38308187800843274 AS sv_2, 0.4734139959230002 AS sv_3 UNION ALL SELECT 22 AS sv_idx, -0.0 AS dual_coeff, 1.0307855480725336 AS sv_0, 0.1451735831920415 AS sv_1, 0.5000534438125346 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 23 AS sv_idx, -0.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -1.2301550996799087 AS sv_1, 0.6170250096166364 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 24 AS sv_idx, -0.39083366251706 AS dual_coeff, -1.0247398850339788 AS sv_0, -2.3762623354065333 AS sv_1, -0.20177595101207582 AS sv_2, -0.3267223352144651 AS sv_3 UNION ALL SELECT 25 AS sv_idx, -0.0 AS dual_coeff, 0.3053059834467052 AS sv_0, -0.3132693110986089 AS sv_1, 0.5000534438125346 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 26 AS sv_idx, -0.0 AS dual_coeff, -0.5410868419500932 AS sv_0, -0.08404786395328369 AS sv_1, 0.38308187800843274 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 27 AS sv_idx, -0.0 AS dual_coeff, 1.0307855480725336 AS sv_0, -0.08404786395328369 AS sv_1, 0.6755107925186871 AS sv_2, 0.6067700511125775 AS sv_3 UNION ALL SELECT 28 AS sv_idx, -0.0 AS dual_coeff, 1.2726120696144765 AS sv_0, 0.1451735831920415 AS sv_1, 0.6170250096166364 AS sv_2, 0.34005794073342255 AS sv_3) AS [Values]), 
[kernel_dp_CLASS_0_CLASS_1] AS 
(SELECT t.[KEY] AS [KEY], t.dot_product AS dot_product 
FROM (SELECT full_join_data_sv.[KEY] AS [KEY], sum(CAST(full_join_data_sv.dot_prod1 AS FLOAT(53))) + 0.017847346128780302 AS dot_product 
FROM (SELECT kernel_input.[KEY] AS [KEY], [SV_data_CLASS_0_CLASS_1].dual_coeff * exp(CASE WHEN (CASE WHEN (-100.0 <= -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_0_CLASS_1].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_0_CLASS_1].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_0_CLASS_1].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_0_CLASS_1].sv_3 AS FLOAT(53)), 2))) THEN -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_0_CLASS_1].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_0_CLASS_1].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_0_CLASS_1].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_0_CLASS_1].sv_3 AS FLOAT(53)), 2)) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_0_CLASS_1].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_0_CLASS_1].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_0_CLASS_1].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_0_CLASS_1].sv_3 AS FLOAT(53)), 2))) THEN -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_0_CLASS_1].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_0_CLASS_1].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_0_CLASS_1].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_0_CLASS_1].sv_3 AS FLOAT(53)), 2)) ELSE -100.0 END ELSE 100.0 END) AS dot_prod1 
FROM kernel_input, [SV_data_CLASS_0_CLASS_1]) AS full_join_data_sv GROUP BY full_join_data_sv.[KEY]) AS t), 
[kernel_cte_CLASS_0_CLASS_1] AS 
(SELECT [kernel_dp_CLASS_0_CLASS_1].[KEY] AS [KEY], 'CLASS_0' AS [OVO_Class1], 'CLASS_1' AS [OVO_Class2], CASE WHEN (-[kernel_dp_CLASS_0_CLASS_1].dot_product >= 0.0) THEN 1 ELSE 0 END AS [OVO_Decision], coalesce(-[kernel_dp_CLASS_0_CLASS_1].dot_product, 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(-((-[kernel_dp_CLASS_0_CLASS_1].dot_product) * -3.386129851592317 + -0.22043589622053214))) THEN -(-((-[kernel_dp_CLASS_0_CLASS_1].dot_product) * -3.386129851592317 + -0.22043589622053214)) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(-((-[kernel_dp_CLASS_0_CLASS_1].dot_product) * -3.386129851592317 + -0.22043589622053214))) THEN -(-((-[kernel_dp_CLASS_0_CLASS_1].dot_product) * -3.386129851592317 + -0.22043589622053214)) ELSE -100.0 END ELSE 100.0 END))) AS [OVO_Conf] 
FROM [kernel_dp_CLASS_0_CLASS_1])
 INSERT INTO ##TMP_20180602160538_FRM_KernAgg_B0 ([KEY], [OVO_Class1], [OVO_Class2], [OVO_Decision], [OVO_Conf]) SELECT [KernAgg_B0].[KEY], [KernAgg_B0].[OVO_Class1], [KernAgg_B0].[OVO_Class2], [KernAgg_B0].[OVO_Decision], [KernAgg_B0].[OVO_Conf] 
FROM (SELECT [KernAgg_esu_0].[KEY] AS [KEY], [KernAgg_esu_0].[OVO_Class1] AS [OVO_Class1], [KernAgg_esu_0].[OVO_Class2] AS [OVO_Class2], [KernAgg_esu_0].[OVO_Decision] AS [OVO_Decision], [KernAgg_esu_0].[OVO_Conf] AS [OVO_Conf] 
FROM (SELECT [kernel_cte_CLASS_0_CLASS_1].[KEY] AS [KEY], [kernel_cte_CLASS_0_CLASS_1].[OVO_Class1] AS [OVO_Class1], [kernel_cte_CLASS_0_CLASS_1].[OVO_Class2] AS [OVO_Class2], [kernel_cte_CLASS_0_CLASS_1].[OVO_Decision] AS [OVO_Decision], [kernel_cte_CLASS_0_CLASS_1].[OVO_Conf] AS [OVO_Conf] 
FROM [kernel_cte_CLASS_0_CLASS_1]) AS [KernAgg_esu_0]) AS [KernAgg_B0]

-- Code For temporary table ##TMP_20180602160538_0AX_KernAgg_B1 part 1. Create 


CREATE TABLE ##TMP_20180602160538_0AX_KernAgg_B1 (
	[KEY] BIGINT NULL, 
	[OVO_Class1] VARCHAR(max) COLLATE utf8 NULL, 
	[OVO_Class2] VARCHAR(max) COLLATE utf8 NULL, 
	[OVO_Decision] BIGINT NULL, 
	[OVO_Conf] FLOAT NULL
)



-- Code For temporary table ##TMP_20180602160538_0AX_KernAgg_B1 part 2. Populate

WITH kernel_input AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CAST([ADS_sca_2_OUT].scaler_output_2 AS FLOAT(53)) AS scaler_output_2, CAST([ADS_sca_2_OUT].scaler_output_3 AS FLOAT(53)) AS scaler_output_3, CAST([ADS_sca_2_OUT].scaler_output_4 AS FLOAT(53)) AS scaler_output_4, CAST([ADS_sca_2_OUT].scaler_output_5 AS FLOAT(53)) AS scaler_output_5 
FROM ##TMP_20180602160538_5HM_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[SV_data_CLASS_0_CLASS_2] AS 
(SELECT [Values].sv_idx AS sv_idx, CAST([Values].dual_coeff AS FLOAT(53)) AS dual_coeff, CAST([Values].sv_0 AS FLOAT(53)) AS sv_0, CAST([Values].sv_1 AS FLOAT(53)) AS sv_1, CAST([Values].sv_2 AS FLOAT(53)) AS sv_2, CAST([Values].sv_3 AS FLOAT(53)) AS sv_3 
FROM (SELECT 0 AS sv_idx, 0.09856731334346856 AS dual_coeff, -1.0247398850339788 AS sv_0, 1.062059371773341 AS sv_1, -1.313005826151042 AS sv_2, -0.8601465559727752 AS sv_3 UNION ALL SELECT 1 AS sv_idx, 0.06431142822353304 AS dual_coeff, -0.5410868419500932 AS sv_0, 0.832837924628016 AS sv_1, -1.3714916090530929 AS sv_2, -1.1268586663519302 AS sv_3 UNION ALL SELECT 2 AS sv_idx, 0.23712682109110528 AS dual_coeff, -0.903826624263008 AS sv_0, 0.6036164774826909 AS sv_1, -1.2545200432489911 AS sv_2, -0.9935026111623527 AS sv_3 UNION ALL SELECT 3 AS sv_idx, 0.0 AS dual_coeff, -1.7502194496598062 AS sv_0, -0.3132693110986089 AS sv_1, -1.429977391955144 AS sv_2, -1.3935707767310854 AS sv_3 UNION ALL SELECT 4 AS sv_idx, 0.3383575041974651 AS dual_coeff, -1.7502194496598062 AS sv_0, 0.37439503033736665 AS sv_1, -1.4884631748571948 AS sv_2, -1.3935707767310854 AS sv_3 UNION ALL SELECT 5 AS sv_idx, 0.0 AS dual_coeff, -1.2665664065759217 AS sv_0, -0.08404786395328369 AS sv_1, -1.429977391955144 AS sv_2, -1.2602147215415076 AS sv_3 UNION ALL SELECT 6 AS sv_idx, 1.0 AS dual_coeff, -1.6293061888888354 AS sv_0, -1.6885979939705589 AS sv_1, -1.4884631748571948 AS sv_2, -1.2602147215415076 AS sv_3 UNION ALL SELECT 7 AS sv_idx, 0.9713109752080964 AS dual_coeff, -0.17834705963717942 AS sv_0, 3.1250523960812666 AS sv_1, -1.3714916090530929 AS sv_2, -1.1268586663519302 AS sv_3 UNION ALL SELECT 8 AS sv_idx, 0.22833118195190094 AS dual_coeff, -0.5410868419500932 AS sv_0, 0.832837924628016 AS sv_1, -1.2545200432489911 AS sv_2, -1.3935707767310854 AS sv_3 UNION ALL SELECT 29 AS sv_idx, -0.6587066590182218 AS dual_coeff, 2.4817446773241896 AS sv_0, 1.7497237132093157 AS sv_1, 1.4943117531473993 AS sv_2, 1.0068382166813101 AS sv_3 UNION ALL SELECT 30 AS sv_idx, -0.0 AS dual_coeff, 0.7889590265305909 AS sv_0, -0.08404786395328369 AS sv_1, 0.7924823583227888 AS sv_2, 1.0068382166813101 AS sv_3 UNION ALL SELECT 31 AS sv_idx, -0.0 AS dual_coeff, 0.3053059834467052 AS sv_0, -0.08404786395328369 AS sv_1, 0.6170250096166364 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 32 AS sv_idx, -0.8093816579688009 AS dual_coeff, -1.1456531458049497 AS sv_0, -1.2301550996799087 AS sv_1, 0.38308187800843274 AS sv_2, 0.6067700511125775 AS sv_3 UNION ALL SELECT 33 AS sv_idx, -0.6173705199581953 AS dual_coeff, 2.239918155782247 AS sv_0, -1.0009336525345833 AS sv_1, 1.7867406676576536 AS sv_2, 1.4069063822500425 AS sv_3 UNION ALL SELECT 34 AS sv_idx, -0.0 AS dual_coeff, 0.7889590265305909 AS sv_0, 0.37439503033736665 AS sv_1, 0.7339965754207377 AS sv_2, 1.0068382166813101 AS sv_3 UNION ALL SELECT 35 AS sv_idx, -0.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -0.7717122053892582 AS sv_1, 0.6170250096166364 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 36 AS sv_idx, -0.0 AS dual_coeff, 1.6353518519273904 AS sv_0, 0.37439503033736665 AS sv_1, 1.2603686215391956 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 37 AS sv_idx, -0.0 AS dual_coeff, 0.06347946190476342 AS sv_0, -0.08404786395328369 AS sv_1, 0.7339965754207377 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 38 AS sv_idx, -0.0 AS dual_coeff, 0.1843927226757343 AS sv_0, -0.08404786395328369 AS sv_1, 0.5585392267145852 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 39 AS sv_idx, -0.0 AS dual_coeff, 0.3053059834467052 AS sv_0, -1.0009336525345833 AS sv_1, 1.026425489930992 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 40 AS sv_idx, -0.0 AS dual_coeff, -0.29926032040815137 AS sv_0, -0.542490758243934 AS sv_1, 0.6170250096166364 AS sv_2, 1.0068382166813101 AS sv_3 UNION ALL SELECT 41 AS sv_idx, -0.49123461819798936 AS dual_coeff, 0.42621924421767715 AS sv_0, 0.832837924628016 AS sv_1, 0.9094539241268906 AS sv_2, 1.4069063822500425 AS sv_3 UNION ALL SELECT 42 AS sv_idx, -0.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -0.542490758243934 AS sv_1, 0.7339965754207377 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 43 AS sv_idx, -0.0 AS dual_coeff, 0.7889590265305909 AS sv_0, -0.08404786395328369 AS sv_1, 0.9679397070289413 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 44 AS sv_idx, -0.0 AS dual_coeff, -0.057433798866208544 AS sv_0, -0.7717122053892582 AS sv_1, 0.7339965754207377 AS sv_2, 0.8734821614917325 AS sv_3 UNION ALL SELECT 45 AS sv_idx, -0.0 AS dual_coeff, 1.6353518519273904 AS sv_0, -0.08404786395328369 AS sv_1, 1.1433970557350939 AS sv_2, 0.4734139959230002 AS sv_3 UNION ALL SELECT 46 AS sv_idx, -0.361311768872362 AS dual_coeff, 0.1843927226757343 AS sv_0, -1.917819441115883 AS sv_1, 0.6755107925186871 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 47 AS sv_idx, -0.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -1.2301550996799087 AS sv_1, 0.6755107925186871 AS sv_2, 0.8734821614917325 AS sv_3) AS [Values]), 
[kernel_dp_CLASS_0_CLASS_2] AS 
(SELECT t_1.[KEY] AS [KEY], t_1.dot_product AS dot_product 
FROM (SELECT full_join_data_sv_1.[KEY] AS [KEY], sum(CAST(full_join_data_sv_1.dot_prod1 AS FLOAT(53))) + -0.13424915946945126 AS dot_product 
FROM (SELECT kernel_input.[KEY] AS [KEY], [SV_data_CLASS_0_CLASS_2].dual_coeff * exp(CASE WHEN (CASE WHEN (-100.0 <= -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_0_CLASS_2].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_0_CLASS_2].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_0_CLASS_2].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_0_CLASS_2].sv_3 AS FLOAT(53)), 2))) THEN -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_0_CLASS_2].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_0_CLASS_2].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_0_CLASS_2].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_0_CLASS_2].sv_3 AS FLOAT(53)), 2)) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_0_CLASS_2].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_0_CLASS_2].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_0_CLASS_2].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_0_CLASS_2].sv_3 AS FLOAT(53)), 2))) THEN -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_0_CLASS_2].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_0_CLASS_2].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_0_CLASS_2].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_0_CLASS_2].sv_3 AS FLOAT(53)), 2)) ELSE -100.0 END ELSE 100.0 END) AS dot_prod1 
FROM kernel_input, [SV_data_CLASS_0_CLASS_2]) AS full_join_data_sv_1 GROUP BY full_join_data_sv_1.[KEY]) AS t_1), 
[kernel_cte_CLASS_0_CLASS_2] AS 
(SELECT [kernel_dp_CLASS_0_CLASS_2].[KEY] AS [KEY], 'CLASS_0' AS [OVO_Class1], 'CLASS_2' AS [OVO_Class2], CASE WHEN (-[kernel_dp_CLASS_0_CLASS_2].dot_product >= 0.0) THEN 1 ELSE 0 END AS [OVO_Decision], coalesce(-[kernel_dp_CLASS_0_CLASS_2].dot_product, 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(-((-[kernel_dp_CLASS_0_CLASS_2].dot_product) * -3.5914321441540373 + -0.062386683661467664))) THEN -(-((-[kernel_dp_CLASS_0_CLASS_2].dot_product) * -3.5914321441540373 + -0.062386683661467664)) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(-((-[kernel_dp_CLASS_0_CLASS_2].dot_product) * -3.5914321441540373 + -0.062386683661467664))) THEN -(-((-[kernel_dp_CLASS_0_CLASS_2].dot_product) * -3.5914321441540373 + -0.062386683661467664)) ELSE -100.0 END ELSE 100.0 END))) AS [OVO_Conf] 
FROM [kernel_dp_CLASS_0_CLASS_2])
 INSERT INTO ##TMP_20180602160538_0AX_KernAgg_B1 ([KEY], [OVO_Class1], [OVO_Class2], [OVO_Decision], [OVO_Conf]) SELECT [KernAgg_B1].[KEY], [KernAgg_B1].[OVO_Class1], [KernAgg_B1].[OVO_Class2], [KernAgg_B1].[OVO_Decision], [KernAgg_B1].[OVO_Conf] 
FROM (SELECT [KernAgg_esu_1].[KEY] AS [KEY], [KernAgg_esu_1].[OVO_Class1] AS [OVO_Class1], [KernAgg_esu_1].[OVO_Class2] AS [OVO_Class2], [KernAgg_esu_1].[OVO_Decision] AS [OVO_Decision], [KernAgg_esu_1].[OVO_Conf] AS [OVO_Conf] 
FROM (SELECT [kernel_cte_CLASS_0_CLASS_2].[KEY] AS [KEY], [kernel_cte_CLASS_0_CLASS_2].[OVO_Class1] AS [OVO_Class1], [kernel_cte_CLASS_0_CLASS_2].[OVO_Class2] AS [OVO_Class2], [kernel_cte_CLASS_0_CLASS_2].[OVO_Decision] AS [OVO_Decision], [kernel_cte_CLASS_0_CLASS_2].[OVO_Conf] AS [OVO_Conf] 
FROM [kernel_cte_CLASS_0_CLASS_2]) AS [KernAgg_esu_1]) AS [KernAgg_B1]

-- Code For temporary table ##TMP_20180602160538_E0I_KernAgg_B2 part 1. Create 


CREATE TABLE ##TMP_20180602160538_E0I_KernAgg_B2 (
	[KEY] BIGINT NULL, 
	[OVO_Class1] VARCHAR(max) COLLATE utf8 NULL, 
	[OVO_Class2] VARCHAR(max) COLLATE utf8 NULL, 
	[OVO_Decision] BIGINT NULL, 
	[OVO_Conf] FLOAT NULL
)



-- Code For temporary table ##TMP_20180602160538_E0I_KernAgg_B2 part 2. Populate

WITH kernel_input AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CAST([ADS_sca_2_OUT].scaler_output_2 AS FLOAT(53)) AS scaler_output_2, CAST([ADS_sca_2_OUT].scaler_output_3 AS FLOAT(53)) AS scaler_output_3, CAST([ADS_sca_2_OUT].scaler_output_4 AS FLOAT(53)) AS scaler_output_4, CAST([ADS_sca_2_OUT].scaler_output_5 AS FLOAT(53)) AS scaler_output_5 
FROM ##TMP_20180602160538_5HM_ADS_sca_2_OUT AS [ADS_sca_2_OUT]), 
[SV_data_CLASS_1_CLASS_2] AS 
(SELECT [Values].sv_idx AS sv_idx, CAST([Values].dual_coeff AS FLOAT(53)) AS dual_coeff, CAST([Values].sv_0 AS FLOAT(53)) AS sv_0, CAST([Values].sv_1 AS FLOAT(53)) AS sv_1, CAST([Values].sv_2 AS FLOAT(53)) AS sv_2, CAST([Values].sv_3 AS FLOAT(53)) AS sv_3 
FROM (SELECT 9 AS sv_idx, 1.0 AS dual_coeff, 0.1843927226757343 AS sv_0, -0.3132693110986089 AS sv_1, 0.38308187800843274 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 10 AS sv_idx, 1.0 AS dual_coeff, 1.1516988088435047 AS sv_0, -0.542490758243934 AS sv_1, 0.5585392267145852 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 11 AS sv_idx, 1.0 AS dual_coeff, -0.29926032040815137 AS sv_0, -0.08404786395328369 AS sv_1, 0.38308187800843274 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 12 AS sv_idx, 1.0 AS dual_coeff, 0.5471325049886481 AS sv_0, 0.6036164774826909 AS sv_1, 0.5000534438125346 AS sv_2, 0.4734139959230002 AS sv_3 UNION ALL SELECT 13 AS sv_idx, 0.0 AS dual_coeff, -0.903826624263008 AS sv_0, -1.2301550996799087 AS sv_1, -0.4942048655223301 AS sv_2, -0.19336628002488743 AS sv_3 UNION ALL SELECT 14 AS sv_idx, 1.0 AS dual_coeff, 1.3935253303854476 AS sv_0, 0.37439503033736665 AS sv_1, 0.5000534438125346 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 15 AS sv_idx, 0.6165353006614909 AS dual_coeff, -0.4201735811791223 AS sv_0, -1.6885979939705589 AS sv_1, 0.09065296349817846 AS sv_2, 0.07334583035426756 AS sv_3 UNION ALL SELECT 16 AS sv_idx, 0.6419771343772344 AS dual_coeff, -0.782913363492036 AS sv_0, -0.7717122053892582 AS sv_1, 0.03216718059612755 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 17 AS sv_idx, 1.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -1.6885979939705589 AS sv_1, 0.3245960951063821 AS sv_2, 0.07334583035426756 AS sv_3 UNION ALL SELECT 18 AS sv_idx, 1.0 AS dual_coeff, 0.42621924421767715 AS sv_0, -1.917819441115883 AS sv_1, 0.38308187800843274 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 19 AS sv_idx, 0.0 AS dual_coeff, -1.1456531458049497 AS sv_0, -1.4593765468252338 AS sv_1, -0.31874751681617763 AS sv_2, -0.3267223352144651 AS sv_3 UNION ALL SELECT 20 AS sv_idx, 1.0 AS dual_coeff, 0.06347946190476342 AS sv_0, 0.37439503033736665 AS sv_1, 0.5585392267145852 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 21 AS sv_idx, 0.0 AS dual_coeff, 0.1843927226757343 AS sv_0, 0.832837924628016 AS sv_1, 0.38308187800843274 AS sv_2, 0.4734139959230002 AS sv_3 UNION ALL SELECT 22 AS sv_idx, 1.0 AS dual_coeff, 1.0307855480725336 AS sv_0, 0.1451735831920415 AS sv_1, 0.5000534438125346 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 23 AS sv_idx, 1.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -1.2301550996799087 AS sv_1, 0.6170250096166364 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 24 AS sv_idx, 0.4356605256637649 AS dual_coeff, -1.0247398850339788 AS sv_0, -2.3762623354065333 AS sv_1, -0.20177595101207582 AS sv_2, -0.3267223352144651 AS sv_3 UNION ALL SELECT 25 AS sv_idx, 1.0 AS dual_coeff, 0.3053059834467052 AS sv_0, -0.3132693110986089 AS sv_1, 0.5000534438125346 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 26 AS sv_idx, 1.0 AS dual_coeff, -0.5410868419500932 AS sv_0, -0.08404786395328369 AS sv_1, 0.38308187800843274 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 27 AS sv_idx, 1.0 AS dual_coeff, 1.0307855480725336 AS sv_0, -0.08404786395328369 AS sv_1, 0.6755107925186871 AS sv_2, 0.6067700511125775 AS sv_3 UNION ALL SELECT 28 AS sv_idx, 1.0 AS dual_coeff, 1.2726120696144765 AS sv_0, 0.1451735831920415 AS sv_1, 0.6170250096166364 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 29 AS sv_idx, -0.7888815619087415 AS dual_coeff, 2.4817446773241896 AS sv_0, 1.7497237132093157 AS sv_1, 1.4943117531473993 AS sv_2, 1.0068382166813101 AS sv_3 UNION ALL SELECT 30 AS sv_idx, -0.22807123043224906 AS dual_coeff, 0.7889590265305909 AS sv_0, -0.08404786395328369 AS sv_1, 0.7924823583227888 AS sv_2, 1.0068382166813101 AS sv_3 UNION ALL SELECT 31 AS sv_idx, -1.0 AS dual_coeff, 0.3053059834467052 AS sv_0, -0.08404786395328369 AS sv_1, 0.6170250096166364 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 32 AS sv_idx, -1.0 AS dual_coeff, -1.1456531458049497 AS sv_0, -1.2301550996799087 AS sv_1, 0.38308187800843274 AS sv_2, 0.6067700511125775 AS sv_3 UNION ALL SELECT 33 AS sv_idx, -0.0 AS dual_coeff, 2.239918155782247 AS sv_0, -1.0009336525345833 AS sv_1, 1.7867406676576536 AS sv_2, 1.4069063822500425 AS sv_3 UNION ALL SELECT 34 AS sv_idx, -1.0 AS dual_coeff, 0.7889590265305909 AS sv_0, 0.37439503033736665 AS sv_1, 0.7339965754207377 AS sv_2, 1.0068382166813101 AS sv_3 UNION ALL SELECT 35 AS sv_idx, -1.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -0.7717122053892582 AS sv_1, 0.6170250096166364 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 36 AS sv_idx, -1.0 AS dual_coeff, 1.6353518519273904 AS sv_0, 0.37439503033736665 AS sv_1, 1.2603686215391956 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 37 AS sv_idx, -1.0 AS dual_coeff, 0.06347946190476342 AS sv_0, -0.08404786395328369 AS sv_1, 0.7339965754207377 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 38 AS sv_idx, -1.0 AS dual_coeff, 0.1843927226757343 AS sv_0, -0.08404786395328369 AS sv_1, 0.5585392267145852 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 39 AS sv_idx, -1.0 AS dual_coeff, 0.3053059834467052 AS sv_0, -1.0009336525345833 AS sv_1, 1.026425489930992 AS sv_2, 0.2067018855438449 AS sv_3 UNION ALL SELECT 40 AS sv_idx, -1.0 AS dual_coeff, -0.29926032040815137 AS sv_0, -0.542490758243934 AS sv_1, 0.6170250096166364 AS sv_2, 1.0068382166813101 AS sv_3 UNION ALL SELECT 41 AS sv_idx, -0.29623931497308365 AS dual_coeff, 0.42621924421767715 AS sv_0, 0.832837924628016 AS sv_1, 0.9094539241268906 AS sv_2, 1.4069063822500425 AS sv_3 UNION ALL SELECT 42 AS sv_idx, -1.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -0.542490758243934 AS sv_1, 0.7339965754207377 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 43 AS sv_idx, -1.0 AS dual_coeff, 0.7889590265305909 AS sv_0, -0.08404786395328369 AS sv_1, 0.9679397070289413 AS sv_2, 0.7401261063021551 AS sv_3 UNION ALL SELECT 44 AS sv_idx, -0.380980853388416 AS dual_coeff, -0.057433798866208544 AS sv_0, -0.7717122053892582 AS sv_1, 0.7339965754207377 AS sv_2, 0.8734821614917325 AS sv_3 UNION ALL SELECT 45 AS sv_idx, -1.0 AS dual_coeff, 1.6353518519273904 AS sv_0, -0.08404786395328369 AS sv_1, 1.1433970557350939 AS sv_2, 0.4734139959230002 AS sv_3 UNION ALL SELECT 46 AS sv_idx, -1.0 AS dual_coeff, 0.1843927226757343 AS sv_0, -1.917819441115883 AS sv_1, 0.6755107925186871 AS sv_2, 0.34005794073342255 AS sv_3 UNION ALL SELECT 47 AS sv_idx, -1.0 AS dual_coeff, 0.5471325049886481 AS sv_0, -1.2301550996799087 AS sv_1, 0.6755107925186871 AS sv_2, 0.8734821614917325 AS sv_3) AS [Values]), 
[kernel_dp_CLASS_1_CLASS_2] AS 
(SELECT t_2.[KEY] AS [KEY], t_2.dot_product AS dot_product 
FROM (SELECT full_join_data_sv_2.[KEY] AS [KEY], sum(CAST(full_join_data_sv_2.dot_prod1 AS FLOAT(53))) + 0.05246188734842457 AS dot_product 
FROM (SELECT kernel_input.[KEY] AS [KEY], [SV_data_CLASS_1_CLASS_2].dual_coeff * exp(CASE WHEN (CASE WHEN (-100.0 <= -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_1_CLASS_2].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_1_CLASS_2].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_1_CLASS_2].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_1_CLASS_2].sv_3 AS FLOAT(53)), 2))) THEN -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_1_CLASS_2].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_1_CLASS_2].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_1_CLASS_2].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_1_CLASS_2].sv_3 AS FLOAT(53)), 2)) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_1_CLASS_2].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_1_CLASS_2].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_1_CLASS_2].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_1_CLASS_2].sv_3 AS FLOAT(53)), 2))) THEN -0.25 * (power(CAST(kernel_input.scaler_output_2 - [SV_data_CLASS_1_CLASS_2].sv_0 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_3 - [SV_data_CLASS_1_CLASS_2].sv_1 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_4 - [SV_data_CLASS_1_CLASS_2].sv_2 AS FLOAT(53)), 2) + power(CAST(kernel_input.scaler_output_5 - [SV_data_CLASS_1_CLASS_2].sv_3 AS FLOAT(53)), 2)) ELSE -100.0 END ELSE 100.0 END) AS dot_prod1 
FROM kernel_input, [SV_data_CLASS_1_CLASS_2]) AS full_join_data_sv_2 GROUP BY full_join_data_sv_2.[KEY]) AS t_2), 
[kernel_cte_CLASS_1_CLASS_2] AS 
(SELECT [kernel_dp_CLASS_1_CLASS_2].[KEY] AS [KEY], 'CLASS_1' AS [OVO_Class1], 'CLASS_2' AS [OVO_Class2], CASE WHEN (-[kernel_dp_CLASS_1_CLASS_2].dot_product >= 0.0) THEN 1 ELSE 0 END AS [OVO_Decision], coalesce(-[kernel_dp_CLASS_1_CLASS_2].dot_product, 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-100.0 <= -(-((-[kernel_dp_CLASS_1_CLASS_2].dot_product) * -3.6359278162023667 + 0.31773826068727395))) THEN -(-((-[kernel_dp_CLASS_1_CLASS_2].dot_product) * -3.6359278162023667 + 0.31773826068727395)) ELSE -100.0 END <= 100.0) THEN CASE WHEN (-100.0 <= -(-((-[kernel_dp_CLASS_1_CLASS_2].dot_product) * -3.6359278162023667 + 0.31773826068727395))) THEN -(-((-[kernel_dp_CLASS_1_CLASS_2].dot_product) * -3.6359278162023667 + 0.31773826068727395)) ELSE -100.0 END ELSE 100.0 END))) AS [OVO_Conf] 
FROM [kernel_dp_CLASS_1_CLASS_2])
 INSERT INTO ##TMP_20180602160538_E0I_KernAgg_B2 ([KEY], [OVO_Class1], [OVO_Class2], [OVO_Decision], [OVO_Conf]) SELECT [KernAgg_B2].[KEY], [KernAgg_B2].[OVO_Class1], [KernAgg_B2].[OVO_Class2], [KernAgg_B2].[OVO_Decision], [KernAgg_B2].[OVO_Conf] 
FROM (SELECT [KernAgg_esu_2].[KEY] AS [KEY], [KernAgg_esu_2].[OVO_Class1] AS [OVO_Class1], [KernAgg_esu_2].[OVO_Class2] AS [OVO_Class2], [KernAgg_esu_2].[OVO_Decision] AS [OVO_Decision], [KernAgg_esu_2].[OVO_Conf] AS [OVO_Conf] 
FROM (SELECT [kernel_cte_CLASS_1_CLASS_2].[KEY] AS [KEY], [kernel_cte_CLASS_1_CLASS_2].[OVO_Class1] AS [OVO_Class1], [kernel_cte_CLASS_1_CLASS_2].[OVO_Class2] AS [OVO_Class2], [kernel_cte_CLASS_1_CLASS_2].[OVO_Decision] AS [OVO_Decision], [kernel_cte_CLASS_1_CLASS_2].[OVO_Conf] AS [OVO_Conf] 
FROM [kernel_cte_CLASS_1_CLASS_2]) AS [KernAgg_esu_2]) AS [KernAgg_B2]

-- Code For temporary table ##TMP_20180602160538_B4W_KernAgg_agg part 1. Create 


CREATE TABLE ##TMP_20180602160538_B4W_KernAgg_agg (
	[KEY] BIGINT NULL, 
	[OVO_Vote_CLASS_0] BIGINT NULL, 
	[OVO_SumConfidence_CLASS_0] FLOAT NULL, 
	[OVO_Vote_CLASS_1] BIGINT NULL, 
	[OVO_SumConfidence_CLASS_1] FLOAT NULL, 
	[OVO_Vote_CLASS_2] BIGINT NULL, 
	[OVO_SumConfidence_CLASS_2] FLOAT NULL, 
	max_abs_confidence FLOAT(53) NULL, 
	[OVO_Scale] FLOAT(53) NULL, 
	[Score_CLASS_0] FLOAT NULL, 
	[Score_CLASS_1] FLOAT NULL, 
	[Score_CLASS_2] FLOAT NULL
)



-- Code For temporary table ##TMP_20180602160538_B4W_KernAgg_agg part 2. Populate

WITH [KernAgg_Union] AS 
(SELECT [KernAgg_EnsembleUnion].[KEY] AS [KEY], [KernAgg_EnsembleUnion].[OVO_Class1] AS [OVO_Class1], [KernAgg_EnsembleUnion].[OVO_Class2] AS [OVO_Class2], [KernAgg_EnsembleUnion].[OVO_Decision] AS [OVO_Decision], [KernAgg_EnsembleUnion].[OVO_Conf] AS [OVO_Conf] 
FROM (SELECT [KernAgg_B0].[KEY] AS [KEY], [KernAgg_B0].[OVO_Class1] AS [OVO_Class1], [KernAgg_B0].[OVO_Class2] AS [OVO_Class2], [KernAgg_B0].[OVO_Decision] AS [OVO_Decision], [KernAgg_B0].[OVO_Conf] AS [OVO_Conf] 
FROM ##TMP_20180602160538_FRM_KernAgg_B0 AS [KernAgg_B0] UNION ALL SELECT [KernAgg_B1].[KEY] AS [KEY], [KernAgg_B1].[OVO_Class1] AS [OVO_Class1], [KernAgg_B1].[OVO_Class2] AS [OVO_Class2], [KernAgg_B1].[OVO_Decision] AS [OVO_Decision], [KernAgg_B1].[OVO_Conf] AS [OVO_Conf] 
FROM ##TMP_20180602160538_0AX_KernAgg_B1 AS [KernAgg_B1] UNION ALL SELECT [KernAgg_B2].[KEY] AS [KEY], [KernAgg_B2].[OVO_Class1] AS [OVO_Class1], [KernAgg_B2].[OVO_Class2] AS [OVO_Class2], [KernAgg_B2].[OVO_Decision] AS [OVO_Decision], [KernAgg_B2].[OVO_Conf] AS [OVO_Conf] 
FROM ##TMP_20180602160538_E0I_KernAgg_B2 AS [KernAgg_B2]) AS [KernAgg_EnsembleUnion]), 
[OVO_Votes] AS 
(SELECT [Votes_Sel].[KEY] AS [KEY], [Votes_Sel].[OVO_Vote_CLASS_0] AS [OVO_Vote_CLASS_0], [Votes_Sel].[OVO_SumConfidence_CLASS_0] AS [OVO_SumConfidence_CLASS_0], [Votes_Sel].[OVO_Vote_CLASS_1] AS [OVO_Vote_CLASS_1], [Votes_Sel].[OVO_SumConfidence_CLASS_1] AS [OVO_SumConfidence_CLASS_1], [Votes_Sel].[OVO_Vote_CLASS_2] AS [OVO_Vote_CLASS_2], [Votes_Sel].[OVO_SumConfidence_CLASS_2] AS [OVO_SumConfidence_CLASS_2] 
FROM (SELECT [KernAgg_Union].[KEY] AS [KEY], sum(CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_0' OR [KernAgg_Union].[OVO_Class2] = 'CLASS_0') THEN 1 ELSE 0 END * (CASE WHEN ([KernAgg_Union].[OVO_Decision] = 0 AND [KernAgg_Union].[OVO_Class1] = 'CLASS_0') THEN 1 ELSE 0 END + CASE WHEN ([KernAgg_Union].[OVO_Decision] = 1 AND [KernAgg_Union].[OVO_Class2] = 'CLASS_0') THEN 1 ELSE 0 END)) AS [OVO_Vote_CLASS_0], sum(CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_0' OR [KernAgg_Union].[OVO_Class2] = 'CLASS_0') THEN 1 ELSE 0 END * [KernAgg_Union].[OVO_Conf] * (-CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_0') THEN 1 ELSE 0 END + CASE WHEN ([KernAgg_Union].[OVO_Class2] = 'CLASS_0') THEN 1 ELSE 0 END)) AS [OVO_SumConfidence_CLASS_0], sum(CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_1' OR [KernAgg_Union].[OVO_Class2] = 'CLASS_1') THEN 1 ELSE 0 END * (CASE WHEN ([KernAgg_Union].[OVO_Decision] = 0 AND [KernAgg_Union].[OVO_Class1] = 'CLASS_1') THEN 1 ELSE 0 END + CASE WHEN ([KernAgg_Union].[OVO_Decision] = 1 AND [KernAgg_Union].[OVO_Class2] = 'CLASS_1') THEN 1 ELSE 0 END)) AS [OVO_Vote_CLASS_1], sum(CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_1' OR [KernAgg_Union].[OVO_Class2] = 'CLASS_1') THEN 1 ELSE 0 END * [KernAgg_Union].[OVO_Conf] * (-CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_1') THEN 1 ELSE 0 END + CASE WHEN ([KernAgg_Union].[OVO_Class2] = 'CLASS_1') THEN 1 ELSE 0 END)) AS [OVO_SumConfidence_CLASS_1], sum(CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_2' OR [KernAgg_Union].[OVO_Class2] = 'CLASS_2') THEN 1 ELSE 0 END * (CASE WHEN ([KernAgg_Union].[OVO_Decision] = 0 AND [KernAgg_Union].[OVO_Class1] = 'CLASS_2') THEN 1 ELSE 0 END + CASE WHEN ([KernAgg_Union].[OVO_Decision] = 1 AND [KernAgg_Union].[OVO_Class2] = 'CLASS_2') THEN 1 ELSE 0 END)) AS [OVO_Vote_CLASS_2], sum(CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_2' OR [KernAgg_Union].[OVO_Class2] = 'CLASS_2') THEN 1 ELSE 0 END * [KernAgg_Union].[OVO_Conf] * (-CASE WHEN ([KernAgg_Union].[OVO_Class1] = 'CLASS_2') THEN 1 ELSE 0 END + CASE WHEN ([KernAgg_Union].[OVO_Class2] = 'CLASS_2') THEN 1 ELSE 0 END)) AS [OVO_SumConfidence_CLASS_2] 
FROM [KernAgg_Union] GROUP BY [KernAgg_Union].[KEY]) AS [Votes_Sel]), 
[OVO_SumConf_CTE] AS 
(SELECT [Values].[KEY] AS [KEY], CAST([Values].[OVO_SumConfidence] AS FLOAT(53)) AS [OVO_SumConfidence] 
FROM (SELECT [OVO_Votes].[KEY] AS [KEY], [OVO_Votes].[OVO_SumConfidence_CLASS_0] AS [OVO_SumConfidence] 
FROM [OVO_Votes] UNION ALL SELECT [OVO_Votes].[KEY] AS [KEY], [OVO_Votes].[OVO_SumConfidence_CLASS_1] AS [OVO_SumConfidence] 
FROM [OVO_Votes] UNION ALL SELECT [OVO_Votes].[KEY] AS [KEY], [OVO_Votes].[OVO_SumConfidence_CLASS_2] AS [OVO_SumConfidence] 
FROM [OVO_Votes]) AS [Values]), 
[MinMaxConf] AS 
(SELECT min([OVO_SumConf_CTE].[OVO_SumConfidence]) AS [OVO_min_conf], max([OVO_SumConf_CTE].[OVO_SumConfidence]) AS [OVO_max_conf] 
FROM [OVO_SumConf_CTE]), 
[OVO_Votes_WithScale] AS 
(SELECT [OVO_Votes].[KEY] AS [KEY], [OVO_Votes].[OVO_Vote_CLASS_0] AS [OVO_Vote_CLASS_0], [OVO_Votes].[OVO_SumConfidence_CLASS_0] AS [OVO_SumConfidence_CLASS_0], [OVO_Votes].[OVO_Vote_CLASS_1] AS [OVO_Vote_CLASS_1], [OVO_Votes].[OVO_SumConfidence_CLASS_1] AS [OVO_SumConfidence_CLASS_1], [OVO_Votes].[OVO_Vote_CLASS_2] AS [OVO_Vote_CLASS_2], [OVO_Votes].[OVO_SumConfidence_CLASS_2] AS [OVO_SumConfidence_CLASS_2], CAST(CASE WHEN (abs([MinMaxConf].[OVO_min_conf]) >= abs([MinMaxConf].[OVO_max_conf])) THEN abs([MinMaxConf].[OVO_min_conf]) ELSE abs([MinMaxConf].[OVO_max_conf]) END AS FLOAT(53)) AS max_abs_confidence, CASE WHEN ([MinMaxConf].[OVO_max_conf] - [MinMaxConf].[OVO_min_conf] <= 0.0) THEN 0.0 ELSE 0.4999999999999998 / CAST(CASE WHEN (abs([MinMaxConf].[OVO_min_conf]) >= abs([MinMaxConf].[OVO_max_conf])) THEN abs([MinMaxConf].[OVO_min_conf]) ELSE abs([MinMaxConf].[OVO_max_conf]) END AS FLOAT(53)) END AS [OVO_Scale] 
FROM [OVO_Votes], [MinMaxConf])
 INSERT INTO ##TMP_20180602160538_B4W_KernAgg_agg ([KEY], [OVO_Vote_CLASS_0], [OVO_SumConfidence_CLASS_0], [OVO_Vote_CLASS_1], [OVO_SumConfidence_CLASS_1], [OVO_Vote_CLASS_2], [OVO_SumConfidence_CLASS_2], max_abs_confidence, [OVO_Scale], [Score_CLASS_0], [Score_CLASS_1], [Score_CLASS_2]) SELECT [KernAgg_agg].[KEY], [KernAgg_agg].[OVO_Vote_CLASS_0], [KernAgg_agg].[OVO_SumConfidence_CLASS_0], [KernAgg_agg].[OVO_Vote_CLASS_1], [KernAgg_agg].[OVO_SumConfidence_CLASS_1], [KernAgg_agg].[OVO_Vote_CLASS_2], [KernAgg_agg].[OVO_SumConfidence_CLASS_2], [KernAgg_agg].max_abs_confidence, [KernAgg_agg].[OVO_Scale], [KernAgg_agg].[Score_CLASS_0], [KernAgg_agg].[Score_CLASS_1], [KernAgg_agg].[Score_CLASS_2] 
FROM (SELECT [OVO_Votes_WithScale].[KEY] AS [KEY], [OVO_Votes_WithScale].[OVO_Vote_CLASS_0] AS [OVO_Vote_CLASS_0], [OVO_Votes_WithScale].[OVO_SumConfidence_CLASS_0] AS [OVO_SumConfidence_CLASS_0], [OVO_Votes_WithScale].[OVO_Vote_CLASS_1] AS [OVO_Vote_CLASS_1], [OVO_Votes_WithScale].[OVO_SumConfidence_CLASS_1] AS [OVO_SumConfidence_CLASS_1], [OVO_Votes_WithScale].[OVO_Vote_CLASS_2] AS [OVO_Vote_CLASS_2], [OVO_Votes_WithScale].[OVO_SumConfidence_CLASS_2] AS [OVO_SumConfidence_CLASS_2], [OVO_Votes_WithScale].max_abs_confidence AS max_abs_confidence, [OVO_Votes_WithScale].[OVO_Scale] AS [OVO_Scale], [OVO_Votes_WithScale].[OVO_Vote_CLASS_0] + [OVO_Votes_WithScale].[OVO_Scale] * [OVO_Votes_WithScale].[OVO_SumConfidence_CLASS_0] AS [Score_CLASS_0], [OVO_Votes_WithScale].[OVO_Vote_CLASS_1] + [OVO_Votes_WithScale].[OVO_Scale] * [OVO_Votes_WithScale].[OVO_SumConfidence_CLASS_1] AS [Score_CLASS_1], [OVO_Votes_WithScale].[OVO_Vote_CLASS_2] + [OVO_Votes_WithScale].[OVO_Scale] * [OVO_Votes_WithScale].[OVO_SumConfidence_CLASS_2] AS [Score_CLASS_2] 
FROM [OVO_Votes_WithScale]) AS [KernAgg_agg]

-- Model deployment code

WITH orig_cte AS 
(SELECT [KernAgg_agg].[KEY] AS [KEY], [KernAgg_agg].[Score_CLASS_0] AS [Score_CLASS_0], [KernAgg_agg].[Score_CLASS_1] AS [Score_CLASS_1], [KernAgg_agg].[Score_CLASS_2] AS [Score_CLASS_2], CAST(NULL AS FLOAT(53)) AS [Proba_CLASS_0], CAST(NULL AS FLOAT(53)) AS [Proba_CLASS_1], CAST(NULL AS FLOAT(53)) AS [Proba_CLASS_2], CAST(NULL AS FLOAT(53)) AS [LogProba_CLASS_0], CAST(NULL AS FLOAT(53)) AS [LogProba_CLASS_1], CAST(NULL AS FLOAT(53)) AS [LogProba_CLASS_2], CAST(NULL AS BIGINT) AS [Decision], CAST(NULL AS FLOAT(53)) AS [DecisionProba] 
FROM ##TMP_20180602160538_B4W_KernAgg_agg AS [KernAgg_agg]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 'CLASS_0' AS class, orig_cte.[LogProba_CLASS_0] AS [LogProba], orig_cte.[Proba_CLASS_0] AS [Proba], orig_cte.[Score_CLASS_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 'CLASS_1' AS class, orig_cte.[LogProba_CLASS_1] AS [LogProba], orig_cte.[Proba_CLASS_1] AS [Proba], orig_cte.[Score_CLASS_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 'CLASS_2' AS class, orig_cte.[LogProba_CLASS_2] AS [LogProba], orig_cte.[Proba_CLASS_2] AS [Proba], orig_cte.[Score_CLASS_2] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_CLASS_0] AS [Score_CLASS_0], orig_cte.[Score_CLASS_1] AS [Score_CLASS_1], orig_cte.[Score_CLASS_2] AS [Score_CLASS_2], orig_cte.[Proba_CLASS_0] AS [Proba_CLASS_0], orig_cte.[Proba_CLASS_1] AS [Proba_CLASS_1], orig_cte.[Proba_CLASS_2] AS [Proba_CLASS_2], orig_cte.[LogProba_CLASS_0] AS [LogProba_CLASS_0], orig_cte.[LogProba_CLASS_1] AS [LogProba_CLASS_1], orig_cte.[LogProba_CLASS_2] AS [LogProba_CLASS_2], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_CLASS_0] AS [Score_CLASS_0], score_max.[Score_CLASS_1] AS [Score_CLASS_1], score_max.[Score_CLASS_2] AS [Score_CLASS_2], score_max.[Proba_CLASS_0] AS [Proba_CLASS_0], score_max.[Proba_CLASS_1] AS [Proba_CLASS_1], score_max.[Proba_CLASS_2] AS [Proba_CLASS_2], score_max.[LogProba_CLASS_0] AS [LogProba_CLASS_0], score_max.[LogProba_CLASS_1] AS [LogProba_CLASS_1], score_max.[LogProba_CLASS_2] AS [LogProba_CLASS_2], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_CLASS_0] AS [Score_CLASS_0], score_max.[Score_CLASS_1] AS [Score_CLASS_1], score_max.[Score_CLASS_2] AS [Score_CLASS_2], score_max.[Proba_CLASS_0] AS [Proba_CLASS_0], score_max.[Proba_CLASS_1] AS [Proba_CLASS_1], score_max.[Proba_CLASS_2] AS [Proba_CLASS_2], score_max.[LogProba_CLASS_0] AS [LogProba_CLASS_0], score_max.[LogProba_CLASS_1] AS [LogProba_CLASS_1], score_max.[LogProba_CLASS_2] AS [LogProba_CLASS_2], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[Score] >= union_with_max.[max_Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_max.[KEY] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_CLASS_0] AS [Score_CLASS_0], arg_max_cte.[Score_CLASS_1] AS [Score_CLASS_1], arg_max_cte.[Score_CLASS_2] AS [Score_CLASS_2], arg_max_cte.[Proba_CLASS_0] AS [Proba_CLASS_0], arg_max_cte.[Proba_CLASS_1] AS [Proba_CLASS_1], arg_max_cte.[Proba_CLASS_2] AS [Proba_CLASS_2], CASE WHEN (arg_max_cte.[Proba_CLASS_0] IS NULL OR arg_max_cte.[Proba_CLASS_0] > 0.0) THEN log(arg_max_cte.[Proba_CLASS_0]) ELSE -1.79769313486231e+308 END AS [LogProba_CLASS_0], CASE WHEN (arg_max_cte.[Proba_CLASS_1] IS NULL OR arg_max_cte.[Proba_CLASS_1] > 0.0) THEN log(arg_max_cte.[Proba_CLASS_1]) ELSE -1.79769313486231e+308 END AS [LogProba_CLASS_1], CASE WHEN (arg_max_cte.[Proba_CLASS_2] IS NULL OR arg_max_cte.[Proba_CLASS_2] > 0.0) THEN log(arg_max_cte.[Proba_CLASS_2]) ELSE -1.79769313486231e+308 END AS [LogProba_CLASS_2], arg_max_cte.[arg_max_Score] AS [Decision], CASE WHEN (arg_max_cte.[arg_max_Score] = 'CLASS_0') THEN arg_max_cte.[Proba_CLASS_0] WHEN (arg_max_cte.[arg_max_Score] = 'CLASS_1') THEN arg_max_cte.[Proba_CLASS_1] WHEN (arg_max_cte.[arg_max_Score] = 'CLASS_2') THEN arg_max_cte.[Proba_CLASS_2] END AS [DecisionProba] 
FROM arg_max_cte