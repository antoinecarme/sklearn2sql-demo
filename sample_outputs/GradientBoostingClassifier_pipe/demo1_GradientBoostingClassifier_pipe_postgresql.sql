-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_3' AS feature, 1.0217169523239136 AS threshold, 100 AS count, 0 AS depth, 1.0436096431476471e-16 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_2' AS feature, -0.13248534500598907 AS threshold, 82 AS count, 1 AS depth, 0.08414634146341476 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -1.7915594577789307 AS threshold, 32 AS count, 2 AS depth, 0.26249999999999996 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, -1.2121212121212124 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, 1.3852813852813852 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_5' AS feature, 0.6538017988204956 AS threshold, 50 AS count, 2 AS depth, -0.029999999999999902 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, -0.5209994683678894 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, 1.144781144781145 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, -0.45813581347465515 AS threshold, 18 AS count, 1 AS depth, -0.3833333333333332 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_4' AS feature, -1.5780284404754639 AS threshold, 6 AS count, 2 AS depth, -0.050000000000000044 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, -2.2222222222222223 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.808080808080808 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 2 AS depth, -2.222222222222222 AS "Estimator") AS "Values"), 
"ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.0694906390703 ELSE "ADS"."Feature_0" END AS impute_output_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.119163503916 ELSE "ADS"."Feature_1" END AS impute_output_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.127896899745 ELSE "ADS"."Feature_2" END AS impute_output_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.114287346209 ELSE "ADS"."Feature_3" END AS impute_output_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0413271968547 ELSE "ADS"."Feature_4" END AS impute_output_6 
FROM "INPUT_DATA" AS "ADS"), 
"ADS_ano_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", ("ADS_imp_1_OUT".impute_output_2 - -0.0694906390703) * -0.053647534364 + ("ADS_imp_1_OUT".impute_output_3 - -0.119163503916) * -0.452838029092 + ("ADS_imp_1_OUT".impute_output_4 - -0.127896899745) * 0.689918784888 + ("ADS_imp_1_OUT".impute_output_5 - -0.114287346209) * -0.33402126184 + ("ADS_imp_1_OUT".impute_output_6 - 0.0413271968547) * -0.452218452037 AS anova_output_2, ("ADS_imp_1_OUT".impute_output_2 - -0.0694906390703) * -0.620732053756 + ("ADS_imp_1_OUT".impute_output_3 - -0.119163503916) * 0.179006433042 + ("ADS_imp_1_OUT".impute_output_4 - -0.127896899745) * 0.520498333383 + ("ADS_imp_1_OUT".impute_output_5 - -0.114287346209) * 0.386172344142 + ("ADS_imp_1_OUT".impute_output_6 - 0.0413271968547) * 0.403237919763 AS anova_output_3, ("ADS_imp_1_OUT".impute_output_2 - -0.0694906390703) * 0.534948377585 + ("ADS_imp_1_OUT".impute_output_3 - -0.119163503916) * -0.502789475991 + ("ADS_imp_1_OUT".impute_output_4 - -0.127896899745) * 0.167923582168 + ("ADS_imp_1_OUT".impute_output_5 - -0.114287346209) * 0.610459612885 + ("ADS_imp_1_OUT".impute_output_6 - 0.0413271968547) * 0.245303297449 AS anova_output_4, ("ADS_imp_1_OUT".impute_output_2 - -0.0694906390703) * 0.119525555247 + ("ADS_imp_1_OUT".impute_output_3 - -0.119163503916) * -0.210071806412 + ("ADS_imp_1_OUT".impute_output_4 - -0.127896899745) * 0.0756568397014 + ("ADS_imp_1_OUT".impute_output_5 - -0.114287346209) * -0.602658142322 + ("ADS_imp_1_OUT".impute_output_6 - 0.0413271968547) * 0.756744794427 AS anova_output_5, ("ADS_imp_1_OUT".impute_output_2 - -0.0694906390703) * -0.557994206474 + ("ADS_imp_1_OUT".impute_output_3 - -0.119163503916) * -0.682617751982 + ("ADS_imp_1_OUT".impute_output_4 - -0.127896899745) * -0.468157311555 + ("ADS_imp_1_OUT".impute_output_5 - -0.114287346209) * 0.0586765863683 + ("ADS_imp_1_OUT".impute_output_6 - 0.0413271968547) * -0.0078268813005 AS anova_output_6 
FROM "ADS_imp_1_OUT"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 1.0217169523239136) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.13248534500598907) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.7915594577789307) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= 0.6538017988204956) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.45813581347465515) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -1.5780284404754639) THEN 10 ELSE 11 END ELSE 12 END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", (SELECT "DT_node_data".node_id 
FROM "DT_node_data" 
WHERE "DT_node_data".node_id = "DT_node_lookup".node_id) AS node_id, (SELECT "DT_node_data".feature 
FROM "DT_node_data" 
WHERE "DT_node_data".node_id = "DT_node_lookup".node_id) AS feature, (SELECT "DT_node_data".threshold 
FROM "DT_node_data" 
WHERE "DT_node_data".node_id = "DT_node_lookup".node_id) AS threshold, (SELECT "DT_node_data".count 
FROM "DT_node_data" 
WHERE "DT_node_data".node_id = "DT_node_lookup".node_id) AS count, (SELECT "DT_node_data".depth 
FROM "DT_node_data" 
WHERE "DT_node_data".node_id = "DT_node_lookup".node_id) AS depth, (SELECT "DT_node_data"."Estimator" 
FROM "DT_node_data" 
WHERE "DT_node_data".node_id = "DT_node_lookup".node_id) AS "Estimator" 
FROM "DT_node_lookup"), 
"RF_Tree_0_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0_0, "DT_Output"."Estimator" AS "Estimator_0_0" 
FROM "DT_Output"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_3' AS feature, 1.0217169523239136 AS threshold, 100 AS count, 0 AS depth, 0.00017960669389208484 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_2' AS feature, -0.13248534500598907 AS threshold, 82 AS count, 1 AS depth, 0.07588009949220828 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -1.7915594577789307 AS threshold, 32 AS count, 2 AS depth, 0.2365218152863818 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, -1.0811214600154253 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, 1.2713233071731442 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_5' AS feature, 0.6538017988204956 AS threshold, 50 AS count, 2 AS depth, -0.026930598616062732 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, -0.4666532336861477 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, 1.0463230297025732 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, -0.45813581347465515 AS threshold, 18 AS count, 1 AS depth, -0.3446781938317708 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_2' AS feature, -0.6006710529327393 AS threshold, 6 AS count, 2 AS depth, -0.04480992781133947 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, -2.1501838241802482 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.8075246044292951 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 2 AS depth, -1.978679048009432 AS "Estimator") AS "Values"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 1.0217169523239136) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.13248534500598907) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.7915594577789307) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= 0.6538017988204956) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.45813581347465515) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.6006710529327393) THEN 10 ELSE 11 END ELSE 12 END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", (SELECT "DT_node_data_1".node_id 
FROM "DT_node_data_1" 
WHERE "DT_node_data_1".node_id = "DT_node_lookup_1".node_id) AS node_id, (SELECT "DT_node_data_1".feature 
FROM "DT_node_data_1" 
WHERE "DT_node_data_1".node_id = "DT_node_lookup_1".node_id) AS feature, (SELECT "DT_node_data_1".threshold 
FROM "DT_node_data_1" 
WHERE "DT_node_data_1".node_id = "DT_node_lookup_1".node_id) AS threshold, (SELECT "DT_node_data_1".count 
FROM "DT_node_data_1" 
WHERE "DT_node_data_1".node_id = "DT_node_lookup_1".node_id) AS count, (SELECT "DT_node_data_1".depth 
FROM "DT_node_data_1" 
WHERE "DT_node_data_1".node_id = "DT_node_lookup_1".node_id) AS depth, (SELECT "DT_node_data_1"."Estimator" 
FROM "DT_node_data_1" 
WHERE "DT_node_data_1".node_id = "DT_node_lookup_1".node_id) AS "Estimator" 
FROM "DT_node_lookup_1"), 
"RF_Tree_1_0" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1_0, "DT_Output_1"."Estimator" AS "Estimator_1_0" 
FROM "DT_Output_1"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_3' AS feature, 1.0217169523239136 AS threshold, 100 AS count, 0 AS depth, 0.00028147741757691193 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_3' AS feature, 0.6394748687744141 AS threshold, 82 AS count, 1 AS depth, 0.0684609247026926 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -0.13248534500598907 AS threshold, 73 AS count, 2 AS depth, 0.02648023567996031 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, 0.7898636831336058 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 45 AS count, 3 AS depth, -0.3007291579849867 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_6' AS feature, -0.48091059923171997 AS threshold, 9 AS count, 2 AS depth, 0.4089709578870765 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.8233728234445221 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 1.637330734910721 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, -0.45813581347465515 AS threshold, 18 AS count, 1 AS depth, -0.31031378243683877 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_2' AS feature, -0.23267774283885956 AS threshold, 6 AS count, 2 AS depth, -0.04021300849053191 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, -1.0750009342630469 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.6961213804094186 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 2 AS depth, -1.8029848503228227 AS "Estimator") AS "Values"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 1.0217169523239136) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.6394748687744141) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.13248534500598907) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -0.48091059923171997) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.45813581347465515) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.23267774283885956) THEN 10 ELSE 11 END ELSE 12 END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", (SELECT "DT_node_data_2".node_id 
FROM "DT_node_data_2" 
WHERE "DT_node_data_2".node_id = "DT_node_lookup_2".node_id) AS node_id, (SELECT "DT_node_data_2".feature 
FROM "DT_node_data_2" 
WHERE "DT_node_data_2".node_id = "DT_node_lookup_2".node_id) AS feature, (SELECT "DT_node_data_2".threshold 
FROM "DT_node_data_2" 
WHERE "DT_node_data_2".node_id = "DT_node_lookup_2".node_id) AS threshold, (SELECT "DT_node_data_2".count 
FROM "DT_node_data_2" 
WHERE "DT_node_data_2".node_id = "DT_node_lookup_2".node_id) AS count, (SELECT "DT_node_data_2".depth 
FROM "DT_node_data_2" 
WHERE "DT_node_data_2".node_id = "DT_node_lookup_2".node_id) AS depth, (SELECT "DT_node_data_2"."Estimator" 
FROM "DT_node_data_2" 
WHERE "DT_node_data_2".node_id = "DT_node_lookup_2".node_id) AS "Estimator" 
FROM "DT_node_lookup_2"), 
"RF_Tree_2_0" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2_0, "DT_Output_2"."Estimator" AS "Estimator_2_0" 
FROM "DT_Output_2"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_3' AS feature, 1.0217169523239136 AS threshold, 100 AS count, 0 AS depth, 0.0003108753698586597 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_2' AS feature, 2.060129404067993 AS threshold, 82 AS count, 1 AS depth, 0.06174763053435875 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_5' AS feature, 0.751193642616272 AS threshold, 79 AS count, 2 AS depth, 0.08376148015544893 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 65 AS count, 3 AS depth, 0.14516990880204872 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, 1.3136462048278057 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, -2.0744753645308958 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anova_output_4' AS feature, -0.45813581347465515 AS threshold, 18 AS count, 1 AS depth, -0.279567675935086 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'anova_output_4' AS feature, -0.8446493148803711 AS threshold, 6 AS count, 2 AS depth, -0.035942797118262225 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, -1.0479563288603535 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.6838417292652654 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 2 AS depth, -1.6705091588693488 AS "Estimator") AS "Values"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 1.0217169523239136) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 2.060129404067993) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= 0.751193642616272) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.45813581347465515) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.8446493148803711) THEN 8 ELSE 9 END ELSE 10 END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", (SELECT "DT_node_data_3".node_id 
FROM "DT_node_data_3" 
WHERE "DT_node_data_3".node_id = "DT_node_lookup_3".node_id) AS node_id, (SELECT "DT_node_data_3".feature 
FROM "DT_node_data_3" 
WHERE "DT_node_data_3".node_id = "DT_node_lookup_3".node_id) AS feature, (SELECT "DT_node_data_3".threshold 
FROM "DT_node_data_3" 
WHERE "DT_node_data_3".node_id = "DT_node_lookup_3".node_id) AS threshold, (SELECT "DT_node_data_3".count 
FROM "DT_node_data_3" 
WHERE "DT_node_data_3".node_id = "DT_node_lookup_3".node_id) AS count, (SELECT "DT_node_data_3".depth 
FROM "DT_node_data_3" 
WHERE "DT_node_data_3".node_id = "DT_node_lookup_3".node_id) AS depth, (SELECT "DT_node_data_3"."Estimator" 
FROM "DT_node_data_3" 
WHERE "DT_node_data_3".node_id = "DT_node_lookup_3".node_id) AS "Estimator" 
FROM "DT_node_lookup_3"), 
"RF_Tree_3_0" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3_0, "DT_Output_3"."Estimator" AS "Estimator_3_0" 
FROM "DT_Output_3"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_3' AS feature, 1.0217169523239136 AS threshold, 100 AS count, 0 AS depth, 0.00028006532680609263 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_3' AS feature, 0.6394748687744141 AS threshold, 82 AS count, 1 AS depth, 0.05566428713118173 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_5' AS feature, 0.07817243039608002 AS threshold, 73 AS count, 2 AS depth, 0.018553823591574436 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 3 AS depth, -0.3504664630791946 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 0.6419780825939796 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_5' AS feature, -1.0829886198043823 AS threshold, 9 AS count, 2 AS depth, 0.3566713802857748 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 1.6376387779698476 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 1.5019417021265902 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, -0.45813581347465515 AS threshold, 18 AS count, 1 AS depth, -0.2520258340042385 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_6' AS feature, 0.2241945117712021 AS threshold, 6 AS count, 2 AS depth, -0.03211203464154146 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, -1.0277450057328354 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.6537182789130669 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 2 AS depth, -1.567355701479093 AS "Estimator") AS "Values"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 1.0217169523239136) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.6394748687744141) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= 0.07817243039608002) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= -1.0829886198043823) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.45813581347465515) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= 0.2241945117712021) THEN 10 ELSE 11 END ELSE 12 END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", (SELECT "DT_node_data_4".node_id 
FROM "DT_node_data_4" 
WHERE "DT_node_data_4".node_id = "DT_node_lookup_4".node_id) AS node_id, (SELECT "DT_node_data_4".feature 
FROM "DT_node_data_4" 
WHERE "DT_node_data_4".node_id = "DT_node_lookup_4".node_id) AS feature, (SELECT "DT_node_data_4".threshold 
FROM "DT_node_data_4" 
WHERE "DT_node_data_4".node_id = "DT_node_lookup_4".node_id) AS threshold, (SELECT "DT_node_data_4".count 
FROM "DT_node_data_4" 
WHERE "DT_node_data_4".node_id = "DT_node_lookup_4".node_id) AS count, (SELECT "DT_node_data_4".depth 
FROM "DT_node_data_4" 
WHERE "DT_node_data_4".node_id = "DT_node_lookup_4".node_id) AS depth, (SELECT "DT_node_data_4"."Estimator" 
FROM "DT_node_data_4" 
WHERE "DT_node_data_4".node_id = "DT_node_lookup_4".node_id) AS "Estimator" 
FROM "DT_node_lookup_4"), 
"RF_Tree_4_0" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4_0, "DT_Output_4"."Estimator" AS "Estimator_4_0" 
FROM "DT_Output_4"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_3' AS feature, 1.0217169523239136 AS threshold, 100 AS count, 0 AS depth, 0.0002769083406131556 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_2' AS feature, -0.13248534500598907 AS threshold, 82 AS count, 1 AS depth, 0.0502340540454311 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -1.7915594577789307 AS threshold, 32 AS count, 2 AS depth, 0.17821934257563601 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, -1.0300296265658804 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, 1.0628915798584733 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_6' AS feature, -1.229390263557434 AS threshold, 50 AS count, 2 AS depth, -0.03167653061390006 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 1.7931861392697943 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 46 AS count, 3 AS depth, -0.29747255075312945 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, -0.45813581347465515 AS threshold, 18 AS count, 1 AS depth, -0.22730564431466854 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_6' AS feature, 0.2241945117712021 AS threshold, 6 AS count, 2 AS depth, -0.02867341919670054 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, -0.9287654917815141 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.554077719239761 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 2 AS depth, -1.485049465449343 AS "Estimator") AS "Values"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 1.0217169523239136) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.13248534500598907) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.7915594577789307) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -1.229390263557434) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.45813581347465515) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= 0.2241945117712021) THEN 10 ELSE 11 END ELSE 12 END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", (SELECT "DT_node_data_5".node_id 
FROM "DT_node_data_5" 
WHERE "DT_node_data_5".node_id = "DT_node_lookup_5".node_id) AS node_id, (SELECT "DT_node_data_5".feature 
FROM "DT_node_data_5" 
WHERE "DT_node_data_5".node_id = "DT_node_lookup_5".node_id) AS feature, (SELECT "DT_node_data_5".threshold 
FROM "DT_node_data_5" 
WHERE "DT_node_data_5".node_id = "DT_node_lookup_5".node_id) AS threshold, (SELECT "DT_node_data_5".count 
FROM "DT_node_data_5" 
WHERE "DT_node_data_5".node_id = "DT_node_lookup_5".node_id) AS count, (SELECT "DT_node_data_5".depth 
FROM "DT_node_data_5" 
WHERE "DT_node_data_5".node_id = "DT_node_lookup_5".node_id) AS depth, (SELECT "DT_node_data_5"."Estimator" 
FROM "DT_node_data_5" 
WHERE "DT_node_data_5".node_id = "DT_node_lookup_5".node_id) AS "Estimator" 
FROM "DT_node_lookup_5"), 
"RF_Tree_5_0" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5_0, "DT_Output_5"."Estimator" AS "Estimator_5_0" 
FROM "DT_Output_5"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_3' AS feature, 1.0217169523239136 AS threshold, 100 AS count, 0 AS depth, 0.0002988493660162417 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_2' AS feature, 2.060129404067993 AS threshold, 82 AS count, 1 AS depth, 0.04538254856082091 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_6' AS feature, -0.18842995166778564 AS threshold, 79 AS count, 2 AS depth, 0.06450922769014855 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, -0.23313098768985277 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 46 AS count, 3 AS depth, 0.6371502386355782 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_2' AS feature, 2.4053289890289307 AS threshold, 3 AS count, 2 AS depth, -0.4582866685114726 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -1.9037843718010399 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, -1.818396019284785 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, -0.45813581347465515 AS threshold, 18 AS count, 1 AS depth, -0.20508244696587172 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_4' AS feature, -0.8446493148803711 AS threshold, 6 AS count, 2 AS depth, -0.02557460026719045 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, -0.9169891833919602 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.5418313168634674 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 2 AS depth, -1.4181105744875209 AS "Estimator") AS "Values"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 1.0217169523239136) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 2.060129404067993) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -0.18842995166778564) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 2.4053289890289307) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.45813581347465515) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.8446493148803711) THEN 10 ELSE 11 END ELSE 12 END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", (SELECT "DT_node_data_6".node_id 
FROM "DT_node_data_6" 
WHERE "DT_node_data_6".node_id = "DT_node_lookup_6".node_id) AS node_id, (SELECT "DT_node_data_6".feature 
FROM "DT_node_data_6" 
WHERE "DT_node_data_6".node_id = "DT_node_lookup_6".node_id) AS feature, (SELECT "DT_node_data_6".threshold 
FROM "DT_node_data_6" 
WHERE "DT_node_data_6".node_id = "DT_node_lookup_6".node_id) AS threshold, (SELECT "DT_node_data_6".count 
FROM "DT_node_data_6" 
WHERE "DT_node_data_6".node_id = "DT_node_lookup_6".node_id) AS count, (SELECT "DT_node_data_6".depth 
FROM "DT_node_data_6" 
WHERE "DT_node_data_6".node_id = "DT_node_lookup_6".node_id) AS depth, (SELECT "DT_node_data_6"."Estimator" 
FROM "DT_node_data_6" 
WHERE "DT_node_data_6".node_id = "DT_node_lookup_6".node_id) AS "Estimator" 
FROM "DT_node_lookup_6"), 
"RF_Tree_6_0" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6_0, "DT_Output_6"."Estimator" AS "Estimator_6_0" 
FROM "DT_Output_6"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_6' AS feature, -1.229390263557434 AS threshold, 100 AS count, 0 AS depth, 0.00020523336786887114 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_6' AS feature, -1.395275354385376 AS threshold, 5 AS count, 1 AS depth, 0.38963517675155906 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_6' AS feature, -1.5484471321105957 AS threshold, 2 AS count, 2 AS depth, 0.3494454936820984 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.5387362869008765 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.5355674117428915 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_4' AS feature, 0.7794643640518188 AS threshold, 3 AS count, 2 AS depth, 0.41642829879786625 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.8127689784295253 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.544567195336421 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_6' AS feature, -0.1801726520061493 AS threshold, 95 AS count, 1 AS depth, -0.02029107944179902 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_3' AS feature, 0.26067987084388733 AS threshold, 39 AS count, 2 AS depth, -0.15603265474561798 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, -1.3385609013932094 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, 0.17203037108079489 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'anova_output_3' AS feature, 0.05958250164985657 AS threshold, 56 AS count, 2 AS depth, 0.07424323193050344 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, 0.9258826933361598 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, -0.6351402598508106 AS "Estimator") AS "Values"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -1.229390263557434) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -1.395275354385376) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -1.5484471321105957) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.7794643640518188) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -0.1801726520061493) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.26067987084388733) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.05958250164985657) THEN 13 ELSE 14 END END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", (SELECT "DT_node_data_7".node_id 
FROM "DT_node_data_7" 
WHERE "DT_node_data_7".node_id = "DT_node_lookup_7".node_id) AS node_id, (SELECT "DT_node_data_7".feature 
FROM "DT_node_data_7" 
WHERE "DT_node_data_7".node_id = "DT_node_lookup_7".node_id) AS feature, (SELECT "DT_node_data_7".threshold 
FROM "DT_node_data_7" 
WHERE "DT_node_data_7".node_id = "DT_node_lookup_7".node_id) AS threshold, (SELECT "DT_node_data_7".count 
FROM "DT_node_data_7" 
WHERE "DT_node_data_7".node_id = "DT_node_lookup_7".node_id) AS count, (SELECT "DT_node_data_7".depth 
FROM "DT_node_data_7" 
WHERE "DT_node_data_7".node_id = "DT_node_lookup_7".node_id) AS depth, (SELECT "DT_node_data_7"."Estimator" 
FROM "DT_node_data_7" 
WHERE "DT_node_data_7".node_id = "DT_node_lookup_7".node_id) AS "Estimator" 
FROM "DT_node_lookup_7"), 
"RF_Tree_7_0" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7_0, "DT_Output_7"."Estimator" AS "Estimator_7_0" 
FROM "DT_Output_7"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_4' AS feature, -0.3460630774497986 AS threshold, 100 AS count, 0 AS depth, 0.0003361547287661049 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_5' AS feature, -0.7974509000778198 AS threshold, 35 AS count, 1 AS depth, 0.11696756357486904 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_6' AS feature, 0.990790069103241 AS threshold, 10 AS count, 2 AS depth, 0.30064138405641405 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 1.684079431106489 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.336400417478221 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_5' AS feature, -0.2840039134025574 AS threshold, 25 AS count, 2 AS depth, 0.043498035382251 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, -1.46108891454345 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, 0.621930546895152 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_3' AS feature, 0.048364631831645966 AS threshold, 65 AS count, 1 AS depth, -0.06246537311144316 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_4' AS feature, -0.1821763515472412 AS threshold, 36 AS count, 2 AS depth, 0.06581728106728454 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, -1.5650749988680688 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 0.66093988470046 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'anova_output_2' AS feature, -0.6729870438575745 AS threshold, 29 AS count, 2 AS depth, -0.22171280588503617 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.3179451821651151 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, -1.3955185336025242 AS "Estimator") AS "Values"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.3460630774497986) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= -0.7974509000778198) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= 0.990790069103241) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= -0.2840039134025574) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.048364631831645966) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.1821763515472412) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.6729870438575745) THEN 13 ELSE 14 END END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", (SELECT "DT_node_data_8".node_id 
FROM "DT_node_data_8" 
WHERE "DT_node_data_8".node_id = "DT_node_lookup_8".node_id) AS node_id, (SELECT "DT_node_data_8".feature 
FROM "DT_node_data_8" 
WHERE "DT_node_data_8".node_id = "DT_node_lookup_8".node_id) AS feature, (SELECT "DT_node_data_8".threshold 
FROM "DT_node_data_8" 
WHERE "DT_node_data_8".node_id = "DT_node_lookup_8".node_id) AS threshold, (SELECT "DT_node_data_8".count 
FROM "DT_node_data_8" 
WHERE "DT_node_data_8".node_id = "DT_node_lookup_8".node_id) AS count, (SELECT "DT_node_data_8".depth 
FROM "DT_node_data_8" 
WHERE "DT_node_data_8".node_id = "DT_node_lookup_8".node_id) AS depth, (SELECT "DT_node_data_8"."Estimator" 
FROM "DT_node_data_8" 
WHERE "DT_node_data_8".node_id = "DT_node_lookup_8".node_id) AS "Estimator" 
FROM "DT_node_lookup_8"), 
"RF_Tree_8_0" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8_0, "DT_Output_8"."Estimator" AS "Estimator_8_0" 
FROM "DT_Output_8"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_3' AS feature, 1.0217169523239136 AS threshold, 100 AS count, 0 AS depth, 0.0003318945953096242 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_3' AS feature, 0.6394748687744141 AS threshold, 82 AS count, 1 AS depth, 0.03822719932430694 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_5' AS feature, 0.07817243039608002 AS threshold, 73 AS count, 2 AS depth, 0.005832429527406084 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 3 AS depth, -0.34883700416683644 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 0.5305169193799892 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_2' AS feature, 1.1342616081237793 AS threshold, 9 AS count, 2 AS depth, 0.3009847765658361 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 1.419380065135389 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.55152163998067 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_6' AS feature, 0.2241945117712021 AS threshold, 18 AS count, 1 AS depth, -0.17230227139234486 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_2' AS feature, -0.23267774283885956 AS threshold, 14 AS count, 2 AS depth, -0.230072518323498 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, -1.4220975033721894 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, -0.6794918640999582 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'anova_output_4' AS feature, -0.5548306703567505 AS threshold, 4 AS count, 2 AS depth, 0.029893592866691257 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.4383282425673587 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, -1.3250393761042671 AS "Estimator") AS "Values"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 1.0217169523239136) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.6394748687744141) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= 0.07817243039608002) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1342616081237793) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= 0.2241945117712021) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.23267774283885956) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.5548306703567505) THEN 13 ELSE 14 END END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", (SELECT "DT_node_data_9".node_id 
FROM "DT_node_data_9" 
WHERE "DT_node_data_9".node_id = "DT_node_lookup_9".node_id) AS node_id, (SELECT "DT_node_data_9".feature 
FROM "DT_node_data_9" 
WHERE "DT_node_data_9".node_id = "DT_node_lookup_9".node_id) AS feature, (SELECT "DT_node_data_9".threshold 
FROM "DT_node_data_9" 
WHERE "DT_node_data_9".node_id = "DT_node_lookup_9".node_id) AS threshold, (SELECT "DT_node_data_9".count 
FROM "DT_node_data_9" 
WHERE "DT_node_data_9".node_id = "DT_node_lookup_9".node_id) AS count, (SELECT "DT_node_data_9".depth 
FROM "DT_node_data_9" 
WHERE "DT_node_data_9".node_id = "DT_node_lookup_9".node_id) AS depth, (SELECT "DT_node_data_9"."Estimator" 
FROM "DT_node_data_9" 
WHERE "DT_node_data_9".node_id = "DT_node_lookup_9".node_id) AS "Estimator" 
FROM "DT_node_lookup_9"), 
"RF_Tree_9_0" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9_0, "DT_Output_9"."Estimator" AS "Estimator_9_0" 
FROM "DT_Output_9"), 
"DT_node_data_10" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_5' AS feature, -1.630774974822998 AS threshold, 100 AS count, 0 AS depth, 0.0003239522998661537 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_2' AS feature, -0.9463610053062439 AS threshold, 3 AS count, 1 AS depth, 0.43053606818773305 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 1.8052296889539865 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 1.732433201422589 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anova_output_6' AS feature, -1.229390263557434 AS threshold, 97 AS count, 1 AS depth, -0.012981577057490569 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_6' AS feature, -1.395275354385376 AS threshold, 5 AS count, 2 AS depth, 0.3294380914996468 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.3746674179932363 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.5937837557191292 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_6' AS feature, -0.1801726520061493 AS threshold, 92 AS count, 2 AS depth, -0.031591341652987166 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, -0.6056643577334898 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 53 AS count, 3 AS depth, 0.19742330607375058 AS "Estimator") AS "Values"), 
"DT_node_lookup_10" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= -1.630774974822998) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -0.9463610053062439) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -1.229390263557434) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -1.395275354385376) THEN 6 ELSE 7 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -0.1801726520061493) THEN 9 ELSE 10 END END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", (SELECT "DT_node_data_10".node_id 
FROM "DT_node_data_10" 
WHERE "DT_node_data_10".node_id = "DT_node_lookup_10".node_id) AS node_id, (SELECT "DT_node_data_10".feature 
FROM "DT_node_data_10" 
WHERE "DT_node_data_10".node_id = "DT_node_lookup_10".node_id) AS feature, (SELECT "DT_node_data_10".threshold 
FROM "DT_node_data_10" 
WHERE "DT_node_data_10".node_id = "DT_node_lookup_10".node_id) AS threshold, (SELECT "DT_node_data_10".count 
FROM "DT_node_data_10" 
WHERE "DT_node_data_10".node_id = "DT_node_lookup_10".node_id) AS count, (SELECT "DT_node_data_10".depth 
FROM "DT_node_data_10" 
WHERE "DT_node_data_10".node_id = "DT_node_lookup_10".node_id) AS depth, (SELECT "DT_node_data_10"."Estimator" 
FROM "DT_node_data_10" 
WHERE "DT_node_data_10".node_id = "DT_node_lookup_10".node_id) AS "Estimator" 
FROM "DT_node_lookup_10"), 
"RF_Tree_10_0" AS 
(SELECT "DT_Output_10"."KEY" AS join_key_10_0, "DT_Output_10"."Estimator" AS "Estimator_10_0" 
FROM "DT_Output_10"), 
"DT_node_data_11" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_4' AS feature, -0.3460630774497986 AS threshold, 100 AS count, 0 AS depth, 0.00035467295056894387 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anova_output_3' AS feature, -1.159703254699707 AS threshold, 35 AS count, 1 AS depth, 0.10036146557878363 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anova_output_3' AS feature, -1.6557211875915527 AS threshold, 3 AS count, 2 AS depth, -0.25591793777607724 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.5337484533799675 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, -2.2677450404038417 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anova_output_6' AS feature, 0.2082148641347885 AS threshold, 32 AS count, 2 AS depth, 0.1337626596433018 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, 0.20925212413581395 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, 1.015249534290787 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anova_output_3' AS feature, 0.048364631831645966 AS threshold, 65 AS count, 1 AS depth, -0.05349513846462359 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'anova_output_6' AS feature, -0.1801726520061493 AS threshold, 36 AS count, 2 AS depth, 0.055626851256847444 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, -0.6305360339342403 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 0.9109989751006478 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'anova_output_2' AS feature, 0.030657175928354263 AS threshold, 29 AS count, 2 AS depth, -0.18895691880851861 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, -0.11966224969685171 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, -1.4758640869291204 AS "Estimator") AS "Values"), 
"DT_node_lookup_11" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.3460630774497986) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -1.159703254699707) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -1.6557211875915527) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= 0.2082148641347885) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.048364631831645966) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_6 <= -0.1801726520061493) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 0.030657175928354263) THEN 13 ELSE 14 END END END AS node_id 
FROM "ADS_ano_2_OUT"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", (SELECT "DT_node_data_11".node_id 
FROM "DT_node_data_11" 
WHERE "DT_node_data_11".node_id = "DT_node_lookup_11".node_id) AS node_id, (SELECT "DT_node_data_11".feature 
FROM "DT_node_data_11" 
WHERE "DT_node_data_11".node_id = "DT_node_lookup_11".node_id) AS feature, (SELECT "DT_node_data_11".threshold 
FROM "DT_node_data_11" 
WHERE "DT_node_data_11".node_id = "DT_node_lookup_11".node_id) AS threshold, (SELECT "DT_node_data_11".count 
FROM "DT_node_data_11" 
WHERE "DT_node_data_11".node_id = "DT_node_lookup_11".node_id) AS count, (SELECT "DT_node_data_11".depth 
FROM "DT_node_data_11" 
WHERE "DT_node_data_11".node_id = "DT_node_lookup_11".node_id) AS depth, (SELECT "DT_node_data_11"."Estimator" 
FROM "DT_node_data_11" 
WHERE "DT_node_data_11".node_id = "DT_node_lookup_11".node_id) AS "Estimator" 
FROM "DT_node_lookup_11"), 
"RF_Tree_11_0" AS 
(SELECT "DT_Output_11"."KEY" AS join_key_11_0, "DT_Output_11"."Estimator" AS "Estimator_11_0" 
FROM "DT_Output_11"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0_0".join_key_0_0 AS join_key_0_0, "RF_Tree_0_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Tree_1_0".join_key_1_0 AS join_key_1_0, "RF_Tree_1_0"."Estimator_1_0" AS "Estimator_1_0", "RF_Tree_2_0".join_key_2_0 AS join_key_2_0, "RF_Tree_2_0"."Estimator_2_0" AS "Estimator_2_0", "RF_Tree_3_0".join_key_3_0 AS join_key_3_0, "RF_Tree_3_0"."Estimator_3_0" AS "Estimator_3_0", "RF_Tree_4_0".join_key_4_0 AS join_key_4_0, "RF_Tree_4_0"."Estimator_4_0" AS "Estimator_4_0", "RF_Tree_5_0".join_key_5_0 AS join_key_5_0, "RF_Tree_5_0"."Estimator_5_0" AS "Estimator_5_0", "RF_Tree_6_0".join_key_6_0 AS join_key_6_0, "RF_Tree_6_0"."Estimator_6_0" AS "Estimator_6_0", "RF_Tree_7_0".join_key_7_0 AS join_key_7_0, "RF_Tree_7_0"."Estimator_7_0" AS "Estimator_7_0", "RF_Tree_8_0".join_key_8_0 AS join_key_8_0, "RF_Tree_8_0"."Estimator_8_0" AS "Estimator_8_0", "RF_Tree_9_0".join_key_9_0 AS join_key_9_0, "RF_Tree_9_0"."Estimator_9_0" AS "Estimator_9_0", "RF_Tree_10_0".join_key_10_0 AS join_key_10_0, "RF_Tree_10_0"."Estimator_10_0" AS "Estimator_10_0", "RF_Tree_11_0".join_key_11_0 AS join_key_11_0, "RF_Tree_11_0"."Estimator_11_0" AS "Estimator_11_0" 
FROM "RF_Tree_0_0" LEFT OUTER JOIN "RF_Tree_1_0" ON "RF_Tree_0_0".join_key_0_0 = "RF_Tree_1_0".join_key_1_0 LEFT OUTER JOIN "RF_Tree_2_0" ON "RF_Tree_2_0".join_key_2_0 = "RF_Tree_1_0".join_key_1_0 LEFT OUTER JOIN "RF_Tree_3_0" ON "RF_Tree_3_0".join_key_3_0 = "RF_Tree_2_0".join_key_2_0 LEFT OUTER JOIN "RF_Tree_4_0" ON "RF_Tree_4_0".join_key_4_0 = "RF_Tree_3_0".join_key_3_0 LEFT OUTER JOIN "RF_Tree_5_0" ON "RF_Tree_5_0".join_key_5_0 = "RF_Tree_4_0".join_key_4_0 LEFT OUTER JOIN "RF_Tree_6_0" ON "RF_Tree_6_0".join_key_6_0 = "RF_Tree_5_0".join_key_5_0 LEFT OUTER JOIN "RF_Tree_7_0" ON "RF_Tree_7_0".join_key_7_0 = "RF_Tree_6_0".join_key_6_0 LEFT OUTER JOIN "RF_Tree_8_0" ON "RF_Tree_8_0".join_key_8_0 = "RF_Tree_7_0".join_key_7_0 LEFT OUTER JOIN "RF_Tree_9_0" ON "RF_Tree_9_0".join_key_9_0 = "RF_Tree_8_0".join_key_8_0 LEFT OUTER JOIN "RF_Tree_10_0" ON "RF_Tree_10_0".join_key_10_0 = "RF_Tree_9_0".join_key_9_0 LEFT OUTER JOIN "RF_Tree_11_0" ON "RF_Tree_11_0".join_key_11_0 = "RF_Tree_10_0".join_key_10_0), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0_0 AS "KEY", 0.799329304538 + 0.1 * "RF_Join_CTE"."Estimator_0_0" + 0.1 * "RF_Join_CTE"."Estimator_1_0" + 0.1 * "RF_Join_CTE"."Estimator_2_0" + 0.1 * "RF_Join_CTE"."Estimator_3_0" + 0.1 * "RF_Join_CTE"."Estimator_4_0" + 0.1 * "RF_Join_CTE"."Estimator_5_0" + 0.1 * "RF_Join_CTE"."Estimator_6_0" + 0.1 * "RF_Join_CTE"."Estimator_7_0" + 0.1 * "RF_Join_CTE"."Estimator_8_0" + 0.1 * "RF_Join_CTE"."Estimator_9_0" + 0.1 * "RF_Join_CTE"."Estimator_10_0" + 0.1 * "RF_Join_CTE"."Estimator_11_0" AS "Score_-1", CAST(NULL AS FLOAT) AS "Proba_-1", CAST(NULL AS FLOAT) AS "LogProba_-1", 0.200670695462 AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_-1" AS "Score_-1", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Proba_-1" AS "Proba_-1", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."LogProba_-1" AS "LogProba_-1", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", -1 AS class, orig_cte."LogProba_-1" AS "LogProba", orig_cte."Proba_-1" AS "Proba", orig_cte."Score_-1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_-1" AS "Score_-1", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_-1" AS "Proba_-1", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_-1" AS "LogProba_-1", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_-1" AS "Score_-1", score_max."Score_1" AS "Score_1", score_max."Proba_-1" AS "Proba_-1", score_max."Proba_1" AS "Proba_1", score_max."LogProba_-1" AS "LogProba_-1", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_-1" - score_max."max_Score") AS "exp_delta_Score_-1", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", -1 AS class, score_soft_max_comp."LogProba_-1" AS "LogProba", score_soft_max_comp."Proba_-1" AS "Proba", score_soft_max_comp."Score_-1" AS "Score", score_soft_max_comp."exp_delta_Score_-1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_-1" AS "Score_-1", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Proba_-1" AS "Proba_-1", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."LogProba_-1" AS "LogProba_-1", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_-1" AS "exp_delta_Score_-1", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_-1" AS "Score_-1", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_-1" AS "Proba_-1", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_-1" AS "LogProba_-1", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_-1" AS "exp_delta_Score_-1", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_-1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_-1", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_-1" AS "Score_-1", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."SoftProba_-1" AS "Proba_-1", arg_max_cte."SoftProba_1" AS "Proba_1", CASE WHEN (arg_max_cte."SoftProba_-1" > 0.0) THEN ln(arg_max_cte."SoftProba_-1") ELSE -1.79769313486231e+308 END AS "LogProba_-1", CASE WHEN (arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte