-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "SV_data" AS 
(SELECT "Values".sv_idx AS sv_idx, "Values".dual_coeff AS dual_coeff, "Values".sv_0 AS sv_0, "Values".sv_1 AS sv_1, "Values".sv_2 AS sv_2, "Values".sv_3 AS sv_3 
FROM (SELECT 0 AS sv_idx, -0.438624410446 AS dual_coeff, 5.7 AS sv_0, 4.4 AS sv_1, 1.5 AS sv_2, 0.4 AS sv_3 UNION ALL SELECT 1 AS sv_idx, -0.0666311583128 AS dual_coeff, 5.7 AS sv_0, 3.8 AS sv_1, 1.7 AS sv_2, 0.3 AS sv_3 UNION ALL SELECT 2 AS sv_idx, -0.00227702074997 AS dual_coeff, 5.1 AS sv_0, 3.3 AS sv_1, 1.7 AS sv_2, 0.5 AS sv_3 UNION ALL SELECT 3 AS sv_idx, -0.358431125728 AS dual_coeff, 4.8 AS sv_0, 3.4 AS sv_1, 1.9 AS sv_2, 0.2 AS sv_3 UNION ALL SELECT 4 AS sv_idx, -1.0 AS dual_coeff, 4.5 AS sv_0, 2.3 AS sv_1, 1.3 AS sv_2, 0.3 AS sv_3 UNION ALL SELECT 5 AS sv_idx, -0.458858234397 AS dual_coeff, 5.1 AS sv_0, 3.8 AS sv_1, 1.9 AS sv_2, 0.4 AS sv_3 UNION ALL SELECT 6 AS sv_idx, 0.551710082049 AS dual_coeff, 7.0 AS sv_0, 3.2 AS sv_1, 4.7 AS sv_2, 1.4 AS sv_3 UNION ALL SELECT 7 AS sv_idx, 0.54282930661 AS dual_coeff, 4.9 AS sv_0, 2.4 AS sv_1, 3.3 AS sv_2, 1.0 AS sv_3 UNION ALL SELECT 8 AS sv_idx, 0.166490971815 AS dual_coeff, 6.7 AS sv_0, 3.0 AS sv_1, 5.0 AS sv_2, 1.7 AS sv_3 UNION ALL SELECT 9 AS sv_idx, 0.0637915891609 AS dual_coeff, 6.0 AS sv_0, 2.7 AS sv_1, 5.1 AS sv_2, 1.6 AS sv_3 UNION ALL SELECT 10 AS sv_idx, 1.0 AS dual_coeff, 5.1 AS sv_0, 2.5 AS sv_1, 3.0 AS sv_2, 1.1 AS sv_3) AS "Values"), 
linear_kernel_cte AS 
(SELECT "ADS"."KEY" AS "KEY", (SELECT sum("SV_data".dual_coeff * exp(CASE WHEN (-0.25 * (power("ADS"."Feature_0" - "SV_data".sv_0, 2) + power("ADS"."Feature_1" - "SV_data".sv_1, 2) + power("ADS"."Feature_2" - "SV_data".sv_2, 2) + power("ADS"."Feature_3" - "SV_data".sv_3, 2)) <= -100.0) THEN -100.0 ELSE -0.25 * (power("ADS"."Feature_0" - "SV_data".sv_0, 2) + power("ADS"."Feature_1" - "SV_data".sv_1, 2) + power("ADS"."Feature_2" - "SV_data".sv_2, 2) + power("ADS"."Feature_3" - "SV_data".sv_3, 2)) END)) AS sum_1 
FROM "SV_data") + 0.0398569105121 AS dot_product 
FROM "INPUT_DATA" AS "ADS"), 
"OVO_Decision_0_1" AS 
(SELECT linear_kernel_cte."KEY" AS join_key_0, CASE WHEN (linear_kernel_cte.dot_product >= 0.0) THEN 1 ELSE 0 END AS dec_0_1 
FROM linear_kernel_cte), 
"SV_data_1" AS 
(SELECT "Values".sv_idx AS sv_idx, "Values".dual_coeff AS dual_coeff, "Values".sv_0 AS sv_0, "Values".sv_1 AS sv_1, "Values".sv_2 AS sv_2, "Values".sv_3 AS sv_3 
FROM (SELECT 0 AS sv_idx, -0.009368831961 AS dual_coeff, 4.3 AS sv_0, 3.0 AS sv_1, 1.1 AS sv_2, 0.1 AS sv_3 UNION ALL SELECT 1 AS sv_idx, -0.955647490122 AS dual_coeff, 5.7 AS sv_0, 4.4 AS sv_1, 1.5 AS sv_2, 0.4 AS sv_3 UNION ALL SELECT 2 AS sv_idx, -0.0116173056924 AS dual_coeff, 4.8 AS sv_0, 3.4 AS sv_1, 1.9 AS sv_2, 0.2 AS sv_3 UNION ALL SELECT 3 AS sv_idx, -0.968621844512 AS dual_coeff, 4.5 AS sv_0, 2.3 AS sv_1, 1.3 AS sv_2, 0.3 AS sv_3 UNION ALL SELECT 4 AS sv_idx, 0.117576081311 AS dual_coeff, 6.3 AS sv_0, 3.3 AS sv_1, 6.0 AS sv_2, 2.5 AS sv_3 UNION ALL SELECT 5 AS sv_idx, 0.733765504934 AS dual_coeff, 4.9 AS sv_0, 2.5 AS sv_1, 4.5 AS sv_2, 1.7 AS sv_3 UNION ALL SELECT 6 AS sv_idx, 0.427235940618 AS dual_coeff, 7.7 AS sv_0, 2.6 AS sv_1, 6.9 AS sv_2, 2.3 AS sv_3 UNION ALL SELECT 7 AS sv_idx, 0.0999300175851 AS dual_coeff, 6.0 AS sv_0, 2.2 AS sv_1, 5.0 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 8 AS sv_idx, 0.405339510491 AS dual_coeff, 7.9 AS sv_0, 3.8 AS sv_1, 6.4 AS sv_2, 2.0 AS sv_3 UNION ALL SELECT 9 AS sv_idx, 0.161408417348 AS dual_coeff, 6.9 AS sv_0, 3.1 AS sv_1, 5.1 AS sv_2, 2.3 AS sv_3) AS "Values"), 
linear_kernel_cte_1 AS 
(SELECT "ADS"."KEY" AS "KEY", (SELECT sum("SV_data_1".dual_coeff * exp(CASE WHEN (-0.25 * (power("ADS"."Feature_0" - "SV_data_1".sv_0, 2) + power("ADS"."Feature_1" - "SV_data_1".sv_1, 2) + power("ADS"."Feature_2" - "SV_data_1".sv_2, 2) + power("ADS"."Feature_3" - "SV_data_1".sv_3, 2)) <= -100.0) THEN -100.0 ELSE -0.25 * (power("ADS"."Feature_0" - "SV_data_1".sv_0, 2) + power("ADS"."Feature_1" - "SV_data_1".sv_1, 2) + power("ADS"."Feature_2" - "SV_data_1".sv_2, 2) + power("ADS"."Feature_3" - "SV_data_1".sv_3, 2)) END)) AS sum_2 
FROM "SV_data_1") + 0.167774532094 AS dot_product 
FROM "INPUT_DATA" AS "ADS"), 
"OVO_Decision_0_2" AS 
(SELECT linear_kernel_cte_1."KEY" AS join_key_1, CASE WHEN (linear_kernel_cte_1.dot_product >= 0.0) THEN 1 ELSE 0 END AS dec_0_2 
FROM linear_kernel_cte_1), 
"SV_data_2" AS 
(SELECT "Values".sv_idx AS sv_idx, "Values".dual_coeff AS dual_coeff, "Values".sv_0 AS sv_0, "Values".sv_1 AS sv_1, "Values".sv_2 AS sv_2, "Values".sv_3 AS sv_3 
FROM (SELECT 0 AS sv_idx, -1.0 AS dual_coeff, 6.9 AS sv_0, 3.1 AS sv_1, 4.9 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 1 AS sv_idx, -1.0 AS dual_coeff, 6.5 AS sv_0, 2.8 AS sv_1, 4.6 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 2 AS sv_idx, -1.0 AS dual_coeff, 6.3 AS sv_0, 3.3 AS sv_1, 4.7 AS sv_2, 1.6 AS sv_3 UNION ALL SELECT 3 AS sv_idx, -0.404342169781 AS dual_coeff, 5.0 AS sv_0, 2.0 AS sv_1, 3.5 AS sv_2, 1.0 AS sv_3 UNION ALL SELECT 4 AS sv_idx, -1.0 AS dual_coeff, 6.1 AS sv_0, 2.9 AS sv_1, 4.7 AS sv_2, 1.4 AS sv_3 UNION ALL SELECT 5 AS sv_idx, -1.0 AS dual_coeff, 5.6 AS sv_0, 3.0 AS sv_1, 4.5 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 6 AS sv_idx, -1.0 AS dual_coeff, 6.2 AS sv_0, 2.2 AS sv_1, 4.5 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 7 AS sv_idx, -1.0 AS dual_coeff, 5.9 AS sv_0, 3.2 AS sv_1, 4.8 AS sv_2, 1.8 AS sv_3 UNION ALL SELECT 8 AS sv_idx, -1.0 AS dual_coeff, 6.3 AS sv_0, 2.5 AS sv_1, 4.9 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 9 AS sv_idx, -1.0 AS dual_coeff, 6.8 AS sv_0, 2.8 AS sv_1, 4.8 AS sv_2, 1.4 AS sv_3 UNION ALL SELECT 10 AS sv_idx, -1.0 AS dual_coeff, 6.7 AS sv_0, 3.0 AS sv_1, 5.0 AS sv_2, 1.7 AS sv_3 UNION ALL SELECT 11 AS sv_idx, -1.0 AS dual_coeff, 6.0 AS sv_0, 2.9 AS sv_1, 4.5 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 12 AS sv_idx, -1.0 AS dual_coeff, 6.0 AS sv_0, 2.7 AS sv_1, 5.1 AS sv_2, 1.6 AS sv_3 UNION ALL SELECT 13 AS sv_idx, -1.0 AS dual_coeff, 5.4 AS sv_0, 3.0 AS sv_1, 4.5 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 14 AS sv_idx, -0.273915164568 AS dual_coeff, 6.0 AS sv_0, 3.4 AS sv_1, 4.5 AS sv_2, 1.6 AS sv_3 UNION ALL SELECT 15 AS sv_idx, -1.0 AS dual_coeff, 6.7 AS sv_0, 3.1 AS sv_1, 4.7 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 16 AS sv_idx, 1.0 AS dual_coeff, 4.9 AS sv_0, 2.5 AS sv_1, 4.5 AS sv_2, 1.7 AS sv_3 UNION ALL SELECT 17 AS sv_idx, 1.0 AS dual_coeff, 6.5 AS sv_0, 3.2 AS sv_1, 5.1 AS sv_2, 2.0 AS sv_3 UNION ALL SELECT 18 AS sv_idx, 1.0 AS dual_coeff, 6.0 AS sv_0, 2.2 AS sv_1, 5.0 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 19 AS sv_idx, 1.0 AS dual_coeff, 5.6 AS sv_0, 2.8 AS sv_1, 4.9 AS sv_2, 2.0 AS sv_3 UNION ALL SELECT 20 AS sv_idx, 1.0 AS dual_coeff, 6.3 AS sv_0, 2.7 AS sv_1, 4.9 AS sv_2, 1.8 AS sv_3 UNION ALL SELECT 21 AS sv_idx, 1.0 AS dual_coeff, 6.2 AS sv_0, 2.8 AS sv_1, 4.8 AS sv_2, 1.8 AS sv_3 UNION ALL SELECT 22 AS sv_idx, 1.0 AS dual_coeff, 6.1 AS sv_0, 3.0 AS sv_1, 4.9 AS sv_2, 1.8 AS sv_3 UNION ALL SELECT 23 AS sv_idx, 0.830034354701 AS dual_coeff, 7.2 AS sv_0, 3.0 AS sv_1, 5.8 AS sv_2, 1.6 AS sv_3 UNION ALL SELECT 24 AS sv_idx, 0.130921483022 AS dual_coeff, 7.9 AS sv_0, 3.8 AS sv_1, 6.4 AS sv_2, 2.0 AS sv_3 UNION ALL SELECT 25 AS sv_idx, 1.0 AS dual_coeff, 6.3 AS sv_0, 2.8 AS sv_1, 5.1 AS sv_2, 1.5 AS sv_3 UNION ALL SELECT 26 AS sv_idx, 0.623723884137 AS dual_coeff, 6.1 AS sv_0, 2.6 AS sv_1, 5.6 AS sv_2, 1.4 AS sv_3 UNION ALL SELECT 27 AS sv_idx, 1.0 AS dual_coeff, 6.0 AS sv_0, 3.0 AS sv_1, 4.8 AS sv_2, 1.8 AS sv_3 UNION ALL SELECT 28 AS sv_idx, 0.773012798435 AS dual_coeff, 6.9 AS sv_0, 3.1 AS sv_1, 5.1 AS sv_2, 2.3 AS sv_3 UNION ALL SELECT 29 AS sv_idx, 0.320564814054 AS dual_coeff, 5.8 AS sv_0, 2.7 AS sv_1, 5.1 AS sv_2, 1.9 AS sv_3 UNION ALL SELECT 30 AS sv_idx, 1.0 AS dual_coeff, 6.3 AS sv_0, 2.5 AS sv_1, 5.0 AS sv_2, 1.9 AS sv_3 UNION ALL SELECT 31 AS sv_idx, 1.0 AS dual_coeff, 6.5 AS sv_0, 3.0 AS sv_1, 5.2 AS sv_2, 2.0 AS sv_3 UNION ALL SELECT 32 AS sv_idx, 1.0 AS dual_coeff, 5.9 AS sv_0, 3.0 AS sv_1, 5.1 AS sv_2, 1.8 AS sv_3) AS "Values"), 
linear_kernel_cte_2 AS 
(SELECT "ADS"."KEY" AS "KEY", (SELECT sum("SV_data_2".dual_coeff * exp(CASE WHEN (-0.25 * (power("ADS"."Feature_0" - "SV_data_2".sv_0, 2) + power("ADS"."Feature_1" - "SV_data_2".sv_1, 2) + power("ADS"."Feature_2" - "SV_data_2".sv_2, 2) + power("ADS"."Feature_3" - "SV_data_2".sv_3, 2)) <= -100.0) THEN -100.0 ELSE -0.25 * (power("ADS"."Feature_0" - "SV_data_2".sv_0, 2) + power("ADS"."Feature_1" - "SV_data_2".sv_1, 2) + power("ADS"."Feature_2" - "SV_data_2".sv_2, 2) + power("ADS"."Feature_3" - "SV_data_2".sv_3, 2)) END)) AS sum_3 
FROM "SV_data_2") + 0.143704687543 AS dot_product 
FROM "INPUT_DATA" AS "ADS"), 
"OVO_Decision_1_2" AS 
(SELECT linear_kernel_cte_2."KEY" AS join_key_2, CASE WHEN (linear_kernel_cte_2.dot_product >= 0.0) THEN 1 ELSE 0 END AS dec_1_2 
FROM linear_kernel_cte_2), 
"OVO_Decisions_CTE" AS 
(SELECT "OVO_Decision_0_1".join_key_0 AS join_key_0, "OVO_Decision_0_1".dec_0_1 AS dec_0_1, "OVO_Decision_0_2".join_key_1 AS join_key_1, "OVO_Decision_0_2".dec_0_2 AS dec_0_2, "OVO_Decision_1_2".join_key_2 AS join_key_2, "OVO_Decision_1_2".dec_1_2 AS dec_1_2 
FROM "OVO_Decision_0_1" LEFT OUTER JOIN "OVO_Decision_0_2" ON "OVO_Decision_0_1".join_key_0 = "OVO_Decision_0_2".join_key_1 LEFT OUTER JOIN "OVO_Decision_1_2" ON "OVO_Decision_1_2".join_key_2 = "OVO_Decision_0_2".join_key_1), 
"OVO_Scores" AS 
(SELECT "OVO_Decisions_CTE".join_key_0 AS "KEY", (1 - "OVO_Decisions_CTE".dec_0_1) + (1 - "OVO_Decisions_CTE".dec_0_2) AS "Score_0", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0", "OVO_Decisions_CTE".dec_0_1 + (1 - "OVO_Decisions_CTE".dec_1_2) AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1", "OVO_Decisions_CTE".dec_0_2 + "OVO_Decisions_CTE".dec_1_2 AS "Score_2", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2" 
FROM "OVO_Decisions_CTE"), 
orig_cte AS 
(SELECT "OVO_Scores"."KEY" AS "KEY", "OVO_Scores"."Score_0" AS "Score_0", "OVO_Scores"."Score_1" AS "Score_1", "OVO_Scores"."Score_2" AS "Score_2", "OVO_Scores"."Proba_0" AS "Proba_0", "OVO_Scores"."Proba_1" AS "Proba_1", "OVO_Scores"."Proba_2" AS "Proba_2", "OVO_Scores"."LogProba_0" AS "LogProba_0", "OVO_Scores"."LogProba_1" AS "LogProba_1", "OVO_Scores"."LogProba_2" AS "LogProba_2", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OVO_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", CASE WHEN (arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte