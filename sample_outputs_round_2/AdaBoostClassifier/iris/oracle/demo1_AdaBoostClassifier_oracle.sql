-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "DT_node_lookup" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.800000011920929) THEN 1 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.75) THEN CASE WHEN ("ADS"."Feature_2" <= 4.949999809265137) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_2" <= 4.850000381469727) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "INPUT_DATA" "ADS"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 150 AS count, 0 AS depth, 0.33333333333333337 AS "Proba_0", -1.09861228867 AS "LogProba_0", 0.33333333333333337 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0.33333333333333337 AS "Proba_2", -1.09861228867 AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 100 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.5 AS "Proba_2", -0.69314718056 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 54 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9074074074074073 AS "Proba_1", -0.0971637484536 AS "LogProba_1", 0.09259259259259268 AS "Proba_2", -2.37954613413 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9791666666666666 AS "Proba_1", -0.0210534091978 AS "LogProba_1", 0.020833333333333356 AS "Proba_2", -3.87120101091 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.33333333333333337 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0.6666666666666667 AS "Proba_2", -0.405465108108 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.021739130434782632 AS "Proba_1", -3.82864139649 AS "LogProba_1", 0.9782608695652174 AS "Proba_2", -0.0219789067188 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.33333333333333337 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0.6666666666666667 AS "Proba_2", -0.405465108108 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"AdaBoost_Estim_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0" AS "Proba_0_0", "DT_Output"."LogProba_0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1" AS "Proba_0_1", "DT_Output"."LogProba_1" AS "LogProba_0_1", CAST(NULL AS FLOAT) AS "Score_0_2", "DT_Output"."Proba_2" AS "Proba_0_2", "DT_Output"."LogProba_2" AS "LogProba_0_2", "DT_Output"."Decision" AS "Decision_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" <= 4.949999809265137) THEN CASE WHEN ("ADS"."Feature_2" <= 3.9000000953674316) THEN CASE WHEN ("ADS"."Feature_2" <= 2.5999999046325684) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_2" <= 4.75) THEN CASE WHEN ("ADS"."Feature_3" <= 0.800000011920929) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS"."Feature_2" <= 5.149999618530273) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "INPUT_DATA" "ADS"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 150 AS count, 0 AS depth, 8.153522990138385e-06 AS "Proba_0", -11.7170604554 AS "LogProba_0", 0.49999241722361987 AS "Proba_1", -0.693162346228 AS "LogProba_1", 0.49999942925339 AS "Proba_2", -0.693148322054 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 3.9000000953674316 AS threshold, 22 AS count, 1 AS depth, 9.04169249708319e-06 AS "Proba_0", -11.613664178 AS "LogProba_0", 0.020833144964739703 AS "Proba_1", -3.87121005264 AS "LogProba_1", 0.9791578133427632 AS "Proba_2", -0.0210624509312 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 2.5999999046325684 AS threshold, 21 AS count, 2 AS depth, 0.00043381688523280493 AS "Proba_0", -7.74288803633 AS "LogProba_0", 0.9995661831147672 AS "Proba_1", -0.000433911011001 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 4.75 AS threshold, 128 AS count, 1 AS depth, 7.652391117053436e-06 AS "Proba_0", -11.7804923946 AS "LogProba_0", 0.7703484491922298 AS "Proba_1", -0.260912335077 AS "LogProba_1", 0.2296438984166532 AS "Proba_2", -1.47122543762 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 73 AS count, 2 AS depth, 1.5139485815797754e-05 AS "Proba_0", -11.0982042725 AS "LogProba_0", 0.9999848605141842 AS "Proba_1", -1.51396004189e-05 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, 'Feature_2' AS feature, 5.149999618530273 AS threshold, 55 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5356422373892894 AS "Proba_1", -0.624288808324 AS "LogProba_1", 0.46435776261071066 AS "Proba_2", -0.767099983745 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.6337424156444679 AS "Proba_1", -0.456112691573 AS "LogProba_1", 0.36625758435553213 AS "Proba_2", -1.00441841073 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"AdaBoost_Estim_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0" AS "Proba_1_0", "DT_Output_1"."LogProba_0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1" AS "Proba_1_1", "DT_Output_1"."LogProba_1" AS "LogProba_1_1", CAST(NULL AS FLOAT) AS "Score_1_2", "DT_Output_1"."Proba_2" AS "Proba_1_2", "DT_Output_1"."LogProba_2" AS "LogProba_1_2", "DT_Output_1"."Decision" AS "Decision_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" <= 6.550000190734863) THEN CASE WHEN ("ADS"."Feature_1" <= 3.1500000953674316) THEN CASE WHEN ("ADS"."Feature_1" <= 2.75) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_2" <= 4.949999809265137) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS"."Feature_2" <= 5.050000190734863) THEN 9 ELSE 10 END END AS node_id_2 
FROM "INPUT_DATA" "ADS"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 6.550000190734863 AS threshold, 150 AS count, 0 AS depth, 1.503232230380113e-10 AS "Proba_0", -22.6182333199 AS "LogProba_0", 0.4999993409692001 AS "Proba_1", -0.693148498622 AS "LogProba_1", 0.5000006588804767 AS "Proba_2", -0.6931458628 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 3.1500000953674316 AS threshold, 120 AS count, 1 AS depth, 1.8532188533366425e-10 AS "Proba_0", -22.408926882 AS "LogProba_0", 0.38358940867421015 AS "Proba_1", -0.958182546692 AS "LogProba_1", 0.616410591140468 AS "Proba_2", -0.483841993431 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 2.75 AS threshold, 74 AS count, 2 AS depth, 5.862594463934469e-11 AS "Proba_0", -23.559843776 AS "LogProba_0", 0.2500036248433991 AS "Proba_1", -1.38627986185 AS "LogProba_1", 0.7499963750979749 AS "Proba_2", -0.287686905666 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, 1.0307612070327896e-11 AS "Proba_0", -25.2981384577 AS "LogProba_0", 0.5714151261163761 AS "Proba_1", -0.559639317509 AS "LogProba_1", 0.4285848738733164 AS "Proba_2", -0.847266488508 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, 9.620846661583827e-11 AS "Proba_0", -23.0645037516 AS "LogProba_0", 6.280815944640951e-06 AS "Proba_1", -11.9780106584 AS "LogProba_1", 0.999993719087847 AS "Proba_2", -6.28093187806e-06 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 46 AS count, 2 AS depth, 7.699349094703209e-10 AS "Proba_0", -20.9847151378 AS "LogProba_0", 0.9999942330041304 AS "Proba_1", -5.76701249881e-06 AS "LogProba_1", 5.766225934713155e-06 AS "Proba_2", -12.0634927756 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 3 AS depth, 7.699393491145639e-10 AS "Proba_0", -20.9847093716 AS "LogProba_0", 0.9999999992300607 AS "Proba_1", -7.69939334807e-10 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 30 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9999931998314303 AS "Proba_1", -6.80019169094e-06 AS "LogProba_1", 6.800168569643798e-06 AS "Proba_2", -11.8985631564 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"AdaBoost_Estim_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0" AS "Proba_2_0", "DT_Output_2"."LogProba_0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1" AS "Proba_2_1", "DT_Output_2"."LogProba_1" AS "LogProba_2_1", CAST(NULL AS FLOAT) AS "Score_2_2", "DT_Output_2"."Proba_2" AS "Proba_2_2", "DT_Output_2"."LogProba_2" AS "LogProba_2_2", "DT_Output_2"."Decision" AS "Decision_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.450000047683716) THEN 1 ELSE CASE WHEN ("ADS"."Feature_1" <= 2.25) THEN CASE WHEN ("ADS"."Feature_2" <= 4.75) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_3" <= 1.6500000953674316) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "INPUT_DATA" "ADS"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 150 AS count, 0 AS depth, 0.3333353929388543 AS "Proba_0", -1.09860610987 AS "LogProba_0", 0.33333544676425814 AS "Proba_1", -1.0986059484 AS "LogProba_1", 0.3333291602968876 AS "Proba_2", -1.09862480786 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 2.25 AS threshold, 100 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5000047148650942 AS "Proba_1", -0.693137750874 AS "LogProba_1", 0.4999952851349057 AS "Proba_2", -0.693156610335 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 4.75 AS threshold, 4 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 2.494021917360526e-06 AS "Proba_1", -12.9016139227 AS "LogProba_1", 0.9999975059780827 AS "Proba_2", -2.4940250274e-06 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 96 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9310922826790605 AS "Proba_1", -0.0713968845131 AS "LogProba_1", 0.06890771732093942 AS "Proba_2", -2.67498709967 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.975947538623068 AS "Proba_1", -0.0243464454245 AS "LogProba_1", 0.024052461376931993 AS "Proba_2", -3.72751794351 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.00038114179886285384 AS "Proba_1", -7.87233907658 AS "LogProba_1", 0.9996188582011373 AS "Proba_2", -0.000381214451859 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"AdaBoost_Estim_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0" AS "Proba_3_0", "DT_Output_3"."LogProba_0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1" AS "Proba_3_1", "DT_Output_3"."LogProba_1" AS "LogProba_3_1", CAST(NULL AS FLOAT) AS "Score_3_2", "DT_Output_3"."Proba_2" AS "Proba_3_2", "DT_Output_3"."LogProba_2" AS "LogProba_3_2", "DT_Output_3"."Decision" AS "Decision_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_1" <= 2.75) THEN CASE WHEN ("ADS"."Feature_2" <= 5.199999809265137) THEN CASE WHEN ("ADS"."Feature_1" <= 2.3499999046325684) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_2" <= 5.050000190734863) THEN CASE WHEN ("ADS"."Feature_3" <= 1.75) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM "INPUT_DATA" "ADS"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, 2.75 AS threshold, 150 AS count, 0 AS depth, 1.0195639182009997e-05 AS "Proba_0", -11.4935504603 AS "LogProba_0", 0.49999018174346294 AS "Proba_1", -0.693166817266 AS "LogProba_1", 0.49999962261735503 AS "Proba_2", -0.693147935326 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 5.199999809265137 AS threshold, 33 AS count, 1 AS depth, 2.0635814849537646e-05 AS "Proba_0", -10.7884824068 AS "LogProba_0", 0.9997912333593593 AS "Proba_1", -0.000208788435429 AS "LogProba_1", 0.00018813082579112355 AS "Proba_2", -8.57837295528 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 2.3499999046325684 AS threshold, 29 AS count, 2 AS depth, 2.0638836128409553e-05 AS "Proba_0", -10.7883360081 AS "LogProba_0", 0.9999376122715408 AS "Proba_1", -6.23896746545e-05 AS "LogProba_1", 4.1748892330915465e-05 AS "Proba_2", -10.083837638 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.47153419053482293 AS "Proba_0", -0.751763665148 AS "LogProba_0", 0.056973594903689584 AS "Proba_1", -2.86516736578 AS "LogProba_1", 0.4714922145614874 AS "Proba_2", -0.75185268911 AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9999788871824299 AS "Proba_1", -2.11130404488e-05 AS "LogProba_1", 2.1112817570065627e-05 AS "Proba_2", -10.7656302341 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 117 AS count, 1 AS depth, 1.389785557611634e-06 AS "Proba_0", -13.4863610978 AS "LogProba_0", 0.07842879791167096 AS "Proba_1", -2.54556409877 AS "LogProba_1", 0.9215698123027715 AS "Proba_2", -0.0816767453249 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 82 AS count, 2 AS depth, 1.5524208327575564e-05 AS "Proba_0", -11.0731099248 AS "LogProba_0", 0.8760668082883741 AS "Proba_1", -0.132312925784 AS "LogProba_1", 0.1239176675032982 AS "Proba_2", -2.08813790565 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 77 AS count, 3 AS depth, 2.0622514568367137e-05 AS "Proba_0", -10.7891271388 AS "LogProba_0", 0.9999793774854315 AS "Proba_1", -2.06227272154e-05 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.4987562961757144 AS "Proba_1", -0.695637686947 AS "LogProba_1", 0.5012437038242856 AS "Proba_2", -0.690662861389 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4"."Proba_0" AS "Proba_0", "DT_node_data_4"."LogProba_0" AS "LogProba_0", "DT_node_data_4"."Proba_1" AS "Proba_1", "DT_node_data_4"."LogProba_1" AS "LogProba_1", "DT_node_data_4"."Proba_2" AS "Proba_2", "DT_node_data_4"."LogProba_2" AS "LogProba_2", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"AdaBoost_Estim_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0" AS "Proba_4_0", "DT_Output_4"."LogProba_0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1" AS "Proba_4_1", "DT_Output_4"."LogProba_1" AS "LogProba_4_1", CAST(NULL AS FLOAT) AS "Score_4_2", "DT_Output_4"."Proba_2" AS "Proba_4_2", "DT_Output_4"."LogProba_2" AS "LogProba_4_2", "DT_Output_4"."Decision" AS "Decision_4" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.450000047683716) THEN 1 ELSE CASE WHEN ("ADS"."Feature_1" <= 2.25) THEN CASE WHEN ("ADS"."Feature_2" <= 4.75) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_3" <= 1.6500000953674316) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "INPUT_DATA" "ADS"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 150 AS count, 0 AS depth, 0.327754285672299 AS "Proba_0", -1.11549108038 AS "LogProba_0", 0.3363350809716314 AS "Proba_1", -1.08964735116 AS "LogProba_1", 0.3359106333560696 AS "Proba_2", -1.09091012655 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 2.25 AS threshold, 100 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5003156938054908 AS "Proba_1", -0.69251599219 AS "LogProba_1", 0.4996843061945093 AS "Proba_2", -0.69377876758 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 4.75 AS threshold, 4 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 2.0639220357442356e-05 AS "Proba_1", -10.7883173914 AS "LogProba_1", 0.9999793607796424 AS "Proba_2", -2.06394333492e-05 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 96 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9751179849757127 AS "Proba_1", -0.0251968050739 AS "LogProba_1", 0.02488201502428743 AS "Proba_2", -3.69361002467 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9999961868693981 AS "Proba_1", -3.81313787194e-06 AS "LogProba_1", 3.8131306019442858e-06 AS "Proba_2", -12.4770600259 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.27238183432818963 AS "Proba_1", -1.30055039442 AS "LogProba_1", 0.7276181656718103 AS "Proba_2", -0.317978866086 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5"."Proba_0" AS "Proba_0", "DT_node_data_5"."LogProba_0" AS "LogProba_0", "DT_node_data_5"."Proba_1" AS "Proba_1", "DT_node_data_5"."LogProba_1" AS "LogProba_1", "DT_node_data_5"."Proba_2" AS "Proba_2", "DT_node_data_5"."LogProba_2" AS "LogProba_2", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"AdaBoost_Estim_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0" AS "Proba_5_0", "DT_Output_5"."LogProba_0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1" AS "Proba_5_1", "DT_Output_5"."LogProba_1" AS "LogProba_5_1", CAST(NULL AS FLOAT) AS "Score_5_2", "DT_Output_5"."Proba_2" AS "Proba_5_2", "DT_Output_5"."LogProba_2" AS "LogProba_5_2", "DT_Output_5"."Decision" AS "Decision_5" 
FROM "DT_Output_5"), 
"AdaBoost_Join_CTE" AS 
(SELECT "AdaBoost_Estim_0".join_key_0 AS join_key_0, "AdaBoost_Estim_0"."Score_0_0" AS "Score_0_0", "AdaBoost_Estim_0"."Proba_0_0" AS "Proba_0_0", "AdaBoost_Estim_0"."LogProba_0_0" AS "LogProba_0_0", "AdaBoost_Estim_0"."Score_0_1" AS "Score_0_1", "AdaBoost_Estim_0"."Proba_0_1" AS "Proba_0_1", "AdaBoost_Estim_0"."LogProba_0_1" AS "LogProba_0_1", "AdaBoost_Estim_0"."Score_0_2" AS "Score_0_2", "AdaBoost_Estim_0"."Proba_0_2" AS "Proba_0_2", "AdaBoost_Estim_0"."LogProba_0_2" AS "LogProba_0_2", "AdaBoost_Estim_0"."Decision_0" AS "Decision_0", "AdaBoost_Estim_1".join_key_1 AS join_key_1, "AdaBoost_Estim_1"."Score_1_0" AS "Score_1_0", "AdaBoost_Estim_1"."Proba_1_0" AS "Proba_1_0", "AdaBoost_Estim_1"."LogProba_1_0" AS "LogProba_1_0", "AdaBoost_Estim_1"."Score_1_1" AS "Score_1_1", "AdaBoost_Estim_1"."Proba_1_1" AS "Proba_1_1", "AdaBoost_Estim_1"."LogProba_1_1" AS "LogProba_1_1", "AdaBoost_Estim_1"."Score_1_2" AS "Score_1_2", "AdaBoost_Estim_1"."Proba_1_2" AS "Proba_1_2", "AdaBoost_Estim_1"."LogProba_1_2" AS "LogProba_1_2", "AdaBoost_Estim_1"."Decision_1" AS "Decision_1", "AdaBoost_Estim_2".join_key_2 AS join_key_2, "AdaBoost_Estim_2"."Score_2_0" AS "Score_2_0", "AdaBoost_Estim_2"."Proba_2_0" AS "Proba_2_0", "AdaBoost_Estim_2"."LogProba_2_0" AS "LogProba_2_0", "AdaBoost_Estim_2"."Score_2_1" AS "Score_2_1", "AdaBoost_Estim_2"."Proba_2_1" AS "Proba_2_1", "AdaBoost_Estim_2"."LogProba_2_1" AS "LogProba_2_1", "AdaBoost_Estim_2"."Score_2_2" AS "Score_2_2", "AdaBoost_Estim_2"."Proba_2_2" AS "Proba_2_2", "AdaBoost_Estim_2"."LogProba_2_2" AS "LogProba_2_2", "AdaBoost_Estim_2"."Decision_2" AS "Decision_2", "AdaBoost_Estim_3".join_key_3 AS join_key_3, "AdaBoost_Estim_3"."Score_3_0" AS "Score_3_0", "AdaBoost_Estim_3"."Proba_3_0" AS "Proba_3_0", "AdaBoost_Estim_3"."LogProba_3_0" AS "LogProba_3_0", "AdaBoost_Estim_3"."Score_3_1" AS "Score_3_1", "AdaBoost_Estim_3"."Proba_3_1" AS "Proba_3_1", "AdaBoost_Estim_3"."LogProba_3_1" AS "LogProba_3_1", "AdaBoost_Estim_3"."Score_3_2" AS "Score_3_2", "AdaBoost_Estim_3"."Proba_3_2" AS "Proba_3_2", "AdaBoost_Estim_3"."LogProba_3_2" AS "LogProba_3_2", "AdaBoost_Estim_3"."Decision_3" AS "Decision_3", "AdaBoost_Estim_4".join_key_4 AS join_key_4, "AdaBoost_Estim_4"."Score_4_0" AS "Score_4_0", "AdaBoost_Estim_4"."Proba_4_0" AS "Proba_4_0", "AdaBoost_Estim_4"."LogProba_4_0" AS "LogProba_4_0", "AdaBoost_Estim_4"."Score_4_1" AS "Score_4_1", "AdaBoost_Estim_4"."Proba_4_1" AS "Proba_4_1", "AdaBoost_Estim_4"."LogProba_4_1" AS "LogProba_4_1", "AdaBoost_Estim_4"."Score_4_2" AS "Score_4_2", "AdaBoost_Estim_4"."Proba_4_2" AS "Proba_4_2", "AdaBoost_Estim_4"."LogProba_4_2" AS "LogProba_4_2", "AdaBoost_Estim_4"."Decision_4" AS "Decision_4", "AdaBoost_Estim_5".join_key_5 AS join_key_5, "AdaBoost_Estim_5"."Score_5_0" AS "Score_5_0", "AdaBoost_Estim_5"."Proba_5_0" AS "Proba_5_0", "AdaBoost_Estim_5"."LogProba_5_0" AS "LogProba_5_0", "AdaBoost_Estim_5"."Score_5_1" AS "Score_5_1", "AdaBoost_Estim_5"."Proba_5_1" AS "Proba_5_1", "AdaBoost_Estim_5"."LogProba_5_1" AS "LogProba_5_1", "AdaBoost_Estim_5"."Score_5_2" AS "Score_5_2", "AdaBoost_Estim_5"."Proba_5_2" AS "Proba_5_2", "AdaBoost_Estim_5"."LogProba_5_2" AS "LogProba_5_2", "AdaBoost_Estim_5"."Decision_5" AS "Decision_5" 
FROM "AdaBoost_Estim_0" LEFT OUTER JOIN "AdaBoost_Estim_1" ON "AdaBoost_Estim_0".join_key_0 = "AdaBoost_Estim_1".join_key_1 LEFT OUTER JOIN "AdaBoost_Estim_2" ON "AdaBoost_Estim_2".join_key_2 = "AdaBoost_Estim_1".join_key_1 LEFT OUTER JOIN "AdaBoost_Estim_3" ON "AdaBoost_Estim_3".join_key_3 = "AdaBoost_Estim_2".join_key_2 LEFT OUTER JOIN "AdaBoost_Estim_4" ON "AdaBoost_Estim_4".join_key_4 = "AdaBoost_Estim_3".join_key_3 LEFT OUTER JOIN "AdaBoost_Estim_5" ON "AdaBoost_Estim_5".join_key_5 = "AdaBoost_Estim_4".join_key_4), 
"AdaBoost_AVG_Scores_BN" AS 
(SELECT "AdaBoost_Join_CTE".join_key_0 AS "KEY", (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 AS "Score_0", 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) AS "Proba_0", (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 AS "Score_1", 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) AS "Proba_1", (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 + (2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3)) / 6.0 AS "Score_2", 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) + 2.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END) / 3) AS "Proba_2" 
FROM "AdaBoost_Join_CTE"), 
"AdaBoost_AVG_Scores" AS 
(SELECT "AdaBoost_AVG_Scores_BN"."KEY" AS "KEY", "AdaBoost_AVG_Scores_BN"."Score_0" AS "Score_0", exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 2) / (exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 2) + exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 2) + exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 2)) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0", "AdaBoost_AVG_Scores_BN"."Score_1" AS "Score_1", exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 2) / (exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 2) + exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 2) + exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 2)) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1", "AdaBoost_AVG_Scores_BN"."Score_2" AS "Score_2", exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 2) / (exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 2) + exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 2) + exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 2)) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2" 
FROM "AdaBoost_AVG_Scores_BN"), 
orig_cte AS 
(SELECT "AdaBoost_AVG_Scores"."KEY" AS "KEY", "AdaBoost_AVG_Scores"."Score_0" AS "Score_0", "AdaBoost_AVG_Scores"."Score_1" AS "Score_1", "AdaBoost_AVG_Scores"."Score_2" AS "Score_2", "AdaBoost_AVG_Scores"."Proba_0" AS "Proba_0", "AdaBoost_AVG_Scores"."Proba_1" AS "Proba_1", "AdaBoost_AVG_Scores"."Proba_2" AS "Proba_2", "AdaBoost_AVG_Scores"."LogProba_0" AS "LogProba_0", "AdaBoost_AVG_Scores"."LogProba_1" AS "LogProba_1", "AdaBoost_AVG_Scores"."LogProba_2" AS "LogProba_2", CAST(NULL AS FLOAT) AS "Decision" 
FROM "AdaBoost_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte