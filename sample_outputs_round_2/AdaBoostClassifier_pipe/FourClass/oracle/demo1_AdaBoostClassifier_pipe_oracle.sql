-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0241458622729 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.139439406594 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.222331574692 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0101544025509 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0456198588601 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.173128017581 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.0480561392491 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.106943445469 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.07440048468 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.148142285366 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN -0.0429366939158 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.182769515569 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.101206171831 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.0347984360257 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0775318491735 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.562440623829 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0475835364301 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN -0.149205221711 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.15843599131 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.0238708238384 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.0241458622729 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.139439406594 AS impute_3, "ADS_imp_1_OUT".impute_4 - 0.222331574692 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.0101544025509 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.0456198588601 AS impute_6, "ADS_imp_1_OUT".impute_7 - -0.173128017581 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.0480561392491 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.106943445469 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.07440048468 AS impute_10, "ADS_imp_1_OUT".impute_11 - -0.148142285366 AS impute_11, "ADS_imp_1_OUT".impute_12 - -0.0429366939158 AS impute_12, "ADS_imp_1_OUT".impute_13 - 0.182769515569 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.101206171831 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.0347984360257 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0775318491735 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.562440623829 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.0475835364301 AS impute_18, "ADS_imp_1_OUT".impute_19 - -0.149205221711 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.15843599131 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.0238708238384 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.022646344232 + "CenteredDataForPCA".impute_3 * 0.0048766713378 + "CenteredDataForPCA".impute_4 * 0.00965911616609 + "CenteredDataForPCA".impute_5 * 0.493813568065 + "CenteredDataForPCA".impute_6 * -0.0269366341313 + "CenteredDataForPCA".impute_7 * 0.00450509997361 + "CenteredDataForPCA".impute_8 * 0.024396643536 + "CenteredDataForPCA".impute_9 * -0.00522684268396 + "CenteredDataForPCA".impute_10 * 0.0437000524751 + "CenteredDataForPCA".impute_11 * -0.475981032207 + "CenteredDataForPCA".impute_12 * -0.480738166873 + "CenteredDataForPCA".impute_13 * 0.0355237414129 + "CenteredDataForPCA".impute_14 * -0.033669665742 + "CenteredDataForPCA".impute_15 * -0.000170911534135 + "CenteredDataForPCA".impute_16 * -0.146775687459 + "CenteredDataForPCA".impute_17 * 0.236011319239 + "CenteredDataForPCA".impute_18 * -0.0485033665226 + "CenteredDataForPCA".impute_19 * -0.0716033118565 + "CenteredDataForPCA".impute_20 * 0.455454005666 + "CenteredDataForPCA".impute_21 * -0.00387124093953 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.0246811205677 + "CenteredDataForPCA".impute_3 * 0.0217094702248 + "CenteredDataForPCA".impute_4 * 0.0952027937363 + "CenteredDataForPCA".impute_5 * 0.0723600211986 + "CenteredDataForPCA".impute_6 * 0.0487429490316 + "CenteredDataForPCA".impute_7 * 0.0443459911583 + "CenteredDataForPCA".impute_8 * -0.0952888443589 + "CenteredDataForPCA".impute_9 * 0.0102602123974 + "CenteredDataForPCA".impute_10 * 0.0113761689752 + "CenteredDataForPCA".impute_11 * -0.448000268124 + "CenteredDataForPCA".impute_12 * 0.381960780413 + "CenteredDataForPCA".impute_13 * -0.0141171063663 + "CenteredDataForPCA".impute_14 * -0.160414272065 + "CenteredDataForPCA".impute_15 * -0.0563111114451 + "CenteredDataForPCA".impute_16 * 0.71814691537 + "CenteredDataForPCA".impute_17 * -0.200775324258 + "CenteredDataForPCA".impute_18 * 0.00858480786146 + "CenteredDataForPCA".impute_19 * 0.00939263504566 + "CenteredDataForPCA".impute_20 * 0.189625954923 + "CenteredDataForPCA".impute_21 * 0.0556417531288 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.11460717133 + "CenteredDataForPCA".impute_3 * 0.0533386281036 + "CenteredDataForPCA".impute_4 * -0.117715206738 + "CenteredDataForPCA".impute_5 * 0.35689716229 + "CenteredDataForPCA".impute_6 * 0.0473825851348 + "CenteredDataForPCA".impute_7 * 0.261690744203 + "CenteredDataForPCA".impute_8 * -0.0771741733446 + "CenteredDataForPCA".impute_9 * 0.0495800719403 + "CenteredDataForPCA".impute_10 * -0.107644925135 + "CenteredDataForPCA".impute_11 * -0.312478332791 + "CenteredDataForPCA".impute_12 * 0.187961376958 + "CenteredDataForPCA".impute_13 * -0.0997706358746 + "CenteredDataForPCA".impute_14 * 0.157824629213 + "CenteredDataForPCA".impute_15 * 0.0630227549969 + "CenteredDataForPCA".impute_16 * -0.342416010944 + "CenteredDataForPCA".impute_17 * -0.49023301018 + "CenteredDataForPCA".impute_18 * -0.0621420115595 + "CenteredDataForPCA".impute_19 * -0.273665190292 + "CenteredDataForPCA".impute_20 * -0.378896772072 + "CenteredDataForPCA".impute_21 * -0.0189236318632 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.176368902067 + "CenteredDataForPCA".impute_3 * -0.0600071632184 + "CenteredDataForPCA".impute_4 * 0.0053524410031 + "CenteredDataForPCA".impute_5 * 0.0491775138112 + "CenteredDataForPCA".impute_6 * -0.280972970624 + "CenteredDataForPCA".impute_7 * -0.0958820591101 + "CenteredDataForPCA".impute_8 * 0.229434695953 + "CenteredDataForPCA".impute_9 * -0.292747482095 + "CenteredDataForPCA".impute_10 * -0.0545909297622 + "CenteredDataForPCA".impute_11 * 0.147797040921 + "CenteredDataForPCA".impute_12 * -0.19930708915 + "CenteredDataForPCA".impute_13 * 0.317942581761 + "CenteredDataForPCA".impute_14 * -0.0323568332767 + "CenteredDataForPCA".impute_15 * -0.0616155304687 + "CenteredDataForPCA".impute_16 * 0.0868854420115 + "CenteredDataForPCA".impute_17 * -0.463654844301 + "CenteredDataForPCA".impute_18 * -0.443055637978 + "CenteredDataForPCA".impute_19 * 0.00604567261241 + "CenteredDataForPCA".impute_20 * 0.0544871929269 + "CenteredDataForPCA".impute_21 * 0.37955046459 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.359932994236 + "CenteredDataForPCA".impute_3 * 0.119881944427 + "CenteredDataForPCA".impute_4 * 0.160701878927 + "CenteredDataForPCA".impute_5 * -0.0884687115993 + "CenteredDataForPCA".impute_6 * 0.112099195904 + "CenteredDataForPCA".impute_7 * 0.173886566974 + "CenteredDataForPCA".impute_8 * 0.210583431605 + "CenteredDataForPCA".impute_9 * -0.277026117597 + "CenteredDataForPCA".impute_10 * -0.566053497621 + "CenteredDataForPCA".impute_11 * -0.00988155280628 + "CenteredDataForPCA".impute_12 * 0.0789252269035 + "CenteredDataForPCA".impute_13 * -0.0905349024228 + "CenteredDataForPCA".impute_14 * -0.0778820652936 + "CenteredDataForPCA".impute_15 * -0.207299363403 + "CenteredDataForPCA".impute_16 * 0.00399990551447 + "CenteredDataForPCA".impute_17 * 0.288882816654 + "CenteredDataForPCA".impute_18 * -0.391470443578 + "CenteredDataForPCA".impute_19 * -0.149456031493 + "CenteredDataForPCA".impute_20 * 0.0134484807688 + "CenteredDataForPCA".impute_21 * -0.12376658373 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.0787324513608 + "CenteredDataForPCA".impute_3 * 0.0484954026972 + "CenteredDataForPCA".impute_4 * -0.0856934186474 + "CenteredDataForPCA".impute_5 * -0.0490787045987 + "CenteredDataForPCA".impute_6 * -0.0363940052889 + "CenteredDataForPCA".impute_7 * 0.446810053026 + "CenteredDataForPCA".impute_8 * 0.117888555749 + "CenteredDataForPCA".impute_9 * -0.300912578292 + "CenteredDataForPCA".impute_10 * 0.397195474096 + "CenteredDataForPCA".impute_11 * -0.128936379182 + "CenteredDataForPCA".impute_12 * 0.250747990136 + "CenteredDataForPCA".impute_13 * 0.121043435348 + "CenteredDataForPCA".impute_14 * -0.272277174143 + "CenteredDataForPCA".impute_15 * 0.202802393279 + "CenteredDataForPCA".impute_16 * -0.133568675233 + "CenteredDataForPCA".impute_17 * 0.374284890429 + "CenteredDataForPCA".impute_18 * -0.0532668229734 + "CenteredDataForPCA".impute_19 * -0.0217348822732 + "CenteredDataForPCA".impute_20 * -0.146489380396 + "CenteredDataForPCA".impute_21 * 0.355542172478 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.14283168526 + "CenteredDataForPCA".impute_3 * -0.21271373567 + "CenteredDataForPCA".impute_4 * -0.139872353129 + "CenteredDataForPCA".impute_5 * -0.0769186127647 + "CenteredDataForPCA".impute_6 * 0.0876521147868 + "CenteredDataForPCA".impute_7 * -0.444721602347 + "CenteredDataForPCA".impute_8 * -0.189045616327 + "CenteredDataForPCA".impute_9 * -0.126417042852 + "CenteredDataForPCA".impute_10 * -0.096770006171 + "CenteredDataForPCA".impute_11 * -0.0357523759899 + "CenteredDataForPCA".impute_12 * 0.116778983983 + "CenteredDataForPCA".impute_13 * -0.00960792063088 + "CenteredDataForPCA".impute_14 * 0.123601004979 + "CenteredDataForPCA".impute_15 * 0.298524921815 + "CenteredDataForPCA".impute_16 * 0.0581023359158 + "CenteredDataForPCA".impute_17 * 0.209333470733 + "CenteredDataForPCA".impute_18 * -0.0813332494113 + "CenteredDataForPCA".impute_19 * -0.664195473859 + "CenteredDataForPCA".impute_20 * 0.00356810892125 + "CenteredDataForPCA".impute_21 * 0.167167672485 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.118700706037 + "CenteredDataForPCA".impute_3 * 0.263568778883 + "CenteredDataForPCA".impute_4 * 0.0733561648042 + "CenteredDataForPCA".impute_5 * -0.0354768768547 + "CenteredDataForPCA".impute_6 * 0.0684361911556 + "CenteredDataForPCA".impute_7 * 0.109116347003 + "CenteredDataForPCA".impute_8 * -0.0675766364574 + "CenteredDataForPCA".impute_9 * -0.252556130123 + "CenteredDataForPCA".impute_10 * 0.0885547201455 + "CenteredDataForPCA".impute_11 * 0.174138454048 + "CenteredDataForPCA".impute_12 * -0.184538863296 + "CenteredDataForPCA".impute_13 * 0.0750461425975 + "CenteredDataForPCA".impute_14 * -0.133666010026 + "CenteredDataForPCA".impute_15 * -0.429464719747 + "CenteredDataForPCA".impute_16 * 0.0333613711486 + "CenteredDataForPCA".impute_17 * -0.15087717857 + "CenteredDataForPCA".impute_18 * 0.527203440082 + "CenteredDataForPCA".impute_19 * -0.463200222144 + "CenteredDataForPCA".impute_20 * 0.0800053809866 + "CenteredDataForPCA".impute_21 * 0.148074083811 AS anoova_9, "CenteredDataForPCA".impute_2 * 0.246183162371 + "CenteredDataForPCA".impute_3 * -0.563791248816 + "CenteredDataForPCA".impute_4 * 0.289126982211 + "CenteredDataForPCA".impute_5 * 0.0628000222664 + "CenteredDataForPCA".impute_6 * -0.238004563483 + "CenteredDataForPCA".impute_7 * -0.0332028480774 + "CenteredDataForPCA".impute_8 * 0.280976361877 + "CenteredDataForPCA".impute_9 * -0.106639845944 + "CenteredDataForPCA".impute_10 * -0.0853287695251 + "CenteredDataForPCA".impute_11 * -0.130971224559 + "CenteredDataForPCA".impute_12 * 0.154795447003 + "CenteredDataForPCA".impute_13 * 0.174276183879 + "CenteredDataForPCA".impute_14 * -0.214654282632 + "CenteredDataForPCA".impute_15 * -0.174190217275 + "CenteredDataForPCA".impute_16 * -0.113351529586 + "CenteredDataForPCA".impute_17 * 0.0232764962157 + "CenteredDataForPCA".impute_18 * 0.259839280449 + "CenteredDataForPCA".impute_19 * -0.0995562356696 + "CenteredDataForPCA".impute_20 * -0.144774336636 + "CenteredDataForPCA".impute_21 * -0.344908406308 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.293353589854 + "CenteredDataForPCA".impute_3 * -0.475769643422 + "CenteredDataForPCA".impute_4 * 0.044297818988 + "CenteredDataForPCA".impute_5 * -0.0272505767553 + "CenteredDataForPCA".impute_6 * 0.141890757059 + "CenteredDataForPCA".impute_7 * 0.0549186619369 + "CenteredDataForPCA".impute_8 * 0.120560560528 + "CenteredDataForPCA".impute_9 * 0.159189025325 + "CenteredDataForPCA".impute_10 * 0.381984359062 + "CenteredDataForPCA".impute_11 * -0.00535914278665 + "CenteredDataForPCA".impute_12 * 0.0230256267489 + "CenteredDataForPCA".impute_13 * -0.14385451951 + "CenteredDataForPCA".impute_14 * 0.387221840999 + "CenteredDataForPCA".impute_15 * -0.446929869824 + "CenteredDataForPCA".impute_16 * 0.0284016076135 + "CenteredDataForPCA".impute_17 * 0.0708229068892 + "CenteredDataForPCA".impute_18 * -0.186758709392 + "CenteredDataForPCA".impute_19 * -0.0685353603328 + "CenteredDataForPCA".impute_20 * 0.0170944023423 + "CenteredDataForPCA".impute_21 * 0.243545036855 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.0112811654975 + "CenteredDataForPCA".impute_3 * -0.256434834523 + "CenteredDataForPCA".impute_4 * -0.137087016074 + "CenteredDataForPCA".impute_5 * 0.0741652365216 + "CenteredDataForPCA".impute_6 * 0.434627049653 + "CenteredDataForPCA".impute_7 * -0.0236668458166 + "CenteredDataForPCA".impute_8 * -0.0432702987425 + "CenteredDataForPCA".impute_9 * -0.314881333826 + "CenteredDataForPCA".impute_10 * -0.378335701875 + "CenteredDataForPCA".impute_11 * -0.0915710928086 + "CenteredDataForPCA".impute_12 * 0.00988444163414 + "CenteredDataForPCA".impute_13 * 0.160892351319 + "CenteredDataForPCA".impute_14 * 0.194557781898 + "CenteredDataForPCA".impute_15 * 0.0283347232999 + "CenteredDataForPCA".impute_16 * -0.0496589483537 + "CenteredDataForPCA".impute_17 * 0.00349646212002 + "CenteredDataForPCA".impute_18 * 0.353459306608 + "CenteredDataForPCA".impute_19 * 0.398198372809 + "CenteredDataForPCA".impute_20 * -0.0124599298977 + "CenteredDataForPCA".impute_21 * 0.342119124806 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.0562154171423 + "CenteredDataForPCA".impute_3 * 0.111658601667 + "CenteredDataForPCA".impute_4 * -0.450149277686 + "CenteredDataForPCA".impute_5 * 0.0678914502777 + "CenteredDataForPCA".impute_6 * -0.349937613953 + "CenteredDataForPCA".impute_7 * -0.426975083625 + "CenteredDataForPCA".impute_8 * 0.0339001110059 + "CenteredDataForPCA".impute_9 * -0.0775731914907 + "CenteredDataForPCA".impute_10 * -0.0474007702745 + "CenteredDataForPCA".impute_11 * -0.165674418405 + "CenteredDataForPCA".impute_12 * 0.164303326554 + "CenteredDataForPCA".impute_13 * -0.319902706911 + "CenteredDataForPCA".impute_14 * -0.223826330397 + "CenteredDataForPCA".impute_15 * -0.389925881153 + "CenteredDataForPCA".impute_16 * -0.124876433564 + "CenteredDataForPCA".impute_17 * 0.107478704203 + "CenteredDataForPCA".impute_18 * 0.055436944968 + "CenteredDataForPCA".impute_19 * 0.173120408484 + "CenteredDataForPCA".impute_20 * -0.129973875891 + "CenteredDataForPCA".impute_21 * 0.164152869366 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.0300523917034 + "CenteredDataForPCA".impute_3 * 0.306155081205 + "CenteredDataForPCA".impute_4 * 0.0502126391614 + "CenteredDataForPCA".impute_5 * 0.0166366655222 + "CenteredDataForPCA".impute_6 * -0.00112696296569 + "CenteredDataForPCA".impute_7 * -0.160553007963 + "CenteredDataForPCA".impute_8 * 0.749191010838 + "CenteredDataForPCA".impute_9 * -0.0787289872526 + "CenteredDataForPCA".impute_10 * 0.088940833997 + "CenteredDataForPCA".impute_11 * -0.088844016934 + "CenteredDataForPCA".impute_12 * 0.0813040037045 + "CenteredDataForPCA".impute_13 * -0.143004346231 + "CenteredDataForPCA".impute_14 * 0.405741411665 + "CenteredDataForPCA".impute_15 * 0.201648676648 + "CenteredDataForPCA".impute_16 * 0.0915676736903 + "CenteredDataForPCA".impute_17 * -0.00678367897121 + "CenteredDataForPCA".impute_18 * 0.224181177798 + "CenteredDataForPCA".impute_19 * -0.045891196764 + "CenteredDataForPCA".impute_20 * 0.011829851679 + "CenteredDataForPCA".impute_21 * -0.0147467760189 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.046124212021 + "CenteredDataForPCA".impute_3 * 0.11590720824 + "CenteredDataForPCA".impute_4 * -0.361594635502 + "CenteredDataForPCA".impute_5 * -0.0408713540234 + "CenteredDataForPCA".impute_6 * -0.0236499482115 + "CenteredDataForPCA".impute_7 * 0.0549926684595 + "CenteredDataForPCA".impute_8 * 0.168434387805 + "CenteredDataForPCA".impute_9 * 0.498763868958 + "CenteredDataForPCA".impute_10 * -0.169214866744 + "CenteredDataForPCA".impute_11 * -0.0566100869771 + "CenteredDataForPCA".impute_12 * 0.11017588201 + "CenteredDataForPCA".impute_13 * 0.674326569886 + "CenteredDataForPCA".impute_14 * 0.056504836461 + "CenteredDataForPCA".impute_15 * -0.163919355885 + "CenteredDataForPCA".impute_16 * 0.0292952760655 + "CenteredDataForPCA".impute_17 * 0.158713491988 + "CenteredDataForPCA".impute_18 * 0.0347623568602 + "CenteredDataForPCA".impute_19 * -0.118989148685 + "CenteredDataForPCA".impute_20 * -0.0148708833134 + "CenteredDataForPCA".impute_21 * 0.030098737186 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.567565565752 + "CenteredDataForPCA".impute_3 * -0.161504538509 + "CenteredDataForPCA".impute_4 * -0.0313065165386 + "CenteredDataForPCA".impute_5 * 0.0453559755083 + "CenteredDataForPCA".impute_6 * 0.261266445984 + "CenteredDataForPCA".impute_7 * -0.272083927916 + "CenteredDataForPCA".impute_8 * 0.252144269365 + "CenteredDataForPCA".impute_9 * 0.107519364889 + "CenteredDataForPCA".impute_10 * 0.136166575631 + "CenteredDataForPCA".impute_11 * 0.0513416909396 + "CenteredDataForPCA".impute_12 * -0.0827184422966 + "CenteredDataForPCA".impute_13 * 0.0717182193093 + "CenteredDataForPCA".impute_14 * -0.521789164629 + "CenteredDataForPCA".impute_15 * 0.296177259651 + "CenteredDataForPCA".impute_16 * -0.0494651803812 + "CenteredDataForPCA".impute_17 * -0.182198332039 + "CenteredDataForPCA".impute_18 * 0.0378350928077 + "CenteredDataForPCA".impute_19 * -0.00723786012144 + "CenteredDataForPCA".impute_20 * -0.0219008952637 + "CenteredDataForPCA".impute_21 * 0.0238068700617 AS anoova_16, "CenteredDataForPCA".impute_2 * 0.0928477938076 + "CenteredDataForPCA".impute_3 * -0.0181423299125 + "CenteredDataForPCA".impute_4 * -0.504616653846 + "CenteredDataForPCA".impute_5 * -0.00553719312129 + "CenteredDataForPCA".impute_6 * 0.32337209467 + "CenteredDataForPCA".impute_7 * -0.00838069363927 + "CenteredDataForPCA".impute_8 * 0.0340790008128 + "CenteredDataForPCA".impute_9 * -0.395436608595 + "CenteredDataForPCA".impute_10 * 0.279755908404 + "CenteredDataForPCA".impute_11 * 0.01631309588 + "CenteredDataForPCA".impute_12 * -0.0185910002204 + "CenteredDataForPCA".impute_13 * 0.126627693429 + "CenteredDataForPCA".impute_14 * 0.0376869414606 + "CenteredDataForPCA".impute_15 * -0.132461002345 + "CenteredDataForPCA".impute_16 * 0.0867378463969 + "CenteredDataForPCA".impute_17 * -0.0867904671648 + "CenteredDataForPCA".impute_18 * -0.172812834202 + "CenteredDataForPCA".impute_19 * 0.00789863153642 + "CenteredDataForPCA".impute_20 * 0.0395733370757 + "CenteredDataForPCA".impute_21 * -0.560165707177 AS anoova_17, "CenteredDataForPCA".impute_2 * 0.245632499794 + "CenteredDataForPCA".impute_3 * 0.312301256144 + "CenteredDataForPCA".impute_4 * 0.429965897857 + "CenteredDataForPCA".impute_5 * 0.0771863900454 + "CenteredDataForPCA".impute_6 * 0.437902211309 + "CenteredDataForPCA".impute_7 * -0.38556170157 + "CenteredDataForPCA".impute_8 * -0.047333419413 + "CenteredDataForPCA".impute_9 * 0.0484483433289 + "CenteredDataForPCA".impute_10 * 0.170614691144 + "CenteredDataForPCA".impute_11 * -0.12255442522 + "CenteredDataForPCA".impute_12 * 0.144793379643 + "CenteredDataForPCA".impute_13 * 0.190728276928 + "CenteredDataForPCA".impute_14 * -0.0877654338904 + "CenteredDataForPCA".impute_15 * -0.257029784092 + "CenteredDataForPCA".impute_16 * -0.209984382481 + "CenteredDataForPCA".impute_17 * 0.0472957932567 + "CenteredDataForPCA".impute_18 * -0.200797440307 + "CenteredDataForPCA".impute_19 * 0.0784496895009 + "CenteredDataForPCA".impute_20 * -0.189452016782 + "CenteredDataForPCA".impute_21 * 0.0486365733934 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.490233281781 + "CenteredDataForPCA".impute_3 * 0.0898097210072 + "CenteredDataForPCA".impute_4 * 0.19518989232 + "CenteredDataForPCA".impute_5 * 0.0284221614408 + "CenteredDataForPCA".impute_6 * -0.369006361648 + "CenteredDataForPCA".impute_7 * -0.205506112184 + "CenteredDataForPCA".impute_8 * -0.282914808643 + "CenteredDataForPCA".impute_9 * -0.312294643847 + "CenteredDataForPCA".impute_10 * 0.164225768306 + "CenteredDataForPCA".impute_11 * -0.102792818457 + "CenteredDataForPCA".impute_12 * 0.108702222324 + "CenteredDataForPCA".impute_13 * 0.383291624847 + "CenteredDataForPCA".impute_14 * 0.317269096404 + "CenteredDataForPCA".impute_15 * 0.0980063627968 + "CenteredDataForPCA".impute_16 * -0.0365659534727 + "CenteredDataForPCA".impute_17 * 0.0742594562566 + "CenteredDataForPCA".impute_18 * 0.0573215655236 + "CenteredDataForPCA".impute_19 * 0.125144979965 + "CenteredDataForPCA".impute_20 * -0.0603226055212 + "CenteredDataForPCA".impute_21 * -0.14409726957 AS anoova_19, "CenteredDataForPCA".impute_2 * 8.64019525806e-17 + "CenteredDataForPCA".impute_3 * 1.93649895996e-16 + "CenteredDataForPCA".impute_4 * 8.60215342304e-17 + "CenteredDataForPCA".impute_5 * 0.255808199808 + "CenteredDataForPCA".impute_6 * 3.61874791387e-16 + "CenteredDataForPCA".impute_7 * -4.44393600962e-17 + "CenteredDataForPCA".impute_8 * 5.8753035206e-17 + "CenteredDataForPCA".impute_9 * -2.32775441215e-16 + "CenteredDataForPCA".impute_10 * -3.43613793119e-17 + "CenteredDataForPCA".impute_11 * 0.0130023634731 + "CenteredDataForPCA".impute_12 * -0.437443476435 + "CenteredDataForPCA".impute_13 * 4.30349195719e-17 + "CenteredDataForPCA".impute_14 * 1.67931308113e-16 + "CenteredDataForPCA".impute_15 * -1.06563636358e-16 + "CenteredDataForPCA".impute_16 * 0.460713951955 + "CenteredDataForPCA".impute_17 * 0.224189267308 + "CenteredDataForPCA".impute_18 * 6.74385481548e-17 + "CenteredDataForPCA".impute_19 * -1.15517884845e-16 + "CenteredDataForPCA".impute_20 * -0.693194154099 + "CenteredDataForPCA".impute_21 * -3.68111281041e-17 AS anoova_20, "CenteredDataForPCA".impute_2 * -1.13443799276e-18 + "CenteredDataForPCA".impute_3 * -1.97202953336e-17 + "CenteredDataForPCA".impute_4 * -5.53448179916e-17 + "CenteredDataForPCA".impute_5 * 0.716011891378 + "CenteredDataForPCA".impute_6 * 1.21957772629e-16 + "CenteredDataForPCA".impute_7 * -1.68718040302e-16 + "CenteredDataForPCA".impute_8 * -7.56300745884e-18 + "CenteredDataForPCA".impute_9 * 2.19504414365e-17 + "CenteredDataForPCA".impute_10 * -1.92366443391e-16 + "CenteredDataForPCA".impute_11 * 0.558709186138 + "CenteredDataForPCA".impute_12 * 0.359844542509 + "CenteredDataForPCA".impute_13 * -4.23651777506e-17 + "CenteredDataForPCA".impute_14 * 2.12436933902e-16 + "CenteredDataForPCA".impute_15 * -4.06569148991e-17 + "CenteredDataForPCA".impute_16 * 0.0834405613377 + "CenteredDataForPCA".impute_17 * 0.132129672197 + "CenteredDataForPCA".impute_18 * 1.47882873954e-16 + "CenteredDataForPCA".impute_19 * 7.544143919e-17 + "CenteredDataForPCA".impute_20 * 0.145816132184 + "CenteredDataForPCA".impute_21 * 5.70048557945e-17 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.7668147087097168) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.4384186267852783) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.7084317803382874) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.6504050493240356) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_15 <= 0.7590994238853455) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -1.305100440979004) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= 0.356889009475708) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 1.7668147087097168 AS threshold, 100 AS count, 0 AS depth, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.23 AS "Proba_1", -1.46967597006 AS "LogProba_1", 0.24000000000000002 AS "Proba_2", -1.42711635564 AS "LogProba_2", 0.28 AS "Proba_3", -1.27296567581 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, -1.4384186267852783 AS threshold, 77 AS count, 1 AS depth, 0.09090909090909088 AS "Proba_0", -2.3978952728 AS "LogProba_0", 0.2857142857142857 AS "Proba_1", -1.2527629685 AS "LogProba_1", 0.2597402597402597 AS "Proba_2", -1.3480731483 AS "LogProba_2", 0.36363636363636365 AS "Proba_3", -1.01160091168 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, 0.7084317803382874 AS threshold, 14 AS count, 2 AS depth, 0.14285714285714288 AS "Proba_0", -1.94591014906 AS "LogProba_0", 0.8571428571428571 AS "Proba_1", -0.154150679827 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_9' AS feature, 0.6504050493240356 AS threshold, 63 AS count, 2 AS depth, 0.07936507936507936 AS "Proba_0", -2.53369681396 AS "LogProba_0", 0.1587301587301587 AS "Proba_1", -1.8405496334 AS "LogProba_1", 0.31746031746031744 AS "Proba_2", -1.14740245284 AS "LogProba_2", 0.4444444444444445 AS "Proba_3", -0.810930216216 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, 0.0697674418604651 AS "Proba_0", -2.66258782703 AS "LogProba_0", 0.13953488372093023 AS "Proba_1", -1.96944064647 AS "LogProba_1", 0.4651162790697675 AS "Proba_2", -0.76546784214 AS "LogProba_2", 0.3255813953488371 AS "Proba_3", -1.12214278608 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, 0.1 AS "Proba_0", -2.30258509299 AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.7 AS "Proba_3", -0.356674943939 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anoova_15' AS feature, 0.7590994238853455 AS threshold, 23 AS count, 1 AS depth, 0.7826086956521738 AS "Proba_0", -0.245122458033 AS "LogProba_0", 0.04347826086956521 AS "Proba_1", -3.13549421593 AS "LogProba_1", 0.17391304347826084 AS "Proba_2", -1.74919985481 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, 'anoova_16' AS feature, -1.305100440979004 AS threshold, 16 AS count, 2 AS depth, 0.9375 AS "Proba_0", -0.0645385211376 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0625 AS "Proba_2", -2.77258872224 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 12 AS node_id, 'anoova_6' AS feature, 0.356889009475708 AS threshold, 7 AS count, 2 AS depth, 0.4285714285714285 AS "Proba_0", -0.847297860387 AS "LogProba_0", 0.14285714285714285 AS "Proba_1", -1.94591014906 AS "LogProba_1", 0.4285714285714285 AS "Proba_2", -0.847297860387 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.75 AS "Proba_2", -0.287682072452 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Proba_3" AS "Proba_3", "DT_node_data"."LogProba_3" AS "LogProba_3", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"AdaBoost_Estim_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0" AS "Proba_0_0", "DT_Output"."LogProba_0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1" AS "Proba_0_1", "DT_Output"."LogProba_1" AS "LogProba_0_1", CAST(NULL AS FLOAT) AS "Score_0_2", "DT_Output"."Proba_2" AS "Proba_0_2", "DT_Output"."LogProba_2" AS "LogProba_0_2", CAST(NULL AS FLOAT) AS "Score_0_3", "DT_Output"."Proba_3" AS "Proba_0_3", "DT_Output"."LogProba_3" AS "LogProba_0_3", "DT_Output"."Decision" AS "Decision_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.9507067203521729) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= 0.34956419467926025) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.6383284330368042) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.6717549562454224) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= 0.4872976839542389) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.7178244590759277) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.46015119552612305) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.9507067203521729 AS threshold, 100 AS count, 0 AS depth, 0.2500062283277067 AS "Proba_0", -1.38626944812 AS "LogProba_0", 0.2500062294909464 AS "Proba_1", -1.38626944347 AS "LogProba_1", 0.24998131385471942 AS "Proba_2", -1.38636910849 AS "LogProba_2", 0.2500062283266274 AS "Proba_3", -1.38626944812 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_19' AS feature, 0.34956419467926025 AS threshold, 73 AS count, 1 AS depth, 4.3062645798458365e-05 AS "Proba_0", -10.0528546235 AS "LogProba_0", 0.4320953103505703 AS "Proba_1", -0.839109089261 AS "LogProba_1", 0.25923134875722426 AS "Proba_2", -1.35003437754 AS "LogProba_2", 0.30863027824640693 AS "Proba_3", -1.175611229 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_8' AS feature, 0.6383284330368042 AS threshold, 53 AS count, 2 AS depth, 4.095440179271767e-05 AS "Proba_0", -10.1030512616 AS "LogProba_0", 0.1370281002509647 AS "Proba_1", -1.98756926287 AS "LogProba_1", 0.451989996472795 AS "Proba_2", -0.794095231092 AS "LogProba_2", 0.41094094887444765 AS "Proba_3", -0.889305751513 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 6.519161460364573e-05 AS "Proba_0", -9.63817970768 AS "LogProba_0", 9.779350757104321e-05 AS "Proba_1", -9.23265236788 AS "LogProba_1", 0.7194820732380957 AS "Proba_2", -0.329223668548 AS "LogProba_2", 0.28035494163972957 AS "Proba_3", -1.27169882989 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, 9.543940356956677e-13 AS "Proba_0", -27.6776997734 AS "LogProba_0", 0.3684036595213387 AS "Proba_1", -0.998576041096 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.631596340477707 AS "Proba_3", -0.459504790668 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_16' AS feature, -0.6717549562454224 AS threshold, 20 AS count, 2 AS depth, 4.539972554532726e-05 AS "Proba_0", -10.0000044982 AS "LogProba_0", 0.7591900862926083 AS "Proba_1", -0.275503089869 AS "LogProba_1", 0.04555004318575474 AS "Proba_2", -3.08894370718 AS "LogProba_2", 0.19521447079609178 AS "Proba_3", -1.63365647457 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 1.1194038764351178e-12 AS "Proba_0", -27.5182248255 AS "LogProba_0", 1.1194038764351178e-12 AS "Proba_1", -27.5182248255 AS "LogProba_1", 0.2592592592586788 AS "Proba_2", -1.34992671695 AS "LogProba_2", 0.7407407407390825 AS "Proba_3", -0.300104592453 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, 5.507623574092183e-05 AS "Proba_0", -9.80679222811 AS "LogProba_0", 0.9210040775290649 AS "Proba_1", -0.0822908154521 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.07894084623519414 AS "Proba_3", -2.53905648883 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anoova_14' AS feature, 0.4872976839542389 AS threshold, 27 AS count, 1 AS depth, 0.5932028015035095 AS "Proba_0", -0.522218946033 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.23728112152183778 AS "Proba_2", -1.43850967403 AS "LogProba_2", 0.16951607697465276 AS "Proba_3", -1.77480750725 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, 'anoova_5' AS feature, 0.7178244590759277 AS threshold, 17 AS count, 2 AS depth, 3.68561803123503e-13 AS "Proba_0", -28.6291679819 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.512163996791051 AS "Proba_2", -0.669110398997 AS "LogProba_2", 0.48783600320858056 AS "Proba_3", -0.717775988608 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 5.812177930347133e-13 AS "Proba_0", -28.1736508494 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.8076768275061377 AS "Proba_2", -0.213593266427 AS "LogProba_2", 0.19232317249328112 AS "Proba_3", -1.64857813186 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 12 AS node_id, 'anoova_18' AS feature, 0.46015119552612305 AS threshold, 10 AS count, 2 AS depth, 0.9090791418295313 AS "Proba_0", -0.0953231238756 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.09090791418311013 AS "Proba_2", -2.39790821687 AS "LogProba_2", 1.2943987358681007e-05 AS "Proba_3", -11.2548791743 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.9999928807654846 AS "Proba_0", -7.11925985722e-06 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 7.119234515352378e-06 AS "Proba_3", -11.8527103502 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.9999288122160693 AS "Proba_2", -7.11903179012e-05 AS "LogProba_2", 7.118778393064496e-05 AS "Proba_3", -9.55018932827 AS "LogProba_3", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Proba_3" AS "Proba_3", "DT_node_data_1"."LogProba_3" AS "LogProba_3", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"AdaBoost_Estim_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0" AS "Proba_1_0", "DT_Output_1"."LogProba_0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1" AS "Proba_1_1", "DT_Output_1"."LogProba_1" AS "LogProba_1_1", CAST(NULL AS FLOAT) AS "Score_1_2", "DT_Output_1"."Proba_2" AS "Proba_1_2", "DT_Output_1"."LogProba_2" AS "LogProba_1_2", CAST(NULL AS FLOAT) AS "Score_1_3", "DT_Output_1"."Proba_3" AS "Proba_1_3", "DT_Output_1"."LogProba_3" AS "LogProba_1_3", "DT_Output_1"."Decision" AS "Decision_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.7865489721298218) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_15 <= -0.034732259809970856) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.3243488669395447) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.6787488460540771) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.40062910318374634) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.7215344905853271) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.7865489721298218 AS threshold, 100 AS count, 0 AS depth, 0.25006827552511396 AS "Proba_0", -1.38602129631 AS "LogProba_0", 0.2500668773465496 AS "Proba_1", -1.38602688751 AS "LogProba_1", 0.24979656411289472 AS "Proba_2", -1.38710843594 AS "LogProba_2", 0.25006828301544176 AS "Proba_3", -1.38602126635 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_15' AS feature, -0.034732259809970856 AS threshold, 25 AS count, 1 AS depth, 0.999594939829535 AS "Proba_0", -0.000405142229496 AS "LogProba_0", 0.00030719059289433973 AS "Proba_1", -8.08804217925 AS "LogProba_1", 2.946339708340298e-05 AS "Proba_2", -10.4323618419 AS "LogProba_2", 6.840618048731278e-05 AS "Proba_3", -9.59004737942 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 2 AS depth, 0.9999999999999998 AS "Proba_0", -2.22044604925e-16 AS "LogProba_0", 3.1145379381382084e-16 AS "Proba_1", -35.7052806811 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_9' AS feature, 0.3243488669395447 AS threshold, 14 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.7583826189120854 AS "Proba_1", -0.276567246405 AS "LogProba_1", 0.07273832193769698 AS "Proba_2", -2.62088690901 AS "LogProba_2", 0.16887905915021767 AS "Proba_3", -1.77857244657 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 2.9462056036063156e-05 AS "Proba_1", -10.4324073586 AS "LogProba_1", 0.3010386859988122 AS "Proba_2", -1.20051649758 AS "LogProba_2", 0.6989318519451517 AS "Proba_3", -0.358202035142 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_9' AS feature, 0.6787488460540771 AS threshold, 75 AS count, 1 AS depth, 1.3083613347252971e-05 AS "Proba_0", -11.2441500003 AS "LogProba_0", 0.3333910729720203 AS "Proba_1", -1.09843908475 AS "LogProba_1", 0.33312323316568687 AS "Proba_2", -1.09924278789 AS "LogProba_2", 0.3334726102489457 AS "Proba_3", -1.09819454519 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anoova_18' AS feature, 0.40062910318374634 AS threshold, 55 AS count, 2 AS depth, 2.1675804692926245e-06 AS "Proba_0", -13.0418990036 AS "LogProba_0", 0.0004354604972611415 AS "Proba_1", -7.73910647242 AS "LogProba_1", 0.49953587421868983 AS "Proba_2", -0.694075863215 AS "LogProba_2", 0.5000264977035797 AS "Proba_3", -0.693094186557 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, 3.250195213362558e-06 AS "Proba_0", -12.6367954978 AS "LogProba_0", 0.0004850636496666961 AS "Proba_1", -7.63123043921 AS "LogProba_1", 0.7490308545737583 AS "Proba_2", -0.288975101956 AS "LogProba_2", 0.2504808315813617 AS "Proba_3", -1.38437288202 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.00033614647539088324 AS "Proba_1", -7.99796355433 AS "LogProba_1", 4.115976480554021e-06 AS "Proba_2", -12.4006344542 AS "LogProba_2", 0.9996597375481285 AS "Proba_3", -0.000340320354275 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, 'anoova_10' AS feature, -0.7215344905853271 AS threshold, 20 AS count, 2 AS depth, 3.4935223368245534e-05 AS "Proba_0", -10.2620149722 AS "LogProba_0", 0.9998984277445352 AS "Proba_1", -0.000101577414276 AS "LogProba_1", 2.8211213026356657e-09 AS "Proba_2", -19.686131406 AS "LogProba_2", 6.663421097530649e-05 AS "Proba_3", -9.616292434 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 2.9508233728387233e-05 AS "Proba_0", -10.4308412241 AS "LogProba_0", 0.9999703236171019 AS "Proba_1", -2.96768232506e-05 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.6814916973152074e-07 AS "Proba_3", -15.5984143364 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, 0.07547742456508119 AS "Proba_0", -2.58392167982 AS "LogProba_0", 0.0004486480742828211 AS "Proba_1", -7.70927177648 AS "LogProba_1", 3.9220219334601494e-05 AS "Proba_2", -10.1463181448 AS "LogProba_2", 0.9240347071413014 AS "Proba_3", -0.0790056462046 AS "LogProba_3", 3 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Proba_3" AS "Proba_3", "DT_node_data_2"."LogProba_3" AS "LogProba_3", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"AdaBoost_Estim_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0" AS "Proba_2_0", "DT_Output_2"."LogProba_0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1" AS "Proba_2_1", "DT_Output_2"."LogProba_1" AS "LogProba_2_1", CAST(NULL AS FLOAT) AS "Score_2_2", "DT_Output_2"."Proba_2" AS "Proba_2_2", "DT_Output_2"."LogProba_2" AS "LogProba_2_2", CAST(NULL AS FLOAT) AS "Score_2_3", "DT_Output_2"."Proba_3" AS "Proba_2_3", "DT_Output_2"."LogProba_3" AS "LogProba_2_3", "DT_Output_2"."Decision" AS "Decision_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= 0.34956419467926025) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 2.223945379257202) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -1.090620517730713) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.3694075345993042) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.13158243894577026) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_15 <= 0.018879633396863937) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.8311417102813721) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_19' AS feature, 0.34956419467926025 AS threshold, 100 AS count, 0 AS depth, 0.24998522845884655 AS "Proba_0", -1.38635344903 AS "LogProba_0", 0.2500076654840659 AS "Proba_1", -1.38626369965 AS "LogProba_1", 0.24999944066251326 AS "Proba_2", -1.38629659847 AS "LogProba_2", 0.2500076653945743 AS "Proba_3", -1.38626370001 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 2.223945379257202 AS threshold, 74 AS count, 1 AS depth, 0.33079649773672437 AS "Proba_0", -1.10625190314 AS "LogProba_0", 1.2172450094524481e-05 AS "Proba_1", -11.3163353488 AS "LogProba_1", 0.335135804366944 AS "Proba_2", -1.09321944313 AS "LogProba_2", 0.33405552544623707 AS "Proba_3", -1.09644805597 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_11' AS feature, -1.090620517730713 AS threshold, 58 AS count, 2 AS depth, 0.012771118291049138 AS "Proba_0", -4.36056904104 AS "LogProba_0", 1.7957851372347402e-05 AS "Proba_1", -10.9274831363 AS "LogProba_1", 0.49438331455385126 AS "Proba_2", -0.704444122288 AS "LogProba_2", 0.4928276093037272 AS "Proba_3", -0.707595842959 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.011736818342148871 AS "Proba_0", -4.44502451135 AS "LogProba_0", 9.798323770053825e-08 AS "Proba_1", -16.1384694168 AS "LogProba_1", 0.08260534225455712 AS "Proba_2", -2.49368092434 AS "LogProba_2", 0.9056577414200564 AS "Proba_3", -0.0990938131638 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 3 AS depth, 0.014005329353296141 AS "Proba_0", -4.26831735371 AS "LogProba_0", 3.926970278014378e-05 AS "Proba_1", -10.145057258 AS "LogProba_1", 0.985750377988207 AS "Proba_2", -0.0143521227721 AS "LogProba_2", 0.00020502295571680264 AS "Proba_3", -8.49238860599 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_18' AS feature, 0.3694075345993042 AS threshold, 16 AS count, 2 AS depth, 0.999920015264659 AS "Proba_0", -7.99879342905e-05 AS "LogProba_0", 2.1278852895152368e-14 AS "Proba_1", -31.4810626372 AS "LogProba_1", 7.998473531980766e-05 AS "Proba_2", -9.43367475 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, 0.9999999999999495 AS "Proba_0", -5.05151476204e-14 AS "LogProba_0", 2.1280555014712054e-14 AS "Proba_1", -31.4809826493 AS "LogProba_1", 2.921153756680243e-14 AS "Proba_2", -31.1642126415 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 2.0141763083944173e-14 AS "Proba_0", -31.53598097 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.9999999999999799 AS "Proba_2", -2.00950367457e-14 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anoova_14' AS feature, -0.13158243894577026 AS threshold, 26 AS count, 1 AS depth, 0.012741556298067431 AS "Proba_0", -4.36288647789 AS "LogProba_0", 0.9839380853501469 AS "Proba_1", -0.0161923053016 AS "LogProba_1", 5.8266119124991556e-05 AS "Proba_2", -9.75048978062 AS "LogProba_2", 0.003262092232660639 AS "Proba_3", -5.7253865003 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, 'anoova_15' AS feature, 0.018879633396863937 AS threshold, 15 AS count, 2 AS depth, 2.1545007653228106e-06 AS "Proba_0", -13.0479515247 AS "LogProba_0", 0.9998505349116634 AS "Proba_1", -0.000149476259356 AS "LogProba_1", 5.9100612021037656e-05 AS "Proba_2", -9.73626927792 AS "LogProba_2", 8.820997555039543e-05 AS "Proba_3", -9.33579049987 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 6.621135371790008e-11 AS "Proba_0", -23.4381691614 AS "LogProba_0", 0.9999704459989812 AS "Proba_1", -2.95544377469e-05 AS "LogProba_1", 2.955384994953827e-05 AS "Proba_2", -10.4292965367 AS "LogProba_2", 8.485789222892477e-11 AS "Proba_3", -23.1900431147 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.0179664027566922 AS "Proba_0", -4.01925177871 AS "LogProba_0", 7.658220258848488e-22 AS "Proba_1", -48.6210924313 AS "LogProba_1", 0.24642786035613048 AS "Proba_2", -1.40068598409 AS "LogProba_2", 0.7356057368871773 AS "Proba_3", -0.30706098736 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 12 AS node_id, 'anoova_2' AS feature, -0.8311417102813721 AS threshold, 11 AS count, 2 AS depth, 0.8004758590312763 AS "Proba_0", -0.222548904363 AS "LogProba_0", 1.9845928405540262e-08 AS "Proba_1", -17.735266969 AS "LogProba_1", 6.665683715073914e-06 AS "Proba_2", -11.9185380267 AS "LogProba_2", 0.1995174554390803 AS "Proba_3", -1.61185355054 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 9.946630171771874e-08 AS "Proba_1", -16.1234469263 AS "LogProba_1", 3.340790584396837e-05 AS "Proba_2", -10.3067179841 AS "LogProba_2", 0.9999664926278543 AS "Proba_3", -3.35079335302e-05 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.9999999999997052 AS "Proba_0", -2.94764213038e-13 AS "LogProba_0", 7.093858359407083e-24 AS "Proba_1", -53.302812842 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 2.9479683118655246e-13 AS "Proba_3", -28.8524899837 AS "LogProba_3", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Proba_3" AS "Proba_3", "DT_node_data_3"."LogProba_3" AS "LogProba_3", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"AdaBoost_Estim_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0" AS "Proba_3_0", "DT_Output_3"."LogProba_0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1" AS "Proba_3_1", "DT_Output_3"."LogProba_1" AS "LogProba_3_1", CAST(NULL AS FLOAT) AS "Score_3_2", "DT_Output_3"."Proba_2" AS "Proba_3_2", "DT_Output_3"."LogProba_2" AS "LogProba_3_2", CAST(NULL AS FLOAT) AS "Score_3_3", "DT_Output_3"."Proba_3" AS "Proba_3_3", "DT_Output_3"."LogProba_3" AS "LogProba_3_3", "DT_Output_3"."Decision" AS "Decision_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 2.0702872276306152) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.45666417479515076) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -2.3804564476013184) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= 0.31316888332366943) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.18818244338035583) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.21265463531017303) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.7977279424667358) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 2.0702872276306152 AS threshold, 100 AS count, 0 AS depth, 0.25000001891531765 AS "Proba_0", -1.38629428546 AS "LogProba_0", 0.24999990208174105 AS "Proba_1", -1.38629475279 AS "LogProba_1", 0.25000003986361025 AS "Proba_2", -1.38629420167 AS "LogProba_2", 0.2500000391393311 AS "Proba_3", -1.38629420456 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_9' AS feature, 0.45666417479515076 AS threshold, 90 AS count, 1 AS depth, 3.372074457376907e-05 AS "Proba_0", -10.297397344 AS "LogProba_0", 0.33333333302448365 AS "Proba_1", -1.09861228959 AS "LogProba_1", 0.33333296262945233 AS "Proba_2", -1.09861340078 AS "LogProba_2", 0.3332999836014904 AS "Proba_3", -1.09871234287 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -2.3804564476013184 AS threshold, 59 AS count, 2 AS depth, 3.1469882788098056e-07 AS "Proba_0", -14.9716497574 AS "LogProba_0", 3.8320771841234846e-05 AS "Proba_1", -10.1695184631 AS "LogProba_1", 0.5411805025427544 AS "Proba_2", -0.614002409678 AS "LogProba_2", 0.4587808619865764 AS "Proba_3", -0.779182607791 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 7.159399299632942e-17 AS "Proba_0", -37.1755205001 AS "LogProba_0", 1.0989460798847232e-08 AS "Proba_1", -18.3263291326 AS "LogProba_1", 0.11940693536893256 AS "Proba_2", -2.12521799454 AS "LogProba_2", 0.8805930536416066 AS "Proba_3", -0.127159673902 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 49 AS count, 3 AS depth, 5.709717180913292e-07 AS "Proba_0", -14.375926159 AS "LogProba_0", 6.951808745345078e-05 AS "Proba_1", -9.57392358812 AS "LogProba_1", 0.8846489921662168 AS "Proba_2", -0.12256433167 AS "LogProba_2", 0.11528091877461162 AS "Proba_3", -2.16038335738 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_13' AS feature, 0.31316888332366943 AS threshold, 31 AS count, 2 AS depth, 8.117690825314782e-05 AS "Proba_0", -9.41887973236 AS "LogProba_0", 0.8068075890108817 AS "Proba_1", -0.214670066636 AS "LogProba_1", 0.03806764001353106 AS "Proba_2", -3.26839070122 AS "LogProba_2", 0.15504359406733417 AS "Proba_3", -1.86404894956 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 9.605493644126066e-05 AS "Proba_0", -9.25059027558 AS "LogProba_0", 0.9547704637865246 AS "Proba_1", -0.0462843194466 AS "LogProba_1", 0.04505048969376025 AS "Proba_2", -3.09997142498 AS "LogProba_2", 8.299158327385504e-05 AS "Proba_3", -9.39677136165 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 6.798465998546429e-08 AS "Proba_0", -16.5039837457 AS "LogProba_0", 0.00017452224529821306 AS "Proba_1", -8.65345834423 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.9998254097700419 AS "Proba_3", -0.000174605472607 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anoova_12' AS feature, -0.18818244338035583 AS threshold, 10 AS count, 1 AS depth, 0.9998977413474889 AS "Proba_0", -0.000102263881284 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.6623101875861855e-06 AS "Proba_2", -13.3073022438 AS "LogProba_2", 0.00010059634232355722 AS "Proba_3", -9.20439465957 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, 'anoova_7' AS feature, -0.21265463531017303 AS threshold, 3 AS count, 2 AS depth, 0.9999997465096778 AS "Proba_0", -2.53490354306e-07 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 2.534903221385426e-07 AS "Proba_2", -15.1879401916 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 12 AS node_id, 'anoova_5' AS feature, 0.7977279424667358 AS threshold, 7 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.013811510470778155 AS "Proba_2", -4.2822529424 AS "LogProba_2", 0.9861884895292219 AS "Proba_3", -0.0139077767982 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4"."Proba_0" AS "Proba_0", "DT_node_data_4"."LogProba_0" AS "LogProba_0", "DT_node_data_4"."Proba_1" AS "Proba_1", "DT_node_data_4"."LogProba_1" AS "LogProba_1", "DT_node_data_4"."Proba_2" AS "Proba_2", "DT_node_data_4"."LogProba_2" AS "LogProba_2", "DT_node_data_4"."Proba_3" AS "Proba_3", "DT_node_data_4"."LogProba_3" AS "LogProba_3", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"AdaBoost_Estim_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0" AS "Proba_4_0", "DT_Output_4"."LogProba_0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1" AS "Proba_4_1", "DT_Output_4"."LogProba_1" AS "LogProba_4_1", CAST(NULL AS FLOAT) AS "Score_4_2", "DT_Output_4"."Proba_2" AS "Proba_4_2", "DT_Output_4"."LogProba_2" AS "LogProba_4_2", CAST(NULL AS FLOAT) AS "Score_4_3", "DT_Output_4"."Proba_3" AS "Proba_4_3", "DT_Output_4"."LogProba_3" AS "LogProba_4_3", "DT_Output_4"."Decision" AS "Decision_4" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.666661024093628) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.40062910318374634) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= 0.40809085965156555) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.05230595916509628) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -1.4080791473388672) THEN 9 ELSE 10 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 1.666661024093628 AS threshold, 100 AS count, 0 AS depth, 0.24998831784450987 AS "Proba_0", -1.38634109083 AS "LogProba_0", 0.25000451046653116 AS "Proba_1", -1.38627631942 AS "LogProba_1", 0.2500026612224201 AS "Proba_2", -1.38628371629 AS "LogProba_2", 0.2500045104665389 AS "Proba_3", -1.38627631942 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_18' AS feature, 0.40062910318374634 AS threshold, 76 AS count, 1 AS depth, 1.5884502061187718e-05 AS "Proba_0", -11.0501666372 AS "LogProba_0", 0.33332661064974867 AS "Proba_1", -1.09863245692 AS "LogProba_1", 0.33332751943002265 AS "Proba_2", -1.09862973053 AS "LogProba_2", 0.33332998541816744 AS "Proba_3", -1.09862233246 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_17' AS feature, 0.40809085965156555 AS threshold, 54 AS count, 2 AS depth, 8.535051350145514e-06 AS "Proba_0", -11.6713291853 AS "LogProba_0", 0.4902435122522334 AS "Proba_1", -0.712853047543 AS "LogProba_1", 0.5070389918341905 AS "Proba_2", -0.679167371377 AS "LogProba_2", 0.0027089608622259077 AS "Proba_3", -5.9111901633 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 42 AS count, 3 AS depth, 1.474058014865079e-05 AS "Proba_0", -11.1249063132 AS "LogProba_0", 0.846675395089308 AS "Proba_1", -0.16643789853 AS "LogProba_1", 0.14863131987710013 AS "Proba_2", -1.90628640257 AS "LogProba_2", 0.004678544453443123 AS "Proba_3", -5.36476823165 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 8.993708665416758e-06 AS "Proba_1", -11.6189852622 AS "LogProba_1", 0.9999910002394533 AS "Proba_2", -8.99980104478e-06 AS "LogProba_2", 6.0518812872328606e-09 AS "Proba_3", -18.9228966567 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_10' AS feature, -0.05230595916509628 AS threshold, 22 AS count, 2 AS depth, 2.9985739397526436e-05 AS "Proba_0", -10.4147886427 AS "LogProba_0", 0.03225343408499748 AS "Proba_1", -3.43413075815 AS "LogProba_1", 3.095119320232594e-05 AS "Proba_2", -10.383099007 AS "LogProba_2", 0.9676856289824025 AS "Proba_3", -0.0328480079006 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.2354919488388055e-07 AS "Proba_1", -15.9066264211 AS "LogProba_1", 7.878264367838033e-17 AS "Proba_2", -37.0798389592 AS "LogProba_2", 0.999999876450805 AS "Proba_3", -1.23549202618e-07 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.0009279245876287599 AS "Proba_0", -6.98256009181 AS "LogProba_0", 0.9980959010728873 AS "Proba_1", -0.00190591402793 AS "LogProba_1", 0.0009578010669693478 AS "Proba_2", -6.95087045608 AS "LogProba_2", 1.8373272514695727e-05 AS "Proba_3", -10.9046135301 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anoova_3' AS feature, -1.4080791473388672 AS threshold, 24 AS count, 1 AS depth, 0.99998987336144 AS "Proba_0", -1.01266898348e-05 AS "LogProba_0", 1.0125442721634178e-05 AS "Proba_1", -11.5004592203 AS "LogProba_1", 1.1958384596371124e-09 AS "Proba_2", -20.5444182577 AS "LogProba_2", 2.5249693255367064e-21 AS "Proba_3", -47.4280580385 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9999999999999998 AS "Proba_1", -2.22044604925e-16 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 2.493687826747385e-16 AS "Proba_3", -35.9275988182 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, 0.9999999988041494 AS "Proba_0", -1.19585064145e-09 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.1958505681535439e-09 AS "Proba_2", -20.5444081322 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5"."Proba_0" AS "Proba_0", "DT_node_data_5"."LogProba_0" AS "LogProba_0", "DT_node_data_5"."Proba_1" AS "Proba_1", "DT_node_data_5"."LogProba_1" AS "LogProba_1", "DT_node_data_5"."Proba_2" AS "Proba_2", "DT_node_data_5"."LogProba_2" AS "LogProba_2", "DT_node_data_5"."Proba_3" AS "Proba_3", "DT_node_data_5"."LogProba_3" AS "LogProba_3", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"AdaBoost_Estim_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0" AS "Proba_5_0", "DT_Output_5"."LogProba_0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1" AS "Proba_5_1", "DT_Output_5"."LogProba_1" AS "LogProba_5_1", CAST(NULL AS FLOAT) AS "Score_5_2", "DT_Output_5"."Proba_2" AS "Proba_5_2", "DT_Output_5"."LogProba_2" AS "LogProba_5_2", CAST(NULL AS FLOAT) AS "Score_5_3", "DT_Output_5"."Proba_3" AS "Proba_5_3", "DT_Output_5"."LogProba_3" AS "LogProba_5_3", "DT_Output_5"."Decision" AS "Decision_5" 
FROM "DT_Output_5"), 
"AdaBoost_Join_CTE" AS 
(SELECT "AdaBoost_Estim_0".join_key_0 AS join_key_0, "AdaBoost_Estim_0"."Score_0_0" AS "Score_0_0", "AdaBoost_Estim_0"."Proba_0_0" AS "Proba_0_0", "AdaBoost_Estim_0"."LogProba_0_0" AS "LogProba_0_0", "AdaBoost_Estim_0"."Score_0_1" AS "Score_0_1", "AdaBoost_Estim_0"."Proba_0_1" AS "Proba_0_1", "AdaBoost_Estim_0"."LogProba_0_1" AS "LogProba_0_1", "AdaBoost_Estim_0"."Score_0_2" AS "Score_0_2", "AdaBoost_Estim_0"."Proba_0_2" AS "Proba_0_2", "AdaBoost_Estim_0"."LogProba_0_2" AS "LogProba_0_2", "AdaBoost_Estim_0"."Score_0_3" AS "Score_0_3", "AdaBoost_Estim_0"."Proba_0_3" AS "Proba_0_3", "AdaBoost_Estim_0"."LogProba_0_3" AS "LogProba_0_3", "AdaBoost_Estim_0"."Decision_0" AS "Decision_0", "AdaBoost_Estim_1".join_key_1 AS join_key_1, "AdaBoost_Estim_1"."Score_1_0" AS "Score_1_0", "AdaBoost_Estim_1"."Proba_1_0" AS "Proba_1_0", "AdaBoost_Estim_1"."LogProba_1_0" AS "LogProba_1_0", "AdaBoost_Estim_1"."Score_1_1" AS "Score_1_1", "AdaBoost_Estim_1"."Proba_1_1" AS "Proba_1_1", "AdaBoost_Estim_1"."LogProba_1_1" AS "LogProba_1_1", "AdaBoost_Estim_1"."Score_1_2" AS "Score_1_2", "AdaBoost_Estim_1"."Proba_1_2" AS "Proba_1_2", "AdaBoost_Estim_1"."LogProba_1_2" AS "LogProba_1_2", "AdaBoost_Estim_1"."Score_1_3" AS "Score_1_3", "AdaBoost_Estim_1"."Proba_1_3" AS "Proba_1_3", "AdaBoost_Estim_1"."LogProba_1_3" AS "LogProba_1_3", "AdaBoost_Estim_1"."Decision_1" AS "Decision_1", "AdaBoost_Estim_2".join_key_2 AS join_key_2, "AdaBoost_Estim_2"."Score_2_0" AS "Score_2_0", "AdaBoost_Estim_2"."Proba_2_0" AS "Proba_2_0", "AdaBoost_Estim_2"."LogProba_2_0" AS "LogProba_2_0", "AdaBoost_Estim_2"."Score_2_1" AS "Score_2_1", "AdaBoost_Estim_2"."Proba_2_1" AS "Proba_2_1", "AdaBoost_Estim_2"."LogProba_2_1" AS "LogProba_2_1", "AdaBoost_Estim_2"."Score_2_2" AS "Score_2_2", "AdaBoost_Estim_2"."Proba_2_2" AS "Proba_2_2", "AdaBoost_Estim_2"."LogProba_2_2" AS "LogProba_2_2", "AdaBoost_Estim_2"."Score_2_3" AS "Score_2_3", "AdaBoost_Estim_2"."Proba_2_3" AS "Proba_2_3", "AdaBoost_Estim_2"."LogProba_2_3" AS "LogProba_2_3", "AdaBoost_Estim_2"."Decision_2" AS "Decision_2", "AdaBoost_Estim_3".join_key_3 AS join_key_3, "AdaBoost_Estim_3"."Score_3_0" AS "Score_3_0", "AdaBoost_Estim_3"."Proba_3_0" AS "Proba_3_0", "AdaBoost_Estim_3"."LogProba_3_0" AS "LogProba_3_0", "AdaBoost_Estim_3"."Score_3_1" AS "Score_3_1", "AdaBoost_Estim_3"."Proba_3_1" AS "Proba_3_1", "AdaBoost_Estim_3"."LogProba_3_1" AS "LogProba_3_1", "AdaBoost_Estim_3"."Score_3_2" AS "Score_3_2", "AdaBoost_Estim_3"."Proba_3_2" AS "Proba_3_2", "AdaBoost_Estim_3"."LogProba_3_2" AS "LogProba_3_2", "AdaBoost_Estim_3"."Score_3_3" AS "Score_3_3", "AdaBoost_Estim_3"."Proba_3_3" AS "Proba_3_3", "AdaBoost_Estim_3"."LogProba_3_3" AS "LogProba_3_3", "AdaBoost_Estim_3"."Decision_3" AS "Decision_3", "AdaBoost_Estim_4".join_key_4 AS join_key_4, "AdaBoost_Estim_4"."Score_4_0" AS "Score_4_0", "AdaBoost_Estim_4"."Proba_4_0" AS "Proba_4_0", "AdaBoost_Estim_4"."LogProba_4_0" AS "LogProba_4_0", "AdaBoost_Estim_4"."Score_4_1" AS "Score_4_1", "AdaBoost_Estim_4"."Proba_4_1" AS "Proba_4_1", "AdaBoost_Estim_4"."LogProba_4_1" AS "LogProba_4_1", "AdaBoost_Estim_4"."Score_4_2" AS "Score_4_2", "AdaBoost_Estim_4"."Proba_4_2" AS "Proba_4_2", "AdaBoost_Estim_4"."LogProba_4_2" AS "LogProba_4_2", "AdaBoost_Estim_4"."Score_4_3" AS "Score_4_3", "AdaBoost_Estim_4"."Proba_4_3" AS "Proba_4_3", "AdaBoost_Estim_4"."LogProba_4_3" AS "LogProba_4_3", "AdaBoost_Estim_4"."Decision_4" AS "Decision_4", "AdaBoost_Estim_5".join_key_5 AS join_key_5, "AdaBoost_Estim_5"."Score_5_0" AS "Score_5_0", "AdaBoost_Estim_5"."Proba_5_0" AS "Proba_5_0", "AdaBoost_Estim_5"."LogProba_5_0" AS "LogProba_5_0", "AdaBoost_Estim_5"."Score_5_1" AS "Score_5_1", "AdaBoost_Estim_5"."Proba_5_1" AS "Proba_5_1", "AdaBoost_Estim_5"."LogProba_5_1" AS "LogProba_5_1", "AdaBoost_Estim_5"."Score_5_2" AS "Score_5_2", "AdaBoost_Estim_5"."Proba_5_2" AS "Proba_5_2", "AdaBoost_Estim_5"."LogProba_5_2" AS "LogProba_5_2", "AdaBoost_Estim_5"."Score_5_3" AS "Score_5_3", "AdaBoost_Estim_5"."Proba_5_3" AS "Proba_5_3", "AdaBoost_Estim_5"."LogProba_5_3" AS "LogProba_5_3", "AdaBoost_Estim_5"."Decision_5" AS "Decision_5" 
FROM "AdaBoost_Estim_0" LEFT OUTER JOIN "AdaBoost_Estim_1" ON "AdaBoost_Estim_0".join_key_0 = "AdaBoost_Estim_1".join_key_1 LEFT OUTER JOIN "AdaBoost_Estim_2" ON "AdaBoost_Estim_2".join_key_2 = "AdaBoost_Estim_1".join_key_1 LEFT OUTER JOIN "AdaBoost_Estim_3" ON "AdaBoost_Estim_3".join_key_3 = "AdaBoost_Estim_2".join_key_2 LEFT OUTER JOIN "AdaBoost_Estim_4" ON "AdaBoost_Estim_4".join_key_4 = "AdaBoost_Estim_3".join_key_3 LEFT OUTER JOIN "AdaBoost_Estim_5" ON "AdaBoost_Estim_5".join_key_5 = "AdaBoost_Estim_4".join_key_4), 
"AdaBoost_AVG_Scores_BN" AS 
(SELECT "AdaBoost_Join_CTE".join_key_0 AS "KEY", (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 AS "Score_0", 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) AS "Proba_0", (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 AS "Score_1", 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) AS "Proba_1", (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 AS "Score_2", 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) AS "Proba_2", (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 + (3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4)) / 6.0 AS "Score_3", 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_0_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_0_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_0_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_1_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_1_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_1_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_2_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_2_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_2_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_3_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_3_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_3_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_4_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_4_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_4_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) + 3.0 * (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END - (CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_0" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_0" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_0") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_1" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_1" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_1") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_2" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_2" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_2") ELSE -BINARY_FLOAT_INFINITY END END + CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ("AdaBoost_Join_CTE"."Proba_5_3" IS NULL OR "AdaBoost_Join_CTE"."Proba_5_3" > 0.0) THEN ln("AdaBoost_Join_CTE"."Proba_5_3") ELSE -BINARY_FLOAT_INFINITY END END) / 4) AS "Proba_3" 
FROM "AdaBoost_Join_CTE"), 
"AdaBoost_AVG_Scores" AS 
(SELECT "AdaBoost_AVG_Scores_BN"."KEY" AS "KEY", "AdaBoost_AVG_Scores_BN"."Score_0" AS "Score_0", exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 3) / (exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_3" / 6.0) / 3)) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0", "AdaBoost_AVG_Scores_BN"."Score_1" AS "Score_1", exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 3) / (exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_3" / 6.0) / 3)) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1", "AdaBoost_AVG_Scores_BN"."Score_2" AS "Score_2", exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 3) / (exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_3" / 6.0) / 3)) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2", "AdaBoost_AVG_Scores_BN"."Score_3" AS "Score_3", exp(("AdaBoost_AVG_Scores_BN"."Proba_3" / 6.0) / 3) / (exp(("AdaBoost_AVG_Scores_BN"."Proba_0" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_1" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_2" / 6.0) / 3) + exp(("AdaBoost_AVG_Scores_BN"."Proba_3" / 6.0) / 3)) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_3" 
FROM "AdaBoost_AVG_Scores_BN"), 
orig_cte AS 
(SELECT "AdaBoost_AVG_Scores"."KEY" AS "KEY", "AdaBoost_AVG_Scores"."Score_0" AS "Score_0", "AdaBoost_AVG_Scores"."Score_1" AS "Score_1", "AdaBoost_AVG_Scores"."Score_2" AS "Score_2", "AdaBoost_AVG_Scores"."Score_3" AS "Score_3", "AdaBoost_AVG_Scores"."Proba_0" AS "Proba_0", "AdaBoost_AVG_Scores"."Proba_1" AS "Proba_1", "AdaBoost_AVG_Scores"."Proba_2" AS "Proba_2", "AdaBoost_AVG_Scores"."Proba_3" AS "Proba_3", "AdaBoost_AVG_Scores"."LogProba_0" AS "LogProba_0", "AdaBoost_AVG_Scores"."LogProba_1" AS "LogProba_1", "AdaBoost_AVG_Scores"."LogProba_2" AS "LogProba_2", "AdaBoost_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "AdaBoost_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte