-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.0245262640351 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.431815992417 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.142895214143 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0820280151737 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.146997837265 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0878031827327 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.100772949457 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0278889433103 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0335574790213 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.176049366802 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.275998986367 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.142785090738 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.228340002498 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 0.0524440023337 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.177159609 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.0583046943864 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0356118091705 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0147812013307 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.114308549229 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.264582760726 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - -0.0245262640351 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.431815992417 AS impute_3, "ADS_imp_1_OUT".impute_4 - 0.142895214143 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.0820280151737 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.146997837265 AS impute_6, "ADS_imp_1_OUT".impute_7 - -0.0878031827327 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.100772949457 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.0278889433103 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0335574790213 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.176049366802 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.275998986367 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.142785090738 AS impute_13, "ADS_imp_1_OUT".impute_14 - -0.228340002498 AS impute_14, "ADS_imp_1_OUT".impute_15 - 0.0524440023337 AS impute_15, "ADS_imp_1_OUT".impute_16 - 0.177159609 AS impute_16, "ADS_imp_1_OUT".impute_17 - -0.0583046943864 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.0356118091705 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.0147812013307 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.114308549229 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.264582760726 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0596505493263 + "CenteredDataForPCA".impute_3 * 0.0561430176462 + "CenteredDataForPCA".impute_4 * -0.761537675714 + "CenteredDataForPCA".impute_5 * -0.0304821153526 + "CenteredDataForPCA".impute_6 * 0.0382267861581 + "CenteredDataForPCA".impute_7 * 0.0269611141333 + "CenteredDataForPCA".impute_8 * 0.00121125534073 + "CenteredDataForPCA".impute_9 * 0.0234289916801 + "CenteredDataForPCA".impute_10 * 0.00204569755282 + "CenteredDataForPCA".impute_11 * -0.094819140189 + "CenteredDataForPCA".impute_12 * -0.337899921968 + "CenteredDataForPCA".impute_13 * -0.0256891970845 + "CenteredDataForPCA".impute_14 * -0.0925335989086 + "CenteredDataForPCA".impute_15 * -0.0155783025084 + "CenteredDataForPCA".impute_16 * -0.0695905394986 + "CenteredDataForPCA".impute_17 * 0.165060998884 + "CenteredDataForPCA".impute_18 * 0.144983847063 + "CenteredDataForPCA".impute_19 * 0.0332833755649 + "CenteredDataForPCA".impute_20 * 0.00359380731962 + "CenteredDataForPCA".impute_21 * -0.472035084753 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.0487850783091 + "CenteredDataForPCA".impute_3 * 0.597237199269 + "CenteredDataForPCA".impute_4 * 0.0544361733869 + "CenteredDataForPCA".impute_5 * 0.0456671497096 + "CenteredDataForPCA".impute_6 * 0.0292226611945 + "CenteredDataForPCA".impute_7 * 0.105927597265 + "CenteredDataForPCA".impute_8 * 0.0078532322292 + "CenteredDataForPCA".impute_9 * -0.11875457832 + "CenteredDataForPCA".impute_10 * -0.00964795251476 + "CenteredDataForPCA".impute_11 * 0.372483993798 + "CenteredDataForPCA".impute_12 * 0.0981013488997 + "CenteredDataForPCA".impute_13 * -0.146452269609 + "CenteredDataForPCA".impute_14 * 0.0281676643252 + "CenteredDataForPCA".impute_15 * 0.0353898508344 + "CenteredDataForPCA".impute_16 * 0.00425313213268 + "CenteredDataForPCA".impute_17 * -0.536734440959 + "CenteredDataForPCA".impute_18 * -0.0493789611763 + "CenteredDataForPCA".impute_19 * 0.0378165156449 + "CenteredDataForPCA".impute_20 * -0.0987509656117 + "CenteredDataForPCA".impute_21 * -0.368730976411 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.00739687894335 + "CenteredDataForPCA".impute_3 * -0.22104178907 + "CenteredDataForPCA".impute_4 * -0.0829310145382 + "CenteredDataForPCA".impute_5 * 0.0668760824368 + "CenteredDataForPCA".impute_6 * 0.127713932241 + "CenteredDataForPCA".impute_7 * 0.112499932916 + "CenteredDataForPCA".impute_8 * -0.0861155646426 + "CenteredDataForPCA".impute_9 * 0.00860010684517 + "CenteredDataForPCA".impute_10 * 0.0754648793595 + "CenteredDataForPCA".impute_11 * 0.481967743386 + "CenteredDataForPCA".impute_12 * 0.62826635512 + "CenteredDataForPCA".impute_13 * -0.0431397174883 + "CenteredDataForPCA".impute_14 * 0.0720934824797 + "CenteredDataForPCA".impute_15 * -0.0334282631923 + "CenteredDataForPCA".impute_16 * 0.0783331202441 + "CenteredDataForPCA".impute_17 * 0.405449075208 + "CenteredDataForPCA".impute_18 * 0.106527288172 + "CenteredDataForPCA".impute_19 * 0.032237185581 + "CenteredDataForPCA".impute_20 * 0.0745576727734 + "CenteredDataForPCA".impute_21 * -0.271892106111 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.0477057776962 + "CenteredDataForPCA".impute_3 * 0.433550917723 + "CenteredDataForPCA".impute_4 * -0.0548632778085 + "CenteredDataForPCA".impute_5 * -0.552593542777 + "CenteredDataForPCA".impute_6 * 0.0812909924519 + "CenteredDataForPCA".impute_7 * 0.0253438344449 + "CenteredDataForPCA".impute_8 * -0.11555710679 + "CenteredDataForPCA".impute_9 * 0.0784611785229 + "CenteredDataForPCA".impute_10 * -0.217928838221 + "CenteredDataForPCA".impute_11 * 0.0485799645443 + "CenteredDataForPCA".impute_12 * 0.056305034715 + "CenteredDataForPCA".impute_13 * -0.154774099966 + "CenteredDataForPCA".impute_14 * -0.227715569249 + "CenteredDataForPCA".impute_15 * -0.116418044325 + "CenteredDataForPCA".impute_16 * 0.170414705177 + "CenteredDataForPCA".impute_17 * 0.265450696705 + "CenteredDataForPCA".impute_18 * 0.132019424852 + "CenteredDataForPCA".impute_19 * 0.315121483744 + "CenteredDataForPCA".impute_20 * 0.120307450599 + "CenteredDataForPCA".impute_21 * 0.318641497728 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.127651577646 + "CenteredDataForPCA".impute_3 * 0.00257349989506 + "CenteredDataForPCA".impute_4 * 0.0510754223221 + "CenteredDataForPCA".impute_5 * 0.0295400221772 + "CenteredDataForPCA".impute_6 * -0.110780238452 + "CenteredDataForPCA".impute_7 * -0.138759988008 + "CenteredDataForPCA".impute_8 * 0.260635868421 + "CenteredDataForPCA".impute_9 * 0.483674287319 + "CenteredDataForPCA".impute_10 * -0.185828877293 + "CenteredDataForPCA".impute_11 * 0.0678136466843 + "CenteredDataForPCA".impute_12 * 0.0332333715524 + "CenteredDataForPCA".impute_13 * 0.208873769251 + "CenteredDataForPCA".impute_14 * -0.230105486976 + "CenteredDataForPCA".impute_15 * 0.33110286849 + "CenteredDataForPCA".impute_16 * 0.229274205491 + "CenteredDataForPCA".impute_17 * -0.144737335835 + "CenteredDataForPCA".impute_18 * 0.284592338347 + "CenteredDataForPCA".impute_19 * -0.204418082413 + "CenteredDataForPCA".impute_20 * 0.436647755937 + "CenteredDataForPCA".impute_21 * -0.115848544098 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.0736042002478 + "CenteredDataForPCA".impute_3 * -0.187557006248 + "CenteredDataForPCA".impute_4 * 0.145226219078 + "CenteredDataForPCA".impute_5 * -0.0433998117141 + "CenteredDataForPCA".impute_6 * 0.423249916102 + "CenteredDataForPCA".impute_7 * 0.431013841207 + "CenteredDataForPCA".impute_8 * -0.0640754726373 + "CenteredDataForPCA".impute_9 * -0.401757632194 + "CenteredDataForPCA".impute_10 * -0.0375335017517 + "CenteredDataForPCA".impute_11 * -0.106322222239 + "CenteredDataForPCA".impute_12 * -0.0809159009004 + "CenteredDataForPCA".impute_13 * -0.0067437335534 + "CenteredDataForPCA".impute_14 * -0.209698767307 + "CenteredDataForPCA".impute_15 * 0.130527795649 + "CenteredDataForPCA".impute_16 * 0.0404909997312 + "CenteredDataForPCA".impute_17 * -0.167664725862 + "CenteredDataForPCA".impute_18 * 0.532022911954 + "CenteredDataForPCA".impute_19 * -0.0862666171614 + "CenteredDataForPCA".impute_20 * 0.0736815889387 + "CenteredDataForPCA".impute_21 * 0.00386324300228 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.276387466784 + "CenteredDataForPCA".impute_3 * -0.120498841939 + "CenteredDataForPCA".impute_4 * 0.0558687833692 + "CenteredDataForPCA".impute_5 * 0.0830879843311 + "CenteredDataForPCA".impute_6 * -0.143001143001 + "CenteredDataForPCA".impute_7 * 0.361553511195 + "CenteredDataForPCA".impute_8 * -0.281459479455 + "CenteredDataForPCA".impute_9 * 0.370844504902 + "CenteredDataForPCA".impute_10 * 0.0333711059019 + "CenteredDataForPCA".impute_11 * -0.0943997177193 + "CenteredDataForPCA".impute_12 * -0.112867855618 + "CenteredDataForPCA".impute_13 * -0.417301095609 + "CenteredDataForPCA".impute_14 * 0.259754988616 + "CenteredDataForPCA".impute_15 * -0.277040665346 + "CenteredDataForPCA".impute_16 * 0.240533643465 + "CenteredDataForPCA".impute_17 * -0.1634964174 + "CenteredDataForPCA".impute_18 * 0.00435023953436 + "CenteredDataForPCA".impute_19 * 0.0517648379008 + "CenteredDataForPCA".impute_20 * 0.316185585054 + "CenteredDataForPCA".impute_21 * -0.0525535068354 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.235107633497 + "CenteredDataForPCA".impute_3 * 0.00637808268167 + "CenteredDataForPCA".impute_4 * -0.00939286811366 + "CenteredDataForPCA".impute_5 * -0.222455107668 + "CenteredDataForPCA".impute_6 * -0.0163966299761 + "CenteredDataForPCA".impute_7 * -0.238457111613 + "CenteredDataForPCA".impute_8 * -0.050899031403 + "CenteredDataForPCA".impute_9 * -0.169354543436 + "CenteredDataForPCA".impute_10 * 0.791251196119 + "CenteredDataForPCA".impute_11 * -0.0325386665921 + "CenteredDataForPCA".impute_12 * -0.0493499271838 + "CenteredDataForPCA".impute_13 * -0.21114886602 + "CenteredDataForPCA".impute_14 * -0.0042758646332 + "CenteredDataForPCA".impute_15 * 0.136783960282 + "CenteredDataForPCA".impute_16 * 0.185081141152 + "CenteredDataForPCA".impute_17 * -0.0340235236428 + "CenteredDataForPCA".impute_18 * 0.0224794412817 + "CenteredDataForPCA".impute_19 * -0.0643277489327 + "CenteredDataForPCA".impute_20 * 0.271561244406 + "CenteredDataForPCA".impute_21 * -0.00455703594566 AS anoova_9, "CenteredDataForPCA".impute_2 * 0.199819226598 + "CenteredDataForPCA".impute_3 * -0.210291050323 + "CenteredDataForPCA".impute_4 * 0.00441181886743 + "CenteredDataForPCA".impute_5 * -0.0149407658882 + "CenteredDataForPCA".impute_6 * -0.350942508057 + "CenteredDataForPCA".impute_7 * -0.105978557278 + "CenteredDataForPCA".impute_8 * -0.00649066166024 + "CenteredDataForPCA".impute_9 * -0.238858677618 + "CenteredDataForPCA".impute_10 * -0.228031433377 + "CenteredDataForPCA".impute_11 * 0.00104643015916 + "CenteredDataForPCA".impute_12 * 0.0448720391408 + "CenteredDataForPCA".impute_13 * -0.508567569019 + "CenteredDataForPCA".impute_14 * -0.349663466776 + "CenteredDataForPCA".impute_15 * 0.408164284794 + "CenteredDataForPCA".impute_16 * 0.239874510084 + "CenteredDataForPCA".impute_17 * 0.0246961602635 + "CenteredDataForPCA".impute_18 * -0.158773860792 + "CenteredDataForPCA".impute_19 * -0.00135718239982 + "CenteredDataForPCA".impute_20 * -0.181313771686 + "CenteredDataForPCA".impute_21 * -0.0797978344536 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.142808812204 + "CenteredDataForPCA".impute_3 * 0.19747204834 + "CenteredDataForPCA".impute_4 * -0.0543377515917 + "CenteredDataForPCA".impute_5 * 0.0705582531085 + "CenteredDataForPCA".impute_6 * -0.265472504737 + "CenteredDataForPCA".impute_7 * 0.452859562433 + "CenteredDataForPCA".impute_8 * -0.420062642027 + "CenteredDataForPCA".impute_9 * 0.211868666083 + "CenteredDataForPCA".impute_10 * 0.217528171104 + "CenteredDataForPCA".impute_11 * 0.0131852178326 + "CenteredDataForPCA".impute_12 * 0.0138627081075 + "CenteredDataForPCA".impute_13 * 0.175263362348 + "CenteredDataForPCA".impute_14 * -0.263988671166 + "CenteredDataForPCA".impute_15 * 0.200937505973 + "CenteredDataForPCA".impute_16 * -0.0422157868121 + "CenteredDataForPCA".impute_17 * 0.14391635014 + "CenteredDataForPCA".impute_18 * -0.0411090651397 + "CenteredDataForPCA".impute_19 * -0.361055667043 + "CenteredDataForPCA".impute_20 * -0.269071374579 + "CenteredDataForPCA".impute_21 * 0.142718839278 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.522254463958 + "CenteredDataForPCA".impute_3 * 0.0181284720221 + "CenteredDataForPCA".impute_4 * -0.0267003793277 + "CenteredDataForPCA".impute_5 * 0.499318493482 + "CenteredDataForPCA".impute_6 * 0.208433839308 + "CenteredDataForPCA".impute_7 * 0.180243560045 + "CenteredDataForPCA".impute_8 * 0.120437435739 + "CenteredDataForPCA".impute_9 * 0.127978317365 + "CenteredDataForPCA".impute_10 * 0.00524439926515 + "CenteredDataForPCA".impute_11 * -0.0821694565655 + "CenteredDataForPCA".impute_12 * -0.0604983752657 + "CenteredDataForPCA".impute_13 * -0.29887289097 + "CenteredDataForPCA".impute_14 * -0.122586452038 + "CenteredDataForPCA".impute_15 * 0.170287853028 + "CenteredDataForPCA".impute_16 * -0.0800100681428 + "CenteredDataForPCA".impute_17 * 0.0923134255774 + "CenteredDataForPCA".impute_18 * -0.0961129324559 + "CenteredDataForPCA".impute_19 * 0.43014321733 + "CenteredDataForPCA".impute_20 * 0.050531740081 + "CenteredDataForPCA".impute_21 * 0.12060779802 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.265112199774 + "CenteredDataForPCA".impute_3 * -0.143164386471 + "CenteredDataForPCA".impute_4 * -0.0230099001406 + "CenteredDataForPCA".impute_5 * -0.0179105859616 + "CenteredDataForPCA".impute_6 * -0.136315976383 + "CenteredDataForPCA".impute_7 * 0.01218124094 + "CenteredDataForPCA".impute_8 * -0.282731899118 + "CenteredDataForPCA".impute_9 * -0.135871256952 + "CenteredDataForPCA".impute_10 * -0.0927488265305 + "CenteredDataForPCA".impute_11 * -0.0465059946859 + "CenteredDataForPCA".impute_12 * -0.0723468143372 + "CenteredDataForPCA".impute_13 * 0.418541720945 + "CenteredDataForPCA".impute_14 * 0.197977271959 + "CenteredDataForPCA".impute_15 * 0.0630902564944 + "CenteredDataForPCA".impute_16 * 0.597704807965 + "CenteredDataForPCA".impute_17 * -0.108418866287 + "CenteredDataForPCA".impute_18 * -0.000812432704816 + "CenteredDataForPCA".impute_19 * 0.379174160944 + "CenteredDataForPCA".impute_20 * -0.161900894913 + "CenteredDataForPCA".impute_21 * -0.133781251129 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.259767635602 + "CenteredDataForPCA".impute_3 * 0.144563206754 + "CenteredDataForPCA".impute_4 * -0.040557699049 + "CenteredDataForPCA".impute_5 * -0.0681136235605 + "CenteredDataForPCA".impute_6 * -0.250947723569 + "CenteredDataForPCA".impute_7 * 0.231033153754 + "CenteredDataForPCA".impute_8 * 0.147010077169 + "CenteredDataForPCA".impute_9 * -0.0848739337436 + "CenteredDataForPCA".impute_10 * 0.0712418268387 + "CenteredDataForPCA".impute_11 * 0.0037317130606 + "CenteredDataForPCA".impute_12 * 0.00878612372488 + "CenteredDataForPCA".impute_13 * 0.0955850129817 + "CenteredDataForPCA".impute_14 * 0.4752296353 + "CenteredDataForPCA".impute_15 * 0.57007910403 + "CenteredDataForPCA".impute_16 * -0.22849943386 + "CenteredDataForPCA".impute_17 * 0.118383656407 + "CenteredDataForPCA".impute_18 * 0.121749853279 + "CenteredDataForPCA".impute_19 * 0.28106602664 + "CenteredDataForPCA".impute_20 * 0.144819580537 + "CenteredDataForPCA".impute_21 * 0.118382012165 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.320746717013 + "CenteredDataForPCA".impute_3 * -0.0762583432428 + "CenteredDataForPCA".impute_4 * -0.00196054908473 + "CenteredDataForPCA".impute_5 * -0.135833174557 + "CenteredDataForPCA".impute_6 * -0.520655738346 + "CenteredDataForPCA".impute_7 * 0.35525669182 + "CenteredDataForPCA".impute_8 * 0.520981551261 + "CenteredDataForPCA".impute_9 * -0.1954641114 + "CenteredDataForPCA".impute_10 * 0.00710824875118 + "CenteredDataForPCA".impute_11 * 0.00550934534124 + "CenteredDataForPCA".impute_12 * 0.0256409047898 + "CenteredDataForPCA".impute_13 * -0.0416396891741 + "CenteredDataForPCA".impute_14 * -0.00507918004737 + "CenteredDataForPCA".impute_15 * -0.371549643852 + "CenteredDataForPCA".impute_16 * 0.0126338088008 + "CenteredDataForPCA".impute_17 * 0.0243899959042 + "CenteredDataForPCA".impute_18 * 0.144012109385 + "CenteredDataForPCA".impute_19 * -0.0528209340696 + "CenteredDataForPCA".impute_20 * -0.0220793308261 + "CenteredDataForPCA".impute_21 * -0.0248061822355 AS anoova_15, "CenteredDataForPCA".impute_2 * 0.110344664393 + "CenteredDataForPCA".impute_3 * 0.163783458833 + "CenteredDataForPCA".impute_4 * -0.0994891324552 + "CenteredDataForPCA".impute_5 * 0.03110285434 + "CenteredDataForPCA".impute_6 * 0.346147880763 + "CenteredDataForPCA".impute_7 * 0.143826826937 + "CenteredDataForPCA".impute_8 * 0.42848426407 + "CenteredDataForPCA".impute_9 * 0.0983769993989 + "CenteredDataForPCA".impute_10 * 0.0577291712358 + "CenteredDataForPCA".impute_11 * -0.0378651646954 + "CenteredDataForPCA".impute_12 * -0.0426808793083 + "CenteredDataForPCA".impute_13 * -0.0948303194427 + "CenteredDataForPCA".impute_14 * 0.260590082026 + "CenteredDataForPCA".impute_15 * 0.0981962304956 + "CenteredDataForPCA".impute_16 * 0.529897035243 + "CenteredDataForPCA".impute_17 * 0.160751530433 + "CenteredDataForPCA".impute_18 * -0.125315121644 + "CenteredDataForPCA".impute_19 * -0.304911809605 + "CenteredDataForPCA".impute_20 * -0.297538154638 + "CenteredDataForPCA".impute_21 * 0.139232596254 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.489455650457 + "CenteredDataForPCA".impute_3 * -0.18079129159 + "CenteredDataForPCA".impute_4 * -0.00498436839645 + "CenteredDataForPCA".impute_5 * -0.40097429114 + "CenteredDataForPCA".impute_6 * 0.116868374227 + "CenteredDataForPCA".impute_7 * 5.32097359485e-05 + "CenteredDataForPCA".impute_8 * -0.173000226138 + "CenteredDataForPCA".impute_9 * 0.0888685347121 + "CenteredDataForPCA".impute_10 * -0.304278775735 + "CenteredDataForPCA".impute_11 * -0.0314695519244 + "CenteredDataForPCA".impute_12 * -0.0250947207949 + "CenteredDataForPCA".impute_13 * -0.256725717276 + "CenteredDataForPCA".impute_14 * 0.407658306307 + "CenteredDataForPCA".impute_15 * 0.197500103482 + "CenteredDataForPCA".impute_16 * -0.201357416508 + "CenteredDataForPCA".impute_17 * -0.0555315189917 + "CenteredDataForPCA".impute_18 * -0.0364359548402 + "CenteredDataForPCA".impute_19 * -0.297399597792 + "CenteredDataForPCA".impute_20 * -0.0714380775996 + "CenteredDataForPCA".impute_21 * -0.10791731445 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.102065350867 + "CenteredDataForPCA".impute_3 * 0.243912802099 + "CenteredDataForPCA".impute_4 * -0.128252456432 + "CenteredDataForPCA".impute_5 * 0.306924895309 + "CenteredDataForPCA".impute_6 * -0.0708458516432 + "CenteredDataForPCA".impute_7 * -0.033246746526 + "CenteredDataForPCA".impute_8 * -0.169567611315 + "CenteredDataForPCA".impute_9 * -0.46610178995 + "CenteredDataForPCA".impute_10 * -0.272581993023 + "CenteredDataForPCA".impute_11 * -0.00456910964689 + "CenteredDataForPCA".impute_12 * -0.02684079664 + "CenteredDataForPCA".impute_13 * 0.0326715447565 + "CenteredDataForPCA".impute_14 * 0.128304464739 + "CenteredDataForPCA".impute_15 * -0.0524181633939 + "CenteredDataForPCA".impute_16 * 0.125820604663 + "CenteredDataForPCA".impute_17 * 0.178920626615 + "CenteredDataForPCA".impute_18 * -0.169181361117 + "CenteredDataForPCA".impute_19 * -0.337045580191 + "CenteredDataForPCA".impute_20 * 0.512735063995 + "CenteredDataForPCA".impute_21 * 0.137938379032 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.0497901501858 + "CenteredDataForPCA".impute_3 * -0.164144912135 + "CenteredDataForPCA".impute_4 * -0.00600681558599 + "CenteredDataForPCA".impute_5 * -0.306798068518 + "CenteredDataForPCA".impute_6 * 0.18552324804 + "CenteredDataForPCA".impute_7 * 0.363069407531 + "CenteredDataForPCA".impute_8 * 0.138089247786 + "CenteredDataForPCA".impute_9 * -0.0233262599265 + "CenteredDataForPCA".impute_10 * 0.0170234298927 + "CenteredDataForPCA".impute_11 * 0.00343865918747 + "CenteredDataForPCA".impute_12 * -0.00134729875426 + "CenteredDataForPCA".impute_13 * 0.221311761936 + "CenteredDataForPCA".impute_14 * -0.215820984363 + "CenteredDataForPCA".impute_15 * 0.0855464374926 + "CenteredDataForPCA".impute_16 * -0.0336372648748 + "CenteredDataForPCA".impute_17 * -0.0766056436787 + "CenteredDataForPCA".impute_18 * -0.682528407494 + "CenteredDataForPCA".impute_19 * 0.0714850802426 + "CenteredDataForPCA".impute_20 * 0.297261296127 + "CenteredDataForPCA".impute_21 * -0.145143694157 AS anoova_19, "CenteredDataForPCA".impute_2 * 1.62864536587e-16 + "CenteredDataForPCA".impute_3 * -0.24621444169 + "CenteredDataForPCA".impute_4 * -0.552818755915 + "CenteredDataForPCA".impute_5 * -6.15826833972e-17 + "CenteredDataForPCA".impute_6 * 3.98986399475e-17 + "CenteredDataForPCA".impute_7 * 1.49186218934e-16 + "CenteredDataForPCA".impute_8 * 3.15719672628e-16 + "CenteredDataForPCA".impute_9 * 2.77555756156e-17 + "CenteredDataForPCA".impute_10 * 2.77555756156e-16 + "CenteredDataForPCA".impute_11 * 0.328069783741 + "CenteredDataForPCA".impute_12 * 0.121818051727 + "CenteredDataForPCA".impute_13 * -2.77555756156e-17 + "CenteredDataForPCA".impute_14 * 1.73472347598e-16 + "CenteredDataForPCA".impute_15 * -3.46944695195e-18 + "CenteredDataForPCA".impute_16 * 6.24500451352e-17 + "CenteredDataForPCA".impute_17 * -0.457579304271 + "CenteredDataForPCA".impute_18 * -7.2858385991e-17 + "CenteredDataForPCA".impute_19 * -5.55111512313e-17 + "CenteredDataForPCA".impute_20 * 3.55618312575e-17 + "CenteredDataForPCA".impute_21 * 0.549473958787 AS anoova_20, "CenteredDataForPCA".impute_2 * 9.341267858e-17 + "CenteredDataForPCA".impute_3 * 0.127513798556 + "CenteredDataForPCA".impute_4 * -0.205963987389 + "CenteredDataForPCA".impute_5 * -3.82072845584e-16 + "CenteredDataForPCA".impute_6 * 9.54097911787e-18 + "CenteredDataForPCA".impute_7 * -1.82145964978e-16 + "CenteredDataForPCA".impute_8 * -1.21430643318e-16 + "CenteredDataForPCA".impute_9 * 1.15142270718e-16 + "CenteredDataForPCA".impute_10 * -6.59194920871e-17 + "CenteredDataForPCA".impute_11 * -0.687399789805 + "CenteredDataForPCA".impute_12 * 0.652408433997 + "CenteredDataForPCA".impute_13 * 8.67361737988e-17 + "CenteredDataForPCA".impute_14 * -8.15320033709e-17 + "CenteredDataForPCA".impute_15 * -1.21430643318e-17 + "CenteredDataForPCA".impute_16 * -6.93889390391e-17 + "CenteredDataForPCA".impute_17 * -0.201187747719 + "CenteredDataForPCA".impute_18 * 1.80411241502e-16 + "CenteredDataForPCA".impute_19 * -5.81132364452e-17 + "CenteredDataForPCA".impute_20 * -1.56992474576e-16 + "CenteredDataForPCA".impute_21 * -0.0518393814686 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.13270176947116852) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.9986902475357056) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= 0.42526325583457947) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.7160258889198303) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.075823113322258) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.4790235757827759) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= -0.9183119535446167) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.13270176947116852 AS threshold, 64 AS count, 0 AS depth, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.29 AS "Proba_1", -1.237874356 AS "LogProba_1", 0.17 AS "Proba_2", -1.77195684193 AS "LogProba_2", 0.29 AS "Proba_3", -1.237874356 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 0.9986902475357056 AS threshold, 37 AS count, 1 AS depth, 0.3968253968253968 AS "Proba_0", -0.924258901523 AS "LogProba_0", 0.36507936507936506 AS "Proba_1", -1.00764051046 AS "LogProba_1", 0.1111111111111111 AS "Proba_2", -2.19722457734 AS "LogProba_2", 0.12698412698412698 AS "Proba_3", -2.06369318471 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_17' AS feature, 0.42526325583457947 AS threshold, 27 AS count, 2 AS depth, 0.5454545454545454 AS "Proba_0", -0.60613580357 AS "LogProba_0", 0.20454545454545456 AS "Proba_1", -1.58696505658 AS "LogProba_1", 0.06818181818181818 AS "Proba_2", -2.68557734525 AS "LogProba_2", 0.18181818181818182 AS "Proba_3", -1.70474809224 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, 0.7666666666666667 AS "Proba_0", -0.265703165733 AS "LogProba_0", 0.06666666666666667 AS "Proba_1", -2.7080502011 AS "LogProba_1", 0.03333333333333333 AS "Proba_2", -3.40119738166 AS "LogProba_2", 0.13333333333333333 AS "Proba_3", -2.01490302054 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.07142857142857142 AS "Proba_0", -2.63905732962 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.14285714285714285 AS "Proba_2", -1.94591014906 AS "LogProba_2", 0.2857142857142857 AS "Proba_3", -1.2527629685 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_3' AS feature, -0.7160258889198303 AS threshold, 10 AS count, 2 AS depth, 0.05263157894736842 AS "Proba_0", -2.94443897917 AS "LogProba_0", 0.7368421052631579 AS "Proba_1", -0.305381649551 AS "LogProba_1", 0.21052631578947367 AS "Proba_2", -1.55814461805 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 0.06666666666666667 AS "Proba_0", -2.7080502011 AS "LogProba_0", 0.9333333333333333 AS "Proba_1", -0.068992871487 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_4' AS feature, 0.075823113322258 AS threshold, 27 AS count, 1 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.16216216216216217 AS "Proba_1", -1.81915844342 AS "LogProba_1", 0.2702702702702703 AS "Proba_2", -1.30833281965 AS "LogProba_2", 0.5675675675675675 AS "Proba_3", -0.566395474921 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_18' AS feature, -0.4790235757827759 AS threshold, 15 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.21052631578947367 AS "Proba_1", -1.55814461805 AS "LogProba_1", 0.47368421052631576 AS "Proba_2", -0.74721440183 AS "LogProba_2", 0.3157894736842105 AS "Proba_3", -1.15267950994 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.36363636363636365 AS "Proba_1", -1.01160091168 AS "LogProba_1", 0.09090909090909091 AS "Proba_2", -2.3978952728 AS "LogProba_2", 0.5454545454545454 AS "Proba_3", -0.60613580357 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_17' AS feature, -0.9183119535446167 AS threshold, 12 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.1111111111111111 AS "Proba_1", -2.19722457734 AS "LogProba_1", 0.05555555555555555 AS "Proba_2", -2.8903717579 AS "LogProba_2", 0.8333333333333334 AS "Proba_3", -0.182321556794 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.6666666666666666 AS "Proba_1", -0.405465108108 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.3333333333333333 AS "Proba_3", -1.09861228867 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.06666666666666667 AS "Proba_2", -2.7080502011 AS "LogProba_2", 0.9333333333333333 AS "Proba_3", -0.068992871487 AS "LogProba_3", 3 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Proba_3" AS "Proba_3", "DT_node_data"."LogProba_3" AS "LogProba_3", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0" AS "Proba_0_0", "DT_Output"."LogProba_0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1" AS "Proba_0_1", "DT_Output"."LogProba_1" AS "LogProba_0_1", CAST(NULL AS FLOAT) AS "Score_0_2", "DT_Output"."Proba_2" AS "Proba_0_2", "DT_Output"."LogProba_2" AS "LogProba_0_2", CAST(NULL AS FLOAT) AS "Score_0_3", "DT_Output"."Proba_3" AS "Proba_0_3", "DT_Output"."LogProba_3" AS "LogProba_0_3" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.0381440594792366) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 1.4614813327789307) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.6116892695426941) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.21983739733695984) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.8853206634521484) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.7071307897567749) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -0.0381440594792366 AS threshold, 64 AS count, 0 AS depth, 0.35 AS "Proba_0", -1.0498221245 AS "LogProba_0", 0.19 AS "Proba_1", -1.66073120682 AS "LogProba_1", 0.2 AS "Proba_2", -1.60943791243 AS "LogProba_2", 0.26 AS "Proba_3", -1.34707364797 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 1.4614813327789307 AS threshold, 35 AS count, 1 AS depth, 0.10638297872340426 AS "Proba_0", -2.24070968928 AS "LogProba_0", 0.23404255319148937 AS "Proba_1", -1.45225232891 AS "LogProba_1", 0.1702127659574468 AS "Proba_2", -1.77070606003 AS "LogProba_2", 0.48936170212765956 AS "Proba_3", -0.714653385781 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_16' AS feature, 0.6116892695426941 AS threshold, 29 AS count, 2 AS depth, 0.13513513513513514 AS "Proba_0", -2.00148000021 AS "LogProba_0", 0.2972972972972973 AS "Proba_1", -1.21302263985 AS "LogProba_1", 0.21621621621621623 AS "Proba_2", -1.53147637096 AS "LogProba_2", 0.35135135135135137 AS "Proba_3", -1.04596855518 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 0.15384615384615385 AS "Proba_0", -1.8718021769 AS "LogProba_0", 0.4230769230769231 AS "Proba_1", -0.860201265223 AS "LogProba_1", 0.2692307692307692 AS "Proba_2", -1.31218638897 AS "LogProba_2", 0.15384615384615385 AS "Proba_3", -1.8718021769 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.09090909090909091 AS "Proba_0", -2.3978952728 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.09090909090909091 AS "Proba_2", -2.3978952728 AS "LogProba_2", 0.8181818181818182 AS "Proba_3", -0.200670695462 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_3' AS feature, 0.21983739733695984 AS threshold, 29 AS count, 1 AS depth, 0.5660377358490566 AS "Proba_0", -0.56909453189 AS "LogProba_0", 0.1509433962264151 AS "Proba_1", -1.89085037187 AS "LogProba_1", 0.22641509433962265 AS "Proba_2", -1.48538526376 AS "LogProba_2", 0.05660377358490566 AS "Proba_3", -2.87167962488 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, 'anoova_4' AS feature, 1.8853206634521484 AS threshold, 18 AS count, 2 AS depth, 0.7567567567567568 AS "Proba_0", -0.278713402469 AS "LogProba_0", 0.21621621621621623 AS "Proba_1", -1.53147637096 AS "LogProba_1", 0.02702702702702703 AS "Proba_2", -3.61091791264 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, 0.9333333333333333 AS "Proba_0", -0.068992871487 AS "LogProba_0", 0.03333333333333333 AS "Proba_1", -3.40119738166 AS "LogProba_1", 0.03333333333333333 AS "Proba_2", -3.40119738166 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 10 AS node_id, 'anoova_6' AS feature, -0.7071307897567749 AS threshold, 11 AS count, 2 AS depth, 0.125 AS "Proba_0", -2.07944154168 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.6875 AS "Proba_2", -0.374693449441 AS "LogProba_2", 0.1875 AS "Proba_3", -1.67397643357 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.5 AS "Proba_3", -0.69314718056 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.9166666666666666 AS "Proba_2", -0.0870113769896 AS "LogProba_2", 0.08333333333333333 AS "Proba_3", -2.48490664979 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Proba_3" AS "Proba_3", "DT_node_data_1"."LogProba_3" AS "LogProba_3", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0" AS "Proba_1_0", "DT_Output_1"."LogProba_0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1" AS "Proba_1_1", "DT_Output_1"."LogProba_1" AS "LogProba_1_1", CAST(NULL AS FLOAT) AS "Score_1_2", "DT_Output_1"."Proba_2" AS "Proba_1_2", "DT_Output_1"."LogProba_2" AS "LogProba_1_2", CAST(NULL AS FLOAT) AS "Score_1_3", "DT_Output_1"."Proba_3" AS "Proba_1_3", "DT_Output_1"."LogProba_3" AS "LogProba_1_3" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.21983739733695984) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.7439842224121094) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.9385080337524414) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -1.1632684469223022) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.21311812102794647) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 2.3956427574157715) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.360162615776062) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.21983739733695984 AS threshold, 64 AS count, 0 AS depth, 0.33 AS "Proba_0", -1.10866262452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.22 AS "Proba_2", -1.51412773263 AS "LogProba_2", 0.2 AS "Proba_3", -1.60943791243 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 1.7439842224121094 AS threshold, 36 AS count, 1 AS depth, 0.5423728813559322 AS "Proba_0", -0.611801541106 AS "LogProba_0", 0.2711864406779661 AS "Proba_1", -1.30494872167 AS "LogProba_1", 0.0847457627118644 AS "Proba_2", -2.46809953147 AS "LogProba_2", 0.1016949152542373 AS "Proba_3", -2.28577797468 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -0.9385080337524414 AS threshold, 29 AS count, 2 AS depth, 0.6595744680851063 AS "Proba_0", -0.416160397225 AS "LogProba_0", 0.14893617021276595 AS "Proba_1", -1.90423745265 AS "LogProba_1", 0.06382978723404255 AS "Proba_2", -2.75153531304 AS "LogProba_2", 0.1276595744680851 AS "Proba_3", -2.05838813248 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.375 AS "Proba_1", -0.980829253012 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.375 AS "Proba_3", -0.980829253012 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, 0.8709677419354839 AS "Proba_0", -0.138150338481 AS "LogProba_0", 0.03225806451612903 AS "Proba_1", -3.43398720449 AS "LogProba_1", 0.0967741935483871 AS "Proba_2", -2.33537491582 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_9' AS feature, -1.1632684469223022 AS threshold, 7 AS count, 2 AS depth, 0.08333333333333333 AS "Proba_0", -2.48490664979 AS "LogProba_0", 0.75 AS "Proba_1", -0.287682072452 AS "LogProba_1", 0.16666666666666666 AS "Proba_2", -1.79175946923 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.1 AS "Proba_0", -2.30258509299 AS "LogProba_0", 0.9 AS "Proba_1", -0.105360515658 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_18' AS feature, -0.21311812102794647 AS threshold, 28 AS count, 1 AS depth, 0.024390243902439025 AS "Proba_0", -3.7135720667 AS "LogProba_0", 0.21951219512195122 AS "Proba_1", -1.51634748937 AS "LogProba_1", 0.4146341463414634 AS "Proba_2", -0.880358722648 AS "LogProba_2", 0.34146341463414637 AS "Proba_3", -1.07451473709 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_7' AS feature, 2.3956427574157715 AS threshold, 11 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.1875 AS "Proba_1", -1.67397643357 AS "LogProba_1", 0.8125 AS "Proba_2", -0.207639364778 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.07142857142857142 AS "Proba_1", -2.63905732962 AS "LogProba_1", 0.9285714285714286 AS "Proba_2", -0.0741079721537 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_10' AS feature, 0.360162615776062 AS threshold, 17 AS count, 2 AS depth, 0.04 AS "Proba_0", -3.21887582487 AS "LogProba_0", 0.24 AS "Proba_1", -1.42711635564 AS "LogProba_1", 0.16 AS "Proba_2", -1.83258146375 AS "LogProba_2", 0.56 AS "Proba_3", -0.579818495253 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.06666666666666667 AS "Proba_0", -2.7080502011 AS "LogProba_0", 0.06666666666666667 AS "Proba_1", -2.7080502011 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.8666666666666667 AS "Proba_3", -0.143100843641 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.4 AS "Proba_2", -0.916290731874 AS "LogProba_2", 0.1 AS "Proba_3", -2.30258509299 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Proba_3" AS "Proba_3", "DT_node_data_2"."LogProba_3" AS "LogProba_3", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0" AS "Proba_2_0", "DT_Output_2"."LogProba_0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1" AS "Proba_2_1", "DT_Output_2"."LogProba_1" AS "LogProba_2_1", CAST(NULL AS FLOAT) AS "Score_2_2", "DT_Output_2"."Proba_2" AS "Proba_2_2", "DT_Output_2"."LogProba_2" AS "LogProba_2_2", CAST(NULL AS FLOAT) AS "Score_2_3", "DT_Output_2"."Proba_3" AS "Proba_2_3", "DT_Output_2"."LogProba_3" AS "LogProba_2_3" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.6168582439422607) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.5351554155349731) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= 0.7329843640327454) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -2.544595241546631) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.39494186639785767) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 1.2104623317718506) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.3394160866737366) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.6168582439422607 AS threshold, 62 AS count, 0 AS depth, 0.24 AS "Proba_0", -1.42711635564 AS "LogProba_0", 0.23 AS "Proba_1", -1.46967597006 AS "LogProba_1", 0.29 AS "Proba_2", -1.237874356 AS "LogProba_2", 0.24 AS "Proba_3", -1.42711635564 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, -0.5351554155349731 AS threshold, 41 AS count, 1 AS depth, 0.375 AS "Proba_0", -0.980829253012 AS "LogProba_0", 0.3125 AS "Proba_1", -1.16315080981 AS "LogProba_1", 0.125 AS "Proba_2", -2.07944154168 AS "LogProba_2", 0.1875 AS "Proba_3", -1.67397643357 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_12' AS feature, 0.7329843640327454 AS threshold, 17 AS count, 2 AS depth, 0.7037037037037037 AS "Proba_0", -0.351397886838 AS "LogProba_0", 0.037037037037037035 AS "Proba_1", -3.295836866 AS "LogProba_1", 0.14814814814814814 AS "Proba_2", -1.90954250488 AS "LogProba_2", 0.1111111111111111 AS "Proba_3", -2.19722457734 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, 0.9047619047619048 AS "Proba_0", -0.100083458557 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.047619047619047616 AS "Proba_2", -3.04452243772 AS "LogProba_2", 0.047619047619047616 AS "Proba_3", -3.04452243772 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.16666666666666666 AS "Proba_1", -1.79175946923 AS "LogProba_1", 0.5 AS "Proba_2", -0.69314718056 AS "LogProba_2", 0.3333333333333333 AS "Proba_3", -1.09861228867 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_2' AS feature, -2.544595241546631 AS threshold, 24 AS count, 2 AS depth, 0.13513513513513514 AS "Proba_0", -2.00148000021 AS "LogProba_0", 0.5135135135135135 AS "Proba_1", -0.666478933478 AS "LogProba_1", 0.10810810810810811 AS "Proba_2", -2.22462355152 AS "LogProba_2", 0.24324324324324326 AS "Proba_3", -1.41369333531 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, 0.16666666666666666 AS "Proba_0", -1.79175946923 AS "LogProba_0", 0.6333333333333333 AS "Proba_1", -0.456758402496 AS "LogProba_1", 0.13333333333333333 AS "Proba_2", -2.01490302054 AS "LogProba_2", 0.06666666666666667 AS "Proba_3", -2.7080502011 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_4' AS feature, -0.39494186639785767 AS threshold, 21 AS count, 1 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.08333333333333333 AS "Proba_1", -2.48490664979 AS "LogProba_1", 0.5833333333333334 AS "Proba_2", -0.538996500733 AS "LogProba_2", 0.3333333333333333 AS "Proba_3", -1.09861228867 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_10' AS feature, 1.2104623317718506 AS threshold, 11 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.09090909090909091 AS "Proba_1", -2.3978952728 AS "LogProba_1", 0.8181818181818182 AS "Proba_2", -0.200670695462 AS "LogProba_2", 0.09090909090909091 AS "Proba_3", -2.3978952728 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.9 AS "Proba_2", -0.105360515658 AS "LogProba_2", 0.1 AS "Proba_3", -2.30258509299 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_18' AS feature, -0.3394160866737366 AS threshold, 10 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.07142857142857142 AS "Proba_1", -2.63905732962 AS "LogProba_1", 0.21428571428571427 AS "Proba_2", -1.54044504095 AS "LogProba_2", 0.7142857142857143 AS "Proba_3", -0.336472236621 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.09090909090909091 AS "Proba_1", -2.3978952728 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.9090909090909091 AS "Proba_3", -0.0953101798043 AS "LogProba_3", 3 AS "Decision") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Proba_3" AS "Proba_3", "DT_node_data_3"."LogProba_3" AS "LogProba_3", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0" AS "Proba_3_0", "DT_Output_3"."LogProba_0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1" AS "Proba_3_1", "DT_Output_3"."LogProba_1" AS "LogProba_3_1", CAST(NULL AS FLOAT) AS "Score_3_2", "DT_Output_3"."Proba_2" AS "Proba_3_2", "DT_Output_3"."LogProba_2" AS "LogProba_3_2", CAST(NULL AS FLOAT) AS "Score_3_3", "DT_Output_3"."Proba_3" AS "Proba_3_3", "DT_Output_3"."LogProba_3" AS "LogProba_3_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.6142687797546387) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= 0.8889205455780029) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= 0.8157895803451538) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 1.2209575176239014) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.21311812102794647) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -1.1704604625701904) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 0.6996263265609741) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.6142687797546387 AS threshold, 65 AS count, 0 AS depth, 0.27 AS "Proba_0", -1.30933331998 AS "LogProba_0", 0.23 AS "Proba_1", -1.46967597006 AS "LogProba_1", 0.26 AS "Proba_2", -1.34707364797 AS "LogProba_2", 0.24 AS "Proba_3", -1.42711635564 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_12' AS feature, 0.8889205455780029 AS threshold, 44 AS count, 1 AS depth, 0.40298507462686567 AS "Proba_0", -0.908855753387 AS "LogProba_0", 0.31343283582089554 AS "Proba_1", -1.16017018167 AS "LogProba_1", 0.11940298507462686 AS "Proba_2", -2.12525107771 AS "LogProba_2", 0.16417910447761194 AS "Proba_3", -1.80679734659 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_13' AS feature, 0.8157895803451538 AS threshold, 36 AS count, 2 AS depth, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.18518518518518517 AS "Proba_1", -1.68639895357 AS "LogProba_1", 0.14814814814814814 AS "Proba_2", -1.90954250488 AS "LogProba_2", 0.16666666666666666 AS "Proba_3", -1.79175946923 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 0.5869565217391305 AS "Proba_0", -0.532804530485 AS "LogProba_0", 0.21739130434782608 AS "Proba_1", -1.5260563035 AS "LogProba_1", 0.13043478260869565 AS "Proba_2", -2.03688192726 AS "LogProba_2", 0.06521739130434782 AS "Proba_3", -2.73002910782 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.75 AS "Proba_3", -0.287682072452 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_5' AS feature, 1.2209575176239014 AS threshold, 8 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.8461538461538461 AS "Proba_1", -0.167054084663 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.15384615384615385 AS "Proba_3", -1.8718021769 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_18' AS feature, -0.21311812102794647 AS threshold, 21 AS count, 1 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.06060606060606061 AS "Proba_1", -2.80336038091 AS "LogProba_1", 0.5454545454545454 AS "Proba_2", -0.60613580357 AS "LogProba_2", 0.3939393939393939 AS "Proba_3", -0.931558204005 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_7' AS feature, -1.1704604625701904 AS threshold, 10 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0625 AS "Proba_1", -2.77258872224 AS "LogProba_1", 0.875 AS "Proba_2", -0.133531392625 AS "LogProba_2", 0.0625 AS "Proba_3", -2.77258872224 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.5 AS "Proba_3", -0.69314718056 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_7' AS feature, 0.6996263265609741 AS threshold, 11 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.058823529411764705 AS "Proba_1", -2.83321334406 AS "LogProba_1", 0.23529411764705882 AS "Proba_2", -1.44691898294 AS "LogProba_2", 0.7058823529411765 AS "Proba_3", -0.348306694268 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.16666666666666666 AS "Proba_1", -1.79175946923 AS "LogProba_1", 0.6666666666666666 AS "Proba_2", -0.405465108108 AS "LogProba_2", 0.16666666666666666 AS "Proba_3", -1.79175946923 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4"."Proba_0" AS "Proba_0", "DT_node_data_4"."LogProba_0" AS "LogProba_0", "DT_node_data_4"."Proba_1" AS "Proba_1", "DT_node_data_4"."LogProba_1" AS "LogProba_1", "DT_node_data_4"."Proba_2" AS "Proba_2", "DT_node_data_4"."LogProba_2" AS "LogProba_2", "DT_node_data_4"."Proba_3" AS "Proba_3", "DT_node_data_4"."LogProba_3" AS "LogProba_3", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0" AS "Proba_4_0", "DT_Output_4"."LogProba_0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1" AS "Proba_4_1", "DT_Output_4"."LogProba_1" AS "LogProba_4_1", CAST(NULL AS FLOAT) AS "Score_4_2", "DT_Output_4"."Proba_2" AS "Proba_4_2", "DT_Output_4"."LogProba_2" AS "LogProba_4_2", CAST(NULL AS FLOAT) AS "Score_4_3", "DT_Output_4"."Proba_3" AS "Proba_4_3", "DT_Output_4"."LogProba_3" AS "LogProba_4_3" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.13270176947116852) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.8526722192764282) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.6000750064849854) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -1.7557555437088013) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.075823113322258) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.7994850873947144) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.7360738515853882) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.13270176947116852 AS threshold, 63 AS count, 0 AS depth, 0.29 AS "Proba_0", -1.237874356 AS "LogProba_0", 0.22 AS "Proba_1", -1.51412773263 AS "LogProba_1", 0.22 AS "Proba_2", -1.51412773263 AS "LogProba_2", 0.27 AS "Proba_3", -1.30933331998 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 0.8526722192764282 AS threshold, 34 AS count, 1 AS depth, 0.5384615384615384 AS "Proba_0", -0.619039208406 AS "LogProba_0", 0.28846153846153844 AS "Proba_1", -1.24319351748 AS "LogProba_1", 0.09615384615384616 AS "Proba_2", -2.34180580615 AS "LogProba_2", 0.07692307692307693 AS "Proba_3", -2.56494935746 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_4' AS feature, -1.6000750064849854 AS threshold, 25 AS count, 2 AS depth, 0.3333333333333333 AS "Proba_0", -1.09861228867 AS "LogProba_0", 0.45454545454545453 AS "Proba_1", -0.788457360364 AS "LogProba_1", 0.09090909090909091 AS "Proba_2", -2.3978952728 AS "LogProba_2", 0.12121212121212122 AS "Proba_3", -2.11021320035 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.6666666666666666 AS "Proba_0", -0.405465108108 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.3333333333333333 AS "Proba_2", -1.09861228867 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, 0.20833333333333334 AS "Proba_0", -1.56861591791 AS "LogProba_0", 0.625 AS "Proba_1", -0.470003629246 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.16666666666666666 AS "Proba_3", -1.79175946923 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_14' AS feature, -1.7557555437088013 AS threshold, 9 AS count, 2 AS depth, 0.8947368421052632 AS "Proba_0", -0.11122563511 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.10526315789473684 AS "Proba_2", -2.25129179861 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_4' AS feature, 0.075823113322258 AS threshold, 29 AS count, 1 AS depth, 0.020833333333333332 AS "Proba_0", -3.87120101091 AS "LogProba_0", 0.14583333333333334 AS "Proba_1", -1.92529086185 AS "LogProba_1", 0.3541666666666667 AS "Proba_2", -1.03798766685 AS "LogProba_2", 0.4791666666666667 AS "Proba_3", -0.735706794979 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_6' AS feature, -0.7994850873947144 AS threshold, 14 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.20833333333333334 AS "Proba_1", -1.56861591791 AS "LogProba_1", 0.625 AS "Proba_2", -0.470003629246 AS "LogProba_2", 0.16666666666666666 AS "Proba_3", -1.79175946923 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.625 AS "Proba_1", -0.470003629246 AS "LogProba_1", 0.125 AS "Proba_2", -2.07944154168 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.875 AS "Proba_2", -0.133531392625 AS "LogProba_2", 0.125 AS "Proba_3", -2.07944154168 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_14' AS feature, -0.7360738515853882 AS threshold, 15 AS count, 2 AS depth, 0.041666666666666664 AS "Proba_0", -3.17805383035 AS "LogProba_0", 0.08333333333333333 AS "Proba_1", -2.48490664979 AS "LogProba_1", 0.08333333333333333 AS "Proba_2", -2.48490664979 AS "LogProba_2", 0.7916666666666666 AS "Proba_3", -0.233614851182 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.3333333333333333 AS "Proba_0", -1.09861228867 AS "LogProba_0", 0.3333333333333333 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0.3333333333333333 AS "Proba_2", -1.09861228867 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.047619047619047616 AS "Proba_1", -3.04452243772 AS "LogProba_1", 0.047619047619047616 AS "Proba_2", -3.04452243772 AS "LogProba_2", 0.9047619047619048 AS "Proba_3", -0.100083458557 AS "LogProba_3", 3 AS "Decision") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5"."Proba_0" AS "Proba_0", "DT_node_data_5"."LogProba_0" AS "LogProba_0", "DT_node_data_5"."Proba_1" AS "Proba_1", "DT_node_data_5"."LogProba_1" AS "LogProba_1", "DT_node_data_5"."Proba_2" AS "Proba_2", "DT_node_data_5"."LogProba_2" AS "LogProba_2", "DT_node_data_5"."Proba_3" AS "Proba_3", "DT_node_data_5"."LogProba_3" AS "LogProba_3", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0" AS "Proba_5_0", "DT_Output_5"."LogProba_0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1" AS "Proba_5_1", "DT_Output_5"."LogProba_1" AS "LogProba_5_1", CAST(NULL AS FLOAT) AS "Score_5_2", "DT_Output_5"."Proba_2" AS "Proba_5_2", "DT_Output_5"."LogProba_2" AS "LogProba_5_2", CAST(NULL AS FLOAT) AS "Score_5_3", "DT_Output_5"."Proba_3" AS "Proba_5_3", "DT_Output_5"."LogProba_3" AS "LogProba_5_3" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 1.4344844818115234) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.6168582439422607) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.5062954425811768) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.19749918580055237) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 1.9267479181289673) THEN 9 ELSE 10 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, 1.4344844818115234 AS threshold, 58 AS count, 0 AS depth, 0.19 AS "Proba_0", -1.66073120682 AS "LogProba_0", 0.33 AS "Proba_1", -1.10866262452 AS "LogProba_1", 0.21 AS "Proba_2", -1.56064774826 AS "LogProba_2", 0.27 AS "Proba_3", -1.30933331998 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 0.6168582439422607 AS threshold, 50 AS count, 1 AS depth, 0.2235294117647059 AS "Proba_0", -1.49821227732 AS "LogProba_0", 0.3764705882352941 AS "Proba_1", -0.976915353691 AS "LogProba_1", 0.24705882352941178 AS "Proba_2", -1.39812881877 AS "LogProba_2", 0.15294117647058825 AS "Proba_3", -1.87770189903 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, -0.5062954425811768 AS threshold, 35 AS count, 2 AS depth, 0.31666666666666665 AS "Proba_0", -1.14990558306 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.11666666666666667 AS "Proba_2", -2.14843441317 AS "LogProba_2", 0.06666666666666667 AS "Proba_3", -2.7080502011 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.09090909090909091 AS "Proba_0", -2.3978952728 AS "LogProba_0", 0.8181818181818182 AS "Proba_1", -0.200670695462 AS "LogProba_1", 0.045454545454545456 AS "Proba_2", -3.09104245336 AS "LogProba_2", 0.045454545454545456 AS "Proba_3", -3.09104245336 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, 0.4473684210526316 AS "Proba_0", -0.80437281567 AS "LogProba_0", 0.3157894736842105 AS "Proba_1", -1.15267950994 AS "LogProba_1", 0.15789473684210525 AS "Proba_2", -1.8458266905 AS "LogProba_2", 0.07894736842105263 AS "Proba_3", -2.53897387106 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_4' AS feature, 0.19749918580055237 AS threshold, 15 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.08 AS "Proba_1", -2.52572864431 AS "LogProba_1", 0.56 AS "Proba_2", -0.579818495253 AS "LogProba_2", 0.36 AS "Proba_3", -1.02165124753 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.058823529411764705 AS "Proba_1", -2.83321334406 AS "LogProba_1", 0.8235294117647058 AS "Proba_2", -0.194156014441 AS "LogProba_2", 0.11764705882352941 AS "Proba_3", -2.1400661635 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.125 AS "Proba_1", -2.07944154168 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.875 AS "Proba_3", -0.133531392625 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_7' AS feature, 1.9267479181289673 AS threshold, 8 AS count, 1 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.06666666666666667 AS "Proba_1", -2.7080502011 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.9333333333333333 AS "Proba_3", -0.068992871487 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6"."Proba_0" AS "Proba_0", "DT_node_data_6"."LogProba_0" AS "LogProba_0", "DT_node_data_6"."Proba_1" AS "Proba_1", "DT_node_data_6"."LogProba_1" AS "LogProba_1", "DT_node_data_6"."Proba_2" AS "Proba_2", "DT_node_data_6"."LogProba_2" AS "LogProba_2", "DT_node_data_6"."Proba_3" AS "Proba_3", "DT_node_data_6"."LogProba_3" AS "LogProba_3", "DT_node_data_6"."Decision" AS "Decision" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, CAST(NULL AS FLOAT) AS "Score_6_0", "DT_Output_6"."Proba_0" AS "Proba_6_0", "DT_Output_6"."LogProba_0" AS "LogProba_6_0", CAST(NULL AS FLOAT) AS "Score_6_1", "DT_Output_6"."Proba_1" AS "Proba_6_1", "DT_Output_6"."LogProba_1" AS "LogProba_6_1", CAST(NULL AS FLOAT) AS "Score_6_2", "DT_Output_6"."Proba_2" AS "Proba_6_2", "DT_Output_6"."LogProba_2" AS "LogProba_6_2", CAST(NULL AS FLOAT) AS "Score_6_3", "DT_Output_6"."Proba_3" AS "Proba_6_3", "DT_Output_6"."LogProba_3" AS "LogProba_6_3" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.054679304361343384) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.8721418380737305) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -2.5346360206604004) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= 0.5124351978302002) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.3683549463748932) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.6859289407730103) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.1949119567871094) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.054679304361343384 AS threshold, 64 AS count, 0 AS depth, 0.27 AS "Proba_0", -1.30933331998 AS "LogProba_0", 0.22 AS "Proba_1", -1.51412773263 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.26 AS "Proba_3", -1.34707364797 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 1.8721418380737305 AS threshold, 32 AS count, 1 AS depth, 0.46 AS "Proba_0", -0.776528789499 AS "LogProba_0", 0.36 AS "Proba_1", -1.02165124753 AS "LogProba_1", 0.06 AS "Proba_2", -2.81341071676 AS "LogProba_2", 0.12 AS "Proba_3", -2.1202635362 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -2.5346360206604004 AS threshold, 23 AS count, 2 AS depth, 0.2571428571428571 AS "Proba_0", -1.35812348415 AS "LogProba_0", 0.5142857142857142 AS "Proba_1", -0.664976303593 AS "LogProba_1", 0.05714285714285714 AS "Proba_2", -2.86220088093 AS "LogProba_2", 0.17142857142857143 AS "Proba_3", -1.76358859226 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, 0.3 AS "Proba_0", -1.20397280433 AS "LogProba_0", 0.6 AS "Proba_1", -0.510825623766 AS "LogProba_1", 0.06666666666666667 AS "Proba_2", -2.7080502011 AS "LogProba_2", 0.03333333333333333 AS "Proba_3", -3.40119738166 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_17' AS feature, 0.5124351978302002 AS threshold, 9 AS count, 2 AS depth, 0.9333333333333333 AS "Proba_0", -0.068992871487 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.06666666666666667 AS "Proba_2", -2.7080502011 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_4' AS feature, -0.3683549463748932 AS threshold, 32 AS count, 1 AS depth, 0.08 AS "Proba_0", -2.52572864431 AS "LogProba_0", 0.08 AS "Proba_1", -2.52572864431 AS "LogProba_1", 0.44 AS "Proba_2", -0.82098055207 AS "LogProba_2", 0.4 AS "Proba_3", -0.916290731874 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_14' AS feature, -0.6859289407730103 AS threshold, 14 AS count, 2 AS depth, 0.13636363636363635 AS "Proba_0", -1.99243016469 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.7272727272727273 AS "Proba_2", -0.318453731119 AS "LogProba_2", 0.13636363636363635 AS "Proba_3", -1.99243016469 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.16666666666666666 AS "Proba_2", -1.79175946923 AS "LogProba_2", 0.3333333333333333 AS "Proba_3", -1.09861228867 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.9375 AS "Proba_2", -0.0645385211376 AS "LogProba_2", 0.0625 AS "Proba_3", -2.77258872224 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_2' AS feature, 1.1949119567871094 AS threshold, 18 AS count, 2 AS depth, 0.03571428571428571 AS "Proba_0", -3.33220451018 AS "LogProba_0", 0.14285714285714285 AS "Proba_1", -1.94591014906 AS "LogProba_1", 0.21428571428571427 AS "Proba_2", -1.54044504095 AS "LogProba_2", 0.6071428571428571 AS "Proba_3", -0.498991166119 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, 0.045454545454545456 AS "Proba_0", -3.09104245336 AS "LogProba_0", 0.18181818181818182 AS "Proba_1", -1.70474809224 AS "LogProba_1", 0.045454545454545456 AS "Proba_2", -3.09104245336 AS "LogProba_2", 0.7272727272727273 AS "Proba_3", -0.318453731119 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.8333333333333334 AS "Proba_2", -0.182321556794 AS "LogProba_2", 0.16666666666666666 AS "Proba_3", -1.79175946923 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7"."Proba_0" AS "Proba_0", "DT_node_data_7"."LogProba_0" AS "LogProba_0", "DT_node_data_7"."Proba_1" AS "Proba_1", "DT_node_data_7"."LogProba_1" AS "LogProba_1", "DT_node_data_7"."Proba_2" AS "Proba_2", "DT_node_data_7"."LogProba_2" AS "LogProba_2", "DT_node_data_7"."Proba_3" AS "Proba_3", "DT_node_data_7"."LogProba_3" AS "LogProba_3", "DT_node_data_7"."Decision" AS "Decision" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, CAST(NULL AS FLOAT) AS "Score_7_0", "DT_Output_7"."Proba_0" AS "Proba_7_0", "DT_Output_7"."LogProba_0" AS "LogProba_7_0", CAST(NULL AS FLOAT) AS "Score_7_1", "DT_Output_7"."Proba_1" AS "Proba_7_1", "DT_Output_7"."LogProba_1" AS "LogProba_7_1", CAST(NULL AS FLOAT) AS "Score_7_2", "DT_Output_7"."Proba_2" AS "Proba_7_2", "DT_Output_7"."LogProba_2" AS "LogProba_7_2", CAST(NULL AS FLOAT) AS "Score_7_3", "DT_Output_7"."Proba_3" AS "Proba_7_3", "DT_Output_7"."LogProba_3" AS "LogProba_7_3" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -2.533940315246582) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.9399403929710388) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -1.470948338508606) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 1.7004544734954834) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -2.533940315246582 AS threshold, 65 AS count, 0 AS depth, 0.24 AS "Proba_0", -1.42711635564 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.28 AS "Proba_2", -1.27296567581 AS "LogProba_2", 0.23 AS "Proba_3", -1.46967597006 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -0.9399403929710388 AS threshold, 59 AS count, 1 AS depth, 0.12643678160919541 AS "Proba_0", -2.06801284586 AS "LogProba_0", 0.28735632183908044 AS "Proba_1", -1.24703229379 AS "LogProba_1", 0.3218390804597701 AS "Proba_2", -1.13370360848 AS "LogProba_2", 0.26436781609195403 AS "Proba_3", -1.33041390273 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 3 AS node_id, 'anoova_9' AS feature, -1.470948338508606 AS threshold, 17 AS count, 2 AS depth, 0.06666666666666667 AS "Proba_0", -2.7080502011 AS "LogProba_0", 0.6666666666666666 AS "Proba_1", -0.405465108108 AS "LogProba_1", 0.16666666666666666 AS "Proba_2", -1.79175946923 AS "LogProba_2", 0.1 AS "Proba_3", -2.30258509299 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, 0.08 AS "Proba_0", -2.52572864431 AS "LogProba_0", 0.8 AS "Proba_1", -0.223143551314 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.12 AS "Proba_3", -2.1202635362 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_10' AS feature, 1.7004544734954834 AS threshold, 42 AS count, 2 AS depth, 0.15789473684210525 AS "Proba_0", -1.8458266905 AS "LogProba_0", 0.08771929824561403 AS "Proba_1", -2.4336133554 AS "LogProba_1", 0.40350877192982454 AS "Proba_2", -0.907557051905 AS "LogProba_2", 0.3508771929824561 AS "Proba_3", -1.04731899428 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 0.06 AS "Proba_0", -2.81341071676 AS "LogProba_0", 0.08 AS "Proba_1", -2.52572864431 AS "LogProba_1", 0.46 AS "Proba_2", -0.776528789499 AS "LogProba_2", 0.4 AS "Proba_3", -0.916290731874 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.8571428571428571 AS "Proba_0", -0.154150679827 AS "LogProba_0", 0.14285714285714285 AS "Proba_1", -1.94591014906 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8"."Proba_0" AS "Proba_0", "DT_node_data_8"."LogProba_0" AS "LogProba_0", "DT_node_data_8"."Proba_1" AS "Proba_1", "DT_node_data_8"."LogProba_1" AS "LogProba_1", "DT_node_data_8"."Proba_2" AS "Proba_2", "DT_node_data_8"."LogProba_2" AS "LogProba_2", "DT_node_data_8"."Proba_3" AS "Proba_3", "DT_node_data_8"."LogProba_3" AS "LogProba_3", "DT_node_data_8"."Decision" AS "Decision" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, CAST(NULL AS FLOAT) AS "Score_8_0", "DT_Output_8"."Proba_0" AS "Proba_8_0", "DT_Output_8"."LogProba_0" AS "LogProba_8_0", CAST(NULL AS FLOAT) AS "Score_8_1", "DT_Output_8"."Proba_1" AS "Proba_8_1", "DT_Output_8"."LogProba_1" AS "LogProba_8_1", CAST(NULL AS FLOAT) AS "Score_8_2", "DT_Output_8"."Proba_2" AS "Proba_8_2", "DT_Output_8"."LogProba_2" AS "LogProba_8_2", CAST(NULL AS FLOAT) AS "Score_8_3", "DT_Output_8"."Proba_3" AS "Proba_8_3", "DT_Output_8"."LogProba_3" AS "LogProba_8_3" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.324170857667923) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= 0.39368149638175964) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.873131513595581) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.219987154006958) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.18813681602478027) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.38771048188209534) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= 0.25445103645324707) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.324170857667923 AS threshold, 61 AS count, 0 AS depth, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.24 AS "Proba_1", -1.42711635564 AS "LogProba_1", 0.28 AS "Proba_2", -1.27296567581 AS "LogProba_2", 0.23 AS "Proba_3", -1.46967597006 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_17' AS feature, 0.39368149638175964 AS threshold, 35 AS count, 1 AS depth, 0.4107142857142857 AS "Proba_0", -0.889857474806 AS "LogProba_0", 0.3392857142857143 AS "Proba_1", -1.08091271157 AS "LogProba_1", 0.14285714285714285 AS "Proba_2", -1.94591014906 AS "LogProba_2", 0.10714285714285714 AS "Proba_3", -2.23359222151 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_4' AS feature, 1.873131513595581 AS threshold, 24 AS count, 2 AS depth, 0.6 AS "Proba_0", -0.510825623766 AS "LogProba_0", 0.22857142857142856 AS "Proba_1", -1.47590651981 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.17142857142857143 AS "Proba_3", -1.76358859226 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 0.7 AS "Proba_0", -0.356674943939 AS "LogProba_0", 0.1 AS "Proba_1", -2.30258509299 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.2 AS "Proba_3", -1.60943791243 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_4' AS feature, 1.219987154006958 AS threshold, 11 AS count, 2 AS depth, 0.09523809523809523 AS "Proba_0", -2.35137525716 AS "LogProba_0", 0.5238095238095238 AS "Proba_1", -0.646627164925 AS "LogProba_1", 0.38095238095238093 AS "Proba_2", -0.965080896044 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.07692307692307693 AS "Proba_0", -2.56494935746 AS "LogProba_0", 0.8461538461538461 AS "Proba_1", -0.167054084663 AS "LogProba_1", 0.07692307692307693 AS "Proba_2", -2.56494935746 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.125 AS "Proba_0", -2.07944154168 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.875 AS "Proba_2", -0.133531392625 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_4' AS feature, 0.18813681602478027 AS threshold, 26 AS count, 1 AS depth, 0.045454545454545456 AS "Proba_0", -3.09104245336 AS "LogProba_0", 0.11363636363636363 AS "Proba_1", -2.17475172148 AS "LogProba_1", 0.45454545454545453 AS "Proba_2", -0.788457360364 AS "LogProba_2", 0.38636363636363635 AS "Proba_3", -0.950976289862 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_12' AS feature, -0.38771048188209534 AS threshold, 17 AS count, 2 AS depth, 0.06896551724137931 AS "Proba_0", -2.67414864943 AS "LogProba_0", 0.13793103448275862 AS "Proba_1", -1.98100146887 AS "LogProba_1", 0.6551724137931034 AS "Proba_2", -0.42285685082 AS "LogProba_2", 0.13793103448275862 AS "Proba_3", -1.98100146887 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.2 AS "Proba_0", -1.60943791243 AS "LogProba_0", 0.4 AS "Proba_1", -0.916290731874 AS "LogProba_1", 0.1 AS "Proba_2", -2.30258509299 AS "LogProba_2", 0.3 AS "Proba_3", -1.20397280433 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.9473684210526315 AS "Proba_2", -0.0540672212703 AS "LogProba_2", 0.05263157894736842 AS "Proba_3", -2.94443897917 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_12' AS feature, 0.25445103645324707 AS threshold, 9 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.06666666666666667 AS "Proba_1", -2.7080502011 AS "LogProba_1", 0.06666666666666667 AS "Proba_2", -2.7080502011 AS "LogProba_2", 0.8666666666666667 AS "Proba_3", -0.143100843641 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.5 AS "Proba_2", -0.69314718056 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9"."Proba_0" AS "Proba_0", "DT_node_data_9"."LogProba_0" AS "LogProba_0", "DT_node_data_9"."Proba_1" AS "Proba_1", "DT_node_data_9"."LogProba_1" AS "LogProba_1", "DT_node_data_9"."Proba_2" AS "Proba_2", "DT_node_data_9"."LogProba_2" AS "LogProba_2", "DT_node_data_9"."Proba_3" AS "Proba_3", "DT_node_data_9"."LogProba_3" AS "LogProba_3", "DT_node_data_9"."Decision" AS "Decision" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, CAST(NULL AS FLOAT) AS "Score_9_0", "DT_Output_9"."Proba_0" AS "Proba_9_0", "DT_Output_9"."LogProba_0" AS "LogProba_9_0", CAST(NULL AS FLOAT) AS "Score_9_1", "DT_Output_9"."Proba_1" AS "Proba_9_1", "DT_Output_9"."LogProba_1" AS "LogProba_9_1", CAST(NULL AS FLOAT) AS "Score_9_2", "DT_Output_9"."Proba_2" AS "Proba_9_2", "DT_Output_9"."LogProba_2" AS "LogProba_9_2", CAST(NULL AS FLOAT) AS "Score_9_3", "DT_Output_9"."Proba_3" AS "Proba_9_3", "DT_Output_9"."LogProba_3" AS "LogProba_9_3" 
FROM "DT_Output_9"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0".join_key_0 AS join_key_0, "RF_Tree_0"."Score_0_0" AS "Score_0_0", "RF_Tree_0"."Proba_0_0" AS "Proba_0_0", "RF_Tree_0"."LogProba_0_0" AS "LogProba_0_0", "RF_Tree_0"."Score_0_1" AS "Score_0_1", "RF_Tree_0"."Proba_0_1" AS "Proba_0_1", "RF_Tree_0"."LogProba_0_1" AS "LogProba_0_1", "RF_Tree_0"."Score_0_2" AS "Score_0_2", "RF_Tree_0"."Proba_0_2" AS "Proba_0_2", "RF_Tree_0"."LogProba_0_2" AS "LogProba_0_2", "RF_Tree_0"."Score_0_3" AS "Score_0_3", "RF_Tree_0"."Proba_0_3" AS "Proba_0_3", "RF_Tree_0"."LogProba_0_3" AS "LogProba_0_3", "RF_Tree_1".join_key_1 AS join_key_1, "RF_Tree_1"."Score_1_0" AS "Score_1_0", "RF_Tree_1"."Proba_1_0" AS "Proba_1_0", "RF_Tree_1"."LogProba_1_0" AS "LogProba_1_0", "RF_Tree_1"."Score_1_1" AS "Score_1_1", "RF_Tree_1"."Proba_1_1" AS "Proba_1_1", "RF_Tree_1"."LogProba_1_1" AS "LogProba_1_1", "RF_Tree_1"."Score_1_2" AS "Score_1_2", "RF_Tree_1"."Proba_1_2" AS "Proba_1_2", "RF_Tree_1"."LogProba_1_2" AS "LogProba_1_2", "RF_Tree_1"."Score_1_3" AS "Score_1_3", "RF_Tree_1"."Proba_1_3" AS "Proba_1_3", "RF_Tree_1"."LogProba_1_3" AS "LogProba_1_3", "RF_Tree_2".join_key_2 AS join_key_2, "RF_Tree_2"."Score_2_0" AS "Score_2_0", "RF_Tree_2"."Proba_2_0" AS "Proba_2_0", "RF_Tree_2"."LogProba_2_0" AS "LogProba_2_0", "RF_Tree_2"."Score_2_1" AS "Score_2_1", "RF_Tree_2"."Proba_2_1" AS "Proba_2_1", "RF_Tree_2"."LogProba_2_1" AS "LogProba_2_1", "RF_Tree_2"."Score_2_2" AS "Score_2_2", "RF_Tree_2"."Proba_2_2" AS "Proba_2_2", "RF_Tree_2"."LogProba_2_2" AS "LogProba_2_2", "RF_Tree_2"."Score_2_3" AS "Score_2_3", "RF_Tree_2"."Proba_2_3" AS "Proba_2_3", "RF_Tree_2"."LogProba_2_3" AS "LogProba_2_3", "RF_Tree_3".join_key_3 AS join_key_3, "RF_Tree_3"."Score_3_0" AS "Score_3_0", "RF_Tree_3"."Proba_3_0" AS "Proba_3_0", "RF_Tree_3"."LogProba_3_0" AS "LogProba_3_0", "RF_Tree_3"."Score_3_1" AS "Score_3_1", "RF_Tree_3"."Proba_3_1" AS "Proba_3_1", "RF_Tree_3"."LogProba_3_1" AS "LogProba_3_1", "RF_Tree_3"."Score_3_2" AS "Score_3_2", "RF_Tree_3"."Proba_3_2" AS "Proba_3_2", "RF_Tree_3"."LogProba_3_2" AS "LogProba_3_2", "RF_Tree_3"."Score_3_3" AS "Score_3_3", "RF_Tree_3"."Proba_3_3" AS "Proba_3_3", "RF_Tree_3"."LogProba_3_3" AS "LogProba_3_3", "RF_Tree_4".join_key_4 AS join_key_4, "RF_Tree_4"."Score_4_0" AS "Score_4_0", "RF_Tree_4"."Proba_4_0" AS "Proba_4_0", "RF_Tree_4"."LogProba_4_0" AS "LogProba_4_0", "RF_Tree_4"."Score_4_1" AS "Score_4_1", "RF_Tree_4"."Proba_4_1" AS "Proba_4_1", "RF_Tree_4"."LogProba_4_1" AS "LogProba_4_1", "RF_Tree_4"."Score_4_2" AS "Score_4_2", "RF_Tree_4"."Proba_4_2" AS "Proba_4_2", "RF_Tree_4"."LogProba_4_2" AS "LogProba_4_2", "RF_Tree_4"."Score_4_3" AS "Score_4_3", "RF_Tree_4"."Proba_4_3" AS "Proba_4_3", "RF_Tree_4"."LogProba_4_3" AS "LogProba_4_3", "RF_Tree_5".join_key_5 AS join_key_5, "RF_Tree_5"."Score_5_0" AS "Score_5_0", "RF_Tree_5"."Proba_5_0" AS "Proba_5_0", "RF_Tree_5"."LogProba_5_0" AS "LogProba_5_0", "RF_Tree_5"."Score_5_1" AS "Score_5_1", "RF_Tree_5"."Proba_5_1" AS "Proba_5_1", "RF_Tree_5"."LogProba_5_1" AS "LogProba_5_1", "RF_Tree_5"."Score_5_2" AS "Score_5_2", "RF_Tree_5"."Proba_5_2" AS "Proba_5_2", "RF_Tree_5"."LogProba_5_2" AS "LogProba_5_2", "RF_Tree_5"."Score_5_3" AS "Score_5_3", "RF_Tree_5"."Proba_5_3" AS "Proba_5_3", "RF_Tree_5"."LogProba_5_3" AS "LogProba_5_3", "RF_Tree_6".join_key_6 AS join_key_6, "RF_Tree_6"."Score_6_0" AS "Score_6_0", "RF_Tree_6"."Proba_6_0" AS "Proba_6_0", "RF_Tree_6"."LogProba_6_0" AS "LogProba_6_0", "RF_Tree_6"."Score_6_1" AS "Score_6_1", "RF_Tree_6"."Proba_6_1" AS "Proba_6_1", "RF_Tree_6"."LogProba_6_1" AS "LogProba_6_1", "RF_Tree_6"."Score_6_2" AS "Score_6_2", "RF_Tree_6"."Proba_6_2" AS "Proba_6_2", "RF_Tree_6"."LogProba_6_2" AS "LogProba_6_2", "RF_Tree_6"."Score_6_3" AS "Score_6_3", "RF_Tree_6"."Proba_6_3" AS "Proba_6_3", "RF_Tree_6"."LogProba_6_3" AS "LogProba_6_3", "RF_Tree_7".join_key_7 AS join_key_7, "RF_Tree_7"."Score_7_0" AS "Score_7_0", "RF_Tree_7"."Proba_7_0" AS "Proba_7_0", "RF_Tree_7"."LogProba_7_0" AS "LogProba_7_0", "RF_Tree_7"."Score_7_1" AS "Score_7_1", "RF_Tree_7"."Proba_7_1" AS "Proba_7_1", "RF_Tree_7"."LogProba_7_1" AS "LogProba_7_1", "RF_Tree_7"."Score_7_2" AS "Score_7_2", "RF_Tree_7"."Proba_7_2" AS "Proba_7_2", "RF_Tree_7"."LogProba_7_2" AS "LogProba_7_2", "RF_Tree_7"."Score_7_3" AS "Score_7_3", "RF_Tree_7"."Proba_7_3" AS "Proba_7_3", "RF_Tree_7"."LogProba_7_3" AS "LogProba_7_3", "RF_Tree_8".join_key_8 AS join_key_8, "RF_Tree_8"."Score_8_0" AS "Score_8_0", "RF_Tree_8"."Proba_8_0" AS "Proba_8_0", "RF_Tree_8"."LogProba_8_0" AS "LogProba_8_0", "RF_Tree_8"."Score_8_1" AS "Score_8_1", "RF_Tree_8"."Proba_8_1" AS "Proba_8_1", "RF_Tree_8"."LogProba_8_1" AS "LogProba_8_1", "RF_Tree_8"."Score_8_2" AS "Score_8_2", "RF_Tree_8"."Proba_8_2" AS "Proba_8_2", "RF_Tree_8"."LogProba_8_2" AS "LogProba_8_2", "RF_Tree_8"."Score_8_3" AS "Score_8_3", "RF_Tree_8"."Proba_8_3" AS "Proba_8_3", "RF_Tree_8"."LogProba_8_3" AS "LogProba_8_3", "RF_Tree_9".join_key_9 AS join_key_9, "RF_Tree_9"."Score_9_0" AS "Score_9_0", "RF_Tree_9"."Proba_9_0" AS "Proba_9_0", "RF_Tree_9"."LogProba_9_0" AS "LogProba_9_0", "RF_Tree_9"."Score_9_1" AS "Score_9_1", "RF_Tree_9"."Proba_9_1" AS "Proba_9_1", "RF_Tree_9"."LogProba_9_1" AS "LogProba_9_1", "RF_Tree_9"."Score_9_2" AS "Score_9_2", "RF_Tree_9"."Proba_9_2" AS "Proba_9_2", "RF_Tree_9"."LogProba_9_2" AS "LogProba_9_2", "RF_Tree_9"."Score_9_3" AS "Score_9_3", "RF_Tree_9"."Proba_9_3" AS "Proba_9_3", "RF_Tree_9"."LogProba_9_3" AS "LogProba_9_3" 
FROM "RF_Tree_0" LEFT OUTER JOIN "RF_Tree_1" ON "RF_Tree_0".join_key_0 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_2" ON "RF_Tree_2".join_key_2 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_3" ON "RF_Tree_3".join_key_3 = "RF_Tree_2".join_key_2 LEFT OUTER JOIN "RF_Tree_4" ON "RF_Tree_4".join_key_4 = "RF_Tree_3".join_key_3 LEFT OUTER JOIN "RF_Tree_5" ON "RF_Tree_5".join_key_5 = "RF_Tree_4".join_key_4 LEFT OUTER JOIN "RF_Tree_6" ON "RF_Tree_6".join_key_6 = "RF_Tree_5".join_key_5 LEFT OUTER JOIN "RF_Tree_7" ON "RF_Tree_7".join_key_7 = "RF_Tree_6".join_key_6 LEFT OUTER JOIN "RF_Tree_8" ON "RF_Tree_8".join_key_8 = "RF_Tree_7".join_key_7 LEFT OUTER JOIN "RF_Tree_9" ON "RF_Tree_9".join_key_9 = "RF_Tree_8".join_key_8), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0 AS "KEY", "RF_Join_CTE"."Score_0_0" / 10 + "RF_Join_CTE"."Score_1_0" / 10 + "RF_Join_CTE"."Score_2_0" / 10 + "RF_Join_CTE"."Score_3_0" / 10 + "RF_Join_CTE"."Score_4_0" / 10 + "RF_Join_CTE"."Score_5_0" / 10 + "RF_Join_CTE"."Score_6_0" / 10 + "RF_Join_CTE"."Score_7_0" / 10 + "RF_Join_CTE"."Score_8_0" / 10 + "RF_Join_CTE"."Score_9_0" / 10 AS "Score_0", "RF_Join_CTE"."Proba_0_0" / 10 + "RF_Join_CTE"."Proba_1_0" / 10 + "RF_Join_CTE"."Proba_2_0" / 10 + "RF_Join_CTE"."Proba_3_0" / 10 + "RF_Join_CTE"."Proba_4_0" / 10 + "RF_Join_CTE"."Proba_5_0" / 10 + "RF_Join_CTE"."Proba_6_0" / 10 + "RF_Join_CTE"."Proba_7_0" / 10 + "RF_Join_CTE"."Proba_8_0" / 10 + "RF_Join_CTE"."Proba_9_0" / 10 AS "Proba_0", "RF_Join_CTE"."LogProba_0_0" / 10 + "RF_Join_CTE"."LogProba_1_0" / 10 + "RF_Join_CTE"."LogProba_2_0" / 10 + "RF_Join_CTE"."LogProba_3_0" / 10 + "RF_Join_CTE"."LogProba_4_0" / 10 + "RF_Join_CTE"."LogProba_5_0" / 10 + "RF_Join_CTE"."LogProba_6_0" / 10 + "RF_Join_CTE"."LogProba_7_0" / 10 + "RF_Join_CTE"."LogProba_8_0" / 10 + "RF_Join_CTE"."LogProba_9_0" / 10 AS "LogProba_0", "RF_Join_CTE"."Score_0_1" / 10 + "RF_Join_CTE"."Score_1_1" / 10 + "RF_Join_CTE"."Score_2_1" / 10 + "RF_Join_CTE"."Score_3_1" / 10 + "RF_Join_CTE"."Score_4_1" / 10 + "RF_Join_CTE"."Score_5_1" / 10 + "RF_Join_CTE"."Score_6_1" / 10 + "RF_Join_CTE"."Score_7_1" / 10 + "RF_Join_CTE"."Score_8_1" / 10 + "RF_Join_CTE"."Score_9_1" / 10 AS "Score_1", "RF_Join_CTE"."Proba_0_1" / 10 + "RF_Join_CTE"."Proba_1_1" / 10 + "RF_Join_CTE"."Proba_2_1" / 10 + "RF_Join_CTE"."Proba_3_1" / 10 + "RF_Join_CTE"."Proba_4_1" / 10 + "RF_Join_CTE"."Proba_5_1" / 10 + "RF_Join_CTE"."Proba_6_1" / 10 + "RF_Join_CTE"."Proba_7_1" / 10 + "RF_Join_CTE"."Proba_8_1" / 10 + "RF_Join_CTE"."Proba_9_1" / 10 AS "Proba_1", "RF_Join_CTE"."LogProba_0_1" / 10 + "RF_Join_CTE"."LogProba_1_1" / 10 + "RF_Join_CTE"."LogProba_2_1" / 10 + "RF_Join_CTE"."LogProba_3_1" / 10 + "RF_Join_CTE"."LogProba_4_1" / 10 + "RF_Join_CTE"."LogProba_5_1" / 10 + "RF_Join_CTE"."LogProba_6_1" / 10 + "RF_Join_CTE"."LogProba_7_1" / 10 + "RF_Join_CTE"."LogProba_8_1" / 10 + "RF_Join_CTE"."LogProba_9_1" / 10 AS "LogProba_1", "RF_Join_CTE"."Score_0_2" / 10 + "RF_Join_CTE"."Score_1_2" / 10 + "RF_Join_CTE"."Score_2_2" / 10 + "RF_Join_CTE"."Score_3_2" / 10 + "RF_Join_CTE"."Score_4_2" / 10 + "RF_Join_CTE"."Score_5_2" / 10 + "RF_Join_CTE"."Score_6_2" / 10 + "RF_Join_CTE"."Score_7_2" / 10 + "RF_Join_CTE"."Score_8_2" / 10 + "RF_Join_CTE"."Score_9_2" / 10 AS "Score_2", "RF_Join_CTE"."Proba_0_2" / 10 + "RF_Join_CTE"."Proba_1_2" / 10 + "RF_Join_CTE"."Proba_2_2" / 10 + "RF_Join_CTE"."Proba_3_2" / 10 + "RF_Join_CTE"."Proba_4_2" / 10 + "RF_Join_CTE"."Proba_5_2" / 10 + "RF_Join_CTE"."Proba_6_2" / 10 + "RF_Join_CTE"."Proba_7_2" / 10 + "RF_Join_CTE"."Proba_8_2" / 10 + "RF_Join_CTE"."Proba_9_2" / 10 AS "Proba_2", "RF_Join_CTE"."LogProba_0_2" / 10 + "RF_Join_CTE"."LogProba_1_2" / 10 + "RF_Join_CTE"."LogProba_2_2" / 10 + "RF_Join_CTE"."LogProba_3_2" / 10 + "RF_Join_CTE"."LogProba_4_2" / 10 + "RF_Join_CTE"."LogProba_5_2" / 10 + "RF_Join_CTE"."LogProba_6_2" / 10 + "RF_Join_CTE"."LogProba_7_2" / 10 + "RF_Join_CTE"."LogProba_8_2" / 10 + "RF_Join_CTE"."LogProba_9_2" / 10 AS "LogProba_2", "RF_Join_CTE"."Score_0_3" / 10 + "RF_Join_CTE"."Score_1_3" / 10 + "RF_Join_CTE"."Score_2_3" / 10 + "RF_Join_CTE"."Score_3_3" / 10 + "RF_Join_CTE"."Score_4_3" / 10 + "RF_Join_CTE"."Score_5_3" / 10 + "RF_Join_CTE"."Score_6_3" / 10 + "RF_Join_CTE"."Score_7_3" / 10 + "RF_Join_CTE"."Score_8_3" / 10 + "RF_Join_CTE"."Score_9_3" / 10 AS "Score_3", "RF_Join_CTE"."Proba_0_3" / 10 + "RF_Join_CTE"."Proba_1_3" / 10 + "RF_Join_CTE"."Proba_2_3" / 10 + "RF_Join_CTE"."Proba_3_3" / 10 + "RF_Join_CTE"."Proba_4_3" / 10 + "RF_Join_CTE"."Proba_5_3" / 10 + "RF_Join_CTE"."Proba_6_3" / 10 + "RF_Join_CTE"."Proba_7_3" / 10 + "RF_Join_CTE"."Proba_8_3" / 10 + "RF_Join_CTE"."Proba_9_3" / 10 AS "Proba_3", "RF_Join_CTE"."LogProba_0_3" / 10 + "RF_Join_CTE"."LogProba_1_3" / 10 + "RF_Join_CTE"."LogProba_2_3" / 10 + "RF_Join_CTE"."LogProba_3_3" / 10 + "RF_Join_CTE"."LogProba_4_3" / 10 + "RF_Join_CTE"."LogProba_5_3" / 10 + "RF_Join_CTE"."LogProba_6_3" / 10 + "RF_Join_CTE"."LogProba_7_3" / 10 + "RF_Join_CTE"."LogProba_8_3" / 10 + "RF_Join_CTE"."LogProba_9_3" / 10 AS "LogProba_3" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Score_3" AS "Score_3", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."Proba_3" AS "Proba_3", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", "RF_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte