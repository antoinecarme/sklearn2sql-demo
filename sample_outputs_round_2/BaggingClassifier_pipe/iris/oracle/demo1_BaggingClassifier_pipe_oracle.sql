-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 5.84333333333 ELSE "ADS"."Feature_0" END AS impute_output_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 3.054 ELSE "ADS"."Feature_1" END AS impute_output_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 3.75866666667 ELSE "ADS"."Feature_2" END AS impute_output_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 1.19866666667 ELSE "ADS"."Feature_3" END AS impute_output_5 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_output_2 - 5.84333333333 AS impute_output_2, "ADS_imp_1_OUT".impute_output_3 - 3.054 AS impute_output_3, "ADS_imp_1_OUT".impute_output_4 - 3.75866666667 AS impute_output_4, "ADS_imp_1_OUT".impute_output_5 - 1.19866666667 AS impute_output_5 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_output_2 * 0.361589677381 + "CenteredDataForPCA".impute_output_3 * -0.0822688898922 + "CenteredDataForPCA".impute_output_4 * 0.856572105291 + "CenteredDataForPCA".impute_output_5 * 0.358843926248 AS anova_output_2, "CenteredDataForPCA".impute_output_2 * 0.656539883286 + "CenteredDataForPCA".impute_output_3 * 0.729712371326 + "CenteredDataForPCA".impute_output_4 * -0.175767403429 + "CenteredDataForPCA".impute_output_5 * -0.074706470135 AS anova_output_3, "CenteredDataForPCA".impute_output_2 * -0.580997279828 + "CenteredDataForPCA".impute_output_3 * 0.596418087938 + "CenteredDataForPCA".impute_output_4 * 0.072524075487 + "CenteredDataForPCA".impute_output_5 * 0.549060910727 AS anova_output_4, "CenteredDataForPCA".impute_output_2 * 0.317254547169 + "CenteredDataForPCA".impute_output_3 * -0.324094352418 + "CenteredDataForPCA".impute_output_4 * -0.47971898733 + "CenteredDataForPCA".impute_output_5 * 0.751120560381 AS anova_output_5 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1571691036224365) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.515682339668274) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.5032649040222168) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.05043411999940872) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, 1.1571691036224365 AS threshold, 94 AS count, 0 AS depth, 0.31333333333333335 AS "Proba_0", -1.16048769239 AS "LogProba_0", 0.29333333333333333 AS "Proba_1", -1.22644566018 AS "LogProba_1", 0.3933333333333333 AS "Proba_2", -0.933097850191 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_2' AS feature, -1.515682339668274 AS threshold, 61 AS count, 1 AS depth, 0.5222222222222223 AS "Proba_0", -0.64966206862 AS "LogProba_0", 0.4666666666666667 AS "Proba_1", -0.762140052047 AS "LogProba_1", 0.011111111111111112 AS "Proba_2", -4.49980967033 AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_4' AS feature, 0.5032649040222168 AS threshold, 30 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9767441860465116 AS "Proba_1", -0.0235304974102 AS "LogProba_1", 0.023255813953488372 AS "Proba_2", -3.76120011569 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 33 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.03333333333333333 AS "Proba_1", -3.40119738166 AS "LogProba_1", 0.9666666666666667 AS "Proba_2", -0.0339015516757 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anova_output_3' AS feature, 0.05043411999940872 AS threshold, 7 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0.8 AS "Proba_2", -0.223143551314 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0" AS "Proba_0_0", "DT_Output"."LogProba_0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1" AS "Proba_0_1", "DT_Output"."LogProba_1" AS "LogProba_0_1", CAST(NULL AS FLOAT) AS "Score_0_2", "DT_Output"."Proba_2" AS "Proba_0_2", "DT_Output"."LogProba_2" AS "LogProba_0_2" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.6096656322479248) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 100 AS count, 0 AS depth, 0.31333333333333335 AS "Proba_0", -1.16048769239 AS "LogProba_0", 0.41333333333333333 AS "Proba_1", -0.883500909051 AS "LogProba_1", 0.2733333333333333 AS "Proba_2", -1.29706322739 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.6096656322479248 AS threshold, 67 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.6019417475728155 AS "Proba_1", -0.507594603185 AS "LogProba_1", 0.39805825242718446 AS "Proba_2", -0.921156921525 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 43 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.8985507246376812 AS "Proba_1", -0.106972119552 AS "LogProba_1", 0.10144927536231885 AS "Proba_2", -2.28819635554 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5882352941176471 AS "Proba_1", -0.530628251062 AS "LogProba_1", 0.4117647058823529 AS "Proba_2", -0.887303195001 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0" AS "Proba_1_0", "DT_Output_1"."LogProba_0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1" AS "Proba_1_1", "DT_Output_1"."LogProba_1" AS "LogProba_1_1", CAST(NULL AS FLOAT) AS "Score_1_2", "DT_Output_1"."Proba_2" AS "Proba_1_2", "DT_Output_1"."LogProba_2" AS "LogProba_1_2" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.6057958602905273) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.3832025527954102) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.04408328980207443) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.4833545684814453) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.6057958602905273 AS threshold, 98 AS count, 0 AS depth, 0.3333333333333333 AS "Proba_0", -1.09861228867 AS "LogProba_0", 0.30666666666666664 AS "Proba_1", -1.18199389761 AS "LogProba_1", 0.36 AS "Proba_2", -1.02165124753 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.3832025527954102 AS threshold, 68 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.46 AS "Proba_1", -0.776528789499 AS "LogProba_1", 0.54 AS "Proba_2", -0.616186139424 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_4' AS feature, 0.04408328980207443 AS threshold, 38 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.8823529411764706 AS "Proba_1", -0.125163142954 AS "LogProba_1", 0.11764705882352941 AS "Proba_2", -2.1400661635 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5714285714285714 AS "Proba_1", -0.559615787935 AS "LogProba_1", 0.42857142857142855 AS "Proba_2", -0.847297860387 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_3' AS feature, 0.4833545684814453 AS threshold, 30 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.02040816326530612 AS "Proba_1", -3.89182029811 AS "LogProba_1", 0.9795918367346939 AS "Proba_2", -0.0206192872027 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.16666666666666666 AS "Proba_1", -1.79175946923 AS "LogProba_1", 0.8333333333333334 AS "Proba_2", -0.182321556794 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0" AS "Proba_2_0", "DT_Output_2"."LogProba_0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1" AS "Proba_2_1", "DT_Output_2"."LogProba_1" AS "LogProba_2_1", CAST(NULL AS FLOAT) AS "Score_2_2", "DT_Output_2"."Proba_2" AS "Proba_2_2", "DT_Output_2"."LogProba_2" AS "LogProba_2_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5586481094360352) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.3842015266418457) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.2105880230665207) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.4948625564575195) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5586481094360352 AS threshold, 96 AS count, 0 AS depth, 0.29333333333333333 AS "Proba_0", -1.22644566018 AS "LogProba_0", 0.4 AS "Proba_1", -0.916290731874 AS "LogProba_1", 0.30666666666666664 AS "Proba_2", -1.18199389761 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.3842015266418457 AS threshold, 64 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5660377358490566 AS "Proba_1", -0.56909453189 AS "LogProba_1", 0.4339622641509434 AS "Proba_2", -0.834797697623 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_4' AS feature, 0.2105880230665207 AS threshold, 39 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.8939393939393939 AS "Proba_1", -0.112117298121 AS "LogProba_1", 0.10606060606060606 AS "Proba_2", -2.24374459297 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9818181818181818 AS "Proba_1", -0.0183491386682 AS "LogProba_1", 0.01818181818181818 AS "Proba_2", -4.00733318523 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.45454545454545453 AS "Proba_1", -0.788457360364 AS "LogProba_1", 0.5454545454545454 AS "Proba_2", -0.60613580357 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.4948625564575195 AS threshold, 25 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.025 AS "Proba_1", -3.68887945411 AS "LogProba_1", 0.975 AS "Proba_2", -0.0253178079843 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0.8 AS "Proba_2", -0.223143551314 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0" AS "Proba_3_0", "DT_Output_3"."LogProba_0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1" AS "Proba_3_1", "DT_Output_3"."LogProba_1" AS "LogProba_3_1", CAST(NULL AS FLOAT) AS "Score_3_2", "DT_Output_3"."Proba_2" AS "Proba_3_2", "DT_Output_3"."LogProba_2" AS "LogProba_3_2" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.2390270233154297) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 95 AS count, 0 AS depth, 0.32666666666666666 AS "Proba_0", -1.11881499599 AS "LogProba_0", 0.41333333333333333 AS "Proba_1", -0.883500909051 AS "LogProba_1", 0.26 AS "Proba_2", -1.34707364797 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.2390270233154297 AS threshold, 65 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.6138613861386139 AS "Proba_1", -0.487986131796 AS "LogProba_1", 0.38613861386138615 AS "Proba_2", -0.951558870712 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 32 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.22 AS "Proba_1", -1.51412773263 AS "LogProba_1", 0.78 AS "Proba_2", -0.248461359298 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.4782608695652174 AS "Proba_1", -0.737598943131 AS "LogProba_1", 0.5217391304347826 AS "Proba_2", -0.650587566141 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4"."Proba_0" AS "Proba_0", "DT_node_data_4"."LogProba_0" AS "LogProba_0", "DT_node_data_4"."Proba_1" AS "Proba_1", "DT_node_data_4"."LogProba_1" AS "LogProba_1", "DT_node_data_4"."Proba_2" AS "Proba_2", "DT_node_data_4"."LogProba_2" AS "LogProba_2", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0" AS "Proba_4_0", "DT_Output_4"."LogProba_0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1" AS "Proba_4_1", "DT_Output_4"."LogProba_1" AS "LogProba_4_1", CAST(NULL AS FLOAT) AS "Score_4_2", "DT_Output_4"."Proba_2" AS "Proba_4_2", "DT_Output_4"."LogProba_2" AS "LogProba_4_2" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5586481094360352) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.337817907333374) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1869330406188965) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5586481094360352 AS threshold, 93 AS count, 0 AS depth, 0.32 AS "Proba_0", -1.13943428319 AS "LogProba_0", 0.35333333333333333 AS "Proba_1", -1.04034338054 AS "LogProba_1", 0.32666666666666666 AS "Proba_2", -1.11881499599 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.337817907333374 AS threshold, 66 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5196078431372549 AS "Proba_1", -0.654680899732 AS "LogProba_1", 0.4803921568627451 AS "Proba_2", -0.733152515174 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_2' AS feature, 1.1869330406188965 AS threshold, 35 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9298245614035088 AS "Proba_1", -0.0727593542824 AS "LogProba_1", 0.07017543859649122 AS "Proba_2", -2.65675690671 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.98 AS "Proba_1", -0.0202027073175 AS "LogProba_1", 0.02 AS "Proba_2", -3.91202300543 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5714285714285714 AS "Proba_1", -0.559615787935 AS "LogProba_1", 0.42857142857142855 AS "Proba_2", -0.847297860387 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5"."Proba_0" AS "Proba_0", "DT_node_data_5"."LogProba_0" AS "LogProba_0", "DT_node_data_5"."Proba_1" AS "Proba_1", "DT_node_data_5"."LogProba_1" AS "LogProba_1", "DT_node_data_5"."Proba_2" AS "Proba_2", "DT_node_data_5"."LogProba_2" AS "LogProba_2", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0" AS "Proba_5_0", "DT_Output_5"."LogProba_0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1" AS "Proba_5_1", "DT_Output_5"."LogProba_1" AS "LogProba_5_1", CAST(NULL AS FLOAT) AS "Score_5_2", "DT_Output_5"."Proba_2" AS "Proba_5_2", "DT_Output_5"."LogProba_2" AS "LogProba_5_2" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5941803455352783) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1320385932922363) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.4680721163749695) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5941803455352783 AS threshold, 96 AS count, 0 AS depth, 0.31333333333333335 AS "Proba_0", -1.16048769239 AS "LogProba_0", 0.2866666666666667 AS "Proba_1", -1.2494351784 AS "LogProba_1", 0.4 AS "Proba_2", -0.916290731874 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.1320385932922363 AS threshold, 68 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.4174757281553398 AS "Proba_1", -0.873528872536 AS "LogProba_1", 0.5825242718446602 AS "Proba_2", -0.540384426008 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_4' AS feature, 0.4680721163749695 AS threshold, 28 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.9512195121951219 AS "Proba_1", -0.0500104205747 AS "LogProba_1", 0.04878048780487805 AS "Proba_2", -3.02042488614 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 40 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.06451612903225806 AS "Proba_1", -2.74084002393 AS "LogProba_1", 0.9354838709677419 AS "Proba_2", -0.0666913744987 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.18181818181818182 AS "Proba_1", -1.70474809224 AS "LogProba_1", 0.8181818181818182 AS "Proba_2", -0.200670695462 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6"."Proba_0" AS "Proba_0", "DT_node_data_6"."LogProba_0" AS "LogProba_0", "DT_node_data_6"."Proba_1" AS "Proba_1", "DT_node_data_6"."LogProba_1" AS "LogProba_1", "DT_node_data_6"."Proba_2" AS "Proba_2", "DT_node_data_6"."LogProba_2" AS "LogProba_2", "DT_node_data_6"."Decision" AS "Decision" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, CAST(NULL AS FLOAT) AS "Score_6_0", "DT_Output_6"."Proba_0" AS "Proba_6_0", "DT_Output_6"."LogProba_0" AS "LogProba_6_0", CAST(NULL AS FLOAT) AS "Score_6_1", "DT_Output_6"."Proba_1" AS "Proba_6_1", "DT_Output_6"."LogProba_1" AS "LogProba_6_1", CAST(NULL AS FLOAT) AS "Score_6_2", "DT_Output_6"."Proba_2" AS "Proba_6_2", "DT_Output_6"."LogProba_2" AS "LogProba_6_2" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.4530795812606812) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.146660566329956) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.15936073660850525) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.4530795812606812 AS threshold, 102 AS count, 0 AS depth, 0.3933333333333333 AS "Proba_0", -0.933097850191 AS "LogProba_0", 0.2733333333333333 AS "Proba_1", -1.29706322739 AS "LogProba_1", 0.3333333333333333 AS "Proba_2", -1.09861228867 AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.146660566329956 AS threshold, 64 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.45054945054945056 AS "Proba_1", -0.797287439813 AS "LogProba_1", 0.5494505494505495 AS "Proba_2", -0.598836501089 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anova_output_4' AS feature, -0.15936073660850525 AS threshold, 37 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.09090909090909091 AS "Proba_1", -2.3978952728 AS "LogProba_1", 0.9090909090909091 AS "Proba_2", -0.0953101798043 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.3333333333333333 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0.6666666666666666 AS "Proba_2", -0.405465108108 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.023255813953488372 AS "Proba_1", -3.76120011569 AS "LogProba_1", 0.9767441860465116 AS "Proba_2", -0.0235304974102 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7"."Proba_0" AS "Proba_0", "DT_node_data_7"."LogProba_0" AS "LogProba_0", "DT_node_data_7"."Proba_1" AS "Proba_1", "DT_node_data_7"."LogProba_1" AS "LogProba_1", "DT_node_data_7"."Proba_2" AS "Proba_2", "DT_node_data_7"."LogProba_2" AS "LogProba_2", "DT_node_data_7"."Decision" AS "Decision" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, CAST(NULL AS FLOAT) AS "Score_7_0", "DT_Output_7"."Proba_0" AS "Proba_7_0", "DT_Output_7"."LogProba_0" AS "LogProba_7_0", CAST(NULL AS FLOAT) AS "Score_7_1", "DT_Output_7"."Proba_1" AS "Proba_7_1", "DT_Output_7"."LogProba_1" AS "LogProba_7_1", CAST(NULL AS FLOAT) AS "Score_7_2", "DT_Output_7"."Proba_2" AS "Proba_7_2", "DT_Output_7"."LogProba_2" AS "LogProba_7_2" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.475272536277771) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.6685181856155396) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.2973992824554443) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.475272536277771 AS threshold, 91 AS count, 0 AS depth, 0.28 AS "Proba_0", -1.27296567581 AS "LogProba_0", 0.36 AS "Proba_1", -1.02165124753 AS "LogProba_1", 0.36 AS "Proba_2", -1.02165124753 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.6685181856155396 AS threshold, 62 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.5 AS "Proba_2", -0.69314718056 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_2' AS feature, 1.2973992824554443 AS threshold, 37 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.8059701492537313 AS "Proba_1", -0.215708572827 AS "LogProba_1", 0.19402985074626866 AS "Proba_2", -1.63974326193 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.92 AS "Proba_1", -0.0833816089391 AS "LogProba_1", 0.08 AS "Proba_2", -2.52572864431 AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.47058823529411764 AS "Proba_1", -0.753771802376 AS "LogProba_1", 0.5294117647058824 AS "Proba_2", -0.63598876672 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8"."Proba_0" AS "Proba_0", "DT_node_data_8"."LogProba_0" AS "LogProba_0", "DT_node_data_8"."Proba_1" AS "Proba_1", "DT_node_data_8"."LogProba_1" AS "LogProba_1", "DT_node_data_8"."Proba_2" AS "Proba_2", "DT_node_data_8"."LogProba_2" AS "LogProba_2", "DT_node_data_8"."Decision" AS "Decision" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, CAST(NULL AS FLOAT) AS "Score_8_0", "DT_Output_8"."Proba_0" AS "Proba_8_0", "DT_Output_8"."LogProba_0" AS "LogProba_8_0", CAST(NULL AS FLOAT) AS "Score_8_1", "DT_Output_8"."Proba_1" AS "Proba_8_1", "DT_Output_8"."LogProba_1" AS "LogProba_8_1", CAST(NULL AS FLOAT) AS "Score_8_2", "DT_Output_8"."Proba_2" AS "Proba_8_2", "DT_Output_8"."LogProba_2" AS "LogProba_8_2" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.4801501035690308) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.1426374614238739) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.4801501035690308 AS threshold, 95 AS count, 0 AS depth, 0.36666666666666664 AS "Proba_0", -1.00330210886 AS "LogProba_0", 0.26666666666666666 AS "Proba_1", -1.32175583998 AS "LogProba_1", 0.36666666666666664 AS "Proba_2", -1.00330210886 AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 60 AS count, 1 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.42105263157894735 AS "Proba_1", -0.864997437487 AS "LogProba_1", 0.5789473684210527 AS "Proba_2", -0.546543706368 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anova_output_4' AS feature, -0.1426374614238739 AS threshold, 36 AS count, 2 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.09836065573770492 AS "Proba_1", -2.31911439495 AS "LogProba_1", 0.9016393442622951 AS "Proba_2", -0.103540678941 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.4 AS "Proba_1", -0.916290731874 AS "LogProba_1", 0.6 AS "Proba_2", -0.510825623766 AS "LogProba_2", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9"."Proba_0" AS "Proba_0", "DT_node_data_9"."LogProba_0" AS "LogProba_0", "DT_node_data_9"."Proba_1" AS "Proba_1", "DT_node_data_9"."LogProba_1" AS "LogProba_1", "DT_node_data_9"."Proba_2" AS "Proba_2", "DT_node_data_9"."LogProba_2" AS "LogProba_2", "DT_node_data_9"."Decision" AS "Decision" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, CAST(NULL AS FLOAT) AS "Score_9_0", "DT_Output_9"."Proba_0" AS "Proba_9_0", "DT_Output_9"."LogProba_0" AS "LogProba_9_0", CAST(NULL AS FLOAT) AS "Score_9_1", "DT_Output_9"."Proba_1" AS "Proba_9_1", "DT_Output_9"."LogProba_1" AS "LogProba_9_1", CAST(NULL AS FLOAT) AS "Score_9_2", "DT_Output_9"."Proba_2" AS "Proba_9_2", "DT_Output_9"."LogProba_2" AS "LogProba_9_2" 
FROM "DT_Output_9"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0".join_key_0 AS join_key_0, "RF_Tree_0"."Score_0_0" AS "Score_0_0", "RF_Tree_0"."Proba_0_0" AS "Proba_0_0", "RF_Tree_0"."LogProba_0_0" AS "LogProba_0_0", "RF_Tree_0"."Score_0_1" AS "Score_0_1", "RF_Tree_0"."Proba_0_1" AS "Proba_0_1", "RF_Tree_0"."LogProba_0_1" AS "LogProba_0_1", "RF_Tree_0"."Score_0_2" AS "Score_0_2", "RF_Tree_0"."Proba_0_2" AS "Proba_0_2", "RF_Tree_0"."LogProba_0_2" AS "LogProba_0_2", "RF_Tree_1".join_key_1 AS join_key_1, "RF_Tree_1"."Score_1_0" AS "Score_1_0", "RF_Tree_1"."Proba_1_0" AS "Proba_1_0", "RF_Tree_1"."LogProba_1_0" AS "LogProba_1_0", "RF_Tree_1"."Score_1_1" AS "Score_1_1", "RF_Tree_1"."Proba_1_1" AS "Proba_1_1", "RF_Tree_1"."LogProba_1_1" AS "LogProba_1_1", "RF_Tree_1"."Score_1_2" AS "Score_1_2", "RF_Tree_1"."Proba_1_2" AS "Proba_1_2", "RF_Tree_1"."LogProba_1_2" AS "LogProba_1_2", "RF_Tree_2".join_key_2 AS join_key_2, "RF_Tree_2"."Score_2_0" AS "Score_2_0", "RF_Tree_2"."Proba_2_0" AS "Proba_2_0", "RF_Tree_2"."LogProba_2_0" AS "LogProba_2_0", "RF_Tree_2"."Score_2_1" AS "Score_2_1", "RF_Tree_2"."Proba_2_1" AS "Proba_2_1", "RF_Tree_2"."LogProba_2_1" AS "LogProba_2_1", "RF_Tree_2"."Score_2_2" AS "Score_2_2", "RF_Tree_2"."Proba_2_2" AS "Proba_2_2", "RF_Tree_2"."LogProba_2_2" AS "LogProba_2_2", "RF_Tree_3".join_key_3 AS join_key_3, "RF_Tree_3"."Score_3_0" AS "Score_3_0", "RF_Tree_3"."Proba_3_0" AS "Proba_3_0", "RF_Tree_3"."LogProba_3_0" AS "LogProba_3_0", "RF_Tree_3"."Score_3_1" AS "Score_3_1", "RF_Tree_3"."Proba_3_1" AS "Proba_3_1", "RF_Tree_3"."LogProba_3_1" AS "LogProba_3_1", "RF_Tree_3"."Score_3_2" AS "Score_3_2", "RF_Tree_3"."Proba_3_2" AS "Proba_3_2", "RF_Tree_3"."LogProba_3_2" AS "LogProba_3_2", "RF_Tree_4".join_key_4 AS join_key_4, "RF_Tree_4"."Score_4_0" AS "Score_4_0", "RF_Tree_4"."Proba_4_0" AS "Proba_4_0", "RF_Tree_4"."LogProba_4_0" AS "LogProba_4_0", "RF_Tree_4"."Score_4_1" AS "Score_4_1", "RF_Tree_4"."Proba_4_1" AS "Proba_4_1", "RF_Tree_4"."LogProba_4_1" AS "LogProba_4_1", "RF_Tree_4"."Score_4_2" AS "Score_4_2", "RF_Tree_4"."Proba_4_2" AS "Proba_4_2", "RF_Tree_4"."LogProba_4_2" AS "LogProba_4_2", "RF_Tree_5".join_key_5 AS join_key_5, "RF_Tree_5"."Score_5_0" AS "Score_5_0", "RF_Tree_5"."Proba_5_0" AS "Proba_5_0", "RF_Tree_5"."LogProba_5_0" AS "LogProba_5_0", "RF_Tree_5"."Score_5_1" AS "Score_5_1", "RF_Tree_5"."Proba_5_1" AS "Proba_5_1", "RF_Tree_5"."LogProba_5_1" AS "LogProba_5_1", "RF_Tree_5"."Score_5_2" AS "Score_5_2", "RF_Tree_5"."Proba_5_2" AS "Proba_5_2", "RF_Tree_5"."LogProba_5_2" AS "LogProba_5_2", "RF_Tree_6".join_key_6 AS join_key_6, "RF_Tree_6"."Score_6_0" AS "Score_6_0", "RF_Tree_6"."Proba_6_0" AS "Proba_6_0", "RF_Tree_6"."LogProba_6_0" AS "LogProba_6_0", "RF_Tree_6"."Score_6_1" AS "Score_6_1", "RF_Tree_6"."Proba_6_1" AS "Proba_6_1", "RF_Tree_6"."LogProba_6_1" AS "LogProba_6_1", "RF_Tree_6"."Score_6_2" AS "Score_6_2", "RF_Tree_6"."Proba_6_2" AS "Proba_6_2", "RF_Tree_6"."LogProba_6_2" AS "LogProba_6_2", "RF_Tree_7".join_key_7 AS join_key_7, "RF_Tree_7"."Score_7_0" AS "Score_7_0", "RF_Tree_7"."Proba_7_0" AS "Proba_7_0", "RF_Tree_7"."LogProba_7_0" AS "LogProba_7_0", "RF_Tree_7"."Score_7_1" AS "Score_7_1", "RF_Tree_7"."Proba_7_1" AS "Proba_7_1", "RF_Tree_7"."LogProba_7_1" AS "LogProba_7_1", "RF_Tree_7"."Score_7_2" AS "Score_7_2", "RF_Tree_7"."Proba_7_2" AS "Proba_7_2", "RF_Tree_7"."LogProba_7_2" AS "LogProba_7_2", "RF_Tree_8".join_key_8 AS join_key_8, "RF_Tree_8"."Score_8_0" AS "Score_8_0", "RF_Tree_8"."Proba_8_0" AS "Proba_8_0", "RF_Tree_8"."LogProba_8_0" AS "LogProba_8_0", "RF_Tree_8"."Score_8_1" AS "Score_8_1", "RF_Tree_8"."Proba_8_1" AS "Proba_8_1", "RF_Tree_8"."LogProba_8_1" AS "LogProba_8_1", "RF_Tree_8"."Score_8_2" AS "Score_8_2", "RF_Tree_8"."Proba_8_2" AS "Proba_8_2", "RF_Tree_8"."LogProba_8_2" AS "LogProba_8_2", "RF_Tree_9".join_key_9 AS join_key_9, "RF_Tree_9"."Score_9_0" AS "Score_9_0", "RF_Tree_9"."Proba_9_0" AS "Proba_9_0", "RF_Tree_9"."LogProba_9_0" AS "LogProba_9_0", "RF_Tree_9"."Score_9_1" AS "Score_9_1", "RF_Tree_9"."Proba_9_1" AS "Proba_9_1", "RF_Tree_9"."LogProba_9_1" AS "LogProba_9_1", "RF_Tree_9"."Score_9_2" AS "Score_9_2", "RF_Tree_9"."Proba_9_2" AS "Proba_9_2", "RF_Tree_9"."LogProba_9_2" AS "LogProba_9_2" 
FROM "RF_Tree_0" LEFT OUTER JOIN "RF_Tree_1" ON "RF_Tree_0".join_key_0 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_2" ON "RF_Tree_2".join_key_2 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_3" ON "RF_Tree_3".join_key_3 = "RF_Tree_2".join_key_2 LEFT OUTER JOIN "RF_Tree_4" ON "RF_Tree_4".join_key_4 = "RF_Tree_3".join_key_3 LEFT OUTER JOIN "RF_Tree_5" ON "RF_Tree_5".join_key_5 = "RF_Tree_4".join_key_4 LEFT OUTER JOIN "RF_Tree_6" ON "RF_Tree_6".join_key_6 = "RF_Tree_5".join_key_5 LEFT OUTER JOIN "RF_Tree_7" ON "RF_Tree_7".join_key_7 = "RF_Tree_6".join_key_6 LEFT OUTER JOIN "RF_Tree_8" ON "RF_Tree_8".join_key_8 = "RF_Tree_7".join_key_7 LEFT OUTER JOIN "RF_Tree_9" ON "RF_Tree_9".join_key_9 = "RF_Tree_8".join_key_8), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0 AS "KEY", "RF_Join_CTE"."Score_0_0" / 10 + "RF_Join_CTE"."Score_1_0" / 10 + "RF_Join_CTE"."Score_2_0" / 10 + "RF_Join_CTE"."Score_3_0" / 10 + "RF_Join_CTE"."Score_4_0" / 10 + "RF_Join_CTE"."Score_5_0" / 10 + "RF_Join_CTE"."Score_6_0" / 10 + "RF_Join_CTE"."Score_7_0" / 10 + "RF_Join_CTE"."Score_8_0" / 10 + "RF_Join_CTE"."Score_9_0" / 10 AS "Score_0", "RF_Join_CTE"."Proba_0_0" / 10 + "RF_Join_CTE"."Proba_1_0" / 10 + "RF_Join_CTE"."Proba_2_0" / 10 + "RF_Join_CTE"."Proba_3_0" / 10 + "RF_Join_CTE"."Proba_4_0" / 10 + "RF_Join_CTE"."Proba_5_0" / 10 + "RF_Join_CTE"."Proba_6_0" / 10 + "RF_Join_CTE"."Proba_7_0" / 10 + "RF_Join_CTE"."Proba_8_0" / 10 + "RF_Join_CTE"."Proba_9_0" / 10 AS "Proba_0", "RF_Join_CTE"."LogProba_0_0" / 10 + "RF_Join_CTE"."LogProba_1_0" / 10 + "RF_Join_CTE"."LogProba_2_0" / 10 + "RF_Join_CTE"."LogProba_3_0" / 10 + "RF_Join_CTE"."LogProba_4_0" / 10 + "RF_Join_CTE"."LogProba_5_0" / 10 + "RF_Join_CTE"."LogProba_6_0" / 10 + "RF_Join_CTE"."LogProba_7_0" / 10 + "RF_Join_CTE"."LogProba_8_0" / 10 + "RF_Join_CTE"."LogProba_9_0" / 10 AS "LogProba_0", "RF_Join_CTE"."Score_0_1" / 10 + "RF_Join_CTE"."Score_1_1" / 10 + "RF_Join_CTE"."Score_2_1" / 10 + "RF_Join_CTE"."Score_3_1" / 10 + "RF_Join_CTE"."Score_4_1" / 10 + "RF_Join_CTE"."Score_5_1" / 10 + "RF_Join_CTE"."Score_6_1" / 10 + "RF_Join_CTE"."Score_7_1" / 10 + "RF_Join_CTE"."Score_8_1" / 10 + "RF_Join_CTE"."Score_9_1" / 10 AS "Score_1", "RF_Join_CTE"."Proba_0_1" / 10 + "RF_Join_CTE"."Proba_1_1" / 10 + "RF_Join_CTE"."Proba_2_1" / 10 + "RF_Join_CTE"."Proba_3_1" / 10 + "RF_Join_CTE"."Proba_4_1" / 10 + "RF_Join_CTE"."Proba_5_1" / 10 + "RF_Join_CTE"."Proba_6_1" / 10 + "RF_Join_CTE"."Proba_7_1" / 10 + "RF_Join_CTE"."Proba_8_1" / 10 + "RF_Join_CTE"."Proba_9_1" / 10 AS "Proba_1", "RF_Join_CTE"."LogProba_0_1" / 10 + "RF_Join_CTE"."LogProba_1_1" / 10 + "RF_Join_CTE"."LogProba_2_1" / 10 + "RF_Join_CTE"."LogProba_3_1" / 10 + "RF_Join_CTE"."LogProba_4_1" / 10 + "RF_Join_CTE"."LogProba_5_1" / 10 + "RF_Join_CTE"."LogProba_6_1" / 10 + "RF_Join_CTE"."LogProba_7_1" / 10 + "RF_Join_CTE"."LogProba_8_1" / 10 + "RF_Join_CTE"."LogProba_9_1" / 10 AS "LogProba_1", "RF_Join_CTE"."Score_0_2" / 10 + "RF_Join_CTE"."Score_1_2" / 10 + "RF_Join_CTE"."Score_2_2" / 10 + "RF_Join_CTE"."Score_3_2" / 10 + "RF_Join_CTE"."Score_4_2" / 10 + "RF_Join_CTE"."Score_5_2" / 10 + "RF_Join_CTE"."Score_6_2" / 10 + "RF_Join_CTE"."Score_7_2" / 10 + "RF_Join_CTE"."Score_8_2" / 10 + "RF_Join_CTE"."Score_9_2" / 10 AS "Score_2", "RF_Join_CTE"."Proba_0_2" / 10 + "RF_Join_CTE"."Proba_1_2" / 10 + "RF_Join_CTE"."Proba_2_2" / 10 + "RF_Join_CTE"."Proba_3_2" / 10 + "RF_Join_CTE"."Proba_4_2" / 10 + "RF_Join_CTE"."Proba_5_2" / 10 + "RF_Join_CTE"."Proba_6_2" / 10 + "RF_Join_CTE"."Proba_7_2" / 10 + "RF_Join_CTE"."Proba_8_2" / 10 + "RF_Join_CTE"."Proba_9_2" / 10 AS "Proba_2", "RF_Join_CTE"."LogProba_0_2" / 10 + "RF_Join_CTE"."LogProba_1_2" / 10 + "RF_Join_CTE"."LogProba_2_2" / 10 + "RF_Join_CTE"."LogProba_3_2" / 10 + "RF_Join_CTE"."LogProba_4_2" / 10 + "RF_Join_CTE"."LogProba_5_2" / 10 + "RF_Join_CTE"."LogProba_6_2" / 10 + "RF_Join_CTE"."LogProba_7_2" / 10 + "RF_Join_CTE"."LogProba_8_2" / 10 + "RF_Join_CTE"."LogProba_9_2" / 10 AS "LogProba_2" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte