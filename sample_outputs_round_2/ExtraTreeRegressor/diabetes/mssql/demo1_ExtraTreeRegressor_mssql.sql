-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= -0.03681088325683897) THEN CASE WHEN ([ADS].[Feature_6] <= 0.04705234680884249) THEN CASE WHEN ([ADS].[Feature_4] <= 0.05497066363537981) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_7] <= -0.03872630876960599) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 0.039715715458834136) THEN CASE WHEN ([ADS].[Feature_2] <= 0.0019963656107214525) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= 0.047521662571007435) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, -0.03681088325683897 AS threshold, 442 AS count, 0 AS depth, 152.13348416289594 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, 0.04705234680884249 AS threshold, 101 AS count, 1 AS depth, 100.87128712871286 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_4' AS feature, 0.05497066363537981 AS threshold, 73 AS count, 2 AS depth, 107.75342465753425 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 71 AS count, 3 AS depth, 105.69014084507042 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 181.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_7' AS feature, -0.03872630876960599 AS threshold, 28 AS count, 2 AS depth, 82.92857142857143 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, 80.14814814814815 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 158.0 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 0.039715715458834136 AS threshold, 341 AS count, 1 AS depth, 167.316715542522 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_2' AS feature, 0.0019963656107214525 AS threshold, 246 AS count, 2 AS depth, 149.5731707317073 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 153 AS count, 3 AS depth, 130.52941176470588 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 93 AS count, 3 AS depth, 180.90322580645162 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 0.047521662571007435 AS threshold, 95 AS count, 2 AS depth, 213.26315789473685 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, 162.1764705882353 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 78 AS count, 3 AS depth, 224.39743589743588 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id)
 SELECT [DT_Output].[KEY] AS [KEY], [DT_Output].[Estimator] AS [Estimator] 
FROM [DT_Output]