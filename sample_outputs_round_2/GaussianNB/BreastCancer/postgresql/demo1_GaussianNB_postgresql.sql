-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "RawScores" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "Proba_0", -0.987294159454 + (-0.5 * 4.16196261603 - (0.5 * ("ADS"."Feature_0" - 17.4628301887) * ("ADS"."Feature_0" - 17.4628301887)) / 10.2173325688) + (-0.5 * 4.49233922065 - (0.5 * ("ADS"."Feature_1" - 21.6049056604) * ("ADS"."Feature_1" - 21.6049056604)) / 14.217337268) + (-0.5 * 8.00197733421 - (0.5 * ("ADS"."Feature_2" - 115.365377358) * ("ADS"."Feature_2" - 115.365377358)) / 475.373241851) + (-0.5 * 13.6489776973 - (0.5 * ("ADS"."Feature_3" - 978.376415094) * ("ADS"."Feature_3" - 978.376415094)) / 134739.778541) + (-0.5 * -5.80007238412 - (0.5 * ("ADS"."Feature_4" - 0.102898490566) * ("ADS"."Feature_4" - 0.102898490566)) / 0.000481815426162) + (-0.5 * -3.89910064007 - (0.5 * ("ADS"."Feature_5" - 0.145187783019) * ("ADS"."Feature_5" - 0.145187783019)) / 0.00322449894569) + (-0.5 * -3.29070587563 - (0.5 * ("ADS"."Feature_6" - 0.160774716981) * ("ADS"."Feature_6" - 0.160774716981)) / 0.005924950526) + (-0.5 * -4.6646865688 - (0.5 * ("ADS"."Feature_7" - 0.08799) * ("ADS"."Feature_7" - 0.08799)) / 0.00149958985957) + (-0.5 * -4.98935069123 - (0.5 * ("ADS"."Feature_8" - 0.192908962264) * ("ADS"."Feature_8" - 0.192908962264)) / 0.00108385867548) + (-0.5 * -6.03566851055 - (0.5 * ("ADS"."Feature_9" - 0.0626800943396) * ("ADS"."Feature_9" - 0.0626800943396)) / 0.000380682228431) + (-0.5 * -0.292321865151 - (0.5 * ("ADS"."Feature_10" - 0.60908254717) * ("ADS"."Feature_10" - 0.60908254717)) / 0.118813655715) + (-0.5 * 0.379800606503 - (0.5 * ("ADS"."Feature_11" - 1.21091462264) * ("ADS"."Feature_11" - 1.21091462264)) / 0.232683420429) + (-0.5 * 3.71987789626 - (0.5 * ("ADS"."Feature_12" - 4.32392924528) * ("ADS"."Feature_12" - 4.32392924528)) / 6.566630437) + (-0.5 * 10.0665110958 - (0.5 * ("ADS"."Feature_13" - 72.6724056604) * ("ADS"."Feature_13" - 72.6724056604)) / 3746.71235602) + (-0.5 * -6.17276106416 - (0.5 * ("ADS"."Feature_14" - 0.00678009433962) * ("ADS"."Feature_14" - 0.00678009433962)) / 0.000331912847658) + (-0.5 * -5.48525477858 - (0.5 * ("ADS"."Feature_15" - 0.0322811650943) * ("ADS"."Feature_15" - 0.0322811650943)) / 0.000660091665814) + (-0.5 * -5.30800300503 - (0.5 * ("ADS"."Feature_16" - 0.041824009434) * ("ADS"."Feature_16" - 0.041824009434)) / 0.000788104335478) + (-0.5 * -6.10863219209 - (0.5 * ("ADS"."Feature_17" - 0.0150604716981) * ("ADS"."Feature_17" - 0.0150604716981)) / 0.000353895368227) + (-0.5 * -5.92690569416 - (0.5 * ("ADS"."Feature_18" - 0.0204724009434) * ("ADS"."Feature_18" - 0.0204724009434)) / 0.000424421810756) + (-0.5 * -6.1853954104 - (0.5 * ("ADS"."Feature_19" - 0.00406240566038) * ("ADS"."Feature_19" - 0.00406240566038)) / 0.000327745725681) + (-0.5 * 4.74273993734 - (0.5 * ("ADS"."Feature_20" - 21.1348113208) * ("ADS"."Feature_20" - 21.1348113208)) / 18.2627391281) + (-0.5 * 5.2188068756 - (0.5 * ("ADS"."Feature_21" - 29.3182075472) * ("ADS"."Feature_21" - 29.3182075472)) / 29.3980930263) + (-0.5 * 8.59901619102 - (0.5 * ("ADS"."Feature_22" - 141.370330189) * ("ADS"."Feature_22" - 141.370330189)) / 863.62541264) + (-0.5 * 14.6202225487 - (0.5 * ("ADS"."Feature_23" - 1422.28632075) * ("ADS"."Feature_23" - 1422.28632075)) / 355878.792825) + (-0.5 * -5.29348281522 - (0.5 * ("ADS"."Feature_24" - 0.144845235849) * ("ADS"."Feature_24" - 0.144845235849)) / 0.00079963124395) + (-0.5 * -1.69525437195 - (0.5 * ("ADS"."Feature_25" - 0.374824103774) * ("ADS"."Feature_25" - 0.374824103774)) / 0.0292132928602) + (-0.5 * -1.56995562502 - (0.5 * ("ADS"."Feature_26" - 0.450605566038) * ("ADS"."Feature_26" - 0.450605566038)) / 0.0331128885097) + (-0.5 * -4.1705733495 - (0.5 * ("ADS"."Feature_27" - 0.182237311321) * ("ADS"."Feature_27" - 0.182237311321)) / 0.00245789394432) + (-0.5 * -3.29915006678 - (0.5 * ("ADS"."Feature_28" - 0.323467924528) * ("ADS"."Feature_28" - 0.323467924528)) / 0.00587512975526) + (-0.5 * -5.31076129673 - (0.5 * ("ADS"."Feature_29" - 0.0915299528302) * ("ADS"."Feature_29" - 0.0915299528302)) / 0.000785933509098) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Proba_1", -0.466144652347 + (-0.5 * 2.98897590042 - (0.5 * ("ADS"."Feature_0" - 12.1465238095) * ("ADS"."Feature_0" - 12.1465238095)) / 3.16166514682) + (-0.5 * 4.60524187874 - (0.5 * ("ADS"."Feature_1" - 17.9147619048) * ("ADS"."Feature_1" - 17.9147619048)) / 15.9166353757) + (-0.5 * 6.77253361573 - (0.5 * ("ADS"."Feature_2" - 78.0754061625) * ("ADS"."Feature_2" - 78.0754061625)) / 139.025385968) + (-0.5 * 11.6350323944 - (0.5 * ("ADS"."Feature_3" - 462.790196078) * ("ADS"."Feature_3" - 462.790196078)) / 17982.5177345) + (-0.5 * -5.75527900938 - (0.5 * ("ADS"."Feature_4" - 0.0924776470588) * ("ADS"."Feature_4" - 0.0924776470588)) / 0.000503888232303) + (-0.5 * -4.69180727977 - (0.5 * ("ADS"."Feature_5" - 0.0800846218487) * ("ADS"."Feature_5" - 0.0800846218487)) / 0.00145946646326) + (-0.5 * -4.27890954164 - (0.5 * ("ADS"."Feature_6" - 0.0460576210084) * ("ADS"."Feature_6" - 0.0460576210084)) / 0.00220553182642) + (-0.5 * -5.62156408339 - (0.5 * ("ADS"."Feature_7" - 0.0257174061625) * ("ADS"."Feature_7" - 0.0257174061625)) / 0.000575977966966) + (-0.5 * -5.13468430719 - (0.5 * ("ADS"."Feature_8" - 0.174185994398) * ("ADS"."Feature_8" - 0.174185994398)) / 0.000937249183419) + (-0.5 * -6.06684557288 - (0.5 * ("ADS"."Feature_9" - 0.062867394958) * ("ADS"."Feature_9" - 0.062867394958)) / 0.000368996780353) + (-0.5 * -2.50800907195 - (0.5 * ("ADS"."Feature_10" - 0.284082352941) * ("ADS"."Feature_10" - 0.284082352941)) / 0.012960018788) + (-0.5 * 0.777958394322 - (0.5 * ("ADS"."Feature_11" - 1.22038011204) * ("ADS"."Feature_11" - 1.22038011204)) / 0.346483988004) + (-0.5 * 1.31592258788 - (0.5 * ("ADS"."Feature_12" - 2.00032128852) * ("ADS"."Feature_12" - 2.00032128852)) / 0.593359705117) + (-0.5 * 6.19443529444 - (0.5 * ("ADS"."Feature_13" - 21.1351484594) * ("ADS"."Feature_13" - 21.1351484594)) / 77.9882541891) + (-0.5 * -6.16967491249 - (0.5 * ("ADS"."Feature_14" - 0.00719590196078) * ("ADS"."Feature_14" - 0.00719590196078)) / 0.000332938763295) + (-0.5 * -5.59713703525 - (0.5 * ("ADS"."Feature_15" - 0.0214382464986) * ("ADS"."Feature_15" - 0.0214382464986)) / 0.0005902206537) + (-0.5 * -4.73042996163 - (0.5 * ("ADS"."Feature_16" - 0.0259967355742) * ("ADS"."Feature_16" - 0.0259967355742)) / 0.00140417262587) + (-0.5 * -6.10243655298 - (0.5 * ("ADS"."Feature_17" - 0.00985765266106) * ("ADS"."Feature_17" - 0.00985765266106)) / 0.000356094782565) + (-0.5 * -6.05755749378 - (0.5 * ("ADS"."Feature_18" - 0.0205838067227) * ("ADS"."Feature_18" - 0.0205838067227)) / 0.000372440017413) + (-0.5 * -6.17187636985 - (0.5 * ("ADS"."Feature_19" - 0.0036360512605) * ("ADS"."Feature_19" - 0.0036360512605)) / 0.000332206618995) + (-0.5 * 3.20272926783 - (0.5 * ("ADS"."Feature_20" - 13.3798011204) * ("ADS"."Feature_20" - 13.3798011204)) / 3.91514435644) + (-0.5 * 5.24237938668 - (0.5 * ("ADS"."Feature_21" - 23.515070028) * ("ADS"."Feature_21" - 23.515070028)) / 30.0993121782) + (-0.5 * 7.04446260495 - (0.5 * ("ADS"."Feature_22" - 87.0059383754) * ("ADS"."Feature_22" - 87.0059383754)) / 182.469956681) + (-0.5 * 12.0299382828 - (0.5 * ("ADS"."Feature_23" - 558.899439776) * ("ADS"."Feature_23" - 558.899439776)) / 26690.4530404) + (-0.5 * -5.39420420994 - (0.5 * ("ADS"."Feature_24" - 0.124959495798) * ("ADS"."Feature_24" - 0.124959495798)) / 0.000723014503132) + (-0.5 * -2.89547373628 - (0.5 * ("ADS"."Feature_25" - 0.18267254902) * ("ADS"."Feature_25" - 0.18267254902)) / 0.0087969447728) + (-0.5 * -2.07557147668 - (0.5 * ("ADS"."Feature_26" - 0.166237722689) * ("ADS"."Feature_26" - 0.166237722689)) / 0.0199715095586) + (-0.5 * -4.59896241272 - (0.5 * ("ADS"."Feature_27" - 0.0744443445378) * ("ADS"."Feature_27" - 0.0744443445378)) / 0.00160146013881) + (-0.5 * -4.3465210384 - (0.5 * ("ADS"."Feature_28" - 0.270245938375) * ("ADS"."Feature_28" - 0.270245938375)) / 0.00206134189109) + (-0.5 * -5.73615841612 - (0.5 * ("ADS"."Feature_29" - 0.0794420728291) * ("ADS"."Feature_29" - 0.0794420728291)) / 0.000513615574159) AS "Score_1" 
FROM "INPUT_DATA" AS "ADS"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "Score_1", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte