-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "RawScores" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "Proba_0", -1.38629436112 + (-0.5 * 2.89534528076 - (0.5 * ("ADS"."Feature_0" - 0.253962381942) * ("ADS"."Feature_0" - 0.253962381942)) / 2.87907255954) + (-0.5 * 1.81025298198 - (0.5 * ("ADS"."Feature_1" - 0.212055956685) * ("ADS"."Feature_1" - 0.212055956685)) / 0.972753971441) + (-0.5 * 1.64133552911 - (0.5 * ("ADS"."Feature_2" - -0.933241844827) * ("ADS"."Feature_2" - -0.933241844827)) / 0.821567204905) + (-0.5 * 2.02618073694 - (0.5 * ("ADS"."Feature_3" - -0.0684679789735) * ("ADS"."Feature_3" - -0.0684679789735)) / 1.20720005077) + (-0.5 * 1.65012596511 - (0.5 * ("ADS"."Feature_4" - 0.183055731027) * ("ADS"."Feature_4" - 0.183055731027)) / 0.828820974026) + (-0.5 * 1.40675628955 - (0.5 * ("ADS"."Feature_5" - 0.013524566194) * ("ADS"."Feature_5" - 0.013524566194)) / 0.649780427597) + (-0.5 * 2.32101091116 - (0.5 * ("ADS"."Feature_6" - 0.142514355041) * ("ADS"."Feature_6" - 0.142514355041)) / 1.62114687249) + (-0.5 * 1.70160628361 - (0.5 * ("ADS"."Feature_7" - 0.124771542451) * ("ADS"."Feature_7" - 0.124771542451)) / 0.872606313714) + (-0.5 * 1.6451790693 - (0.5 * ("ADS"."Feature_8" - -0.141799137425) * ("ADS"."Feature_8" - -0.141799137425)) / 0.824731007678) + (-0.5 * 1.10714370243 - (0.5 * ("ADS"."Feature_9" - -0.0588347674408) * ("ADS"."Feature_9" - -0.0588347674408)) / 0.481555704952) + (-0.5 * 1.97957064635 - (0.5 * ("ADS"."Feature_10" - 0.0504791893268) * ("ADS"."Feature_10" - 0.0504791893268)) / 1.15222353004) + (-0.5 * 2.88792005029 - (0.5 * ("ADS"."Feature_11" - -0.964938524158) * ("ADS"."Feature_11" - -0.964938524158)) / 2.85777395364) + (-0.5 * 2.32491748423 - (0.5 * ("ADS"."Feature_12" - -0.0790212127783) * ("ADS"."Feature_12" - -0.0790212127783)) / 1.62749238775) + (-0.5 * 1.62539698366 - (0.5 * ("ADS"."Feature_13" - 0.027155885244) * ("ADS"."Feature_13" - 0.027155885244)) / 0.808576420784) + (-0.5 * 2.25479534488 - (0.5 * ("ADS"."Feature_14" - 1.13478365345) * ("ADS"."Feature_14" - 1.13478365345)) / 1.51727851355) + (-0.5 * 1.18147206012 - (0.5 * ("ADS"."Feature_15" - 0.0423215252594) * ("ADS"."Feature_15" - 0.0423215252594)) / 0.518712755681) + (-0.5 * 3.15303619794 - (0.5 * ("ADS"."Feature_16" - 0.262825201161) * ("ADS"."Feature_16" - 0.262825201161)) / 3.72534375774) + (-0.5 * 1.88884952745 - (0.5 * ("ADS"."Feature_17" - -0.108128227238) * ("ADS"."Feature_17" - -0.108128227238)) / 1.05229391381) + (-0.5 * 1.44253113294 - (0.5 * ("ADS"."Feature_18" - -0.0105954828053) * ("ADS"."Feature_18" - -0.0105954828053)) / 0.673447031084) + (-0.5 * 1.99077591492 - (0.5 * ("ADS"."Feature_19" - 0.0450400116744) * ("ADS"."Feature_19" - 0.0450400116744)) / 1.16520711055) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Proba_1", -1.42711635564 + (-0.5 * 2.48516265326 - (0.5 * ("ADS"."Feature_0" - -0.091029014093) * ("ADS"."Feature_0" - -0.091029014093)) / 1.91034831032) + (-0.5 * 1.55481783353 - (0.5 * ("ADS"."Feature_1" - 0.177463812156) * ("ADS"."Feature_1" - 0.177463812156)) / 0.753475156037) + (-0.5 * 2.81198408318 - (0.5 * ("ADS"."Feature_2" - -0.252564467696) * ("ADS"."Feature_2" - -0.252564467696)) / 2.64880081987) + (-0.5 * 1.75436130598 - (0.5 * ("ADS"."Feature_3" - 0.146566807768) * ("ADS"."Feature_3" - 0.146566807768)) / 0.919876588909) + (-0.5 * 1.7452430506 - (0.5 * ("ADS"."Feature_4" - -0.178336512726) * ("ADS"."Feature_4" - -0.178336512726)) / 0.911527043747) + (-0.5 * 1.81256090959 - (0.5 * ("ADS"."Feature_5" - -0.118170576731) * ("ADS"."Feature_5" - -0.118170576731)) / 0.975001609886) + (-0.5 * 1.29741243829 - (0.5 * ("ADS"."Feature_6" - -0.042056587065) * ("ADS"."Feature_6" - -0.042056587065)) / 0.582477554041) + (-0.5 * 1.63419747937 - (0.5 * ("ADS"."Feature_7" - 0.0528364914164) * ("ADS"."Feature_7" - 0.0528364914164)) / 0.815723697763) + (-0.5 * 1.53035726384 - (0.5 * ("ADS"."Feature_8" - 0.0896156469201) * ("ADS"."Feature_8" - 0.0896156469201)) / 0.735268307202) + (-0.5 * 2.17508849401 - (0.5 * ("ADS"."Feature_9" - -0.446054713087) * ("ADS"."Feature_9" - -0.446054713087)) / 1.40103524994) + (-0.5 * 1.83733905936 - (0.5 * ("ADS"."Feature_10" - -0.0139890529533) * ("ADS"."Feature_10" - -0.0139890529533)) / 0.99946213765) + (-0.5 * 2.47584223607 - (0.5 * ("ADS"."Feature_11" - -0.300827039385) * ("ADS"."Feature_11" - -0.300827039385)) / 1.89262578604) + (-0.5 * 1.53525035993 - (0.5 * ("ADS"."Feature_12" - 0.236957997431) * ("ADS"."Feature_12" - 0.236957997431)) / 0.738874862097) + (-0.5 * 1.72169503073 - (0.5 * ("ADS"."Feature_13" - 0.0670197147859) * ("ADS"."Feature_13" - 0.0670197147859)) / 0.890313139788) + (-0.5 * 2.87523700971 - (0.5 * ("ADS"."Feature_14" - 0.163136691159) * ("ADS"."Feature_14" - 0.163136691159)) / 2.82175757202) + (-0.5 * 1.80653984634 - (0.5 * ("ADS"."Feature_15" - 0.272527228981) * ("ADS"."Feature_15" - 0.272527228981)) / 0.969148701568) + (-0.5 * 2.51982683007 - (0.5 * ("ADS"."Feature_16" - -0.0736306057719) * ("ADS"."Feature_16" - -0.0736306057719)) / 1.97773008167) + (-0.5 * 1.70595011502 - (0.5 * ("ADS"."Feature_17" - -0.218615772479) * ("ADS"."Feature_17" - -0.218615772479)) / 0.876405012906) + (-0.5 * 1.87421593986 - (0.5 * ("ADS"."Feature_18" - 0.329324150573) * ("ADS"."Feature_18" - 0.329324150573)) / 1.03700720117) + (-0.5 * 1.45627753085 - (0.5 * ("ADS"."Feature_19" - 0.040027876866) * ("ADS"."Feature_19" - 0.040027876866)) / 0.682768422941) AS "Score_1", CAST(NULL AS FLOAT(53)) AS "LogProba_2", CAST(NULL AS FLOAT(53)) AS "Proba_2", -1.38629436112 + (-0.5 * 2.35796050845 - (0.5 * ("ADS"."Feature_0" - 0.0553112173877) * ("ADS"."Feature_0" - 0.0553112173877)) / 1.68216800737) + (-0.5 * 2.09003163901 - (0.5 * ("ADS"."Feature_1" - 0.342055078196) * ("ADS"."Feature_1" - 0.342055078196)) / 1.28679492515) + (-0.5 * 1.05676613157 - (0.5 * ("ADS"."Feature_2" - 1.04177354476) * ("ADS"."Feature_2" - 1.04177354476)) / 0.457897034867) + (-0.5 * 1.42166260979 - (0.5 * ("ADS"."Feature_3" - -0.51847003916) * ("ADS"."Feature_3" - -0.51847003916)) / 0.659538812855) + (-0.5 * 1.62833867307 - (0.5 * ("ADS"."Feature_4" - 0.0914580077784) * ("ADS"."Feature_4" - 0.0914580077784)) / 0.81095850343) + (-0.5 * 1.64318923515 - (0.5 * ("ADS"."Feature_5" - 0.0283234860105) * ("ADS"."Feature_5" - 0.0283234860105)) / 0.823091561411) + (-0.5 * 2.28362547592 - (0.5 * ("ADS"."Feature_6" - -0.462725191692) * ("ADS"."Feature_6" - -0.462725191692)) / 1.56165851867) + (-0.5 * 2.50138207576 - (0.5 * ("ADS"."Feature_7" - 0.209797417928) * ("ADS"."Feature_7" - 0.209797417928)) / 1.94158569807) + (-0.5 * 1.60053556625 - (0.5 * ("ADS"."Feature_8" - -0.0665913339707) * ("ADS"."Feature_8" - -0.0665913339707)) / 0.788721893372) + (-0.5 * 2.04623339293 - (0.5 * ("ADS"."Feature_9" - -0.105154393371) * ("ADS"."Feature_9" - -0.105154393371)) / 1.23165196163) + (-0.5 * 2.01389297189 - (0.5 * ("ADS"."Feature_10" - 0.480639855318) * ("ADS"."Feature_10" - 0.480639855318)) / 1.19245702511) + (-0.5 * 3.25545632429 - (0.5 * ("ADS"."Feature_11" - 0.188639583484) * ("ADS"."Feature_11" - 0.188639583484)) / 4.12711765051) + (-0.5 * 1.23429491042 - (0.5 * ("ADS"."Feature_12" - 0.0586795529735) * ("ADS"."Feature_12" - 0.0586795529735)) / 0.546849224135) + (-0.5 * 1.80892983021 - (0.5 * ("ADS"."Feature_13" - 0.0209009175505) * ("ADS"."Feature_13" - 0.0209009175505)) / 0.97146772144) + (-0.5 * 2.76265383268 - (0.5 * ("ADS"."Feature_14" - 0.285779410766) * ("ADS"."Feature_14" - 0.285779410766)) / 2.52130535713) + (-0.5 * 1.59611154641 - (0.5 * ("ADS"."Feature_15" - 0.343282835519) * ("ADS"."Feature_15" - 0.343282835519)) / 0.785240279109) + (-0.5 * 2.53092829486 - (0.5 * ("ADS"."Feature_16" - -0.195198777047) * ("ADS"."Feature_16" - -0.195198777047)) / 1.99980810499) + (-0.5 * 1.73388992087 - (0.5 * ("ADS"."Feature_17" - 0.1416399744) * ("ADS"."Feature_17" - 0.1416399744)) / 0.901236882258) + (-0.5 * 1.65397009214 - (0.5 * ("ADS"."Feature_18" - 0.132515721651) * ("ADS"."Feature_18" - 0.132515721651)) / 0.832013198862) + (-0.5 * 1.88152186938 - (0.5 * ("ADS"."Feature_19" - 0.545840762586) * ("ADS"."Feature_19" - 0.545840762586)) / 1.04461124617) AS "Score_2", CAST(NULL AS FLOAT(53)) AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Proba_3", -1.34707364797 + (-0.5 * 1.27966959252 - (0.5 * ("ADS"."Feature_0" - 0.766185906141) * ("ADS"."Feature_0" - 0.766185906141)) / 0.57223388925) + (-0.5 * 1.53931219832 - (0.5 * ("ADS"."Feature_1" - 0.178121994642) * ("ADS"."Feature_1" - 0.178121994642)) / 0.741882155809) + (-0.5 * 1.73743924223 - (0.5 * ("ADS"."Feature_2" - 0.724128294203) * ("ADS"."Feature_2" - 0.724128294203)) / 0.904441345047) + (-0.5 * 1.84964745197 - (0.5 * ("ADS"."Feature_3" - 0.0789452322652) * ("ADS"."Feature_3" - 0.0789452322652)) / 1.01183992913) + (-0.5 * 1.79033896256 - (0.5 * ("ADS"."Feature_4" - 0.109028400665) * ("ADS"."Feature_4" - 0.109028400665)) / 0.953574137596) + (-0.5 * 1.99772038822 - (0.5 * ("ADS"."Feature_5" - 0.0185946789684) * ("ADS"."Feature_5" - 0.0185946789684)) / 1.17332702184) + (-0.5 * 2.0897302278 - (0.5 * ("ADS"."Feature_6" - -0.335441695758) * ("ADS"."Feature_6" - -0.335441695758)) / 1.28640712918) + (-0.5 * 1.42040143769 - (0.5 * ("ADS"."Feature_7" - -0.370338049357) * ("ADS"."Feature_7" - -0.370338049357)) / 0.658707545198) + (-0.5 * 1.57140737663 - (0.5 * ("ADS"."Feature_8" - 0.0444823791002) * ("ADS"."Feature_8" - 0.0444823791002)) / 0.766079223406) + (-0.5 * 1.46142440254 - (0.5 * ("ADS"."Feature_9" - -0.0852931556816) * ("ADS"."Feature_9" - -0.0852931556816)) / 0.68629160331) + (-0.5 * 1.79299825837 - (0.5 * ("ADS"."Feature_10" - -0.0490482712922) * ("ADS"."Feature_10" - -0.0490482712922)) / 0.956113348064) + (-0.5 * 2.45529244199 - (0.5 * ("ADS"."Feature_11" - -0.322218959341) * ("ADS"."Feature_11" - -0.322218959341)) / 1.85412961478) + (-0.5 * 2.00197468077 - (0.5 * ("ADS"."Feature_12" - 0.377845526785) * ("ADS"."Feature_12" - 0.377845526785)) / 1.17832933135) + (-0.5 * 1.67054241041 - (0.5 * ("ADS"."Feature_13" - 0.0446577115614) * ("ADS"."Feature_13" - 0.0446577115614)) / 0.845916472943) + (-0.5 * 2.48928599913 - (0.5 * ("ADS"."Feature_14" - 1.09532579935) * ("ADS"."Feature_14" - 1.09532579935)) / 1.91824159931) + (-0.5 * 2.11191696989 - (0.5 * ("ADS"."Feature_15" - -0.186341766663) * ("ADS"."Feature_15" - -0.186341766663)) / 1.31526728493) + (-0.5 * 2.9143656522 - (0.5 * ("ADS"."Feature_16" - -0.0379294463733) * ("ADS"."Feature_16" - -0.0379294463733)) / 2.93435769423) + (-0.5 * 2.00754806065 - (0.5 * ("ADS"."Feature_17" - 0.080658945718) * ("ADS"."Feature_17" - 0.080658945718)) / 1.18491494334) + (-0.5 * 1.68759989503 - (0.5 * ("ADS"."Feature_18" - 0.281071978783) * ("ADS"."Feature_18" - 0.281071978783)) / 0.860469445862) + (-0.5 * 1.1654673867 - (0.5 * ("ADS"."Feature_19" - 0.0982645037595) * ("ADS"."Feature_19" - 0.0982645037595)) / 0.510477008449) AS "Score_3" 
FROM "INPUT_DATA" AS "ADS"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1", exp(CASE WHEN (score_max."Score_2" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_2" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_2", exp(CASE WHEN (score_max."Score_3" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_3" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "Score_1", CAST(NULL AS FLOAT(53)) AS "Score_2", CAST(NULL AS FLOAT(53)) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte