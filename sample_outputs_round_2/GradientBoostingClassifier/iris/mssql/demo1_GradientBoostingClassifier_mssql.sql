-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.800000011920929) THEN 1 ELSE 2 END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 150 AS count, 0 AS depth, 3.515706244646329e-16 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 2.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 100 AS count, 1 AS depth, -1.0000000000000002 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[RF_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0_0, [DT_Output].[Estimator] AS [Estimator_0_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.800000011920929) THEN 1 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 150 AS count, 0 AS depth, 0.00035651168661645266 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, -0.9667773351250146 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 100 AS count, 1 AS depth, 0.1557466542564274 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 54 AS count, 2 AS depth, 0.5631540616638339 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, 1.8750330480584878 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, -0.032249101538204726 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 2 AS depth, -0.32251421530879 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, -0.032249101538204726 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, -1.0166527916526265 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[RF_Tree_0_1] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_0_1, [DT_Output_1].[Estimator] AS [Estimator_0_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.5499999523162842) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN CASE WHEN ([ADS].[Feature_0] <= 5.949999809265137) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 150 AS count, 0 AS depth, 0.0011918978148238576 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 104 AS count, 1 AS depth, -0.27379655889775506 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 98 AS count, 2 AS depth, -0.31027581726912395 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 97 AS count, 3 AS depth, -0.9810742840699357 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2.0740477692135406 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_3' AS feature, 1.5499999523162842 AS threshold, 6 AS count, 2 AS depth, 0.3220313278346041 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.9344118015463494 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, -0.03335964557338435 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 1 AS depth, 0.6229049303823936 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_0' AS feature, 5.949999809265137 AS threshold, 3 AS count, 2 AS depth, 0.32203132783460414 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -1.0172453691332513 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.9344118015463494 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 2 AS depth, 1.8721128554017583 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[RF_Tree_0_2] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_0_2, [DT_Output_2].[Estimator] AS [Estimator_0_2] 
FROM [DT_Output_2]), 
[RF_Join_CTE_0] AS 
(SELECT [RF_Tree_0_0].join_key_0_0 AS join_key_0_0, [RF_Tree_0_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Tree_0_1].join_key_0_1 AS join_key_0_1, [RF_Tree_0_1].[Estimator_0_1] AS [Estimator_0_1], [RF_Tree_0_2].join_key_0_2 AS join_key_0_2, [RF_Tree_0_2].[Estimator_0_2] AS [Estimator_0_2] 
FROM [RF_Tree_0_0] LEFT OUTER JOIN [RF_Tree_0_1] ON [RF_Tree_0_0].join_key_0_0 = [RF_Tree_0_1].join_key_0_1 LEFT OUTER JOIN [RF_Tree_0_2] ON [RF_Tree_0_2].join_key_0_2 = [RF_Tree_0_1].join_key_0_1), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_1] <= 2.450000047683716) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.5499999523162842) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 150 AS count, 0 AS depth, -0.0006723088207449931 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 1.6570034059435073 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 100 AS count, 1 AS depth, -0.2998421094760814 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_1' AS feature, 2.450000047683716 AS threshold, 2 AS count, 2 AS depth, -0.28531729854869425 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.9521783172479045 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.9142233159207346 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 1.5499999523162842 AS threshold, 98 AS count, 2 AS depth, -0.30013853418888514 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 47 AS count, 3 AS depth, -0.9513888789916843 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 51 AS count, 3 AS depth, -0.9537793504946179 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[RF_Tree_1_0] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_1_0, [DT_Output_3].[Estimator] AS [Estimator_1_0] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.800000011920929) THEN 1 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 150 AS count, 0 AS depth, 0.00036854026233812544 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, -0.9244235202577947 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 100 AS count, 1 AS depth, 0.1399677257124326 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 54 AS count, 2 AS depth, 0.5049901826737979 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, 1.5686084138213452 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, -0.023681485239703967 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 2 AS depth, -0.28853689767699536 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, -0.023232372588631922 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, -0.9635605370271657 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].count AS count, [DT_node_data_4].depth AS depth, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[RF_Tree_1_1] AS 
(SELECT [DT_Output_4].[KEY] AS join_key_1_1, [DT_Output_4].[Estimator] AS [Estimator_1_1] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.5499999523162842) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN CASE WHEN ([ADS].[Feature_0] <= 5.949999809265137) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 150 AS count, 0 AS depth, 0.0013705314904716656 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 104 AS count, 1 AS depth, -0.2448038125181862 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 98 AS count, 2 AS depth, -0.277507370480047 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 97 AS count, 3 AS depth, -0.9350531508438256 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.878592181973727 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_3' AS feature, 1.5499999523162842 AS threshold, 6 AS count, 2 AS depth, 0.2893543008588737 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.665027176954651 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, -0.06090319588552798 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 1 AS depth, 0.5579386135970025 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_0' AS feature, 5.949999809265137 AS threshold, 3 AS count, 2 AS depth, 0.28903911968348966 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.9980857950181327 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.6649436752652744 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 2 AS depth, 1.5749236005256362 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].count AS count, [DT_node_data_5].depth AS depth, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[RF_Tree_1_2] AS 
(SELECT [DT_Output_5].[KEY] AS join_key_1_2, [DT_Output_5].[Estimator] AS [Estimator_1_2] 
FROM [DT_Output_5]), 
[RF_Join_CTE_1] AS 
(SELECT [RF_Tree_1_0].join_key_1_0 AS join_key_1_0, [RF_Tree_1_0].[Estimator_1_0] AS [Estimator_1_0], [RF_Tree_1_1].join_key_1_1 AS join_key_1_1, [RF_Tree_1_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Tree_1_2].join_key_1_2 AS join_key_1_2, [RF_Tree_1_2].[Estimator_1_2] AS [Estimator_1_2] 
FROM [RF_Tree_1_0] LEFT OUTER JOIN [RF_Tree_1_1] ON [RF_Tree_1_0].join_key_1_0 = [RF_Tree_1_1].join_key_1_1 LEFT OUTER JOIN [RF_Tree_1_2] ON [RF_Tree_1_2].join_key_1_2 = [RF_Tree_1_1].join_key_1_1), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_1] <= 2.450000047683716) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.5499999523162842) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 150 AS count, 0 AS depth, -0.0012383642083932385 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 1.4312808514511408 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 100 AS count, 1 AS depth, -0.2689659143206054 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_1' AS feature, 2.450000047683716 AS threshold, 2 AS count, 2 AS depth, -0.24539147702133457 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.9118637512882077 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.8567728496176328 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 1.5499999523162842 AS threshold, 98 AS count, 2 AS depth, -0.2694470252858967 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 47 AS count, 3 AS depth, -0.9106963418339656 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 51 AS count, 3 AS depth, -0.9146870909275915 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].count AS count, [DT_node_data_6].depth AS depth, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[RF_Tree_2_0] AS 
(SELECT [DT_Output_6].[KEY] AS join_key_2_0, [DT_Output_6].[Estimator] AS [Estimator_2_0] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.800000011920929) THEN 1 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 150 AS count, 0 AS depth, 0.0004577435697922172 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, -0.8883615361133477 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 100 AS count, 1 AS depth, 0.12546400633483692 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 54 AS count, 2 AS depth, 0.4516190711292801 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, 1.3620363870009515 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, -0.01444024519013893 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 2 AS depth, -0.2574136784238572 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, -0.0138372776583341 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, -0.9196044068426178 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].count AS count, [DT_node_data_7].depth AS depth, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[RF_Tree_2_1] AS 
(SELECT [DT_Output_7].[KEY] AS join_key_2_1, [DT_Output_7].[Estimator] AS [Estimator_2_1] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.5499999523162842) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN CASE WHEN ([ADS].[Feature_1] <= 3.0999999046325684) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 150 AS count, 0 AS depth, 0.0015473810045931484 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 104 AS count, 1 AS depth, -0.21818826190462556 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 98 AS count, 2 AS depth, -0.24746347498850185 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 97 AS count, 3 AS depth, -0.8965094818045882 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.7330322558083657 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_3' AS feature, 1.5499999523162842 AS threshold, 6 AS count, 2 AS depth, 0.25997355179868 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.4779207203199518 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, -0.08358956761404678 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 1 AS depth, 0.4983410084515234 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_1' AS feature, 3.0999999046325684 AS threshold, 3 AS count, 2 AS depth, 0.25951721705791836 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.477753218261795 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.9792080562788409 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 2 AS depth, 1.37457932746014 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].count AS count, [DT_node_data_8].depth AS depth, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[RF_Tree_2_2] AS 
(SELECT [DT_Output_8].[KEY] AS join_key_2_2, [DT_Output_8].[Estimator] AS [Estimator_2_2] 
FROM [DT_Output_8]), 
[RF_Join_CTE_2] AS 
(SELECT [RF_Tree_2_0].join_key_2_0 AS join_key_2_0, [RF_Tree_2_0].[Estimator_2_0] AS [Estimator_2_0], [RF_Tree_2_1].join_key_2_1 AS join_key_2_1, [RF_Tree_2_1].[Estimator_2_1] AS [Estimator_2_1], [RF_Tree_2_2].join_key_2_2 AS join_key_2_2, [RF_Tree_2_2].[Estimator_2_2] AS [Estimator_2_2] 
FROM [RF_Tree_2_0] LEFT OUTER JOIN [RF_Tree_2_1] ON [RF_Tree_2_0].join_key_2_0 = [RF_Tree_2_1].join_key_2_1 LEFT OUTER JOIN [RF_Tree_2_2] ON [RF_Tree_2_2].join_key_2_2 = [RF_Tree_2_1].join_key_2_1), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_2] <= 3.9000000953674316) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.5499999523162842) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 150 AS count, 0 AS depth, -0.0017202799151065588 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 1.2727395980760727 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 100 AS count, 1 AS depth, -0.2406781942821194 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 3.9000000953674316 AS threshold, 2 AS count, 2 AS depth, -0.21176657445349856 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.8777446666721055 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.8160488775999021 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 1.5499999523162842 AS threshold, 98 AS count, 2 AS depth, -0.24126822733984635 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 47 AS count, 3 AS depth, -0.8764303196688829 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 51 AS count, 3 AS depth, -0.8815711127816306 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].count AS count, [DT_node_data_9].depth AS depth, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[RF_Tree_3_0] AS 
(SELECT [DT_Output_9].[KEY] AS join_key_3_0, [DT_Output_9].[Estimator] AS [Estimator_3_0] 
FROM [DT_Output_9]), 
[DT_node_lookup_10] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.800000011920929) THEN 1 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 5.349999904632568) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 150 AS count, 0 AS depth, 0.0005817820959303677 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, -0.857627134724332 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 100 AS count, 1 AS depth, 0.11220337871855407 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 5.349999904632568 AS threshold, 54 AS count, 2 AS depth, 0.4028984999451855 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 52 AS count, 3 AS depth, 1.164724692936808 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, -1.0090256348939268 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 2 AS depth, -0.22904741576488305 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, -0.0044789962531793385 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, -0.8829138037903186 AS [Estimator]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].count AS count, [DT_node_data_10].depth AS depth, [DT_node_data_10].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[RF_Tree_3_1] AS 
(SELECT [DT_Output_10].[KEY] AS join_key_3_1, [DT_Output_10].[Estimator] AS [Estimator_3_1] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.5499999523162842) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN CASE WHEN ([ADS].[Feature_1] <= 3.0999999046325684) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 150 AS count, 0 AS depth, 0.0017638289500742407 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 104 AS count, 1 AS depth, -0.1938279853239599 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 98 AS count, 2 AS depth, -0.22040248340662305 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 97 AS count, 3 AS depth, -0.8644144071575214 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.6163425974950096 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_3' AS feature, 1.5499999523162842 AS threshold, 6 AS count, 2 AS depth, 0.24022215002620742 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.3612158129081704 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, -0.08471307686301104 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 1 AS depth, 0.4439714090478903 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_1' AS feature, 3.0999999046325684 AS threshold, 3 AS count, 2 AS depth, 0.23312590211306708 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.3407365970784422 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.960814269070605 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 2 AS depth, 1.2315609782700052 AS [Estimator]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].count AS count, [DT_node_data_11].depth AS depth, [DT_node_data_11].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[RF_Tree_3_2] AS 
(SELECT [DT_Output_11].[KEY] AS join_key_3_2, [DT_Output_11].[Estimator] AS [Estimator_3_2] 
FROM [DT_Output_11]), 
[RF_Join_CTE_3] AS 
(SELECT [RF_Tree_3_0].join_key_3_0 AS join_key_3_0, [RF_Tree_3_0].[Estimator_3_0] AS [Estimator_3_0], [RF_Tree_3_1].join_key_3_1 AS join_key_3_1, [RF_Tree_3_1].[Estimator_3_1] AS [Estimator_3_1], [RF_Tree_3_2].join_key_3_2 AS join_key_3_2, [RF_Tree_3_2].[Estimator_3_2] AS [Estimator_3_2] 
FROM [RF_Tree_3_0] LEFT OUTER JOIN [RF_Tree_3_1] ON [RF_Tree_3_0].join_key_3_0 = [RF_Tree_3_1].join_key_3_1 LEFT OUTER JOIN [RF_Tree_3_2] ON [RF_Tree_3_2].join_key_3_2 = [RF_Tree_3_1].join_key_3_1), 
[DT_node_lookup_12] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_3] <= 1.350000023841858) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_1] <= 2.950000047683716) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 150 AS count, 0 AS depth, -0.0021751992749656766 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 1.1562843799249847 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 100 AS count, 1 AS depth, -0.21498308233013325 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 1.350000023841858 AS threshold, 2 AS count, 2 AS depth, -0.18366574220785212 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.84943241796429 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.7863204896627827 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 2.950000047683716 AS threshold, 98 AS count, 2 AS depth, -0.21562221172038376 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 53 AS count, 3 AS depth, -0.8482045025184742 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 45 AS count, 3 AS depth, -0.8534909602780549 AS [Estimator]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].count AS count, [DT_node_data_12].depth AS depth, [DT_node_data_12].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[RF_Tree_4_0] AS 
(SELECT [DT_Output_12].[KEY] AS join_key_4_0, [DT_Output_12].[Estimator] AS [Estimator_4_0] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.800000011920929) THEN 1 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 5.349999904632568) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 150 AS count, 0 AS depth, 0.000697929409018465 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, -0.8313992954539149 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 100 AS count, 1 AS depth, 0.1001163963899941 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 5.349999904632568 AS threshold, 54 AS count, 2 AS depth, 0.35859869996127003 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 52 AS count, 3 AS depth, 1.0565851949263658 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, -0.9770520757349944 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 2 AS depth, -0.20331935128063428 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.00456420157707428 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, -0.8520877065364278 AS [Estimator]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].count AS count, [DT_node_data_13].depth AS depth, [DT_node_data_13].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[RF_Tree_4_1] AS 
(SELECT [DT_Output_13].[KEY] AS join_key_4_1, [DT_Output_13].[Estimator] AS [Estimator_4_1] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_0] <= 6.050000190734863) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_1] <= 2.75) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 150 AS count, 0 AS depth, 0.0019644793832608153 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 102 AS count, 1 AS depth, -0.17725213583610122 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 97 AS count, 2 AS depth, -0.20369135570319674 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 3 AS depth, -0.8338757662437346 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 47 AS count, 3 AS depth, -0.8407579801218943 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, 6.050000190734863 AS threshold, 5 AS count, 2 AS depth, 0.33566872958555044 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.2153426619736128 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.38152755567459 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 48 AS count, 1 AS depth, 0.3827997867244048 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_1' AS feature, 2.75 AS threshold, 2 AS count, 2 AS depth, 0.10990121822455179 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.522669363195646 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -1.0137412129226422 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 2 AS depth, 0.3946649418765724 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.5952997061749206 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, 1.1253233859278855 AS [Estimator]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].count AS count, [DT_node_data_14].depth AS depth, [DT_node_data_14].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[RF_Tree_4_2] AS 
(SELECT [DT_Output_14].[KEY] AS join_key_4_2, [DT_Output_14].[Estimator] AS [Estimator_4_2] 
FROM [DT_Output_14]), 
[RF_Join_CTE_4] AS 
(SELECT [RF_Tree_4_0].join_key_4_0 AS join_key_4_0, [RF_Tree_4_0].[Estimator_4_0] AS [Estimator_4_0], [RF_Tree_4_1].join_key_4_1 AS join_key_4_1, [RF_Tree_4_1].[Estimator_4_1] AS [Estimator_4_1], [RF_Tree_4_2].join_key_4_2 AS join_key_4_2, [RF_Tree_4_2].[Estimator_4_2] AS [Estimator_4_2] 
FROM [RF_Tree_4_0] LEFT OUTER JOIN [RF_Tree_4_1] ON [RF_Tree_4_0].join_key_4_0 = [RF_Tree_4_1].join_key_4_1 LEFT OUTER JOIN [RF_Tree_4_2] ON [RF_Tree_4_2].join_key_4_2 = [RF_Tree_4_1].join_key_4_1), 
[DT_node_lookup_15] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.800000011920929) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_2] <= 3.9000000953674316) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_1] <= 2.950000047683716) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.800000011920929 AS threshold, 150 AS count, 0 AS depth, -0.0025349720569680457 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, 1.0679761758602564 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 100 AS count, 1 AS depth, -0.19168563294669572 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 3.9000000953674316 AS threshold, 2 AS count, 2 AS depth, -0.15963216255948334 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.8252792089512753 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.7637130098430075 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 2.950000047683716 AS threshold, 98 AS count, 2 AS depth, -0.19233978540357746 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 53 AS count, 3 AS depth, -0.8238279412026767 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 45 AS count, 3 AS depth, -0.8289610170681887 AS [Estimator]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].count AS count, [DT_node_data_15].depth AS depth, [DT_node_data_15].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[RF_Tree_5_0] AS 
(SELECT [DT_Output_15].[KEY] AS join_key_5_0, [DT_Output_15].[Estimator] AS [Estimator_5_0] 
FROM [DT_Output_15]), 
[DT_node_lookup_16] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 1 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_16] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 150 AS count, 0 AS depth, 0.0007854425533532796 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, -0.80896803664064 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 100 AS count, 1 AS depth, 0.08913056956715934 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 52 AS count, 2 AS depth, 0.3280313096159009 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 47 AS count, 3 AS depth, 1.0689428999759012 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, -0.39046480675839845 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 48 AS count, 2 AS depth, -0.16967856548564333 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.19082095548418196 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 46 AS count, 3 AS depth, -0.7522329583467586 AS [Estimator]) AS [Values]), 
[DT_Output_16] AS 
(SELECT [DT_node_lookup_16].[KEY] AS [KEY], [DT_node_lookup_16].node_id_2 AS node_id_2, [DT_node_data_16].node_id AS node_id, [DT_node_data_16].feature AS feature, [DT_node_data_16].threshold AS threshold, [DT_node_data_16].count AS count, [DT_node_data_16].depth AS depth, [DT_node_data_16].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_16] LEFT OUTER JOIN [DT_node_data_16] ON [DT_node_lookup_16].node_id_2 = [DT_node_data_16].node_id), 
[RF_Tree_5_1] AS 
(SELECT [DT_Output_16].[KEY] AS join_key_5_1, [DT_Output_16].[Estimator] AS [Estimator_5_1] 
FROM [DT_Output_16]), 
[DT_node_lookup_17] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_0] <= 6.050000190734863) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_1] <= 2.75) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_17] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 150 AS count, 0 AS depth, 0.0019848503789863833 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 102 AS count, 1 AS depth, -0.15698418803378567 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 97 AS count, 2 AS depth, -0.180535972623325 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 3 AS depth, -0.8106249304289053 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 47 AS count, 3 AS depth, -0.8166639945996957 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, 6.050000190734863 AS threshold, 5 AS count, 2 AS depth, 0.29992043300327553 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.16351364940685587 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.2594545321586899 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 48 AS count, 1 AS depth, 0.3397940570061273 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_1' AS feature, 2.75 AS threshold, 2 AS count, 2 AS depth, 0.10029629998939688 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.3993998599290411 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, -0.9847550664136872 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 46 AS count, 2 AS depth, 0.35020700296337637 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.5006263757453551 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, 1.0453901492649995 AS [Estimator]) AS [Values]), 
[DT_Output_17] AS 
(SELECT [DT_node_lookup_17].[KEY] AS [KEY], [DT_node_lookup_17].node_id_2 AS node_id_2, [DT_node_data_17].node_id AS node_id, [DT_node_data_17].feature AS feature, [DT_node_data_17].threshold AS threshold, [DT_node_data_17].count AS count, [DT_node_data_17].depth AS depth, [DT_node_data_17].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_17] LEFT OUTER JOIN [DT_node_data_17] ON [DT_node_lookup_17].node_id_2 = [DT_node_data_17].node_id), 
[RF_Tree_5_2] AS 
(SELECT [DT_Output_17].[KEY] AS join_key_5_2, [DT_Output_17].[Estimator] AS [Estimator_5_2] 
FROM [DT_Output_17]), 
[RF_Join_CTE_5] AS 
(SELECT [RF_Tree_5_0].join_key_5_0 AS join_key_5_0, [RF_Tree_5_0].[Estimator_5_0] AS [Estimator_5_0], [RF_Tree_5_1].join_key_5_1 AS join_key_5_1, [RF_Tree_5_1].[Estimator_5_1] AS [Estimator_5_1], [RF_Tree_5_2].join_key_5_2 AS join_key_5_2, [RF_Tree_5_2].[Estimator_5_2] AS [Estimator_5_2] 
FROM [RF_Tree_5_0] LEFT OUTER JOIN [RF_Tree_5_1] ON [RF_Tree_5_0].join_key_5_0 = [RF_Tree_5_1].join_key_5_1 LEFT OUTER JOIN [RF_Tree_5_2] ON [RF_Tree_5_2].join_key_5_2 = [RF_Tree_5_1].join_key_5_1), 
[RF_Join_CTE] AS 
(SELECT [RF_Join_CTE_0].join_key_0_0 AS join_key_0_0, [RF_Join_CTE_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Join_CTE_0].join_key_0_1 AS join_key_0_1, [RF_Join_CTE_0].[Estimator_0_1] AS [Estimator_0_1], [RF_Join_CTE_0].join_key_0_2 AS join_key_0_2, [RF_Join_CTE_0].[Estimator_0_2] AS [Estimator_0_2], [RF_Join_CTE_1].join_key_1_0 AS join_key_1_0, [RF_Join_CTE_1].[Estimator_1_0] AS [Estimator_1_0], [RF_Join_CTE_1].join_key_1_1 AS join_key_1_1, [RF_Join_CTE_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Join_CTE_1].join_key_1_2 AS join_key_1_2, [RF_Join_CTE_1].[Estimator_1_2] AS [Estimator_1_2], [RF_Join_CTE_2].join_key_2_0 AS join_key_2_0, [RF_Join_CTE_2].[Estimator_2_0] AS [Estimator_2_0], [RF_Join_CTE_2].join_key_2_1 AS join_key_2_1, [RF_Join_CTE_2].[Estimator_2_1] AS [Estimator_2_1], [RF_Join_CTE_2].join_key_2_2 AS join_key_2_2, [RF_Join_CTE_2].[Estimator_2_2] AS [Estimator_2_2], [RF_Join_CTE_3].join_key_3_0 AS join_key_3_0, [RF_Join_CTE_3].[Estimator_3_0] AS [Estimator_3_0], [RF_Join_CTE_3].join_key_3_1 AS join_key_3_1, [RF_Join_CTE_3].[Estimator_3_1] AS [Estimator_3_1], [RF_Join_CTE_3].join_key_3_2 AS join_key_3_2, [RF_Join_CTE_3].[Estimator_3_2] AS [Estimator_3_2], [RF_Join_CTE_4].join_key_4_0 AS join_key_4_0, [RF_Join_CTE_4].[Estimator_4_0] AS [Estimator_4_0], [RF_Join_CTE_4].join_key_4_1 AS join_key_4_1, [RF_Join_CTE_4].[Estimator_4_1] AS [Estimator_4_1], [RF_Join_CTE_4].join_key_4_2 AS join_key_4_2, [RF_Join_CTE_4].[Estimator_4_2] AS [Estimator_4_2], [RF_Join_CTE_5].join_key_5_0 AS join_key_5_0, [RF_Join_CTE_5].[Estimator_5_0] AS [Estimator_5_0], [RF_Join_CTE_5].join_key_5_1 AS join_key_5_1, [RF_Join_CTE_5].[Estimator_5_1] AS [Estimator_5_1], [RF_Join_CTE_5].join_key_5_2 AS join_key_5_2, [RF_Join_CTE_5].[Estimator_5_2] AS [Estimator_5_2] 
FROM [RF_Join_CTE_0] LEFT OUTER JOIN [RF_Join_CTE_1] ON [RF_Join_CTE_0].join_key_0_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_2] ON [RF_Join_CTE_2].join_key_2_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_3] ON [RF_Join_CTE_3].join_key_3_0 = [RF_Join_CTE_2].join_key_2_0 LEFT OUTER JOIN [RF_Join_CTE_4] ON [RF_Join_CTE_4].join_key_4_0 = [RF_Join_CTE_3].join_key_3_0 LEFT OUTER JOIN [RF_Join_CTE_5] ON [RF_Join_CTE_5].join_key_5_0 = [RF_Join_CTE_4].join_key_4_0), 
[RF_AVG_Scores] AS 
(SELECT [RF_Join_CTE].join_key_0_0 AS [KEY], 0.333333333333 + 0.1 * [RF_Join_CTE].[Estimator_0_0] + 0.1 * [RF_Join_CTE].[Estimator_1_0] + 0.1 * [RF_Join_CTE].[Estimator_2_0] + 0.1 * [RF_Join_CTE].[Estimator_3_0] + 0.1 * [RF_Join_CTE].[Estimator_4_0] + 0.1 * [RF_Join_CTE].[Estimator_5_0] AS [Score_0], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [LogProba_0], 0.333333333333 + 0.1 * [RF_Join_CTE].[Estimator_0_1] + 0.1 * [RF_Join_CTE].[Estimator_1_1] + 0.1 * [RF_Join_CTE].[Estimator_2_1] + 0.1 * [RF_Join_CTE].[Estimator_3_1] + 0.1 * [RF_Join_CTE].[Estimator_4_1] + 0.1 * [RF_Join_CTE].[Estimator_5_1] AS [Score_1], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_1], 0.333333333333 + 0.1 * [RF_Join_CTE].[Estimator_0_2] + 0.1 * [RF_Join_CTE].[Estimator_1_2] + 0.1 * [RF_Join_CTE].[Estimator_2_2] + 0.1 * [RF_Join_CTE].[Estimator_3_2] + 0.1 * [RF_Join_CTE].[Estimator_4_2] + 0.1 * [RF_Join_CTE].[Estimator_5_2] AS [Score_2], CAST(NULL AS FLOAT) AS [Proba_2], CAST(NULL AS FLOAT) AS [LogProba_2] 
FROM [RF_Join_CTE]), 
orig_cte AS 
(SELECT [RF_AVG_Scores].[KEY] AS [KEY], [RF_AVG_Scores].[Score_0] AS [Score_0], [RF_AVG_Scores].[Score_1] AS [Score_1], [RF_AVG_Scores].[Score_2] AS [Score_2], [RF_AVG_Scores].[Proba_0] AS [Proba_0], [RF_AVG_Scores].[Proba_1] AS [Proba_1], [RF_AVG_Scores].[Proba_2] AS [Proba_2], [RF_AVG_Scores].[LogProba_0] AS [LogProba_0], [RF_AVG_Scores].[LogProba_1] AS [LogProba_1], [RF_AVG_Scores].[LogProba_2] AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RF_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte