-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", 0.09407638511796877 * "ADS"."Feature_0" + -0.10121504571171386 * "ADS"."Feature_1" + 0.011512944263808424 * "ADS"."Feature_2" + -0.01971393022308771 * "ADS"."Feature_3" + 0.01909947685864251 * "ADS"."Feature_4" + -0.18228600905188935 * "ADS"."Feature_5" + 0.21263978619236631 * "ADS"."Feature_6" + -0.11357431584913905 * "ADS"."Feature_7" + -0.2810914995484929 * "ADS"."Feature_8" + -0.14473795833162129 * "ADS"."Feature_9" + 0.016965546988974733 * "ADS"."Feature_10" + -0.036162986485006765 * "ADS"."Feature_11" + 0.004587093558727036 * "ADS"."Feature_12" + 0.08888837766232145 * "ADS"."Feature_13" + -0.3431946831954301 * "ADS"."Feature_14" + -0.28351595722158457 * "ADS"."Feature_15" + -0.017092245054465327 * "ADS"."Feature_16" + -0.09066824986113484 * "ADS"."Feature_17" + 0.04908929264281583 * "ADS"."Feature_18" + 0.13518355208712474 * "ADS"."Feature_19" + -1.48635456376 AS "Score_0", 0.00022305058079377484 * "ADS"."Feature_0" + -4.0735819138541335e-05 * "ADS"."Feature_1" + 0.00028754864711233105 * "ADS"."Feature_2" + 5.860110593258644e-05 * "ADS"."Feature_3" + 0.0004541828030477523 * "ADS"."Feature_4" + -0.0012311358097864785 * "ADS"."Feature_5" + -0.0004289715089882629 * "ADS"."Feature_6" + 0.0007659448084509883 * "ADS"."Feature_7" + -0.0008938312562392348 * "ADS"."Feature_8" + 0.0003786981571889748 * "ADS"."Feature_9" + 0.00036276807453806015 * "ADS"."Feature_10" + 0.0007236152388304198 * "ADS"."Feature_11" + 3.5646998196698805e-05 * "ADS"."Feature_12" + -0.00045219256696063623 * "ADS"."Feature_13" + -0.000517589489598035 * "ADS"."Feature_14" + 0.00024696303950646245 * "ADS"."Feature_15" + 0.0005463383689412212 * "ADS"."Feature_16" + 0.0004976932590128842 * "ADS"."Feature_17" + 0.0002516533714614325 * "ADS"."Feature_18" + -0.0003037217132371079 * "ADS"."Feature_19" + -1.09920142986 AS "Score_1", 0.04029799026034271 * "ADS"."Feature_0" + 0.02718115140416761 * "ADS"."Feature_1" + -0.03822523951242688 * "ADS"."Feature_2" + 0.039222733805090546 * "ADS"."Feature_3" + -0.05928102883374969 * "ADS"."Feature_4" + 0.339621288665125 * "ADS"."Feature_5" + 0.13323978448985924 * "ADS"."Feature_6" + -0.07844151628244812 * "ADS"."Feature_7" + 0.017703735548190665 * "ADS"."Feature_8" + -0.0739737811384292 * "ADS"."Feature_9" + -0.02079636494151608 * "ADS"."Feature_10" + -0.06400915542186611 * "ADS"."Feature_11" + -0.0007231485326777863 * "ADS"."Feature_12" + -0.25516796906626804 * "ADS"."Feature_13" + 0.27625984368545053 * "ADS"."Feature_14" + 0.223645594941243 * "ADS"."Feature_15" + 0.03423078726924558 * "ADS"."Feature_16" + 0.053935219160519604 * "ADS"."Feature_17" + -0.014862688669505034 * "ADS"."Feature_18" + -0.029506045466915227 * "ADS"."Feature_19" + -1.32074132431 AS "Score_2", -0.6173559735198666 * "ADS"."Feature_0" + 0.42655197982253507 * "ADS"."Feature_1" + -0.250457156427438 * "ADS"."Feature_2" + -0.14293704931169818 * "ADS"."Feature_3" + -0.4038892344019295 * "ADS"."Feature_4" + 0.2795617901119664 * "ADS"."Feature_5" + -0.6210895626140794 * "ADS"."Feature_6" + -0.11745147637171172 * "ADS"."Feature_7" + 0.9049534875887542 * "ADS"."Feature_8" + 0.007046255973529046 * "ADS"."Feature_9" + -0.3093882015451188 * "ADS"."Feature_10" + -0.1786097399712247 * "ADS"."Feature_11" + 0.014014551835415912 * "ADS"."Feature_12" + 0.7206111622189425 * "ADS"."Feature_13" + 0.2658697732392337 * "ADS"."Feature_14" + -0.055498614688622605 * "ADS"."Feature_15" + -0.35259105862496204 * "ADS"."Feature_16" + -0.43193172066951385 * "ADS"."Feature_17" + -0.10953197872452025 * "ADS"."Feature_18" + 0.17035237508682444 * "ADS"."Feature_19" + -1.2551049697 AS "Score_3" 
FROM "INPUT_DATA" AS "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte