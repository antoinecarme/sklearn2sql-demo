-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.104150755394 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0738737114545 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.431726060725 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.0915499433853 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0688970026956 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.300799563208 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.17659164016 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0539950893558 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.00503296817526 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.157873019294 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.0576705349415 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.284866140957 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.0799943162338 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 0.166146711122 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0147753318526 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.0300111039789 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.234098442038 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN -0.113088939985 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.0748610925561 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.0536157578086 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.104150755394 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.0738737114545 AS impute_3, "ADS_imp_1_OUT".impute_4 - 0.431726060725 AS impute_4, "ADS_imp_1_OUT".impute_5 - -0.0915499433853 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.0688970026956 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.300799563208 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.17659164016 AS impute_8, "ADS_imp_1_OUT".impute_9 - -0.0539950893558 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.00503296817526 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.157873019294 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.0576705349415 AS impute_12, "ADS_imp_1_OUT".impute_13 - 0.284866140957 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.0799943162338 AS impute_14, "ADS_imp_1_OUT".impute_15 - 0.166146711122 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0147753318526 AS impute_16, "ADS_imp_1_OUT".impute_17 - -0.0300111039789 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.234098442038 AS impute_18, "ADS_imp_1_OUT".impute_19 - -0.113088939985 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.0748610925561 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.0536157578086 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0437014264861 + "CenteredDataForPCA".impute_3 * 0.132189838302 + "CenteredDataForPCA".impute_4 * -0.587899801062 + "CenteredDataForPCA".impute_5 * 0.0473986607076 + "CenteredDataForPCA".impute_6 * 0.0633971838915 + "CenteredDataForPCA".impute_7 * -0.588240312171 + "CenteredDataForPCA".impute_8 * -0.00376133905786 + "CenteredDataForPCA".impute_9 * 0.161141365492 + "CenteredDataForPCA".impute_10 * 0.0271293516931 + "CenteredDataForPCA".impute_11 * -0.00526088663941 + "CenteredDataForPCA".impute_12 * -0.0135235553146 + "CenteredDataForPCA".impute_13 * -0.405812807328 + "CenteredDataForPCA".impute_14 * 0.00194652467025 + "CenteredDataForPCA".impute_15 * -0.286832401041 + "CenteredDataForPCA".impute_16 * -0.00376257191723 + "CenteredDataForPCA".impute_17 * 0.0646277838173 + "CenteredDataForPCA".impute_18 * -0.0650520567134 + "CenteredDataForPCA".impute_19 * 0.0159464765577 + "CenteredDataForPCA".impute_20 * -0.0113082856859 + "CenteredDataForPCA".impute_21 * -0.00214657106699 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.0124640005219 + "CenteredDataForPCA".impute_3 * -0.0284033332762 + "CenteredDataForPCA".impute_4 * -0.301458027798 + "CenteredDataForPCA".impute_5 * 0.0823123292876 + "CenteredDataForPCA".impute_6 * -0.413327236175 + "CenteredDataForPCA".impute_7 * 0.27184940671 + "CenteredDataForPCA".impute_8 * -0.0493601898119 + "CenteredDataForPCA".impute_9 * -0.536819034817 + "CenteredDataForPCA".impute_10 * -0.0237551809698 + "CenteredDataForPCA".impute_11 * 0.0172504512677 + "CenteredDataForPCA".impute_12 * -0.10928777143 + "CenteredDataForPCA".impute_13 * -0.446590830098 + "CenteredDataForPCA".impute_14 * 0.0465817201687 + "CenteredDataForPCA".impute_15 * 0.334582111418 + "CenteredDataForPCA".impute_16 * 0.00634368921713 + "CenteredDataForPCA".impute_17 * 0.0924714374511 + "CenteredDataForPCA".impute_18 * -0.0120848672814 + "CenteredDataForPCA".impute_19 * 0.0436392096959 + "CenteredDataForPCA".impute_20 * -0.111540799955 + "CenteredDataForPCA".impute_21 * 0.128786356927 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.0125830327429 + "CenteredDataForPCA".impute_3 * 0.120475467535 + "CenteredDataForPCA".impute_4 * 0.315951316145 + "CenteredDataForPCA".impute_5 * 0.00404852270536 + "CenteredDataForPCA".impute_6 * 0.489966688771 + "CenteredDataForPCA".impute_7 * -0.272519115929 + "CenteredDataForPCA".impute_8 * 0.0480213378891 + "CenteredDataForPCA".impute_9 * -0.186707994241 + "CenteredDataForPCA".impute_10 * 0.0937531194035 + "CenteredDataForPCA".impute_11 * 0.00203759269415 + "CenteredDataForPCA".impute_12 * 0.223339657854 + "CenteredDataForPCA".impute_13 * -0.356432668251 + "CenteredDataForPCA".impute_14 * -0.192256455649 + "CenteredDataForPCA".impute_15 * 0.475303755252 + "CenteredDataForPCA".impute_16 * -0.0838593530477 + "CenteredDataForPCA".impute_17 * 0.110348463645 + "CenteredDataForPCA".impute_18 * 0.0751682803553 + "CenteredDataForPCA".impute_19 * -0.15761858385 + "CenteredDataForPCA".impute_20 * -0.111012759145 + "CenteredDataForPCA".impute_21 * -0.152852892139 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.0786303482458 + "CenteredDataForPCA".impute_3 * -0.139765162437 + "CenteredDataForPCA".impute_4 * 0.131082403422 + "CenteredDataForPCA".impute_5 * -0.206740950639 + "CenteredDataForPCA".impute_6 * -0.278714583857 + "CenteredDataForPCA".impute_7 * -0.037585074471 + "CenteredDataForPCA".impute_8 * -0.0479138764332 + "CenteredDataForPCA".impute_9 * 0.657816415541 + "CenteredDataForPCA".impute_10 * -0.196159965265 + "CenteredDataForPCA".impute_11 * 0.0630904315157 + "CenteredDataForPCA".impute_12 * -0.0268964368563 + "CenteredDataForPCA".impute_13 * -0.261458418954 + "CenteredDataForPCA".impute_14 * 0.196029248718 + "CenteredDataForPCA".impute_15 * 0.433992127025 + "CenteredDataForPCA".impute_16 * -0.028105199403 + "CenteredDataForPCA".impute_17 * 0.19673234031 + "CenteredDataForPCA".impute_18 * -0.0114726368151 + "CenteredDataForPCA".impute_19 * 0.123344673533 + "CenteredDataForPCA".impute_20 * 0.0807862518234 + "CenteredDataForPCA".impute_21 * 0.0236804282204 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.309978883347 + "CenteredDataForPCA".impute_3 * 0.174102494641 + "CenteredDataForPCA".impute_4 * 0.0429527873597 + "CenteredDataForPCA".impute_5 * 0.603291859816 + "CenteredDataForPCA".impute_6 * -0.0821270094949 + "CenteredDataForPCA".impute_7 * 0.0755703147572 + "CenteredDataForPCA".impute_8 * -0.258455798961 + "CenteredDataForPCA".impute_9 * 0.100815891212 + "CenteredDataForPCA".impute_10 * 0.0502274775908 + "CenteredDataForPCA".impute_11 * -0.0756832102502 + "CenteredDataForPCA".impute_12 * 0.0339632518568 + "CenteredDataForPCA".impute_13 * 0.0705338273157 + "CenteredDataForPCA".impute_14 * -0.0687061124619 + "CenteredDataForPCA".impute_15 * 0.00431289420677 + "CenteredDataForPCA".impute_16 * -0.0250293197336 + "CenteredDataForPCA".impute_17 * 0.408627943937 + "CenteredDataForPCA".impute_18 * -0.0617939971386 + "CenteredDataForPCA".impute_19 * -0.347918431547 + "CenteredDataForPCA".impute_20 * 0.325436547673 + "CenteredDataForPCA".impute_21 * 0.0296664115462 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.15104723044 + "CenteredDataForPCA".impute_3 * 0.123255453618 + "CenteredDataForPCA".impute_4 * -0.0329490994009 + "CenteredDataForPCA".impute_5 * -0.116980709673 + "CenteredDataForPCA".impute_6 * 0.0848575299874 + "CenteredDataForPCA".impute_7 * 0.0137219381665 + "CenteredDataForPCA".impute_8 * 0.124435313547 + "CenteredDataForPCA".impute_9 * -0.189622359013 + "CenteredDataForPCA".impute_10 * -0.153979684274 + "CenteredDataForPCA".impute_11 * 0.283305026724 + "CenteredDataForPCA".impute_12 * 0.053374412089 + "CenteredDataForPCA".impute_13 * 0.0884283509959 + "CenteredDataForPCA".impute_14 * 0.115745398016 + "CenteredDataForPCA".impute_15 * -0.134154469489 + "CenteredDataForPCA".impute_16 * -0.314449283838 + "CenteredDataForPCA".impute_17 * 0.538735476235 + "CenteredDataForPCA".impute_18 * 0.373988819816 + "CenteredDataForPCA".impute_19 * 0.341417381916 + "CenteredDataForPCA".impute_20 * 0.306384988187 + "CenteredDataForPCA".impute_21 * -0.0542127816004 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.156727513396 + "CenteredDataForPCA".impute_3 * -0.153241283931 + "CenteredDataForPCA".impute_4 * 0.0836046459448 + "CenteredDataForPCA".impute_5 * 0.0549506655418 + "CenteredDataForPCA".impute_6 * 0.215329840345 + "CenteredDataForPCA".impute_7 * -0.0976803818253 + "CenteredDataForPCA".impute_8 * 0.0336130771232 + "CenteredDataForPCA".impute_9 * -0.0781114430125 + "CenteredDataForPCA".impute_10 * -0.406777132852 + "CenteredDataForPCA".impute_11 * -0.480927852325 + "CenteredDataForPCA".impute_12 * -0.0157192883753 + "CenteredDataForPCA".impute_13 * 0.025819649954 + "CenteredDataForPCA".impute_14 * -0.0333881436735 + "CenteredDataForPCA".impute_15 * -0.0206081724971 + "CenteredDataForPCA".impute_16 * 0.00611140470503 + "CenteredDataForPCA".impute_17 * 0.214625218482 + "CenteredDataForPCA".impute_18 * -0.201754375282 + "CenteredDataForPCA".impute_19 * 0.13559605089 + "CenteredDataForPCA".impute_20 * -0.0315851489909 + "CenteredDataForPCA".impute_21 * 0.611066384991 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.407888266497 + "CenteredDataForPCA".impute_3 * 0.409662797514 + "CenteredDataForPCA".impute_4 * 0.0854030038403 + "CenteredDataForPCA".impute_5 * 0.249778143341 + "CenteredDataForPCA".impute_6 * -0.0617631706746 + "CenteredDataForPCA".impute_7 * 0.0311231216917 + "CenteredDataForPCA".impute_8 * -0.269706324785 + "CenteredDataForPCA".impute_9 * 0.20612128223 + "CenteredDataForPCA".impute_10 * 0.204618064643 + "CenteredDataForPCA".impute_11 * 0.00958098658548 + "CenteredDataForPCA".impute_12 * -0.29418899524 + "CenteredDataForPCA".impute_13 * 0.0466338606184 + "CenteredDataForPCA".impute_14 * -0.199987168629 + "CenteredDataForPCA".impute_15 * 0.0515829649438 + "CenteredDataForPCA".impute_16 * -0.147335828445 + "CenteredDataForPCA".impute_17 * 0.0690553617666 + "CenteredDataForPCA".impute_18 * 0.00161639021132 + "CenteredDataForPCA".impute_19 * 0.326545366737 + "CenteredDataForPCA".impute_20 * -0.409850854821 + "CenteredDataForPCA".impute_21 * 0.0410284855491 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.0772470952453 + "CenteredDataForPCA".impute_3 * -0.406398619556 + "CenteredDataForPCA".impute_4 * 0.0532274571241 + "CenteredDataForPCA".impute_5 * 0.168990978203 + "CenteredDataForPCA".impute_6 * 0.142913297004 + "CenteredDataForPCA".impute_7 * -0.0811228466857 + "CenteredDataForPCA".impute_8 * -0.177377056536 + "CenteredDataForPCA".impute_9 * -0.0802357084257 + "CenteredDataForPCA".impute_10 * 0.452120851511 + "CenteredDataForPCA".impute_11 * -0.144148835203 + "CenteredDataForPCA".impute_12 * -0.103907563139 + "CenteredDataForPCA".impute_13 * -0.0706948757918 + "CenteredDataForPCA".impute_14 * 0.105267852837 + "CenteredDataForPCA".impute_15 * 0.069081960958 + "CenteredDataForPCA".impute_16 * 0.216382217839 + "CenteredDataForPCA".impute_17 * 0.0041557912385 + "CenteredDataForPCA".impute_18 * -0.13847760613 + "CenteredDataForPCA".impute_19 * 0.492788675681 + "CenteredDataForPCA".impute_20 * 0.379499887818 + "CenteredDataForPCA".impute_21 * -0.151197411627 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.137170150414 + "CenteredDataForPCA".impute_3 * -0.173797318916 + "CenteredDataForPCA".impute_4 * 0.00376658511029 + "CenteredDataForPCA".impute_5 * -0.081492700466 + "CenteredDataForPCA".impute_6 * 0.00651426529184 + "CenteredDataForPCA".impute_7 * 0.0331145100725 + "CenteredDataForPCA".impute_8 * 0.121489935399 + "CenteredDataForPCA".impute_9 * -0.0467150580733 + "CenteredDataForPCA".impute_10 * -0.0877569763693 + "CenteredDataForPCA".impute_11 * 0.335465807372 + "CenteredDataForPCA".impute_12 * -0.0838467732922 + "CenteredDataForPCA".impute_13 * 0.0555789085583 + "CenteredDataForPCA".impute_14 * -0.395792313257 + "CenteredDataForPCA".impute_15 * -0.0458570463621 + "CenteredDataForPCA".impute_16 * -0.217008110087 + "CenteredDataForPCA".impute_17 * 0.209789350243 + "CenteredDataForPCA".impute_18 * -0.709782775799 + "CenteredDataForPCA".impute_19 * 0.101336452424 + "CenteredDataForPCA".impute_20 * -0.0683644845422 + "CenteredDataForPCA".impute_21 * -0.165202034495 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.246790969329 + "CenteredDataForPCA".impute_3 * -0.330156134766 + "CenteredDataForPCA".impute_4 * -0.0479811627135 + "CenteredDataForPCA".impute_5 * 0.064669786152 + "CenteredDataForPCA".impute_6 * -0.0507163627131 + "CenteredDataForPCA".impute_7 * 0.020464355931 + "CenteredDataForPCA".impute_8 * 0.232062011258 + "CenteredDataForPCA".impute_9 * 0.0314403846575 + "CenteredDataForPCA".impute_10 * 0.0814634923125 + "CenteredDataForPCA".impute_11 * -0.316711708277 + "CenteredDataForPCA".impute_12 * -0.110843568487 + "CenteredDataForPCA".impute_13 * 0.0571771925568 + "CenteredDataForPCA".impute_14 * 0.23042423605 + "CenteredDataForPCA".impute_15 * -0.0856104394428 + "CenteredDataForPCA".impute_16 * -0.00629819971002 + "CenteredDataForPCA".impute_17 * 0.429556893972 + "CenteredDataForPCA".impute_18 * 0.0227896696573 + "CenteredDataForPCA".impute_19 * -0.276972845516 + "CenteredDataForPCA".impute_20 * -0.375024817604 + "CenteredDataForPCA".impute_21 * -0.42475429791 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.00998348139397 + "CenteredDataForPCA".impute_3 * 0.108141513327 + "CenteredDataForPCA".impute_4 * 0.0797425212217 + "CenteredDataForPCA".impute_5 * -0.0324636375052 + "CenteredDataForPCA".impute_6 * 0.120352964084 + "CenteredDataForPCA".impute_7 * -0.0335717454083 + "CenteredDataForPCA".impute_8 * 0.130838186938 + "CenteredDataForPCA".impute_9 * -0.0199862370172 + "CenteredDataForPCA".impute_10 * 0.167992734258 + "CenteredDataForPCA".impute_11 * 0.449209326729 + "CenteredDataForPCA".impute_12 * -0.0812955752882 + "CenteredDataForPCA".impute_13 * 0.0528750572771 + "CenteredDataForPCA".impute_14 * 0.233261932181 + "CenteredDataForPCA".impute_15 * -0.0150626535844 + "CenteredDataForPCA".impute_16 * 0.653306796894 + "CenteredDataForPCA".impute_17 * 0.300047645853 + "CenteredDataForPCA".impute_18 * -0.0931447187142 + "CenteredDataForPCA".impute_19 * -0.0645617325447 + "CenteredDataForPCA".impute_20 * -0.184944873687 + "CenteredDataForPCA".impute_21 * 0.299537228417 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.208543436615 + "CenteredDataForPCA".impute_3 * 0.0748522974122 + "CenteredDataForPCA".impute_4 * 0.0666447513952 + "CenteredDataForPCA".impute_5 * -0.228168303731 + "CenteredDataForPCA".impute_6 * 0.208938115627 + "CenteredDataForPCA".impute_7 * -0.0545643406765 + "CenteredDataForPCA".impute_8 * -0.565335183428 + "CenteredDataForPCA".impute_9 * -0.174248371882 + "CenteredDataForPCA".impute_10 * -0.0498168716713 + "CenteredDataForPCA".impute_11 * 0.0195915315427 + "CenteredDataForPCA".impute_12 * -0.169196146116 + "CenteredDataForPCA".impute_13 * 0.0491580341684 + "CenteredDataForPCA".impute_14 * 0.564450387201 + "CenteredDataForPCA".impute_15 * -0.047410242338 + "CenteredDataForPCA".impute_16 * -0.259090805493 + "CenteredDataForPCA".impute_17 * 0.00743829797447 + "CenteredDataForPCA".impute_18 * -0.212356835055 + "CenteredDataForPCA".impute_19 * -0.0690007938154 + "CenteredDataForPCA".impute_20 * -0.154078503805 + "CenteredDataForPCA".impute_21 * -0.047584041559 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.245916256591 + "CenteredDataForPCA".impute_3 * 0.46468373175 + "CenteredDataForPCA".impute_4 * 0.0202247402723 + "CenteredDataForPCA".impute_5 * -0.126064028374 + "CenteredDataForPCA".impute_6 * -0.0159896057278 + "CenteredDataForPCA".impute_7 * 0.0639781056363 + "CenteredDataForPCA".impute_8 * 0.0585162391399 + "CenteredDataForPCA".impute_9 * -0.075058811506 + "CenteredDataForPCA".impute_10 * -0.305592496929 + "CenteredDataForPCA".impute_11 * -0.361147579202 + "CenteredDataForPCA".impute_12 * -0.0387473238961 + "CenteredDataForPCA".impute_13 * 0.022561470562 + "CenteredDataForPCA".impute_14 * -0.0295933079722 + "CenteredDataForPCA".impute_15 * 0.0151721559134 + "CenteredDataForPCA".impute_16 * 0.415285183489 + "CenteredDataForPCA".impute_17 * 0.0817156852433 + "CenteredDataForPCA".impute_18 * -0.106632901013 + "CenteredDataForPCA".impute_19 * 0.298078864759 + "CenteredDataForPCA".impute_20 * 0.0220989102096 + "CenteredDataForPCA".impute_21 * -0.432557902064 AS anoova_15, "CenteredDataForPCA".impute_2 * 0.396428526922 + "CenteredDataForPCA".impute_3 * 0.221675452857 + "CenteredDataForPCA".impute_4 * 0.0682422522179 + "CenteredDataForPCA".impute_5 * -0.00677869578194 + "CenteredDataForPCA".impute_6 * 0.011144268158 + "CenteredDataForPCA".impute_7 * 0.0190002585449 + "CenteredDataForPCA".impute_8 * 0.557001150852 + "CenteredDataForPCA".impute_9 * 0.0332160477559 + "CenteredDataForPCA".impute_10 * 0.406492068389 + "CenteredDataForPCA".impute_11 * -0.201374680659 + "CenteredDataForPCA".impute_12 * -0.252144983281 + "CenteredDataForPCA".impute_13 * 0.00962491759999 + "CenteredDataForPCA".impute_14 * 0.208911537083 + "CenteredDataForPCA".impute_15 * 0.0548334672013 + "CenteredDataForPCA".impute_16 * -0.319263558107 + "CenteredDataForPCA".impute_17 * -0.0264904507233 + "CenteredDataForPCA".impute_18 * -0.0596670769342 + "CenteredDataForPCA".impute_19 * 0.106472887864 + "CenteredDataForPCA".impute_20 * -0.0119044515519 + "CenteredDataForPCA".impute_21 * 0.208291426523 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.448359554861 + "CenteredDataForPCA".impute_3 * 0.281240837887 + "CenteredDataForPCA".impute_4 * -0.0261106325338 + "CenteredDataForPCA".impute_5 * -0.439092588578 + "CenteredDataForPCA".impute_6 * -0.0764313219719 + "CenteredDataForPCA".impute_7 * 0.0464482653895 + "CenteredDataForPCA".impute_8 * -0.0206731327995 + "CenteredDataForPCA".impute_9 * -0.0161869210006 + "CenteredDataForPCA".impute_10 * 0.224887736193 + "CenteredDataForPCA".impute_11 * -0.160708857704 + "CenteredDataForPCA".impute_12 * -0.163509039105 + "CenteredDataForPCA".impute_13 * -0.0375733271791 + "CenteredDataForPCA".impute_14 * -0.0602137710434 + "CenteredDataForPCA".impute_15 * 0.0423103519607 + "CenteredDataForPCA".impute_16 * 0.0184158823079 + "CenteredDataForPCA".impute_17 * 0.0808754530124 + "CenteredDataForPCA".impute_18 * -0.250191926864 + "CenteredDataForPCA".impute_19 * -0.364516720656 + "CenteredDataForPCA".impute_20 * 0.451083508878 + "CenteredDataForPCA".impute_21 * 0.0437634527088 AS anoova_17, "CenteredDataForPCA".impute_2 * 0.321231406102 + "CenteredDataForPCA".impute_3 * -0.212091511507 + "CenteredDataForPCA".impute_4 * 1.72067140307e-05 + "CenteredDataForPCA".impute_5 * -0.303746441199 + "CenteredDataForPCA".impute_6 * 0.069197331149 + "CenteredDataForPCA".impute_7 * -0.0476719513217 + "CenteredDataForPCA".impute_8 * -0.199464238798 + "CenteredDataForPCA".impute_9 * -0.0188045932711 + "CenteredDataForPCA".impute_10 * 0.0562639719156 + "CenteredDataForPCA".impute_11 * -0.0684149853952 + "CenteredDataForPCA".impute_12 * -0.553832662315 + "CenteredDataForPCA".impute_13 * 0.014683198536 + "CenteredDataForPCA".impute_14 * -0.443851873093 + "CenteredDataForPCA".impute_15 * -0.0416612319214 + "CenteredDataForPCA".impute_16 * 0.0904096320708 + "CenteredDataForPCA".impute_17 * 0.161700923839 + "CenteredDataForPCA".impute_18 * 0.38815145544 + "CenteredDataForPCA".impute_19 * -0.0896746858813 + "CenteredDataForPCA".impute_20 * -0.0407342801876 + "CenteredDataForPCA".impute_21 * 0.0644136381594 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.175015353863 + "CenteredDataForPCA".impute_3 * -0.0066563013628 + "CenteredDataForPCA".impute_4 * 0.0795089482218 + "CenteredDataForPCA".impute_5 * 0.334166782445 + "CenteredDataForPCA".impute_6 * 0.153327833064 + "CenteredDataForPCA".impute_7 * -0.095462323839 + "CenteredDataForPCA".impute_8 * 0.214725992773 + "CenteredDataForPCA".impute_9 * -0.0348261630394 + "CenteredDataForPCA".impute_10 * -0.395026257143 + "CenteredDataForPCA".impute_11 * 0.202569688019 + "CenteredDataForPCA".impute_12 * -0.618529503344 + "CenteredDataForPCA".impute_13 * -0.0757368192883 + "CenteredDataForPCA".impute_14 * 0.155613719082 + "CenteredDataForPCA".impute_15 * 0.0922723631214 + "CenteredDataForPCA".impute_16 * 0.0088303792236 + "CenteredDataForPCA".impute_17 * -0.263908010841 + "CenteredDataForPCA".impute_18 * -0.000245931191139 + "CenteredDataForPCA".impute_19 * -0.123685325282 + "CenteredDataForPCA".impute_20 * 0.216278766042 + "CenteredDataForPCA".impute_21 * -0.14652209103 AS anoova_19, "CenteredDataForPCA".impute_2 * 1.24433752474e-16 + "CenteredDataForPCA".impute_3 * 1.14220236858e-16 + "CenteredDataForPCA".impute_4 * 0.0268165517541 + "CenteredDataForPCA".impute_5 * -2.45454063424e-16 + "CenteredDataForPCA".impute_6 * 0.380767930739 + "CenteredDataForPCA".impute_7 * 0.621606579847 + "CenteredDataForPCA".impute_8 * 5.11308560079e-17 + "CenteredDataForPCA".impute_9 * 0.221543835347 + "CenteredDataForPCA".impute_10 * -1.16727584078e-17 + "CenteredDataForPCA".impute_11 * -3.15172331706e-17 + "CenteredDataForPCA".impute_12 * -3.00515232089e-16 + "CenteredDataForPCA".impute_13 * -0.533203025796 + "CenteredDataForPCA".impute_14 * -6.89619185528e-17 + "CenteredDataForPCA".impute_15 * -0.366762563063 + "CenteredDataForPCA".impute_16 * 3.61505765295e-17 + "CenteredDataForPCA".impute_17 * 1.15117805959e-16 + "CenteredDataForPCA".impute_18 * 3.62142270362e-18 + "CenteredDataForPCA".impute_19 * 6.37055837127e-17 + "CenteredDataForPCA".impute_20 * 1.04639088244e-17 + "CenteredDataForPCA".impute_21 * -3.79245756472e-17 AS anoova_20, "CenteredDataForPCA".impute_2 * -2.17689238069e-16 + "CenteredDataForPCA".impute_3 * 2.76940851441e-16 + "CenteredDataForPCA".impute_4 * -0.632879539095 + "CenteredDataForPCA".impute_5 * 2.19947653987e-17 + "CenteredDataForPCA".impute_6 * 0.427296914446 + "CenteredDataForPCA".impute_7 * 0.267189059122 + "CenteredDataForPCA".impute_8 * 1.73517291397e-16 + "CenteredDataForPCA".impute_9 * 0.159846201575 + "CenteredDataForPCA".impute_10 * -1.34393113148e-16 + "CenteredDataForPCA".impute_11 * -4.54563465908e-17 + "CenteredDataForPCA".impute_12 * 7.72618165437e-17 + "CenteredDataForPCA".impute_13 * 0.340577509639 + "CenteredDataForPCA".impute_14 * 5.54291555094e-17 + "CenteredDataForPCA".impute_15 * 0.451604909579 + "CenteredDataForPCA".impute_16 * -7.12556399495e-18 + "CenteredDataForPCA".impute_17 * -2.00355301556e-16 + "CenteredDataForPCA".impute_18 * -1.38373446041e-16 + "CenteredDataForPCA".impute_19 * -2.59430670476e-16 + "CenteredDataForPCA".impute_20 * 1.16587507644e-16 + "CenteredDataForPCA".impute_21 * -1.82087889829e-17 AS anoova_21 
FROM "CenteredDataForPCA"), 
linear_model_cte AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", -0.001259118270482187 * "ADS_ano_2_OUT".anoova_2 + -0.0030898393434918682 * "ADS_ano_2_OUT".anoova_3 + 0.0008901429408920152 * "ADS_ano_2_OUT".anoova_4 + -0.001420177130061602 * "ADS_ano_2_OUT".anoova_5 + 0.00039265653049083536 * "ADS_ano_2_OUT".anoova_6 + -0.0007736934234665588 * "ADS_ano_2_OUT".anoova_7 + 0.00026130447172761126 * "ADS_ano_2_OUT".anoova_8 + -4.3842941222398765e-05 * "ADS_ano_2_OUT".anoova_9 + -6.786946470198891e-05 * "ADS_ano_2_OUT".anoova_10 + 0.00010900276784432691 * "ADS_ano_2_OUT".anoova_11 + 9.135173753342466e-05 * "ADS_ano_2_OUT".anoova_12 + 0.0006078611544425644 * "ADS_ano_2_OUT".anoova_13 + 0.0006910941910189727 * "ADS_ano_2_OUT".anoova_14 + 0.00022004879469420948 * "ADS_ano_2_OUT".anoova_15 + 0.0002769132324074289 * "ADS_ano_2_OUT".anoova_16 + 0.0003431784852417854 * "ADS_ano_2_OUT".anoova_17 + -0.0003796907623573139 * "ADS_ano_2_OUT".anoova_18 + 0.0005045416280056568 * "ADS_ano_2_OUT".anoova_19 + 2.812442847120336e-21 * "ADS_ano_2_OUT".anoova_20 + 1.0536323620162502e-19 * "ADS_ano_2_OUT".anoova_21 + -1.04628071483 AS "Score_0", 0.12954117944267252 * "ADS_ano_2_OUT".anoova_2 + 0.3447081031465895 * "ADS_ano_2_OUT".anoova_3 + 0.495268401229799 * "ADS_ano_2_OUT".anoova_4 + 0.11820719891239467 * "ADS_ano_2_OUT".anoova_5 + -0.001836802487654475 * "ADS_ano_2_OUT".anoova_6 + 0.06333740019312077 * "ADS_ano_2_OUT".anoova_7 + -0.11795750616418593 * "ADS_ano_2_OUT".anoova_8 + -0.05815806202080771 * "ADS_ano_2_OUT".anoova_9 + 0.08613243954940583 * "ADS_ano_2_OUT".anoova_10 + -0.1522968588442402 * "ADS_ano_2_OUT".anoova_11 + -0.05675789484994938 * "ADS_ano_2_OUT".anoova_12 + -0.006551758205835348 * "ADS_ano_2_OUT".anoova_13 + -0.05340910115648473 * "ADS_ano_2_OUT".anoova_14 + 0.0240204987300193 * "ADS_ano_2_OUT".anoova_15 + 0.009779956352363279 * "ADS_ano_2_OUT".anoova_16 + -0.09912778219253268 * "ADS_ano_2_OUT".anoova_17 + -0.010397379319585166 * "ADS_ano_2_OUT".anoova_18 + -0.06736158286438676 * "ADS_ano_2_OUT".anoova_19 + -2.6361770718613082e-17 * "ADS_ano_2_OUT".anoova_20 + -2.8773885223083066e-17 * "ADS_ano_2_OUT".anoova_21 + -1.39867068289 AS "Score_1", 0.09635374954977426 * "ADS_ano_2_OUT".anoova_2 + 0.2851950367958153 * "ADS_ano_2_OUT".anoova_3 + -0.4164095169108425 * "ADS_ano_2_OUT".anoova_4 + 0.2412481998228137 * "ADS_ano_2_OUT".anoova_5 + -0.16513177816173547 * "ADS_ano_2_OUT".anoova_6 + -0.1050495772600147 * "ADS_ano_2_OUT".anoova_7 + -0.0929197157696786 * "ADS_ano_2_OUT".anoova_8 + 0.1356726525924925 * "ADS_ano_2_OUT".anoova_9 + -0.0613963007268709 * "ADS_ano_2_OUT".anoova_10 + 0.08081087140128532 * "ADS_ano_2_OUT".anoova_11 + 0.05327628268750417 * "ADS_ano_2_OUT".anoova_12 + -0.012255807919282203 * "ADS_ano_2_OUT".anoova_13 + -0.049223614229270636 * "ADS_ano_2_OUT".anoova_14 + 0.014229889612036391 * "ADS_ano_2_OUT".anoova_15 + -0.0009879588230168167 * "ADS_ano_2_OUT".anoova_16 + 0.039975422614317316 * "ADS_ano_2_OUT".anoova_17 + 0.07588168327358141 * "ADS_ano_2_OUT".anoova_18 + -0.023998716438531943 * "ADS_ano_2_OUT".anoova_19 + 9.72449307335926e-17 * "ADS_ano_2_OUT".anoova_20 + 2.036974718932909e-17 * "ADS_ano_2_OUT".anoova_21 + -1.42164497896 AS "Score_2", -0.16048927111765884 * "ADS_ano_2_OUT".anoova_2 + -0.3219846965931351 * "ADS_ano_2_OUT".anoova_3 + -0.2984695567159183 * "ADS_ano_2_OUT".anoova_4 + -0.15425752446593016 * "ADS_ano_2_OUT".anoova_5 + 0.0842746682798511 * "ADS_ano_2_OUT".anoova_6 + 0.40810102935592407 * "ADS_ano_2_OUT".anoova_7 + 0.32036940622453297 * "ADS_ano_2_OUT".anoova_8 + -0.15990328785122215 * "ADS_ano_2_OUT".anoova_9 + -0.05403482898045419 * "ADS_ano_2_OUT".anoova_10 + 0.12038709829449618 * "ADS_ano_2_OUT".anoova_11 + -0.10290531981323003 * "ADS_ano_2_OUT".anoova_12 + -0.43730667141224705 * "ADS_ano_2_OUT".anoova_13 + -0.20243774046607182 * "ADS_ano_2_OUT".anoova_14 + -0.2479064874132491 * "ADS_ano_2_OUT".anoova_15 + -0.33287609329913237 * "ADS_ano_2_OUT".anoova_16 + -0.12681865106236836 * "ADS_ano_2_OUT".anoova_17 + 0.20753766933051124 * "ADS_ano_2_OUT".anoova_18 + -0.34952932788504243 * "ADS_ano_2_OUT".anoova_19 + -3.4746112391977507e-16 * "ADS_ano_2_OUT".anoova_20 + -2.4227994374813023e-16 * "ADS_ano_2_OUT".anoova_21 + -1.46532895935 AS "Score_3" 
FROM "ADS_ano_2_OUT"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte