-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0311679724062 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.241897319835 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.210107402671 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.434377387223 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0142772723402 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.392457975484 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.104542830406 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0537901903451 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0505908320704 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0596341306249 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN -0.0575340534322 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.0313038534541 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.102543706877 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.040612643922 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.0102001951907 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.0582580052909 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.152784212059 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN -0.0976467232242 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.0314886183739 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.109132929793 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.0311679724062 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.241897319835 AS impute_3, "ADS_imp_1_OUT".impute_4 - 0.210107402671 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.434377387223 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.0142772723402 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.392457975484 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.104542830406 AS impute_8, "ADS_imp_1_OUT".impute_9 - -0.0537901903451 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0505908320704 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.0596341306249 AS impute_11, "ADS_imp_1_OUT".impute_12 - -0.0575340534322 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.0313038534541 AS impute_13, "ADS_imp_1_OUT".impute_14 - -0.102543706877 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.040612643922 AS impute_15, "ADS_imp_1_OUT".impute_16 - 0.0102001951907 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.0582580052909 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.152784212059 AS impute_18, "ADS_imp_1_OUT".impute_19 - -0.0976467232242 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.0314886183739 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.109132929793 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * -0.0257202710331 + "CenteredDataForPCA".impute_3 * -0.673941602826 + "CenteredDataForPCA".impute_4 * -0.0835088464867 + "CenteredDataForPCA".impute_5 * -0.211647459098 + "CenteredDataForPCA".impute_6 * 0.0232095486557 + "CenteredDataForPCA".impute_7 * 0.328502933082 + "CenteredDataForPCA".impute_8 * -0.00404911826835 + "CenteredDataForPCA".impute_9 * -0.0163970755736 + "CenteredDataForPCA".impute_10 * -0.0118593511817 + "CenteredDataForPCA".impute_11 * -0.0102143595299 + "CenteredDataForPCA".impute_12 * 0.0441848233241 + "CenteredDataForPCA".impute_13 * 0.0421333026416 + "CenteredDataForPCA".impute_14 * 0.026199743074 + "CenteredDataForPCA".impute_15 * 0.381770904653 + "CenteredDataForPCA".impute_16 * 0.0225251027636 + "CenteredDataForPCA".impute_17 * -0.0193418946101 + "CenteredDataForPCA".impute_18 * 0.472550647214 + "CenteredDataForPCA".impute_19 * -0.0267077438857 + "CenteredDataForPCA".impute_20 * -0.00786548650197 + "CenteredDataForPCA".impute_21 * 0.0962599371445 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.0958100891362 + "CenteredDataForPCA".impute_3 * 0.325304187511 + "CenteredDataForPCA".impute_4 * -0.0967412344212 + "CenteredDataForPCA".impute_5 * 0.633689985191 + "CenteredDataForPCA".impute_6 * -0.00817430609427 + "CenteredDataForPCA".impute_7 * 0.133977969835 + "CenteredDataForPCA".impute_8 * -0.129858189788 + "CenteredDataForPCA".impute_9 * -0.031147088944 + "CenteredDataForPCA".impute_10 * -0.112518669309 + "CenteredDataForPCA".impute_11 * 0.0346544303018 + "CenteredDataForPCA".impute_12 * -0.123507128133 + "CenteredDataForPCA".impute_13 * -0.0109773958093 + "CenteredDataForPCA".impute_14 * 0.152638379894 + "CenteredDataForPCA".impute_15 * 0.511729591146 + "CenteredDataForPCA".impute_16 * 0.0647705388137 + "CenteredDataForPCA".impute_17 * 0.0541464988268 + "CenteredDataForPCA".impute_18 * 0.25236632684 + "CenteredDataForPCA".impute_19 * 0.00814664776199 + "CenteredDataForPCA".impute_20 * -0.190039940893 + "CenteredDataForPCA".impute_21 * -0.129717471919 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.230358113937 + "CenteredDataForPCA".impute_3 * -0.0317599216282 + "CenteredDataForPCA".impute_4 * -0.703012550268 + "CenteredDataForPCA".impute_5 * 0.198174571541 + "CenteredDataForPCA".impute_6 * -0.0473955508884 + "CenteredDataForPCA".impute_7 * -0.00272425009453 + "CenteredDataForPCA".impute_8 * 0.392321358603 + "CenteredDataForPCA".impute_9 * 0.082507386192 + "CenteredDataForPCA".impute_10 * 0.0647135974985 + "CenteredDataForPCA".impute_11 * 0.0282961153287 + "CenteredDataForPCA".impute_12 * 0.0724450954307 + "CenteredDataForPCA".impute_13 * 0.0631127852137 + "CenteredDataForPCA".impute_14 * 0.0261794163931 + "CenteredDataForPCA".impute_15 * 0.073690253259 + "CenteredDataForPCA".impute_16 * 0.168345043409 + "CenteredDataForPCA".impute_17 * -0.0312766287751 + "CenteredDataForPCA".impute_18 * -0.212126804461 + "CenteredDataForPCA".impute_19 * -0.0762006808104 + "CenteredDataForPCA".impute_20 * 0.299930885448 + "CenteredDataForPCA".impute_21 * 0.242966191815 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.338843388762 + "CenteredDataForPCA".impute_3 * -0.0338378724607 + "CenteredDataForPCA".impute_4 * 0.295247041466 + "CenteredDataForPCA".impute_5 * 0.240947800001 + "CenteredDataForPCA".impute_6 * -0.21115205095 + "CenteredDataForPCA".impute_7 * 0.580569304079 + "CenteredDataForPCA".impute_8 * 0.195750046801 + "CenteredDataForPCA".impute_9 * 0.0475460128858 + "CenteredDataForPCA".impute_10 * -0.281688187737 + "CenteredDataForPCA".impute_11 * -0.0182934846705 + "CenteredDataForPCA".impute_12 * -0.0841365369813 + "CenteredDataForPCA".impute_13 * 0.307494497225 + "CenteredDataForPCA".impute_14 * -0.219280271837 + "CenteredDataForPCA".impute_15 * -0.162677065547 + "CenteredDataForPCA".impute_16 * -0.136614515282 + "CenteredDataForPCA".impute_17 * -0.0864015716111 + "CenteredDataForPCA".impute_18 * -0.172827864052 + "CenteredDataForPCA".impute_19 * -0.0581260598486 + "CenteredDataForPCA".impute_20 * 0.00861161169022 + "CenteredDataForPCA".impute_21 * -0.0357139685483 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.329724077035 + "CenteredDataForPCA".impute_3 * -0.126774970315 + "CenteredDataForPCA".impute_4 * -0.252593448816 + "CenteredDataForPCA".impute_5 * 0.134396141002 + "CenteredDataForPCA".impute_6 * -0.0796512661016 + "CenteredDataForPCA".impute_7 * 0.285022898156 + "CenteredDataForPCA".impute_8 * -0.120248476321 + "CenteredDataForPCA".impute_9 * -0.176284511883 + "CenteredDataForPCA".impute_10 * 0.400930662866 + "CenteredDataForPCA".impute_11 * 0.030218384393 + "CenteredDataForPCA".impute_12 * -0.144408478606 + "CenteredDataForPCA".impute_13 * -0.115964271885 + "CenteredDataForPCA".impute_14 * -0.21679913673 + "CenteredDataForPCA".impute_15 * -0.0660470557355 + "CenteredDataForPCA".impute_16 * -0.534977774455 + "CenteredDataForPCA".impute_17 * 0.246466354466 + "CenteredDataForPCA".impute_18 * -0.19449221398 + "CenteredDataForPCA".impute_19 * 0.15947248013 + "CenteredDataForPCA".impute_20 * 0.0254291856202 + "CenteredDataForPCA".impute_21 * -0.0452735876904 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.0318700997036 + "CenteredDataForPCA".impute_3 * 0.0477975655952 + "CenteredDataForPCA".impute_4 * 0.201158028822 + "CenteredDataForPCA".impute_5 * 0.104792327661 + "CenteredDataForPCA".impute_6 * 0.24405329917 + "CenteredDataForPCA".impute_7 * 0.181906466452 + "CenteredDataForPCA".impute_8 * -0.0786764934731 + "CenteredDataForPCA".impute_9 * -0.48399692771 + "CenteredDataForPCA".impute_10 * -0.161308486982 + "CenteredDataForPCA".impute_11 * 0.315634670921 + "CenteredDataForPCA".impute_12 * 0.275242586314 + "CenteredDataForPCA".impute_13 * -0.145539790825 + "CenteredDataForPCA".impute_14 * 0.0276031270045 + "CenteredDataForPCA".impute_15 * -0.0364737812543 + "CenteredDataForPCA".impute_16 * 0.192629340173 + "CenteredDataForPCA".impute_17 * 0.199782885338 + "CenteredDataForPCA".impute_18 * -0.0188254204354 + "CenteredDataForPCA".impute_19 * 0.235343993887 + "CenteredDataForPCA".impute_20 * 0.433176119313 + "CenteredDataForPCA".impute_21 * 0.258995080806 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.231706949173 + "CenteredDataForPCA".impute_3 * -0.112005758259 + "CenteredDataForPCA".impute_4 * -0.195660130861 + "CenteredDataForPCA".impute_5 * -0.0736059217308 + "CenteredDataForPCA".impute_6 * 0.0270336322772 + "CenteredDataForPCA".impute_7 * 0.0221505148578 + "CenteredDataForPCA".impute_8 * 0.0783897849276 + "CenteredDataForPCA".impute_9 * 0.178827370103 + "CenteredDataForPCA".impute_10 * -0.472893833354 + "CenteredDataForPCA".impute_11 * 0.351100599971 + "CenteredDataForPCA".impute_12 * 0.282542291733 + "CenteredDataForPCA".impute_13 * 0.1256056295 + "CenteredDataForPCA".impute_14 * 0.44057055719 + "CenteredDataForPCA".impute_15 * -0.102130952474 + "CenteredDataForPCA".impute_16 * -0.291400284002 + "CenteredDataForPCA".impute_17 * 0.115085698506 + "CenteredDataForPCA".impute_18 * -0.134860153971 + "CenteredDataForPCA".impute_19 * 0.0663821824036 + "CenteredDataForPCA".impute_20 * -0.121858860448 + "CenteredDataForPCA".impute_21 * -0.260916987492 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.128437088188 + "CenteredDataForPCA".impute_3 * -0.0520109205524 + "CenteredDataForPCA".impute_4 * -0.102885626475 + "CenteredDataForPCA".impute_5 * -0.0153892886943 + "CenteredDataForPCA".impute_6 * -0.38164606039 + "CenteredDataForPCA".impute_7 * 0.0678829454036 + "CenteredDataForPCA".impute_8 * 0.0556433112164 + "CenteredDataForPCA".impute_9 * -0.391411325216 + "CenteredDataForPCA".impute_10 * -0.0566630149073 + "CenteredDataForPCA".impute_11 * -0.0141270927365 + "CenteredDataForPCA".impute_12 * 0.154892631048 + "CenteredDataForPCA".impute_13 * -0.0993986351583 + "CenteredDataForPCA".impute_14 * 0.046677335732 + "CenteredDataForPCA".impute_15 * -0.113296450664 + "CenteredDataForPCA".impute_16 * 0.231925292986 + "CenteredDataForPCA".impute_17 * -0.134147799608 + "CenteredDataForPCA".impute_18 * -0.142405225467 + "CenteredDataForPCA".impute_19 * 0.0770373259126 + "CenteredDataForPCA".impute_20 * -0.635266313767 + "CenteredDataForPCA".impute_21 * 0.330993164231 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.250360431596 + "CenteredDataForPCA".impute_3 * 0.125520721431 + "CenteredDataForPCA".impute_4 * -0.0475388085817 + "CenteredDataForPCA".impute_5 * -0.00587694227062 + "CenteredDataForPCA".impute_6 * -0.201677234148 + "CenteredDataForPCA".impute_7 * -0.271372846327 + "CenteredDataForPCA".impute_8 * -0.295377049263 + "CenteredDataForPCA".impute_9 * -0.163379550809 + "CenteredDataForPCA".impute_10 * 0.134725221818 + "CenteredDataForPCA".impute_11 * 0.197322145399 + "CenteredDataForPCA".impute_12 * 0.401459799686 + "CenteredDataForPCA".impute_13 * 0.478471766556 + "CenteredDataForPCA".impute_14 * -0.150614420096 + "CenteredDataForPCA".impute_15 * 0.151434014929 + "CenteredDataForPCA".impute_16 * -0.358168829036 + "CenteredDataForPCA".impute_17 * -0.181800792802 + "CenteredDataForPCA".impute_18 * 0.143013819835 + "CenteredDataForPCA".impute_19 * 0.00700605435442 + "CenteredDataForPCA".impute_20 * 0.0243013852873 + "CenteredDataForPCA".impute_21 * 0.125595399926 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.0159232621726 + "CenteredDataForPCA".impute_3 * 0.0116714237694 + "CenteredDataForPCA".impute_4 * -0.0972394243272 + "CenteredDataForPCA".impute_5 * 0.0601879134595 + "CenteredDataForPCA".impute_6 * 0.378709302094 + "CenteredDataForPCA".impute_7 * 0.00668075500007 + "CenteredDataForPCA".impute_8 * 0.161290355673 + "CenteredDataForPCA".impute_9 * -0.0551357385748 + "CenteredDataForPCA".impute_10 * -0.0929775492799 + "CenteredDataForPCA".impute_11 * -0.458265099621 + "CenteredDataForPCA".impute_12 * 0.538097688265 + "CenteredDataForPCA".impute_13 * -0.000820383591446 + "CenteredDataForPCA".impute_14 * -0.39090013016 + "CenteredDataForPCA".impute_15 * 0.0417352739322 + "CenteredDataForPCA".impute_16 * 0.0100892692006 + "CenteredDataForPCA".impute_17 * 0.152995363067 + "CenteredDataForPCA".impute_18 * -0.00944569386932 + "CenteredDataForPCA".impute_19 * 0.111258505325 + "CenteredDataForPCA".impute_20 * -0.207847267537 + "CenteredDataForPCA".impute_21 * -0.268492899546 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.0568947701625 + "CenteredDataForPCA".impute_3 * 0.0263710339586 + "CenteredDataForPCA".impute_4 * 0.214345728018 + "CenteredDataForPCA".impute_5 * -0.000558510695337 + "CenteredDataForPCA".impute_6 * -0.334505149566 + "CenteredDataForPCA".impute_7 * 0.0204254291468 + "CenteredDataForPCA".impute_8 * 0.433644500082 + "CenteredDataForPCA".impute_9 * 0.0559795324425 + "CenteredDataForPCA".impute_10 * 0.460226444129 + "CenteredDataForPCA".impute_11 * 0.321157314462 + "CenteredDataForPCA".impute_12 * 0.237107728959 + "CenteredDataForPCA".impute_13 * 0.0339306969078 + "CenteredDataForPCA".impute_14 * -0.00335246521231 + "CenteredDataForPCA".impute_15 * 0.0523282386541 + "CenteredDataForPCA".impute_16 * 0.252359028529 + "CenteredDataForPCA".impute_17 * 0.147113780473 + "CenteredDataForPCA".impute_18 * 0.119298304969 + "CenteredDataForPCA".impute_19 * 0.116232398137 + "CenteredDataForPCA".impute_20 * 0.017194875844 + "CenteredDataForPCA".impute_21 * -0.397736699455 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.07316620083 + "CenteredDataForPCA".impute_3 * -0.00860673386002 + "CenteredDataForPCA".impute_4 * 0.0439762371712 + "CenteredDataForPCA".impute_5 * 0.095509590075 + "CenteredDataForPCA".impute_6 * 0.317958281724 + "CenteredDataForPCA".impute_7 * 0.212067451222 + "CenteredDataForPCA".impute_8 * -0.266526023424 + "CenteredDataForPCA".impute_9 * 0.532502337475 + "CenteredDataForPCA".impute_10 * 0.280427999978 + "CenteredDataForPCA".impute_11 * 0.240749996674 + "CenteredDataForPCA".impute_12 * 0.146862737439 + "CenteredDataForPCA".impute_13 * 0.2134837944 + "CenteredDataForPCA".impute_14 * -0.0576624062977 + "CenteredDataForPCA".impute_15 * -0.0946743921943 + "CenteredDataForPCA".impute_16 * 0.242702642753 + "CenteredDataForPCA".impute_17 * 0.112656992599 + "CenteredDataForPCA".impute_18 * -0.122357899097 + "CenteredDataForPCA".impute_19 * 0.0453974049166 + "CenteredDataForPCA".impute_20 * -0.256697311275 + "CenteredDataForPCA".impute_21 * 0.335107496969 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.48140497135 + "CenteredDataForPCA".impute_3 * -0.048190814423 + "CenteredDataForPCA".impute_4 * -0.123937906453 + "CenteredDataForPCA".impute_5 * 0.0114712889555 + "CenteredDataForPCA".impute_6 * -0.32012333569 + "CenteredDataForPCA".impute_7 * 0.0341963897007 + "CenteredDataForPCA".impute_8 * -0.306289193949 + "CenteredDataForPCA".impute_9 * 0.129581935939 + "CenteredDataForPCA".impute_10 * -0.242836573447 + "CenteredDataForPCA".impute_11 * 0.0322035162711 + "CenteredDataForPCA".impute_12 * 0.121681859816 + "CenteredDataForPCA".impute_13 * 0.0246964951384 + "CenteredDataForPCA".impute_14 * -0.419437501359 + "CenteredDataForPCA".impute_15 * -0.00938220422039 + "CenteredDataForPCA".impute_16 * 0.310470152244 + "CenteredDataForPCA".impute_17 * -0.184148823357 + "CenteredDataForPCA".impute_18 * -0.0506421529233 + "CenteredDataForPCA".impute_19 * -0.216163151693 + "CenteredDataForPCA".impute_20 * 0.281352274779 + "CenteredDataForPCA".impute_21 * -0.16121465912 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.202775628027 + "CenteredDataForPCA".impute_3 * 0.0279261286295 + "CenteredDataForPCA".impute_4 * 0.0081721465057 + "CenteredDataForPCA".impute_5 * -0.0705336433827 + "CenteredDataForPCA".impute_6 * -0.386577894277 + "CenteredDataForPCA".impute_7 * -0.164917457723 + "CenteredDataForPCA".impute_8 * -0.0770180740328 + "CenteredDataForPCA".impute_9 * 0.230196530568 + "CenteredDataForPCA".impute_10 * -0.247060276222 + "CenteredDataForPCA".impute_11 * -0.0358088766978 + "CenteredDataForPCA".impute_12 * -0.00468275886685 + "CenteredDataForPCA".impute_13 * -0.158029708093 + "CenteredDataForPCA".impute_14 * -0.182762580823 + "CenteredDataForPCA".impute_15 * 0.063741187729 + "CenteredDataForPCA".impute_16 * -0.0291923068972 + "CenteredDataForPCA".impute_17 * 0.729671453317 + "CenteredDataForPCA".impute_18 * 0.0956973711868 + "CenteredDataForPCA".impute_19 * 0.0546211742231 + "CenteredDataForPCA".impute_20 * -0.0220702924542 + "CenteredDataForPCA".impute_21 * 0.216368399032 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.131638627955 + "CenteredDataForPCA".impute_3 * -0.0964682580382 + "CenteredDataForPCA".impute_4 * -0.204157973697 + "CenteredDataForPCA".impute_5 * -0.118773410262 + "CenteredDataForPCA".impute_6 * 0.182361270751 + "CenteredDataForPCA".impute_7 * -0.0816388399543 + "CenteredDataForPCA".impute_8 * -0.138255807691 + "CenteredDataForPCA".impute_9 * -0.361765028332 + "CenteredDataForPCA".impute_10 * -0.0302989196137 + "CenteredDataForPCA".impute_11 * 0.196001587878 + "CenteredDataForPCA".impute_12 * -0.364638737284 + "CenteredDataForPCA".impute_13 * 0.440257214468 + "CenteredDataForPCA".impute_14 * -0.122506817385 + "CenteredDataForPCA".impute_15 * -0.0688851698864 + "CenteredDataForPCA".impute_16 * 0.301991870714 + "CenteredDataForPCA".impute_17 * 0.323500597379 + "CenteredDataForPCA".impute_18 * -0.0856022066254 + "CenteredDataForPCA".impute_19 * -0.115525801147 + "CenteredDataForPCA".impute_20 * -0.163001906326 + "CenteredDataForPCA".impute_21 * -0.314161669009 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.152330255304 + "CenteredDataForPCA".impute_3 * 0.0123455588411 + "CenteredDataForPCA".impute_4 * -0.0479986784311 + "CenteredDataForPCA".impute_5 * -0.017492040759 + "CenteredDataForPCA".impute_6 * 0.204042262963 + "CenteredDataForPCA".impute_7 * -0.0983556428965 + "CenteredDataForPCA".impute_8 * 0.170002379938 + "CenteredDataForPCA".impute_9 * 0.0385298011516 + "CenteredDataForPCA".impute_10 * -0.13645188072 + "CenteredDataForPCA".impute_11 * 0.567654561218 + "CenteredDataForPCA".impute_12 * -0.0932313558906 + "CenteredDataForPCA".impute_13 * -0.419051619637 + "CenteredDataForPCA".impute_14 * -0.47305716666 + "CenteredDataForPCA".impute_15 * 0.0716773601404 + "CenteredDataForPCA".impute_16 * -0.151693032063 + "CenteredDataForPCA".impute_17 * -0.193607578641 + "CenteredDataForPCA".impute_18 * 0.066825966066 + "CenteredDataForPCA".impute_19 * -0.150789038364 + "CenteredDataForPCA".impute_20 * -0.224583350066 + "CenteredDataForPCA".impute_21 * -0.0117268476683 AS anoova_17, "CenteredDataForPCA".impute_2 * 0.0343237188556 + "CenteredDataForPCA".impute_3 * -0.0147371901318 + "CenteredDataForPCA".impute_4 * -0.0818013469778 + "CenteredDataForPCA".impute_5 * -0.0532355572479 + "CenteredDataForPCA".impute_6 * -0.0278809850492 + "CenteredDataForPCA".impute_7 * -0.112455142344 + "CenteredDataForPCA".impute_8 * 0.0509255155624 + "CenteredDataForPCA".impute_9 * 0.134140508091 + "CenteredDataForPCA".impute_10 * -0.156624796396 + "CenteredDataForPCA".impute_11 * 0.0174748035045 + "CenteredDataForPCA".impute_12 * -0.252815192909 + "CenteredDataForPCA".impute_13 * 0.142604477254 + "CenteredDataForPCA".impute_14 * -0.183201738372 + "CenteredDataForPCA".impute_15 * 0.0470767823953 + "CenteredDataForPCA".impute_16 * 0.0758172858583 + "CenteredDataForPCA".impute_17 * -0.209703861766 + "CenteredDataForPCA".impute_18 * 0.0453554312748 + "CenteredDataForPCA".impute_19 * 0.870595972738 + "CenteredDataForPCA".impute_20 * 0.0210016403036 + "CenteredDataForPCA".impute_21 * -0.00646245044567 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.506218398789 + "CenteredDataForPCA".impute_3 * -0.108484703762 + "CenteredDataForPCA".impute_4 * -0.161439494546 + "CenteredDataForPCA".impute_5 * 0.0222260928178 + "CenteredDataForPCA".impute_6 * -0.124895351616 + "CenteredDataForPCA".impute_7 * 0.154490824035 + "CenteredDataForPCA".impute_8 * -0.488155620048 + "CenteredDataForPCA".impute_9 * 0.0512078206849 + "CenteredDataForPCA".impute_10 * 0.0934714877622 + "CenteredDataForPCA".impute_11 * 0.0152074648658 + "CenteredDataForPCA".impute_12 * 0.145351391744 + "CenteredDataForPCA".impute_13 * -0.385057452682 + "CenteredDataForPCA".impute_14 * 0.150642772978 + "CenteredDataForPCA".impute_15 * -0.0869252836388 + "CenteredDataForPCA".impute_16 * 0.13455363314 + "CenteredDataForPCA".impute_17 * -0.114519614233 + "CenteredDataForPCA".impute_18 * -0.145734413231 + "CenteredDataForPCA".impute_19 * 0.164761120744 + "CenteredDataForPCA".impute_20 * -0.00379537139852 + "CenteredDataForPCA".impute_21 * -0.369865651544 AS anoova_19, "CenteredDataForPCA".impute_2 * 1.72540630284e-16 + "CenteredDataForPCA".impute_3 * 0.576384697139 + "CenteredDataForPCA".impute_4 * -0.179484415499 + "CenteredDataForPCA".impute_5 * -0.614179293056 + "CenteredDataForPCA".impute_6 * 3.95516952523e-16 + "CenteredDataForPCA".impute_7 * 0.44952556606 + "CenteredDataForPCA".impute_8 * 2.77555756156e-17 + "CenteredDataForPCA".impute_9 * 4.16333634234e-17 + "CenteredDataForPCA".impute_10 * -1.2490009027e-16 + "CenteredDataForPCA".impute_11 * -1.04083408559e-16 + "CenteredDataForPCA".impute_12 * -4.51028103754e-17 + "CenteredDataForPCA".impute_13 * 2.22044604925e-16 + "CenteredDataForPCA".impute_14 * -2.77555756156e-17 + "CenteredDataForPCA".impute_15 * 0.236957815266 + "CenteredDataForPCA".impute_16 * -6.93889390391e-17 + "CenteredDataForPCA".impute_17 * -2.77555756156e-17 + "CenteredDataForPCA".impute_18 * 0.011295163628 + "CenteredDataForPCA".impute_19 * -4.16333634234e-17 + "CenteredDataForPCA".impute_20 * 5.55111512313e-17 + "CenteredDataForPCA".impute_21 * 1.11022302463e-16 AS anoova_20, "CenteredDataForPCA".impute_2 * -9.02565457629e-17 + "CenteredDataForPCA".impute_3 * 0.17547622224 + "CenteredDataForPCA".impute_4 * -0.255263769895 + "CenteredDataForPCA".impute_5 * 0.0936563470574 + "CenteredDataForPCA".impute_6 * 1.71737624122e-16 + "CenteredDataForPCA".impute_7 * 0.123573765207 + "CenteredDataForPCA".impute_8 * -1.2490009027e-16 + "CenteredDataForPCA".impute_9 * -8.32667268469e-17 + "CenteredDataForPCA".impute_10 * 4.85722573274e-17 + "CenteredDataForPCA".impute_11 * 3.46944695195e-17 + "CenteredDataForPCA".impute_12 * 1.21430643318e-17 + "CenteredDataForPCA".impute_13 * 1.52655665886e-16 + "CenteredDataForPCA".impute_14 * 1.31838984174e-16 + "CenteredDataForPCA".impute_15 * -0.644359964876 + "CenteredDataForPCA".impute_16 * -1.73472347598e-17 + "CenteredDataForPCA".impute_17 * -9.02056207508e-17 + "CenteredDataForPCA".impute_18 * 0.681767373875 + "CenteredDataForPCA".impute_19 * -1.2490009027e-16 + "CenteredDataForPCA".impute_20 * 2.08166817117e-17 + "CenteredDataForPCA".impute_21 * -1.80411241502e-16 AS anoova_21 
FROM "CenteredDataForPCA"), 
linear_model_cte AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", -0.29372715301024743 * "ADS_ano_2_OUT".anoova_2 + -0.4127733541480119 * "ADS_ano_2_OUT".anoova_3 + -0.23622016473982052 * "ADS_ano_2_OUT".anoova_4 + 0.2292981415566924 * "ADS_ano_2_OUT".anoova_5 + -0.11656085969764769 * "ADS_ano_2_OUT".anoova_6 + 0.36129281486736275 * "ADS_ano_2_OUT".anoova_7 + 0.27771233418765073 * "ADS_ano_2_OUT".anoova_8 + 0.016053180924289756 * "ADS_ano_2_OUT".anoova_9 + -0.12300256531095964 * "ADS_ano_2_OUT".anoova_10 + 0.06302381243514237 * "ADS_ano_2_OUT".anoova_11 + 0.24561907777083253 * "ADS_ano_2_OUT".anoova_12 + -0.01856971401039771 * "ADS_ano_2_OUT".anoova_13 + -0.05424741265752493 * "ADS_ano_2_OUT".anoova_14 + -0.030921846888631963 * "ADS_ano_2_OUT".anoova_15 + -0.372582373875651 * "ADS_ano_2_OUT".anoova_16 + -0.2407182936344735 * "ADS_ano_2_OUT".anoova_17 + -0.2577207654835127 * "ADS_ano_2_OUT".anoova_18 + -0.11880812767677586 * "ADS_ano_2_OUT".anoova_19 + 3.1352248454797453e-16 * "ADS_ano_2_OUT".anoova_20 + -3.8594924707108605e-16 * "ADS_ano_2_OUT".anoova_21 + -1.48951006346 AS "Score_0", -0.34526889154808327 * "ADS_ano_2_OUT".anoova_2 + -0.12045206411020942 * "ADS_ano_2_OUT".anoova_3 + -0.006862839136129922 * "ADS_ano_2_OUT".anoova_4 + -0.5060320846611462 * "ADS_ano_2_OUT".anoova_5 + -0.00031771902281698387 * "ADS_ano_2_OUT".anoova_6 + -0.43894457081991 * "ADS_ano_2_OUT".anoova_7 + -0.05684213217893595 * "ADS_ano_2_OUT".anoova_8 + -0.055521476645091404 * "ADS_ano_2_OUT".anoova_9 + 0.13095275266719156 * "ADS_ano_2_OUT".anoova_10 + -0.2381144762164887 * "ADS_ano_2_OUT".anoova_11 + -0.25545945238071077 * "ADS_ano_2_OUT".anoova_12 + 0.032321960831451696 * "ADS_ano_2_OUT".anoova_13 + -0.09569874741831753 * "ADS_ano_2_OUT".anoova_14 + 0.3649794910820846 * "ADS_ano_2_OUT".anoova_15 + 0.0067925211182095074 * "ADS_ano_2_OUT".anoova_16 + 0.37182408282223867 * "ADS_ano_2_OUT".anoova_17 + -0.3413004189303112 * "ADS_ano_2_OUT".anoova_18 + 0.19853611517033318 * "ADS_ano_2_OUT".anoova_19 + -1.4958059303148202e-16 * "ADS_ano_2_OUT".anoova_20 + -2.5669265066365325e-16 * "ADS_ano_2_OUT".anoova_21 + -1.35493617323 AS "Score_1", 0.1314834303726076 * "ADS_ano_2_OUT".anoova_2 + 0.4539044736074797 * "ADS_ano_2_OUT".anoova_3 + 0.8360476140943538 * "ADS_ano_2_OUT".anoova_4 + -0.03526184135889425 * "ADS_ano_2_OUT".anoova_5 + 0.38844934744510967 * "ADS_ano_2_OUT".anoova_6 + 0.05044350976412288 * "ADS_ano_2_OUT".anoova_7 + 0.08540505533454198 * "ADS_ano_2_OUT".anoova_8 + 0.25836846635456534 * "ADS_ano_2_OUT".anoova_9 + 0.18786987623640072 * "ADS_ano_2_OUT".anoova_10 + 0.09907502211487448 * "ADS_ano_2_OUT".anoova_11 + 0.04072464075914664 * "ADS_ano_2_OUT".anoova_12 + 0.2845466372344571 * "ADS_ano_2_OUT".anoova_13 + 0.2665325803046198 * "ADS_ano_2_OUT".anoova_14 + -0.7257228566713398 * "ADS_ano_2_OUT".anoova_15 + -0.10670188457450648 * "ADS_ano_2_OUT".anoova_16 + -0.17791027077981852 * "ADS_ano_2_OUT".anoova_17 + 0.6581824757486929 * "ADS_ano_2_OUT".anoova_18 + 0.19766947083048997 * "ADS_ano_2_OUT".anoova_19 + -1.3929535748092233e-15 * "ADS_ano_2_OUT".anoova_20 + -2.2913022166719244e-16 * "ADS_ano_2_OUT".anoova_21 + -1.59297468321 AS "Score_2", 0.6881530366864334 * "ADS_ano_2_OUT".anoova_2 + 0.42851734066227276 * "ADS_ano_2_OUT".anoova_3 + -1.1489393714021416 * "ADS_ano_2_OUT".anoova_4 + 0.5506328335345995 * "ADS_ano_2_OUT".anoova_5 + -0.5676137598984005 * "ADS_ano_2_OUT".anoova_6 + 0.07377202617480919 * "ADS_ano_2_OUT".anoova_7 + -0.4034111155820032 * "ADS_ano_2_OUT".anoova_8 + -0.2958160852184264 * "ADS_ano_2_OUT".anoova_9 + -0.19473106516438543 * "ADS_ano_2_OUT".anoova_10 + -0.0781054482220222 * "ADS_ano_2_OUT".anoova_11 + 0.13915235740730766 * "ADS_ano_2_OUT".anoova_12 + -0.1763180289750641 * "ADS_ano_2_OUT".anoova_13 + -0.19827307758086546 * "ADS_ano_2_OUT".anoova_14 + -0.08580496794033811 * "ADS_ano_2_OUT".anoova_15 + 0.3266607291735106 * "ADS_ano_2_OUT".anoova_16 + 0.3882177269870165 * "ADS_ano_2_OUT".anoova_17 + 0.04917527711321925 * "ADS_ano_2_OUT".anoova_18 + -0.4609823457820312 * "ADS_ano_2_OUT".anoova_19 + 1.05802475361364e-15 * "ADS_ano_2_OUT".anoova_20 + -3.0176829323056584e-16 * "ADS_ano_2_OUT".anoova_21 + -2.31684931776 AS "Score_3" 
FROM "ADS_ano_2_OUT"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte