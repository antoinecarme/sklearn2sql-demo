-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [IL] AS 
(SELECT [ADS].[KEY] AS [KEY], [ADS].[Feature_0] AS [Feature_0], [ADS].[Feature_1] AS [Feature_1], [ADS].[Feature_2] AS [Feature_2], [ADS].[Feature_3] AS [Feature_3], [ADS].[Feature_4] AS [Feature_4], [ADS].[Feature_5] AS [Feature_5], [ADS].[Feature_6] AS [Feature_6], [ADS].[Feature_7] AS [Feature_7], [ADS].[Feature_8] AS [Feature_8], [ADS].[Feature_9] AS [Feature_9], [ADS].[Feature_10] AS [Feature_10], [ADS].[Feature_11] AS [Feature_11], [ADS].[Feature_12] AS [Feature_12], [ADS].[Feature_13] AS [Feature_13], [ADS].[Feature_14] AS [Feature_14], [ADS].[Feature_15] AS [Feature_15], [ADS].[Feature_16] AS [Feature_16], [ADS].[Feature_17] AS [Feature_17], [ADS].[Feature_18] AS [Feature_18], [ADS].[Feature_19] AS [Feature_19] 
FROM [INPUT_DATA] AS [ADS]), 
[HL_BA_1] AS 
(SELECT [IL].[KEY] AS [KEY], 0.0414152313734 * [IL].[Feature_0] + 0.349163368241 * [IL].[Feature_1] + -0.593658145139 * [IL].[Feature_2] + -0.248037482138 * [IL].[Feature_3] + 0.166259361278 * [IL].[Feature_4] + -0.0857996087265 * [IL].[Feature_5] + -0.066438417778 * [IL].[Feature_6] + -0.0168011316722 * [IL].[Feature_7] + -0.383814047667 * [IL].[Feature_8] + 0.365216536884 * [IL].[Feature_9] + -0.329591008047 * [IL].[Feature_10] + -0.034240084216 * [IL].[Feature_11] + 0.0523801236229 * [IL].[Feature_12] + -0.171780886652 * [IL].[Feature_13] + 0.228492134424 * [IL].[Feature_14] + 0.12354153283 * [IL].[Feature_15] + -0.0387375935009 * [IL].[Feature_16] + 0.190729138622 * [IL].[Feature_17] + 0.396630699655 * [IL].[Feature_18] + -0.159612564954 * [IL].[Feature_19] + 0.151599408333 AS [NEUR_1_1], 0.389556871578 * [IL].[Feature_0] + -0.124715049259 * [IL].[Feature_1] + 0.361988609282 * [IL].[Feature_2] + 0.0004273564551 * [IL].[Feature_3] + 0.305650974337 * [IL].[Feature_4] + 0.111152932934 * [IL].[Feature_5] + -0.178430477796 * [IL].[Feature_6] + -0.031441644211 * [IL].[Feature_7] + -0.0987964154185 * [IL].[Feature_8] + -0.0575268093167 * [IL].[Feature_9] + 0.11048281207 * [IL].[Feature_10] + 0.517127218323 * [IL].[Feature_11] + -0.684175954616 * [IL].[Feature_12] + -0.11247489922 * [IL].[Feature_13] + -0.276765072992 * [IL].[Feature_14] + 0.209353422613 * [IL].[Feature_15] + -0.379385130869 * [IL].[Feature_16] + 0.312050825577 * [IL].[Feature_17] + 0.334339037657 * [IL].[Feature_18] + -0.0988347655076 * [IL].[Feature_19] + 0.158906009199 AS [NEUR_1_2], 0.101537133749 * [IL].[Feature_0] + 0.252642118988 * [IL].[Feature_1] + 0.418379807514 * [IL].[Feature_2] + -0.188472194366 * [IL].[Feature_3] + -0.291489455835 * [IL].[Feature_4] + 0.000703750282644 * [IL].[Feature_5] + -0.100671577063 * [IL].[Feature_6] + -0.0777719139686 * [IL].[Feature_7] + 0.182162828985 * [IL].[Feature_8] + 0.22007769715 * [IL].[Feature_9] + -0.267255403544 * [IL].[Feature_10] + 0.0114915823483 * [IL].[Feature_11] + 0.115124176252 * [IL].[Feature_12] + 0.178966872728 * [IL].[Feature_13] + 0.231855605333 * [IL].[Feature_14] + 0.505668548466 * [IL].[Feature_15] + 0.13466501281 * [IL].[Feature_16] + -0.0366904328035 * [IL].[Feature_17] + -0.291130396471 * [IL].[Feature_18] + -0.134131223502 * [IL].[Feature_19] + 0.182729058554 AS [NEUR_1_3], 0.0976631672254 * [IL].[Feature_0] + -0.144053984456 * [IL].[Feature_1] + 0.143623698402 * [IL].[Feature_2] + 0.291495653854 * [IL].[Feature_3] + 0.215001447624 * [IL].[Feature_4] + -0.23763835648 * [IL].[Feature_5] + -0.217022763358 * [IL].[Feature_6] + -0.022518426065 * [IL].[Feature_7] + -0.551401144852 * [IL].[Feature_8] + -0.62709579697 * [IL].[Feature_9] + 0.339513625022 * [IL].[Feature_10] + -0.0495743070395 * [IL].[Feature_11] + -0.326440317896 * [IL].[Feature_12] + 0.0703313491274 * [IL].[Feature_13] + -0.142438707779 * [IL].[Feature_14] + 0.0705606165898 * [IL].[Feature_15] + 0.102789984623 * [IL].[Feature_16] + 0.0426921220616 * [IL].[Feature_17] + 0.263064620703 * [IL].[Feature_18] + 0.245897658379 * [IL].[Feature_19] + 0.32961414241 AS [NEUR_1_4], -0.0279303279251 * [IL].[Feature_0] + -0.0342048719151 * [IL].[Feature_1] + 0.419702116831 * [IL].[Feature_2] + -0.089764260905 * [IL].[Feature_3] + 0.303719099976 * [IL].[Feature_4] + 0.123921414003 * [IL].[Feature_5] + 0.422199066432 * [IL].[Feature_6] + -0.489990421666 * [IL].[Feature_7] + 0.338829447918 * [IL].[Feature_8] + -0.349302535526 * [IL].[Feature_9] + -0.129968093172 * [IL].[Feature_10] + -0.166826683712 * [IL].[Feature_11] + 0.155692683092 * [IL].[Feature_12] + -0.440012671556 * [IL].[Feature_13] + 0.206448550382 * [IL].[Feature_14] + -0.123423241764 * [IL].[Feature_15] + -0.47650150995 * [IL].[Feature_16] + 0.226893163837 * [IL].[Feature_17] + 0.324331332499 * [IL].[Feature_18] + 0.472170003469 * [IL].[Feature_19] + 0.552785830125 AS [NEUR_1_5], -0.0837631877234 * [IL].[Feature_0] + 0.544800696283 * [IL].[Feature_1] + 0.284843407878 * [IL].[Feature_2] + -0.319388972473 * [IL].[Feature_3] + -0.0682539832137 * [IL].[Feature_4] + 0.0469107375415 * [IL].[Feature_5] + -0.27755364931 * [IL].[Feature_6] + -0.498882503051 * [IL].[Feature_7] + -0.286054893817 * [IL].[Feature_8] + -0.19813457969 * [IL].[Feature_9] + -0.0456598051906 * [IL].[Feature_10] + 0.39428667477 * [IL].[Feature_11] + -0.285809973734 * [IL].[Feature_12] + 0.480880431167 * [IL].[Feature_13] + -0.00429176442924 * [IL].[Feature_14] + 0.266849849644 * [IL].[Feature_15] + -0.227545342114 * [IL].[Feature_16] + -0.0326728546366 * [IL].[Feature_17] + 0.582906873913 * [IL].[Feature_18] + 0.0671603598214 * [IL].[Feature_19] + 0.494211599272 AS [NEUR_1_6], -0.211822627712 * [IL].[Feature_0] + -0.448762472953 * [IL].[Feature_1] + -0.125998472873 * [IL].[Feature_2] + -0.41375005234 * [IL].[Feature_3] + 0.177534643805 * [IL].[Feature_4] + -0.455410079007 * [IL].[Feature_5] + -0.184870849176 * [IL].[Feature_6] + 0.236522860254 * [IL].[Feature_7] + 0.387995852229 * [IL].[Feature_8] + -0.0245529841272 * [IL].[Feature_9] + -0.0820595190903 * [IL].[Feature_10] + -0.387345448973 * [IL].[Feature_11] + 0.0329346192982 * [IL].[Feature_12] + 0.0774962050084 * [IL].[Feature_13] + 0.214415124453 * [IL].[Feature_14] + -0.603814892471 * [IL].[Feature_15] + 0.257252662505 * [IL].[Feature_16] + -0.0789134618126 * [IL].[Feature_17] + -0.480162086485 * [IL].[Feature_18] + 0.0288008385545 * [IL].[Feature_19] + -0.313975003315 AS [NEUR_1_7], 0.490476600143 * [IL].[Feature_0] + -0.473475191464 * [IL].[Feature_1] + 0.337689171171 * [IL].[Feature_2] + 0.352379166589 * [IL].[Feature_3] + 0.171361957795 * [IL].[Feature_4] + -0.211878166867 * [IL].[Feature_5] + -0.42243484315 * [IL].[Feature_6] + -0.395171029707 * [IL].[Feature_7] + 0.0719386091099 * [IL].[Feature_8] + -0.439629095341 * [IL].[Feature_9] + -0.440962637477 * [IL].[Feature_10] + -0.246852222994 * [IL].[Feature_11] + 0.353011302797 * [IL].[Feature_12] + 0.244538815377 * [IL].[Feature_13] + 0.226698316758 * [IL].[Feature_14] + -0.317529364794 * [IL].[Feature_15] + -0.0672106118869 * [IL].[Feature_16] + 0.571689705144 * [IL].[Feature_17] + 0.272034778444 * [IL].[Feature_18] + -0.508841984842 * [IL].[Feature_19] + 0.05114753342 AS [NEUR_1_8] 
FROM [IL]), 
[HL_1] AS 
(SELECT [HL_BA_1].[KEY] AS [KEY], CASE WHEN ([HL_BA_1].[NEUR_1_1] >= 0.0) THEN [HL_BA_1].[NEUR_1_1] ELSE 0.0 END AS [NEUR_1_1], CASE WHEN ([HL_BA_1].[NEUR_1_2] >= 0.0) THEN [HL_BA_1].[NEUR_1_2] ELSE 0.0 END AS [NEUR_1_2], CASE WHEN ([HL_BA_1].[NEUR_1_3] >= 0.0) THEN [HL_BA_1].[NEUR_1_3] ELSE 0.0 END AS [NEUR_1_3], CASE WHEN ([HL_BA_1].[NEUR_1_4] >= 0.0) THEN [HL_BA_1].[NEUR_1_4] ELSE 0.0 END AS [NEUR_1_4], CASE WHEN ([HL_BA_1].[NEUR_1_5] >= 0.0) THEN [HL_BA_1].[NEUR_1_5] ELSE 0.0 END AS [NEUR_1_5], CASE WHEN ([HL_BA_1].[NEUR_1_6] >= 0.0) THEN [HL_BA_1].[NEUR_1_6] ELSE 0.0 END AS [NEUR_1_6], CASE WHEN ([HL_BA_1].[NEUR_1_7] >= 0.0) THEN [HL_BA_1].[NEUR_1_7] ELSE 0.0 END AS [NEUR_1_7], CASE WHEN ([HL_BA_1].[NEUR_1_8] >= 0.0) THEN [HL_BA_1].[NEUR_1_8] ELSE 0.0 END AS [NEUR_1_8] 
FROM [HL_BA_1]), 
[HL_BA_2] AS 
(SELECT [HL_1].[KEY] AS [KEY], 0.448215118935 * [HL_1].[NEUR_1_1] + -0.45878633278 * [HL_1].[NEUR_1_2] + -0.155064095008 * [HL_1].[NEUR_1_3] + -0.310383781603 * [HL_1].[NEUR_1_4] + -0.0645029036529 * [HL_1].[NEUR_1_5] + 0.714043178145 * [HL_1].[NEUR_1_6] + 0.62909001399 * [HL_1].[NEUR_1_7] + 0.082907013704 * [HL_1].[NEUR_1_8] + 0.358007833988 AS [NEUR_2_1], -0.424876468801 * [HL_1].[NEUR_1_1] + 0.345506285729 * [HL_1].[NEUR_1_2] + 0.606654606336 * [HL_1].[NEUR_1_3] + -0.313889598452 * [HL_1].[NEUR_1_4] + -0.285698036972 * [HL_1].[NEUR_1_5] + 0.460640564902 * [HL_1].[NEUR_1_6] + -0.498111951587 * [HL_1].[NEUR_1_7] + 0.271133051502 * [HL_1].[NEUR_1_8] + 0.327215559419 AS [NEUR_2_2], -0.0550521076859 * [HL_1].[NEUR_1_1] + 0.275047866993 * [HL_1].[NEUR_1_2] + 0.190624115038 * [HL_1].[NEUR_1_3] + 0.155383107973 * [HL_1].[NEUR_1_4] + 0.0878465974422 * [HL_1].[NEUR_1_5] + -0.22320787761 * [HL_1].[NEUR_1_6] + 0.18140536326 * [HL_1].[NEUR_1_7] + 0.628661078534 * [HL_1].[NEUR_1_8] + -0.29723509848 AS [NEUR_2_3], -0.581339185489 * [HL_1].[NEUR_1_1] + -0.407786583772 * [HL_1].[NEUR_1_2] + 0.103724642782 * [HL_1].[NEUR_1_3] + -0.276924198537 * [HL_1].[NEUR_1_4] + 0.43982344002 * [HL_1].[NEUR_1_5] + -0.147681730027 * [HL_1].[NEUR_1_6] + -0.50407622562 * [HL_1].[NEUR_1_7] + -0.652149818488 * [HL_1].[NEUR_1_8] + 0.193200778253 AS [NEUR_2_4], -0.222747276822 * [HL_1].[NEUR_1_1] + 0.69968717662 * [HL_1].[NEUR_1_2] + -0.511598421164 * [HL_1].[NEUR_1_3] + 0.0850818202038 * [HL_1].[NEUR_1_4] + 0.355069025017 * [HL_1].[NEUR_1_5] + -0.019701983068 * [HL_1].[NEUR_1_6] + 0.344603676895 * [HL_1].[NEUR_1_7] + 0.193635732563 * [HL_1].[NEUR_1_8] + -0.40507717907 AS [NEUR_2_5], -0.717268711559 * [HL_1].[NEUR_1_1] + 0.114287622702 * [HL_1].[NEUR_1_2] + -0.323728219783 * [HL_1].[NEUR_1_3] + 0.398064841859 * [HL_1].[NEUR_1_4] + 0.5257173549 * [HL_1].[NEUR_1_5] + -0.702219548644 * [HL_1].[NEUR_1_6] + -0.242775881581 * [HL_1].[NEUR_1_7] + 0.206020926613 * [HL_1].[NEUR_1_8] + -0.0242450544543 AS [NEUR_2_6], 0.359192896307 * [HL_1].[NEUR_1_1] + -0.0515339079079 * [HL_1].[NEUR_1_2] + -0.509346964989 * [HL_1].[NEUR_1_3] + 0.76847807206 * [HL_1].[NEUR_1_4] + -0.438788158962 * [HL_1].[NEUR_1_5] + -0.499684729551 * [HL_1].[NEUR_1_6] + 0.174284728225 * [HL_1].[NEUR_1_7] + 0.363738698351 * [HL_1].[NEUR_1_8] + 0.561155348099 AS [NEUR_2_7], -0.139281679581 * [HL_1].[NEUR_1_1] + -0.115708628526 * [HL_1].[NEUR_1_2] + 0.0423836607417 * [HL_1].[NEUR_1_3] + -0.490357742309 * [HL_1].[NEUR_1_4] + 0.291581130479 * [HL_1].[NEUR_1_5] + 0.0155270773833 * [HL_1].[NEUR_1_6] + -0.471337921363 * [HL_1].[NEUR_1_7] + -0.447314004188 * [HL_1].[NEUR_1_8] + 0.501805600276 AS [NEUR_2_8], -0.0431051073332 * [HL_1].[NEUR_1_1] + 0.466444275283 * [HL_1].[NEUR_1_2] + -0.444600733577 * [HL_1].[NEUR_1_3] + 0.238111709338 * [HL_1].[NEUR_1_4] + -0.246203347881 * [HL_1].[NEUR_1_5] + -0.113776473776 * [HL_1].[NEUR_1_6] + -0.314276207593 * [HL_1].[NEUR_1_7] + -0.146860504071 * [HL_1].[NEUR_1_8] + -0.252639620588 AS [NEUR_2_9], 0.362831810652 * [HL_1].[NEUR_1_1] + -0.268923285275 * [HL_1].[NEUR_1_2] + 0.123013789839 * [HL_1].[NEUR_1_3] + -0.20011397901 * [HL_1].[NEUR_1_4] + 0.450080765207 * [HL_1].[NEUR_1_5] + -0.157767876538 * [HL_1].[NEUR_1_6] + 0.0405004610079 * [HL_1].[NEUR_1_7] + -0.237190552798 * [HL_1].[NEUR_1_8] + 0.421129740582 AS [NEUR_2_10], 0.372089984699 * [HL_1].[NEUR_1_1] + -0.30600485887 * [HL_1].[NEUR_1_2] + -0.0904648954153 * [HL_1].[NEUR_1_3] + -0.454993825404 * [HL_1].[NEUR_1_4] + 0.207305614127 * [HL_1].[NEUR_1_5] + -0.207180488566 * [HL_1].[NEUR_1_6] + 0.0107357046713 * [HL_1].[NEUR_1_7] + -0.256157438801 * [HL_1].[NEUR_1_8] + -0.232532384352 AS [NEUR_2_11], -0.27897950066 * [HL_1].[NEUR_1_1] + -0.413484201413 * [HL_1].[NEUR_1_2] + -0.336603456774 * [HL_1].[NEUR_1_3] + 0.486708605565 * [HL_1].[NEUR_1_4] + -0.385447152211 * [HL_1].[NEUR_1_5] + 0.0907532259452 * [HL_1].[NEUR_1_6] + 0.673759153769 * [HL_1].[NEUR_1_7] + 0.479007930028 * [HL_1].[NEUR_1_8] + 0.689731362071 AS [NEUR_2_12] 
FROM [HL_1]), 
[HL_2] AS 
(SELECT [HL_BA_2].[KEY] AS [KEY], CASE WHEN ([HL_BA_2].[NEUR_2_1] >= 0.0) THEN [HL_BA_2].[NEUR_2_1] ELSE 0.0 END AS [NEUR_2_1], CASE WHEN ([HL_BA_2].[NEUR_2_2] >= 0.0) THEN [HL_BA_2].[NEUR_2_2] ELSE 0.0 END AS [NEUR_2_2], CASE WHEN ([HL_BA_2].[NEUR_2_3] >= 0.0) THEN [HL_BA_2].[NEUR_2_3] ELSE 0.0 END AS [NEUR_2_3], CASE WHEN ([HL_BA_2].[NEUR_2_4] >= 0.0) THEN [HL_BA_2].[NEUR_2_4] ELSE 0.0 END AS [NEUR_2_4], CASE WHEN ([HL_BA_2].[NEUR_2_5] >= 0.0) THEN [HL_BA_2].[NEUR_2_5] ELSE 0.0 END AS [NEUR_2_5], CASE WHEN ([HL_BA_2].[NEUR_2_6] >= 0.0) THEN [HL_BA_2].[NEUR_2_6] ELSE 0.0 END AS [NEUR_2_6], CASE WHEN ([HL_BA_2].[NEUR_2_7] >= 0.0) THEN [HL_BA_2].[NEUR_2_7] ELSE 0.0 END AS [NEUR_2_7], CASE WHEN ([HL_BA_2].[NEUR_2_8] >= 0.0) THEN [HL_BA_2].[NEUR_2_8] ELSE 0.0 END AS [NEUR_2_8], CASE WHEN ([HL_BA_2].[NEUR_2_9] >= 0.0) THEN [HL_BA_2].[NEUR_2_9] ELSE 0.0 END AS [NEUR_2_9], CASE WHEN ([HL_BA_2].[NEUR_2_10] >= 0.0) THEN [HL_BA_2].[NEUR_2_10] ELSE 0.0 END AS [NEUR_2_10], CASE WHEN ([HL_BA_2].[NEUR_2_11] >= 0.0) THEN [HL_BA_2].[NEUR_2_11] ELSE 0.0 END AS [NEUR_2_11], CASE WHEN ([HL_BA_2].[NEUR_2_12] >= 0.0) THEN [HL_BA_2].[NEUR_2_12] ELSE 0.0 END AS [NEUR_2_12] 
FROM [HL_BA_2]), 
[OL_BA] AS 
(SELECT [HL_2].[KEY] AS [KEY], 0.402447976985 * [HL_2].[NEUR_2_1] + -0.496709368046 * [HL_2].[NEUR_2_2] + -0.318219430955 * [HL_2].[NEUR_2_3] + 0.120293161934 * [HL_2].[NEUR_2_4] + 0.576900784898 * [HL_2].[NEUR_2_5] + -0.611486336951 * [HL_2].[NEUR_2_6] + 0.66872940925 * [HL_2].[NEUR_2_7] + -0.0261239056092 * [HL_2].[NEUR_2_8] + 0.487856871075 * [HL_2].[NEUR_2_9] + -0.610432715576 * [HL_2].[NEUR_2_10] + -0.336246331495 * [HL_2].[NEUR_2_11] + -0.142530789624 * [HL_2].[NEUR_2_12] + -0.270995678976 AS [NEUR_3_1], 0.49089409127 * [HL_2].[NEUR_2_1] + 0.58302223131 * [HL_2].[NEUR_2_2] + -0.638938578516 * [HL_2].[NEUR_2_3] + 0.311785285801 * [HL_2].[NEUR_2_4] + -0.58068585536 * [HL_2].[NEUR_2_5] + 0.298457491873 * [HL_2].[NEUR_2_6] + 0.23150166363 * [HL_2].[NEUR_2_7] + -0.220436456403 * [HL_2].[NEUR_2_8] + -0.79562740043 * [HL_2].[NEUR_2_9] + -0.442489138248 * [HL_2].[NEUR_2_10] + -0.141794577711 * [HL_2].[NEUR_2_11] + -0.583296109571 * [HL_2].[NEUR_2_12] + 0.0232763936216 AS [NEUR_3_2], -0.0620181558178 * [HL_2].[NEUR_2_1] + 0.0612515335336 * [HL_2].[NEUR_2_2] + 0.706037656011 * [HL_2].[NEUR_2_3] + -0.302809914197 * [HL_2].[NEUR_2_4] + 0.229492360544 * [HL_2].[NEUR_2_5] + 0.70507411557 * [HL_2].[NEUR_2_6] + -0.402241345771 * [HL_2].[NEUR_2_7] + -0.579082113534 * [HL_2].[NEUR_2_8] + 0.11581735145 * [HL_2].[NEUR_2_9] + 0.108815254289 * [HL_2].[NEUR_2_10] + 0.260573454063 * [HL_2].[NEUR_2_11] + -0.492858759092 * [HL_2].[NEUR_2_12] + 0.107317763699 AS [NEUR_3_3], 0.683561167232 * [HL_2].[NEUR_2_1] + -0.574400038392 * [HL_2].[NEUR_2_2] + 0.0392025385442 * [HL_2].[NEUR_2_3] + -0.306311533072 * [HL_2].[NEUR_2_4] + -0.583547788019 * [HL_2].[NEUR_2_5] + 0.740925053408 * [HL_2].[NEUR_2_6] + -0.40035129825 * [HL_2].[NEUR_2_7] + -0.399297970159 * [HL_2].[NEUR_2_8] + -0.651097125234 * [HL_2].[NEUR_2_9] + -0.165367077002 * [HL_2].[NEUR_2_10] + 0.509498383208 * [HL_2].[NEUR_2_11] + -0.0623753483774 * [HL_2].[NEUR_2_12] + 0.389323797436 AS [NEUR_3_4] 
FROM [HL_2]), 
[OL] AS 
(SELECT [OL_BA].[KEY] AS [KEY], [OL_BA].[NEUR_3_1] AS [NEUR_3_1], [OL_BA].[NEUR_3_2] AS [NEUR_3_2], [OL_BA].[NEUR_3_3] AS [NEUR_3_3], [OL_BA].[NEUR_3_4] AS [NEUR_3_4] 
FROM [OL_BA]), 
orig_cte AS 
(SELECT [OL].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], [OL].[NEUR_3_1] AS [Proba_0], [OL].[NEUR_3_2] AS [Proba_1], [OL].[NEUR_3_3] AS [Proba_2], [OL].[NEUR_3_4] AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [OL]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Proba] AS [Decision] 
FROM arg_max_cte