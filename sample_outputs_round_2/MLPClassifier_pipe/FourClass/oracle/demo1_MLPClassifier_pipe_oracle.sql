-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0884128966651 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0687859543606 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.0460376607245 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0970120984835 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0234184405218 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.00925498898395 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.598357328215 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.171095811587 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.170421975124 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0979272439661 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.0248171257692 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.0763848917778 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.107621238642 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.0193160194791 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.744498970923 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.038305456139 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.749216978945 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0780889426308 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.260846290848 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.000841182884053 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.0884128966651 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.0687859543606 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.0460376607245 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.0970120984835 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.0234184405218 AS impute_6, "ADS_imp_1_OUT".impute_7 - -0.00925498898395 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.598357328215 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.171095811587 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.170421975124 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.0979272439661 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.0248171257692 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.0763848917778 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.107621238642 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.0193160194791 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.744498970923 AS impute_16, "ADS_imp_1_OUT".impute_17 - -0.038305456139 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.749216978945 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.0780889426308 AS impute_19, "ADS_imp_1_OUT".impute_20 - -0.260846290848 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.000841182884053 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0594927812317 + "CenteredDataForPCA".impute_3 * 0.0132923812288 + "CenteredDataForPCA".impute_4 * -0.0298907441408 + "CenteredDataForPCA".impute_5 * 0.0219675372746 + "CenteredDataForPCA".impute_6 * -0.0841207378137 + "CenteredDataForPCA".impute_7 * 0.417833103563 + "CenteredDataForPCA".impute_8 * 0.528250534674 + "CenteredDataForPCA".impute_9 * 0.0428345992974 + "CenteredDataForPCA".impute_10 * 0.0225811990361 + "CenteredDataForPCA".impute_11 * -0.0822485265617 + "CenteredDataForPCA".impute_12 * 0.012999274412 + "CenteredDataForPCA".impute_13 * -0.029245557874 + "CenteredDataForPCA".impute_14 * 0.0180928578162 + "CenteredDataForPCA".impute_15 * -0.00672825255489 + "CenteredDataForPCA".impute_16 * 0.503289629989 + "CenteredDataForPCA".impute_17 * -0.0432086604314 + "CenteredDataForPCA".impute_18 * 0.512802581531 + "CenteredDataForPCA".impute_19 * 0.0723638078263 + "CenteredDataForPCA".impute_20 * -0.0146232008323 + "CenteredDataForPCA".impute_21 * -0.010379759608 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.0427231044168 + "CenteredDataForPCA".impute_3 * -0.0621508544997 + "CenteredDataForPCA".impute_4 * 0.0526443776123 + "CenteredDataForPCA".impute_5 * 0.00488006691799 + "CenteredDataForPCA".impute_6 * 0.820898405993 + "CenteredDataForPCA".impute_7 * -0.131216683805 + "CenteredDataForPCA".impute_8 * 0.452343582112 + "CenteredDataForPCA".impute_9 * 0.000901208668064 + "CenteredDataForPCA".impute_10 * 0.0853653156883 + "CenteredDataForPCA".impute_11 * 0.116553195883 + "CenteredDataForPCA".impute_12 * -0.0786691970804 + "CenteredDataForPCA".impute_13 * -0.0384994810584 + "CenteredDataForPCA".impute_14 * -0.0591321280646 + "CenteredDataForPCA".impute_15 * -0.0340376422868 + "CenteredDataForPCA".impute_16 * 0.0281166583051 + "CenteredDataForPCA".impute_17 * 0.0236761397542 + "CenteredDataForPCA".impute_18 * -0.235282447709 + "CenteredDataForPCA".impute_19 * 0.0704774186862 + "CenteredDataForPCA".impute_20 * -0.024266135443 + "CenteredDataForPCA".impute_21 * -0.0186082657219 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.032955311272 + "CenteredDataForPCA".impute_3 * 0.134299192438 + "CenteredDataForPCA".impute_4 * -0.0541015054464 + "CenteredDataForPCA".impute_5 * -0.0284395468913 + "CenteredDataForPCA".impute_6 * -0.0133276604313 + "CenteredDataForPCA".impute_7 * 0.271155311064 + "CenteredDataForPCA".impute_8 * 0.0391348527644 + "CenteredDataForPCA".impute_9 * 0.0159397295578 + "CenteredDataForPCA".impute_10 * -0.0235536705387 + "CenteredDataForPCA".impute_11 * -0.0288998878226 + "CenteredDataForPCA".impute_12 * -0.115281302862 + "CenteredDataForPCA".impute_13 * -0.239577513948 + "CenteredDataForPCA".impute_14 * 0.230093250013 + "CenteredDataForPCA".impute_15 * -0.0245200838917 + "CenteredDataForPCA".impute_16 * -0.221586354157 + "CenteredDataForPCA".impute_17 * -0.155746909673 + "CenteredDataForPCA".impute_18 * -0.121863639381 + "CenteredDataForPCA".impute_19 * 0.047130507873 + "CenteredDataForPCA".impute_20 * -0.827049877809 + "CenteredDataForPCA".impute_21 * 0.0398876877427 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.0705250270537 + "CenteredDataForPCA".impute_3 * 0.106546174114 + "CenteredDataForPCA".impute_4 * -0.0260059608458 + "CenteredDataForPCA".impute_5 * 0.119321631055 + "CenteredDataForPCA".impute_6 * -0.00853349069051 + "CenteredDataForPCA".impute_7 * -0.615878909519 + "CenteredDataForPCA".impute_8 * -0.0161522319803 + "CenteredDataForPCA".impute_9 * -0.2701510705 + "CenteredDataForPCA".impute_10 * -0.168299038316 + "CenteredDataForPCA".impute_11 * 0.266822622474 + "CenteredDataForPCA".impute_12 * -0.216151204057 + "CenteredDataForPCA".impute_13 * 0.236729620288 + "CenteredDataForPCA".impute_14 * 0.0740252504451 + "CenteredDataForPCA".impute_15 * 0.0322949855157 + "CenteredDataForPCA".impute_16 * 0.197198521537 + "CenteredDataForPCA".impute_17 * -0.127211063592 + "CenteredDataForPCA".impute_18 * 0.372888617815 + "CenteredDataForPCA".impute_19 * 0.00224880350746 + "CenteredDataForPCA".impute_20 * -0.304031009306 + "CenteredDataForPCA".impute_21 * -0.144147292163 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.200926568185 + "CenteredDataForPCA".impute_3 * -0.669147285821 + "CenteredDataForPCA".impute_4 * 0.29343555306 + "CenteredDataForPCA".impute_5 * 0.299093611573 + "CenteredDataForPCA".impute_6 * -0.063476091868 + "CenteredDataForPCA".impute_7 * 0.0108770204254 + "CenteredDataForPCA".impute_8 * -0.0217140336193 + "CenteredDataForPCA".impute_9 * 0.0948606028034 + "CenteredDataForPCA".impute_10 * 0.0846982799637 + "CenteredDataForPCA".impute_11 * -0.0618408529044 + "CenteredDataForPCA".impute_12 * 0.00525698075384 + "CenteredDataForPCA".impute_13 * 0.196990355893 + "CenteredDataForPCA".impute_14 * -0.302812952151 + "CenteredDataForPCA".impute_15 * -0.334096387485 + "CenteredDataForPCA".impute_16 * -0.0345141314073 + "CenteredDataForPCA".impute_17 * -0.0373147216944 + "CenteredDataForPCA".impute_18 * 0.0302565334932 + "CenteredDataForPCA".impute_19 * -0.0608641962753 + "CenteredDataForPCA".impute_20 * -0.247033584496 + "CenteredDataForPCA".impute_21 * 0.0362675469698 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.0143777648564 + "CenteredDataForPCA".impute_3 * -0.0428287985285 + "CenteredDataForPCA".impute_4 * -0.218265101537 + "CenteredDataForPCA".impute_5 * 0.290107663575 + "CenteredDataForPCA".impute_6 * -0.0610747320072 + "CenteredDataForPCA".impute_7 * 0.318750525642 + "CenteredDataForPCA".impute_8 * -0.000174800791546 + "CenteredDataForPCA".impute_9 * -0.207758097573 + "CenteredDataForPCA".impute_10 * -0.428578380902 + "CenteredDataForPCA".impute_11 * 0.384256591101 + "CenteredDataForPCA".impute_12 * -0.32481770078 + "CenteredDataForPCA".impute_13 * -0.169174114741 + "CenteredDataForPCA".impute_14 * -0.169511564196 + "CenteredDataForPCA".impute_15 * -0.194157736325 + "CenteredDataForPCA".impute_16 * -0.0688350572538 + "CenteredDataForPCA".impute_17 * 0.165828733348 + "CenteredDataForPCA".impute_18 * -0.132050515349 + "CenteredDataForPCA".impute_19 * 0.113395828584 + "CenteredDataForPCA".impute_20 * 0.148853882857 + "CenteredDataForPCA".impute_21 * -0.317931040706 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.0573899172928 + "CenteredDataForPCA".impute_3 * 0.0627877534875 + "CenteredDataForPCA".impute_4 * 0.504086473144 + "CenteredDataForPCA".impute_5 * 0.114690027809 + "CenteredDataForPCA".impute_6 * -0.0202441045815 + "CenteredDataForPCA".impute_7 * 0.297220586685 + "CenteredDataForPCA".impute_8 * 0.0259763448831 + "CenteredDataForPCA".impute_9 * -0.37552317359 + "CenteredDataForPCA".impute_10 * 0.159561114067 + "CenteredDataForPCA".impute_11 * 0.129969899965 + "CenteredDataForPCA".impute_12 * -0.155254875112 + "CenteredDataForPCA".impute_13 * 0.20517523752 + "CenteredDataForPCA".impute_14 * 0.118411251733 + "CenteredDataForPCA".impute_15 * 0.284540378641 + "CenteredDataForPCA".impute_16 * -0.0582522378447 + "CenteredDataForPCA".impute_17 * -0.435082277577 + "CenteredDataForPCA".impute_18 * -0.12968192318 + "CenteredDataForPCA".impute_19 * -0.217817377291 + "CenteredDataForPCA".impute_20 * 0.138641830332 + "CenteredDataForPCA".impute_21 * -0.123912007445 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.110650985418 + "CenteredDataForPCA".impute_3 * 0.097957522604 + "CenteredDataForPCA".impute_4 * 0.317218571002 + "CenteredDataForPCA".impute_5 * 0.208537974116 + "CenteredDataForPCA".impute_6 * -0.0677505384921 + "CenteredDataForPCA".impute_7 * -0.111306535198 + "CenteredDataForPCA".impute_8 * -0.0754622617278 + "CenteredDataForPCA".impute_9 * 0.0828028709739 + "CenteredDataForPCA".impute_10 * 0.0290371145 + "CenteredDataForPCA".impute_11 * 0.00282339263492 + "CenteredDataForPCA".impute_12 * -0.00348022365593 + "CenteredDataForPCA".impute_13 * -0.303930574906 + "CenteredDataForPCA".impute_14 * -0.309091017337 + "CenteredDataForPCA".impute_15 * 0.243783916579 + "CenteredDataForPCA".impute_16 * 0.00653173812706 + "CenteredDataForPCA".impute_17 * -0.156005231492 + "CenteredDataForPCA".impute_18 * 0.047439642221 + "CenteredDataForPCA".impute_19 * 0.720149476906 + "CenteredDataForPCA".impute_20 * 0.00731889892501 + "CenteredDataForPCA".impute_21 * 0.104929921275 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.267166869073 + "CenteredDataForPCA".impute_3 * 0.219047135468 + "CenteredDataForPCA".impute_4 * 0.407845682635 + "CenteredDataForPCA".impute_5 * 0.0491048582847 + "CenteredDataForPCA".impute_6 * -0.0636996089369 + "CenteredDataForPCA".impute_7 * 0.0251932659235 + "CenteredDataForPCA".impute_8 * 0.00696904792864 + "CenteredDataForPCA".impute_9 * 0.441184071893 + "CenteredDataForPCA".impute_10 * -0.0538577726547 + "CenteredDataForPCA".impute_11 * 0.535609476225 + "CenteredDataForPCA".impute_12 * -0.0111831902564 + "CenteredDataForPCA".impute_13 * 0.02693208891 + "CenteredDataForPCA".impute_14 * 0.140232177087 + "CenteredDataForPCA".impute_15 * -0.233143163136 + "CenteredDataForPCA".impute_16 * 0.0375873075264 + "CenteredDataForPCA".impute_17 * 0.211247993783 + "CenteredDataForPCA".impute_18 * 0.0629250220332 + "CenteredDataForPCA".impute_19 * -0.163610301218 + "CenteredDataForPCA".impute_20 * -0.0184427200635 + "CenteredDataForPCA".impute_21 * 0.265989889661 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.341680048553 + "CenteredDataForPCA".impute_3 * 0.355057818005 + "CenteredDataForPCA".impute_4 * 0.0451489428194 + "CenteredDataForPCA".impute_5 * 0.289416213036 + "CenteredDataForPCA".impute_6 * -0.0032554403993 + "CenteredDataForPCA".impute_7 * -0.0421461043335 + "CenteredDataForPCA".impute_8 * -0.0232053637935 + "CenteredDataForPCA".impute_9 * -0.0791591160468 + "CenteredDataForPCA".impute_10 * 0.312480732618 + "CenteredDataForPCA".impute_11 * -0.346445355749 + "CenteredDataForPCA".impute_12 * 0.00153633376145 + "CenteredDataForPCA".impute_13 * 0.0877224784422 + "CenteredDataForPCA".impute_14 * 0.0509488444929 + "CenteredDataForPCA".impute_15 * -0.552151267154 + "CenteredDataForPCA".impute_16 * -0.0056390792836 + "CenteredDataForPCA".impute_17 * 0.026920251894 + "CenteredDataForPCA".impute_18 * 0.000330033584212 + "CenteredDataForPCA".impute_19 * 0.0865368213184 + "CenteredDataForPCA".impute_20 * 0.00737350584619 + "CenteredDataForPCA".impute_21 * -0.348804216278 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.267002330017 + "CenteredDataForPCA".impute_3 * -0.214757578251 + "CenteredDataForPCA".impute_4 * -0.0916742027612 + "CenteredDataForPCA".impute_5 * 0.25861506814 + "CenteredDataForPCA".impute_6 * -0.0520833334074 + "CenteredDataForPCA".impute_7 * -0.0689098799816 + "CenteredDataForPCA".impute_8 * -0.0106996045186 + "CenteredDataForPCA".impute_9 * 0.108133922328 + "CenteredDataForPCA".impute_10 * 0.369092494745 + "CenteredDataForPCA".impute_11 * 0.153842825921 + "CenteredDataForPCA".impute_12 * 0.12419007476 + "CenteredDataForPCA".impute_13 * -0.302367566469 + "CenteredDataForPCA".impute_14 * -0.0111958576935 + "CenteredDataForPCA".impute_15 * 0.435906312185 + "CenteredDataForPCA".impute_16 * 0.027032888389 + "CenteredDataForPCA".impute_17 * 0.275255226225 + "CenteredDataForPCA".impute_18 * 0.0846172010967 + "CenteredDataForPCA".impute_19 * -0.256201860998 + "CenteredDataForPCA".impute_20 * -0.135872063565 + "CenteredDataForPCA".impute_21 * -0.404217256016 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.0539059995394 + "CenteredDataForPCA".impute_3 * 0.00229647168397 + "CenteredDataForPCA".impute_4 * 0.12599301217 + "CenteredDataForPCA".impute_5 * 0.158083059501 + "CenteredDataForPCA".impute_6 * 0.0676385367763 + "CenteredDataForPCA".impute_7 * -0.19209911805 + "CenteredDataForPCA".impute_8 * 0.00711039287711 + "CenteredDataForPCA".impute_9 * 0.14816375027 + "CenteredDataForPCA".impute_10 * -0.396801682464 + "CenteredDataForPCA".impute_11 * -0.27214100616 + "CenteredDataForPCA".impute_12 * -0.00603177915456 + "CenteredDataForPCA".impute_13 * -0.546109174886 + "CenteredDataForPCA".impute_14 * -0.0131388609056 + "CenteredDataForPCA".impute_15 * -0.0970341104686 + "CenteredDataForPCA".impute_16 * 0.06966256053 + "CenteredDataForPCA".impute_17 * -0.387610508939 + "CenteredDataForPCA".impute_18 * 0.0586996968666 + "CenteredDataForPCA".impute_19 * -0.423520334095 + "CenteredDataForPCA".impute_20 * 0.123643426899 + "CenteredDataForPCA".impute_21 * -0.0132102788235 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.517288196156 + "CenteredDataForPCA".impute_3 * -0.00938713066183 + "CenteredDataForPCA".impute_4 * 0.161522097848 + "CenteredDataForPCA".impute_5 * -0.324124483229 + "CenteredDataForPCA".impute_6 * -0.0347164947713 + "CenteredDataForPCA".impute_7 * -0.0687609891601 + "CenteredDataForPCA".impute_8 * -0.0567462171189 + "CenteredDataForPCA".impute_9 * 0.185410833478 + "CenteredDataForPCA".impute_10 * 0.241128828743 + "CenteredDataForPCA".impute_11 * 0.241709597515 + "CenteredDataForPCA".impute_12 * 0.0590529474857 + "CenteredDataForPCA".impute_13 * -0.257775535714 + "CenteredDataForPCA".impute_14 * 0.202226110695 + "CenteredDataForPCA".impute_15 * -0.225795259221 + "CenteredDataForPCA".impute_16 * 0.0097231680123 + "CenteredDataForPCA".impute_17 * -0.152720092332 + "CenteredDataForPCA".impute_18 * 0.0105229790746 + "CenteredDataForPCA".impute_19 * 0.13978083021 + "CenteredDataForPCA".impute_20 * 0.122541652591 + "CenteredDataForPCA".impute_21 * -0.470301245449 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.0173730525597 + "CenteredDataForPCA".impute_3 * 0.036962336216 + "CenteredDataForPCA".impute_4 * 0.476091279351 + "CenteredDataForPCA".impute_5 * -0.237385590079 + "CenteredDataForPCA".impute_6 * 0.0392423729393 + "CenteredDataForPCA".impute_7 * 0.0216404268354 + "CenteredDataForPCA".impute_8 * 0.0465428051389 + "CenteredDataForPCA".impute_9 * -0.101070979163 + "CenteredDataForPCA".impute_10 * -0.461466435106 + "CenteredDataForPCA".impute_11 * -0.245678452643 + "CenteredDataForPCA".impute_12 * 0.26199581219 + "CenteredDataForPCA".impute_13 * 0.0970952483354 + "CenteredDataForPCA".impute_14 * -0.0248507825767 + "CenteredDataForPCA".impute_15 * 0.119756398565 + "CenteredDataForPCA".impute_16 * -0.0109433099673 + "CenteredDataForPCA".impute_17 * 0.420330423917 + "CenteredDataForPCA".impute_18 * 0.00047113890787 + "CenteredDataForPCA".impute_19 * 0.0311964903673 + "CenteredDataForPCA".impute_20 * -0.156397444694 + "CenteredDataForPCA".impute_21 * -0.363811274683 AS anoova_15, "CenteredDataForPCA".impute_2 * 0.546014887438 + "CenteredDataForPCA".impute_3 * 0.266881011725 + "CenteredDataForPCA".impute_4 * 0.160580078867 + "CenteredDataForPCA".impute_5 * 0.35751599535 + "CenteredDataForPCA".impute_6 * 0.0279454689261 + "CenteredDataForPCA".impute_7 * -0.0349656688452 + "CenteredDataForPCA".impute_8 * -0.00830386645938 + "CenteredDataForPCA".impute_9 * 0.0286043651266 + "CenteredDataForPCA".impute_10 * 0.130696264248 + "CenteredDataForPCA".impute_11 * -0.243394770431 + "CenteredDataForPCA".impute_12 * -0.369825565182 + "CenteredDataForPCA".impute_13 * -0.084936699727 + "CenteredDataForPCA".impute_14 * 0.0899643663953 + "CenteredDataForPCA".impute_15 * 0.14735473777 + "CenteredDataForPCA".impute_16 * -0.00272659921426 + "CenteredDataForPCA".impute_17 * 0.41994934728 + "CenteredDataForPCA".impute_18 * -0.0183254497805 + "CenteredDataForPCA".impute_19 * -0.120239713637 + "CenteredDataForPCA".impute_20 * 0.0579187873792 + "CenteredDataForPCA".impute_21 * 0.171814719202 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.130295919409 + "CenteredDataForPCA".impute_3 * -0.209018313059 + "CenteredDataForPCA".impute_4 * 0.168344167496 + "CenteredDataForPCA".impute_5 * -0.23021125008 + "CenteredDataForPCA".impute_6 * -0.0603881139739 + "CenteredDataForPCA".impute_7 * -0.0731858984353 + "CenteredDataForPCA".impute_8 * -0.0148893940391 + "CenteredDataForPCA".impute_9 * -0.612646888305 + "CenteredDataForPCA".impute_10 * 0.177832757603 + "CenteredDataForPCA".impute_11 * 0.051610110416 + "CenteredDataForPCA".impute_12 * -0.0388102363943 + "CenteredDataForPCA".impute_13 * -0.442381449234 + "CenteredDataForPCA".impute_14 * 0.12679422588 + "CenteredDataForPCA".impute_15 * -0.23584863869 + "CenteredDataForPCA".impute_16 * 0.0609664995443 + "CenteredDataForPCA".impute_17 * 0.255988082715 + "CenteredDataForPCA".impute_18 * 0.0941064685994 + "CenteredDataForPCA".impute_19 * -0.00281394976887 + "CenteredDataForPCA".impute_20 * 0.027206794455 + "CenteredDataForPCA".impute_21 * 0.302305371516 AS anoova_17, "CenteredDataForPCA".impute_2 * 0.143539176413 + "CenteredDataForPCA".impute_3 * -0.0929021811893 + "CenteredDataForPCA".impute_4 * -0.0552846326009 + "CenteredDataForPCA".impute_5 * 0.479720207267 + "CenteredDataForPCA".impute_6 * 0.0662218307318 + "CenteredDataForPCA".impute_7 * 0.00239495351763 + "CenteredDataForPCA".impute_8 * 0.014559291382 + "CenteredDataForPCA".impute_9 * -0.128588279581 + "CenteredDataForPCA".impute_10 * -0.147606731255 + "CenteredDataForPCA".impute_11 * 0.0897361272133 + "CenteredDataForPCA".impute_12 * 0.577256805905 + "CenteredDataForPCA".impute_13 * 0.0127065276097 + "CenteredDataForPCA".impute_14 * 0.548213933055 + "CenteredDataForPCA".impute_15 * -0.00949449953802 + "CenteredDataForPCA".impute_16 * -0.0144999181935 + "CenteredDataForPCA".impute_17 * -0.0209856723655 + "CenteredDataForPCA".impute_18 * -0.0541705348569 + "CenteredDataForPCA".impute_19 * 0.178106550096 + "CenteredDataForPCA".impute_20 * 0.0765294031475 + "CenteredDataForPCA".impute_21 * 0.106865304977 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.257951336091 + "CenteredDataForPCA".impute_3 * -0.397830088059 + "CenteredDataForPCA".impute_4 * 0.040836571941 + "CenteredDataForPCA".impute_5 * -0.0615288323222 + "CenteredDataForPCA".impute_6 * -0.0143726070461 + "CenteredDataForPCA".impute_7 * -0.0416397771973 + "CenteredDataForPCA".impute_8 * -0.0286123352682 + "CenteredDataForPCA".impute_9 * 0.230338664888 + "CenteredDataForPCA".impute_10 * -0.101752318963 + "CenteredDataForPCA".impute_11 * -0.214183547239 + "CenteredDataForPCA".impute_12 * -0.494734323977 + "CenteredDataForPCA".impute_13 * 0.0727580156898 + "CenteredDataForPCA".impute_14 * 0.564787036752 + "CenteredDataForPCA".impute_15 * 0.0776569024753 + "CenteredDataForPCA".impute_16 * 0.0180628889816 + "CenteredDataForPCA".impute_17 * 0.0303367036868 + "CenteredDataForPCA".impute_18 * 0.00746803565157 + "CenteredDataForPCA".impute_19 * 0.242862423595 + "CenteredDataForPCA".impute_20 * 0.125602378892 + "CenteredDataForPCA".impute_21 * -0.0810217867008 AS anoova_19, "CenteredDataForPCA".impute_2 * 6.43626317311e-17 + "CenteredDataForPCA".impute_3 * 1.47899100142e-16 + "CenteredDataForPCA".impute_4 * 3.00005979197e-16 + "CenteredDataForPCA".impute_5 * -3.93888578056e-16 + "CenteredDataForPCA".impute_6 * 0.420414405582 + "CenteredDataForPCA".impute_7 * 0.26289931996 + "CenteredDataForPCA".impute_8 * -0.691620549047 + "CenteredDataForPCA".impute_9 * 1.42079321389e-16 + "CenteredDataForPCA".impute_10 * 2.14902665147e-16 + "CenteredDataForPCA".impute_11 * 2.5339852961e-16 + "CenteredDataForPCA".impute_12 * -5.2127561887e-17 + "CenteredDataForPCA".impute_13 * 9.98617214737e-17 + "CenteredDataForPCA".impute_14 * -1.14528762769e-16 + "CenteredDataForPCA".impute_15 * 1.26266493095e-16 + "CenteredDataForPCA".impute_16 * 0.511897299515 + "CenteredDataForPCA".impute_17 * 1.83430649938e-16 + "CenteredDataForPCA".impute_18 * 0.0619684063682 + "CenteredDataForPCA".impute_19 * 6.41453184486e-17 + "CenteredDataForPCA".impute_20 * -0.0995879643424 + "CenteredDataForPCA".impute_21 * -1.8666766716e-17 AS anoova_20, "CenteredDataForPCA".impute_2 * -7.90648124171e-17 + "CenteredDataForPCA".impute_3 * 1.61129913825e-16 + "CenteredDataForPCA".impute_4 * 1.3149810952e-16 + "CenteredDataForPCA".impute_5 * 1.59936151882e-16 + "CenteredDataForPCA".impute_6 * -0.325838662982 + "CenteredDataForPCA".impute_7 * -0.161937531984 + "CenteredDataForPCA".impute_8 * 0.148002159949 + "CenteredDataForPCA".impute_9 * -3.92151043456e-17 + "CenteredDataForPCA".impute_10 * -2.42033261771e-16 + "CenteredDataForPCA".impute_11 * -6.41504117411e-17 + "CenteredDataForPCA".impute_12 * 6.4678726645e-17 + "CenteredDataForPCA".impute_13 * 1.03889041125e-16 + "CenteredDataForPCA".impute_14 * 1.46118791353e-16 + "CenteredDataForPCA".impute_15 * -1.66942658741e-17 + "CenteredDataForPCA".impute_16 * 0.612383454923 + "CenteredDataForPCA".impute_17 * -8.22490528432e-17 + "CenteredDataForPCA".impute_18 * -0.677982151794 + "CenteredDataForPCA".impute_19 * -1.7181629526e-16 + "CenteredDataForPCA".impute_20 * -0.105011752089 + "CenteredDataForPCA".impute_21 * -2.2614525144e-16 AS anoova_21 
FROM "CenteredDataForPCA"), 
"IL" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", "ADS_ano_2_OUT".anoova_2 AS anoova_2, "ADS_ano_2_OUT".anoova_3 AS anoova_3, "ADS_ano_2_OUT".anoova_4 AS anoova_4, "ADS_ano_2_OUT".anoova_5 AS anoova_5, "ADS_ano_2_OUT".anoova_6 AS anoova_6, "ADS_ano_2_OUT".anoova_7 AS anoova_7, "ADS_ano_2_OUT".anoova_8 AS anoova_8, "ADS_ano_2_OUT".anoova_9 AS anoova_9, "ADS_ano_2_OUT".anoova_10 AS anoova_10, "ADS_ano_2_OUT".anoova_11 AS anoova_11, "ADS_ano_2_OUT".anoova_12 AS anoova_12, "ADS_ano_2_OUT".anoova_13 AS anoova_13, "ADS_ano_2_OUT".anoova_14 AS anoova_14, "ADS_ano_2_OUT".anoova_15 AS anoova_15, "ADS_ano_2_OUT".anoova_16 AS anoova_16, "ADS_ano_2_OUT".anoova_17 AS anoova_17, "ADS_ano_2_OUT".anoova_18 AS anoova_18, "ADS_ano_2_OUT".anoova_19 AS anoova_19, "ADS_ano_2_OUT".anoova_20 AS anoova_20, "ADS_ano_2_OUT".anoova_21 AS anoova_21 
FROM "ADS_ano_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.170729040523 * "IL".anoova_2 + 0.305222644956 * "IL".anoova_3 + -0.666916542115 * "IL".anoova_4 + -0.279974439546 * "IL".anoova_5 + -0.102579847266 * "IL".anoova_6 + -0.132122548239 * "IL".anoova_7 + 0.0277426042779 * "IL".anoova_8 + -0.0579592890131 * "IL".anoova_9 + -0.392959096172 * "IL".anoova_10 + 0.250073288512 * "IL".anoova_11 + -0.154238494445 * "IL".anoova_12 + 0.263565889375 * "IL".anoova_13 + 0.0768749123102 * "IL".anoova_14 + -0.164207959855 * "IL".anoova_15 + 0.373684912102 * "IL".anoova_16 + 0.373680113108 * "IL".anoova_17 + 0.260750225839 * "IL".anoova_18 + 0.102430252622 * "IL".anoova_19 + 0.136246965829 * "IL".anoova_20 + -0.160924321201 * "IL".anoova_21 + 0.392361418115 AS "NEUR_1_1", 0.0294490322321 * "IL".anoova_2 + -0.0416863548722 * "IL".anoova_3 + 0.256757027031 * "IL".anoova_4 + 0.238276539997 * "IL".anoova_5 + -0.207273462623 * "IL".anoova_6 + 0.0551979938748 * "IL".anoova_7 + -0.0130670801298 * "IL".anoova_8 + -0.438632772594 * "IL".anoova_9 + 0.0914688498287 * "IL".anoova_10 + -0.0336730856056 * "IL".anoova_11 + -0.127607719318 * "IL".anoova_12 + 0.239991416585 * "IL".anoova_13 + -0.306370939355 * "IL".anoova_14 + -0.0907739709228 * "IL".anoova_15 + -0.0228012848098 * "IL".anoova_16 + -0.154558581627 * "IL".anoova_17 + -0.107188774211 * "IL".anoova_18 + 0.383513435497 * "IL".anoova_19 + 0.0625982105588 * "IL".anoova_20 + 0.0159254541578 * "IL".anoova_21 + -0.0731702528432 AS "NEUR_1_2", 0.19197395315 * "IL".anoova_2 + 0.120872685536 * "IL".anoova_3 + 0.122822852863 * "IL".anoova_4 + -0.480145815144 * "IL".anoova_5 + -0.295857447535 * "IL".anoova_6 + 0.0392513960446 * "IL".anoova_7 + -0.0894308435468 * "IL".anoova_8 + 0.195541819623 * "IL".anoova_9 + 0.479188281214 * "IL".anoova_10 + 0.0132101850379 * "IL".anoova_11 + -0.59559046311 * "IL".anoova_12 + -0.288457490823 * "IL".anoova_13 + 0.48376265994 * "IL".anoova_14 + 0.251379686955 * "IL".anoova_15 + 0.450634392259 * "IL".anoova_16 + 0.550277542471 * "IL".anoova_17 + 0.271880236296 * "IL".anoova_18 + 0.341072757207 * "IL".anoova_19 + -0.211756355935 * "IL".anoova_20 + -0.192263245548 * "IL".anoova_21 + 0.17489676332 AS "NEUR_1_3", -0.0846836264269 * "IL".anoova_2 + 0.00546059986241 * "IL".anoova_3 + 0.478054809631 * "IL".anoova_4 + 0.240349049225 * "IL".anoova_5 + 0.0939638662574 * "IL".anoova_6 + -0.352627560711 * "IL".anoova_7 + -0.232305895305 * "IL".anoova_8 + -0.0943437120097 * "IL".anoova_9 + -0.19745790806 * "IL".anoova_10 + -0.607343869398 * "IL".anoova_11 + 0.389875205039 * "IL".anoova_12 + 0.097260406294 * "IL".anoova_13 + -0.321023138379 * "IL".anoova_14 + -0.0972950141322 * "IL".anoova_15 + -0.252060358419 * "IL".anoova_16 + 0.185650497031 * "IL".anoova_17 + -0.0898387945929 * "IL".anoova_18 + -0.0180536593535 * "IL".anoova_19 + 0.228221402985 * "IL".anoova_20 + 0.16934925961 * "IL".anoova_21 + 0.359637566397 AS "NEUR_1_4", -0.0607376856125 * "IL".anoova_2 + -0.103514252957 * "IL".anoova_3 + 0.319674805727 * "IL".anoova_4 + 0.12084520457 * "IL".anoova_5 + -0.00599222629359 * "IL".anoova_6 + 0.355324971942 * "IL".anoova_7 + 0.518061077126 * "IL".anoova_8 + -0.279964293697 * "IL".anoova_9 + 0.427608137516 * "IL".anoova_10 + -0.131844364342 * "IL".anoova_11 + -0.139281975042 * "IL".anoova_12 + -0.257806653536 * "IL".anoova_13 + 0.0262082463796 * "IL".anoova_14 + -0.162032692062 * "IL".anoova_15 + 0.387221719348 * "IL".anoova_16 + -0.0119225720841 * "IL".anoova_17 + -0.204367254101 * "IL".anoova_18 + 0.542808273339 * "IL".anoova_19 + 0.0693704591052 * "IL".anoova_20 + 0.13712077358 * "IL".anoova_21 + 0.42314920433 AS "NEUR_1_5", 0.126320488513 * "IL".anoova_2 + 0.633005936081 * "IL".anoova_3 + 0.424735529339 * "IL".anoova_4 + 0.0121363908831 * "IL".anoova_5 + 0.0400195237684 * "IL".anoova_6 + 0.00953213083365 * "IL".anoova_7 + -0.404514227495 * "IL".anoova_8 + -0.356253754654 * "IL".anoova_9 + -0.31172440882 * "IL".anoova_10 + -0.479899658829 * "IL".anoova_11 + -0.141187148973 * "IL".anoova_12 + 0.246165075816 * "IL".anoova_13 + -0.182084102679 * "IL".anoova_14 + 0.566783154609 * "IL".anoova_15 + 0.210851747061 * "IL".anoova_16 + -0.0217954876155 * "IL".anoova_17 + 0.0939256947099 * "IL".anoova_18 + -0.0524851583647 * "IL".anoova_19 + 0.295820530043 * "IL".anoova_20 + 0.00331626229869 * "IL".anoova_21 + 0.484901021227 AS "NEUR_1_6", 0.0373713312151 * "IL".anoova_2 + -0.572121443169 * "IL".anoova_3 + 0.0865548364882 * "IL".anoova_4 + -0.109032270508 * "IL".anoova_5 + 0.496851061755 * "IL".anoova_6 + -0.439919939789 * "IL".anoova_7 + -0.234325356488 * "IL".anoova_8 + 0.0342771788271 * "IL".anoova_9 + 0.436656149763 * "IL".anoova_10 + -0.158444351709 * "IL".anoova_11 + 0.189003961254 * "IL".anoova_12 + -0.336749724902 * "IL".anoova_13 + 0.302395985064 * "IL".anoova_14 + -0.0573139807298 * "IL".anoova_15 + 0.336410245864 * "IL".anoova_16 + -0.5294760281 * "IL".anoova_17 + -0.106707948269 * "IL".anoova_18 + -0.139112610023 * "IL".anoova_19 + -0.171399933627 * "IL".anoova_20 + -0.00847783339354 * "IL".anoova_21 + -0.516560823755 AS "NEUR_1_7", 0.26393141484 * "IL".anoova_2 + -0.405853595666 * "IL".anoova_3 + 0.405382156747 * "IL".anoova_4 + 0.418905844379 * "IL".anoova_5 + 0.0790260559204 * "IL".anoova_6 + -0.182229442557 * "IL".anoova_7 + -0.200641884162 * "IL".anoova_8 + -0.39794741916 * "IL".anoova_9 + 0.0308953515385 * "IL".anoova_10 + -0.405252781859 * "IL".anoova_11 + -0.23351627404 * "IL".anoova_12 + -0.418679607252 * "IL".anoova_13 + 0.617773815137 * "IL".anoova_14 + 0.194423203834 * "IL".anoova_15 + 0.00864050738237 * "IL".anoova_16 + -0.255242780804 * "IL".anoova_17 + -0.0638672872977 * "IL".anoova_18 + 0.469964350122 * "IL".anoova_19 + 0.185669257613 * "IL".anoova_20 + -0.237769705675 * "IL".anoova_21 + -0.0784156050381 AS "NEUR_1_8" 
FROM "IL"), 
"HL_1" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3", CASE WHEN ("HL_BA_1"."NEUR_1_4" >= 0.0) THEN "HL_BA_1"."NEUR_1_4" ELSE 0.0 END AS "NEUR_1_4", CASE WHEN ("HL_BA_1"."NEUR_1_5" >= 0.0) THEN "HL_BA_1"."NEUR_1_5" ELSE 0.0 END AS "NEUR_1_5", CASE WHEN ("HL_BA_1"."NEUR_1_6" >= 0.0) THEN "HL_BA_1"."NEUR_1_6" ELSE 0.0 END AS "NEUR_1_6", CASE WHEN ("HL_BA_1"."NEUR_1_7" >= 0.0) THEN "HL_BA_1"."NEUR_1_7" ELSE 0.0 END AS "NEUR_1_7", CASE WHEN ("HL_BA_1"."NEUR_1_8" >= 0.0) THEN "HL_BA_1"."NEUR_1_8" ELSE 0.0 END AS "NEUR_1_8" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1"."KEY" AS "KEY", 0.35389458049 * "HL_1"."NEUR_1_1" + -0.234109531801 * "HL_1"."NEUR_1_2" + -0.207171697563 * "HL_1"."NEUR_1_3" + -0.274217900578 * "HL_1"."NEUR_1_4" + -0.10380795916 * "HL_1"."NEUR_1_5" + 0.721569929244 * "HL_1"."NEUR_1_6" + 0.211839925159 * "HL_1"."NEUR_1_7" + 0.438823135523 * "HL_1"."NEUR_1_8" + 0.190489418 AS "NEUR_2_1", -0.296939195586 * "HL_1"."NEUR_1_1" + 0.00622421185513 * "HL_1"."NEUR_1_2" + 0.630940144332 * "HL_1"."NEUR_1_3" + -0.590609795348 * "HL_1"."NEUR_1_4" + -0.248728661088 * "HL_1"."NEUR_1_5" + 0.287228660755 * "HL_1"."NEUR_1_6" + -0.529412832814 * "HL_1"."NEUR_1_7" + 0.158765917377 * "HL_1"."NEUR_1_8" + 0.241017842962 AS "NEUR_2_2", 0.128234393388 * "HL_1"."NEUR_1_1" + 0.0554167986147 * "HL_1"."NEUR_1_2" + 0.262282610793 * "HL_1"."NEUR_1_3" + 0.181082579038 * "HL_1"."NEUR_1_4" + 0.127714939494 * "HL_1"."NEUR_1_5" + -0.356627076278 * "HL_1"."NEUR_1_6" + 0.161346740622 * "HL_1"."NEUR_1_7" + 0.535864842607 * "HL_1"."NEUR_1_8" + -0.155686404263 AS "NEUR_2_3", -0.448482818489 * "HL_1"."NEUR_1_1" + -0.0494452482838 * "HL_1"."NEUR_1_2" + -0.018961464187 * "HL_1"."NEUR_1_3" + 0.14364282049 * "HL_1"."NEUR_1_4" + 0.513760140126 * "HL_1"."NEUR_1_5" + -0.152799428807 * "HL_1"."NEUR_1_6" + -0.317785303396 * "HL_1"."NEUR_1_7" + -0.451431454173 * "HL_1"."NEUR_1_8" + 0.264084775881 AS "NEUR_2_4", -0.538989408038 * "HL_1"."NEUR_1_1" + 0.545181166017 * "HL_1"."NEUR_1_2" + -0.21487329998 * "HL_1"."NEUR_1_3" + 0.0624901966319 * "HL_1"."NEUR_1_4" + 0.338094478106 * "HL_1"."NEUR_1_5" + -0.123175513678 * "HL_1"."NEUR_1_6" + 0.428793021802 * "HL_1"."NEUR_1_7" + 0.225888336568 * "HL_1"."NEUR_1_8" + -0.253945682448 AS "NEUR_2_5", -0.624081468326 * "HL_1"."NEUR_1_1" + 0.0442099051665 * "HL_1"."NEUR_1_2" + -0.366299257878 * "HL_1"."NEUR_1_3" + 0.295938545248 * "HL_1"."NEUR_1_4" + 0.319964960023 * "HL_1"."NEUR_1_5" + -0.665346113794 * "HL_1"."NEUR_1_6" + -0.238856715521 * "HL_1"."NEUR_1_7" + 0.0273453144374 * "HL_1"."NEUR_1_8" + -0.127604342683 AS "NEUR_2_6", 0.151963208086 * "HL_1"."NEUR_1_1" + -0.0681214427778 * "HL_1"."NEUR_1_2" + -0.484738499048 * "HL_1"."NEUR_1_3" + 0.722028797206 * "HL_1"."NEUR_1_4" + -0.19825504603 * "HL_1"."NEUR_1_5" + -0.17870020974 * "HL_1"."NEUR_1_6" + -0.0205698528301 * "HL_1"."NEUR_1_7" + 0.338311025079 * "HL_1"."NEUR_1_8" + 0.391089505162 AS "NEUR_2_7", -0.462227618817 * "HL_1"."NEUR_1_1" + 0.290585986798 * "HL_1"."NEUR_1_2" + 0.0478057412262 * "HL_1"."NEUR_1_3" + -0.319967144875 * "HL_1"."NEUR_1_4" + 0.461497892728 * "HL_1"."NEUR_1_5" + -0.0318339599513 * "HL_1"."NEUR_1_6" + -0.154895223139 * "HL_1"."NEUR_1_7" + -0.434785626929 * "HL_1"."NEUR_1_8" + 0.494782180554 AS "NEUR_2_8", -0.0495862930321 * "HL_1"."NEUR_1_1" + 0.180449446117 * "HL_1"."NEUR_1_2" + -0.0750372015927 * "HL_1"."NEUR_1_3" + 0.101608156785 * "HL_1"."NEUR_1_4" + -0.188804595626 * "HL_1"."NEUR_1_5" + -0.204727903195 * "HL_1"."NEUR_1_6" + -0.228841814725 * "HL_1"."NEUR_1_7" + -0.25442707759 * "HL_1"."NEUR_1_8" + -0.217615403654 AS "NEUR_2_9", 0.46010919468 * "HL_1"."NEUR_1_1" + -0.333857575806 * "HL_1"."NEUR_1_2" + 0.155272132388 * "HL_1"."NEUR_1_3" + -0.372869113804 * "HL_1"."NEUR_1_4" + 0.40975998391 * "HL_1"."NEUR_1_5" + -0.142982213682 * "HL_1"."NEUR_1_6" + 0.171544289575 * "HL_1"."NEUR_1_7" + -0.457325768932 * "HL_1"."NEUR_1_8" + 0.551681072506 AS "NEUR_2_10", 0.400616597601 * "HL_1"."NEUR_1_1" + -0.191342587804 * "HL_1"."NEUR_1_2" + -0.320231368936 * "HL_1"."NEUR_1_3" + -0.298359975285 * "HL_1"."NEUR_1_4" + 0.0917268853068 * "HL_1"."NEUR_1_5" + -0.42133936199 * "HL_1"."NEUR_1_6" + -0.15197330591 * "HL_1"."NEUR_1_7" + -0.31507288061 * "HL_1"."NEUR_1_8" + -0.110839589137 AS "NEUR_2_11", -0.691438027056 * "HL_1"."NEUR_1_1" + -0.22701805997 * "HL_1"."NEUR_1_2" + -0.212779485832 * "HL_1"."NEUR_1_3" + 0.298553381282 * "HL_1"."NEUR_1_4" + -0.206514718143 * "HL_1"."NEUR_1_5" + 0.0142023883706 * "HL_1"."NEUR_1_6" + 0.710772643384 * "HL_1"."NEUR_1_7" + 0.618961062243 * "HL_1"."NEUR_1_8" + 0.461291092446 AS "NEUR_2_12" 
FROM "HL_1"), 
"HL_2" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5", CASE WHEN ("HL_BA_2"."NEUR_2_6" >= 0.0) THEN "HL_BA_2"."NEUR_2_6" ELSE 0.0 END AS "NEUR_2_6", CASE WHEN ("HL_BA_2"."NEUR_2_7" >= 0.0) THEN "HL_BA_2"."NEUR_2_7" ELSE 0.0 END AS "NEUR_2_7", CASE WHEN ("HL_BA_2"."NEUR_2_8" >= 0.0) THEN "HL_BA_2"."NEUR_2_8" ELSE 0.0 END AS "NEUR_2_8", CASE WHEN ("HL_BA_2"."NEUR_2_9" >= 0.0) THEN "HL_BA_2"."NEUR_2_9" ELSE 0.0 END AS "NEUR_2_9", CASE WHEN ("HL_BA_2"."NEUR_2_10" >= 0.0) THEN "HL_BA_2"."NEUR_2_10" ELSE 0.0 END AS "NEUR_2_10", CASE WHEN ("HL_BA_2"."NEUR_2_11" >= 0.0) THEN "HL_BA_2"."NEUR_2_11" ELSE 0.0 END AS "NEUR_2_11", CASE WHEN ("HL_BA_2"."NEUR_2_12" >= 0.0) THEN "HL_BA_2"."NEUR_2_12" ELSE 0.0 END AS "NEUR_2_12" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2"."KEY" AS "KEY", 0.335712672622 * "HL_2"."NEUR_2_1" + -0.459429118449 * "HL_2"."NEUR_2_2" + -0.122448905962 * "HL_2"."NEUR_2_3" + 0.181266556364 * "HL_2"."NEUR_2_4" + 0.618349020283 * "HL_2"."NEUR_2_5" + -0.424904036186 * "HL_2"."NEUR_2_6" + 0.380968808807 * "HL_2"."NEUR_2_7" + 0.0446256809579 * "HL_2"."NEUR_2_8" + 0.223030627698 * "HL_2"."NEUR_2_9" + -0.543376384527 * "HL_2"."NEUR_2_10" + -0.344172894719 * "HL_2"."NEUR_2_11" + -0.182971453671 * "HL_2"."NEUR_2_12" + -0.35017823511 AS "NEUR_3_1", 0.599149816097 * "HL_2"."NEUR_2_1" + 0.617658458025 * "HL_2"."NEUR_2_2" + -0.617461830147 * "HL_2"."NEUR_2_3" + -0.0475174099046 * "HL_2"."NEUR_2_4" + -0.620993133102 * "HL_2"."NEUR_2_5" + 0.307038239331 * "HL_2"."NEUR_2_6" + 0.382581121669 * "HL_2"."NEUR_2_7" + -0.519036479247 * "HL_2"."NEUR_2_8" + -0.550560800517 * "HL_2"."NEUR_2_9" + -0.502840938261 * "HL_2"."NEUR_2_10" + -0.0285985368033 * "HL_2"."NEUR_2_11" + -0.476496597054 * "HL_2"."NEUR_2_12" + 0.0041208228637 AS "NEUR_3_2", 0.00234860587735 * "HL_2"."NEUR_2_1" + 0.0652012013233 * "HL_2"."NEUR_2_2" + 0.59469705981 * "HL_2"."NEUR_2_3" + -0.247769451889 * "HL_2"."NEUR_2_4" + -0.131469778217 * "HL_2"."NEUR_2_5" + 0.569784283201 * "HL_2"."NEUR_2_6" + -0.274431552766 * "HL_2"."NEUR_2_7" + -0.530570613515 * "HL_2"."NEUR_2_8" + 0.290994372357 * "HL_2"."NEUR_2_9" + 0.198192076813 * "HL_2"."NEUR_2_10" + 0.272435247484 * "HL_2"."NEUR_2_11" + -0.721172044933 * "HL_2"."NEUR_2_12" + 0.205433760275 AS "NEUR_3_3", 0.624355814368 * "HL_2"."NEUR_2_1" + -0.56368386756 * "HL_2"."NEUR_2_2" + 0.0892098883875 * "HL_2"."NEUR_2_3" + -0.558125336579 * "HL_2"."NEUR_2_4" + -0.263569161968 * "HL_2"."NEUR_2_5" + 0.639476534176 * "HL_2"."NEUR_2_6" + -0.458092329456 * "HL_2"."NEUR_2_7" + -0.661947687533 * "HL_2"."NEUR_2_8" + -0.479788714858 * "HL_2"."NEUR_2_9" + -0.254675227786 * "HL_2"."NEUR_2_10" + 0.504009679395 * "HL_2"."NEUR_2_11" + -0.0943960842854 * "HL_2"."NEUR_2_12" + 0.290850182073 AS "NEUR_3_4" 
FROM "HL_2"), 
"OL" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "OL"."NEUR_3_1" AS "Proba_0", "OL"."NEUR_3_2" AS "Proba_1", "OL"."NEUR_3_3" AS "Proba_2", "OL"."NEUR_3_4" AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OL"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte