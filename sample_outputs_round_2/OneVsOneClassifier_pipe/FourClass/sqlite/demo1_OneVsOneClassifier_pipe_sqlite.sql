-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0411661213421 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.0316048556486 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.00678289010265 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0117314818009 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0379763555866 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.0346157448562 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.203456251779 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0267181564348 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0516770185656 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.395594825737 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.0199409121518 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.0261739969977 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.145362924647 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 0.0853660461072 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.0464936310892 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.032951642062 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.160227362275 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.15995398693 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.0551817528219 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.342481022486 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.0411661213421 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.0316048556486 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.00678289010265 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.0117314818009 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.0379763555866 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.0346157448562 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.203456251779 AS impute_8, "ADS_imp_1_OUT".impute_9 - -0.0267181564348 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0516770185656 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.395594825737 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.0199409121518 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.0261739969977 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.145362924647 AS impute_14, "ADS_imp_1_OUT".impute_15 - 0.0853660461072 AS impute_15, "ADS_imp_1_OUT".impute_16 - 0.0464936310892 AS impute_16, "ADS_imp_1_OUT".impute_17 - -0.032951642062 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.160227362275 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.15995398693 AS impute_19, "ADS_imp_1_OUT".impute_20 - -0.0551817528219 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.342481022486 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0195321884432 + "CenteredDataForPCA".impute_3 * 0.00975487252709 + "CenteredDataForPCA".impute_4 * -0.00638279217021 + "CenteredDataForPCA".impute_5 * 0.0808506217151 + "CenteredDataForPCA".impute_6 * -0.743016137205 + "CenteredDataForPCA".impute_7 * -0.0107637168824 + "CenteredDataForPCA".impute_8 * -0.321256209998 + "CenteredDataForPCA".impute_9 * -0.00827215701447 + "CenteredDataForPCA".impute_10 * 0.0117818291271 + "CenteredDataForPCA".impute_11 * 0.275369804096 + "CenteredDataForPCA".impute_12 * -0.0186691346216 + "CenteredDataForPCA".impute_13 * -0.0041889452351 + "CenteredDataForPCA".impute_14 * -0.00185612762856 + "CenteredDataForPCA".impute_15 * -0.0542958165891 + "CenteredDataForPCA".impute_16 * -0.00750831661115 + "CenteredDataForPCA".impute_17 * 0.312871533111 + "CenteredDataForPCA".impute_18 * -0.270646337225 + "CenteredDataForPCA".impute_19 * -0.0302274262942 + "CenteredDataForPCA".impute_20 * 0.0659221912138 + "CenteredDataForPCA".impute_21 * 0.285909435756 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.0636699568375 + "CenteredDataForPCA".impute_3 * 0.0122807103483 + "CenteredDataForPCA".impute_4 * -0.0779578064753 + "CenteredDataForPCA".impute_5 * -0.0663254808573 + "CenteredDataForPCA".impute_6 * -0.250443872513 + "CenteredDataForPCA".impute_7 * 0.0617930975832 + "CenteredDataForPCA".impute_8 * -0.0207295804784 + "CenteredDataForPCA".impute_9 * -0.0684981430989 + "CenteredDataForPCA".impute_10 * -0.0913815150839 + "CenteredDataForPCA".impute_11 * -0.555835536484 + "CenteredDataForPCA".impute_12 * -0.0333661615978 + "CenteredDataForPCA".impute_13 * -0.052947002811 + "CenteredDataForPCA".impute_14 * 0.122663106796 + "CenteredDataForPCA".impute_15 * -0.0216234990055 + "CenteredDataForPCA".impute_16 * 0.0348162658648 + "CenteredDataForPCA".impute_17 * -0.477357634251 + "CenteredDataForPCA".impute_18 * -0.571716614077 + "CenteredDataForPCA".impute_19 * -0.010484474352 + "CenteredDataForPCA".impute_20 * -0.0442950985435 + "CenteredDataForPCA".impute_21 * -0.137506458346 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.0818200481275 + "CenteredDataForPCA".impute_3 * -0.106339436067 + "CenteredDataForPCA".impute_4 * 0.000693706041665 + "CenteredDataForPCA".impute_5 * 0.113354753313 + "CenteredDataForPCA".impute_6 * 0.146033737048 + "CenteredDataForPCA".impute_7 * 0.0289277460214 + "CenteredDataForPCA".impute_8 * -0.00654623900713 + "CenteredDataForPCA".impute_9 * -0.00868859111677 + "CenteredDataForPCA".impute_10 * 0.192240402452 + "CenteredDataForPCA".impute_11 * 0.274551210171 + "CenteredDataForPCA".impute_12 * 0.020304061843 + "CenteredDataForPCA".impute_13 * 0.117850426392 + "CenteredDataForPCA".impute_14 * -0.0983826753716 + "CenteredDataForPCA".impute_15 * -0.0964588165049 + "CenteredDataForPCA".impute_16 * -0.179593950504 + "CenteredDataForPCA".impute_17 * -0.576634011 + "CenteredDataForPCA".impute_18 * -0.0750787972247 + "CenteredDataForPCA".impute_19 * 0.171070864523 + "CenteredDataForPCA".impute_20 * -0.0371690964787 + "CenteredDataForPCA".impute_21 * 0.632616046074 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.0644499368062 + "CenteredDataForPCA".impute_3 * -0.180122569763 + "CenteredDataForPCA".impute_4 * 0.16758487481 + "CenteredDataForPCA".impute_5 * -0.124505468009 + "CenteredDataForPCA".impute_6 * -0.0156304865305 + "CenteredDataForPCA".impute_7 * -0.0645476693202 + "CenteredDataForPCA".impute_8 * 0.730439693307 + "CenteredDataForPCA".impute_9 * 0.0446767497581 + "CenteredDataForPCA".impute_10 * -0.0293401368395 + "CenteredDataForPCA".impute_11 * -0.0642823456057 + "CenteredDataForPCA".impute_12 * -0.247599567519 + "CenteredDataForPCA".impute_13 * 0.223041021127 + "CenteredDataForPCA".impute_14 * 0.0306428473258 + "CenteredDataForPCA".impute_15 * -0.0303935597894 + "CenteredDataForPCA".impute_16 * -0.0990313955658 + "CenteredDataForPCA".impute_17 * 0.316423148603 + "CenteredDataForPCA".impute_18 * -0.299710104999 + "CenteredDataForPCA".impute_19 * 0.0685900773525 + "CenteredDataForPCA".impute_20 * 0.107936312167 + "CenteredDataForPCA".impute_21 * 0.214117756897 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.0475459453502 + "CenteredDataForPCA".impute_3 * -0.254486724238 + "CenteredDataForPCA".impute_4 * -0.158578452223 + "CenteredDataForPCA".impute_5 * -0.0293019040819 + "CenteredDataForPCA".impute_6 * 0.000579666626958 + "CenteredDataForPCA".impute_7 * 0.209328095863 + "CenteredDataForPCA".impute_8 * 0.0366504817492 + "CenteredDataForPCA".impute_9 * -0.385911944891 + "CenteredDataForPCA".impute_10 * 0.398516577769 + "CenteredDataForPCA".impute_11 * 0.0397776033875 + "CenteredDataForPCA".impute_12 * -0.348424452135 + "CenteredDataForPCA".impute_13 * -0.343781951429 + "CenteredDataForPCA".impute_14 * 0.252952453893 + "CenteredDataForPCA".impute_15 * -0.0784709196127 + "CenteredDataForPCA".impute_16 * 0.226113702934 + "CenteredDataForPCA".impute_17 * 0.104254847252 + "CenteredDataForPCA".impute_18 * 0.038408306169 + "CenteredDataForPCA".impute_19 * 0.254869276863 + "CenteredDataForPCA".impute_20 * -0.338054302591 + "CenteredDataForPCA".impute_21 * -0.00660092447563 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.41513463196 + "CenteredDataForPCA".impute_3 * 0.50168537013 + "CenteredDataForPCA".impute_4 * 0.0407088972593 + "CenteredDataForPCA".impute_5 * -0.064028621037 + "CenteredDataForPCA".impute_6 * -0.0331429325203 + "CenteredDataForPCA".impute_7 * 0.276104979424 + "CenteredDataForPCA".impute_8 * 0.129942182806 + "CenteredDataForPCA".impute_9 * -0.193735720058 + "CenteredDataForPCA".impute_10 * 0.0569695227164 + "CenteredDataForPCA".impute_11 * -0.0368973194968 + "CenteredDataForPCA".impute_12 * 0.305668762485 + "CenteredDataForPCA".impute_13 * 0.0415234232025 + "CenteredDataForPCA".impute_14 * -0.122214914438 + "CenteredDataForPCA".impute_15 * -0.0506803682564 + "CenteredDataForPCA".impute_16 * -0.0181984649821 + "CenteredDataForPCA".impute_17 * 0.0767915826455 + "CenteredDataForPCA".impute_18 * -0.0768836765732 + "CenteredDataForPCA".impute_19 * 0.544357369448 + "CenteredDataForPCA".impute_20 * 0.112129452518 + "CenteredDataForPCA".impute_21 * 0.0126701536051 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.194150556208 + "CenteredDataForPCA".impute_3 * -0.155472001128 + "CenteredDataForPCA".impute_4 * 0.00882929204114 + "CenteredDataForPCA".impute_5 * -0.427040789605 + "CenteredDataForPCA".impute_6 * -0.0175736209668 + "CenteredDataForPCA".impute_7 * -0.0149414694502 + "CenteredDataForPCA".impute_8 * -0.0363865186537 + "CenteredDataForPCA".impute_9 * 0.0623662682778 + "CenteredDataForPCA".impute_10 * 0.21741515792 + "CenteredDataForPCA".impute_11 * 0.033479142014 + "CenteredDataForPCA".impute_12 * 0.357498510333 + "CenteredDataForPCA".impute_13 * 0.335649339213 + "CenteredDataForPCA".impute_14 * 0.0434615777469 + "CenteredDataForPCA".impute_15 * -0.0169464775317 + "CenteredDataForPCA".impute_16 * 0.667364427491 + "CenteredDataForPCA".impute_17 * -0.0252197918189 + "CenteredDataForPCA".impute_18 * 0.00098183916826 + "CenteredDataForPCA".impute_19 * 0.0443933234856 + "CenteredDataForPCA".impute_20 * 0.0964714537751 + "CenteredDataForPCA".impute_21 * 0.0403096408073 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.0121346927772 + "CenteredDataForPCA".impute_3 * -0.0324667481838 + "CenteredDataForPCA".impute_4 * 0.58155754598 + "CenteredDataForPCA".impute_5 * 0.378242862294 + "CenteredDataForPCA".impute_6 * -0.0132900007241 + "CenteredDataForPCA".impute_7 * -0.288856977201 + "CenteredDataForPCA".impute_8 * -0.0730545791414 + "CenteredDataForPCA".impute_9 * -0.0485186051303 + "CenteredDataForPCA".impute_10 * 0.302627294318 + "CenteredDataForPCA".impute_11 * -0.130319018866 + "CenteredDataForPCA".impute_12 * -0.165814611084 + "CenteredDataForPCA".impute_13 * -0.108163668858 + "CenteredDataForPCA".impute_14 * -0.319401076974 + "CenteredDataForPCA".impute_15 * -0.116620594063 + "CenteredDataForPCA".impute_16 * 0.248854232704 + "CenteredDataForPCA".impute_17 * -0.0582222984954 + "CenteredDataForPCA".impute_18 * -0.0281578033945 + "CenteredDataForPCA".impute_19 * 0.13031241271 + "CenteredDataForPCA".impute_20 * 0.242485376872 + "CenteredDataForPCA".impute_21 * -0.144729409585 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.0566499494916 + "CenteredDataForPCA".impute_3 * -0.270714086079 + "CenteredDataForPCA".impute_4 * 0.157781513265 + "CenteredDataForPCA".impute_5 * -0.168148721419 + "CenteredDataForPCA".impute_6 * -0.0490267363471 + "CenteredDataForPCA".impute_7 * 0.0401906333826 + "CenteredDataForPCA".impute_8 * 0.143876272483 + "CenteredDataForPCA".impute_9 * 0.11138994447 + "CenteredDataForPCA".impute_10 * -0.0290046694172 + "CenteredDataForPCA".impute_11 * -0.0270156136823 + "CenteredDataForPCA".impute_12 * 0.437002312563 + "CenteredDataForPCA".impute_13 * -0.441007479366 + "CenteredDataForPCA".impute_14 * -0.475728548946 + "CenteredDataForPCA".impute_15 * -0.0817602293308 + "CenteredDataForPCA".impute_16 * -0.0631710145354 + "CenteredDataForPCA".impute_17 * 0.071534405652 + "CenteredDataForPCA".impute_18 * -0.099427102589 + "CenteredDataForPCA".impute_19 * -0.108166408756 + "CenteredDataForPCA".impute_20 * -0.424667828838 + "CenteredDataForPCA".impute_21 * 0.0462634357687 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.124927163028 + "CenteredDataForPCA".impute_3 * 0.316950756268 + "CenteredDataForPCA".impute_4 * -0.56236043871 + "CenteredDataForPCA".impute_5 * 0.0980900245569 + "CenteredDataForPCA".impute_6 * 0.0161966918822 + "CenteredDataForPCA".impute_7 * -0.534560354043 + "CenteredDataForPCA".impute_8 * 0.19017007453 + "CenteredDataForPCA".impute_9 * 0.0221850799604 + "CenteredDataForPCA".impute_10 * 0.301757826066 + "CenteredDataForPCA".impute_11 * -0.0357123818161 + "CenteredDataForPCA".impute_12 * 0.00818632973559 + "CenteredDataForPCA".impute_13 * -0.0441998392083 + "CenteredDataForPCA".impute_14 * -0.187180646631 + "CenteredDataForPCA".impute_15 * -0.188146702552 + "CenteredDataForPCA".impute_16 * 0.127057956874 + "CenteredDataForPCA".impute_17 * 0.0362031716258 + "CenteredDataForPCA".impute_18 * -0.0862270593203 + "CenteredDataForPCA".impute_19 * -0.193741445184 + "CenteredDataForPCA".impute_20 * -0.0705875865903 + "CenteredDataForPCA".impute_21 * 0.0565078191767 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.472956705132 + "CenteredDataForPCA".impute_3 * -0.370830315607 + "CenteredDataForPCA".impute_4 * -0.0756191112076 + "CenteredDataForPCA".impute_5 * -0.0734395914001 + "CenteredDataForPCA".impute_6 * 0.00578576328225 + "CenteredDataForPCA".impute_7 * 0.115373175789 + "CenteredDataForPCA".impute_8 * -0.110487780325 + "CenteredDataForPCA".impute_9 * 0.10656020085 + "CenteredDataForPCA".impute_10 * 0.0187351092603 + "CenteredDataForPCA".impute_11 * -0.048365459414 + "CenteredDataForPCA".impute_12 * -0.0303386706533 + "CenteredDataForPCA".impute_13 * 0.169561910595 + "CenteredDataForPCA".impute_14 * 0.0258281214876 + "CenteredDataForPCA".impute_15 * -0.684368843812 + "CenteredDataForPCA".impute_16 * -0.117693263506 + "CenteredDataForPCA".impute_17 * -0.0233798568998 + "CenteredDataForPCA".impute_18 * 0.0464640010562 + "CenteredDataForPCA".impute_19 * -0.110851493903 + "CenteredDataForPCA".impute_20 * 0.216804252172 + "CenteredDataForPCA".impute_21 * -0.11635751052 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.0613736869401 + "CenteredDataForPCA".impute_3 * -0.0940968467668 + "CenteredDataForPCA".impute_4 * 0.109608754715 + "CenteredDataForPCA".impute_5 * 0.495086146131 + "CenteredDataForPCA".impute_6 * -0.022984513649 + "CenteredDataForPCA".impute_7 * -0.130648012511 + "CenteredDataForPCA".impute_8 * 0.0713021658983 + "CenteredDataForPCA".impute_9 * 0.011124119804 + "CenteredDataForPCA".impute_10 * 0.140726559639 + "CenteredDataForPCA".impute_11 * -0.0746137067046 + "CenteredDataForPCA".impute_12 * 0.473744258166 + "CenteredDataForPCA".impute_13 * 0.264648178992 + "CenteredDataForPCA".impute_14 * 0.454710370002 + "CenteredDataForPCA".impute_15 * -0.107338062731 + "CenteredDataForPCA".impute_16 * -0.130056884199 + "CenteredDataForPCA".impute_17 * 0.110910678699 + "CenteredDataForPCA".impute_18 * -0.0264809856677 + "CenteredDataForPCA".impute_19 * 0.0726288540841 + "CenteredDataForPCA".impute_20 * -0.352248182667 + "CenteredDataForPCA".impute_21 * -0.100261502656 AS anoova_13, "CenteredDataForPCA".impute_2 * -0.526967518086 + "CenteredDataForPCA".impute_3 * -0.279946829252 + "CenteredDataForPCA".impute_4 * 0.0740540516626 + "CenteredDataForPCA".impute_5 * -0.0979226795563 + "CenteredDataForPCA".impute_6 * 0.00411153824577 + "CenteredDataForPCA".impute_7 * -0.448867945507 + "CenteredDataForPCA".impute_8 * 0.000214200709884 + "CenteredDataForPCA".impute_9 * -0.238940210977 + "CenteredDataForPCA".impute_10 * -0.144747227003 + "CenteredDataForPCA".impute_11 * 0.0573478102706 + "CenteredDataForPCA".impute_12 * 0.161287473873 + "CenteredDataForPCA".impute_13 * -0.173028796464 + "CenteredDataForPCA".impute_14 * 0.267820184768 + "CenteredDataForPCA".impute_15 * 0.391340572747 + "CenteredDataForPCA".impute_16 * 0.0360340721422 + "CenteredDataForPCA".impute_17 * -0.0988588814061 + "CenteredDataForPCA".impute_18 * -0.0300920260197 + "CenteredDataForPCA".impute_19 * -0.0108398856567 + "CenteredDataForPCA".impute_20 * 0.188284906257 + "CenteredDataForPCA".impute_21 * 0.13287714088 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.1873851943 + "CenteredDataForPCA".impute_3 * -0.111784967084 + "CenteredDataForPCA".impute_4 * -0.0128939729922 + "CenteredDataForPCA".impute_5 * -0.166152747926 + "CenteredDataForPCA".impute_6 * -0.0814510058312 + "CenteredDataForPCA".impute_7 * -0.284905550611 + "CenteredDataForPCA".impute_8 * -0.208838026839 + "CenteredDataForPCA".impute_9 * 0.211392725905 + "CenteredDataForPCA".impute_10 * -0.0819640957237 + "CenteredDataForPCA".impute_11 * -0.0422413647298 + "CenteredDataForPCA".impute_12 * -0.287410910968 + "CenteredDataForPCA".impute_13 * 0.405848439986 + "CenteredDataForPCA".impute_14 * -0.231068373611 + "CenteredDataForPCA".impute_15 * 0.15402067349 + "CenteredDataForPCA".impute_16 * -0.0709547785339 + "CenteredDataForPCA".impute_17 * -0.0130352498404 + "CenteredDataForPCA".impute_18 * 0.0309384556855 + "CenteredDataForPCA".impute_19 * 0.409206971974 + "CenteredDataForPCA".impute_20 * -0.47312632009 + "CenteredDataForPCA".impute_21 * -0.134596926816 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.378659937035 + "CenteredDataForPCA".impute_3 * 0.243834192889 + "CenteredDataForPCA".impute_4 * 0.220061442731 + "CenteredDataForPCA".impute_5 * 0.203939812462 + "CenteredDataForPCA".impute_6 * 0.0367647675095 + "CenteredDataForPCA".impute_7 * 0.205222823069 + "CenteredDataForPCA".impute_8 * 0.0984594886055 + "CenteredDataForPCA".impute_9 * 0.187625812508 + "CenteredDataForPCA".impute_10 * -0.240695956339 + "CenteredDataForPCA".impute_11 * 0.0859333053465 + "CenteredDataForPCA".impute_12 * -0.192158980216 + "CenteredDataForPCA".impute_13 * 0.0620420057432 + "CenteredDataForPCA".impute_14 * 0.103163241737 + "CenteredDataForPCA".impute_15 * -0.0259377831695 + "CenteredDataForPCA".impute_16 * 0.481505523502 + "CenteredDataForPCA".impute_17 * -0.0845528450782 + "CenteredDataForPCA".impute_18 * -0.0438118559477 + "CenteredDataForPCA".impute_19 * -0.32262588184 + "CenteredDataForPCA".impute_20 * -0.339234562897 + "CenteredDataForPCA".impute_21 * 0.203186411384 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.0264889104426 + "CenteredDataForPCA".impute_3 * 0.155775656344 + "CenteredDataForPCA".impute_4 * 0.113687332524 + "CenteredDataForPCA".impute_5 * -0.200469742246 + "CenteredDataForPCA".impute_6 * -0.00728336598375 + "CenteredDataForPCA".impute_7 * -0.0944146181809 + "CenteredDataForPCA".impute_8 * -0.0160224883482 + "CenteredDataForPCA".impute_9 * 0.715061949345 + "CenteredDataForPCA".impute_10 * 0.231045805994 + "CenteredDataForPCA".impute_11 * 0.0135682617617 + "CenteredDataForPCA".impute_12 * -0.0418109688764 + "CenteredDataForPCA".impute_13 * -0.378323043201 + "CenteredDataForPCA".impute_14 * 0.383255660994 + "CenteredDataForPCA".impute_15 * -0.0354998295257 + "CenteredDataForPCA".impute_16 * -0.0715861631751 + "CenteredDataForPCA".impute_17 * -0.0301815439961 + "CenteredDataForPCA".impute_18 * -0.00852658869551 + "CenteredDataForPCA".impute_19 * 0.207568160756 + "CenteredDataForPCA".impute_20 * 0.0685549474053 + "CenteredDataForPCA".impute_21 * 0.0300243758802 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.257472993544 + "CenteredDataForPCA".impute_3 * -0.173287068104 + "CenteredDataForPCA".impute_4 * -0.135797218007 + "CenteredDataForPCA".impute_5 * 0.173954871396 + "CenteredDataForPCA".impute_6 * -0.0479424139286 + "CenteredDataForPCA".impute_7 * 0.358187046244 + "CenteredDataForPCA".impute_8 * 0.0260970546242 + "CenteredDataForPCA".impute_9 * 0.232556612781 + "CenteredDataForPCA".impute_10 * 0.513322123752 + "CenteredDataForPCA".impute_11 * -0.0956799823883 + "CenteredDataForPCA".impute_12 * 0.0135292244928 + "CenteredDataForPCA".impute_13 * 0.169106434875 + "CenteredDataForPCA".impute_14 * -0.163776998496 + "CenteredDataForPCA".impute_15 * 0.510276939794 + "CenteredDataForPCA".impute_16 * -0.0931223295527 + "CenteredDataForPCA".impute_17 * 0.019176938008 + "CenteredDataForPCA".impute_18 * -0.0715695442178 + "CenteredDataForPCA".impute_19 * -0.221224981638 + "CenteredDataForPCA".impute_20 * 0.111460050459 + "CenteredDataForPCA".impute_21 * -0.0738423430434 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.0531143171845 + "CenteredDataForPCA".impute_3 * -0.299325164167 + "CenteredDataForPCA".impute_4 * -0.395456199405 + "CenteredDataForPCA".impute_5 * 0.438963177576 + "CenteredDataForPCA".impute_6 * 0.0195980426873 + "CenteredDataForPCA".impute_7 * 0.0872737223997 + "CenteredDataForPCA".impute_8 * 0.08517068105 + "CenteredDataForPCA".impute_9 * 0.271487132888 + "CenteredDataForPCA".impute_10 * -0.37180581376 + "CenteredDataForPCA".impute_11 * -0.00701243031425 + "CenteredDataForPCA".impute_12 * 0.0531098354494 + "CenteredDataForPCA".impute_13 * -0.15432238749 + "CenteredDataForPCA".impute_14 * -0.115113991072 + "CenteredDataForPCA".impute_15 * 0.0509030591413 + "CenteredDataForPCA".impute_16 * 0.308269686202 + "CenteredDataForPCA".impute_17 * 0.0339176848041 + "CenteredDataForPCA".impute_18 * -0.0169456608387 + "CenteredDataForPCA".impute_19 * 0.392800314182 + "CenteredDataForPCA".impute_20 * 0.194395533708 + "CenteredDataForPCA".impute_21 * 0.015242251107 AS anoova_19, "CenteredDataForPCA".impute_2 * -2.25863656779e-16 + "CenteredDataForPCA".impute_3 * -2.5669441921e-17 + "CenteredDataForPCA".impute_4 * 1.07463068028e-16 + "CenteredDataForPCA".impute_5 * 8.42498399363e-17 + "CenteredDataForPCA".impute_6 * -0.56671492841 + "CenteredDataForPCA".impute_7 * 4.25142499564e-18 + "CenteredDataForPCA".impute_8 * 0.34747238909 + "CenteredDataForPCA".impute_9 * 1.44008455278e-16 + "CenteredDataForPCA".impute_10 * -1.23456549728e-16 + "CenteredDataForPCA".impute_11 * -0.207113779573 + "CenteredDataForPCA".impute_12 * 1.11899986042e-16 + "CenteredDataForPCA".impute_13 * 1.23270168598e-16 + "CenteredDataForPCA".impute_14 * 2.00289566028e-16 + "CenteredDataForPCA".impute_15 * -1.37202668254e-16 + "CenteredDataForPCA".impute_16 * 1.80728600841e-16 + "CenteredDataForPCA".impute_17 * -0.279853227502 + "CenteredDataForPCA".impute_18 * 0.659265581017 + "CenteredDataForPCA".impute_19 * -3.45892022789e-17 + "CenteredDataForPCA".impute_20 * -5.78772312094e-17 + "CenteredDataForPCA".impute_21 * 0.0474560406173 AS anoova_20, "CenteredDataForPCA".impute_2 * 3.13244873287e-17 + "CenteredDataForPCA".impute_3 * -9.87579553432e-17 + "CenteredDataForPCA".impute_4 * -5.4512858794e-17 + "CenteredDataForPCA".impute_5 * 1.90609769506e-17 + "CenteredDataForPCA".impute_6 * 0.164068656831 + "CenteredDataForPCA".impute_7 * -5.63047759644e-18 + "CenteredDataForPCA".impute_8 * -0.285477575407 + "CenteredDataForPCA".impute_9 * 1.28476697361e-16 + "CenteredDataForPCA".impute_10 * 2.73554006532e-17 + "CenteredDataForPCA".impute_11 * -0.663330117321 + "CenteredDataForPCA".impute_12 * -1.56377595493e-16 + "CenteredDataForPCA".impute_13 * -8.95908961362e-17 + "CenteredDataForPCA".impute_14 * -1.04936099324e-16 + "CenteredDataForPCA".impute_15 * -3.34523770212e-17 + "CenteredDataForPCA".impute_16 * -1.78245692771e-16 + "CenteredDataForPCA".impute_17 * 0.322031164783 + "CenteredDataForPCA".impute_18 * 0.179363361679 + "CenteredDataForPCA".impute_19 * 2.04999785516e-17 + "CenteredDataForPCA".impute_20 * 1.64200413249e-17 + "CenteredDataForPCA".impute_21 * 0.561873561076 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.1375523805618286) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -1.1152942180633545) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.6966831684112549) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= 0.7990207672119141) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.4565066695213318) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.1375523805618286 AS threshold, 51 AS count, 0 AS depth, 0.5098039215686274 AS "Proba_0", -0.673729094703 AS "LogProba_0", 0.49019607843137253 AS "Proba_1", -0.712949807856 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -1.1152942180633545 AS threshold, 29 AS count, 1 AS depth, 0.7586206896551724 AS "Proba_0", -0.276253376628 AS "LogProba_0", 0.2413793103448276 AS "Proba_1", -1.42138568093 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, 'anoova_3' AS feature, -0.6966831684112549 AS threshold, 15 AS count, 2 AS depth, 0.5333333333333333 AS "Proba_0", -0.628608659422 AS "LogProba_0", 0.4666666666666667 AS "Proba_1", -0.762140052047 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.8 AS "Proba_0", -0.223143551314 AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_12' AS feature, 0.7990207672119141 AS threshold, 22 AS count, 1 AS depth, 0.18181818181818182 AS "Proba_0", -1.70474809224 AS "LogProba_0", 0.8181818181818182 AS "Proba_1", -0.200670695462 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_11' AS feature, 0.4565066695213318 AS threshold, 6 AS count, 2 AS depth, 0.6666666666666666 AS "Proba_0", -0.405465108108 AS "LogProba_0", 0.3333333333333333 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"OVO_Decision_0_1" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, "DT_Output"."Decision" AS dec_0_1 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.40682053565979004) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -3.339778423309326) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= -0.7067393064498901) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -1.976049780845642) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= -1.0097078084945679) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, 0.40682053565979004 AS threshold, 50 AS count, 0 AS depth, 0.52 AS "Proba_0", -0.653926467407 AS "LogProba_0", 0.48 AS "Proba_1", -0.73396917508 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, -3.339778423309326 AS threshold, 22 AS count, 1 AS depth, 0.9090909090909091 AS "Proba_0", -0.0953101798043 AS "LogProba_0", 0.09090909090909091 AS "Proba_1", -2.3978952728 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, 'anoova_19' AS feature, -0.7067393064498901 AS threshold, 21 AS count, 2 AS depth, 0.9523809523809523 AS "Proba_0", -0.0487901641694 AS "LogProba_0", 0.047619047619047616 AS "Proba_1", -3.04452243772 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.6666666666666666 AS "Proba_0", -0.405465108108 AS "LogProba_0", 0.3333333333333333 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_3' AS feature, -1.976049780845642 AS threshold, 28 AS count, 1 AS depth, 0.21428571428571427 AS "Proba_0", -1.54044504095 AS "LogProba_0", 0.7857142857142857 AS "Proba_1", -0.241162056817 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_13' AS feature, -1.0097078084945679 AS threshold, 23 AS count, 2 AS depth, 0.043478260869565216 AS "Proba_0", -3.13549421593 AS "LogProba_0", 0.9565217391304348 AS "Proba_1", -0.0444517625708 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"OVO_Decision_0_2" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, "DT_Output_1"."Decision" AS dec_0_2 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.16702046990394592) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 2.4738616943359375) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.3729174137115479) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -1.230238437652588) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.16702046990394592 AS threshold, 51 AS count, 0 AS depth, 0.5098039215686274 AS "Proba_0", -0.673729094703 AS "LogProba_0", 0.49019607843137253 AS "Proba_1", -0.712949807856 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 2.4738616943359375 AS threshold, 21 AS count, 1 AS depth, 0.9047619047619048 AS "Proba_0", -0.100083458557 AS "LogProba_0", 0.09523809523809523 AS "Proba_1", -2.35137525716 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, -1.3729174137115479 AS threshold, 30 AS count, 1 AS depth, 0.23333333333333334 AS "Proba_0", -1.45528723261 AS "LogProba_0", 0.7666666666666667 AS "Proba_1", -0.265703165733 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_3' AS feature, -1.230238437652588 AS threshold, 15 AS count, 2 AS depth, 0.4666666666666667 AS "Proba_0", -0.762140052047 AS "LogProba_0", 0.5333333333333333 AS "Proba_1", -0.628608659422 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.8571428571428571 AS "Proba_0", -0.154150679827 AS "LogProba_0", 0.14285714285714285 AS "Proba_1", -1.94591014906 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.125 AS "Proba_0", -2.07944154168 AS "LogProba_0", 0.875 AS "Proba_1", -0.133531392625 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"OVO_Decision_0_3" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, "DT_Output_2"."Decision" AS dec_0_3 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.5343434810638428) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -2.646991014480591) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= -0.8164516687393188) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= -1.1659705638885498) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, 0.5343434810638428 AS threshold, 49 AS count, 0 AS depth, 0.5102040816326531 AS "Proba_0", -0.672944473242 AS "LogProba_0", 0.4897959183673469 AS "Proba_1", -0.713766467763 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, -2.646991014480591 AS threshold, 26 AS count, 1 AS depth, 0.9230769230769231 AS "Proba_0", -0.0800427076735 AS "LogProba_0", 0.07692307692307693 AS "Proba_1", -2.56494935746 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, 'anoova_19' AS feature, -0.8164516687393188 AS threshold, 25 AS count, 2 AS depth, 0.96 AS "Proba_0", -0.0408219945203 AS "LogProba_0", 0.04 AS "Proba_1", -3.21887582487 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_13' AS feature, -1.1659705638885498 AS threshold, 23 AS count, 1 AS depth, 0.043478260869565216 AS "Proba_0", -3.13549421593 AS "LogProba_0", 0.9565217391304348 AS "Proba_1", -0.0444517625708 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"OVO_Decision_1_2" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, "DT_Output_3"."Decision" AS dec_1_2 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.28593480587005615) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.12763530015945435) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -1.6505796909332275) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= -0.39974096417427063) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.47007277607917786) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.8081415891647339) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_15 <= 0.08519798517227173) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_9' AS feature, 0.28593480587005615 AS threshold, 50 AS count, 0 AS depth, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -0.12763530015945435 AS threshold, 31 AS count, 1 AS depth, 0.6774193548387096 AS "Proba_0", -0.389464766762 AS "LogProba_0", 0.3225806451612903 AS "Proba_1", -1.13140211149 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -1.6505796909332275 AS threshold, 22 AS count, 2 AS depth, 0.8636363636363636 AS "Proba_0", -0.146603474192 AS "LogProba_0", 0.13636363636363635 AS "Proba_1", -1.99243016469 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.4 AS "Proba_0", -0.916290731874 AS "LogProba_0", 0.6 AS "Proba_1", -0.510825623766 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_8' AS feature, -0.39974096417427063 AS threshold, 9 AS count, 2 AS depth, 0.2222222222222222 AS "Proba_0", -1.50407739678 AS "LogProba_0", 0.7777777777777778 AS "Proba_1", -0.251314428281 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.6666666666666666 AS "Proba_0", -0.405465108108 AS "LogProba_0", 0.3333333333333333 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_18' AS feature, 0.47007277607917786 AS threshold, 19 AS count, 1 AS depth, 0.21052631578947367 AS "Proba_0", -1.55814461805 AS "LogProba_0", 0.7894736842105263 AS "Proba_1", -0.236388778064 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_11' AS feature, 0.8081415891647339 AS threshold, 14 AS count, 2 AS depth, 0.07142857142857142 AS "Proba_0", -2.63905732962 AS "LogProba_0", 0.9285714285714286 AS "Proba_1", -0.0741079721537 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_15' AS feature, 0.08519798517227173 AS threshold, 5 AS count, 2 AS depth, 0.6 AS "Proba_0", -0.510825623766 AS "LogProba_0", 0.4 AS "Proba_1", -0.916290731874 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4"."Proba_0" AS "Proba_0", "DT_node_data_4"."LogProba_0" AS "LogProba_0", "DT_node_data_4"."Proba_1" AS "Proba_1", "DT_node_data_4"."LogProba_1" AS "LogProba_1", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"OVO_Decision_1_3" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, "DT_Output_4"."Decision" AS dec_1_3 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.22318744659423828) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.5202146172523499) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= -0.7787594199180603) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= -1.415093183517456) THEN 6 ELSE 7 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 1.6998507976531982) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.22318744659423828 AS threshold, 49 AS count, 0 AS depth, 0.4897959183673469 AS "Proba_0", -0.713766467763 AS "LogProba_0", 0.5102040816326531 AS "Proba_1", -0.672944473242 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -0.5202146172523499 AS threshold, 19 AS count, 1 AS depth, 0.8947368421052632 AS "Proba_0", -0.11122563511 AS "LogProba_0", 0.10526315789473684 AS "Proba_1", -2.25129179861 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_8' AS feature, -0.7787594199180603 AS threshold, 30 AS count, 1 AS depth, 0.23333333333333334 AS "Proba_0", -1.45528723261 AS "LogProba_0", 0.7666666666666667 AS "Proba_1", -0.265703165733 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_8' AS feature, -1.415093183517456 AS threshold, 7 AS count, 2 AS depth, 0.7142857142857143 AS "Proba_0", -0.336472236621 AS "LogProba_0", 0.2857142857142857 AS "Proba_1", -1.2527629685 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_11' AS feature, 1.6998507976531982 AS threshold, 23 AS count, 2 AS depth, 0.08695652173913043 AS "Proba_0", -2.44234703537 AS "LogProba_0", 0.9130434782608695 AS "Proba_1", -0.0909717782057 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, 0.045454545454545456 AS "Proba_0", -3.09104245336 AS "LogProba_0", 0.9545454545454546 AS "Proba_1", -0.0465200156349 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5"."Proba_0" AS "Proba_0", "DT_node_data_5"."LogProba_0" AS "LogProba_0", "DT_node_data_5"."Proba_1" AS "Proba_1", "DT_node_data_5"."LogProba_1" AS "LogProba_1", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"OVO_Decision_2_3" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, "DT_Output_5"."Decision" AS dec_2_3 
FROM "DT_Output_5"), 
"OVO_Decisions_CTE" AS 
(SELECT "OVO_Decision_0_1".join_key_0 AS join_key_0, "OVO_Decision_0_1".dec_0_1 AS dec_0_1, "OVO_Decision_0_2".join_key_1 AS join_key_1, "OVO_Decision_0_2".dec_0_2 AS dec_0_2, "OVO_Decision_0_3".join_key_2 AS join_key_2, "OVO_Decision_0_3".dec_0_3 AS dec_0_3, "OVO_Decision_1_2".join_key_3 AS join_key_3, "OVO_Decision_1_2".dec_1_2 AS dec_1_2, "OVO_Decision_1_3".join_key_4 AS join_key_4, "OVO_Decision_1_3".dec_1_3 AS dec_1_3, "OVO_Decision_2_3".join_key_5 AS join_key_5, "OVO_Decision_2_3".dec_2_3 AS dec_2_3 
FROM "OVO_Decision_0_1" LEFT OUTER JOIN "OVO_Decision_0_2" ON "OVO_Decision_0_1".join_key_0 = "OVO_Decision_0_2".join_key_1 LEFT OUTER JOIN "OVO_Decision_0_3" ON "OVO_Decision_0_3".join_key_2 = "OVO_Decision_0_2".join_key_1 LEFT OUTER JOIN "OVO_Decision_1_2" ON "OVO_Decision_1_2".join_key_3 = "OVO_Decision_0_3".join_key_2 LEFT OUTER JOIN "OVO_Decision_1_3" ON "OVO_Decision_1_3".join_key_4 = "OVO_Decision_1_2".join_key_3 LEFT OUTER JOIN "OVO_Decision_2_3" ON "OVO_Decision_2_3".join_key_5 = "OVO_Decision_1_3".join_key_4), 
"OVO_Scores" AS 
(SELECT "OVO_Decisions_CTE".join_key_0 AS "KEY", (1.0 - "OVO_Decisions_CTE".dec_0_1) + (1.0 - "OVO_Decisions_CTE".dec_0_2) + (1.0 - "OVO_Decisions_CTE".dec_0_3) AS "Score_0", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0", "OVO_Decisions_CTE".dec_0_1 + (1.0 - "OVO_Decisions_CTE".dec_1_2) + (1.0 - "OVO_Decisions_CTE".dec_1_3) AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1", "OVO_Decisions_CTE".dec_0_2 + "OVO_Decisions_CTE".dec_1_2 + (1.0 - "OVO_Decisions_CTE".dec_2_3) AS "Score_2", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2", "OVO_Decisions_CTE".dec_0_3 + "OVO_Decisions_CTE".dec_1_3 + "OVO_Decisions_CTE".dec_2_3 AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_3" 
FROM "OVO_Decisions_CTE"), 
orig_cte AS 
(SELECT "OVO_Scores"."KEY" AS "KEY", "OVO_Scores"."Score_0" AS "Score_0", "OVO_Scores"."Score_1" AS "Score_1", "OVO_Scores"."Score_2" AS "Score_2", "OVO_Scores"."Score_3" AS "Score_3", "OVO_Scores"."Proba_0" AS "Proba_0", "OVO_Scores"."Proba_1" AS "Proba_1", "OVO_Scores"."Proba_2" AS "Proba_2", "OVO_Scores"."Proba_3" AS "Proba_3", "OVO_Scores"."LogProba_0" AS "LogProba_0", "OVO_Scores"."LogProba_1" AS "LogProba_1", "OVO_Scores"."LogProba_2" AS "LogProba_2", "OVO_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OVO_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte