-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "DT_node_lookup" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_6" <= 0.4774036407470703) THEN CASE WHEN ("ADS"."Feature_8" <= 1.266140341758728) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS"."Feature_17" <= -1.2636027336120605) THEN 5 ELSE CASE WHEN ("ADS"."Feature_14" <= -0.5412563681602478) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_6' AS feature, 0.4774036407470703 AS threshold, 100 AS count, 0 AS depth, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'Feature_8' AS feature, 1.266140341758728 AS threshold, 61 AS count, 1 AS depth, 0.9508196721311475 AS "Proba_0", -0.0504308536269 AS "LogProba_0", 0.04918032786885246 AS "Proba_1", -3.01226157551 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 58 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, 'Feature_17' AS feature, -1.2636027336120605 AS threshold, 39 AS count, 1 AS depth, 0.4358974358974359 AS "Proba_0", -0.830348302073 AS "LogProba_0", 0.5641025641025641 AS "Proba_1", -0.572519192771 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'Feature_14' AS feature, -0.5412563681602478 AS threshold, 34 AS count, 2 AS depth, 0.35294117647058826 AS "Proba_0", -1.04145387483 AS "LogProba_0", 0.6470588235294118 AS "Proba_1", -0.435318071258 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.7 AS "Proba_0", -0.356674943939 AS "LogProba_0", 0.3 AS "Proba_1", -1.20397280433 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, 0.20833333333333334 AS "Proba_0", -1.56861591791 AS "LogProba_0", 0.7916666666666666 AS "Proba_1", -0.233614851182 AS "LogProba_1", 1 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"OVR_Score_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0", "DT_Output"."Proba_1" AS "Proba_0", "DT_Output"."LogProba_1" AS "LogProba_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_11" <= 0.05651708319783211) THEN CASE WHEN ("ADS"."Feature_3" <= -0.47553831338882446) THEN CASE WHEN ("ADS"."Feature_5" <= -1.128811240196228) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_0" <= 1.3756775856018066) THEN 6 ELSE 7 END END ELSE 8 END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_11' AS feature, 0.05651708319783211 AS threshold, 100 AS count, 0 AS depth, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, -0.47553831338882446 AS threshold, 53 AS count, 1 AS depth, 0.5283018867924528 AS "Proba_0", -0.638087403377 AS "LogProba_0", 0.4716981132075472 AS "Proba_1", -0.751416088684 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, -1.128811240196228 AS threshold, 32 AS count, 2 AS depth, 0.28125 AS "Proba_0", -1.26851132546 AS "LogProba_0", 0.71875 AS "Proba_1", -0.330241686871 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, 0.08 AS "Proba_0", -2.52572864431 AS "LogProba_0", 0.92 AS "Proba_1", -0.0833816089391 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, 1.3756775856018066 AS threshold, 21 AS count, 2 AS depth, 0.9047619047619048 AS "Proba_0", -0.100083458557 AS "LogProba_0", 0.09523809523809523 AS "Proba_1", -2.35137525716 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.3333333333333333 AS "Proba_0", -1.09861228867 AS "LogProba_0", 0.6666666666666666 AS "Proba_1", -0.405465108108 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 47 AS count, 1 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"OVR_Score_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1", "DT_Output_1"."Proba_1" AS "Proba_1", "DT_Output_1"."LogProba_1" AS "LogProba_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_10" <= 2.5097455978393555) THEN CASE WHEN ("ADS"."Feature_2" <= 1.6053324937820435) THEN CASE WHEN ("ADS"."Feature_19" <= 1.791395664215088) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_7" <= -0.15616527199745178) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS"."Feature_0" <= -0.8784415125846863) THEN 9 ELSE CASE WHEN ("ADS"."Feature_3" <= -3.7628860473632812) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_10' AS feature, 2.5097455978393555 AS threshold, 100 AS count, 0 AS depth, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 1.6053324937820435 AS threshold, 82 AS count, 1 AS depth, 0.8658536585365854 AS "Proba_0", -0.144039370223 AS "LogProba_0", 0.13414634146341464 AS "Proba_1", -2.00882397447 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'Feature_19' AS feature, 1.791395664215088 AS threshold, 78 AS count, 2 AS depth, 0.8974358974358975 AS "Proba_0", -0.10821358464 AS "LogProba_0", 0.10256410256410256 AS "Proba_1", -2.27726728501 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 76 AS count, 3 AS depth, 0.9210526315789473 AS "Proba_0", -0.082238098237 AS "LogProba_0", 0.07894736842105263 AS "Proba_1", -2.53897387106 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'Feature_7' AS feature, -0.15616527199745178 AS threshold, 4 AS count, 2 AS depth, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.75 AS "Proba_1", -0.287682072452 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, 'Feature_0' AS feature, -0.8784415125846863 AS threshold, 18 AS count, 1 AS depth, 0.2222222222222222 AS "Proba_0", -1.50407739678 AS "LogProba_0", 0.7777777777777778 AS "Proba_1", -0.251314428281 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, 'Feature_3' AS feature, -3.7628860473632812 AS threshold, 15 AS count, 2 AS depth, 0.06666666666666667 AS "Proba_0", -2.7080502011 AS "LogProba_0", 0.9333333333333333 AS "Proba_1", -0.068992871487 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"OVR_Score_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2", "DT_Output_2"."Proba_1" AS "Proba_2", "DT_Output_2"."LogProba_1" AS "LogProba_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= -0.4777211546897888) THEN CASE WHEN ("ADS"."Feature_17" <= -1.782388687133789) THEN CASE WHEN ("ADS"."Feature_17" <= -1.8831565380096436) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_19" <= -0.7924325466156006) THEN CASE WHEN ("ADS"."Feature_16" <= 1.792752981185913) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS"."Feature_5" <= -1.008676290512085) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, -0.4777211546897888 AS threshold, 100 AS count, 0 AS depth, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'Feature_17' AS feature, -1.782388687133789 AS threshold, 48 AS count, 1 AS depth, 0.9791666666666666 AS "Proba_0", -0.0210534091978 AS "LogProba_0", 0.020833333333333332 AS "Proba_1", -3.87120101091 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'Feature_17' AS feature, -1.8831565380096436 AS threshold, 2 AS count, 2 AS depth, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 46 AS count, 2 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'Feature_19' AS feature, -0.7924325466156006 AS threshold, 52 AS count, 1 AS depth, 0.5384615384615384 AS "Proba_0", -0.619039208406 AS "LogProba_0", 0.46153846153846156 AS "Proba_1", -0.773189888233 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, 'Feature_16' AS feature, 1.792752981185913 AS threshold, 11 AS count, 2 AS depth, 0.09090909090909091 AS "Proba_0", -2.3978952728 AS "LogProba_0", 0.9090909090909091 AS "Proba_1", -0.0953101798043 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, 'Feature_5' AS feature, -1.008676290512085 AS threshold, 41 AS count, 2 AS depth, 0.6585365853658537 AS "Proba_0", -0.4177352007 AS "LogProba_0", 0.34146341463414637 AS "Proba_1", -1.07451473709 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"OVR_Score_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_3"."Proba_1" AS "Proba_3", "DT_Output_3"."LogProba_1" AS "LogProba_3" 
FROM "DT_Output_3"), 
"OVR_Join_CTE" AS 
(SELECT "OVR_Score_0".join_key_0 AS join_key_0, "OVR_Score_0"."Score_0" AS "Score_0", "OVR_Score_0"."Proba_0" AS "Proba_0", "OVR_Score_0"."LogProba_0" AS "LogProba_0", "OVR_Score_1".join_key_1 AS join_key_1, "OVR_Score_1"."Score_1" AS "Score_1", "OVR_Score_1"."Proba_1" AS "Proba_1", "OVR_Score_1"."LogProba_1" AS "LogProba_1", "OVR_Score_2".join_key_2 AS join_key_2, "OVR_Score_2"."Score_2" AS "Score_2", "OVR_Score_2"."Proba_2" AS "Proba_2", "OVR_Score_2"."LogProba_2" AS "LogProba_2", "OVR_Score_3".join_key_3 AS join_key_3, "OVR_Score_3"."Score_3" AS "Score_3", "OVR_Score_3"."Proba_3" AS "Proba_3", "OVR_Score_3"."LogProba_3" AS "LogProba_3" 
FROM "OVR_Score_0" LEFT OUTER JOIN "OVR_Score_1" ON "OVR_Score_0".join_key_0 = "OVR_Score_1".join_key_1 LEFT OUTER JOIN "OVR_Score_2" ON "OVR_Score_2".join_key_2 = "OVR_Score_1".join_key_1 LEFT OUTER JOIN "OVR_Score_3" ON "OVR_Score_3".join_key_3 = "OVR_Score_2".join_key_2), 
"OVR_Scores" AS 
(SELECT "OVR_Join_CTE".join_key_0 AS "KEY", "OVR_Join_CTE"."Score_0" AS "Score_0", "OVR_Join_CTE"."Proba_0" AS "Proba_0", "OVR_Join_CTE"."LogProba_0" AS "LogProba_0", "OVR_Join_CTE"."Score_1" AS "Score_1", "OVR_Join_CTE"."Proba_1" AS "Proba_1", "OVR_Join_CTE"."LogProba_1" AS "LogProba_1", "OVR_Join_CTE"."Score_2" AS "Score_2", "OVR_Join_CTE"."Proba_2" AS "Proba_2", "OVR_Join_CTE"."LogProba_2" AS "LogProba_2", "OVR_Join_CTE"."Score_3" AS "Score_3", "OVR_Join_CTE"."Proba_3" AS "Proba_3", "OVR_Join_CTE"."LogProba_3" AS "LogProba_3" 
FROM "OVR_Join_CTE"), 
orig_cte AS 
(SELECT "OVR_Scores"."KEY" AS "KEY", "OVR_Scores"."Score_0" AS "Score_0", "OVR_Scores"."Score_1" AS "Score_1", "OVR_Scores"."Score_2" AS "Score_2", "OVR_Scores"."Score_3" AS "Score_3", "OVR_Scores"."Proba_0" AS "Proba_0", "OVR_Scores"."Proba_1" AS "Proba_1", "OVR_Scores"."Proba_2" AS "Proba_2", "OVR_Scores"."Proba_3" AS "Proba_3", "OVR_Scores"."LogProba_0" AS "LogProba_0", "OVR_Scores"."LogProba_1" AS "LogProba_1", "OVR_Scores"."LogProba_2" AS "LogProba_2", "OVR_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OVR_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte