-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 14.1272917399 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 19.2896485062 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 91.9690333919 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 654.889103691 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0963602811951 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.104340984183 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.0887993158172 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0489191458699 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.181161862917 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0627976098418 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.405172056239 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 1.21685342707 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 2.86605922671 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 40.3370790861 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.00704097891037 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.0254781388401 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0318937163445 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0117961370826 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.0205422987698 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.00379490386643 ELSE "ADS"."Feature_19" END AS impute_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN 16.2691898067 ELSE "ADS"."Feature_20" END AS impute_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN 25.6772231986 ELSE "ADS"."Feature_21" END AS impute_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 107.261212654 ELSE "ADS"."Feature_22" END AS impute_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 880.583128295 ELSE "ADS"."Feature_23" END AS impute_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN 0.132368594025 ELSE "ADS"."Feature_24" END AS impute_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN 0.254265043937 ELSE "ADS"."Feature_25" END AS impute_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN 0.272188483304 ELSE "ADS"."Feature_26" END AS impute_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 0.114606223199 ELSE "ADS"."Feature_27" END AS impute_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 0.290075571178 ELSE "ADS"."Feature_28" END AS impute_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 0.0839458172232 ELSE "ADS"."Feature_29" END AS impute_31 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 14.1272917399 AS impute_2, "ADS_imp_1_OUT".impute_3 - 19.2896485062 AS impute_3, "ADS_imp_1_OUT".impute_4 - 91.9690333919 AS impute_4, "ADS_imp_1_OUT".impute_5 - 654.889103691 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.0963602811951 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.104340984183 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.0887993158172 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.0489191458699 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.181161862917 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.0627976098418 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.405172056239 AS impute_12, "ADS_imp_1_OUT".impute_13 - 1.21685342707 AS impute_13, "ADS_imp_1_OUT".impute_14 - 2.86605922671 AS impute_14, "ADS_imp_1_OUT".impute_15 - 40.3370790861 AS impute_15, "ADS_imp_1_OUT".impute_16 - 0.00704097891037 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.0254781388401 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.0318937163445 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.0117961370826 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.0205422987698 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.00379490386643 AS impute_21, "ADS_imp_1_OUT".impute_22 - 16.2691898067 AS impute_22, "ADS_imp_1_OUT".impute_23 - 25.6772231986 AS impute_23, "ADS_imp_1_OUT".impute_24 - 107.261212654 AS impute_24, "ADS_imp_1_OUT".impute_25 - 880.583128295 AS impute_25, "ADS_imp_1_OUT".impute_26 - 0.132368594025 AS impute_26, "ADS_imp_1_OUT".impute_27 - 0.254265043937 AS impute_27, "ADS_imp_1_OUT".impute_28 - 0.272188483304 AS impute_28, "ADS_imp_1_OUT".impute_29 - 0.114606223199 AS impute_29, "ADS_imp_1_OUT".impute_30 - 0.290075571178 AS impute_30, "ADS_imp_1_OUT".impute_31 - 0.0839458172232 AS impute_31 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.00508623201873 + "CenteredDataForPCA".impute_3 * 0.00219657026063 + "CenteredDataForPCA".impute_4 * 0.0350763297783 + "CenteredDataForPCA".impute_5 * 0.516826468722 + "CenteredDataForPCA".impute_6 * 4.23694535447e-06 + "CenteredDataForPCA".impute_7 * 4.05260046729e-05 + "CenteredDataForPCA".impute_8 * 8.19399539422e-05 + "CenteredDataForPCA".impute_9 * 4.77807775163e-05 + "CenteredDataForPCA".impute_10 * 7.07804331831e-06 + "CenteredDataForPCA".impute_11 * -2.62155250648e-06 + "CenteredDataForPCA".impute_12 * 0.000313742506643 + "CenteredDataForPCA".impute_13 * -6.50984007831e-05 + "CenteredDataForPCA".impute_14 * 0.00223634150302 + "CenteredDataForPCA".impute_15 * 0.0557271669111 + "CenteredDataForPCA".impute_16 * -8.05646029196e-07 + "CenteredDataForPCA".impute_17 * 5.51918196969e-06 + "CenteredDataForPCA".impute_18 * 8.87094462e-06 + "CenteredDataForPCA".impute_19 * 3.27915008813e-06 + "CenteredDataForPCA".impute_20 * -1.24101835689e-06 + "CenteredDataForPCA".impute_21 * -8.54530832068e-08 + "CenteredDataForPCA".impute_22 * 0.00715473257241 + "CenteredDataForPCA".impute_23 * 0.00306736622401 + "CenteredDataForPCA".impute_24 * 0.04945764466 + "CenteredDataForPCA".impute_25 * 0.852063391798 + "CenteredDataForPCA".impute_26 * 6.42005480763e-06 + "CenteredDataForPCA".impute_27 * 0.000101275937184 + "CenteredDataForPCA".impute_28 * 0.000168928625057 + "CenteredDataForPCA".impute_29 * 7.36658177657e-05 + "CenteredDataForPCA".impute_30 * 1.78986261776e-05 + "CenteredDataForPCA".impute_31 * 1.61356158525e-06 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.00928705649724 + "CenteredDataForPCA".impute_3 * -0.00288160657798 + "CenteredDataForPCA".impute_4 * 0.0627480827489 + "CenteredDataForPCA".impute_5 * 0.851823720483 + "CenteredDataForPCA".impute_6 * -1.48194356158e-05 + "CenteredDataForPCA".impute_7 * -2.68862248719e-06 + "CenteredDataForPCA".impute_8 * 7.51419574317e-05 + "CenteredDataForPCA".impute_9 * 4.63501038363e-05 + "CenteredDataForPCA".impute_10 * -2.52430431357e-05 + "CenteredDataForPCA".impute_11 * -1.61197147998e-05 + "CenteredDataForPCA".impute_12 * -5.38692831195e-05 + "CenteredDataForPCA".impute_13 * 0.000348370414257 + "CenteredDataForPCA".impute_14 * 0.000819640791368 + "CenteredDataForPCA".impute_15 * 0.00751112451338 + "CenteredDataForPCA".impute_16 * 1.4943813104e-06 + "CenteredDataForPCA".impute_17 * 1.27357957011e-05 + "CenteredDataForPCA".impute_18 * 2.86921008766e-05 + "CenteredDataForPCA".impute_19 * 9.36007476642e-06 + "CenteredDataForPCA".impute_20 * 1.22647431651e-05 + "CenteredDataForPCA".impute_21 * 2.89683789846e-07 + "CenteredDataForPCA".impute_22 * -0.000568673345422 + "CenteredDataForPCA".impute_23 * -0.0132152604641 + "CenteredDataForPCA".impute_24 * -0.000185961117041 + "CenteredDataForPCA".impute_25 * -0.519742358317 + "CenteredDataForPCA".impute_26 * -7.68565691773e-05 + "CenteredDataForPCA".impute_27 * -0.000256104143553 + "CenteredDataForPCA".impute_28 * -0.000175471479001 + "CenteredDataForPCA".impute_29 * -3.05051743179e-05 + "CenteredDataForPCA".impute_30 * -0.000157042844697 + "CenteredDataForPCA".impute_31 * -5.53071661675e-05 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.0123425821157 + "CenteredDataForPCA".impute_3 * -0.00635497857479 + "CenteredDataForPCA".impute_4 * -0.0716694814445 + "CenteredDataForPCA".impute_5 * -0.0278944181074 + "CenteredDataForPCA".impute_6 * 7.26596827177e-05 + "CenteredDataForPCA".impute_7 * 0.000101754349505 + "CenteredDataForPCA".impute_8 * 0.0002659897293 + "CenteredDataForPCA".impute_9 * 3.6047176433e-05 + "CenteredDataForPCA".impute_10 * 0.00014129095828 + "CenteredDataForPCA".impute_11 * 5.06376971176e-05 + "CenteredDataForPCA".impute_12 * 0.00606156709482 + "CenteredDataForPCA".impute_13 * 0.00623377634798 + "CenteredDataForPCA".impute_14 * 0.0438560369115 + "CenteredDataForPCA".impute_15 * 0.990245878283 + "CenteredDataForPCA".impute_16 * 4.3447143288e-05 + "CenteredDataForPCA".impute_17 * 0.000127658711284 + "CenteredDataForPCA".impute_18 * 0.000207365800194 + "CenteredDataForPCA".impute_19 * 4.7885514373e-05 + "CenteredDataForPCA".impute_20 * 0.000114411270113 + "CenteredDataForPCA".impute_21 * 2.4315836964e-05 + "CenteredDataForPCA".impute_22 * -0.0155659935239 + "CenteredDataForPCA".impute_23 * -0.0315446196162 + "CenteredDataForPCA".impute_24 * -0.092313379086 + "CenteredDataForPCA".impute_25 * -0.0393186778242 + "CenteredDataForPCA".impute_26 * -4.21307399419e-05 + "CenteredDataForPCA".impute_27 * -0.000764833236821 + "CenteredDataForPCA".impute_28 * -0.00084655223666 + "CenteredDataForPCA".impute_29 * -0.000333596392895 + "CenteredDataForPCA".impute_30 * -0.000349992952226 + "CenteredDataForPCA".impute_31 * -4.09371692043e-05 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.034238047329 + "CenteredDataForPCA".impute_3 * -0.36241511066 + "CenteredDataForPCA".impute_4 * -0.329281416695 + "CenteredDataForPCA".impute_5 * 0.0394122493555 + "CenteredDataForPCA".impute_6 * -0.000344153009316 + "CenteredDataForPCA".impute_7 * -0.00300489873157 + "CenteredDataForPCA".impute_8 * -0.00340779109833 + "CenteredDataForPCA".impute_9 * -0.00124725032251 + "CenteredDataForPCA".impute_10 * -0.000966809714273 + "CenteredDataForPCA".impute_11 * -0.000199194796397 + "CenteredDataForPCA".impute_12 * -0.00408618842931 + "CenteredDataForPCA".impute_13 * -0.0226398666335 + "CenteredDataForPCA".impute_14 * -0.0498565303495 + "CenteredDataForPCA".impute_15 * -0.10198027498 + "CenteredDataForPCA".impute_16 * 6.69114619433e-06 + "CenteredDataForPCA".impute_17 * -0.000893263011809 + "CenteredDataForPCA".impute_18 * -0.000995328877977 + "CenteredDataForPCA".impute_19 * -0.000234560912295 + "CenteredDataForPCA".impute_20 * -0.000124528446471 + "CenteredDataForPCA".impute_21 * -6.72412842897e-05 + "CenteredDataForPCA".impute_22 * -0.0618999387207 + "CenteredDataForPCA".impute_23 * -0.542057412175 + "CenteredDataForPCA".impute_24 * -0.666816450971 + "CenteredDataForPCA".impute_25 * 0.0387691524053 + "CenteredDataForPCA".impute_26 * -0.000721927588877 + "CenteredDataForPCA".impute_27 * -0.0103619614431 + "CenteredDataForPCA".impute_28 * -0.0115618070811 + "CenteredDataForPCA".impute_29 * -0.00299467373451 + "CenteredDataForPCA".impute_30 * -0.00264085170173 + "CenteredDataForPCA".impute_31 * -0.000908697292267 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.0354561137788 + "CenteredDataForPCA".impute_3 * -0.443187450361 + "CenteredDataForPCA".impute_4 * 0.313382893025 + "CenteredDataForPCA".impute_5 * -0.0460378117325 + "CenteredDataForPCA".impute_6 * 0.000579019358894 + "CenteredDataForPCA".impute_7 * 0.00252639926496 + "CenteredDataForPCA".impute_8 * 0.00219520726393 + "CenteredDataForPCA".impute_9 * 0.00113196737427 + "CenteredDataForPCA".impute_10 * 0.000937014168987 + "CenteredDataForPCA".impute_11 * 0.0002070280415 + "CenteredDataForPCA".impute_12 * 0.00293386179506 + "CenteredDataForPCA".impute_13 * -0.0375434531098 + "CenteredDataForPCA".impute_14 * 0.0357275319968 + "CenteredDataForPCA".impute_15 * 0.0508045702308 + "CenteredDataForPCA".impute_16 * -5.18037664417e-05 + "CenteredDataForPCA".impute_17 * 0.000524579915081 + "CenteredDataForPCA".impute_18 * 0.000576839903301 + "CenteredDataForPCA".impute_19 * 0.000225598524371 + "CenteredDataForPCA".impute_20 * 6.11321955063e-05 + "CenteredDataForPCA".impute_21 * 4.64421630449e-05 + "CenteredDataForPCA".impute_22 * 0.053144766681 + "CenteredDataForPCA".impute_23 * -0.612574311832 + "CenteredDataForPCA".impute_24 * 0.564102975833 + "CenteredDataForPCA".impute_25 * -0.0184525531046 + "CenteredDataForPCA".impute_26 * 0.000465062511883 + "CenteredDataForPCA".impute_27 * 0.00609647380142 + "CenteredDataForPCA".impute_28 * 0.00616530214107 + "CenteredDataForPCA".impute_29 * 0.00241157233019 + "CenteredDataForPCA".impute_30 * 0.00188324181926 + "CenteredDataForPCA".impute_31 * 0.000519581269035 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.131213100812 + "CenteredDataForPCA".impute_3 * -0.213486088794 + "CenteredDataForPCA".impute_4 * -0.840324225067 + "CenteredDataForPCA".impute_5 * 0.0523468100673 + "CenteredDataForPCA".impute_6 * -0.000406502429994 + "CenteredDataForPCA".impute_7 * -0.00101527757899 + "CenteredDataForPCA".impute_8 * 0.00027560006966 + "CenteredDataForPCA".impute_9 * -0.00057634687785 + "CenteredDataForPCA".impute_10 * -0.000179444494787 + "CenteredDataForPCA".impute_11 * 0.000219983885026 + "CenteredDataForPCA".impute_12 * -0.000845585552115 + "CenteredDataForPCA".impute_13 * -0.0124013980426 + "CenteredDataForPCA".impute_14 * 0.0948056396683 + "CenteredDataForPCA".impute_15 * -0.0231166662489 + "CenteredDataForPCA".impute_16 * -1.49989513623e-05 + "CenteredDataForPCA".impute_17 * -0.000359930491725 + "CenteredDataForPCA".impute_18 * -0.000383840527372 + "CenteredDataForPCA".impute_19 * -0.000425616207791 + "CenteredDataForPCA".impute_20 * -4.11711910814e-05 + "CenteredDataForPCA".impute_21 * -0.000100135534947 + "CenteredDataForPCA".impute_22 * -0.074980718614 + "CenteredDataForPCA".impute_23 * 0.121167279179 + "CenteredDataForPCA".impute_24 * 0.44463052442 + "CenteredDataForPCA".impute_25 * -0.0201806771736 + "CenteredDataForPCA".impute_26 * 0.00147871511087 + "CenteredDataForPCA".impute_27 * 0.00948569782096 + "CenteredDataForPCA".impute_28 * 0.0104511092381 + "CenteredDataForPCA".impute_29 * 0.00159681971408 + "CenteredDataForPCA".impute_30 * 0.00547852367946 + "CenteredDataForPCA".impute_31 * 0.0012372657926 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.0335131911571 + "CenteredDataForPCA".impute_3 * -0.784253474948 + "CenteredDataForPCA".impute_4 * 0.189074737216 + "CenteredDataForPCA".impute_5 * -0.00733787337319 + "CenteredDataForPCA".impute_6 * 0.00160796958066 + "CenteredDataForPCA".impute_7 * 0.000277107786425 + "CenteredDataForPCA".impute_8 * 0.00102365524821 + "CenteredDataForPCA".impute_9 * 0.000905454729064 + "CenteredDataForPCA".impute_10 * 0.000598298140341 + "CenteredDataForPCA".impute_11 * -4.25619565464e-05 + "CenteredDataForPCA".impute_12 * -0.0153826412115 + "CenteredDataForPCA".impute_13 * 0.0666867308073 + "CenteredDataForPCA".impute_14 * -0.148548561364 + "CenteredDataForPCA".impute_15 * 0.0225977534145 + "CenteredDataForPCA".impute_16 * -0.00023717706347 + "CenteredDataForPCA".impute_17 * -0.00127405509665 + "CenteredDataForPCA".impute_18 * -0.00141036864638 + "CenteredDataForPCA".impute_19 * -0.00052161474561 + "CenteredDataForPCA".impute_20 * -0.00071377311434 + "CenteredDataForPCA".impute_21 * -0.000194572501324 + "CenteredDataForPCA".impute_22 * 0.0453901657216 + "CenteredDataForPCA".impute_23 * 0.552024144416 + "CenteredDataForPCA".impute_24 * -0.117015608332 + "CenteredDataForPCA".impute_25 * 0.00183169389582 + "CenteredDataForPCA".impute_26 * 0.00394704099393 + "CenteredDataForPCA".impute_27 * 0.00774390328624 + "CenteredDataForPCA".impute_28 * 0.0108822097042 + "CenteredDataForPCA".impute_29 * 0.00424156865424 + "CenteredDataForPCA".impute_30 * 0.0070379952676 + "CenteredDataForPCA".impute_31 * 0.00117067749582 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.0754924585463 + "CenteredDataForPCA".impute_3 * -0.0687405638033 + "CenteredDataForPCA".impute_4 * 0.0839642266852 + "CenteredDataForPCA".impute_5 * -0.00300992471328 + "CenteredDataForPCA".impute_6 * 0.00343658579997 + "CenteredDataForPCA".impute_7 * 0.0155731486145 + "CenteredDataForPCA".impute_8 * 0.0192512586711 + "CenteredDataForPCA".impute_9 * 0.00907295722324 + "CenteredDataForPCA".impute_10 * 0.00914981253364 + "CenteredDataForPCA".impute_11 * 0.00300903312927 + "CenteredDataForPCA".impute_12 * 0.0841264090628 + "CenteredDataForPCA".impute_13 * 0.587281487414 + "CenteredDataForPCA".impute_14 * 0.777894164957 + "CenteredDataForPCA".impute_15 * -0.0422340771686 + "CenteredDataForPCA".impute_16 * 0.00160686058017 + "CenteredDataForPCA".impute_17 * 0.0086804542769 + "CenteredDataForPCA".impute_18 * 0.011790846368 + "CenteredDataForPCA".impute_19 * 0.00399536083142 + "CenteredDataForPCA".impute_20 * 0.00554864403965 + "CenteredDataForPCA".impute_21 * 0.00144055226646 + "CenteredDataForPCA".impute_22 * -0.129429314862 + "CenteredDataForPCA".impute_23 * 0.016015867727 + "CenteredDataForPCA".impute_24 * -0.0732396131967 + "CenteredDataForPCA".impute_25 * 0.00501077220572 + "CenteredDataForPCA".impute_26 * -0.00213704577363 + "CenteredDataForPCA".impute_27 * -0.00859643463212 + "CenteredDataForPCA".impute_28 * -0.0059601734146 + "CenteredDataForPCA".impute_29 * 0.000406900452006 + "CenteredDataForPCA".impute_30 * -0.00769020237909 + "CenteredDataForPCA".impute_31 * -9.48038254764e-05 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.35054926404 + "CenteredDataForPCA".impute_3 * 0.00408376429274 + "CenteredDataForPCA".impute_4 * 0.132828033867 + "CenteredDataForPCA".impute_5 * -0.0038291611566 + "CenteredDataForPCA".impute_6 * 0.00822698129974 + "CenteredDataForPCA".impute_7 * 0.0563148308398 + "CenteredDataForPCA".impute_8 * 0.0702297024991 + "CenteredDataForPCA".impute_9 * 0.019249809964 + "CenteredDataForPCA".impute_10 * 0.0149895863695 + "CenteredDataForPCA".impute_11 * 0.00763859417564 + "CenteredDataForPCA".impute_12 * -0.091512790948 + "CenteredDataForPCA".impute_13 * 0.0162432583719 + "CenteredDataForPCA".impute_14 * -0.190207007613 + "CenteredDataForPCA".impute_15 * 0.00447806986012 + "CenteredDataForPCA".impute_16 * 0.00102379223824 + "CenteredDataForPCA".impute_17 * 0.0189362796987 + "CenteredDataForPCA".impute_18 * 0.0252133644324 + "CenteredDataForPCA".impute_19 * 0.00290414427868 + "CenteredDataForPCA".impute_20 * 0.00176381904964 + "CenteredDataForPCA".impute_21 * 0.0021054829177 + "CenteredDataForPCA".impute_22 * -0.860507445979 + "CenteredDataForPCA".impute_23 * -0.00211047340521 + "CenteredDataForPCA".impute_24 * 0.0386007208026 + "CenteredDataForPCA".impute_25 * 0.00409978696168 + "CenteredDataForPCA".impute_26 * 0.0114296357624 + "CenteredDataForPCA".impute_27 * 0.156279540406 + "CenteredDataForPCA".impute_28 * 0.191177497053 + "CenteredDataForPCA".impute_29 * 0.0309293509104 + "CenteredDataForPCA".impute_30 * 0.0202890503117 + "CenteredDataForPCA".impute_31 * 0.0176591683724 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.139559852313 + "CenteredDataForPCA".impute_3 * 0.0766679112098 + "CenteredDataForPCA".impute_4 * -0.0892113883598 + "CenteredDataForPCA".impute_5 * 0.00195571373566 + "CenteredDataForPCA".impute_6 * -0.00444685265989 + "CenteredDataForPCA".impute_7 * -0.0299475404282 + "CenteredDataForPCA".impute_8 * -0.0279441150236 + "CenteredDataForPCA".impute_9 * -0.0104362499533 + "CenteredDataForPCA".impute_10 * -0.00827800166445 + "CenteredDataForPCA".impute_11 * -0.00454280516837 + "CenteredDataForPCA".impute_12 * -0.0322073954844 + "CenteredDataForPCA".impute_13 * 0.791295671221 + "CenteredDataForPCA".impute_14 * -0.548501632383 + "CenteredDataForPCA".impute_15 * 0.0203427164152 + "CenteredDataForPCA".impute_16 * 0.000445191328945 + "CenteredDataForPCA".impute_17 * -0.0066483016727 + "CenteredDataForPCA".impute_18 * -0.00988467883572 + "CenteredDataForPCA".impute_19 * -0.00263444827124 + "CenteredDataForPCA".impute_20 * 0.00106193404729 + "CenteredDataForPCA".impute_21 * -0.000629812957899 + "CenteredDataForPCA".impute_22 * 0.0283270490783 + "CenteredDataForPCA".impute_23 * -0.0944156308492 + "CenteredDataForPCA".impute_24 * 0.0841866695856 + "CenteredDataForPCA".impute_25 * -0.00310937021522 + "CenteredDataForPCA".impute_26 * -0.0117730196694 + "CenteredDataForPCA".impute_27 * -0.0854753910745 + "CenteredDataForPCA".impute_28 * -0.10041192181 + "CenteredDataForPCA".impute_29 * -0.0284427472526 + "CenteredDataForPCA".impute_30 * -0.0297280860817 + "CenteredDataForPCA".impute_31 * -0.0121927539699 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.419346972301 + "CenteredDataForPCA".impute_3 * 0.0290168452889 + "CenteredDataForPCA".impute_4 * 0.00268885270268 + "CenteredDataForPCA".impute_5 * 0.00344514452278 + "CenteredDataForPCA".impute_6 * 0.0291369356475 + "CenteredDataForPCA".impute_7 * 0.116711657086 + "CenteredDataForPCA".impute_8 * 0.185699905116 + "CenteredDataForPCA".impute_9 * 0.0577209422577 + "CenteredDataForPCA".impute_10 * 0.0517276491191 + "CenteredDataForPCA".impute_11 * 0.0192137159883 + "CenteredDataForPCA".impute_12 * 0.105998470234 + "CenteredDataForPCA".impute_13 * 0.140864382033 + "CenteredDataForPCA".impute_14 * -0.0877215348369 + "CenteredDataForPCA".impute_15 * 0.00144869247197 + "CenteredDataForPCA".impute_16 * 0.00385723906499 + "CenteredDataForPCA".impute_17 * 0.0401767227476 + "CenteredDataForPCA".impute_18 * 0.0788928691349 + "CenteredDataForPCA".impute_19 * 0.00856309877138 + "CenteredDataForPCA".impute_20 * 0.00972156094132 + "CenteredDataForPCA".impute_21 * 0.00624114956825 + "CenteredDataForPCA".impute_22 * 0.42186188502 + "CenteredDataForPCA".impute_23 * -0.0327379835875 + "CenteredDataForPCA".impute_24 * -0.0265059616219 + "CenteredDataForPCA".impute_25 * -0.00175632076387 + "CenteredDataForPCA".impute_26 * 0.0536022007284 + "CenteredDataForPCA".impute_27 * 0.393362884254 + "CenteredDataForPCA".impute_28 * 0.592901604756 + "CenteredDataForPCA".impute_29 * 0.11428366665 + "CenteredDataForPCA".impute_30 * 0.126297594546 + "CenteredDataForPCA".impute_31 * 0.056773865198 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.735141931198 + "CenteredDataForPCA".impute_3 * -0.00177040388188 + "CenteredDataForPCA".impute_4 * -0.0817809788443 + "CenteredDataForPCA".impute_5 * -0.00146297165213 + "CenteredDataForPCA".impute_6 * -0.0463391435283 + "CenteredDataForPCA".impute_7 * -0.0944692077181 + "CenteredDataForPCA".impute_8 * 0.033566692003 + "CenteredDataForPCA".impute_9 * -0.0475382102106 + "CenteredDataForPCA".impute_10 * -0.0552351985121 + "CenteredDataForPCA".impute_11 * -0.0152406055819 + "CenteredDataForPCA".impute_12 * -0.0642159671891 + "CenteredDataForPCA".impute_13 * -0.00412379899766 + "CenteredDataForPCA".impute_14 * 0.0676048260881 + "CenteredDataForPCA".impute_15 * -0.0011586962038 + "CenteredDataForPCA".impute_16 * -0.00432409361036 + "CenteredDataForPCA".impute_17 * 0.0313125858702 + "CenteredDataForPCA".impute_18 * 0.125506514072 + "CenteredDataForPCA".impute_19 * 0.0143712028021 + "CenteredDataForPCA".impute_20 * -0.00651537135143 + "CenteredDataForPCA".impute_21 * 0.00213796926429 + "CenteredDataForPCA".impute_22 * -0.168128351614 + "CenteredDataForPCA".impute_23 * 0.00044646023571 + "CenteredDataForPCA".impute_24 * 0.0026330324616 + "CenteredDataForPCA".impute_25 * 0.000919000401954 + "CenteredDataForPCA".impute_26 * -0.0593045367248 + "CenteredDataForPCA".impute_27 * 0.124613176347 + "CenteredDataForPCA".impute_28 * 0.597245084023 + "CenteredDataForPCA".impute_29 * 0.0227020608957 + "CenteredDataForPCA".impute_30 * -0.0698326846665 + "CenteredDataForPCA".impute_31 * -0.000222345679661 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.218087181974 + "CenteredDataForPCA".impute_3 * 0.00423058843329 + "CenteredDataForPCA".impute_4 * -0.0251180394002 + "CenteredDataForPCA".impute_5 * -0.000200988446458 + "CenteredDataForPCA".impute_6 * 0.00525266399543 + "CenteredDataForPCA".impute_7 * 0.0877581594313 + "CenteredDataForPCA".impute_8 * -0.224378306399 + "CenteredDataForPCA".impute_9 * -0.0404419790544 + "CenteredDataForPCA".impute_10 * 0.115113361656 + "CenteredDataForPCA".impute_11 * 0.00903812811092 + "CenteredDataForPCA".impute_12 * -0.096632695264 + "CenteredDataForPCA".impute_13 * 0.022728385151 + "CenteredDataForPCA".impute_14 * 0.0263044655026 + "CenteredDataForPCA".impute_15 * -0.000231375241012 + "CenteredDataForPCA".impute_16 * -0.00253645692025 + "CenteredDataForPCA".impute_17 * 0.0381654059112 + "CenteredDataForPCA".impute_18 * -0.139282085534 + "CenteredDataForPCA".impute_19 * -0.0120723947345 + "CenteredDataForPCA".impute_20 * 0.0381570258117 + "CenteredDataForPCA".impute_21 * -0.000622637688337 + "CenteredDataForPCA".impute_22 * -0.031062921926 + "CenteredDataForPCA".impute_23 * -0.00446771810127 + "CenteredDataForPCA".impute_24 * -0.00335229867744 + "CenteredDataForPCA".impute_25 * 0.000287275851453 + "CenteredDataForPCA".impute_26 * 0.00734213380903 + "CenteredDataForPCA".impute_27 * 0.740034843629 + "CenteredDataForPCA".impute_28 * -0.335405153153 + "CenteredDataForPCA".impute_29 * 0.003294271288 + "CenteredDataForPCA".impute_30 * 0.424745510008 + "CenteredDataForPCA".impute_31 * 0.0641650533679 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.081026011308 + "CenteredDataForPCA".impute_3 * 0.00198471260085 + "CenteredDataForPCA".impute_4 * -0.00522865767693 + "CenteredDataForPCA".impute_5 * -0.000338365236067 + "CenteredDataForPCA".impute_6 * 0.0361161370292 + "CenteredDataForPCA".impute_7 * -0.0254306035019 + "CenteredDataForPCA".impute_8 * 0.128761314164 + "CenteredDataForPCA".impute_9 * 0.0548374335955 + "CenteredDataForPCA".impute_10 * 0.326359051599 + "CenteredDataForPCA".impute_11 * -0.0023905313396 + "CenteredDataForPCA".impute_12 * 0.146435306385 + "CenteredDataForPCA".impute_13 * -0.00985458034502 + "CenteredDataForPCA".impute_14 * -0.0139810593789 + "CenteredDataForPCA".impute_15 * -0.000225744302359 + "CenteredDataForPCA".impute_16 * 0.000203874389144 + "CenteredDataForPCA".impute_17 * -0.0461430982786 + "CenteredDataForPCA".impute_18 * 0.0509256882566 + "CenteredDataForPCA".impute_19 * 0.003762746906 + "CenteredDataForPCA".impute_20 * 0.0842645063143 + "CenteredDataForPCA".impute_21 * -0.00515315785654 + "CenteredDataForPCA".impute_22 * -0.0631338895187 + "CenteredDataForPCA".impute_23 * -0.000161770543935 + "CenteredDataForPCA".impute_24 * 0.00407595408813 + "CenteredDataForPCA".impute_25 * 0.000214122499032 + "CenteredDataForPCA".impute_26 * 0.0283201064444 + "CenteredDataForPCA".impute_27 * -0.415638333174 + "CenteredDataForPCA".impute_28 * 0.0988608380512 + "CenteredDataForPCA".impute_29 * 0.0473907069533 + "CenteredDataForPCA".impute_30 * 0.799896166088 + "CenteredDataForPCA".impute_31 * -0.0483413295934 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.137865559411 + "CenteredDataForPCA".impute_3 * 0.00707543942802 + "CenteredDataForPCA".impute_4 * 0.0134434455238 + "CenteredDataForPCA".impute_5 * 0.000189595168838 + "CenteredDataForPCA".impute_6 * -0.0537159783889 + "CenteredDataForPCA".impute_7 * -0.0961467980478 + "CenteredDataForPCA".impute_8 * -0.106775624436 + "CenteredDataForPCA".impute_9 * -0.0750229009674 + "CenteredDataForPCA".impute_10 * -0.0524186367607 + "CenteredDataForPCA".impute_11 * -0.0131995161006 + "CenteredDataForPCA".impute_12 * -0.924496275015 + "CenteredDataForPCA".impute_13 * 0.0378188038059 + "CenteredDataForPCA".impute_14 * 0.0857009464213 + "CenteredDataForPCA".impute_15 * 0.00178223809013 + "CenteredDataForPCA".impute_16 * -0.015751722777 + "CenteredDataForPCA".impute_17 * -0.0490555492761 + "CenteredDataForPCA".impute_18 * -0.0588786230006 + "CenteredDataForPCA".impute_19 * -0.0164236828955 + "CenteredDataForPCA".impute_20 * 0.0119559471216 + "CenteredDataForPCA".impute_21 * -0.0134453973605 + "CenteredDataForPCA".impute_22 * 0.122855427038 + "CenteredDataForPCA".impute_23 * -0.00746425242403 + "CenteredDataForPCA".impute_24 * -0.0102334958732 + "CenteredDataForPCA".impute_25 * -0.000262085387382 + "CenteredDataForPCA".impute_26 * -0.0601702394799 + "CenteredDataForPCA".impute_27 * -0.133017877721 + "CenteredDataForPCA".impute_28 * 0.129230577878 + "CenteredDataForPCA".impute_29 * -0.028051556934 + "CenteredDataForPCA".impute_30 * 0.15532718245 + "CenteredDataForPCA".impute_31 * -0.0176897423169 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.141957143853 + "CenteredDataForPCA".impute_3 * -0.00371772552653 + "CenteredDataForPCA".impute_4 * 0.0206841238256 + "CenteredDataForPCA".impute_5 * 7.1623630519e-05 + "CenteredDataForPCA".impute_6 * -0.244151202722 + "CenteredDataForPCA".impute_7 * -0.17313265175 + "CenteredDataForPCA".impute_8 * -0.163916070539 + "CenteredDataForPCA".impute_9 * -0.311870435623 + "CenteredDataForPCA".impute_10 * -0.0920311011841 + "CenteredDataForPCA".impute_11 * -0.036539750006 + "CenteredDataForPCA".impute_12 * 0.175147664682 + "CenteredDataForPCA".impute_13 * -0.00474183049967 + "CenteredDataForPCA".impute_14 * -0.0164085615863 + "CenteredDataForPCA".impute_15 * -0.000394123159839 + "CenteredDataForPCA".impute_16 * -0.0272335855369 + "CenteredDataForPCA".impute_17 * 0.0714537634858 + "CenteredDataForPCA".impute_18 * 0.0966647543121 + "CenteredDataForPCA".impute_19 * -0.0630245504496 + "CenteredDataForPCA".impute_20 * 0.0442032738768 + "CenteredDataForPCA".impute_21 * 0.00662754742688 + "CenteredDataForPCA".impute_22 * 0.0147186017533 + "CenteredDataForPCA".impute_23 * 0.00233182485879 + "CenteredDataForPCA".impute_24 * -0.000673566380115 + "CenteredDataForPCA".impute_25 * -4.67346729523e-05 + "CenteredDataForPCA".impute_26 * -0.391496947401 + "CenteredDataForPCA".impute_27 * 0.0333214534142 + "CenteredDataForPCA".impute_28 * 0.105075524382 + "CenteredDataForPCA".impute_29 * -0.721728013839 + "CenteredDataForPCA".impute_30 * 0.12650275455 + "CenteredDataForPCA".impute_31 * -0.0348926382278 AS anoova_17, "CenteredDataForPCA".impute_2 * 0.0442129323608 + "CenteredDataForPCA".impute_3 * -0.00174411881287 + "CenteredDataForPCA".impute_4 * -0.0108282411559 + "CenteredDataForPCA".impute_5 * 0.0001332466608 + "CenteredDataForPCA".impute_6 * -0.13003060766 + "CenteredDataForPCA".impute_7 * 0.180413129032 + "CenteredDataForPCA".impute_8 * 0.432652559497 + "CenteredDataForPCA".impute_9 * 0.038893944317 + "CenteredDataForPCA".impute_10 * 0.0216862037125 + "CenteredDataForPCA".impute_11 * 0.0376425779253 + "CenteredDataForPCA".impute_12 * -0.164246809202 + "CenteredDataForPCA".impute_13 * -0.00958819753772 + "CenteredDataForPCA".impute_14 * 0.00253430874483 + "CenteredDataForPCA".impute_15 * 0.000673342112406 + "CenteredDataForPCA".impute_16 * 0.00532163111694 + "CenteredDataForPCA".impute_17 * 0.331399675836 + "CenteredDataForPCA".impute_18 * 0.676877070856 + "CenteredDataForPCA".impute_19 * 0.100527901458 + "CenteredDataForPCA".impute_20 * 0.0405424524668 + "CenteredDataForPCA".impute_21 * 0.0535339202127 + "CenteredDataForPCA".impute_22 * 0.022514367693 + "CenteredDataForPCA".impute_23 * 0.0019316476578 + "CenteredDataForPCA".impute_24 * 0.000541453437492 + "CenteredDataForPCA".impute_25 * -0.000130917707494 + "CenteredDataForPCA".impute_26 * -0.26018951411 + "CenteredDataForPCA".impute_27 * 0.0624843149725 + "CenteredDataForPCA".impute_28 * -0.269804019678 + "CenteredDataForPCA".impute_29 * 0.0543397195791 + "CenteredDataForPCA".impute_30 * 0.00227045335658 + "CenteredDataForPCA".impute_31 * 0.0174914412741 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.0897292327606 + "CenteredDataForPCA".impute_3 * -0.00014145888372 + "CenteredDataForPCA".impute_4 * -0.0137775701847 + "CenteredDataForPCA".impute_5 * 1.13279337855e-06 + "CenteredDataForPCA".impute_6 * 0.306212224558 + "CenteredDataForPCA".impute_7 * 0.287099573029 + "CenteredDataForPCA".impute_8 * 0.199451086652 + "CenteredDataForPCA".impute_9 * -0.0138388516332 + "CenteredDataForPCA".impute_10 * 0.438304941355 + "CenteredDataForPCA".impute_11 * 0.080995780496 + "CenteredDataForPCA".impute_12 * -0.146255623732 + "CenteredDataForPCA".impute_13 * -0.00612757296488 + "CenteredDataForPCA".impute_14 * 0.0147257226422 + "CenteredDataForPCA".impute_15 * 0.000180666959585 + "CenteredDataForPCA".impute_16 * 0.0378861545529 + "CenteredDataForPCA".impute_17 * -0.0184806700267 + "CenteredDataForPCA".impute_18 * 0.0213236057297 + "CenteredDataForPCA".impute_19 * -0.0536608155089 + "CenteredDataForPCA".impute_20 * -0.0541504309987 + "CenteredDataForPCA".impute_21 * 0.0083867970187 + "CenteredDataForPCA".impute_22 * 0.00592277426021 + "CenteredDataForPCA".impute_23 * 0.000486674310329 + "CenteredDataForPCA".impute_24 * 0.000613605812249 + "CenteredDataForPCA".impute_25 * -4.23143565921e-05 + "CenteredDataForPCA".impute_26 * 0.412030400894 + "CenteredDataForPCA".impute_27 * 0.00405638129188 + "CenteredDataForPCA".impute_28 * 0.0116402569554 + "CenteredDataForPCA".impute_29 * -0.580515606199 + "CenteredDataForPCA".impute_30 * -0.165287245945 + "CenteredDataForPCA".impute_31 * 0.113530564684 AS anoova_19, "CenteredDataForPCA".impute_2 * -0.0210057741947 + "CenteredDataForPCA".impute_3 * -0.00124960485022 + "CenteredDataForPCA".impute_4 * 0.000616356937939 + "CenteredDataForPCA".impute_5 * 0.000120299752686 + "CenteredDataForPCA".impute_6 * -0.197107021071 + "CenteredDataForPCA".impute_7 * -0.0553153375082 + "CenteredDataForPCA".impute_8 * -0.0420063481834 + "CenteredDataForPCA".impute_9 * 0.0444765528422 + "CenteredDataForPCA".impute_10 * 0.763628283512 + "CenteredDataForPCA".impute_11 * -0.044091363618 + "CenteredDataForPCA".impute_12 * -0.0228731803569 + "CenteredDataForPCA".impute_13 * -0.00236191574981 + "CenteredDataForPCA".impute_14 * -0.00130277683426 + "CenteredDataForPCA".impute_15 * 0.00014235499164 + "CenteredDataForPCA".impute_16 * -0.0534210339609 + "CenteredDataForPCA".impute_17 * -0.055680726199 + "CenteredDataForPCA".impute_18 * -0.17159065005 + "CenteredDataForPCA".impute_19 * -0.00170880696786 + "CenteredDataForPCA".impute_20 * -0.123077156294 + "CenteredDataForPCA".impute_21 * -0.0145669104111 + "CenteredDataForPCA".impute_22 * 0.0131009680805 + "CenteredDataForPCA".impute_23 * 0.00101735245785 + "CenteredDataForPCA".impute_24 * -0.000569726712583 + "CenteredDataForPCA".impute_25 * -6.08533609331e-05 + "CenteredDataForPCA".impute_26 * -0.469474770103 + "CenteredDataForPCA".impute_27 * 0.0295753422426 + "CenteredDataForPCA".impute_28 * 0.0270708048841 + "CenteredDataForPCA".impute_29 * 0.157973615796 + "CenteredDataForPCA".impute_30 * -0.257505985276 + "CenteredDataForPCA".impute_31 * -0.0639356850982 AS anoova_20, "CenteredDataForPCA".impute_2 * -0.0801074429304 + "CenteredDataForPCA".impute_3 * 0.000212853659563 + "CenteredDataForPCA".impute_4 * 0.010939798222 + "CenteredDataForPCA".impute_5 * 0.000122408809581 + "CenteredDataForPCA".impute_6 * 0.0649458800773 + "CenteredDataForPCA".impute_7 * 0.0429470256386 + "CenteredDataForPCA".impute_8 * -0.667235913749 + "CenteredDataForPCA".impute_9 * -0.328925155093 + "CenteredDataForPCA".impute_10 * 0.222382755725 + "CenteredDataForPCA".impute_11 * 0.0233171053098 + "CenteredDataForPCA".impute_12 * 0.0439284077211 + "CenteredDataForPCA".impute_13 * 0.00320684477184 + "CenteredDataForPCA".impute_14 * -0.0091127254163 + "CenteredDataForPCA".impute_15 * 7.44106237338e-05 + "CenteredDataForPCA".impute_16 * 0.0377952551429 + "CenteredDataForPCA".impute_17 * 0.225649739395 + "CenteredDataForPCA".impute_18 * 0.443120249825 + "CenteredDataForPCA".impute_19 * 0.111669447678 + "CenteredDataForPCA".impute_20 * -0.0124646701642 + "CenteredDataForPCA".impute_21 * 0.0387988752347 + "CenteredDataForPCA".impute_22 * 0.00469179080328 + "CenteredDataForPCA".impute_23 * -0.000186035981975 + "CenteredDataForPCA".impute_24 * 0.000317772986596 + "CenteredDataForPCA".impute_25 * -4.9415227029e-05 + "CenteredDataForPCA".impute_26 * 0.249151067203 + "CenteredDataForPCA".impute_27 * -0.0992181812857 + "CenteredDataForPCA".impute_28 * 0.075921206716 + "CenteredDataForPCA".impute_29 * 0.188195406978 + "CenteredDataForPCA".impute_30 * -0.0535602114336 + "CenteredDataForPCA".impute_31 * 0.0562031123023 AS anoova_21, "CenteredDataForPCA".impute_2 * 0.0594747776517 + "CenteredDataForPCA".impute_3 * -0.000508486619145 + "CenteredDataForPCA".impute_4 * -0.0100150531786 + "CenteredDataForPCA".impute_5 * 6.72130539212e-05 + "CenteredDataForPCA".impute_6 * 0.0505875320947 + "CenteredDataForPCA".impute_7 * 0.7864764472 + "CenteredDataForPCA".impute_8 * -0.207298286137 + "CenteredDataForPCA".impute_9 * 0.0195295923316 + "CenteredDataForPCA".impute_10 * -0.159737119128 + "CenteredDataForPCA".impute_11 * 0.176680619228 + "CenteredDataForPCA".impute_12 * 0.0113499142918 + "CenteredDataForPCA".impute_13 * -0.000252359538842 + "CenteredDataForPCA".impute_14 * -0.00416204243065 + "CenteredDataForPCA".impute_15 * 0.000150857164343 + "CenteredDataForPCA".impute_16 * -0.0661066896033 + "CenteredDataForPCA".impute_17 * -0.0407953355154 + "CenteredDataForPCA".impute_18 * -0.15152506814 + "CenteredDataForPCA".impute_19 * -0.0236680657571 + "CenteredDataForPCA".impute_20 * 0.0401205396569 + "CenteredDataForPCA".impute_21 * 0.0234074016796 + "CenteredDataForPCA".impute_22 * -0.00614078602133 + "CenteredDataForPCA".impute_23 * 0.000680390514182 + "CenteredDataForPCA".impute_24 * 0.00123096655794 + "CenteredDataForPCA".impute_25 * -2.07826845052e-05 + "CenteredDataForPCA".impute_26 * -0.371434661475 + "CenteredDataForPCA".impute_27 * -0.175980615374 + "CenteredDataForPCA".impute_28 * 0.0948178123331 + "CenteredDataForPCA".impute_29 * 0.0197712542578 + "CenteredDataForPCA".impute_30 * 0.0391032580327 + "CenteredDataForPCA".impute_31 * 0.251854689421 AS anoova_22, "CenteredDataForPCA".impute_2 * -0.00872363409187 + "CenteredDataForPCA".impute_3 * 0.000325522688523 + "CenteredDataForPCA".impute_4 * 0.00317936985183 + "CenteredDataForPCA".impute_5 * -8.61054786232e-05 + "CenteredDataForPCA".impute_6 * -0.123800316281 + "CenteredDataForPCA".impute_7 * -0.307516380372 + "CenteredDataForPCA".impute_8 * 0.0674748546256 + "CenteredDataForPCA".impute_9 * -0.00994859921767 + "CenteredDataForPCA".impute_10 * 0.0228284660156 + "CenteredDataForPCA".impute_11 * 0.204533392179 + "CenteredDataForPCA".impute_12 * 0.0142505915938 + "CenteredDataForPCA".impute_13 * 0.00132642699543 + "CenteredDataForPCA".impute_14 * 0.000211743590038 + "CenteredDataForPCA".impute_15 * -4.80315787047e-05 + "CenteredDataForPCA".impute_16 * -0.0143604235627 + "CenteredDataForPCA".impute_17 * -0.0531878430365 + "CenteredDataForPCA".impute_18 * 0.00233095913842 + "CenteredDataForPCA".impute_19 * -0.020607189871 + "CenteredDataForPCA".impute_20 * -0.117416101514 + "CenteredDataForPCA".impute_21 * 0.11288976854 + "CenteredDataForPCA".impute_22 * -0.00681318530514 + "CenteredDataForPCA".impute_23 * -0.000314021728181 + "CenteredDataForPCA".impute_24 * 0.00028526163231 + "CenteredDataForPCA".impute_25 * 2.78114736115e-05 + "CenteredDataForPCA".impute_26 * 0.00774928694586 + "CenteredDataForPCA".impute_27 * -0.0402655019192 + "CenteredDataForPCA".impute_28 * -0.0333052793974 + "CenteredDataForPCA".impute_29 * 0.0367880306548 + "CenteredDataForPCA".impute_30 * 0.0197580345561 + "CenteredDataForPCA".impute_31 * 0.899017368077 AS anoova_23, "CenteredDataForPCA".impute_2 * -0.00457847380819 + "CenteredDataForPCA".impute_3 * 0.000570803677204 + "CenteredDataForPCA".impute_4 * 0.00125149829788 + "CenteredDataForPCA".impute_5 * -8.95193306545e-06 + "CenteredDataForPCA".impute_6 * 0.0576678236276 + "CenteredDataForPCA".impute_7 * 0.0681084243651 + "CenteredDataForPCA".impute_8 * 0.0975431968694 + "CenteredDataForPCA".impute_9 * -0.370822357195 + "CenteredDataForPCA".impute_10 * -0.0275978830681 + "CenteredDataForPCA".impute_11 * 0.0120861421463 + "CenteredDataForPCA".impute_12 * 0.0166061174869 + "CenteredDataForPCA".impute_13 * 0.00448926294996 + "CenteredDataForPCA".impute_14 * 0.00125850374336 + "CenteredDataForPCA".impute_15 * -0.000136165606615 + "CenteredDataForPCA".impute_16 * -0.118579493056 + "CenteredDataForPCA".impute_17 * -0.802419200219 + "CenteredDataForPCA".impute_18 * 0.320221000817 + "CenteredDataForPCA".impute_19 * -0.0365853433843 + "CenteredDataForPCA".impute_20 * -0.226926628044 + "CenteredDataForPCA".impute_21 * -0.0770139814136 + "CenteredDataForPCA".impute_22 * -0.00197252552947 + "CenteredDataForPCA".impute_23 * -0.000594055090512 + "CenteredDataForPCA".impute_24 * -0.00034022382161 + "CenteredDataForPCA".impute_25 * 2.29399965227e-05 + "CenteredDataForPCA".impute_26 * -0.040756755621 + "CenteredDataForPCA".impute_27 * 0.0845421997677 + "CenteredDataForPCA".impute_28 * -0.065266364273 + "CenteredDataForPCA".impute_29 * 0.0891754581556 + "CenteredDataForPCA".impute_30 * 0.0196427496019 + "CenteredDataForPCA".impute_31 * -0.0559332519854 AS anoova_24, "CenteredDataForPCA".impute_2 * 0.0282894830218 + "CenteredDataForPCA".impute_3 * 7.33059897319e-05 + "CenteredDataForPCA".impute_4 * -0.00358436086863 + "CenteredDataForPCA".impute_5 * -2.64959224207e-05 + "CenteredDataForPCA".impute_6 * -0.684974204485 + "CenteredDataForPCA".impute_7 * 0.247366571472 + "CenteredDataForPCA".impute_8 * 0.221208939664 + "CenteredDataForPCA".impute_9 * -0.461447928747 + "CenteredDataForPCA".impute_10 * 0.0289096395795 + "CenteredDataForPCA".impute_11 * -0.0134513145348 + "CenteredDataForPCA".impute_12 * 0.0080069632373 + "CenteredDataForPCA".impute_13 * 0.00198785625644 + "CenteredDataForPCA".impute_14 * 0.000417372804084 + "CenteredDataForPCA".impute_15 * -3.67867124203e-05 + "CenteredDataForPCA".impute_16 * 0.116955811321 + "CenteredDataForPCA".impute_17 * 0.0920949353452 + "CenteredDataForPCA".impute_18 * -0.232860818706 + "CenteredDataForPCA".impute_19 * -0.0237982721445 + "CenteredDataForPCA".impute_20 * 0.00640992514069 + "CenteredDataForPCA".impute_21 * -0.000179257890355 + "CenteredDataForPCA".impute_22 * -0.003655972751 + "CenteredDataForPCA".impute_23 * -0.000328916830862 + "CenteredDataForPCA".impute_24 * 7.4649802186e-05 + "CenteredDataForPCA".impute_25 * 1.5239297534e-05 + "CenteredDataForPCA".impute_26 * 0.338845353547 + "CenteredDataForPCA".impute_27 * -0.0471308734676 + "CenteredDataForPCA".impute_28 * -0.0118303713601 + "CenteredDataForPCA".impute_29 * 0.103567515389 + "CenteredDataForPCA".impute_30 * -0.00507940555306 + "CenteredDataForPCA".impute_31 * -0.0303265920965 AS anoova_25, "CenteredDataForPCA".impute_2 * 0.00359617410954 + "CenteredDataForPCA".impute_3 * 0.000432289948373 + "CenteredDataForPCA".impute_4 * -0.00030776393199 + "CenteredDataForPCA".impute_5 * -1.83005652947e-05 + "CenteredDataForPCA".impute_6 * -0.470763997476 + "CenteredDataForPCA".impute_7 * 0.112910548365 + "CenteredDataForPCA".impute_8 * -0.246083833981 + "CenteredDataForPCA".impute_9 * 0.606124799964 + "CenteredDataForPCA".impute_10 * -0.0379117864967 + "CenteredDataForPCA".impute_11 * -0.0637956992786 + "CenteredDataForPCA".impute_12 * -0.00548812336326 + "CenteredDataForPCA".impute_13 * 0.00336786193526 + "CenteredDataForPCA".impute_14 * 0.00096535851489 + "CenteredDataForPCA".impute_15 * 4.85535217511e-05 + "CenteredDataForPCA".impute_16 * 0.0191129277625 + "CenteredDataForPCA".impute_17 * -0.15177670131 + "CenteredDataForPCA".impute_18 * 0.204174154868 + "CenteredDataForPCA".impute_19 * -0.00512935750574 + "CenteredDataForPCA".impute_20 * -0.444877141363 + "CenteredDataForPCA".impute_21 * -0.0290928878787 + "CenteredDataForPCA".impute_22 * -0.00157275837881 + "CenteredDataForPCA".impute_23 * -0.000510381910138 + "CenteredDataForPCA".impute_24 * -3.00466191546e-05 + "CenteredDataForPCA".impute_25 * 6.3234895966e-06 + "CenteredDataForPCA".impute_26 * 0.18444078751 + "CenteredDataForPCA".impute_27 * 0.000905167513604 + "CenteredDataForPCA".impute_28 * 0.0249243202588 + "CenteredDataForPCA".impute_29 * -0.166799319858 + "CenteredDataForPCA".impute_30 * 0.0617567462697 + "CenteredDataForPCA".impute_31 * -0.0443746763047 AS anoova_26, "CenteredDataForPCA".impute_2 * -0.00160336173297 + "CenteredDataForPCA".impute_3 * -0.000685637301982 + "CenteredDataForPCA".impute_4 * 0.00013399332795 + "CenteredDataForPCA".impute_5 * -6.11786890429e-06 + "CenteredDataForPCA".impute_6 * -0.233739580879 + "CenteredDataForPCA".impute_7 * 0.000564508610147 + "CenteredDataForPCA".impute_8 * -0.107297992561 + "CenteredDataForPCA".impute_9 * 0.234238245691 + "CenteredDataForPCA".impute_10 * 0.0910728702254 + "CenteredDataForPCA".impute_11 * 0.0270861186834 + "CenteredDataForPCA".impute_12 * -0.0102803828816 + "CenteredDataForPCA".impute_13 * -0.00405065872986 + "CenteredDataForPCA".impute_14 * -0.0012251067388 + "CenteredDataForPCA".impute_15 * 9.14651056621e-05 + "CenteredDataForPCA".impute_16 * 0.106982586718 + "CenteredDataForPCA".impute_17 * -0.342920796062 + "CenteredDataForPCA".impute_18 * 0.151034302669 + "CenteredDataForPCA".impute_19 * -0.00396060033114 + "CenteredDataForPCA".impute_20 * 0.830872058204 + "CenteredDataForPCA".impute_21 * -0.0133614025781 + "CenteredDataForPCA".impute_22 * 0.00113210755471 + "CenteredDataForPCA".impute_23 * 0.000660844086827 + "CenteredDataForPCA".impute_24 * 0.000144679382334 + "CenteredDataForPCA".impute_25 * -9.13824976579e-06 + "CenteredDataForPCA".impute_26 * 0.0759773477534 + "CenteredDataForPCA".impute_27 * 0.0331512433191 + "CenteredDataForPCA".impute_28 * 0.00162159306289 + "CenteredDataForPCA".impute_29 * -0.0432253501835 + "CenteredDataForPCA".impute_30 * -0.119316597542 + "CenteredDataForPCA".impute_31 * 0.0667516067565 AS anoova_27, "CenteredDataForPCA".impute_2 * -0.00279341068362 + "CenteredDataForPCA".impute_3 * -0.000203286434083 + "CenteredDataForPCA".impute_4 * -0.00014849978243 + "CenteredDataForPCA".impute_5 * 2.79755999372e-05 + "CenteredDataForPCA".impute_6 * 0.0423689945215 + "CenteredDataForPCA".impute_7 * 0.0447732651785 + "CenteredDataForPCA".impute_8 * 0.0287280747115 + "CenteredDataForPCA".impute_9 * -0.0251468693641 + "CenteredDataForPCA".impute_10 * -0.0173524457874 + "CenteredDataForPCA".impute_11 * -0.336239624172 + "CenteredDataForPCA".impute_12 * -0.0035410794243 + "CenteredDataForPCA".impute_13 * -0.000389325162431 + "CenteredDataForPCA".impute_14 * -0.00136868855915 + "CenteredDataForPCA".impute_15 * 5.15075948126e-05 + "CenteredDataForPCA".impute_16 * 0.323321168764 + "CenteredDataForPCA".impute_17 * -0.108304964125 + "CenteredDataForPCA".impute_18 * -0.0917739425085 + "CenteredDataForPCA".impute_19 * 0.854802093979 + "CenteredDataForPCA".impute_20 * -0.0362928822373 + "CenteredDataForPCA".impute_21 * -0.0200238568421 + "CenteredDataForPCA".impute_22 * 0.00177504178676 + "CenteredDataForPCA".impute_23 * 0.00015025429179 + "CenteredDataForPCA".impute_24 * 9.9445141628e-05 + "CenteredDataForPCA".impute_25 * -1.32750118268e-05 + "CenteredDataForPCA".impute_26 * -0.0598909048665 + "CenteredDataForPCA".impute_27 * -0.00110335473358 + "CenteredDataForPCA".impute_28 * 0.00600223989656 + "CenteredDataForPCA".impute_29 * -0.0835480472834 + "CenteredDataForPCA".impute_30 * 0.0156674415775 + "CenteredDataForPCA".impute_31 * 0.115823522312 AS anoova_28, "CenteredDataForPCA".impute_2 * -0.00325869729818 + "CenteredDataForPCA".impute_3 * -0.000108812487035 + "CenteredDataForPCA".impute_4 * 0.00059248149888 + "CenteredDataForPCA".impute_5 * -2.69334809073e-06 + "CenteredDataForPCA".impute_6 * -0.0443105873134 + "CenteredDataForPCA".impute_7 * -0.108470080882 + "CenteredDataForPCA".impute_8 * -0.00789825836293 + "CenteredDataForPCA".impute_9 * 0.0174453235166 + "CenteredDataForPCA".impute_10 * -0.00130715896303 + "CenteredDataForPCA".impute_11 * 0.888814612895 + "CenteredDataForPCA".impute_12 * 0.00208214817884 + "CenteredDataForPCA".impute_13 * -0.000416851132847 + "CenteredDataForPCA".impute_14 * -0.00130535119799 + "CenteredDataForPCA".impute_15 * 4.73766465399e-05 + "CenteredDataForPCA".impute_16 * 0.179728738702 + "CenteredDataForPCA".impute_17 * -0.0375730400783 + "CenteredDataForPCA".impute_18 * -0.0478504389145 + "CenteredDataForPCA".impute_19 * 0.307352340168 + "CenteredDataForPCA".impute_20 * -0.0557502875412 + "CenteredDataForPCA".impute_21 * 0.02404734113 + "CenteredDataForPCA".impute_22 * 0.000898500542013 + "CenteredDataForPCA".impute_23 * 0.000121159573375 + "CenteredDataForPCA".impute_24 * 3.92446495937e-05 + "CenteredDataForPCA".impute_25 * -7.82704449624e-06 + "CenteredDataForPCA".impute_26 * -0.0163749618018 + "CenteredDataForPCA".impute_27 * 0.0253473355907 + "CenteredDataForPCA".impute_28 * 0.00873144088227 + "CenteredDataForPCA".impute_29 * -0.0309344589356 + "CenteredDataForPCA".impute_30 * 0.00696062043032 + "CenteredDataForPCA".impute_31 * -0.244427990614 AS anoova_29, "CenteredDataForPCA".impute_2 * -0.000512865809477 + "CenteredDataForPCA".impute_3 * -0.000128702529573 + "CenteredDataForPCA".impute_4 * 0.000282547546945 + "CenteredDataForPCA".impute_5 * -1.30371538602e-05 + "CenteredDataForPCA".impute_6 * 0.0943925291573 + "CenteredDataForPCA".impute_7 * 0.00681916699068 + "CenteredDataForPCA".impute_8 * -0.0144289057638 + "CenteredDataForPCA".impute_9 * -0.017348124263 + "CenteredDataForPCA".impute_10 * -0.00882902913416 + "CenteredDataForPCA".impute_11 * -0.0474686275122 + "CenteredDataForPCA".impute_12 * -0.00363257185139 + "CenteredDataForPCA".impute_13 * -0.000472658846586 + "CenteredDataForPCA".impute_14 * 0.00119657801191 + "CenteredDataForPCA".impute_15 * -2.03423346575e-05 + "CenteredDataForPCA".impute_16 * 0.901248743455 + "CenteredDataForPCA".impute_17 * -0.0434291556978 + "CenteredDataForPCA".impute_18 * 0.0496009337886 + "CenteredDataForPCA".impute_19 * -0.376480980986 + "CenteredDataForPCA".impute_20 * -0.0978356412048 + "CenteredDataForPCA".impute_21 * -0.00775315348119 + "CenteredDataForPCA".impute_22 * 5.15472695746e-05 + "CenteredDataForPCA".impute_23 * 0.000107829473308 + "CenteredDataForPCA".impute_24 * -0.000115443883163 + "CenteredDataForPCA".impute_25 * 5.20580200135e-06 + "CenteredDataForPCA".impute_26 * -0.132092425241 + "CenteredDataForPCA".impute_27 * 8.29891880774e-05 + "CenteredDataForPCA".impute_28 * -0.00108953389706 + "CenteredDataForPCA".impute_29 * 0.0479998985024 + "CenteredDataForPCA".impute_30 * 0.0128640352627 + "CenteredDataForPCA".impute_31 * 0.0174174205903 AS anoova_30, "CenteredDataForPCA".impute_2 * 0.000648447162293 + "CenteredDataForPCA".impute_3 * 4.67664636913e-06 + "CenteredDataForPCA".impute_4 * -0.000153201139512 + "CenteredDataForPCA".impute_5 * 1.78631232613e-06 + "CenteredDataForPCA".impute_6 * 0.00295544129565 + "CenteredDataForPCA".impute_7 * 0.0131734820796 + "CenteredDataForPCA".impute_8 * -0.00401346519396 + "CenteredDataForPCA".impute_9 * 0.00422724702112 + "CenteredDataForPCA".impute_10 * -0.00219542354972 + "CenteredDataForPCA".impute_11 * -0.0613701891905 + "CenteredDataForPCA".impute_12 * -0.00651778390706 + "CenteredDataForPCA".impute_13 * -8.77127241394e-05 + "CenteredDataForPCA".impute_14 * 0.000798704359287 + "CenteredDataForPCA".impute_15 * 7.20344350944e-06 + "CenteredDataForPCA".impute_16 * 0.00231482576251 + "CenteredDataForPCA".impute_17 * -0.0955572739556 + "CenteredDataForPCA".impute_18 * -0.0229448848078 + "CenteredDataForPCA".impute_19 * -0.00254907673801 + "CenteredDataForPCA".impute_20 * -0.0100353743442 + "CenteredDataForPCA".impute_21 * 0.986791086742 + "CenteredDataForPCA".impute_22 * 0.000451134630538 + "CenteredDataForPCA".impute_23 * 1.35174619003e-06 + "CenteredDataForPCA".impute_24 * -6.58155924648e-05 + "CenteredDataForPCA".impute_25 * -2.32842029354e-07 + "CenteredDataForPCA".impute_26 * 0.00502792306392 + "CenteredDataForPCA".impute_27 * 0.00924822559714 + "CenteredDataForPCA".impute_28 * 0.00492968092446 + "CenteredDataForPCA".impute_29 * -0.00298937509293 + "CenteredDataForPCA".impute_30 * 0.0034000373892 + "CenteredDataForPCA".impute_31 * -0.110843881057 AS anoova_31 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.04469788074493408) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 3.1216866970062256) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -40.071144104003906) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= 0.004060226026922464) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.3273855447769165) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_21 <= 0.0024158924352377653) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_30 <= 0.0006387729663401842) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_14' AS feature, -0.04469788074493408 AS threshold, 358 AS count, 0 AS depth, 0.36379613356766255 AS "Proba_0.0", -1.01116164086 AS "LogProba_0.0", 0.6362038664323374 AS "Proba_1.0", -0.452236222301 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_8' AS feature, 3.1216866970062256 AS threshold, 57 AS count, 1 AS depth, 0.7282608695652174 AS "Proba_0.0", -0.317095957658 AS "LogProba_0.0", 0.2717391304347826 AS "Proba_1.0", -1.30291275218 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -40.071144104003906 AS threshold, 53 AS count, 2 AS depth, 0.7857142857142857 AS "Proba_0.0", -0.241162056817 AS "LogProba_0.0", 0.21428571428571427 AS "Proba_1.0", -1.54044504095 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, 0.28 AS "Proba_0.0", -1.27296567581 AS "LogProba_0.0", 0.72 AS "Proba_1.0", -0.328504066972 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_19' AS feature, 0.004060226026922464 AS threshold, 4 AS count, 2 AS depth, 0.125 AS "Proba_0.0", -2.07944154168 AS "LogProba_0.0", 0.875 AS "Proba_1.0", -0.133531392625 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_10' AS feature, -0.3273855447769165 AS threshold, 301 AS count, 1 AS depth, 0.29350104821802936 AS "Proba_0.0", -1.22587406828 AS "LogProba_0.0", 0.7064989517819706 AS "Proba_1.0", -0.347433560536 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_21' AS feature, 0.0024158924352377653 AS threshold, 48 AS count, 2 AS depth, 0.6951219512195121 AS "Proba_0.0", -0.36366797943 AS "LogProba_0.0", 0.3048780487804878 AS "Proba_1.0", -1.1878434224 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, 0.5714285714285714 AS "Proba_0.0", -0.559615787935 AS "LogProba_0.0", 0.42857142857142855 AS "Proba_1.0", -0.847297860387 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, 0.9615384615384616 AS "Proba_0.0", -0.0392207131533 AS "LogProba_0.0", 0.038461538461538464 AS "Proba_1.0", -3.25809653802 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_30' AS feature, 0.0006387729663401842 AS threshold, 253 AS count, 2 AS depth, 0.21012658227848102 AS "Proba_0.0", -1.5600451571 AS "LogProba_0.0", 0.789873417721519 AS "Proba_1.0", -0.235882577092 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 198 AS count, 3 AS depth, 0.15654952076677317 AS "Proba_0.0", -1.85438289243 AS "LogProba_0.0", 0.8434504792332268 AS "Proba_1.0", -0.170254087394 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 55 AS count, 3 AS depth, 0.4146341463414634 AS "Proba_0.0", -0.880358722648 AS "LogProba_0.0", 0.5853658536585366 AS "Proba_1.0", -0.535518236356 AS "LogProba_1.0", 1 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data"."Proba_0.0" AS "Proba_0.0", "DT_node_data"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data"."Proba_1.0" AS "Proba_1.0", "DT_node_data"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0.0" AS "Proba_0_0", "DT_Output"."LogProba_0.0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1.0" AS "Proba_0_1", "DT_Output"."LogProba_1.0" AS "LogProba_0_1" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -1.9307100772857666) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_31 <= 0.0014134328812360764) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_22 <= 0.013736337423324585) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.25225377082824707) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -15.853187561035156) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.04444342851638794) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -1.9307100772857666 AS threshold, 362 AS count, 0 AS depth, 0.39191564147627417 AS "Proba_0.0", -0.936708662666 AS "LogProba_0.0", 0.6080843585237259 AS "Proba_1.0", -0.497441659069 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_31' AS feature, 0.0014134328812360764 AS threshold, 34 AS count, 1 AS depth, 0.8545454545454545 AS "Proba_0.0", -0.157185583522 AS "LogProba_0.0", 0.14545454545454545 AS "Proba_1.0", -1.92789164355 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_22' AS feature, 0.013736337423324585 AS threshold, 32 AS count, 2 AS depth, 0.8867924528301887 AS "Proba_0.0", -0.120144311842 AS "LogProba_0.0", 0.11320754716981132 AS "Proba_1.0", -2.17853244432 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, 0.9591836734693877 AS "Proba_0.0", -0.0416726964006 AS "LogProba_0.0", 0.04081632653061224 AS "Proba_1.0", -3.19867311755 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_10' AS feature, -0.25225377082824707 AS threshold, 328 AS count, 1 AS depth, 0.3424124513618677 AS "Proba_0.0", -1.07173927042 AS "LogProba_0.0", 0.6575875486381323 AS "Proba_1.0", -0.419177369972 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, 'anoova_4' AS feature, -15.853187561035156 AS threshold, 74 AS count, 2 AS depth, 0.6666666666666666 AS "Proba_0.0", -0.405465108108 AS "LogProba_0.0", 0.3333333333333333 AS "Proba_1.0", -1.09861228867 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 56 AS count, 3 AS depth, 0.5324675324675324 AS "Proba_0.0", -0.630233355149 AS "LogProba_0.0", 0.4675324675324675 AS "Proba_1.0", -0.760286483398 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, 'anoova_14' AS feature, -0.04444342851638794 AS threshold, 254 AS count, 2 AS depth, 0.2561576354679803 AS "Proba_0.0", -1.36196226046 AS "LogProba_0.0", 0.7438423645320197 AS "Proba_1.0", -0.295926142227 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, 0.6666666666666666 AS "Proba_0.0", -0.405465108108 AS "LogProba_0.0", 0.3333333333333333 AS "Proba_1.0", -1.09861228867 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 220 AS count, 3 AS depth, 0.20498614958448755 AS "Proba_0.0", -1.58481286513 AS "LogProba_0.0", 0.7950138504155124 AS "Proba_1.0", -0.229395742573 AS "LogProba_1.0", 1 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1"."Proba_0.0" AS "Proba_0.0", "DT_node_data_1"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_1"."Proba_1.0" AS "Proba_1.0", "DT_node_data_1"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0.0" AS "Proba_1_0", "DT_Output_1"."LogProba_0.0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1.0" AS "Proba_1_1", "DT_Output_1"."LogProba_1.0" AS "LogProba_1_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -2.0092291831970215) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 5.707529067993164) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= 0.06859766691923141) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 105.98091125488281) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= 0.13569329679012299) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_21 <= 0.0031778602860867977) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.3526076674461365) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -2.0092291831970215 AS threshold, 372 AS count, 0 AS depth, 0.3866432337434095 AS "Proba_0.0", -0.950252887774 AS "LogProba_0.0", 0.6133567662565905 AS "Proba_1.0", -0.488808511924 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 5.707529067993164 AS threshold, 31 AS count, 1 AS depth, 0.78 AS "Proba_0.0", -0.248461359298 AS "LogProba_0.0", 0.22 AS "Proba_1.0", -1.51412773263 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_14' AS feature, 0.06859766691923141 AS threshold, 9 AS count, 2 AS depth, 0.35714285714285715 AS "Proba_0.0", -1.02961941718 AS "LogProba_0.0", 0.6428571428571429 AS "Proba_1.0", -0.441832752279 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.1 AS "Proba_0.0", -2.30258509299 AS "LogProba_0.0", 0.9 AS "Proba_1.0", -0.105360515658 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_3' AS feature, 105.98091125488281 AS threshold, 22 AS count, 2 AS depth, 0.9444444444444444 AS "Proba_0.0", -0.0571584138399 AS "LogProba_0.0", 0.05555555555555555 AS "Proba_1.0", -2.8903717579 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 0.5 AS "Proba_0.0", -0.69314718056 AS "LogProba_0.0", 0.5 AS "Proba_1.0", -0.69314718056 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_12' AS feature, 0.13569329679012299 AS threshold, 341 AS count, 1 AS depth, 0.348747591522158 AS "Proba_0.0", -1.0534068519 AS "LogProba_0.0", 0.651252408477842 AS "Proba_1.0", -0.428857987683 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_21' AS feature, 0.0031778602860867977 AS threshold, 298 AS count, 2 AS depth, 0.2930648769574944 AS "Proba_0.0", -1.22736127141 AS "LogProba_0.0", 0.7069351230425056 AS "Proba_1.0", -0.346816381027 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 189 AS count, 3 AS depth, 0.20408163265306123 AS "Proba_0.0", -1.58923520512 AS "LogProba_0.0", 0.7959183673469388 AS "Proba_1.0", -0.228258651981 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 109 AS count, 3 AS depth, 0.46405228758169936 AS "Proba_0.0", -0.767758044351 AS "LogProba_0.0", 0.5359477124183006 AS "Proba_1.0", -0.623718674128 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_9' AS feature, 0.3526076674461365 AS threshold, 43 AS count, 2 AS depth, 0.6944444444444444 AS "Proba_0.0", -0.364643113588 AS "LogProba_0.0", 0.3055555555555556 AS "Proba_1.0", -1.18562366566 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 0.8214285714285714 AS "Proba_0.0", -0.196710294246 AS "LogProba_0.0", 0.17857142857142858 AS "Proba_1.0", -1.72276659774 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.75 AS "Proba_1.0", -0.287682072452 AS "LogProba_1.0", 1 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2"."Proba_0.0" AS "Proba_0.0", "DT_node_data_2"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_2"."Proba_1.0" AS "Proba_1.0", "DT_node_data_2"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0.0" AS "Proba_2_0", "DT_Output_2"."LogProba_0.0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1.0" AS "Proba_2_1", "DT_Output_2"."LogProba_1.0" AS "LogProba_2_1" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -15.81069564819336) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 132.2965545654297) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_31 <= 0.0006102303741499782) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -6.111907005310059) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.3850676417350769) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_24 <= -0.004015783779323101) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -15.81069564819336 AS threshold, 372 AS count, 0 AS depth, 0.351493848857645 AS "Proba_0.0", -1.04556306758 AS "LogProba_0.0", 0.648506151142355 AS "Proba_1.0", -0.433083790086 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 132.2965545654297 AS threshold, 60 AS count, 1 AS depth, 0.8105263157894737 AS "Proba_0.0", -0.210071469747 AS "LogProba_0.0", 0.18947368421052632 AS "Proba_1.0", -1.6635051337 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_31' AS feature, 0.0006102303741499782 AS threshold, 18 AS count, 2 AS depth, 0.28 AS "Proba_0.0", -1.27296567581 AS "LogProba_0.0", 0.72 AS "Proba_1.0", -0.328504066972 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, 0.14285714285714285 AS "Proba_0.0", -1.94591014906 AS "LogProba_0.0", 0.8571428571428571 AS "Proba_1.0", -0.154150679827 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 42 AS count, 2 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_5' AS feature, -6.111907005310059 AS threshold, 312 AS count, 1 AS depth, 0.25949367088607594 AS "Proba_0.0", -1.34902296632 AS "LogProba_0.0", 0.740506329113924 AS "Proba_1.0", -0.300421098229 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, 'anoova_7' AS feature, -0.3850676417350769 AS threshold, 56 AS count, 2 AS depth, 0.7439024390243902 AS "Proba_0.0", -0.295845383091 AS "LogProba_0.0", 0.25609756097560976 AS "Proba_1.0", -1.36219680954 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, 0.5454545454545454 AS "Proba_0.0", -0.60613580357 AS "LogProba_0.0", 0.45454545454545453 AS "Proba_1.0", -0.788457360364 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, 0.8775510204081632 AS "Proba_0.0", -0.130620182417 AS "LogProba_0.0", 0.12244897959183673 AS "Proba_1.0", -2.10006082888 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, 'anoova_24' AS feature, -0.004015783779323101 AS threshold, 256 AS count, 2 AS depth, 0.15816326530612246 AS "Proba_0.0", -1.84412745475 AS "LogProba_0.0", 0.8418367346938775 AS "Proba_1.0", -0.17216918533 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, 0.4166666666666667 AS "Proba_0.0", -0.875468737354 AS "LogProba_0.0", 0.5833333333333334 AS "Proba_1.0", -0.538996500733 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 218 AS count, 3 AS depth, 0.11144578313253012 AS "Proba_0.0", -2.19421705627 AS "LogProba_0.0", 0.8885542168674698 AS "Proba_1.0", -0.118159612577 AS "LogProba_1.0", 1 AS "Decision") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3"."Proba_0.0" AS "Proba_0.0", "DT_node_data_3"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_3"."Proba_1.0" AS "Proba_1.0", "DT_node_data_3"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0.0" AS "Proba_3_0", "DT_Output_3"."LogProba_0.0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1.0" AS "Proba_3_1", "DT_Output_3"."LogProba_1.0" AS "LogProba_3_1" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= -0.15112003684043884) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= -0.014902941882610321) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -173.7442626953125) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -1.1756432056427002) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_13' AS feature, -0.15112003684043884 AS threshold, 375 AS count, 0 AS depth, 0.3936731107205624 AS "Proba_0.0", -0.932234382271 AS "LogProba_0.0", 0.6063268892794376 AS "Proba_1.0", -0.500336017095 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 1 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_17' AS feature, -0.014902941882610321 AS threshold, 362 AS count, 1 AS depth, 0.3738656987295826 AS "Proba_0.0", -0.983858640363 AS "LogProba_0.0", 0.6261343012704175 AS "Proba_1.0", -0.468190392122 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, 'anoova_2' AS feature, -173.7442626953125 AS threshold, 101 AS count, 2 AS depth, 0.6103896103896104 AS "Proba_0.0", -0.493657820144 AS "LogProba_0.0", 0.38961038961038963 AS "Proba_1.0", -0.942608040192 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, 0.0847457627118644 AS "Proba_0.0", -2.46809953147 AS "LogProba_0.0", 0.9152542372881356 AS "Proba_1.0", -0.0885533973414 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 57 AS count, 3 AS depth, 0.9368421052631579 AS "Proba_0.0", -0.0652405218684 AS "LogProba_0.0", 0.06315789473684211 AS "Proba_1.0", -2.76211742237 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_5' AS feature, -1.1756432056427002 AS threshold, 261 AS count, 2 AS depth, 0.28211586901763225 AS "Proba_0.0", -1.26543740939 AS "LogProba_0.0", 0.7178841309823678 AS "Proba_1.0", -0.331447100419 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 87 AS count, 3 AS depth, 0.5407407407407407 AS "Proba_0.0", -0.61481533729 AS "LogProba_0.0", 0.45925925925925926 AS "Proba_1.0", -0.778140393393 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 174 AS count, 3 AS depth, 0.14885496183206107 AS "Proba_0.0", -1.90478285763 AS "LogProba_0.0", 0.851145038167939 AS "Proba_1.0", -0.161172732301 AS "LogProba_1.0", 1 AS "Decision") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4"."Proba_0.0" AS "Proba_0.0", "DT_node_data_4"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_4"."Proba_1.0" AS "Proba_1.0", "DT_node_data_4"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0.0" AS "Proba_4_0", "DT_Output_4"."LogProba_0.0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1.0" AS "Proba_4_1", "DT_Output_4"."LogProba_1.0" AS "LogProba_4_1" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -62.373355865478516) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_26 <= 0.010723909363150597) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -2.154202938079834) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.015727080404758453) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_28 <= -0.0027483575977385044) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.025962799787521362) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -62.373355865478516 AS threshold, 353 AS count, 0 AS depth, 0.37609841827768015 AS "Proba_0.0", -0.977904419104 AS "LogProba_0.0", 0.6239015817223199 AS "Proba_1.0", -0.471762644651 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_26' AS feature, 0.010723909363150597 AS threshold, 42 AS count, 1 AS depth, 0.9076923076923077 AS "Proba_0.0", -0.0968498259899 AS "LogProba_0.0", 0.09230769230769231 AS "Proba_1.0", -2.38262780067 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_6' AS feature, -2.154202938079834 AS threshold, 41 AS count, 2 AS depth, 0.9365079365079365 AS "Proba_0.0", -0.0655972824858 AS "LogProba_0.0", 0.06349206349206349 AS "Proba_1.0", -2.75684036527 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 0.6 AS "Proba_0.0", -0.510825623766 AS "LogProba_0.0", 0.4 AS "Proba_1.0", -0.916290731874 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_18' AS feature, -0.015727080404758453 AS threshold, 311 AS count, 1 AS depth, 0.30753968253968256 AS "Proba_0.0", -1.17915115115 AS "LogProba_0.0", 0.6924603174603174 AS "Proba_1.0", -0.367504345869 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, 'anoova_28' AS feature, -0.0027483575977385044 AS threshold, 44 AS count, 2 AS depth, 0.5294117647058824 AS "Proba_0.0", -0.63598876672 AS "LogProba_0.0", 0.47058823529411764 AS "Proba_1.0", -0.753771802376 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 0.6101694915254238 AS "Proba_0.0", -0.49401850545 AS "LogProba_0.0", 0.3898305084745763 AS "Proba_1.0", -0.942043227977 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, 'anoova_16' AS feature, -0.025962799787521362 AS threshold, 267 AS count, 2 AS depth, 0.27293577981651373 AS "Proba_0.0", -1.29851875024 AS "LogProba_0.0", 0.7270642201834863 AS "Proba_1.0", -0.318740469472 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, 0.6226415094339622 AS "Proba_0.0", -0.473784352086 AS "LogProba_0.0", 0.37735849056603776 AS "Proba_1.0", -0.974559639998 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 233 AS count, 3 AS depth, 0.2245430809399478 AS "Proba_0.0", -1.49368769293 AS "LogProba_0.0", 0.7754569190600522 AS "Proba_1.0", -0.254302850378 AS "LogProba_1.0", 1 AS "Decision") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5"."Proba_0.0" AS "Proba_0.0", "DT_node_data_5"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_5"."Proba_1.0" AS "Proba_1.0", "DT_node_data_5"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0.0" AS "Proba_5_0", "DT_Output_5"."LogProba_0.0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1.0" AS "Proba_5_1", "DT_Output_5"."LogProba_1.0" AS "LogProba_5_1" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -6.106560707092285) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -151.7723388671875) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -8.884134292602539) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_27 <= -0.0011691630352288485) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -16.55708122253418) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.053606413304805756) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.05658731982111931) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -6.106560707092285 AS threshold, 359 AS count, 0 AS depth, 0.35676625659050965 AS "Proba_0.0", -1.03067445508 AS "LogProba_0.0", 0.6432337434094904 AS "Proba_1.0", -0.441247100725 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -151.7723388671875 AS threshold, 69 AS count, 1 AS depth, 0.8350515463917526 AS "Proba_0.0", -0.180261823831 AS "LogProba_0.0", 0.16494845360824742 AS "Proba_1.0", -1.80212225626 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -8.884134292602539 AS threshold, 18 AS count, 2 AS depth, 0.4166666666666667 AS "Proba_0.0", -0.875468737354 AS "LogProba_0.0", 0.5833333333333334 AS "Proba_1.0", -0.538996500733 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.9090909090909091 AS "Proba_0.0", -0.0953101798043 AS "LogProba_0.0", 0.09090909090909091 AS "Proba_1.0", -2.3978952728 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_27' AS feature, -0.0011691630352288485 AS threshold, 51 AS count, 2 AS depth, 0.9726027397260274 AS "Proba_0.0", -0.0277795641071 AS "LogProba_0.0", 0.0273972602739726 AS "Proba_1.0", -3.59731226059 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, 0.9166666666666666 AS "Proba_0.0", -0.0870113769896 AS "LogProba_0.0", 0.08333333333333333 AS "Proba_1.0", -2.48490664979 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_4' AS feature, -16.55708122253418 AS threshold, 290 AS count, 1 AS depth, 0.2584745762711864 AS "Proba_0.0", -1.35295794085 AS "LogProba_0.0", 0.7415254237288136 AS "Proba_1.0", -0.299045831102 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_11' AS feature, -0.053606413304805756 AS threshold, 50 AS count, 2 AS depth, 0.76 AS "Proba_0.0", -0.274436845702 AS "LogProba_0.0", 0.24 AS "Proba_1.0", -1.42711635564 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, 0.972972972972973 AS "Proba_0.0", -0.0273989741881 AS "LogProba_0.0", 0.02702702702702703 AS "Proba_1.0", -3.61091791264 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, 0.5526315789473685 AS "Proba_0.0", -0.593063722003 AS "LogProba_0.0", 0.4473684210526316 AS "Proba_1.0", -0.80437281567 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_16' AS feature, 0.05658731982111931 AS threshold, 240 AS count, 2 AS depth, 0.163727959697733 AS "Proba_0.0", -1.80954901079 AS "LogProba_0.0", 0.836272040302267 AS "Proba_1.0", -0.178801311771 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 237 AS count, 3 AS depth, 0.15306122448979592 AS "Proba_0.0", -1.87691727757 AS "LogProba_0.0", 0.8469387755102041 AS "Proba_1.0", -0.166126870874 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6"."Proba_0.0" AS "Proba_0.0", "DT_node_data_6"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_6"."Proba_1.0" AS "Proba_1.0", "DT_node_data_6"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_6"."Decision" AS "Decision" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, CAST(NULL AS FLOAT) AS "Score_6_0", "DT_Output_6"."Proba_0.0" AS "Proba_6_0", "DT_Output_6"."LogProba_0.0" AS "LogProba_6_0", CAST(NULL AS FLOAT) AS "Score_6_1", "DT_Output_6"."Proba_1.0" AS "Proba_6_1", "DT_Output_6"."LogProba_1.0" AS "LogProba_6_1" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -60.30253601074219) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_31 <= 0.00123650673776865) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.009126164019107819) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 41.652992248535156) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -2.672884464263916) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_22 <= 0.022509552538394928) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -60.30253601074219 AS threshold, 367 AS count, 0 AS depth, 0.36906854130052724 AS "Proba_0.0", -0.996772903409 AS "LogProba_0.0", 0.6309314586994728 AS "Proba_1.0", -0.460558045638 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_31' AS feature, 0.00123650673776865 AS threshold, 39 AS count, 1 AS depth, 0.9152542372881356 AS "Proba_0.0", -0.0885533973414 AS "LogProba_0.0", 0.0847457627118644 AS "Proba_1.0", -2.46809953147 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_18' AS feature, -0.009126164019107819 AS threshold, 36 AS count, 2 AS depth, 0.9818181818181818 AS "Proba_0.0", -0.0183491386682 AS "LogProba_0.0", 0.01818181818181818 AS "Proba_1.0", -4.00733318523 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 0.9090909090909091 AS "Proba_0.0", -0.0953101798043 AS "LogProba_0.0", 0.09090909090909091 AS "Proba_1.0", -2.3978952728 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_2' AS feature, 41.652992248535156 AS threshold, 328 AS count, 1 AS depth, 0.3058823529411765 AS "Proba_0.0", -1.18455471847 AS "LogProba_0.0", 0.6941176470588235 AS "Proba_1.0", -0.365113812585 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 7 AS node_id, 'anoova_7' AS feature, -2.672884464263916 AS threshold, 235 AS count, 2 AS depth, 0.06720430107526881 AS "Proba_0.0", -2.7000180294 AS "LogProba_0.0", 0.9327956989247311 AS "Proba_1.0", -0.0695690743263 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.5 AS "Proba_0.0", -0.69314718056 AS "LogProba_0.0", 0.5 AS "Proba_1.0", -0.69314718056 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 231 AS count, 3 AS depth, 0.057692307692307696 AS "Proba_0.0", -2.85263142991 AS "LogProba_0.0", 0.9423076923076923 AS "Proba_1.0", -0.0594234204708 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 10 AS node_id, 'anoova_22' AS feature, 0.022509552538394928 AS threshold, 93 AS count, 2 AS depth, 0.9492753623188406 AS "Proba_0.0", -0.0520563619561 AS "LogProba_0.0", 0.050724637681159424 AS "Proba_1.0", -2.9813435361 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 92 AS count, 3 AS depth, 0.9562043795620438 AS "Proba_0.0", -0.044783602627 AS "LogProba_0.0", 0.043795620437956206 AS "Proba_1.0", -3.1282214566 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7"."Proba_0.0" AS "Proba_0.0", "DT_node_data_7"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_7"."Proba_1.0" AS "Proba_1.0", "DT_node_data_7"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_7"."Decision" AS "Decision" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, CAST(NULL AS FLOAT) AS "Score_7_0", "DT_Output_7"."Proba_0.0" AS "Proba_7_0", "DT_Output_7"."LogProba_0.0" AS "LogProba_7_0", CAST(NULL AS FLOAT) AS "Score_7_1", "DT_Output_7"."Proba_1.0" AS "Proba_7_1", "DT_Output_7"."LogProba_1.0" AS "LogProba_7_1" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -15.509401321411133) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.10770279169082642) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.008085633628070354) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= 7.136423110961914) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 26.728803634643555) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -9.67585563659668) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -14.945404052734375) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -15.509401321411133 AS threshold, 362 AS count, 0 AS depth, 0.3866432337434095 AS "Proba_0.0", -0.950252887774 AS "LogProba_0.0", 0.6133567662565905 AS "Proba_1.0", -0.488808511924 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_12' AS feature, -0.10770279169082642 AS threshold, 59 AS count, 1 AS depth, 0.8787878787878788 AS "Proba_0.0", -0.12921173148 AS "LogProba_0.0", 0.12121212121212122 AS "Proba_1.0", -2.11021320035 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_16' AS feature, 0.008085633628070354 AS threshold, 10 AS count, 2 AS depth, 0.5294117647058824 AS "Proba_0.0", -0.63598876672 AS "LogProba_0.0", 0.47058823529411764 AS "Proba_1.0", -0.753771802376 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 0.8888888888888888 AS "Proba_0.0", -0.117783035656 AS "LogProba_0.0", 0.1111111111111111 AS "Proba_1.0", -2.19722457734 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.125 AS "Proba_0.0", -2.07944154168 AS "LogProba_0.0", 0.875 AS "Proba_1.0", -0.133531392625 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_6' AS feature, 7.136423110961914 AS threshold, 49 AS count, 2 AS depth, 0.9512195121951219 AS "Proba_0.0", -0.0500104205747 AS "LogProba_0.0", 0.04878048780487805 AS "Proba_1.0", -3.02042488614 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 45 AS count, 3 AS depth, 0.9866666666666667 AS "Proba_0.0", -0.0134230203321 AS "LogProba_0.0", 0.013333333333333334 AS "Proba_1.0", -4.31748811354 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.5714285714285714 AS "Proba_0.0", -0.559615787935 AS "LogProba_0.0", 0.42857142857142855 AS "Proba_1.0", -0.847297860387 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_2' AS feature, 26.728803634643555 AS threshold, 303 AS count, 1 AS depth, 0.28297872340425534 AS "Proba_0.0", -1.26238356648 AS "LogProba_0.0", 0.7170212765957447 AS "Proba_1.0", -0.332649764352 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_5' AS feature, -9.67585563659668 AS threshold, 237 AS count, 2 AS depth, 0.08967391304347826 AS "Proba_0.0", -2.4115753767 AS "LogProba_0.0", 0.9103260869565217 AS "Proba_1.0", -0.0939524063439 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, 0.7142857142857143 AS "Proba_0.0", -0.336472236621 AS "LogProba_0.0", 0.2857142857142857 AS "Proba_1.0", -1.2527629685 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 222 AS count, 3 AS depth, 0.05187319884726225 AS "Proba_0.0", -2.95895302205 AS "LogProba_0.0", 0.9481268011527377 AS "Proba_1.0", -0.0532670291815 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 12 AS node_id, 'anoova_4' AS feature, -14.945404052734375 AS threshold, 66 AS count, 2 AS depth, 0.9803921568627451 AS "Proba_0.0", -0.0198026272962 AS "LogProba_0.0", 0.0196078431372549 AS "Proba_1.0", -3.93182563272 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 65 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8"."Proba_0.0" AS "Proba_0.0", "DT_node_data_8"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_8"."Proba_1.0" AS "Proba_1.0", "DT_node_data_8"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_8"."Decision" AS "Decision" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, CAST(NULL AS FLOAT) AS "Score_8_0", "DT_Output_8"."Proba_0.0" AS "Proba_8_0", "DT_Output_8"."LogProba_0.0" AS "LogProba_8_0", CAST(NULL AS FLOAT) AS "Score_8_1", "DT_Output_8"."Proba_1.0" AS "Proba_8_1", "DT_Output_8"."LogProba_1.0" AS "LogProba_8_1" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.033111684024333954) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -63.58198547363281) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 2.9718966484069824) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -19.644855499267578) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.8772616386413574) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -237.05642700195312) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_16' AS feature, 0.033111684024333954 AS threshold, 373 AS count, 0 AS depth, 0.3655536028119508 AS "Proba_0.0", -1.00634235443 AS "LogProba_0.0", 0.6344463971880492 AS "Proba_1.0", -0.455002475793 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, -63.58198547363281 AS threshold, 342 AS count, 1 AS depth, 0.3275862068965517 AS "Proba_0.0", -1.11600403138 AS "LogProba_0.0", 0.6724137931034483 AS "Proba_1.0", -0.396881364417 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_7' AS feature, 2.9718966484069824 AS threshold, 27 AS count, 2 AS depth, 0.8947368421052632 AS "Proba_0.0", -0.11122563511 AS "LogProba_0.0", 0.10526315789473684 AS "Proba_1.0", -2.25129179861 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, 1.0 AS "Proba_0.0", 0.0 AS "LogProba_0.0", 0.0 AS "Proba_1.0", -1.79769313486231e+308 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 0.42857142857142855 AS "Proba_0.0", -0.847297860387 AS "LogProba_0.0", 0.5714285714285714 AS "Proba_1.0", -0.559615787935 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, 'anoova_4' AS feature, -19.644855499267578 AS threshold, 315 AS count, 2 AS depth, 0.2830578512396694 AS "Proba_0.0", -1.26210398089 AS "LogProba_0.0", 0.7169421487603306 AS "Proba_1.0", -0.33276012677 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 0.875 AS "Proba_0.0", -0.133531392625 AS "LogProba_0.0", 0.125 AS "Proba_1.0", -2.07944154168 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 276 AS count, 3 AS depth, 0.205607476635514 AS "Proba_0.0", -1.5817863811 AS "LogProba_0.0", 0.794392523364486 AS "Proba_1.0", -0.230177577972 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, 'anoova_11' AS feature, 0.8772616386413574 AS threshold, 31 AS count, 1 AS depth, 0.7872340425531915 AS "Proba_0.0", -0.239229689066 AS "LogProba_0.0", 0.2127659574468085 AS "Proba_1.0", -1.54756250872 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 9 AS node_id, 'anoova_2' AS feature, -237.05642700195312 AS threshold, 28 AS count, 2 AS depth, 0.8604651162790697 AS "Proba_0.0", -0.150282203049 AS "LogProba_0.0", 0.13953488372093023 AS "Proba_1.0", -1.96944064647 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, 0.9487179487179487 AS "Proba_0.0", -0.0526437334854 AS "LogProba_0.0", 0.05128205128205128 AS "Proba_1.0", -2.97041446557 AS "LogProba_1.0", 0 AS "Decision" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, 0.0 AS "Proba_0.0", -1.79769313486231e+308 AS "LogProba_0.0", 1.0 AS "Proba_1.0", 0.0 AS "LogProba_1.0", 1 AS "Decision") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9"."Proba_0.0" AS "Proba_0.0", "DT_node_data_9"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_9"."Proba_1.0" AS "Proba_1.0", "DT_node_data_9"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_9"."Decision" AS "Decision" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, CAST(NULL AS FLOAT) AS "Score_9_0", "DT_Output_9"."Proba_0.0" AS "Proba_9_0", "DT_Output_9"."LogProba_0.0" AS "LogProba_9_0", CAST(NULL AS FLOAT) AS "Score_9_1", "DT_Output_9"."Proba_1.0" AS "Proba_9_1", "DT_Output_9"."LogProba_1.0" AS "LogProba_9_1" 
FROM "DT_Output_9"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0".join_key_0 AS join_key_0, "RF_Tree_0"."Score_0_0" AS "Score_0_0", "RF_Tree_0"."Proba_0_0" AS "Proba_0_0", "RF_Tree_0"."LogProba_0_0" AS "LogProba_0_0", "RF_Tree_0"."Score_0_1" AS "Score_0_1", "RF_Tree_0"."Proba_0_1" AS "Proba_0_1", "RF_Tree_0"."LogProba_0_1" AS "LogProba_0_1", "RF_Tree_1".join_key_1 AS join_key_1, "RF_Tree_1"."Score_1_0" AS "Score_1_0", "RF_Tree_1"."Proba_1_0" AS "Proba_1_0", "RF_Tree_1"."LogProba_1_0" AS "LogProba_1_0", "RF_Tree_1"."Score_1_1" AS "Score_1_1", "RF_Tree_1"."Proba_1_1" AS "Proba_1_1", "RF_Tree_1"."LogProba_1_1" AS "LogProba_1_1", "RF_Tree_2".join_key_2 AS join_key_2, "RF_Tree_2"."Score_2_0" AS "Score_2_0", "RF_Tree_2"."Proba_2_0" AS "Proba_2_0", "RF_Tree_2"."LogProba_2_0" AS "LogProba_2_0", "RF_Tree_2"."Score_2_1" AS "Score_2_1", "RF_Tree_2"."Proba_2_1" AS "Proba_2_1", "RF_Tree_2"."LogProba_2_1" AS "LogProba_2_1", "RF_Tree_3".join_key_3 AS join_key_3, "RF_Tree_3"."Score_3_0" AS "Score_3_0", "RF_Tree_3"."Proba_3_0" AS "Proba_3_0", "RF_Tree_3"."LogProba_3_0" AS "LogProba_3_0", "RF_Tree_3"."Score_3_1" AS "Score_3_1", "RF_Tree_3"."Proba_3_1" AS "Proba_3_1", "RF_Tree_3"."LogProba_3_1" AS "LogProba_3_1", "RF_Tree_4".join_key_4 AS join_key_4, "RF_Tree_4"."Score_4_0" AS "Score_4_0", "RF_Tree_4"."Proba_4_0" AS "Proba_4_0", "RF_Tree_4"."LogProba_4_0" AS "LogProba_4_0", "RF_Tree_4"."Score_4_1" AS "Score_4_1", "RF_Tree_4"."Proba_4_1" AS "Proba_4_1", "RF_Tree_4"."LogProba_4_1" AS "LogProba_4_1", "RF_Tree_5".join_key_5 AS join_key_5, "RF_Tree_5"."Score_5_0" AS "Score_5_0", "RF_Tree_5"."Proba_5_0" AS "Proba_5_0", "RF_Tree_5"."LogProba_5_0" AS "LogProba_5_0", "RF_Tree_5"."Score_5_1" AS "Score_5_1", "RF_Tree_5"."Proba_5_1" AS "Proba_5_1", "RF_Tree_5"."LogProba_5_1" AS "LogProba_5_1", "RF_Tree_6".join_key_6 AS join_key_6, "RF_Tree_6"."Score_6_0" AS "Score_6_0", "RF_Tree_6"."Proba_6_0" AS "Proba_6_0", "RF_Tree_6"."LogProba_6_0" AS "LogProba_6_0", "RF_Tree_6"."Score_6_1" AS "Score_6_1", "RF_Tree_6"."Proba_6_1" AS "Proba_6_1", "RF_Tree_6"."LogProba_6_1" AS "LogProba_6_1", "RF_Tree_7".join_key_7 AS join_key_7, "RF_Tree_7"."Score_7_0" AS "Score_7_0", "RF_Tree_7"."Proba_7_0" AS "Proba_7_0", "RF_Tree_7"."LogProba_7_0" AS "LogProba_7_0", "RF_Tree_7"."Score_7_1" AS "Score_7_1", "RF_Tree_7"."Proba_7_1" AS "Proba_7_1", "RF_Tree_7"."LogProba_7_1" AS "LogProba_7_1", "RF_Tree_8".join_key_8 AS join_key_8, "RF_Tree_8"."Score_8_0" AS "Score_8_0", "RF_Tree_8"."Proba_8_0" AS "Proba_8_0", "RF_Tree_8"."LogProba_8_0" AS "LogProba_8_0", "RF_Tree_8"."Score_8_1" AS "Score_8_1", "RF_Tree_8"."Proba_8_1" AS "Proba_8_1", "RF_Tree_8"."LogProba_8_1" AS "LogProba_8_1", "RF_Tree_9".join_key_9 AS join_key_9, "RF_Tree_9"."Score_9_0" AS "Score_9_0", "RF_Tree_9"."Proba_9_0" AS "Proba_9_0", "RF_Tree_9"."LogProba_9_0" AS "LogProba_9_0", "RF_Tree_9"."Score_9_1" AS "Score_9_1", "RF_Tree_9"."Proba_9_1" AS "Proba_9_1", "RF_Tree_9"."LogProba_9_1" AS "LogProba_9_1" 
FROM "RF_Tree_0" LEFT OUTER JOIN "RF_Tree_1" ON "RF_Tree_0".join_key_0 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_2" ON "RF_Tree_2".join_key_2 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_3" ON "RF_Tree_3".join_key_3 = "RF_Tree_2".join_key_2 LEFT OUTER JOIN "RF_Tree_4" ON "RF_Tree_4".join_key_4 = "RF_Tree_3".join_key_3 LEFT OUTER JOIN "RF_Tree_5" ON "RF_Tree_5".join_key_5 = "RF_Tree_4".join_key_4 LEFT OUTER JOIN "RF_Tree_6" ON "RF_Tree_6".join_key_6 = "RF_Tree_5".join_key_5 LEFT OUTER JOIN "RF_Tree_7" ON "RF_Tree_7".join_key_7 = "RF_Tree_6".join_key_6 LEFT OUTER JOIN "RF_Tree_8" ON "RF_Tree_8".join_key_8 = "RF_Tree_7".join_key_7 LEFT OUTER JOIN "RF_Tree_9" ON "RF_Tree_9".join_key_9 = "RF_Tree_8".join_key_8), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0 AS "KEY", "RF_Join_CTE"."Score_0_0" / 10 + "RF_Join_CTE"."Score_1_0" / 10 + "RF_Join_CTE"."Score_2_0" / 10 + "RF_Join_CTE"."Score_3_0" / 10 + "RF_Join_CTE"."Score_4_0" / 10 + "RF_Join_CTE"."Score_5_0" / 10 + "RF_Join_CTE"."Score_6_0" / 10 + "RF_Join_CTE"."Score_7_0" / 10 + "RF_Join_CTE"."Score_8_0" / 10 + "RF_Join_CTE"."Score_9_0" / 10 AS "Score_0", "RF_Join_CTE"."Proba_0_0" / 10 + "RF_Join_CTE"."Proba_1_0" / 10 + "RF_Join_CTE"."Proba_2_0" / 10 + "RF_Join_CTE"."Proba_3_0" / 10 + "RF_Join_CTE"."Proba_4_0" / 10 + "RF_Join_CTE"."Proba_5_0" / 10 + "RF_Join_CTE"."Proba_6_0" / 10 + "RF_Join_CTE"."Proba_7_0" / 10 + "RF_Join_CTE"."Proba_8_0" / 10 + "RF_Join_CTE"."Proba_9_0" / 10 AS "Proba_0", "RF_Join_CTE"."LogProba_0_0" / 10 + "RF_Join_CTE"."LogProba_1_0" / 10 + "RF_Join_CTE"."LogProba_2_0" / 10 + "RF_Join_CTE"."LogProba_3_0" / 10 + "RF_Join_CTE"."LogProba_4_0" / 10 + "RF_Join_CTE"."LogProba_5_0" / 10 + "RF_Join_CTE"."LogProba_6_0" / 10 + "RF_Join_CTE"."LogProba_7_0" / 10 + "RF_Join_CTE"."LogProba_8_0" / 10 + "RF_Join_CTE"."LogProba_9_0" / 10 AS "LogProba_0", "RF_Join_CTE"."Score_0_1" / 10 + "RF_Join_CTE"."Score_1_1" / 10 + "RF_Join_CTE"."Score_2_1" / 10 + "RF_Join_CTE"."Score_3_1" / 10 + "RF_Join_CTE"."Score_4_1" / 10 + "RF_Join_CTE"."Score_5_1" / 10 + "RF_Join_CTE"."Score_6_1" / 10 + "RF_Join_CTE"."Score_7_1" / 10 + "RF_Join_CTE"."Score_8_1" / 10 + "RF_Join_CTE"."Score_9_1" / 10 AS "Score_1", "RF_Join_CTE"."Proba_0_1" / 10 + "RF_Join_CTE"."Proba_1_1" / 10 + "RF_Join_CTE"."Proba_2_1" / 10 + "RF_Join_CTE"."Proba_3_1" / 10 + "RF_Join_CTE"."Proba_4_1" / 10 + "RF_Join_CTE"."Proba_5_1" / 10 + "RF_Join_CTE"."Proba_6_1" / 10 + "RF_Join_CTE"."Proba_7_1" / 10 + "RF_Join_CTE"."Proba_8_1" / 10 + "RF_Join_CTE"."Proba_9_1" / 10 AS "Proba_1", "RF_Join_CTE"."LogProba_0_1" / 10 + "RF_Join_CTE"."LogProba_1_1" / 10 + "RF_Join_CTE"."LogProba_2_1" / 10 + "RF_Join_CTE"."LogProba_3_1" / 10 + "RF_Join_CTE"."LogProba_4_1" / 10 + "RF_Join_CTE"."LogProba_5_1" / 10 + "RF_Join_CTE"."LogProba_6_1" / 10 + "RF_Join_CTE"."LogProba_7_1" / 10 + "RF_Join_CTE"."LogProba_8_1" / 10 + "RF_Join_CTE"."LogProba_9_1" / 10 AS "LogProba_1" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte