-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.089602034774 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.674833965146 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.0724600250103 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.0482472354703 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.147008767288 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.027302656916 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.0384232030421 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.025154131143 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0721521997512 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.742467699279 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.0971426765157 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.207236571238 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.580280328895 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.0923283254296 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.0757604046963 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.0633682238161 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.142717680371 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0145185275999 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.0632639115316 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.414877022148 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.089602034774 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.674833965146 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.0724600250103 AS impute_4, "ADS_imp_1_OUT".impute_5 - -0.0482472354703 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.147008767288 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.027302656916 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.0384232030421 AS impute_8, "ADS_imp_1_OUT".impute_9 - -0.025154131143 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0721521997512 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.742467699279 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.0971426765157 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.207236571238 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.580280328895 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.0923283254296 AS impute_15, "ADS_imp_1_OUT".impute_16 - 0.0757604046963 AS impute_16, "ADS_imp_1_OUT".impute_17 - -0.0633682238161 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.142717680371 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.0145185275999 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.0632639115316 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.414877022148 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0332905924248 + "CenteredDataForPCA".impute_3 * -0.41156615895 + "CenteredDataForPCA".impute_4 * 0.0217775116625 + "CenteredDataForPCA".impute_5 * -0.000430187871545 + "CenteredDataForPCA".impute_6 * 0.0328068863733 + "CenteredDataForPCA".impute_7 * 0.0022543136146 + "CenteredDataForPCA".impute_8 * 0.039808223468 + "CenteredDataForPCA".impute_9 * -0.0597571835218 + "CenteredDataForPCA".impute_10 * 0.0069330288524 + "CenteredDataForPCA".impute_11 * -0.239180503501 + "CenteredDataForPCA".impute_12 * 0.0169443253775 + "CenteredDataForPCA".impute_13 * 0.271887423727 + "CenteredDataForPCA".impute_14 * 0.230652204773 + "CenteredDataForPCA".impute_15 * -0.0251727130373 + "CenteredDataForPCA".impute_16 * 0.0199517800617 + "CenteredDataForPCA".impute_17 * 0.0610441555369 + "CenteredDataForPCA".impute_18 * 0.0297573121235 + "CenteredDataForPCA".impute_19 * -0.0438898706194 + "CenteredDataForPCA".impute_20 * -0.228449371811 + "CenteredDataForPCA".impute_21 * -0.760505644942 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.054655640399 + "CenteredDataForPCA".impute_3 * 0.610971444765 + "CenteredDataForPCA".impute_4 * -0.0496238276622 + "CenteredDataForPCA".impute_5 * -0.0183837691092 + "CenteredDataForPCA".impute_6 * 0.0225262283757 + "CenteredDataForPCA".impute_7 * -0.0152560877524 + "CenteredDataForPCA".impute_8 * 0.0631784877609 + "CenteredDataForPCA".impute_9 * -0.041942775274 + "CenteredDataForPCA".impute_10 * 0.0439821400601 + "CenteredDataForPCA".impute_11 * -0.648949867553 + "CenteredDataForPCA".impute_12 * -0.0149908921105 + "CenteredDataForPCA".impute_13 * -0.0275332470839 + "CenteredDataForPCA".impute_14 * -0.146748837849 + "CenteredDataForPCA".impute_15 * 0.00089071275661 + "CenteredDataForPCA".impute_16 * -0.0899877087403 + "CenteredDataForPCA".impute_17 * 0.109352388011 + "CenteredDataForPCA".impute_18 * -0.0676243288599 + "CenteredDataForPCA".impute_19 * 0.00716317986025 + "CenteredDataForPCA".impute_20 * 0.282387427872 + "CenteredDataForPCA".impute_21 * -0.253817527081 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.149180766323 + "CenteredDataForPCA".impute_3 * -0.0392945161988 + "CenteredDataForPCA".impute_4 * 0.130283406593 + "CenteredDataForPCA".impute_5 * -0.102089573275 + "CenteredDataForPCA".impute_6 * -0.0292140430363 + "CenteredDataForPCA".impute_7 * 0.109520269628 + "CenteredDataForPCA".impute_8 * 0.0681188759463 + "CenteredDataForPCA".impute_9 * -0.0718821988924 + "CenteredDataForPCA".impute_10 * -0.15920694904 + "CenteredDataForPCA".impute_11 * 0.152469909837 + "CenteredDataForPCA".impute_12 * 0.125026107974 + "CenteredDataForPCA".impute_13 * 0.529529960755 + "CenteredDataForPCA".impute_14 * 0.196347038845 + "CenteredDataForPCA".impute_15 * -0.169962530637 + "CenteredDataForPCA".impute_16 * 0.0556680063973 + "CenteredDataForPCA".impute_17 * -0.0795006034152 + "CenteredDataForPCA".impute_18 * 0.0911704721097 + "CenteredDataForPCA".impute_19 * 0.161178934679 + "CenteredDataForPCA".impute_20 * 0.685124025704 + "CenteredDataForPCA".impute_21 * 0.0312705841676 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.22813973911 + "CenteredDataForPCA".impute_3 * -0.0408297029566 + "CenteredDataForPCA".impute_4 * -0.196108881832 + "CenteredDataForPCA".impute_5 * 0.21916891359 + "CenteredDataForPCA".impute_6 * -0.0188432405106 + "CenteredDataForPCA".impute_7 * -0.263473083603 + "CenteredDataForPCA".impute_8 * -0.105367860171 + "CenteredDataForPCA".impute_9 * -0.110787246269 + "CenteredDataForPCA".impute_10 * 0.0355352563669 + "CenteredDataForPCA".impute_11 * -0.0290894174353 + "CenteredDataForPCA".impute_12 * -0.197679593645 + "CenteredDataForPCA".impute_13 * -0.167186502559 + "CenteredDataForPCA".impute_14 * 0.43379920319 + "CenteredDataForPCA".impute_15 * 0.283777046848 + "CenteredDataForPCA".impute_16 * 0.286022481974 + "CenteredDataForPCA".impute_17 * 0.0114476616375 + "CenteredDataForPCA".impute_18 * 0.0891261326292 + "CenteredDataForPCA".impute_19 * -0.45937258426 + "CenteredDataForPCA".impute_20 * 0.357554659488 + "CenteredDataForPCA".impute_21 * 0.00645095258338 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.269661206292 + "CenteredDataForPCA".impute_3 * 0.0495659556946 + "CenteredDataForPCA".impute_4 * 0.14673545168 + "CenteredDataForPCA".impute_5 * 0.0456630976149 + "CenteredDataForPCA".impute_6 * -0.136977459802 + "CenteredDataForPCA".impute_7 * -0.331132269119 + "CenteredDataForPCA".impute_8 * -0.240318501119 + "CenteredDataForPCA".impute_9 * 0.0380014932028 + "CenteredDataForPCA".impute_10 * 0.341735466231 + "CenteredDataForPCA".impute_11 * -0.026305174348 + "CenteredDataForPCA".impute_12 * 0.406540688247 + "CenteredDataForPCA".impute_13 * 0.124936438916 + "CenteredDataForPCA".impute_14 * -0.141362646849 + "CenteredDataForPCA".impute_15 * 0.135089738285 + "CenteredDataForPCA".impute_16 * -0.0642803243058 + "CenteredDataForPCA".impute_17 * -0.546434968077 + "CenteredDataForPCA".impute_18 * 0.131959957841 + "CenteredDataForPCA".impute_19 * -0.233970308377 + "CenteredDataForPCA".impute_20 * -0.0326746198876 + "CenteredDataForPCA".impute_21 * -0.0325985694525 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.110704893954 + "CenteredDataForPCA".impute_3 * -0.0270039517106 + "CenteredDataForPCA".impute_4 * 0.316833865099 + "CenteredDataForPCA".impute_5 * -0.0967019432357 + "CenteredDataForPCA".impute_6 * 0.233826882313 + "CenteredDataForPCA".impute_7 * 0.012151983292 + "CenteredDataForPCA".impute_8 * -0.31429595371 + "CenteredDataForPCA".impute_9 * 0.368778198713 + "CenteredDataForPCA".impute_10 * 0.253848820619 + "CenteredDataForPCA".impute_11 * -0.0897319200434 + "CenteredDataForPCA".impute_12 * 0.170741830154 + "CenteredDataForPCA".impute_13 * -0.342154925587 + "CenteredDataForPCA".impute_14 * 0.347053305418 + "CenteredDataForPCA".impute_15 * 0.0260493193241 + "CenteredDataForPCA".impute_16 * 0.217183973683 + "CenteredDataForPCA".impute_17 * 0.181854910942 + "CenteredDataForPCA".impute_18 * 0.0912240438422 + "CenteredDataForPCA".impute_19 * 0.386409304813 + "CenteredDataForPCA".impute_20 * 0.0981508674047 + "CenteredDataForPCA".impute_21 * -0.018227277077 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.0423444668398 + "CenteredDataForPCA".impute_3 * 0.0297579039203 + "CenteredDataForPCA".impute_4 * -0.143904738809 + "CenteredDataForPCA".impute_5 * -0.30491982157 + "CenteredDataForPCA".impute_6 * 0.0422309862439 + "CenteredDataForPCA".impute_7 * 0.0843730411597 + "CenteredDataForPCA".impute_8 * 0.0738295737345 + "CenteredDataForPCA".impute_9 * 0.134196001922 + "CenteredDataForPCA".impute_10 * 0.196674609539 + "CenteredDataForPCA".impute_11 * 0.0851373084092 + "CenteredDataForPCA".impute_12 * 0.0629123963097 + "CenteredDataForPCA".impute_13 * 0.338397501933 + "CenteredDataForPCA".impute_14 * -0.301253860956 + "CenteredDataForPCA".impute_15 * 0.573372843285 + "CenteredDataForPCA".impute_16 * 0.373820625522 + "CenteredDataForPCA".impute_17 * 0.338419434049 + "CenteredDataForPCA".impute_18 * 0.0923167940166 + "CenteredDataForPCA".impute_19 * -0.0501551716426 + "CenteredDataForPCA".impute_20 * -0.0407286229027 + "CenteredDataForPCA".impute_21 * 0.0199591695282 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.257426237859 + "CenteredDataForPCA".impute_3 * -0.0504302176243 + "CenteredDataForPCA".impute_4 * 0.163422429501 + "CenteredDataForPCA".impute_5 * -0.168822723651 + "CenteredDataForPCA".impute_6 * -0.535799077589 + "CenteredDataForPCA".impute_7 * -0.247390419888 + "CenteredDataForPCA".impute_8 * 0.532319123119 + "CenteredDataForPCA".impute_9 * 0.256267254852 + "CenteredDataForPCA".impute_10 * 0.231401238054 + "CenteredDataForPCA".impute_11 * 0.0133744364383 + "CenteredDataForPCA".impute_12 * 0.168899986902 + "CenteredDataForPCA".impute_13 * -0.082045294492 + "CenteredDataForPCA".impute_14 * 0.15070959009 + "CenteredDataForPCA".impute_15 * -0.0193742671996 + "CenteredDataForPCA".impute_16 * -0.131905362029 + "CenteredDataForPCA".impute_17 * 0.142278541583 + "CenteredDataForPCA".impute_18 * -0.155459226949 + "CenteredDataForPCA".impute_19 * 0.0109109212233 + "CenteredDataForPCA".impute_20 * 0.0681360266608 + "CenteredDataForPCA".impute_21 * 0.00414292880439 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.395291205796 + "CenteredDataForPCA".impute_3 * -0.0182298535485 + "CenteredDataForPCA".impute_4 * -0.137664707986 + "CenteredDataForPCA".impute_5 * -0.100243310471 + "CenteredDataForPCA".impute_6 * 0.28638220498 + "CenteredDataForPCA".impute_7 * 0.095815690063 + "CenteredDataForPCA".impute_8 * -0.253733275833 + "CenteredDataForPCA".impute_9 * -0.045991291106 + "CenteredDataForPCA".impute_10 * 0.280301818453 + "CenteredDataForPCA".impute_11 * 0.0635317941979 + "CenteredDataForPCA".impute_12 * 0.402307289965 + "CenteredDataForPCA".impute_13 * 0.132725590952 + "CenteredDataForPCA".impute_14 * -0.0327157668371 + "CenteredDataForPCA".impute_15 * -0.315884040354 + "CenteredDataForPCA".impute_16 * -0.0826034129718 + "CenteredDataForPCA".impute_17 * 0.199905846321 + "CenteredDataForPCA".impute_18 * -0.398350756385 + "CenteredDataForPCA".impute_19 * -0.287946332791 + "CenteredDataForPCA".impute_20 * 0.0690778946541 + "CenteredDataForPCA".impute_21 * 0.0253283810165 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.190519440781 + "CenteredDataForPCA".impute_3 * -0.0670074539229 + "CenteredDataForPCA".impute_4 * -0.420735319454 + "CenteredDataForPCA".impute_5 * -0.695588455146 + "CenteredDataForPCA".impute_6 * -0.198405398762 + "CenteredDataForPCA".impute_7 * -0.0397851460583 + "CenteredDataForPCA".impute_8 * -0.263267817356 + "CenteredDataForPCA".impute_9 * -0.165501664988 + "CenteredDataForPCA".impute_10 * -0.0313272232746 + "CenteredDataForPCA".impute_11 * -0.0046649829845 + "CenteredDataForPCA".impute_12 * -0.0631916445665 + "CenteredDataForPCA".impute_13 * -0.171234206443 + "CenteredDataForPCA".impute_14 * 0.20586428238 + "CenteredDataForPCA".impute_15 * 0.0576842507266 + "CenteredDataForPCA".impute_16 * -0.263250199466 + "CenteredDataForPCA".impute_17 * -0.0592522400233 + "CenteredDataForPCA".impute_18 * -0.0509051616955 + "CenteredDataForPCA".impute_19 * 0.0617761863874 + "CenteredDataForPCA".impute_20 * 0.0377182855679 + "CenteredDataForPCA".impute_21 * -0.00597191858517 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.488658959307 + "CenteredDataForPCA".impute_3 * -0.0845047897378 + "CenteredDataForPCA".impute_4 * -0.204553617165 + "CenteredDataForPCA".impute_5 * 0.47473291581 + "CenteredDataForPCA".impute_6 * -0.140645422197 + "CenteredDataForPCA".impute_7 * -0.0934183066909 + "CenteredDataForPCA".impute_8 * -0.0944515397941 + "CenteredDataForPCA".impute_9 * -0.0424552972204 + "CenteredDataForPCA".impute_10 * 0.136385943619 + "CenteredDataForPCA".impute_11 * 0.10291067848 + "CenteredDataForPCA".impute_12 * 0.0519518004757 + "CenteredDataForPCA".impute_13 * 0.0603014613154 + "CenteredDataForPCA".impute_14 * 0.0673370702253 + "CenteredDataForPCA".impute_15 * 0.167157243475 + "CenteredDataForPCA".impute_16 * -0.270341782933 + "CenteredDataForPCA".impute_17 * 0.389517902942 + "CenteredDataForPCA".impute_18 * -0.364285310994 + "CenteredDataForPCA".impute_19 * 0.123663607544 + "CenteredDataForPCA".impute_20 * 0.0718239709955 + "CenteredDataForPCA".impute_21 * 0.0407348610884 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.200561668592 + "CenteredDataForPCA".impute_3 * -0.000123175902802 + "CenteredDataForPCA".impute_4 * -0.134195177812 + "CenteredDataForPCA".impute_5 * 0.0156629955246 + "CenteredDataForPCA".impute_6 * 0.155709102586 + "CenteredDataForPCA".impute_7 * -0.612417149308 + "CenteredDataForPCA".impute_8 * 0.0127435051239 + "CenteredDataForPCA".impute_9 * -0.382277013279 + "CenteredDataForPCA".impute_10 * 0.239375900344 + "CenteredDataForPCA".impute_11 * 0.0505727163766 + "CenteredDataForPCA".impute_12 * -0.0860584585728 + "CenteredDataForPCA".impute_13 * 0.118397760209 + "CenteredDataForPCA".impute_14 * -0.116043378641 + "CenteredDataForPCA".impute_15 * -0.159104073686 + "CenteredDataForPCA".impute_16 * 0.0501004243226 + "CenteredDataForPCA".impute_17 * 0.1217103778 + "CenteredDataForPCA".impute_18 * 0.225332186008 + "CenteredDataForPCA".impute_19 * 0.454199434497 + "CenteredDataForPCA".impute_20 * -0.0307923570083 + "CenteredDataForPCA".impute_21 * 0.0227395283892 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.094842879491 + "CenteredDataForPCA".impute_3 * 0.0277343850969 + "CenteredDataForPCA".impute_4 * -0.0283457727899 + "CenteredDataForPCA".impute_5 * 0.0148058470526 + "CenteredDataForPCA".impute_6 * -0.340566230403 + "CenteredDataForPCA".impute_7 * 0.0160373846324 + "CenteredDataForPCA".impute_8 * -0.310423085788 + "CenteredDataForPCA".impute_9 * 0.296684234471 + "CenteredDataForPCA".impute_10 * 0.212487984097 + "CenteredDataForPCA".impute_11 * 0.0213323952151 + "CenteredDataForPCA".impute_12 * -0.364963964107 + "CenteredDataForPCA".impute_13 * 0.149671994502 + "CenteredDataForPCA".impute_14 * -0.133545886417 + "CenteredDataForPCA".impute_15 * -0.461441486659 + "CenteredDataForPCA".impute_16 * 0.0179041988 + "CenteredDataForPCA".impute_17 * 0.275995501839 + "CenteredDataForPCA".impute_18 * 0.350659888983 + "CenteredDataForPCA".impute_19 * -0.23896879687 + "CenteredDataForPCA".impute_20 * -0.00716222270694 + "CenteredDataForPCA".impute_21 * 0.00178063526974 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.334611201012 + "CenteredDataForPCA".impute_3 * -0.00179345377161 + "CenteredDataForPCA".impute_4 * -0.308786090111 + "CenteredDataForPCA".impute_5 * 0.248374541401 + "CenteredDataForPCA".impute_6 * -0.132196735879 + "CenteredDataForPCA".impute_7 * 0.32361272896 + "CenteredDataForPCA".impute_8 * -0.0695218146448 + "CenteredDataForPCA".impute_9 * 0.0527280548807 + "CenteredDataForPCA".impute_10 * 0.0271529166165 + "CenteredDataForPCA".impute_11 * -0.0250936840151 + "CenteredDataForPCA".impute_12 * 0.323858563154 + "CenteredDataForPCA".impute_13 * -0.0163260493945 + "CenteredDataForPCA".impute_14 * 0.0533645290356 + "CenteredDataForPCA".impute_15 * 0.190940479412 + "CenteredDataForPCA".impute_16 * -0.362360860502 + "CenteredDataForPCA".impute_17 * 0.0234687926608 + "CenteredDataForPCA".impute_18 * 0.535070119542 + "CenteredDataForPCA".impute_19 * 0.187193303488 + "CenteredDataForPCA".impute_20 * 0.039116522374 + "CenteredDataForPCA".impute_21 * -0.0250418016194 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.270204170962 + "CenteredDataForPCA".impute_3 * -0.0093736239656 + "CenteredDataForPCA".impute_4 * 0.40860244547 + "CenteredDataForPCA".impute_5 * 0.00250004669024 + "CenteredDataForPCA".impute_6 * -0.187383245706 + "CenteredDataForPCA".impute_7 * 0.278216862876 + "CenteredDataForPCA".impute_8 * -0.253289395982 + "CenteredDataForPCA".impute_9 * -0.293502933327 + "CenteredDataForPCA".impute_10 * 0.366175982564 + "CenteredDataForPCA".impute_11 * 0.0134887900189 + "CenteredDataForPCA".impute_12 * -0.404167105797 + "CenteredDataForPCA".impute_13 * 0.113068161276 + "CenteredDataForPCA".impute_14 * -0.0165900570642 + "CenteredDataForPCA".impute_15 * 0.276891026326 + "CenteredDataForPCA".impute_16 * -0.181061095773 + "CenteredDataForPCA".impute_17 * -0.118767247278 + "CenteredDataForPCA".impute_18 * -0.193842835746 + "CenteredDataForPCA".impute_19 * 0.146100651864 + "CenteredDataForPCA".impute_20 * 0.0582427009531 + "CenteredDataForPCA".impute_21 * -0.0239890649226 AS anoova_16, "CenteredDataForPCA".impute_2 * 0.135004079929 + "CenteredDataForPCA".impute_3 * -0.0388619154155 + "CenteredDataForPCA".impute_4 * -0.393250416217 + "CenteredDataForPCA".impute_5 * 0.0547252101351 + "CenteredDataForPCA".impute_6 * 0.248349974249 + "CenteredDataForPCA".impute_7 * 0.242856352497 + "CenteredDataForPCA".impute_8 * 0.37311991453 + "CenteredDataForPCA".impute_9 * 0.173977872321 + "CenteredDataForPCA".impute_10 * 0.547132908408 + "CenteredDataForPCA".impute_11 * 0.0202022112362 + "CenteredDataForPCA".impute_12 * -0.252078249469 + "CenteredDataForPCA".impute_13 * -0.012890743887 + "CenteredDataForPCA".impute_14 * 0.0923960548266 + "CenteredDataForPCA".impute_15 * -0.129215864762 + "CenteredDataForPCA".impute_16 * 0.0497081544329 + "CenteredDataForPCA".impute_17 * -0.358845356904 + "CenteredDataForPCA".impute_18 * -0.0432547417542 + "CenteredDataForPCA".impute_19 * 0.0797163086113 + "CenteredDataForPCA".impute_20 * 0.0656255595931 + "CenteredDataForPCA".impute_21 * 0.000145352596854 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.0831081681119 + "CenteredDataForPCA".impute_3 * 0.0407357792005 + "CenteredDataForPCA".impute_4 * -0.253187251837 + "CenteredDataForPCA".impute_5 * 0.14512678567 + "CenteredDataForPCA".impute_6 * -0.485580235189 + "CenteredDataForPCA".impute_7 * 0.170350355019 + "CenteredDataForPCA".impute_8 * -0.172988882196 + "CenteredDataForPCA".impute_9 * -0.119173494618 + "CenteredDataForPCA".impute_10 * -0.0343705727241 + "CenteredDataForPCA".impute_11 * -0.075114580129 + "CenteredDataForPCA".impute_12 * 0.17662007247 + "CenteredDataForPCA".impute_13 * -0.0410970969938 + "CenteredDataForPCA".impute_14 * -0.0426656265393 + "CenteredDataForPCA".impute_15 * -0.150122938673 + "CenteredDataForPCA".impute_16 * 0.602537458468 + "CenteredDataForPCA".impute_17 * -0.169561710702 + "CenteredDataForPCA".impute_18 * -0.231757238982 + "CenteredDataForPCA".impute_19 * 0.28297080696 + "CenteredDataForPCA".impute_20 * -0.0718618686885 + "CenteredDataForPCA".impute_21 * -0.0501814751772 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.279104366384 + "CenteredDataForPCA".impute_3 * 0.00693212599918 + "CenteredDataForPCA".impute_4 * 0.186069951904 + "CenteredDataForPCA".impute_5 * -0.0530119297037 + "CenteredDataForPCA".impute_6 * -0.0588233587307 + "CenteredDataForPCA".impute_7 * 0.274411397346 + "CenteredDataForPCA".impute_8 * 0.236776069955 + "CenteredDataForPCA".impute_9 * -0.59770019941 + "CenteredDataForPCA".impute_10 * 0.248991220619 + "CenteredDataForPCA".impute_11 * 0.00367674770062 + "CenteredDataForPCA".impute_12 * 0.213879732488 + "CenteredDataForPCA".impute_13 * -0.241344068665 + "CenteredDataForPCA".impute_14 * 0.0822560231869 + "CenteredDataForPCA".impute_15 * -0.142248528025 + "CenteredDataForPCA".impute_16 * 0.128470002709 + "CenteredDataForPCA".impute_17 * 0.230367270651 + "CenteredDataForPCA".impute_18 * 0.269606830719 + "CenteredDataForPCA".impute_19 * -0.214691671684 + "CenteredDataForPCA".impute_20 * -0.0635378510404 + "CenteredDataForPCA".impute_21 * 0.0845978066868 AS anoova_19, "CenteredDataForPCA".impute_2 * 3.64488854044e-16 + "CenteredDataForPCA".impute_3 * -0.202608291353 + "CenteredDataForPCA".impute_4 * -2.77555756156e-17 + "CenteredDataForPCA".impute_5 * -5.37764277553e-17 + "CenteredDataForPCA".impute_6 * -3.15719672628e-16 + "CenteredDataForPCA".impute_7 * -2.15105711021e-16 + "CenteredDataForPCA".impute_8 * -1.17961196366e-16 + "CenteredDataForPCA".impute_9 * 1.19695919842e-16 + "CenteredDataForPCA".impute_10 * 1.04083408559e-16 + "CenteredDataForPCA".impute_11 * -0.603230757677 + "CenteredDataForPCA".impute_12 * -4.16333634234e-17 + "CenteredDataForPCA".impute_13 * 0.347317177781 + "CenteredDataForPCA".impute_14 * 0.271993849509 + "CenteredDataForPCA".impute_15 * -6.07153216592e-17 + "CenteredDataForPCA".impute_16 * 1.5959455979e-16 + "CenteredDataForPCA".impute_17 * -1.66533453694e-16 + "CenteredDataForPCA".impute_18 * 3.12250225676e-17 + "CenteredDataForPCA".impute_19 * 0.0 + "CenteredDataForPCA".impute_20 * -0.250292927799 + "CenteredDataForPCA".impute_21 * 0.58121089753 AS anoova_20, "CenteredDataForPCA".impute_2 * -4.67585875494e-18 + "CenteredDataForPCA".impute_3 * -0.624827836271 + "CenteredDataForPCA".impute_4 * -5.55111512313e-17 + "CenteredDataForPCA".impute_5 * -1.94289029309e-16 + "CenteredDataForPCA".impute_6 * -3.40005801291e-16 + "CenteredDataForPCA".impute_7 * 3.1918911958e-16 + "CenteredDataForPCA".impute_8 * 1.38777878078e-17 + "CenteredDataForPCA".impute_9 * 2.42861286637e-16 + "CenteredDataForPCA".impute_10 * 3.46944695195e-17 + "CenteredDataForPCA".impute_11 * -0.304907046844 + "CenteredDataForPCA".impute_12 * -0.0 + "CenteredDataForPCA".impute_13 * -0.286822115191 + "CenteredDataForPCA".impute_14 * -0.520693186877 + "CenteredDataForPCA".impute_15 * 2.08166817117e-16 + "CenteredDataForPCA".impute_16 * -6.93889390391e-17 + "CenteredDataForPCA".impute_17 * -1.11022302463e-16 + "CenteredDataForPCA".impute_18 * 1.38777878078e-17 + "CenteredDataForPCA".impute_19 * 8.32667268469e-17 + "CenteredDataForPCA".impute_20 * 0.400494767108 + "CenteredDataForPCA".impute_21 * 0.0532680833388 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.3660997152328491) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.0997404158115387) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.3660997152328491 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23 AS "Proba_0", -1.46967597006 AS "LogProba_0", 0.29 AS "Proba_1", -1.237874356 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.23 AS "Proba_3", -1.46967597006 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 0.0997404158115387 AS threshold, 40 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18333333333333332 AS "Proba_0", -1.69644928942 AS "LogProba_0", 0.48333333333333334 AS "Proba_1", -0.727048732236 AS "LogProba_1", 0.05 AS "Proba_2", -2.99573227355 AS "LogProba_2", 0.2833333333333333 AS "Proba_3", -1.26113121817 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.125 AS "Proba_0", -2.07944154168 AS "LogProba_0", 0.3125 AS "Proba_1", -1.16315080981 AS "LogProba_1", 0.0625 AS "Proba_2", -2.77258872224 AS "LogProba_2", 0.5 AS "Proba_3", -0.69314718056 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.6785714285714286 AS "Proba_1", -0.387765531009 AS "LogProba_1", 0.03571428571428571 AS "Proba_2", -3.33220451018 AS "LogProba_2", 0.03571428571428571 AS "Proba_3", -3.33220451018 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3 AS "Proba_0", -1.20397280433 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.55 AS "Proba_2", -0.597837000756 AS "LogProba_2", 0.15 AS "Proba_3", -1.89711998489 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Proba_3" AS "Proba_3", "DT_node_data"."LogProba_3" AS "LogProba_3", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0" AS "Proba_0_0", "DT_Output"."LogProba_0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1" AS "Proba_0_1", "DT_Output"."LogProba_1" AS "LogProba_0_1", CAST(NULL AS FLOAT) AS "Score_0_2", "DT_Output"."Proba_2" AS "Proba_0_2", "DT_Output"."LogProba_2" AS "LogProba_0_2", CAST(NULL AS FLOAT) AS "Score_0_3", "DT_Output"."Proba_3" AS "Proba_0_3", "DT_Output"."LogProba_3" AS "LogProba_0_3" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.03643526881933212) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.08060935884714127) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.2939090430736542) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_18' AS feature, -0.03643526881933212 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24 AS "Proba_0", -1.42711635564 AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0.26 AS "Proba_2", -1.34707364797 AS "LogProba_2", 0.3 AS "Proba_3", -1.20397280433 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, 0.08060935884714127 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.10714285714285714 AS "Proba_0", -2.23359222151 AS "LogProba_0", 0.08928571428571429 AS "Proba_1", -2.4159137783 AS "LogProba_1", 0.4107142857142857 AS "Proba_2", -0.889857474806 AS "LogProba_2", 0.39285714285714285 AS "Proba_3", -0.934309237377 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16666666666666666 AS "Proba_0", -1.79175946923 AS "LogProba_0", 0.03333333333333333 AS "Proba_1", -3.40119738166 AS "LogProba_1", 0.6333333333333333 AS "Proba_2", -0.456758402496 AS "LogProba_2", 0.16666666666666666 AS "Proba_3", -1.79175946923 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.038461538461538464 AS "Proba_0", -3.25809653802 AS "LogProba_0", 0.15384615384615385 AS "Proba_1", -1.8718021769 AS "LogProba_1", 0.15384615384615385 AS "Proba_2", -1.8718021769 AS "LogProba_2", 0.6538461538461539 AS "Proba_3", -0.424883193965 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_7' AS feature, -0.2939090430736542 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4090909090909091 AS "Proba_0", -0.893817876022 AS "LogProba_0", 0.3409090909090909 AS "Proba_1", -1.07613943282 AS "LogProba_1", 0.06818181818181818 AS "Proba_2", -2.68557734525 AS "LogProba_2", 0.18181818181818182 AS "Proba_3", -1.70474809224 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7 AS "Proba_0", -0.356674943939 AS "LogProba_0", 0.1 AS "Proba_1", -2.30258509299 AS "LogProba_1", 0.1 AS "Proba_2", -2.30258509299 AS "LogProba_2", 0.1 AS "Proba_3", -2.30258509299 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16666666666666666 AS "Proba_0", -1.79175946923 AS "LogProba_0", 0.5416666666666666 AS "Proba_1", -0.613104472886 AS "LogProba_1", 0.041666666666666664 AS "Proba_2", -3.17805383035 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Proba_3" AS "Proba_3", "DT_node_data_1"."LogProba_3" AS "LogProba_3", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0" AS "Proba_1_0", "DT_Output_1"."LogProba_0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1" AS "Proba_1_1", "DT_Output_1"."LogProba_1" AS "LogProba_1_1", CAST(NULL AS FLOAT) AS "Score_1_2", "DT_Output_1"."Proba_2" AS "Proba_1_2", "DT_Output_1"."LogProba_2" AS "LogProba_1_2", CAST(NULL AS FLOAT) AS "Score_1_3", "DT_Output_1"."Proba_3" AS "Proba_1_3", "DT_Output_1"."LogProba_3" AS "LogProba_1_3" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.1439619064331055) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.4405151605606079) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -1.1439619064331055 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26 AS "Proba_0", -1.34707364797 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.28 AS "Proba_2", -1.27296567581 AS "LogProba_2", 0.21 AS "Proba_3", -1.56064774826 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24324324324324326 AS "Proba_0", -1.41369333531 AS "LogProba_0", 0.02702702702702703 AS "Proba_1", -3.61091791264 AS "LogProba_1", 0.5945945945945946 AS "Proba_2", -0.519875459286 AS "LogProba_2", 0.13513513513513514 AS "Proba_3", -2.00148000021 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_12' AS feature, -0.4405151605606079 AS threshold, 40 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2698412698412698 AS "Proba_0", -1.30992138234 AS "LogProba_0", 0.38095238095238093 AS "Proba_1", -0.965080896044 AS "LogProba_1", 0.09523809523809523 AS "Proba_2", -2.35137525716 AS "LogProba_2", 0.25396825396825395 AS "Proba_3", -1.37054600415 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5769230769230769 AS "Proba_0", -0.550046336919 AS "LogProba_0", 0.07692307692307693 AS "Proba_1", -2.56494935746 AS "LogProba_1", 0.07692307692307693 AS "Proba_2", -2.56494935746 AS "LogProba_2", 0.2692307692307692 AS "Proba_3", -1.31218638897 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05405405405405406 AS "Proba_0", -2.91777073208 AS "LogProba_0", 0.5945945945945946 AS "Proba_1", -0.519875459286 AS "LogProba_1", 0.10810810810810811 AS "Proba_2", -2.22462355152 AS "LogProba_2", 0.24324324324324326 AS "Proba_3", -1.41369333531 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Proba_3" AS "Proba_3", "DT_node_data_2"."LogProba_3" AS "LogProba_3", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0" AS "Proba_2_0", "DT_Output_2"."LogProba_0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1" AS "Proba_2_1", "DT_Output_2"."LogProba_1" AS "LogProba_2_1", CAST(NULL AS FLOAT) AS "Score_2_2", "DT_Output_2"."Proba_2" AS "Proba_2_2", "DT_Output_2"."LogProba_2" AS "LogProba_2_2", CAST(NULL AS FLOAT) AS "Score_2_3", "DT_Output_2"."Proba_3" AS "Proba_2_3", "DT_Output_2"."LogProba_3" AS "LogProba_2_3" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_15 <= -0.10055911540985107) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.23064719140529633) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_15' AS feature, -0.10055911540985107 AS threshold, 62 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.28 AS "Proba_0", -1.27296567581 AS "LogProba_0", 0.26 AS "Proba_1", -1.34707364797 AS "LogProba_1", 0.22 AS "Proba_2", -1.51412773263 AS "LogProba_2", 0.24 AS "Proba_3", -1.42711635564 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5813953488372093 AS "Proba_0", -0.542324290825 AS "LogProba_0", 0.09302325581395349 AS "Proba_1", -2.37490575457 AS "LogProba_1", 0.20930232558139536 AS "Proba_2", -1.56397553836 AS "LogProba_2", 0.11627906976744186 AS "Proba_3", -2.15176220326 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -0.23064719140529633 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05263157894736842 AS "Proba_0", -2.94443897917 AS "LogProba_0", 0.38596491228070173 AS "Proba_1", -0.952008814476 AS "LogProba_1", 0.22807017543859648 AS "Proba_2", -1.47810191037 AS "LogProba_2", 0.3333333333333333 AS "Proba_3", -1.09861228867 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.08333333333333333 AS "Proba_1", -2.48490664979 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.6666666666666666 AS "Proba_3", -0.405465108108 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09090909090909091 AS "Proba_0", -2.3978952728 AS "LogProba_0", 0.6060606060606061 AS "Proba_1", -0.500775287912 AS "LogProba_1", 0.21212121212121213 AS "Proba_2", -1.55059741241 AS "LogProba_2", 0.09090909090909091 AS "Proba_3", -2.3978952728 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Proba_3" AS "Proba_3", "DT_node_data_3"."LogProba_3" AS "LogProba_3", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0" AS "Proba_3_0", "DT_Output_3"."LogProba_0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1" AS "Proba_3_1", "DT_Output_3"."LogProba_1" AS "LogProba_3_1", CAST(NULL AS FLOAT) AS "Score_3_2", "DT_Output_3"."Proba_2" AS "Proba_3_2", "DT_Output_3"."LogProba_2" AS "LogProba_3_2", CAST(NULL AS FLOAT) AS "Score_3_3", "DT_Output_3"."Proba_3" AS "Proba_3_3", "DT_Output_3"."LogProba_3" AS "LogProba_3_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.1252937912940979) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.8625754117965698) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.04316195473074913) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.1252937912940979 AS threshold, 65 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35 AS "Proba_0", -1.0498221245 AS "LogProba_0", 0.17 AS "Proba_1", -1.77195684193 AS "LogProba_1", 0.22 AS "Proba_2", -1.51412773263 AS "LogProba_2", 0.26 AS "Proba_3", -1.34707364797 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 0.8625754117965698 AS threshold, 31 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.30434782608695654 AS "Proba_1", -1.18958406687 AS "LogProba_1", 0.043478260869565216 AS "Proba_2", -3.13549421593 AS "LogProba_2", 0.15217391304347827 AS "Proba_3", -1.88273124743 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7777777777777778 AS "Proba_0", -0.251314428281 AS "LogProba_0", 0.1111111111111111 AS "Proba_1", -2.19722457734 AS "LogProba_1", 0.07407407407407407 AS "Proba_2", -2.60268968544 AS "LogProba_2", 0.037037037037037035 AS "Proba_3", -3.295836866 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.10526315789473684 AS "Proba_0", -2.25129179861 AS "LogProba_0", 0.5789473684210527 AS "Proba_1", -0.546543706368 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.3157894736842105 AS "Proba_3", -1.15267950994 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_10' AS feature, 0.04316195473074913 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2222222222222222 AS "Proba_0", -1.50407739678 AS "LogProba_0", 0.05555555555555555 AS "Proba_1", -2.8903717579 AS "LogProba_1", 0.37037037037037035 AS "Proba_2", -0.99325177301 AS "LogProba_2", 0.35185185185185186 AS "Proba_3", -1.0445450674 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2857142857142857 AS "Proba_0", -1.2527629685 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.14285714285714285 AS "Proba_2", -1.94591014906 AS "LogProba_2", 0.5714285714285714 AS "Proba_3", -0.559615787935 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15384615384615385 AS "Proba_0", -1.8718021769 AS "LogProba_0", 0.11538461538461539 AS "Proba_1", -2.15948424935 AS "LogProba_1", 0.6153846153846154 AS "Proba_2", -0.485507815782 AS "LogProba_2", 0.11538461538461539 AS "Proba_3", -2.15948424935 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Proba_0" AS "Proba_0", "DT_node_data_4"."LogProba_0" AS "LogProba_0", "DT_node_data_4"."Proba_1" AS "Proba_1", "DT_node_data_4"."LogProba_1" AS "LogProba_1", "DT_node_data_4"."Proba_2" AS "Proba_2", "DT_node_data_4"."LogProba_2" AS "LogProba_2", "DT_node_data_4"."Proba_3" AS "Proba_3", "DT_node_data_4"."LogProba_3" AS "LogProba_3", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0" AS "Proba_4_0", "DT_Output_4"."LogProba_0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1" AS "Proba_4_1", "DT_Output_4"."LogProba_1" AS "LogProba_4_1", CAST(NULL AS FLOAT) AS "Score_4_2", "DT_Output_4"."Proba_2" AS "Proba_4_2", "DT_Output_4"."LogProba_2" AS "LogProba_4_2", CAST(NULL AS FLOAT) AS "Score_4_3", "DT_Output_4"."Proba_3" AS "Proba_4_3", "DT_Output_4"."LogProba_3" AS "LogProba_4_3" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 0.6596139669418335) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.448419451713562) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, 0.6596139669418335 AS threshold, 63 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3 AS "Proba_0", -1.20397280433 AS "LogProba_0", 0.24 AS "Proba_1", -1.42711635564 AS "LogProba_1", 0.21 AS "Proba_2", -1.56064774826 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_12' AS feature, -0.448419451713562 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3880597014925373 AS "Proba_0", -0.946596081369 AS "LogProba_0", 0.05970149253731343 AS "Proba_1", -2.81839825827 AS "LogProba_1", 0.31343283582089554 AS "Proba_2", -1.16017018167 AS "LogProba_2", 0.23880597014925373 AS "Proba_3", -1.43210389715 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6 AS "Proba_0", -0.510825623766 AS "LogProba_0", 0.08 AS "Proba_1", -2.52572864431 AS "LogProba_1", 0.04 AS "Proba_2", -3.21887582487 AS "LogProba_2", 0.28 AS "Proba_3", -1.27296567581 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2619047619047619 AS "Proba_0", -1.33977434548 AS "LogProba_0", 0.047619047619047616 AS "Proba_1", -3.04452243772 AS "LogProba_1", 0.47619047619047616 AS "Proba_2", -0.741937344729 AS "LogProba_2", 0.21428571428571427 AS "Proba_3", -1.54044504095 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.12121212121212122 AS "Proba_0", -2.11021320035 AS "LogProba_0", 0.6060606060606061 AS "Proba_1", -0.500775287912 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.2727272727272727 AS "Proba_3", -1.29928298413 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Proba_0" AS "Proba_0", "DT_node_data_5"."LogProba_0" AS "LogProba_0", "DT_node_data_5"."Proba_1" AS "Proba_1", "DT_node_data_5"."LogProba_1" AS "LogProba_1", "DT_node_data_5"."Proba_2" AS "Proba_2", "DT_node_data_5"."LogProba_2" AS "LogProba_2", "DT_node_data_5"."Proba_3" AS "Proba_3", "DT_node_data_5"."LogProba_3" AS "LogProba_3", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0" AS "Proba_5_0", "DT_Output_5"."LogProba_0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1" AS "Proba_5_1", "DT_Output_5"."LogProba_1" AS "LogProba_5_1", CAST(NULL AS FLOAT) AS "Score_5_2", "DT_Output_5"."Proba_2" AS "Proba_5_2", "DT_Output_5"."LogProba_2" AS "LogProba_5_2", CAST(NULL AS FLOAT) AS "Score_5_3", "DT_Output_5"."Proba_3" AS "Proba_5_3", "DT_Output_5"."LogProba_3" AS "LogProba_5_3" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 0.7032201290130615) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.20720407366752625) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, 0.7032201290130615 AS threshold, 58 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.29 AS "Proba_1", -1.237874356 AS "LogProba_1", 0.24 AS "Proba_2", -1.42711635564 AS "LogProba_2", 0.22 AS "Proba_3", -1.51412773263 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, -0.20720407366752625 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3235294117647059 AS "Proba_0", -1.12846525182 AS "LogProba_0", 0.20588235294117646 AS "Proba_1", -1.58045037556 AS "LogProba_1", 0.35294117647058826 AS "Proba_2", -1.04145387483 AS "LogProba_2", 0.11764705882352941 AS "Proba_3", -2.1400661635 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4230769230769231 AS "Proba_0", -0.860201265223 AS "LogProba_0", 0.46153846153846156 AS "Proba_1", -0.773189888233 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.11538461538461539 AS "Proba_3", -2.15948424935 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2619047619047619 AS "Proba_0", -1.33977434548 AS "LogProba_0", 0.047619047619047616 AS "Proba_1", -3.04452243772 AS "LogProba_1", 0.5714285714285714 AS "Proba_2", -0.559615787935 AS "LogProba_2", 0.11904761904761904 AS "Proba_3", -2.12823170585 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09375 AS "Proba_0", -2.36712361413 AS "LogProba_0", 0.46875 AS "Proba_1", -0.757685701698 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.4375 AS "Proba_3", -0.826678573184 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Proba_0" AS "Proba_0", "DT_node_data_6"."LogProba_0" AS "LogProba_0", "DT_node_data_6"."Proba_1" AS "Proba_1", "DT_node_data_6"."LogProba_1" AS "LogProba_1", "DT_node_data_6"."Proba_2" AS "Proba_2", "DT_node_data_6"."LogProba_2" AS "LogProba_2", "DT_node_data_6"."Proba_3" AS "Proba_3", "DT_node_data_6"."LogProba_3" AS "LogProba_3", "DT_node_data_6"."Decision" AS "Decision" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, CAST(NULL AS FLOAT) AS "Score_6_0", "DT_Output_6"."Proba_0" AS "Proba_6_0", "DT_Output_6"."LogProba_0" AS "LogProba_6_0", CAST(NULL AS FLOAT) AS "Score_6_1", "DT_Output_6"."Proba_1" AS "Proba_6_1", "DT_Output_6"."LogProba_1" AS "LogProba_6_1", CAST(NULL AS FLOAT) AS "Score_6_2", "DT_Output_6"."Proba_2" AS "Proba_6_2", "DT_Output_6"."LogProba_2" AS "LogProba_6_2", CAST(NULL AS FLOAT) AS "Score_6_3", "DT_Output_6"."Proba_3" AS "Proba_6_3", "DT_Output_6"."LogProba_3" AS "LogProba_6_3" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -1.1499969959259033) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.5773414373397827) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.14961659908294678) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -1.1499969959259033 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.31 AS "Proba_0", -1.1711829815 AS "LogProba_0", 0.24 AS "Proba_1", -1.42711635564 AS "LogProba_1", 0.18 AS "Proba_2", -1.71479842809 AS "LogProba_2", 0.27 AS "Proba_3", -1.30933331998 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6923076923076923 AS "Proba_0", -0.367724780125 AS "LogProba_0", 0.038461538461538464 AS "Proba_1", -3.25809653802 AS "LogProba_1", 0.15384615384615385 AS "Proba_2", -1.8718021769 AS "LogProba_2", 0.11538461538461539 AS "Proba_3", -2.15948424935 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_4' AS feature, -0.5773414373397827 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.17567567567567569 AS "Proba_0", -1.73911573574 AS "LogProba_0", 0.3108108108108108 AS "Proba_1", -1.16857087728 AS "LogProba_1", 0.1891891891891892 AS "Proba_2", -1.66500776359 AS "LogProba_2", 0.32432432432432434 AS "Proba_3", -1.12601126286 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23076923076923078 AS "Proba_0", -1.46633706879 AS "LogProba_0", 0.5769230769230769 AS "Proba_1", -0.550046336919 AS "LogProba_1", 0.038461538461538464 AS "Proba_2", -3.25809653802 AS "LogProba_2", 0.15384615384615385 AS "Proba_3", -1.8718021769 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_11' AS feature, 0.14961659908294678 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14583333333333334 AS "Proba_0", -1.92529086185 AS "LogProba_0", 0.16666666666666666 AS "Proba_1", -1.79175946923 AS "LogProba_1", 0.2708333333333333 AS "Proba_2", -1.30625165345 AS "LogProba_2", 0.4166666666666667 AS "Proba_3", -0.875468737354 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.041666666666666664 AS "Proba_0", -3.17805383035 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.4583333333333333 AS "Proba_2", -0.78015855755 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.08333333333333333 AS "Proba_1", -2.48490664979 AS "LogProba_1", 0.08333333333333333 AS "Proba_2", -2.48490664979 AS "LogProba_2", 0.5833333333333334 AS "Proba_3", -0.538996500733 AS "LogProba_3", 3 AS "Decision") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Proba_0" AS "Proba_0", "DT_node_data_7"."LogProba_0" AS "LogProba_0", "DT_node_data_7"."Proba_1" AS "Proba_1", "DT_node_data_7"."LogProba_1" AS "LogProba_1", "DT_node_data_7"."Proba_2" AS "Proba_2", "DT_node_data_7"."LogProba_2" AS "LogProba_2", "DT_node_data_7"."Proba_3" AS "Proba_3", "DT_node_data_7"."LogProba_3" AS "LogProba_3", "DT_node_data_7"."Decision" AS "Decision" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, CAST(NULL AS FLOAT) AS "Score_7_0", "DT_Output_7"."Proba_0" AS "Proba_7_0", "DT_Output_7"."LogProba_0" AS "LogProba_7_0", CAST(NULL AS FLOAT) AS "Score_7_1", "DT_Output_7"."Proba_1" AS "Proba_7_1", "DT_Output_7"."LogProba_1" AS "LogProba_7_1", CAST(NULL AS FLOAT) AS "Score_7_2", "DT_Output_7"."Proba_2" AS "Proba_7_2", "DT_Output_7"."LogProba_2" AS "LogProba_7_2", CAST(NULL AS FLOAT) AS "Score_7_3", "DT_Output_7"."Proba_3" AS "Proba_7_3", "DT_Output_7"."LogProba_3" AS "LogProba_7_3" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -2.4810824394226074) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.584818422794342) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_15 <= 0.05421977490186691) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -2.4810824394226074 AS threshold, 65 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.32 AS "Proba_0", -1.13943428319 AS "LogProba_0", 0.19 AS "Proba_1", -1.66073120682 AS "LogProba_1", 0.24 AS "Proba_2", -1.42711635564 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2222222222222222 AS "Proba_0", -1.50407739678 AS "LogProba_0", 0.037037037037037035 AS "Proba_1", -3.295836866 AS "LogProba_1", 0.6666666666666666 AS "Proba_2", -0.405465108108 AS "LogProba_2", 0.07407407407407407 AS "Proba_3", -2.60268968544 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -0.584818422794342 AS threshold, 49 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3561643835616438 AS "Proba_0", -1.03236290313 AS "LogProba_0", 0.2465753424657534 AS "Proba_1", -1.40008768325 AS "LogProba_1", 0.0821917808219178 AS "Proba_2", -2.49869997192 AS "LogProba_2", 0.3150684931506849 AS "Proba_3", -1.15496522522 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.17857142857142858 AS "Proba_0", -1.72276659774 AS "LogProba_0", 0.07142857142857142 AS "Proba_1", -2.63905732962 AS "LogProba_1", 0.10714285714285714 AS "Proba_2", -2.23359222151 AS "LogProba_2", 0.6428571428571429 AS "Proba_3", -0.441832752279 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_15' AS feature, 0.05421977490186691 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4666666666666667 AS "Proba_0", -0.762140052047 AS "LogProba_0", 0.35555555555555557 AS "Proba_1", -1.03407376753 AS "LogProba_1", 0.06666666666666667 AS "Proba_2", -2.7080502011 AS "LogProba_2", 0.1111111111111111 AS "Proba_3", -2.19722457734 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6521739130434783 AS "Proba_0", -0.427444014827 AS "LogProba_0", 0.13043478260869565 AS "Proba_1", -2.03688192726 AS "LogProba_1", 0.13043478260869565 AS "Proba_2", -2.03688192726 AS "LogProba_2", 0.08695652173913043 AS "Proba_3", -2.44234703537 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2727272727272727 AS "Proba_0", -1.29928298413 AS "LogProba_0", 0.5909090909090909 AS "Proba_1", -0.526093095897 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.13636363636363635 AS "Proba_3", -1.99243016469 AS "LogProba_3", 1 AS "Decision") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Proba_0" AS "Proba_0", "DT_node_data_8"."LogProba_0" AS "LogProba_0", "DT_node_data_8"."Proba_1" AS "Proba_1", "DT_node_data_8"."LogProba_1" AS "LogProba_1", "DT_node_data_8"."Proba_2" AS "Proba_2", "DT_node_data_8"."LogProba_2" AS "LogProba_2", "DT_node_data_8"."Proba_3" AS "Proba_3", "DT_node_data_8"."LogProba_3" AS "LogProba_3", "DT_node_data_8"."Decision" AS "Decision" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, CAST(NULL AS FLOAT) AS "Score_8_0", "DT_Output_8"."Proba_0" AS "Proba_8_0", "DT_Output_8"."LogProba_0" AS "LogProba_8_0", CAST(NULL AS FLOAT) AS "Score_8_1", "DT_Output_8"."Proba_1" AS "Proba_8_1", "DT_Output_8"."LogProba_1" AS "LogProba_8_1", CAST(NULL AS FLOAT) AS "Score_8_2", "DT_Output_8"."Proba_2" AS "Proba_8_2", "DT_Output_8"."LogProba_2" AS "LogProba_8_2", CAST(NULL AS FLOAT) AS "Score_8_3", "DT_Output_8"."Proba_3" AS "Proba_8_3", "DT_Output_8"."LogProba_3" AS "LogProba_8_3" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -2.4810824394226074) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.15741723775863647) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -2.4810824394226074 AS threshold, 61 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3 AS "Proba_0", -1.20397280433 AS "LogProba_0", 0.15 AS "Proba_1", -1.89711998489 AS "LogProba_1", 0.34 AS "Proba_2", -1.07880966137 AS "LogProba_2", 0.21 AS "Proba_3", -1.56064774826 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15384615384615385 AS "Proba_0", -1.8718021769 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.8076923076923077 AS "Proba_2", -0.213574100298 AS "LogProba_2", 0.038461538461538464 AS "Proba_3", -3.25809653802 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, 0.15741723775863647 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35135135135135137 AS "Proba_0", -1.04596855518 AS "LogProba_0", 0.20270270270270271 AS "Proba_1", -1.5960148921 AS "LogProba_1", 0.17567567567567569 AS "Proba_2", -1.73911573574 AS "LogProba_2", 0.2702702702702703 AS "Proba_3", -1.30833281965 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18604651162790697 AS "Proba_0", -1.68175857401 AS "LogProba_0", 0.18604651162790697 AS "Proba_1", -1.68175857401 AS "LogProba_1", 0.18604651162790697 AS "Proba_2", -1.68175857401 AS "LogProba_2", 0.4418604651162791 AS "Proba_3", -0.816761136527 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5806451612903226 AS "Proba_0", -0.543615446589 AS "LogProba_0", 0.22580645161290322 AS "Proba_1", -1.48807705543 AS "LogProba_1", 0.16129032258064516 AS "Proba_2", -1.82454929205 AS "LogProba_2", 0.03225806451612903 AS "Proba_3", -3.43398720449 AS "LogProba_3", 0 AS "Decision") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Proba_0" AS "Proba_0", "DT_node_data_9"."LogProba_0" AS "LogProba_0", "DT_node_data_9"."Proba_1" AS "Proba_1", "DT_node_data_9"."LogProba_1" AS "LogProba_1", "DT_node_data_9"."Proba_2" AS "Proba_2", "DT_node_data_9"."LogProba_2" AS "LogProba_2", "DT_node_data_9"."Proba_3" AS "Proba_3", "DT_node_data_9"."LogProba_3" AS "LogProba_3", "DT_node_data_9"."Decision" AS "Decision" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, CAST(NULL AS FLOAT) AS "Score_9_0", "DT_Output_9"."Proba_0" AS "Proba_9_0", "DT_Output_9"."LogProba_0" AS "LogProba_9_0", CAST(NULL AS FLOAT) AS "Score_9_1", "DT_Output_9"."Proba_1" AS "Proba_9_1", "DT_Output_9"."LogProba_1" AS "LogProba_9_1", CAST(NULL AS FLOAT) AS "Score_9_2", "DT_Output_9"."Proba_2" AS "Proba_9_2", "DT_Output_9"."LogProba_2" AS "LogProba_9_2", CAST(NULL AS FLOAT) AS "Score_9_3", "DT_Output_9"."Proba_3" AS "Proba_9_3", "DT_Output_9"."LogProba_3" AS "LogProba_9_3" 
FROM "DT_Output_9"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0".join_key_0 AS join_key_0, "RF_Tree_0"."Score_0_0" AS "Score_0_0", "RF_Tree_0"."Proba_0_0" AS "Proba_0_0", "RF_Tree_0"."LogProba_0_0" AS "LogProba_0_0", "RF_Tree_0"."Score_0_1" AS "Score_0_1", "RF_Tree_0"."Proba_0_1" AS "Proba_0_1", "RF_Tree_0"."LogProba_0_1" AS "LogProba_0_1", "RF_Tree_0"."Score_0_2" AS "Score_0_2", "RF_Tree_0"."Proba_0_2" AS "Proba_0_2", "RF_Tree_0"."LogProba_0_2" AS "LogProba_0_2", "RF_Tree_0"."Score_0_3" AS "Score_0_3", "RF_Tree_0"."Proba_0_3" AS "Proba_0_3", "RF_Tree_0"."LogProba_0_3" AS "LogProba_0_3", "RF_Tree_1".join_key_1 AS join_key_1, "RF_Tree_1"."Score_1_0" AS "Score_1_0", "RF_Tree_1"."Proba_1_0" AS "Proba_1_0", "RF_Tree_1"."LogProba_1_0" AS "LogProba_1_0", "RF_Tree_1"."Score_1_1" AS "Score_1_1", "RF_Tree_1"."Proba_1_1" AS "Proba_1_1", "RF_Tree_1"."LogProba_1_1" AS "LogProba_1_1", "RF_Tree_1"."Score_1_2" AS "Score_1_2", "RF_Tree_1"."Proba_1_2" AS "Proba_1_2", "RF_Tree_1"."LogProba_1_2" AS "LogProba_1_2", "RF_Tree_1"."Score_1_3" AS "Score_1_3", "RF_Tree_1"."Proba_1_3" AS "Proba_1_3", "RF_Tree_1"."LogProba_1_3" AS "LogProba_1_3", "RF_Tree_2".join_key_2 AS join_key_2, "RF_Tree_2"."Score_2_0" AS "Score_2_0", "RF_Tree_2"."Proba_2_0" AS "Proba_2_0", "RF_Tree_2"."LogProba_2_0" AS "LogProba_2_0", "RF_Tree_2"."Score_2_1" AS "Score_2_1", "RF_Tree_2"."Proba_2_1" AS "Proba_2_1", "RF_Tree_2"."LogProba_2_1" AS "LogProba_2_1", "RF_Tree_2"."Score_2_2" AS "Score_2_2", "RF_Tree_2"."Proba_2_2" AS "Proba_2_2", "RF_Tree_2"."LogProba_2_2" AS "LogProba_2_2", "RF_Tree_2"."Score_2_3" AS "Score_2_3", "RF_Tree_2"."Proba_2_3" AS "Proba_2_3", "RF_Tree_2"."LogProba_2_3" AS "LogProba_2_3", "RF_Tree_3".join_key_3 AS join_key_3, "RF_Tree_3"."Score_3_0" AS "Score_3_0", "RF_Tree_3"."Proba_3_0" AS "Proba_3_0", "RF_Tree_3"."LogProba_3_0" AS "LogProba_3_0", "RF_Tree_3"."Score_3_1" AS "Score_3_1", "RF_Tree_3"."Proba_3_1" AS "Proba_3_1", "RF_Tree_3"."LogProba_3_1" AS "LogProba_3_1", "RF_Tree_3"."Score_3_2" AS "Score_3_2", "RF_Tree_3"."Proba_3_2" AS "Proba_3_2", "RF_Tree_3"."LogProba_3_2" AS "LogProba_3_2", "RF_Tree_3"."Score_3_3" AS "Score_3_3", "RF_Tree_3"."Proba_3_3" AS "Proba_3_3", "RF_Tree_3"."LogProba_3_3" AS "LogProba_3_3", "RF_Tree_4".join_key_4 AS join_key_4, "RF_Tree_4"."Score_4_0" AS "Score_4_0", "RF_Tree_4"."Proba_4_0" AS "Proba_4_0", "RF_Tree_4"."LogProba_4_0" AS "LogProba_4_0", "RF_Tree_4"."Score_4_1" AS "Score_4_1", "RF_Tree_4"."Proba_4_1" AS "Proba_4_1", "RF_Tree_4"."LogProba_4_1" AS "LogProba_4_1", "RF_Tree_4"."Score_4_2" AS "Score_4_2", "RF_Tree_4"."Proba_4_2" AS "Proba_4_2", "RF_Tree_4"."LogProba_4_2" AS "LogProba_4_2", "RF_Tree_4"."Score_4_3" AS "Score_4_3", "RF_Tree_4"."Proba_4_3" AS "Proba_4_3", "RF_Tree_4"."LogProba_4_3" AS "LogProba_4_3", "RF_Tree_5".join_key_5 AS join_key_5, "RF_Tree_5"."Score_5_0" AS "Score_5_0", "RF_Tree_5"."Proba_5_0" AS "Proba_5_0", "RF_Tree_5"."LogProba_5_0" AS "LogProba_5_0", "RF_Tree_5"."Score_5_1" AS "Score_5_1", "RF_Tree_5"."Proba_5_1" AS "Proba_5_1", "RF_Tree_5"."LogProba_5_1" AS "LogProba_5_1", "RF_Tree_5"."Score_5_2" AS "Score_5_2", "RF_Tree_5"."Proba_5_2" AS "Proba_5_2", "RF_Tree_5"."LogProba_5_2" AS "LogProba_5_2", "RF_Tree_5"."Score_5_3" AS "Score_5_3", "RF_Tree_5"."Proba_5_3" AS "Proba_5_3", "RF_Tree_5"."LogProba_5_3" AS "LogProba_5_3", "RF_Tree_6".join_key_6 AS join_key_6, "RF_Tree_6"."Score_6_0" AS "Score_6_0", "RF_Tree_6"."Proba_6_0" AS "Proba_6_0", "RF_Tree_6"."LogProba_6_0" AS "LogProba_6_0", "RF_Tree_6"."Score_6_1" AS "Score_6_1", "RF_Tree_6"."Proba_6_1" AS "Proba_6_1", "RF_Tree_6"."LogProba_6_1" AS "LogProba_6_1", "RF_Tree_6"."Score_6_2" AS "Score_6_2", "RF_Tree_6"."Proba_6_2" AS "Proba_6_2", "RF_Tree_6"."LogProba_6_2" AS "LogProba_6_2", "RF_Tree_6"."Score_6_3" AS "Score_6_3", "RF_Tree_6"."Proba_6_3" AS "Proba_6_3", "RF_Tree_6"."LogProba_6_3" AS "LogProba_6_3", "RF_Tree_7".join_key_7 AS join_key_7, "RF_Tree_7"."Score_7_0" AS "Score_7_0", "RF_Tree_7"."Proba_7_0" AS "Proba_7_0", "RF_Tree_7"."LogProba_7_0" AS "LogProba_7_0", "RF_Tree_7"."Score_7_1" AS "Score_7_1", "RF_Tree_7"."Proba_7_1" AS "Proba_7_1", "RF_Tree_7"."LogProba_7_1" AS "LogProba_7_1", "RF_Tree_7"."Score_7_2" AS "Score_7_2", "RF_Tree_7"."Proba_7_2" AS "Proba_7_2", "RF_Tree_7"."LogProba_7_2" AS "LogProba_7_2", "RF_Tree_7"."Score_7_3" AS "Score_7_3", "RF_Tree_7"."Proba_7_3" AS "Proba_7_3", "RF_Tree_7"."LogProba_7_3" AS "LogProba_7_3", "RF_Tree_8".join_key_8 AS join_key_8, "RF_Tree_8"."Score_8_0" AS "Score_8_0", "RF_Tree_8"."Proba_8_0" AS "Proba_8_0", "RF_Tree_8"."LogProba_8_0" AS "LogProba_8_0", "RF_Tree_8"."Score_8_1" AS "Score_8_1", "RF_Tree_8"."Proba_8_1" AS "Proba_8_1", "RF_Tree_8"."LogProba_8_1" AS "LogProba_8_1", "RF_Tree_8"."Score_8_2" AS "Score_8_2", "RF_Tree_8"."Proba_8_2" AS "Proba_8_2", "RF_Tree_8"."LogProba_8_2" AS "LogProba_8_2", "RF_Tree_8"."Score_8_3" AS "Score_8_3", "RF_Tree_8"."Proba_8_3" AS "Proba_8_3", "RF_Tree_8"."LogProba_8_3" AS "LogProba_8_3", "RF_Tree_9".join_key_9 AS join_key_9, "RF_Tree_9"."Score_9_0" AS "Score_9_0", "RF_Tree_9"."Proba_9_0" AS "Proba_9_0", "RF_Tree_9"."LogProba_9_0" AS "LogProba_9_0", "RF_Tree_9"."Score_9_1" AS "Score_9_1", "RF_Tree_9"."Proba_9_1" AS "Proba_9_1", "RF_Tree_9"."LogProba_9_1" AS "LogProba_9_1", "RF_Tree_9"."Score_9_2" AS "Score_9_2", "RF_Tree_9"."Proba_9_2" AS "Proba_9_2", "RF_Tree_9"."LogProba_9_2" AS "LogProba_9_2", "RF_Tree_9"."Score_9_3" AS "Score_9_3", "RF_Tree_9"."Proba_9_3" AS "Proba_9_3", "RF_Tree_9"."LogProba_9_3" AS "LogProba_9_3" 
FROM "RF_Tree_0" LEFT OUTER JOIN "RF_Tree_1" ON "RF_Tree_0".join_key_0 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_2" ON "RF_Tree_2".join_key_2 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_3" ON "RF_Tree_3".join_key_3 = "RF_Tree_2".join_key_2 LEFT OUTER JOIN "RF_Tree_4" ON "RF_Tree_4".join_key_4 = "RF_Tree_3".join_key_3 LEFT OUTER JOIN "RF_Tree_5" ON "RF_Tree_5".join_key_5 = "RF_Tree_4".join_key_4 LEFT OUTER JOIN "RF_Tree_6" ON "RF_Tree_6".join_key_6 = "RF_Tree_5".join_key_5 LEFT OUTER JOIN "RF_Tree_7" ON "RF_Tree_7".join_key_7 = "RF_Tree_6".join_key_6 LEFT OUTER JOIN "RF_Tree_8" ON "RF_Tree_8".join_key_8 = "RF_Tree_7".join_key_7 LEFT OUTER JOIN "RF_Tree_9" ON "RF_Tree_9".join_key_9 = "RF_Tree_8".join_key_8), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0 AS "KEY", "RF_Join_CTE"."Score_0_0" / 10 + "RF_Join_CTE"."Score_1_0" / 10 + "RF_Join_CTE"."Score_2_0" / 10 + "RF_Join_CTE"."Score_3_0" / 10 + "RF_Join_CTE"."Score_4_0" / 10 + "RF_Join_CTE"."Score_5_0" / 10 + "RF_Join_CTE"."Score_6_0" / 10 + "RF_Join_CTE"."Score_7_0" / 10 + "RF_Join_CTE"."Score_8_0" / 10 + "RF_Join_CTE"."Score_9_0" / 10 AS "Score_0", "RF_Join_CTE"."Proba_0_0" / 10 + "RF_Join_CTE"."Proba_1_0" / 10 + "RF_Join_CTE"."Proba_2_0" / 10 + "RF_Join_CTE"."Proba_3_0" / 10 + "RF_Join_CTE"."Proba_4_0" / 10 + "RF_Join_CTE"."Proba_5_0" / 10 + "RF_Join_CTE"."Proba_6_0" / 10 + "RF_Join_CTE"."Proba_7_0" / 10 + "RF_Join_CTE"."Proba_8_0" / 10 + "RF_Join_CTE"."Proba_9_0" / 10 AS "Proba_0", "RF_Join_CTE"."LogProba_0_0" / 10 + "RF_Join_CTE"."LogProba_1_0" / 10 + "RF_Join_CTE"."LogProba_2_0" / 10 + "RF_Join_CTE"."LogProba_3_0" / 10 + "RF_Join_CTE"."LogProba_4_0" / 10 + "RF_Join_CTE"."LogProba_5_0" / 10 + "RF_Join_CTE"."LogProba_6_0" / 10 + "RF_Join_CTE"."LogProba_7_0" / 10 + "RF_Join_CTE"."LogProba_8_0" / 10 + "RF_Join_CTE"."LogProba_9_0" / 10 AS "LogProba_0", "RF_Join_CTE"."Score_0_1" / 10 + "RF_Join_CTE"."Score_1_1" / 10 + "RF_Join_CTE"."Score_2_1" / 10 + "RF_Join_CTE"."Score_3_1" / 10 + "RF_Join_CTE"."Score_4_1" / 10 + "RF_Join_CTE"."Score_5_1" / 10 + "RF_Join_CTE"."Score_6_1" / 10 + "RF_Join_CTE"."Score_7_1" / 10 + "RF_Join_CTE"."Score_8_1" / 10 + "RF_Join_CTE"."Score_9_1" / 10 AS "Score_1", "RF_Join_CTE"."Proba_0_1" / 10 + "RF_Join_CTE"."Proba_1_1" / 10 + "RF_Join_CTE"."Proba_2_1" / 10 + "RF_Join_CTE"."Proba_3_1" / 10 + "RF_Join_CTE"."Proba_4_1" / 10 + "RF_Join_CTE"."Proba_5_1" / 10 + "RF_Join_CTE"."Proba_6_1" / 10 + "RF_Join_CTE"."Proba_7_1" / 10 + "RF_Join_CTE"."Proba_8_1" / 10 + "RF_Join_CTE"."Proba_9_1" / 10 AS "Proba_1", "RF_Join_CTE"."LogProba_0_1" / 10 + "RF_Join_CTE"."LogProba_1_1" / 10 + "RF_Join_CTE"."LogProba_2_1" / 10 + "RF_Join_CTE"."LogProba_3_1" / 10 + "RF_Join_CTE"."LogProba_4_1" / 10 + "RF_Join_CTE"."LogProba_5_1" / 10 + "RF_Join_CTE"."LogProba_6_1" / 10 + "RF_Join_CTE"."LogProba_7_1" / 10 + "RF_Join_CTE"."LogProba_8_1" / 10 + "RF_Join_CTE"."LogProba_9_1" / 10 AS "LogProba_1", "RF_Join_CTE"."Score_0_2" / 10 + "RF_Join_CTE"."Score_1_2" / 10 + "RF_Join_CTE"."Score_2_2" / 10 + "RF_Join_CTE"."Score_3_2" / 10 + "RF_Join_CTE"."Score_4_2" / 10 + "RF_Join_CTE"."Score_5_2" / 10 + "RF_Join_CTE"."Score_6_2" / 10 + "RF_Join_CTE"."Score_7_2" / 10 + "RF_Join_CTE"."Score_8_2" / 10 + "RF_Join_CTE"."Score_9_2" / 10 AS "Score_2", "RF_Join_CTE"."Proba_0_2" / 10 + "RF_Join_CTE"."Proba_1_2" / 10 + "RF_Join_CTE"."Proba_2_2" / 10 + "RF_Join_CTE"."Proba_3_2" / 10 + "RF_Join_CTE"."Proba_4_2" / 10 + "RF_Join_CTE"."Proba_5_2" / 10 + "RF_Join_CTE"."Proba_6_2" / 10 + "RF_Join_CTE"."Proba_7_2" / 10 + "RF_Join_CTE"."Proba_8_2" / 10 + "RF_Join_CTE"."Proba_9_2" / 10 AS "Proba_2", "RF_Join_CTE"."LogProba_0_2" / 10 + "RF_Join_CTE"."LogProba_1_2" / 10 + "RF_Join_CTE"."LogProba_2_2" / 10 + "RF_Join_CTE"."LogProba_3_2" / 10 + "RF_Join_CTE"."LogProba_4_2" / 10 + "RF_Join_CTE"."LogProba_5_2" / 10 + "RF_Join_CTE"."LogProba_6_2" / 10 + "RF_Join_CTE"."LogProba_7_2" / 10 + "RF_Join_CTE"."LogProba_8_2" / 10 + "RF_Join_CTE"."LogProba_9_2" / 10 AS "LogProba_2", "RF_Join_CTE"."Score_0_3" / 10 + "RF_Join_CTE"."Score_1_3" / 10 + "RF_Join_CTE"."Score_2_3" / 10 + "RF_Join_CTE"."Score_3_3" / 10 + "RF_Join_CTE"."Score_4_3" / 10 + "RF_Join_CTE"."Score_5_3" / 10 + "RF_Join_CTE"."Score_6_3" / 10 + "RF_Join_CTE"."Score_7_3" / 10 + "RF_Join_CTE"."Score_8_3" / 10 + "RF_Join_CTE"."Score_9_3" / 10 AS "Score_3", "RF_Join_CTE"."Proba_0_3" / 10 + "RF_Join_CTE"."Proba_1_3" / 10 + "RF_Join_CTE"."Proba_2_3" / 10 + "RF_Join_CTE"."Proba_3_3" / 10 + "RF_Join_CTE"."Proba_4_3" / 10 + "RF_Join_CTE"."Proba_5_3" / 10 + "RF_Join_CTE"."Proba_6_3" / 10 + "RF_Join_CTE"."Proba_7_3" / 10 + "RF_Join_CTE"."Proba_8_3" / 10 + "RF_Join_CTE"."Proba_9_3" / 10 AS "Proba_3", "RF_Join_CTE"."LogProba_0_3" / 10 + "RF_Join_CTE"."LogProba_1_3" / 10 + "RF_Join_CTE"."LogProba_2_3" / 10 + "RF_Join_CTE"."LogProba_3_3" / 10 + "RF_Join_CTE"."LogProba_4_3" / 10 + "RF_Join_CTE"."LogProba_5_3" / 10 + "RF_Join_CTE"."LogProba_6_3" / 10 + "RF_Join_CTE"."LogProba_7_3" / 10 + "RF_Join_CTE"."LogProba_8_3" / 10 + "RF_Join_CTE"."LogProba_9_3" / 10 AS "LogProba_3" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Score_3" AS "Score_3", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."Proba_3" AS "Proba_3", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", "RF_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte