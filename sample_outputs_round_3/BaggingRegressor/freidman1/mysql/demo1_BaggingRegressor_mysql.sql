-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

SELECT `RF_AVG_Scores`.`KEY` AS `KEY`, `RF_AVG_Scores`.`Estimator` AS `Estimator` 
FROM (SELECT `RF_Join_CTE`.join_key_0 AS `KEY`, `RF_Join_CTE`.`Estimator_0` / 10 + `RF_Join_CTE`.`Estimator_1` / 10 + `RF_Join_CTE`.`Estimator_2` / 10 + `RF_Join_CTE`.`Estimator_3` / 10 + `RF_Join_CTE`.`Estimator_4` / 10 + `RF_Join_CTE`.`Estimator_5` / 10 + `RF_Join_CTE`.`Estimator_6` / 10 + `RF_Join_CTE`.`Estimator_7` / 10 + `RF_Join_CTE`.`Estimator_8` / 10 + `RF_Join_CTE`.`Estimator_9` / 10 AS `Estimator` 
FROM (SELECT `RF_Tree_0`.join_key_0 AS join_key_0, `RF_Tree_0`.`Estimator_0` AS `Estimator_0`, `RF_Tree_1`.join_key_1 AS join_key_1, `RF_Tree_1`.`Estimator_1` AS `Estimator_1`, `RF_Tree_2`.join_key_2 AS join_key_2, `RF_Tree_2`.`Estimator_2` AS `Estimator_2`, `RF_Tree_3`.join_key_3 AS join_key_3, `RF_Tree_3`.`Estimator_3` AS `Estimator_3`, `RF_Tree_4`.join_key_4 AS join_key_4, `RF_Tree_4`.`Estimator_4` AS `Estimator_4`, `RF_Tree_5`.join_key_5 AS join_key_5, `RF_Tree_5`.`Estimator_5` AS `Estimator_5`, `RF_Tree_6`.join_key_6 AS join_key_6, `RF_Tree_6`.`Estimator_6` AS `Estimator_6`, `RF_Tree_7`.join_key_7 AS join_key_7, `RF_Tree_7`.`Estimator_7` AS `Estimator_7`, `RF_Tree_8`.join_key_8 AS join_key_8, `RF_Tree_8`.`Estimator_8` AS `Estimator_8`, `RF_Tree_9`.join_key_9 AS join_key_9, `RF_Tree_9`.`Estimator_9` AS `Estimator_9` 
FROM (SELECT `DT_Output`.`KEY` AS join_key_0, `DT_Output`.`Estimator` AS `Estimator_0` 
FROM (SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.4185178279876709) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.42834368348121643) THEN 3 ELSE 4 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.4185178279876709 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.218982959614559 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.685427979081947 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 0.42834368348121643 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.37719646154975 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.261784998799417 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.94669528875161 AS `Estimator`) AS `Values`) AS `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id) AS `DT_Output`) AS `RF_Tree_0` LEFT OUTER JOIN (SELECT `DT_Output_1`.`KEY` AS join_key_1, `DT_Output_1`.`Estimator` AS `Estimator_1` 
FROM (SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.6930641531944275) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.3650417625904083) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.31738805770874023) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_1` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.6930641531944275 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.664282630972561 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.3650417625904083 AS threshold, 49 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.224108279500939 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.161067023814196 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 0.31738805770874023 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.786884430361525 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.826315915216846 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.257310816720032 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.763240400545648 AS `Estimator`) AS `Values`) AS `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id) AS `DT_Output_1`) AS `RF_Tree_1` ON `RF_Tree_0`.join_key_0 = `RF_Tree_1`.join_key_1 LEFT OUTER JOIN (SELECT `DT_Output_2`.`KEY` AS join_key_2, `DT_Output_2`.`Estimator` AS `Estimator_2` 
FROM (SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.4149324893951416) THEN CASE WHEN (`ADS`.`Feature_4` <= 0.6944584846496582) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.47393304109573364) THEN 5 ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_2` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.4149324893951416 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.233373850452205 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_4' AS feature, 0.6944584846496582 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.648972359179645 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.389167263154347 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.81461890953723 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 0.47393304109573364 AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.52520158799579 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.362762311546899 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 19.18307169993994 AS `Estimator`) AS `Values`) AS `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id) AS `DT_Output_2`) AS `RF_Tree_2` ON `RF_Tree_2`.join_key_2 = `RF_Tree_1`.join_key_1 LEFT OUTER JOIN (SELECT `DT_Output_3`.`KEY` AS join_key_3, `DT_Output_3`.`Estimator` AS `Estimator_3` 
FROM (SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.4185178279876709) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.6856570243835449) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_3` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.4185178279876709 AS threshold, 62 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.706879612993404 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.6856570243835449 AS threshold, 33 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.00482955162815 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.066651053462794 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.012228710442272 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.963085508291538 AS `Estimator`) AS `Values`) AS `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id) AS `DT_Output_3`) AS `RF_Tree_3` ON `RF_Tree_3`.join_key_3 = `RF_Tree_2`.join_key_2 LEFT OUTER JOIN (SELECT `DT_Output_4`.`KEY` AS join_key_4, `DT_Output_4`.`Estimator` AS `Estimator_4` 
FROM (SELECT `DT_node_lookup_4`.`KEY` AS `KEY`, `DT_node_lookup_4`.node_id_2 AS node_id_2, `DT_node_data_4`.node_id AS node_id, `DT_node_data_4`.feature AS feature, `DT_node_data_4`.threshold AS threshold, `DT_node_data_4`.count AS count, `DT_node_data_4`.depth AS depth, `DT_node_data_4`.parent_id AS parent_id, `DT_node_data_4`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` <= 0.29725220799446106) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_4` <= 0.6028738021850586) THEN 3 ELSE 4 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_4` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.29725220799446106 AS threshold, 65 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.30869593193424 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.622946160135443 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_4' AS feature, 0.6028738021850586 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.964612496075734 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.609526653645988 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.625685464215415 AS `Estimator`) AS `Values`) AS `DT_node_data_4` ON `DT_node_lookup_4`.node_id_2 = `DT_node_data_4`.node_id) AS `DT_Output_4`) AS `RF_Tree_4` ON `RF_Tree_4`.join_key_4 = `RF_Tree_3`.join_key_3 LEFT OUTER JOIN (SELECT `DT_Output_5`.`KEY` AS join_key_5, `DT_Output_5`.`Estimator` AS `Estimator_5` 
FROM (SELECT `DT_node_lookup_5`.`KEY` AS `KEY`, `DT_node_lookup_5`.node_id_2 AS node_id_2, `DT_node_data_5`.node_id AS node_id, `DT_node_data_5`.feature AS feature, `DT_node_data_5`.threshold AS threshold, `DT_node_data_5`.count AS count, `DT_node_data_5`.depth AS depth, `DT_node_data_5`.parent_id AS parent_id, `DT_node_data_5`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.7318263053894043) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.29725220799446106) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_4` <= 0.5950267314910889) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_5` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.7318263053894043 AS threshold, 63 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.687949943167137 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 0.29725220799446106 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.510389828831176 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.937929034759437 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_4' AS feature, 0.5950267314910889 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.939374146459869 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.478112445439011 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.348447929587127 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.63021641290056 AS `Estimator`) AS `Values`) AS `DT_node_data_5` ON `DT_node_lookup_5`.node_id_2 = `DT_node_data_5`.node_id) AS `DT_Output_5`) AS `RF_Tree_5` ON `RF_Tree_5`.join_key_5 = `RF_Tree_4`.join_key_4 LEFT OUTER JOIN (SELECT `DT_Output_6`.`KEY` AS join_key_6, `DT_Output_6`.`Estimator` AS `Estimator_6` 
FROM (SELECT `DT_node_lookup_6`.`KEY` AS `KEY`, `DT_node_lookup_6`.node_id_2 AS node_id_2, `DT_node_data_6`.node_id AS node_id, `DT_node_data_6`.feature AS feature, `DT_node_data_6`.threshold AS threshold, `DT_node_data_6`.count AS count, `DT_node_data_6`.depth AS depth, `DT_node_data_6`.parent_id AS parent_id, `DT_node_data_6`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.4324418902397156) THEN 1 ELSE 2 END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_6` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.4324418902397156 AS threshold, 58 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.438303925463748 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.605807867490974 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.27079998343652 AS `Estimator`) AS `Values`) AS `DT_node_data_6` ON `DT_node_lookup_6`.node_id_2 = `DT_node_data_6`.node_id) AS `DT_Output_6`) AS `RF_Tree_6` ON `RF_Tree_6`.join_key_6 = `RF_Tree_5`.join_key_5 LEFT OUTER JOIN (SELECT `DT_Output_7`.`KEY` AS join_key_7, `DT_Output_7`.`Estimator` AS `Estimator_7` 
FROM (SELECT `DT_node_lookup_7`.`KEY` AS `KEY`, `DT_node_lookup_7`.node_id_2 AS node_id_2, `DT_node_data_7`.node_id AS node_id, `DT_node_data_7`.feature AS feature, `DT_node_data_7`.threshold AS threshold, `DT_node_data_7`.count AS count, `DT_node_data_7`.depth AS depth, `DT_node_data_7`.parent_id AS parent_id, `DT_node_data_7`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.7382133603096008) THEN CASE WHEN (`ADS`.`Feature_4` <= 0.5321722030639648) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_7` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.7382133603096008 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.151472971770978 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_4' AS feature, 0.5321722030639648 AS threshold, 49 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.577636551711565 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.457511319531987 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.812363147792743 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.135288301959125 AS `Estimator`) AS `Values`) AS `DT_node_data_7` ON `DT_node_lookup_7`.node_id_2 = `DT_node_data_7`.node_id) AS `DT_Output_7`) AS `RF_Tree_7` ON `RF_Tree_7`.join_key_7 = `RF_Tree_6`.join_key_6 LEFT OUTER JOIN (SELECT `DT_Output_8`.`KEY` AS join_key_8, `DT_Output_8`.`Estimator` AS `Estimator_8` 
FROM (SELECT `DT_node_lookup_8`.`KEY` AS `KEY`, `DT_node_lookup_8`.node_id_2 AS node_id_2, `DT_node_data_8`.node_id AS node_id, `DT_node_data_8`.feature AS feature, `DT_node_data_8`.threshold AS threshold, `DT_node_data_8`.count AS count, `DT_node_data_8`.depth AS depth, `DT_node_data_8`.parent_id AS parent_id, `DT_node_data_8`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` <= 0.3279424011707306) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.4185178279876709) THEN 3 ELSE 4 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_8` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.3279424011707306 AS threshold, 65 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.066183359436868 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.014550854287563 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.4185178279876709 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.972833950095362 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.736190820814437 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.08166890056023 AS `Estimator`) AS `Values`) AS `DT_node_data_8` ON `DT_node_lookup_8`.node_id_2 = `DT_node_data_8`.node_id) AS `DT_Output_8`) AS `RF_Tree_8` ON `RF_Tree_8`.join_key_8 = `RF_Tree_7`.join_key_7 LEFT OUTER JOIN (SELECT `DT_Output_9`.`KEY` AS join_key_9, `DT_Output_9`.`Estimator` AS `Estimator_9` 
FROM (SELECT `DT_node_lookup_9`.`KEY` AS `KEY`, `DT_node_lookup_9`.node_id_2 AS node_id_2, `DT_node_data_9`.node_id AS node_id, `DT_node_data_9`.feature AS feature, `DT_node_data_9`.threshold AS threshold, `DT_node_data_9`.count AS count, `DT_node_data_9`.depth AS depth, `DT_node_data_9`.parent_id AS parent_id, `DT_node_data_9`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` <= 0.29725220799446106) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.3458734154701233) THEN 3 ELSE 4 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_9` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.29725220799446106 AS threshold, 61 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.18107712984825 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.694878469226776 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.3458734154701233 AS threshold, 41 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.89816005224391 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.675345545355176 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.221263925391966 AS `Estimator`) AS `Values`) AS `DT_node_data_9` ON `DT_node_lookup_9`.node_id_2 = `DT_node_data_9`.node_id) AS `DT_Output_9`) AS `RF_Tree_9` ON `RF_Tree_9`.join_key_9 = `RF_Tree_8`.join_key_8) AS `RF_Join_CTE`) AS `RF_AVG_Scores`