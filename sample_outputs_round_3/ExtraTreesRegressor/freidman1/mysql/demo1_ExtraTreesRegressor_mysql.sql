-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

SELECT `RF_AVG_Scores`.`KEY` AS `KEY`, `RF_AVG_Scores`.`Estimator` AS `Estimator` 
FROM (SELECT `RF_Join_CTE`.join_key_0 AS `KEY`, `RF_Join_CTE`.`Estimator_0` / 10 + `RF_Join_CTE`.`Estimator_1` / 10 + `RF_Join_CTE`.`Estimator_2` / 10 + `RF_Join_CTE`.`Estimator_3` / 10 + `RF_Join_CTE`.`Estimator_4` / 10 + `RF_Join_CTE`.`Estimator_5` / 10 + `RF_Join_CTE`.`Estimator_6` / 10 + `RF_Join_CTE`.`Estimator_7` / 10 + `RF_Join_CTE`.`Estimator_8` / 10 + `RF_Join_CTE`.`Estimator_9` / 10 AS `Estimator` 
FROM (SELECT `RF_Tree_0`.join_key_0 AS join_key_0, `RF_Tree_0`.`Estimator_0` AS `Estimator_0`, `RF_Tree_1`.join_key_1 AS join_key_1, `RF_Tree_1`.`Estimator_1` AS `Estimator_1`, `RF_Tree_2`.join_key_2 AS join_key_2, `RF_Tree_2`.`Estimator_2` AS `Estimator_2`, `RF_Tree_3`.join_key_3 AS join_key_3, `RF_Tree_3`.`Estimator_3` AS `Estimator_3`, `RF_Tree_4`.join_key_4 AS join_key_4, `RF_Tree_4`.`Estimator_4` AS `Estimator_4`, `RF_Tree_5`.join_key_5 AS join_key_5, `RF_Tree_5`.`Estimator_5` AS `Estimator_5`, `RF_Tree_6`.join_key_6 AS join_key_6, `RF_Tree_6`.`Estimator_6` AS `Estimator_6`, `RF_Tree_7`.join_key_7 AS join_key_7, `RF_Tree_7`.`Estimator_7` AS `Estimator_7`, `RF_Tree_8`.join_key_8 AS join_key_8, `RF_Tree_8`.`Estimator_8` AS `Estimator_8`, `RF_Tree_9`.join_key_9 AS join_key_9, `RF_Tree_9`.`Estimator_9` AS `Estimator_9` 
FROM (SELECT `DT_Output`.`KEY` AS join_key_0, `DT_Output`.`Estimator` AS `Estimator_0` 
FROM (SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.22888827501018771) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.7639732386196032) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.6683865855584101) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.22888827501018771 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.612883064732571 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 0.7639732386196032 AS threshold, 74 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.37858285211488 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 0.6683865855584101 AS threshold, 56 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.983980772121694 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.259707702922402 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.835977772372782 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.717344878760347 AS `Estimator`) AS `Values`) AS `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id) AS `DT_Output`) AS `RF_Tree_0` LEFT OUTER JOIN (SELECT `DT_Output_1`.`KEY` AS join_key_1, `DT_Output_1`.`Estimator` AS `Estimator_1` 
FROM (SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_1` <= 0.3793806892540111) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.2852137044813913) THEN 3 ELSE CASE WHEN (`ADS`.`Feature_5` <= 0.4420724018637051) THEN 5 ELSE 6 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_1` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, 0.3793806892540111 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.86945138936555 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.2852137044813913 AS threshold, 68 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.913641857056625 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.859899076650004 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_5' AS feature, 0.4420724018637051 AS threshold, 48 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.019368015559383 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.279266811483936 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.700261123308795 AS `Estimator`) AS `Values`) AS `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id) AS `DT_Output_1`) AS `RF_Tree_1` ON `RF_Tree_0`.join_key_0 = `RF_Tree_1`.join_key_1 LEFT OUTER JOIN (SELECT `DT_Output_2`.`KEY` AS join_key_2, `DT_Output_2`.`Estimator` AS `Estimator_2` 
FROM (SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_1` <= 0.5564772261066839) THEN CASE WHEN (`ADS`.`Feature_9` <= 0.4787884153451812) THEN CASE WHEN (`ADS`.`Feature_6` <= 0.43276404258008333) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.28969007190134255) THEN 7 ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.7559127818928113) THEN 9 ELSE 10 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_2` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, 0.5564772261066839 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_9' AS feature, 0.4787884153451812 AS threshold, 53 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.74953726968034 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, 0.43276404258008333 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.557386878160269 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.042612687813815 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.10647934786315 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.611203730458605 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 0.28969007190134255 AS threshold, 47 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.728183307372138 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.895493471818126 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 0.7559127818928113 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.993506667788076 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.987329620303715 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.763662886156627 AS `Estimator`) AS `Values`) AS `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id) AS `DT_Output_2`) AS `RF_Tree_2` ON `RF_Tree_2`.join_key_2 = `RF_Tree_1`.join_key_1 LEFT OUTER JOIN (SELECT `DT_Output_3`.`KEY` AS join_key_3, `DT_Output_3`.`Estimator` AS `Estimator_3` 
FROM (SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.2896199287145415) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.2608206720543459) THEN 3 ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.7123999999362729) THEN 5 ELSE 6 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_3` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.2896199287145415 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.853577499111498 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 0.2608206720543459 AS threshold, 70 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.66203951094576 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.552900120986395 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_3' AS feature, 0.7123999999362729 AS threshold, 51 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.82034634249925 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.62007708506224 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.806281803965355 AS `Estimator`) AS `Values`) AS `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id) AS `DT_Output_3`) AS `RF_Tree_3` ON `RF_Tree_3`.join_key_3 = `RF_Tree_2`.join_key_2 LEFT OUTER JOIN (SELECT `DT_Output_4`.`KEY` AS join_key_4, `DT_Output_4`.`Estimator` AS `Estimator_4` 
FROM (SELECT `DT_node_lookup_4`.`KEY` AS `KEY`, `DT_node_lookup_4`.node_id_2 AS node_id_2, `DT_node_data_4`.node_id AS node_id, `DT_node_data_4`.feature AS feature, `DT_node_data_4`.threshold AS threshold, `DT_node_data_4`.count AS count, `DT_node_data_4`.depth AS depth, `DT_node_data_4`.parent_id AS parent_id, `DT_node_data_4`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.2795271809327912) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.5301994793603682) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.3436802853852153) THEN 4 ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_7` <= 0.5104651930197583) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_4` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.2795271809327912 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.853577499111497 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 0.5301994793603682 AS threshold, 70 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.66203951094576 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_1' AS feature, 0.3436802853852153 AS threshold, 38 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.698698747289068 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.610077649904841 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.043465985234292 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_7' AS feature, 0.5104651930197583 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.99350666778808 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 19.03612741657057 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.9559001247447 AS `Estimator`) AS `Values`) AS `DT_node_data_4` ON `DT_node_lookup_4`.node_id_2 = `DT_node_data_4`.node_id) AS `DT_Output_4`) AS `RF_Tree_4` ON `RF_Tree_4`.join_key_4 = `RF_Tree_3`.join_key_3 LEFT OUTER JOIN (SELECT `DT_Output_5`.`KEY` AS join_key_5, `DT_Output_5`.`Estimator` AS `Estimator_5` 
FROM (SELECT `DT_node_lookup_5`.`KEY` AS `KEY`, `DT_node_lookup_5`.node_id_2 AS node_id_2, `DT_node_data_5`.node_id AS node_id, `DT_node_data_5`.feature AS feature, `DT_node_data_5`.threshold AS threshold, `DT_node_data_5`.count AS count, `DT_node_data_5`.depth AS depth, `DT_node_data_5`.parent_id AS parent_id, `DT_node_data_5`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.5365586709966412) THEN CASE WHEN (`ADS`.`Feature_4` <= 0.32556016607978644) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.601696614229391) THEN 5 ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_5` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.5365586709966412 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_4' AS feature, 0.32556016607978644 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.172685987989661 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.844702531298738 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.121245599911747 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_1' AS feature, 0.601696614229391 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.801176217616238 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.131134066575036 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.078506423581505 AS `Estimator`) AS `Values`) AS `DT_node_data_5` ON `DT_node_lookup_5`.node_id_2 = `DT_node_data_5`.node_id) AS `DT_Output_5`) AS `RF_Tree_5` ON `RF_Tree_5`.join_key_5 = `RF_Tree_4`.join_key_4 LEFT OUTER JOIN (SELECT `DT_Output_6`.`KEY` AS join_key_6, `DT_Output_6`.`Estimator` AS `Estimator_6` 
FROM (SELECT `DT_node_lookup_6`.`KEY` AS `KEY`, `DT_node_lookup_6`.node_id_2 AS node_id_2, `DT_node_data_6`.node_id AS node_id, `DT_node_data_6`.feature AS feature, `DT_node_data_6`.threshold AS threshold, `DT_node_data_6`.count AS count, `DT_node_data_6`.depth AS depth, `DT_node_data_6`.parent_id AS parent_id, `DT_node_data_6`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` <= 0.35947962288684093) THEN CASE WHEN (`ADS`.`Feature_9` <= 0.3447870679023974) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.46689173407181583) THEN 5 ELSE CASE WHEN (`ADS`.`Feature_7` <= 0.5858216744926424) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_6` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.35947962288684093 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_9' AS feature, 0.3447870679023974 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.579589742913148 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.955199394808293 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.29341096051685 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_1' AS feature, 0.46689173407181583 AS threshold, 63 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.40484555955177 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.755341312052009 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_7' AS feature, 0.5858216744926424 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.503310501864128 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.68271132997368 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.20430912168154 AS `Estimator`) AS `Values`) AS `DT_node_data_6` ON `DT_node_lookup_6`.node_id_2 = `DT_node_data_6`.node_id) AS `DT_Output_6`) AS `RF_Tree_6` ON `RF_Tree_6`.join_key_6 = `RF_Tree_5`.join_key_5 LEFT OUTER JOIN (SELECT `DT_Output_7`.`KEY` AS join_key_7, `DT_Output_7`.`Estimator` AS `Estimator_7` 
FROM (SELECT `DT_node_lookup_7`.`KEY` AS `KEY`, `DT_node_lookup_7`.node_id_2 AS node_id_2, `DT_node_data_7`.node_id AS node_id, `DT_node_data_7`.feature AS feature, `DT_node_data_7`.threshold AS threshold, `DT_node_data_7`.count AS count, `DT_node_data_7`.depth AS depth, `DT_node_data_7`.parent_id AS parent_id, `DT_node_data_7`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_4` <= 0.4165191069510229) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.30892799603958243) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.4511340386185787) THEN 5 ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.5174674172861163) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_7` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_4' AS feature, 0.4165191069510229 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.30892799603958243 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.958666019311291 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 8.333218233439153 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.423970513704349 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_1' AS feature, 0.4511340386185787 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.54631237807714 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.39090154208845 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 0.5174674172861163 AS threshold, 34 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.773661203480906 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.673653330872273 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.01117006016563 AS `Estimator`) AS `Values`) AS `DT_node_data_7` ON `DT_node_lookup_7`.node_id_2 = `DT_node_data_7`.node_id) AS `DT_Output_7`) AS `RF_Tree_7` ON `RF_Tree_7`.join_key_7 = `RF_Tree_6`.join_key_6 LEFT OUTER JOIN (SELECT `DT_Output_8`.`KEY` AS join_key_8, `DT_Output_8`.`Estimator` AS `Estimator_8` 
FROM (SELECT `DT_node_lookup_8`.`KEY` AS `KEY`, `DT_node_lookup_8`.node_id_2 AS node_id_2, `DT_node_data_8`.node_id AS node_id, `DT_node_data_8`.feature AS feature, `DT_node_data_8`.threshold AS threshold, `DT_node_data_8`.count AS count, `DT_node_data_8`.depth AS depth, `DT_node_data_8`.parent_id AS parent_id, `DT_node_data_8`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.8561255797222136) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.24590324175167189) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.6954503394095283) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_8` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.8561255797222136 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 0.24590324175167189 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.633152062101802 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.804277536144001 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 0.6954503394095283 AS threshold, 66 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.735403819574499 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 51 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.547983346635027 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.77263342756868 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.208811030726345 AS `Estimator`) AS `Values`) AS `DT_node_data_8` ON `DT_node_lookup_8`.node_id_2 = `DT_node_data_8`.node_id) AS `DT_Output_8`) AS `RF_Tree_8` ON `RF_Tree_8`.join_key_8 = `RF_Tree_7`.join_key_7 LEFT OUTER JOIN (SELECT `DT_Output_9`.`KEY` AS join_key_9, `DT_Output_9`.`Estimator` AS `Estimator_9` 
FROM (SELECT `DT_node_lookup_9`.`KEY` AS `KEY`, `DT_node_lookup_9`.node_id_2 AS node_id_2, `DT_node_data_9`.node_id AS node_id, `DT_node_data_9`.feature AS feature, `DT_node_data_9`.threshold AS threshold, `DT_node_data_9`.count AS count, `DT_node_data_9`.depth AS depth, `DT_node_data_9`.parent_id AS parent_id, `DT_node_data_9`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.5123522165084339) THEN CASE WHEN (`ADS`.`Feature_5` <= 0.42141625535321303) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.6927071103324953) THEN CASE WHEN (`ADS`.`Feature_6` <= 0.5079894245420162) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_9` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.5123522165084339 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.619500907395484 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 0.42141625535321303 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.969416824516008 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.885736232538502 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.215649505290136 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_1' AS feature, 0.6927071103324953 AS threshold, 57 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 17.373073110269463 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_6' AS feature, 0.5079894245420162 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.65414606862776 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.29266320447337 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.940509269741488 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.31980518165525 AS `Estimator`) AS `Values`) AS `DT_node_data_9` ON `DT_node_lookup_9`.node_id_2 = `DT_node_data_9`.node_id) AS `DT_Output_9`) AS `RF_Tree_9` ON `RF_Tree_9`.join_key_9 = `RF_Tree_8`.join_key_8) AS `RF_Join_CTE`) AS `RF_AVG_Scores`