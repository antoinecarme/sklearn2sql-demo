-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [RawScores] AS 
(SELECT [ADS].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Proba_0], -1.42711635564 + (-0.5 * 1.85986572229 - (0.5 * ([ADS].[Feature_0] - -0.989250306208) * ([ADS].[Feature_0] - -0.989250306208)) / 1.02223218808) + (-0.5 * 1.83162428436 - (0.5 * ([ADS].[Feature_1] - -0.120664299163) * ([ADS].[Feature_1] - -0.120664299163)) / 0.99376672591) + (-0.5 * 1.69973983102 - (0.5 * ([ADS].[Feature_2] - 0.251296671125) * ([ADS].[Feature_2] - 0.251296671125)) / 0.870979154377) + (-0.5 * 2.13971725577 - (0.5 * ([ADS].[Feature_3] - 0.252854058516) * ([ADS].[Feature_3] - 0.252854058516)) / 1.3523450903) + (-0.5 * 2.38039536501 - (0.5 * ([ADS].[Feature_4] - -0.0278508985061) * ([ADS].[Feature_4] - -0.0278508985061)) / 1.72033372575) + (-0.5 * 1.88630370169 - (0.5 * ([ADS].[Feature_5] - 0.0936424454842) * ([ADS].[Feature_5] - 0.0936424454842)) / 1.04961836404) + (-0.5 * 1.81192812849 - (0.5 * ([ADS].[Feature_6] - 1.01012807086) * ([ADS].[Feature_6] - 1.01012807086)) / 0.974384842455) + (-0.5 * 2.61658280602 - (0.5 * ([ADS].[Feature_7] - -0.0355197520026) * ([ADS].[Feature_7] - -0.0355197520026)) / 2.17865069867) + (-0.5 * 1.45701891668 - (0.5 * ([ADS].[Feature_8] - 0.875257848647) * ([ADS].[Feature_8] - 0.875257848647)) / 0.683274805463) + (-0.5 * 1.85876094888 - (0.5 * ([ADS].[Feature_9] - 0.154928850952) * ([ADS].[Feature_9] - 0.154928850952)) / 1.02110347674) + (-0.5 * 2.07569335998 - (0.5 * ([ADS].[Feature_10] - 0.0126663519204) * ([ADS].[Feature_10] - 0.0126663519204)) / 1.26847614419) + (-0.5 * 1.81237997373 - (0.5 * ([ADS].[Feature_11] - -0.125089851458) * ([ADS].[Feature_11] - -0.125089851458)) / 0.974825213092) + (-0.5 * 2.0187527607 - (0.5 * ([ADS].[Feature_12] - -0.105021335888) * ([ADS].[Feature_12] - -0.105021335888)) / 1.19826621871) + (-0.5 * 1.14901073439 - (0.5 * ([ADS].[Feature_13] - -0.116403765608) * ([ADS].[Feature_13] - -0.116403765608)) / 0.502145012229) + (-0.5 * 2.04369754175 - (0.5 * ([ADS].[Feature_14] - -0.214313014653) * ([ADS].[Feature_14] - -0.214313014653)) / 1.2285326323) + (-0.5 * 1.85700696687 - (0.5 * ([ADS].[Feature_15] - 0.0913183213621) * ([ADS].[Feature_15] - 0.0913183213621)) / 1.01931404938) + (-0.5 * 1.53316113748 - (0.5 * ([ADS].[Feature_16] - -0.122714508712) * ([ADS].[Feature_16] - -0.122714508712)) / 0.737332799563) + (-0.5 * 2.39621753266 - (0.5 * ([ADS].[Feature_17] - 0.158471430596) * ([ADS].[Feature_17] - 0.158471430596)) / 1.74776960959) + (-0.5 * 1.86839618016 - (0.5 * ([ADS].[Feature_18] - 0.568517682894) * ([ADS].[Feature_18] - 0.568517682894)) / 1.03098959594) + (-0.5 * 1.30925296103 - (0.5 * ([ADS].[Feature_19] - -0.0214678812847) * ([ADS].[Feature_19] - -0.0214678812847)) / 0.589415385485) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Proba_1], -1.30933331998 + (-0.5 * 2.4882050519 - (0.5 * ([ADS].[Feature_0] - 0.0239387545309) * ([ADS].[Feature_0] - 0.0239387545309)) / 1.91616920165) + (-0.5 * 2.32048126023 - (0.5 * ([ADS].[Feature_1] - 0.120165905113) * ([ADS].[Feature_1] - 0.120165905113)) / 1.62028845789) + (-0.5 * 1.87714841791 - (0.5 * ([ADS].[Feature_2] - -0.0584691020069) * ([ADS].[Feature_2] - -0.0584691020069)) / 1.04005266521) + (-0.5 * 1.66506483945 - (0.5 * ([ADS].[Feature_3] - 0.075797329593) * ([ADS].[Feature_3] - 0.075797329593)) / 0.841295572641) + (-0.5 * 1.81591447901 - (0.5 * ([ADS].[Feature_4] - 0.206333618712) * ([ADS].[Feature_4] - 0.206333618712)) / 0.978276834245) + (-0.5 * 2.12848226708 - (0.5 * ([ADS].[Feature_5] - -0.148778940867) * ([ADS].[Feature_5] - -0.148778940867)) / 1.33723653964) + (-0.5 * 2.22476137486 - (0.5 * ([ADS].[Feature_6] - -0.0616396305407) * ([ADS].[Feature_6] - -0.0616396305407)) / 1.47238613878) + (-0.5 * 1.37921288188 - (0.5 * ([ADS].[Feature_7] - -0.72503817882) * ([ADS].[Feature_7] - -0.72503817882)) / 0.63212748745) + (-0.5 * 2.29927627526 - (0.5 * ([ADS].[Feature_8] - 0.0387143019497) * ([ADS].[Feature_8] - 0.0387143019497)) / 1.58629198669) + (-0.5 * 1.42528927337 - (0.5 * ([ADS].[Feature_9] - 0.187483848882) * ([ADS].[Feature_9] - 0.187483848882)) / 0.66193508085) + (-0.5 * 1.71423708666 - (0.5 * ([ADS].[Feature_10] - 0.187340105093) * ([ADS].[Feature_10] - 0.187340105093)) / 0.883697932773) + (-0.5 * 1.93495787204 - (0.5 * ([ADS].[Feature_11] - 0.0133413535587) * ([ADS].[Feature_11] - 0.0133413535587)) / 1.10194941374) + (-0.5 * 1.85600097849 - (0.5 * ([ADS].[Feature_12] - 0.0118397771246) * ([ADS].[Feature_12] - 0.0118397771246)) / 1.0182891469) + (-0.5 * 1.00659848267 - (0.5 * ([ADS].[Feature_13] - 0.0467468638688) * ([ADS].[Feature_13] - 0.0467468638688)) / 0.435492117065) + (-0.5 * 1.88463595653 - (0.5 * ([ADS].[Feature_14] - 0.357107677912) * ([ADS].[Feature_14] - 0.357107677912)) / 1.04786932697) + (-0.5 * 1.31853736487 - (0.5 * ([ADS].[Feature_15] - -0.0407304114386) * ([ADS].[Feature_15] - -0.0407304114386)) / 0.594913238607) + (-0.5 * 2.21816527461 - (0.5 * ([ADS].[Feature_16] - -0.118209229638) * ([ADS].[Feature_16] - -0.118209229638)) / 1.46270609258) + (-0.5 * 2.62424535985 - (0.5 * ([ADS].[Feature_17] - 0.0421380825084) * ([ADS].[Feature_17] - 0.0421380825084)) / 2.19540885005) + (-0.5 * 2.01997657341 - (0.5 * ([ADS].[Feature_18] - -0.334197891731) * ([ADS].[Feature_18] - -0.334197891731)) / 1.19973356983) + (-0.5 * 1.72374895627 - (0.5 * ([ADS].[Feature_19] - 0.0927449029355) * ([ADS].[Feature_19] - 0.0927449029355)) / 0.892143655915) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Proba_2], -1.42711635564 + (-0.5 * 2.08069169678 - (0.5 * ([ADS].[Feature_0] - 0.798307484084) * ([ADS].[Feature_0] - 0.798307484084)) / 1.27483228702) + (-0.5 * 1.48312905739 - (0.5 * ([ADS].[Feature_1] - 0.141101782589) * ([ADS].[Feature_1] - 0.141101782589)) / 0.701350154858) + (-0.5 * 1.60839541131 - (0.5 * ([ADS].[Feature_2] - -0.100503201267) * ([ADS].[Feature_2] - -0.100503201267)) / 0.794945551698) + (-0.5 * 2.12709384301 - (0.5 * ([ADS].[Feature_3] - -0.400397777954) * ([ADS].[Feature_3] - -0.400397777954)) / 1.33538117654) + (-0.5 * 1.34319248745 - (0.5 * ([ADS].[Feature_4] - 0.0588127648222) * ([ADS].[Feature_4] - 0.0588127648222)) / 0.609763209112) + (-0.5 * 1.98749563861 - (0.5 * ([ADS].[Feature_5] - 0.338905294964) * ([ADS].[Feature_5] - 0.338905294964)) / 1.16139117135) + (-0.5 * 2.10380636242 - (0.5 * ([ADS].[Feature_6] - -0.989779568717) * ([ADS].[Feature_6] - -0.989779568717)) / 1.30464281197) + (-0.5 * 1.49964977748 - (0.5 * ([ADS].[Feature_7] - 1.22040721109) * ([ADS].[Feature_7] - 1.22040721109)) / 0.713033204926) + (-0.5 * 2.41282968859 - (0.5 * ([ADS].[Feature_8] - -0.539462735315) * ([ADS].[Feature_8] - -0.539462735315)) / 1.77704633234) + (-0.5 * 2.02768643024 - (0.5 * ([ADS].[Feature_9] - 0.165940019302) * ([ADS].[Feature_9] - 0.165940019302)) / 1.20901909292) + (-0.5 * 1.70687665938 - (0.5 * ([ADS].[Feature_10] - -0.0233748668011) * ([ADS].[Feature_10] - -0.0233748668011)) / 0.877217417338) + (-0.5 * 1.49831189572 - (0.5 * ([ADS].[Feature_11] - 0.0101234397294) * ([ADS].[Feature_11] - 0.0101234397294)) / 0.712079888659) + (-0.5 * 2.20574758331 - (0.5 * ([ADS].[Feature_12] - 0.14875810438) * ([ADS].[Feature_12] - 0.14875810438)) / 1.44465496846) + (-0.5 * 2.13006606631 - (0.5 * ([ADS].[Feature_13] - -0.138885092668) * ([ADS].[Feature_13] - -0.138885092668)) / 1.33935613189) + (-0.5 * 1.64018623777 - (0.5 * ([ADS].[Feature_14] - 0.0252488276694) * ([ADS].[Feature_14] - 0.0252488276694)) / 0.820623527212) + (-0.5 * 1.4986882352 - (0.5 * ([ADS].[Feature_15] - -0.322437510703) * ([ADS].[Feature_15] - -0.322437510703)) / 0.712347922868) + (-0.5 * 1.34936876169 - (0.5 * ([ADS].[Feature_16] - -0.16919392875) * ([ADS].[Feature_16] - -0.16919392875)) / 0.613540928016) + (-0.5 * 2.80994702027 - (0.5 * ([ADS].[Feature_17] - 0.560902917934) * ([ADS].[Feature_17] - 0.560902917934)) / 2.64341053799) + (-0.5 * 2.24005751577 - (0.5 * ([ADS].[Feature_18] - 0.275964877415) * ([ADS].[Feature_18] - 0.275964877415)) / 1.49508109477) + (-0.5 * 1.50411979925 - (0.5 * ([ADS].[Feature_19] - -0.0493285977184) * ([ADS].[Feature_19] - -0.0493285977184)) / 0.716227613094) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Proba_3], -1.38629436112 + (-0.5 * 1.08126212702 - (0.5 * ([ADS].[Feature_0] - -1.06238050111) * ([ADS].[Feature_0] - -1.06238050111)) / 0.469252188646) + (-0.5 * 2.02961456439 - (0.5 * ([ADS].[Feature_1] - -0.157485681093) * ([ADS].[Feature_1] - -0.157485681093)) / 1.21135249275) + (-0.5 * 2.44541799052 - (0.5 * ([ADS].[Feature_2] - 0.0204801841071) * ([ADS].[Feature_2] - 0.0204801841071)) / 1.83591119835) + (-0.5 * 1.68741906753 - (0.5 * ([ADS].[Feature_3] - -0.0129404636796) * ([ADS].[Feature_3] - -0.0129404636796)) / 0.860313863394) + (-0.5 * 2.39277893507 - (0.5 * ([ADS].[Feature_4] - -0.456807850946) * ([ADS].[Feature_4] - -0.456807850946)) / 1.74177005416) + (-0.5 * 1.61583435225 - (0.5 * ([ADS].[Feature_5] - -0.117045672742) * ([ADS].[Feature_5] - -0.117045672742)) / 0.800881154642) + (-0.5 * 0.270607150878 - (0.5 * ([ADS].[Feature_6] - 1.11755318568) * ([ADS].[Feature_6] - 1.11755318568)) / 0.208613939302) + (-0.5 * 1.2382816518 - (0.5 * ([ADS].[Feature_7] - 0.713748679424) * ([ADS].[Feature_7] - 0.713748679424)) / 0.549033722187) + (-0.5 * 1.26759987769 - (0.5 * ([ADS].[Feature_8] - -1.11588931338) * ([ADS].[Feature_8] - -1.11588931338)) / 0.565368703153) + (-0.5 * 1.67142558639 - (0.5 * ([ADS].[Feature_9] - 0.296649341976) * ([ADS].[Feature_9] - 0.296649341976)) / 0.846663896054) + (-0.5 * 2.22849939208 - (0.5 * ([ADS].[Feature_10] - 0.323946713388) * ([ADS].[Feature_10] - 0.323946713388)) / 1.47790024301) + (-0.5 * 2.0087258738 - (0.5 * ([ADS].[Feature_11] - 0.0161560683915) * ([ADS].[Feature_11] - 0.0161560683915)) / 1.18631137395) + (-0.5 * 2.06167890542 - (0.5 * ([ADS].[Feature_12] - -0.123976930905) * ([ADS].[Feature_12] - -0.123976930905)) / 1.25082313051) + (-0.5 * 2.0059296188 - (0.5 * ([ADS].[Feature_13] - 0.228222879429) * ([ADS].[Feature_13] - 0.228222879429)) / 1.18299877843) + (-0.5 * 1.80450981087 - (0.5 * ([ADS].[Feature_14] - 0.0269498897268) * ([ADS].[Feature_14] - 0.0269498897268)) / 0.967183290939) + (-0.5 * 1.81829062426 - (0.5 * ([ADS].[Feature_15] - -0.172419879605) * ([ADS].[Feature_15] - -0.172419879605)) / 0.980604125995) + (-0.5 * 1.7553054567 - (0.5 * ([ADS].[Feature_16] - 0.145790862503) * ([ADS].[Feature_16] - 0.145790862503)) / 0.92074550118) + (-0.5 * 2.48985625219 - (0.5 * ([ADS].[Feature_17] - -0.237784196011) * ([ADS].[Feature_17] - -0.237784196011)) / 1.91933579441) + (-0.5 * 0.948150514664 - (0.5 * ([ADS].[Feature_18] - -0.610377839191) * ([ADS].[Feature_18] - -0.610377839191)) / 0.410768061206) + (-0.5 * 1.7455540693 - (0.5 * ([ADS].[Feature_19] - -0.0771059387654) * ([ADS].[Feature_19] - -0.0771059387654)) / 0.911810589792) AS [Score_3] 
FROM [INPUT_DATA] AS [ADS]), 
orig_cte AS 
(SELECT [RawScores].[KEY] AS [KEY], [RawScores].[Score_0] AS [Score_0], [RawScores].[Score_1] AS [Score_1], [RawScores].[Score_2] AS [Score_2], [RawScores].[Score_3] AS [Score_3], [RawScores].[Proba_0] AS [Proba_0], [RawScores].[Proba_1] AS [Proba_1], [RawScores].[Proba_2] AS [Proba_2], [RawScores].[Proba_3] AS [Proba_3], [RawScores].[LogProba_0] AS [LogProba_0], [RawScores].[LogProba_1] AS [LogProba_1], [RawScores].[LogProba_2] AS [LogProba_2], [RawScores].[LogProba_3] AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RawScores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte