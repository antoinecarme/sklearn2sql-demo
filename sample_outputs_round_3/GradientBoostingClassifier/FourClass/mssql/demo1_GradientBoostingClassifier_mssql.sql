-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= -0.13422445952892303) THEN CASE WHEN ([ADS].[Feature_16] <= -0.30156803131103516) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_18] <= 0.10150768607854843) THEN CASE WHEN ([ADS].[Feature_12] <= -0.49963104724884033) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, -0.13422445952892303 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 6.249895834702646e-06 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, -0.30156803131103516 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18181193192234713 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1999783333749958 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9999916668749953 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_18' AS feature, 0.10150768607854843 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14286339275297757 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_12' AS feature, -0.49963104724884033 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3125062498958347 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.41179656871323894 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.2000616671250017 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.333313888958329 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[RF_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0_0, [DT_Output].[Estimator] AS [Estimator_0_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] <= -1.4279074668884277) THEN 1 ELSE CASE WHEN ([ADS].[Feature_12] <= -0.11171743273735046) THEN 3 ELSE CASE WHEN ([ADS].[Feature_13] <= 0.07625237107276917) THEN 5 ELSE 6 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, -1.4279074668884277 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00766161802628198 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6407358111322303 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, -0.11171743273735046 AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14246223184218593 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.04752167176939973 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_13' AS feature, 0.07625237107276917 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22845893995713967 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0060990520475905 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7234769248780841 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[RF_Tree_0_1] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_0_1, [DT_Output_1].[Estimator] AS [Estimator_0_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_13] <= 0.052499815821647644) THEN CASE WHEN ([ADS].[Feature_16] <= 2.189225196838379) THEN CASE WHEN ([ADS].[Feature_14] <= 0.024734165519475937) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_11] <= -0.8845772743225098) THEN 7 ELSE CASE WHEN ([ADS].[Feature_12] <= -1.461362361907959) THEN 9 ELSE 10 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_13' AS feature, 0.052499815821647644 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0005491158791231085 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, 2.189225196838379 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2444085351756403 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_14' AS feature, 0.024734165519475937 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4103126114620708 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8307379108243619 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.396329317588844 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.26387225237387935 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_11' AS feature, -0.8845772743225098 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20718298204013233 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.45213069746378354 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_12' AS feature, -1.461362361907959 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24402599118867555 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9859476537566475 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9967152635176522 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[RF_Tree_0_2] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_0_2, [DT_Output_2].[Estimator] AS [Estimator_0_2] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_16] <= 1.9377622604370117) THEN CASE WHEN ([ADS].[Feature_16] <= -2.442673683166504) THEN 2 ELSE CASE WHEN ([ADS].[Feature_4] <= 0.6762406229972839) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_16' AS feature, 1.9377622604370117 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.006554400290358362 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, -2.442673683166504 AS threshold, 80 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0699403710493555 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6257165651563689 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_4' AS feature, 0.6762406229972839 AS threshold, 65 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12173002580802161 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7504902328098384 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3641159173702806 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9805386395020864 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[RF_Tree_0_3] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_0_3, [DT_Output_3].[Estimator] AS [Estimator_0_3] 
FROM [DT_Output_3]), 
[RF_Join_CTE_0] AS 
(SELECT [RF_Tree_0_0].join_key_0_0 AS join_key_0_0, [RF_Tree_0_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Tree_0_1].join_key_0_1 AS join_key_0_1, [RF_Tree_0_1].[Estimator_0_1] AS [Estimator_0_1], [RF_Tree_0_2].join_key_0_2 AS join_key_0_2, [RF_Tree_0_2].[Estimator_0_2] AS [Estimator_0_2], [RF_Tree_0_3].join_key_0_3 AS join_key_0_3, [RF_Tree_0_3].[Estimator_0_3] AS [Estimator_0_3] 
FROM [RF_Tree_0_0] LEFT OUTER JOIN [RF_Tree_0_1] ON [RF_Tree_0_0].join_key_0_0 = [RF_Tree_0_1].join_key_0_1 LEFT OUTER JOIN [RF_Tree_0_2] ON [RF_Tree_0_2].join_key_0_2 = [RF_Tree_0_1].join_key_0_1 LEFT OUTER JOIN [RF_Tree_0_3] ON [RF_Tree_0_3].join_key_0_3 = [RF_Tree_0_2].join_key_0_2), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= -0.13422445952892303) THEN CASE WHEN ([ADS].[Feature_6] <= 0.6382459402084351) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_0] <= 0.36086344718933105) THEN CASE WHEN ([ADS].[Feature_4] <= 0.2641749680042267) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, -0.13422445952892303 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -5.0749380655373824e-05 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, 0.6382459402084351 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16700681027219708 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9779313704791001 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16459763847200104 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 0.36086344718933105 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.13112901274841307 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_4' AS feature, 0.2641749680042267 AS threshold, 38 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0035932526906336235 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8084615226158802 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0038855430098081 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5423338931544763 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].count AS count, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[RF_Tree_1_0] AS 
(SELECT [DT_Output_4].[KEY] AS join_key_1_0, [DT_Output_4].[Estimator] AS [Estimator_1_0] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] <= -1.4279074668884277) THEN 1 ELSE CASE WHEN ([ADS].[Feature_10] <= 0.441606342792511) THEN CASE WHEN ([ADS].[Feature_9] <= -0.4709240198135376) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, -1.4279074668884277 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0068723044885723875 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3743626683850272 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_10' AS feature, 0.441606342792511 AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.13000607191332858 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_9' AS feature, -0.4709240198135376 AS threshold, 49 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19821859115386684 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4421105299414639 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9858525811291899 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.03804634718675817 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].count AS count, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[RF_Tree_1_1] AS 
(SELECT [DT_Output_5].[KEY] AS join_key_1_1, [DT_Output_5].[Estimator] AS [Estimator_1_1] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_13] <= 0.052499815821647644) THEN CASE WHEN ([ADS].[Feature_16] <= 2.189225196838379) THEN CASE WHEN ([ADS].[Feature_12] <= 0.3197665810585022) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_0] <= 0.36883699893951416) THEN CASE WHEN ([ADS].[Feature_12] <= -1.461362361907959) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_13' AS feature, 0.052499815821647644 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.403103919663364e-05 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, 2.189225196838379 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22193916931695967 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 0.3197665810585022 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.37212556030758226 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.65350541767776 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.022866267654736 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24077491897525846 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 0.36883699893951416 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18899627193815705 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_12' AS feature, -1.461362361907959 AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22685710378411358 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9590669090526479 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9796329061361854 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4603418736441088 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].count AS count, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[RF_Tree_1_2] AS 
(SELECT [DT_Output_6].[KEY] AS join_key_1_2, [DT_Output_6].[Estimator] AS [Estimator_1_2] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_16] <= 1.9377622604370117) THEN CASE WHEN ([ADS].[Feature_2] <= 0.46691828966140747) THEN CASE WHEN ([ADS].[Feature_10] <= -0.4478764533996582) THEN 3 ELSE 4 END ELSE 5 END ELSE 6 END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_16' AS feature, 1.9377622604370117 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.005507900349428055 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 0.46691828966140747 AS threshold, 80 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.06206960264862784 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_10' AS feature, -0.4478764533996582 AS threshold, 58 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0037421663721568512 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.827750624566888 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 40 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3571081640274531 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9825653942825087 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8235956352903182 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].count AS count, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[RF_Tree_1_3] AS 
(SELECT [DT_Output_7].[KEY] AS join_key_1_3, [DT_Output_7].[Estimator] AS [Estimator_1_3] 
FROM [DT_Output_7]), 
[RF_Join_CTE_1] AS 
(SELECT [RF_Tree_1_0].join_key_1_0 AS join_key_1_0, [RF_Tree_1_0].[Estimator_1_0] AS [Estimator_1_0], [RF_Tree_1_1].join_key_1_1 AS join_key_1_1, [RF_Tree_1_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Tree_1_2].join_key_1_2 AS join_key_1_2, [RF_Tree_1_2].[Estimator_1_2] AS [Estimator_1_2], [RF_Tree_1_3].join_key_1_3 AS join_key_1_3, [RF_Tree_1_3].[Estimator_1_3] AS [Estimator_1_3] 
FROM [RF_Tree_1_0] LEFT OUTER JOIN [RF_Tree_1_1] ON [RF_Tree_1_0].join_key_1_0 = [RF_Tree_1_1].join_key_1_1 LEFT OUTER JOIN [RF_Tree_1_2] ON [RF_Tree_1_2].join_key_1_2 = [RF_Tree_1_1].join_key_1_1 LEFT OUTER JOIN [RF_Tree_1_3] ON [RF_Tree_1_3].join_key_1_3 = [RF_Tree_1_2].join_key_1_2), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_13] <= 0.4747798442840576) THEN CASE WHEN ([ADS].[Feature_0] <= 0.3183579444885254) THEN CASE WHEN ([ADS].[Feature_10] <= 0.3644587993621826) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_12] <= -0.8773947954177856) THEN 7 ELSE 8 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_13' AS feature, 0.4747798442840576 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 5.438889065315477e-05 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 0.3183579444885254 AS threshold, 55 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12446873928510063 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_10' AS feature, 0.3644587993621826 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20329842533222978 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9753710783844587 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6916372417245942 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.34850186867282645 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_12' AS feature, -0.8773947954177856 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1522493233276857 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.09996993864732732 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4912274706028943 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].count AS count, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[RF_Tree_2_0] AS 
(SELECT [DT_Output_8].[KEY] AS join_key_2_0, [DT_Output_8].[Estimator] AS [Estimator_2_0] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] <= -1.4279074668884277) THEN 1 ELSE CASE WHEN ([ADS].[Feature_12] <= -0.11171743273735046) THEN 3 ELSE CASE WHEN ([ADS].[Feature_5] <= -0.5824686884880066) THEN 5 ELSE 6 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, -1.4279074668884277 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00608406992966221 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.16585083951521 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, -0.11171743273735046 AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.11781987470147286 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.01032599236365072 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_5' AS feature, -0.5824686884880066 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19380284873544013 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6561265937243524 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9606194851001938 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].count AS count, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[RF_Tree_2_1] AS 
(SELECT [DT_Output_9].[KEY] AS join_key_2_1, [DT_Output_9].[Estimator] AS [Estimator_2_1] 
FROM [DT_Output_9]), 
[DT_node_lookup_10] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_13] <= 0.052499815821647644) THEN CASE WHEN ([ADS].[Feature_16] <= 2.189225196838379) THEN CASE WHEN ([ADS].[Feature_13] <= -0.8017653226852417) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_11] <= -0.8845772743225098) THEN 7 ELSE CASE WHEN ([ADS].[Feature_12] <= -1.461362361907959) THEN 9 ELSE 10 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_13' AS feature, 0.052499815821647644 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0007529286455967985 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, 2.189225196838379 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19887012257279532 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_13' AS feature, -0.8017653226852417 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.333724530335861 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6838742615402982 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.547538807545207 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22153604163422394 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_11' AS feature, -0.8845772743225098 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17080219449830125 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.36290518997365667 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_12' AS feature, -1.461362361907959 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2051812119181112 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9315241945966078 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9534922563845315 AS [Estimator]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].count AS count, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[RF_Tree_2_2] AS 
(SELECT [DT_Output_10].[KEY] AS join_key_2_2, [DT_Output_10].[Estimator] AS [Estimator_2_2] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] <= 0.36086344718933105) THEN CASE WHEN ([ADS].[Feature_16] <= 1.9377622604370117) THEN CASE WHEN ([ADS].[Feature_16] <= -2.1229894161224365) THEN 3 ELSE 4 END ELSE 5 END ELSE 6 END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.36086344718933105 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0042705373933171215 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, 1.9377622604370117 AS threshold, 71 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.060791121318235906 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_16' AS feature, -2.1229894161224365 AS threshold, 55 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.014199953554997865 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8863757202593908 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 40 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4365185679640097 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.1271944547176524 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6913624363144759 AS [Estimator]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].count AS count, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[RF_Tree_2_3] AS 
(SELECT [DT_Output_11].[KEY] AS join_key_2_3, [DT_Output_11].[Estimator] AS [Estimator_2_3] 
FROM [DT_Output_11]), 
[RF_Join_CTE_2] AS 
(SELECT [RF_Tree_2_0].join_key_2_0 AS join_key_2_0, [RF_Tree_2_0].[Estimator_2_0] AS [Estimator_2_0], [RF_Tree_2_1].join_key_2_1 AS join_key_2_1, [RF_Tree_2_1].[Estimator_2_1] AS [Estimator_2_1], [RF_Tree_2_2].join_key_2_2 AS join_key_2_2, [RF_Tree_2_2].[Estimator_2_2] AS [Estimator_2_2], [RF_Tree_2_3].join_key_2_3 AS join_key_2_3, [RF_Tree_2_3].[Estimator_2_3] AS [Estimator_2_3] 
FROM [RF_Tree_2_0] LEFT OUTER JOIN [RF_Tree_2_1] ON [RF_Tree_2_0].join_key_2_0 = [RF_Tree_2_1].join_key_2_1 LEFT OUTER JOIN [RF_Tree_2_2] ON [RF_Tree_2_2].join_key_2_2 = [RF_Tree_2_1].join_key_2_1 LEFT OUTER JOIN [RF_Tree_2_3] ON [RF_Tree_2_3].join_key_2_3 = [RF_Tree_2_2].join_key_2_2), 
[DT_node_lookup_12] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= -0.13422445952892303) THEN CASE WHEN ([ADS].[Feature_6] <= 0.6382459402084351) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_19] <= 0.9972341060638428) THEN CASE WHEN ([ADS].[Feature_18] <= 0.10150768607854843) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, -0.13422445952892303 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.4607399302248026e-05 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, 0.6382459402084351 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1471035832594607 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9472660546283075 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14596030766757084 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_19' AS feature, 0.9972341060638428 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.11555530220510797 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_18' AS feature, 0.10150768607854843 AS threshold, 38 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23144616691887485 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4667819218252778 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21803659900585032 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.533131442543533 AS [Estimator]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].count AS count, [DT_node_data_12].depth AS depth, [DT_node_data_12].parent_id AS parent_id, [DT_node_data_12].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[RF_Tree_3_0] AS 
(SELECT [DT_Output_12].[KEY] AS join_key_3_0, [DT_Output_12].[Estimator] AS [Estimator_3_0] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] <= -1.4279074668884277) THEN 1 ELSE CASE WHEN ([ADS].[Feature_10] <= 0.441606342792511) THEN CASE WHEN ([ADS].[Feature_0] <= -0.6450036764144897) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, -1.4279074668884277 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.005336195276887837 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0028374367055806 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_10' AS feature, 0.441606342792511 AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.10637943414196362 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_0' AS feature, -0.6450036764144897 AS threshold, 49 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16905409887995737 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.35832429956755407 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9520763989151159 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09232005108165792 AS [Estimator]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].count AS count, [DT_node_data_13].depth AS depth, [DT_node_data_13].parent_id AS parent_id, [DT_node_data_13].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[RF_Tree_3_1] AS 
(SELECT [DT_Output_13].[KEY] AS join_key_3_1, [DT_Output_13].[Estimator] AS [Estimator_3_1] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_13] <= 0.052499815821647644) THEN CASE WHEN ([ADS].[Feature_15] <= 0.24994370341300964) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_8] <= -0.5405905246734619) THEN 5 ELSE CASE WHEN ([ADS].[Feature_12] <= -1.5325391292572021) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_13' AS feature, 0.052499815821647644 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0010878247646928104 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_15' AS feature, 0.24994370341300964 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18046375092822659 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0532985581894345 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1527292260697305 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_8' AS feature, -0.5405905246734619 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15574287072532783 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.32286646188527685 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_12' AS feature, -1.5325391292572021 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18907357600887642 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9128623784802621 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9375579678593463 AS [Estimator]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].count AS count, [DT_node_data_14].depth AS depth, [DT_node_data_14].parent_id AS parent_id, [DT_node_data_14].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[RF_Tree_3_2] AS 
(SELECT [DT_Output_14].[KEY] AS join_key_3_2, [DT_Output_14].[Estimator] AS [Estimator_3_2] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] <= 0.13853682577610016) THEN CASE WHEN ([ADS].[Feature_12] <= 1.2844167947769165) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_11] <= 0.4507327377796173) THEN CASE WHEN ([ADS].[Feature_14] <= -0.3736761808395386) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 0.13853682577610016 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.003068884094628416 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 1.2844167947769165 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.10545056521117836 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9191165495108892 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6841488084379762 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_11' AS feature, 0.4507327377796173 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.08833416569204806 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_14' AS feature, -0.3736761808395386 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19674663271902604 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6705194786001584 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9715505048960734 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8296779656077844 AS [Estimator]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].count AS count, [DT_node_data_15].depth AS depth, [DT_node_data_15].parent_id AS parent_id, [DT_node_data_15].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[RF_Tree_3_3] AS 
(SELECT [DT_Output_15].[KEY] AS join_key_3_3, [DT_Output_15].[Estimator] AS [Estimator_3_3] 
FROM [DT_Output_15]), 
[RF_Join_CTE_3] AS 
(SELECT [RF_Tree_3_0].join_key_3_0 AS join_key_3_0, [RF_Tree_3_0].[Estimator_3_0] AS [Estimator_3_0], [RF_Tree_3_1].join_key_3_1 AS join_key_3_1, [RF_Tree_3_1].[Estimator_3_1] AS [Estimator_3_1], [RF_Tree_3_2].join_key_3_2 AS join_key_3_2, [RF_Tree_3_2].[Estimator_3_2] AS [Estimator_3_2], [RF_Tree_3_3].join_key_3_3 AS join_key_3_3, [RF_Tree_3_3].[Estimator_3_3] AS [Estimator_3_3] 
FROM [RF_Tree_3_0] LEFT OUTER JOIN [RF_Tree_3_1] ON [RF_Tree_3_0].join_key_3_0 = [RF_Tree_3_1].join_key_3_1 LEFT OUTER JOIN [RF_Tree_3_2] ON [RF_Tree_3_2].join_key_3_2 = [RF_Tree_3_1].join_key_3_1 LEFT OUTER JOIN [RF_Tree_3_3] ON [RF_Tree_3_3].join_key_3_3 = [RF_Tree_3_2].join_key_3_2), 
[DT_node_lookup_16] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_13] <= 0.4747798442840576) THEN CASE WHEN ([ADS].[Feature_0] <= 0.3183579444885254) THEN CASE WHEN ([ADS].[Feature_8] <= 0.016485929489135742) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_12] <= -0.8773947954177856) THEN 7 ELSE 8 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_16] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_13' AS feature, 0.4747798442840576 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.5452924074241285e-05 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 0.3183579444885254 AS threshold, 55 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.10847672497964925 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_8' AS feature, 0.016485929489135742 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17815698006355768 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9530068334178521 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6540246742627279 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3113287242732463 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_12' AS feature, -0.8773947954177856 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.13268367036195852 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.05623487395774338 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.1587786136894365 AS [Estimator]) AS [Values]), 
[DT_Output_16] AS 
(SELECT [DT_node_lookup_16].[KEY] AS [KEY], [DT_node_lookup_16].node_id_2 AS node_id_2, [DT_node_data_16].node_id AS node_id, [DT_node_data_16].feature AS feature, [DT_node_data_16].threshold AS threshold, [DT_node_data_16].count AS count, [DT_node_data_16].depth AS depth, [DT_node_data_16].parent_id AS parent_id, [DT_node_data_16].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_16] LEFT OUTER JOIN [DT_node_data_16] ON [DT_node_lookup_16].node_id_2 = [DT_node_data_16].node_id), 
[RF_Tree_4_0] AS 
(SELECT [DT_Output_16].[KEY] AS join_key_4_0, [DT_Output_16].[Estimator] AS [Estimator_4_0] 
FROM [DT_Output_16]), 
[DT_node_lookup_17] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] <= 0.13853682577610016) THEN CASE WHEN ([ADS].[Feature_12] <= 0.3787805736064911) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_12] <= -1.1260688304901123) THEN 5 ELSE CASE WHEN ([ADS].[Feature_2] <= 0.11338787525892258) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_17] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 0.13853682577610016 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0046384510168880596 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 0.3787805736064911 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18412754487335112 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0056022645032885 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7457444686317088 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_12' AS feature, -1.1260688304901123 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15295459064493314 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.176217147548913 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 0.11338787525892258 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.023094910567092605 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9506011941408024 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7582688005630717 AS [Estimator]) AS [Values]), 
[DT_Output_17] AS 
(SELECT [DT_node_lookup_17].[KEY] AS [KEY], [DT_node_lookup_17].node_id_2 AS node_id_2, [DT_node_data_17].node_id AS node_id, [DT_node_data_17].feature AS feature, [DT_node_data_17].threshold AS threshold, [DT_node_data_17].count AS count, [DT_node_data_17].depth AS depth, [DT_node_data_17].parent_id AS parent_id, [DT_node_data_17].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_17] LEFT OUTER JOIN [DT_node_data_17] ON [DT_node_lookup_17].node_id_2 = [DT_node_data_17].node_id), 
[RF_Tree_4_1] AS 
(SELECT [DT_Output_17].[KEY] AS join_key_4_1, [DT_Output_17].[Estimator] AS [Estimator_4_1] 
FROM [DT_Output_17]), 
[DT_node_lookup_18] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_13] <= 0.052499815821647644) THEN CASE WHEN ([ADS].[Feature_16] <= 2.189225196838379) THEN CASE WHEN ([ADS].[Feature_14] <= 0.024734165519475937) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_0] <= 0.36883699893951416) THEN CASE WHEN ([ADS].[Feature_12] <= -1.461362361907959) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_18] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_13' AS feature, 0.052499815821647644 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0015800351974949783 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, 2.189225196838379 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16158219765514586 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_14' AS feature, 0.024734165519475937 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.27456066660679335 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.36313201793455524 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3623536811561132 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2088042911864962 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 0.36883699893951416 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1405700854053001 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_12' AS feature, -1.461362361907959 AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17507405941367998 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8972335844764426 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9218999366742685 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3305521325098119 AS [Estimator]) AS [Values]), 
[DT_Output_18] AS 
(SELECT [DT_node_lookup_18].[KEY] AS [KEY], [DT_node_lookup_18].node_id_2 AS node_id_2, [DT_node_data_18].node_id AS node_id, [DT_node_data_18].feature AS feature, [DT_node_data_18].threshold AS threshold, [DT_node_data_18].count AS count, [DT_node_data_18].depth AS depth, [DT_node_data_18].parent_id AS parent_id, [DT_node_data_18].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_18] LEFT OUTER JOIN [DT_node_data_18] ON [DT_node_lookup_18].node_id_2 = [DT_node_data_18].node_id), 
[RF_Tree_4_2] AS 
(SELECT [DT_Output_18].[KEY] AS join_key_4_2, [DT_Output_18].[Estimator] AS [Estimator_4_2] 
FROM [DT_Output_18]), 
[DT_node_lookup_19] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] <= 0.36086344718933105) THEN CASE WHEN ([ADS].[Feature_16] <= 1.9377622604370117) THEN CASE WHEN ([ADS].[Feature_10] <= -0.4478764533996582) THEN 3 ELSE 4 END ELSE 5 END ELSE 6 END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_19] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.36086344718933105 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.002239874578162461 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, 1.9377622604370117 AS threshold, 71 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.056312493833350505 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_10' AS feature, -0.4478764533996582 AS threshold, 55 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.007755377202291884 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.839836828303366 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 40 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4015259737356849 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9239933464664174 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.656792027301403 AS [Estimator]) AS [Values]), 
[DT_Output_19] AS 
(SELECT [DT_node_lookup_19].[KEY] AS [KEY], [DT_node_lookup_19].node_id_2 AS node_id_2, [DT_node_data_19].node_id AS node_id, [DT_node_data_19].feature AS feature, [DT_node_data_19].threshold AS threshold, [DT_node_data_19].count AS count, [DT_node_data_19].depth AS depth, [DT_node_data_19].parent_id AS parent_id, [DT_node_data_19].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_19] LEFT OUTER JOIN [DT_node_data_19] ON [DT_node_lookup_19].node_id_2 = [DT_node_data_19].node_id), 
[RF_Tree_4_3] AS 
(SELECT [DT_Output_19].[KEY] AS join_key_4_3, [DT_Output_19].[Estimator] AS [Estimator_4_3] 
FROM [DT_Output_19]), 
[RF_Join_CTE_4] AS 
(SELECT [RF_Tree_4_0].join_key_4_0 AS join_key_4_0, [RF_Tree_4_0].[Estimator_4_0] AS [Estimator_4_0], [RF_Tree_4_1].join_key_4_1 AS join_key_4_1, [RF_Tree_4_1].[Estimator_4_1] AS [Estimator_4_1], [RF_Tree_4_2].join_key_4_2 AS join_key_4_2, [RF_Tree_4_2].[Estimator_4_2] AS [Estimator_4_2], [RF_Tree_4_3].join_key_4_3 AS join_key_4_3, [RF_Tree_4_3].[Estimator_4_3] AS [Estimator_4_3] 
FROM [RF_Tree_4_0] LEFT OUTER JOIN [RF_Tree_4_1] ON [RF_Tree_4_0].join_key_4_0 = [RF_Tree_4_1].join_key_4_1 LEFT OUTER JOIN [RF_Tree_4_2] ON [RF_Tree_4_2].join_key_4_2 = [RF_Tree_4_1].join_key_4_1 LEFT OUTER JOIN [RF_Tree_4_3] ON [RF_Tree_4_3].join_key_4_3 = [RF_Tree_4_2].join_key_4_2), 
[DT_node_lookup_20] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= -0.03181825950741768) THEN CASE WHEN ([ADS].[Feature_13] <= 0.4373941719532013) THEN CASE WHEN ([ADS].[Feature_6] <= 0.19598358869552612) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_8] <= 0.4512236416339874) THEN CASE WHEN ([ADS].[Feature_0] <= 0.018834002315998077) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_20] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, -0.03181825950741768 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00017699444380119694 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_13' AS feature, 0.4373941719532013 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12007112032892664 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, 0.19598358869552612 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17767419124155476 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8985833716362178 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9397179421674906 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0270195009841723 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_8' AS feature, 0.4512236416339874 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.11049450637323774 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_0' AS feature, 0.018834002315998077 AS threshold, 34 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22128617508026907 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22377044690699546 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.45475757952374 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3923425055470511 AS [Estimator]) AS [Values]), 
[DT_Output_20] AS 
(SELECT [DT_node_lookup_20].[KEY] AS [KEY], [DT_node_lookup_20].node_id_2 AS node_id_2, [DT_node_data_20].node_id AS node_id, [DT_node_data_20].feature AS feature, [DT_node_data_20].threshold AS threshold, [DT_node_data_20].count AS count, [DT_node_data_20].depth AS depth, [DT_node_data_20].parent_id AS parent_id, [DT_node_data_20].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_20] LEFT OUTER JOIN [DT_node_data_20] ON [DT_node_lookup_20].node_id_2 = [DT_node_data_20].node_id), 
[RF_Tree_5_0] AS 
(SELECT [DT_Output_20].[KEY] AS join_key_5_0, [DT_Output_20].[Estimator] AS [Estimator_5_0] 
FROM [DT_Output_20]), 
[DT_node_lookup_21] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] <= 0.13853682577610016) THEN CASE WHEN ([ADS].[Feature_16] <= 0.5772618055343628) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_12] <= -1.1260688304901123) THEN 5 ELSE CASE WHEN ([ADS].[Feature_2] <= 0.11338787525892258) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_21] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 0.13853682577610016 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.004040193510701725 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_16' AS feature, 0.5772618055343628 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16937515864170763 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9801198774101889 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7029815265421725 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_12' AS feature, -1.1260688304901123 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14029511305902337 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0423508805334734 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 0.11338787525892258 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.018688699260906112 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.928163689736403 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6847824479772557 AS [Estimator]) AS [Values]), 
[DT_Output_21] AS 
(SELECT [DT_node_lookup_21].[KEY] AS [KEY], [DT_node_lookup_21].node_id_2 AS node_id_2, [DT_node_data_21].node_id AS node_id, [DT_node_data_21].feature AS feature, [DT_node_data_21].threshold AS threshold, [DT_node_data_21].count AS count, [DT_node_data_21].depth AS depth, [DT_node_data_21].parent_id AS parent_id, [DT_node_data_21].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_21] LEFT OUTER JOIN [DT_node_data_21] ON [DT_node_lookup_21].node_id_2 = [DT_node_data_21].node_id), 
[RF_Tree_5_1] AS 
(SELECT [DT_Output_21].[KEY] AS join_key_5_1, [DT_Output_21].[Estimator] AS [Estimator_5_1] 
FROM [DT_Output_21]), 
[DT_node_lookup_22] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_13] <= -1.0448758602142334) THEN 1 ELSE CASE WHEN ([ADS].[Feature_18] <= 0.5290534496307373) THEN CASE WHEN ([ADS].[Feature_9] <= -0.8145298957824707) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_22] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_13' AS feature, -1.0448758602142334 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0015106345760301017 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9214481551364091 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_18' AS feature, 0.5290534496307373 AS threshold, 78 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.07675339983795583 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_9' AS feature, -0.8145298957824707 AS threshold, 63 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12141804125902723 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.016020575290448175 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 46 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7878067901377354 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5118952957751637 AS [Estimator]) AS [Values]), 
[DT_Output_22] AS 
(SELECT [DT_node_lookup_22].[KEY] AS [KEY], [DT_node_lookup_22].node_id_2 AS node_id_2, [DT_node_data_22].node_id AS node_id, [DT_node_data_22].feature AS feature, [DT_node_data_22].threshold AS threshold, [DT_node_data_22].count AS count, [DT_node_data_22].depth AS depth, [DT_node_data_22].parent_id AS parent_id, [DT_node_data_22].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_22] LEFT OUTER JOIN [DT_node_data_22] ON [DT_node_lookup_22].node_id_2 = [DT_node_data_22].node_id), 
[RF_Tree_5_2] AS 
(SELECT [DT_Output_22].[KEY] AS join_key_5_2, [DT_Output_22].[Estimator] AS [Estimator_5_2] 
FROM [DT_Output_22]), 
[DT_node_lookup_23] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_11] <= 0.8793511390686035) THEN CASE WHEN ([ADS].[Feature_19] <= 0.05215161293745041) THEN 2 ELSE CASE WHEN ([ADS].[Feature_0] <= -0.640155017375946) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_23] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_11' AS feature, 0.8793511390686035 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0013508506782964086 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_19' AS feature, 0.05215161293745041 AS threshold, 76 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.049169680806046945 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5118230317126518 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_0' AS feature, -0.640155017375946 AS threshold, 48 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15772760731386157 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3504780970036814 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9421778600874592 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6008964516675044 AS [Estimator]) AS [Values]), 
[DT_Output_23] AS 
(SELECT [DT_node_lookup_23].[KEY] AS [KEY], [DT_node_lookup_23].node_id_2 AS node_id_2, [DT_node_data_23].node_id AS node_id, [DT_node_data_23].feature AS feature, [DT_node_data_23].threshold AS threshold, [DT_node_data_23].count AS count, [DT_node_data_23].depth AS depth, [DT_node_data_23].parent_id AS parent_id, [DT_node_data_23].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_23] LEFT OUTER JOIN [DT_node_data_23] ON [DT_node_lookup_23].node_id_2 = [DT_node_data_23].node_id), 
[RF_Tree_5_3] AS 
(SELECT [DT_Output_23].[KEY] AS join_key_5_3, [DT_Output_23].[Estimator] AS [Estimator_5_3] 
FROM [DT_Output_23]), 
[RF_Join_CTE_5] AS 
(SELECT [RF_Tree_5_0].join_key_5_0 AS join_key_5_0, [RF_Tree_5_0].[Estimator_5_0] AS [Estimator_5_0], [RF_Tree_5_1].join_key_5_1 AS join_key_5_1, [RF_Tree_5_1].[Estimator_5_1] AS [Estimator_5_1], [RF_Tree_5_2].join_key_5_2 AS join_key_5_2, [RF_Tree_5_2].[Estimator_5_2] AS [Estimator_5_2], [RF_Tree_5_3].join_key_5_3 AS join_key_5_3, [RF_Tree_5_3].[Estimator_5_3] AS [Estimator_5_3] 
FROM [RF_Tree_5_0] LEFT OUTER JOIN [RF_Tree_5_1] ON [RF_Tree_5_0].join_key_5_0 = [RF_Tree_5_1].join_key_5_1 LEFT OUTER JOIN [RF_Tree_5_2] ON [RF_Tree_5_2].join_key_5_2 = [RF_Tree_5_1].join_key_5_1 LEFT OUTER JOIN [RF_Tree_5_3] ON [RF_Tree_5_3].join_key_5_3 = [RF_Tree_5_2].join_key_5_2), 
[RF_Join_CTE] AS 
(SELECT [RF_Join_CTE_0].join_key_0_0 AS join_key_0_0, [RF_Join_CTE_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Join_CTE_0].join_key_0_1 AS join_key_0_1, [RF_Join_CTE_0].[Estimator_0_1] AS [Estimator_0_1], [RF_Join_CTE_0].join_key_0_2 AS join_key_0_2, [RF_Join_CTE_0].[Estimator_0_2] AS [Estimator_0_2], [RF_Join_CTE_0].join_key_0_3 AS join_key_0_3, [RF_Join_CTE_0].[Estimator_0_3] AS [Estimator_0_3], [RF_Join_CTE_1].join_key_1_0 AS join_key_1_0, [RF_Join_CTE_1].[Estimator_1_0] AS [Estimator_1_0], [RF_Join_CTE_1].join_key_1_1 AS join_key_1_1, [RF_Join_CTE_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Join_CTE_1].join_key_1_2 AS join_key_1_2, [RF_Join_CTE_1].[Estimator_1_2] AS [Estimator_1_2], [RF_Join_CTE_1].join_key_1_3 AS join_key_1_3, [RF_Join_CTE_1].[Estimator_1_3] AS [Estimator_1_3], [RF_Join_CTE_2].join_key_2_0 AS join_key_2_0, [RF_Join_CTE_2].[Estimator_2_0] AS [Estimator_2_0], [RF_Join_CTE_2].join_key_2_1 AS join_key_2_1, [RF_Join_CTE_2].[Estimator_2_1] AS [Estimator_2_1], [RF_Join_CTE_2].join_key_2_2 AS join_key_2_2, [RF_Join_CTE_2].[Estimator_2_2] AS [Estimator_2_2], [RF_Join_CTE_2].join_key_2_3 AS join_key_2_3, [RF_Join_CTE_2].[Estimator_2_3] AS [Estimator_2_3], [RF_Join_CTE_3].join_key_3_0 AS join_key_3_0, [RF_Join_CTE_3].[Estimator_3_0] AS [Estimator_3_0], [RF_Join_CTE_3].join_key_3_1 AS join_key_3_1, [RF_Join_CTE_3].[Estimator_3_1] AS [Estimator_3_1], [RF_Join_CTE_3].join_key_3_2 AS join_key_3_2, [RF_Join_CTE_3].[Estimator_3_2] AS [Estimator_3_2], [RF_Join_CTE_3].join_key_3_3 AS join_key_3_3, [RF_Join_CTE_3].[Estimator_3_3] AS [Estimator_3_3], [RF_Join_CTE_4].join_key_4_0 AS join_key_4_0, [RF_Join_CTE_4].[Estimator_4_0] AS [Estimator_4_0], [RF_Join_CTE_4].join_key_4_1 AS join_key_4_1, [RF_Join_CTE_4].[Estimator_4_1] AS [Estimator_4_1], [RF_Join_CTE_4].join_key_4_2 AS join_key_4_2, [RF_Join_CTE_4].[Estimator_4_2] AS [Estimator_4_2], [RF_Join_CTE_4].join_key_4_3 AS join_key_4_3, [RF_Join_CTE_4].[Estimator_4_3] AS [Estimator_4_3], [RF_Join_CTE_5].join_key_5_0 AS join_key_5_0, [RF_Join_CTE_5].[Estimator_5_0] AS [Estimator_5_0], [RF_Join_CTE_5].join_key_5_1 AS join_key_5_1, [RF_Join_CTE_5].[Estimator_5_1] AS [Estimator_5_1], [RF_Join_CTE_5].join_key_5_2 AS join_key_5_2, [RF_Join_CTE_5].[Estimator_5_2] AS [Estimator_5_2], [RF_Join_CTE_5].join_key_5_3 AS join_key_5_3, [RF_Join_CTE_5].[Estimator_5_3] AS [Estimator_5_3] 
FROM [RF_Join_CTE_0] LEFT OUTER JOIN [RF_Join_CTE_1] ON [RF_Join_CTE_0].join_key_0_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_2] ON [RF_Join_CTE_2].join_key_2_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_3] ON [RF_Join_CTE_3].join_key_3_0 = [RF_Join_CTE_2].join_key_2_0 LEFT OUTER JOIN [RF_Join_CTE_4] ON [RF_Join_CTE_4].join_key_4_0 = [RF_Join_CTE_3].join_key_3_0 LEFT OUTER JOIN [RF_Join_CTE_5] ON [RF_Join_CTE_5].join_key_5_0 = [RF_Join_CTE_4].join_key_4_0), 
[RF_AVG_Scores] AS 
(SELECT [RF_Join_CTE].join_key_0_0 AS [KEY], 0.25 + 0.1 * [RF_Join_CTE].[Estimator_0_0] + 0.1 * [RF_Join_CTE].[Estimator_1_0] + 0.1 * [RF_Join_CTE].[Estimator_2_0] + 0.1 * [RF_Join_CTE].[Estimator_3_0] + 0.1 * [RF_Join_CTE].[Estimator_4_0] + 0.1 * [RF_Join_CTE].[Estimator_5_0] AS [Score_0], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [LogProba_0], 0.26 + 0.1 * [RF_Join_CTE].[Estimator_0_1] + 0.1 * [RF_Join_CTE].[Estimator_1_1] + 0.1 * [RF_Join_CTE].[Estimator_2_1] + 0.1 * [RF_Join_CTE].[Estimator_3_1] + 0.1 * [RF_Join_CTE].[Estimator_4_1] + 0.1 * [RF_Join_CTE].[Estimator_5_1] AS [Score_1], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_1], 0.25 + 0.1 * [RF_Join_CTE].[Estimator_0_2] + 0.1 * [RF_Join_CTE].[Estimator_1_2] + 0.1 * [RF_Join_CTE].[Estimator_2_2] + 0.1 * [RF_Join_CTE].[Estimator_3_2] + 0.1 * [RF_Join_CTE].[Estimator_4_2] + 0.1 * [RF_Join_CTE].[Estimator_5_2] AS [Score_2], CAST(NULL AS FLOAT) AS [Proba_2], CAST(NULL AS FLOAT) AS [LogProba_2], 0.24 + 0.1 * [RF_Join_CTE].[Estimator_0_3] + 0.1 * [RF_Join_CTE].[Estimator_1_3] + 0.1 * [RF_Join_CTE].[Estimator_2_3] + 0.1 * [RF_Join_CTE].[Estimator_3_3] + 0.1 * [RF_Join_CTE].[Estimator_4_3] + 0.1 * [RF_Join_CTE].[Estimator_5_3] AS [Score_3], CAST(NULL AS FLOAT) AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_3] 
FROM [RF_Join_CTE]), 
orig_cte AS 
(SELECT [RF_AVG_Scores].[KEY] AS [KEY], [RF_AVG_Scores].[Score_0] AS [Score_0], [RF_AVG_Scores].[Score_1] AS [Score_1], [RF_AVG_Scores].[Score_2] AS [Score_2], [RF_AVG_Scores].[Score_3] AS [Score_3], [RF_AVG_Scores].[Proba_0] AS [Proba_0], [RF_AVG_Scores].[Proba_1] AS [Proba_1], [RF_AVG_Scores].[Proba_2] AS [Proba_2], [RF_AVG_Scores].[Proba_3] AS [Proba_3], [RF_AVG_Scores].[LogProba_0] AS [LogProba_0], [RF_AVG_Scores].[LogProba_1] AS [LogProba_1], [RF_AVG_Scores].[LogProba_2] AS [LogProba_2], [RF_AVG_Scores].[LogProba_3] AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RF_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte