-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.188931221213 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.118128146303 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.00400248829947 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.396729275397 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.00799844551357 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.111702625637 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.101888751142 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0501832659392 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0759986338272 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.18231648264 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.024660803945 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.0614462519604 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.309667009261 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.067463491701 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.555416395471 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.0923297591964 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.0235477821145 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN -0.269976412726 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.578686708698 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.00493083740877 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.188931221213 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.118128146303 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.00400248829947 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.396729275397 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.00799844551357 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.111702625637 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.101888751142 AS impute_8, "ADS_imp_1_OUT".impute_9 - -0.0501832659392 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0759986338272 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.18231648264 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.024660803945 AS impute_12, "ADS_imp_1_OUT".impute_13 - 0.0614462519604 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.309667009261 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.067463491701 AS impute_15, "ADS_imp_1_OUT".impute_16 - 0.555416395471 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.0923297591964 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.0235477821145 AS impute_18, "ADS_imp_1_OUT".impute_19 - -0.269976412726 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.578686708698 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.00493083740877 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0451913324848 + "CenteredDataForPCA".impute_3 * -0.0562883963136 + "CenteredDataForPCA".impute_4 * 0.0452326201271 + "CenteredDataForPCA".impute_5 * 0.398727431744 + "CenteredDataForPCA".impute_6 * 0.00414051167084 + "CenteredDataForPCA".impute_7 * 0.00240804711938 + "CenteredDataForPCA".impute_8 * 0.00564092411888 + "CenteredDataForPCA".impute_9 * 0.0518384186951 + "CenteredDataForPCA".impute_10 * -0.0067163141936 + "CenteredDataForPCA".impute_11 * 0.767389217895 + "CenteredDataForPCA".impute_12 * -0.0337314137477 + "CenteredDataForPCA".impute_13 * 0.236783030167 + "CenteredDataForPCA".impute_14 * 0.228009473932 + "CenteredDataForPCA".impute_15 * -0.0584421773914 + "CenteredDataForPCA".impute_16 * -0.253577293345 + "CenteredDataForPCA".impute_17 * 0.0196019243997 + "CenteredDataForPCA".impute_18 * 0.00125727532919 + "CenteredDataForPCA".impute_19 * -0.0141522425952 + "CenteredDataForPCA".impute_20 * 0.253272477022 + "CenteredDataForPCA".impute_21 * 0.0210757424099 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.0239053461462 + "CenteredDataForPCA".impute_3 * -0.0405512750742 + "CenteredDataForPCA".impute_4 * -0.0739091526989 + "CenteredDataForPCA".impute_5 * 0.143953102332 + "CenteredDataForPCA".impute_6 * -0.0162981488247 + "CenteredDataForPCA".impute_7 * -0.000450710562577 + "CenteredDataForPCA".impute_8 * -0.0290143276709 + "CenteredDataForPCA".impute_9 * 0.00191621419653 + "CenteredDataForPCA".impute_10 * -0.0326447792826 + "CenteredDataForPCA".impute_11 * -0.242936453943 + "CenteredDataForPCA".impute_12 * -0.0160305148367 + "CenteredDataForPCA".impute_13 * 0.332705864465 + "CenteredDataForPCA".impute_14 * -0.319673068216 + "CenteredDataForPCA".impute_15 * -0.0314055785196 + "CenteredDataForPCA".impute_16 * 0.279935113195 + "CenteredDataForPCA".impute_17 * -0.0866131247179 + "CenteredDataForPCA".impute_18 * -0.0630201392365 + "CenteredDataForPCA".impute_19 * 0.0107924338529 + "CenteredDataForPCA".impute_20 * 0.777021130598 + "CenteredDataForPCA".impute_21 * -0.0506085796535 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.212411711685 + "CenteredDataForPCA".impute_3 * -0.0780635377757 + "CenteredDataForPCA".impute_4 * -0.0261305665079 + "CenteredDataForPCA".impute_5 * 0.449864058534 + "CenteredDataForPCA".impute_6 * -0.214872919509 + "CenteredDataForPCA".impute_7 * 0.0211656998914 + "CenteredDataForPCA".impute_8 * 0.133408455948 + "CenteredDataForPCA".impute_9 * -0.148460319791 + "CenteredDataForPCA".impute_10 * 0.314348590828 + "CenteredDataForPCA".impute_11 * 0.041158027854 + "CenteredDataForPCA".impute_12 * -0.179415390459 + "CenteredDataForPCA".impute_13 * -0.596568595629 + "CenteredDataForPCA".impute_14 * -0.0456871139983 + "CenteredDataForPCA".impute_15 * 0.0633340490475 + "CenteredDataForPCA".impute_16 * 0.288839900506 + "CenteredDataForPCA".impute_17 * 0.171573471622 + "CenteredDataForPCA".impute_18 * 0.142782503458 + "CenteredDataForPCA".impute_19 * 0.1239505402 + "CenteredDataForPCA".impute_20 * 0.0962469147996 + "CenteredDataForPCA".impute_21 * 0.0818457810934 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.034658411809 + "CenteredDataForPCA".impute_3 * -0.0531108381534 + "CenteredDataForPCA".impute_4 * 0.209741503652 + "CenteredDataForPCA".impute_5 * 0.147753461301 + "CenteredDataForPCA".impute_6 * -0.13088866141 + "CenteredDataForPCA".impute_7 * -0.137537460799 + "CenteredDataForPCA".impute_8 * -0.266884862347 + "CenteredDataForPCA".impute_9 * 0.340608460068 + "CenteredDataForPCA".impute_10 * 0.275942650895 + "CenteredDataForPCA".impute_11 * -0.00254215407363 + "CenteredDataForPCA".impute_12 * 0.352656661931 + "CenteredDataForPCA".impute_13 * -0.231649378585 + "CenteredDataForPCA".impute_14 * -0.449452683185 + "CenteredDataForPCA".impute_15 * -0.177905407907 + "CenteredDataForPCA".impute_16 * -0.312444367112 + "CenteredDataForPCA".impute_17 * -0.210859164094 + "CenteredDataForPCA".impute_18 * -0.00443476342489 + "CenteredDataForPCA".impute_19 * -0.264487332718 + "CenteredDataForPCA".impute_20 * -0.0106176109157 + "CenteredDataForPCA".impute_21 * -0.082821307376 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.262001619598 + "CenteredDataForPCA".impute_3 * -0.459938782968 + "CenteredDataForPCA".impute_4 * -0.29994049715 + "CenteredDataForPCA".impute_5 * -0.0715569038811 + "CenteredDataForPCA".impute_6 * -0.163357661922 + "CenteredDataForPCA".impute_7 * -0.198845258031 + "CenteredDataForPCA".impute_8 * 0.0393978053328 + "CenteredDataForPCA".impute_9 * 0.244031453145 + "CenteredDataForPCA".impute_10 * -0.174353769135 + "CenteredDataForPCA".impute_11 * -0.00519811304408 + "CenteredDataForPCA".impute_12 * -0.421777599036 + "CenteredDataForPCA".impute_13 * 0.0439033157214 + "CenteredDataForPCA".impute_14 * -0.23346132296 + "CenteredDataForPCA".impute_15 * 0.0298471171794 + "CenteredDataForPCA".impute_16 * -0.29366505336 + "CenteredDataForPCA".impute_17 * 0.176138676742 + "CenteredDataForPCA".impute_18 * -0.0308640951806 + "CenteredDataForPCA".impute_19 * 0.136328679013 + "CenteredDataForPCA".impute_20 * -0.0796541266458 + "CenteredDataForPCA".impute_21 * -0.297667694418 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.215513099321 + "CenteredDataForPCA".impute_3 * 0.0094914406496 + "CenteredDataForPCA".impute_4 * -0.393528949268 + "CenteredDataForPCA".impute_5 * 0.0362225991882 + "CenteredDataForPCA".impute_6 * -0.294182469903 + "CenteredDataForPCA".impute_7 * 0.0911049751311 + "CenteredDataForPCA".impute_8 * 0.0465126816316 + "CenteredDataForPCA".impute_9 * 0.253985440899 + "CenteredDataForPCA".impute_10 * -0.114483934938 + "CenteredDataForPCA".impute_11 * 0.00674772358449 + "CenteredDataForPCA".impute_12 * 0.0072343505564 + "CenteredDataForPCA".impute_13 * -0.065331264604 + "CenteredDataForPCA".impute_14 * 0.253648176123 + "CenteredDataForPCA".impute_15 * 0.0652703643083 + "CenteredDataForPCA".impute_16 * 0.262294404924 + "CenteredDataForPCA".impute_17 * -0.0133302568059 + "CenteredDataForPCA".impute_18 * 0.117105357886 + "CenteredDataForPCA".impute_19 * -0.646523945157 + "CenteredDataForPCA".impute_20 * -0.00153435100901 + "CenteredDataForPCA".impute_21 * -0.221395388377 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.225911137726 + "CenteredDataForPCA".impute_3 * 0.202965836149 + "CenteredDataForPCA".impute_4 * -0.122270329123 + "CenteredDataForPCA".impute_5 * 0.0120621308654 + "CenteredDataForPCA".impute_6 * 0.232736347694 + "CenteredDataForPCA".impute_7 * 0.209567347377 + "CenteredDataForPCA".impute_8 * -0.139472766427 + "CenteredDataForPCA".impute_9 * 0.0222279638414 + "CenteredDataForPCA".impute_10 * 0.433182042035 + "CenteredDataForPCA".impute_11 * 0.0349456087894 + "CenteredDataForPCA".impute_12 * -0.292173945488 + "CenteredDataForPCA".impute_13 * -0.0129075096026 + "CenteredDataForPCA".impute_14 * 0.0130404705064 + "CenteredDataForPCA".impute_15 * 0.217040830269 + "CenteredDataForPCA".impute_16 * -0.0227638635489 + "CenteredDataForPCA".impute_17 * -0.319403776707 + "CenteredDataForPCA".impute_18 * -0.0333236205624 + "CenteredDataForPCA".impute_19 * 0.205417720331 + "CenteredDataForPCA".impute_20 * -0.0228429211412 + "CenteredDataForPCA".impute_21 * -0.553714315701 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.216003427525 + "CenteredDataForPCA".impute_3 * -0.175095639236 + "CenteredDataForPCA".impute_4 * -0.0464902508111 + "CenteredDataForPCA".impute_5 * -0.261717785089 + "CenteredDataForPCA".impute_6 * -0.238142273999 + "CenteredDataForPCA".impute_7 * 0.220826432783 + "CenteredDataForPCA".impute_8 * 0.160084765804 + "CenteredDataForPCA".impute_9 * 0.00352812067125 + "CenteredDataForPCA".impute_10 * 0.679066182703 + "CenteredDataForPCA".impute_11 * -0.0387722776492 + "CenteredDataForPCA".impute_12 * 0.0168740722209 + "CenteredDataForPCA".impute_13 * 0.358378501401 + "CenteredDataForPCA".impute_14 * 0.153319380468 + "CenteredDataForPCA".impute_15 * -0.271967388835 + "CenteredDataForPCA".impute_16 * -0.0229711819542 + "CenteredDataForPCA".impute_17 * 0.104406703836 + "CenteredDataForPCA".impute_18 * 0.00975012726669 + "CenteredDataForPCA".impute_19 * -0.0815790536874 + "CenteredDataForPCA".impute_20 * -0.0258975193619 + "CenteredDataForPCA".impute_21 * 0.115040805398 AS anoova_9, "CenteredDataForPCA".impute_2 * 0.31321454434 + "CenteredDataForPCA".impute_3 * -0.126288226633 + "CenteredDataForPCA".impute_4 * 0.151365288604 + "CenteredDataForPCA".impute_5 * -0.027926844366 + "CenteredDataForPCA".impute_6 * -0.162755587157 + "CenteredDataForPCA".impute_7 * 0.200225821208 + "CenteredDataForPCA".impute_8 * 0.221230055991 + "CenteredDataForPCA".impute_9 * -0.486813344821 + "CenteredDataForPCA".impute_10 * -0.0988343419351 + "CenteredDataForPCA".impute_11 * -0.017345042259 + "CenteredDataForPCA".impute_12 * 0.0558897893623 + "CenteredDataForPCA".impute_13 * 0.0564260766119 + "CenteredDataForPCA".impute_14 * -0.244827707895 + "CenteredDataForPCA".impute_15 * -0.0579528860559 + "CenteredDataForPCA".impute_16 * -0.231949318296 + "CenteredDataForPCA".impute_17 * 0.104442967913 + "CenteredDataForPCA".impute_18 * 0.539587625843 + "CenteredDataForPCA".impute_19 * -0.0617170835957 + "CenteredDataForPCA".impute_20 * 0.0157065189617 + "CenteredDataForPCA".impute_21 * -0.264861722446 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.330345854047 + "CenteredDataForPCA".impute_3 * -0.225077310571 + "CenteredDataForPCA".impute_4 * 0.157294013031 + "CenteredDataForPCA".impute_5 * -0.032483121283 + "CenteredDataForPCA".impute_6 * 0.227506360852 + "CenteredDataForPCA".impute_7 * -0.517517639635 + "CenteredDataForPCA".impute_8 * 0.25038788935 + "CenteredDataForPCA".impute_9 * 0.168729350628 + "CenteredDataForPCA".impute_10 * 0.268117508263 + "CenteredDataForPCA".impute_11 * -0.0370399588129 + "CenteredDataForPCA".impute_12 * 0.219243605091 + "CenteredDataForPCA".impute_13 * 0.0675981483382 + "CenteredDataForPCA".impute_14 * 0.10614409821 + "CenteredDataForPCA".impute_15 * 0.312708735168 + "CenteredDataForPCA".impute_16 * 0.130344435037 + "CenteredDataForPCA".impute_17 * 0.359243774272 + "CenteredDataForPCA".impute_18 * 0.0457692703995 + "CenteredDataForPCA".impute_19 * 0.0357856642134 + "CenteredDataForPCA".impute_20 * 0.0522901982768 + "CenteredDataForPCA".impute_21 * -0.128696960161 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.369465231213 + "CenteredDataForPCA".impute_3 * 0.289701304984 + "CenteredDataForPCA".impute_4 * -0.128870104998 + "CenteredDataForPCA".impute_5 * -0.0253997083129 + "CenteredDataForPCA".impute_6 * -0.338507122196 + "CenteredDataForPCA".impute_7 * 0.0276051060987 + "CenteredDataForPCA".impute_8 * -0.164035801553 + "CenteredDataForPCA".impute_9 * -0.0933394676354 + "CenteredDataForPCA".impute_10 * 0.126567863978 + "CenteredDataForPCA".impute_11 * -0.00446452830813 + "CenteredDataForPCA".impute_12 * -0.209046332905 + "CenteredDataForPCA".impute_13 * 0.0642569657538 + "CenteredDataForPCA".impute_14 * -0.239580961247 + "CenteredDataForPCA".impute_15 * 0.338094265485 + "CenteredDataForPCA".impute_16 * -0.238873851519 + "CenteredDataForPCA".impute_17 * 0.349929581188 + "CenteredDataForPCA".impute_18 * -0.288907947657 + "CenteredDataForPCA".impute_19 * -0.0474729092467 + "CenteredDataForPCA".impute_20 * 0.0170667019592 + "CenteredDataForPCA".impute_21 * 0.332034939011 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.00226963874743 + "CenteredDataForPCA".impute_3 * -0.414813071456 + "CenteredDataForPCA".impute_4 * 0.0104227289485 + "CenteredDataForPCA".impute_5 * 0.0357615741537 + "CenteredDataForPCA".impute_6 * 0.150132782972 + "CenteredDataForPCA".impute_7 * -0.0129972455136 + "CenteredDataForPCA".impute_8 * -0.324356594182 + "CenteredDataForPCA".impute_9 * -0.545007682618 + "CenteredDataForPCA".impute_10 * 0.0369851752609 + "CenteredDataForPCA".impute_11 * 0.01895479201 + "CenteredDataForPCA".impute_12 * 0.0558542220364 + "CenteredDataForPCA".impute_13 * -0.0737215349444 + "CenteredDataForPCA".impute_14 * 0.0623646762691 + "CenteredDataForPCA".impute_15 * -0.0532409257575 + "CenteredDataForPCA".impute_16 * 0.05867405345 + "CenteredDataForPCA".impute_17 * 0.0953082405557 + "CenteredDataForPCA".impute_18 * -0.495642782204 + "CenteredDataForPCA".impute_19 * -0.299549271411 + "CenteredDataForPCA".impute_20 * -0.0300046238302 + "CenteredDataForPCA".impute_21 * -0.189114447765 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.0561531555224 + "CenteredDataForPCA".impute_3 * 0.348041820967 + "CenteredDataForPCA".impute_4 * -0.380995118642 + "CenteredDataForPCA".impute_5 * 0.0800514401499 + "CenteredDataForPCA".impute_6 * 0.331743236507 + "CenteredDataForPCA".impute_7 * -0.100530476533 + "CenteredDataForPCA".impute_8 * 0.416052706501 + "CenteredDataForPCA".impute_9 * -0.0686231648387 + "CenteredDataForPCA".impute_10 * 0.0384748495584 + "CenteredDataForPCA".impute_11 * 0.012122588756 + "CenteredDataForPCA".impute_12 * 0.0463216325588 + "CenteredDataForPCA".impute_13 * -0.112944591311 + "CenteredDataForPCA".impute_14 * -0.186756964401 + "CenteredDataForPCA".impute_15 * -0.493813888621 + "CenteredDataForPCA".impute_16 * -0.129148047819 + "CenteredDataForPCA".impute_17 * 0.225192168725 + "CenteredDataForPCA".impute_18 * -0.216265843151 + "CenteredDataForPCA".impute_19 * -0.0816027406595 + "CenteredDataForPCA".impute_20 * -0.00196474814131 + "CenteredDataForPCA".impute_21 * -0.100473757853 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.213400642877 + "CenteredDataForPCA".impute_3 * 0.038029675748 + "CenteredDataForPCA".impute_4 * -0.102111881668 + "CenteredDataForPCA".impute_5 * 0.0131654140516 + "CenteredDataForPCA".impute_6 * -0.308060632341 + "CenteredDataForPCA".impute_7 * 0.0102348928647 + "CenteredDataForPCA".impute_8 * 0.474339785557 + "CenteredDataForPCA".impute_9 * -0.153304287608 + "CenteredDataForPCA".impute_10 * -0.041894271269 + "CenteredDataForPCA".impute_11 * 0.0650593204215 + "CenteredDataForPCA".impute_12 * 0.414655086976 + "CenteredDataForPCA".impute_13 * 0.0148447618821 + "CenteredDataForPCA".impute_14 * -0.0432493776755 + "CenteredDataForPCA".impute_15 * 0.397831433257 + "CenteredDataForPCA".impute_16 * -0.108409550945 + "CenteredDataForPCA".impute_17 * -0.312247855059 + "CenteredDataForPCA".impute_18 * -0.344234931522 + "CenteredDataForPCA".impute_19 * 0.0948413250765 + "CenteredDataForPCA".impute_20 * -0.0209889281304 + "CenteredDataForPCA".impute_21 * -0.153086043871 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.0514041941068 + "CenteredDataForPCA".impute_3 * 0.201617935061 + "CenteredDataForPCA".impute_4 * 0.26643902776 + "CenteredDataForPCA".impute_5 * -0.0554193930334 + "CenteredDataForPCA".impute_6 * -0.163517438612 + "CenteredDataForPCA".impute_7 * -0.577522658114 + "CenteredDataForPCA".impute_8 * 0.163064606098 + "CenteredDataForPCA".impute_9 * -0.232185816091 + "CenteredDataForPCA".impute_10 * 0.0698591836233 + "CenteredDataForPCA".impute_11 * -0.00547253023538 + "CenteredDataForPCA".impute_12 * -0.45867804383 + "CenteredDataForPCA".impute_13 * 0.0708192259512 + "CenteredDataForPCA".impute_14 * 0.044599933528 + "CenteredDataForPCA".impute_15 * -0.09440678615 + "CenteredDataForPCA".impute_16 * 0.00183385028786 + "CenteredDataForPCA".impute_17 * -0.362138019158 + "CenteredDataForPCA".impute_18 * -0.000676642393831 + "CenteredDataForPCA".impute_19 * -0.281063449761 + "CenteredDataForPCA".impute_20 * -0.0125210849077 + "CenteredDataForPCA".impute_21 * 0.0190235085736 AS anoova_16, "CenteredDataForPCA".impute_2 * 0.252017911808 + "CenteredDataForPCA".impute_3 * -0.032288033973 + "CenteredDataForPCA".impute_4 * -0.428755283733 + "CenteredDataForPCA".impute_5 * -0.0177917937071 + "CenteredDataForPCA".impute_6 * -0.321709369932 + "CenteredDataForPCA".impute_7 * -0.377647402616 + "CenteredDataForPCA".impute_8 * -0.291052188432 + "CenteredDataForPCA".impute_9 * -0.177563247253 + "CenteredDataForPCA".impute_10 * 0.0341300266512 + "CenteredDataForPCA".impute_11 * 0.0281654538378 + "CenteredDataForPCA".impute_12 * 0.240782065283 + "CenteredDataForPCA".impute_13 * 0.0118449125957 + "CenteredDataForPCA".impute_14 * 0.146350314737 + "CenteredDataForPCA".impute_15 * -0.279043642042 + "CenteredDataForPCA".impute_16 * 0.0851672320073 + "CenteredDataForPCA".impute_17 * -0.168945410721 + "CenteredDataForPCA".impute_18 * 0.111188511864 + "CenteredDataForPCA".impute_19 * 0.424232579088 + "CenteredDataForPCA".impute_20 * -0.035185141514 + "CenteredDataForPCA".impute_21 * 0.0146238240146 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.352470372518 + "CenteredDataForPCA".impute_3 * 0.0656285685266 + "CenteredDataForPCA".impute_4 * -0.42172274303 + "CenteredDataForPCA".impute_5 * -0.01509095026 + "CenteredDataForPCA".impute_6 * 0.341126392477 + "CenteredDataForPCA".impute_7 * -0.173295285714 + "CenteredDataForPCA".impute_8 * -0.179882025191 + "CenteredDataForPCA".impute_9 * -0.21805398623 + "CenteredDataForPCA".impute_10 * 0.147305609236 + "CenteredDataForPCA".impute_11 * 0.0459624756635 + "CenteredDataForPCA".impute_12 * 0.118843230617 + "CenteredDataForPCA".impute_13 * 0.0819094332363 + "CenteredDataForPCA".impute_14 * -0.104813209926 + "CenteredDataForPCA".impute_15 * 0.355694282915 + "CenteredDataForPCA".impute_16 * -0.158768059485 + "CenteredDataForPCA".impute_17 * -0.0588387272604 + "CenteredDataForPCA".impute_18 * 0.396188791105 + "CenteredDataForPCA".impute_19 * -0.238497447335 + "CenteredDataForPCA".impute_20 * 0.0147971068619 + "CenteredDataForPCA".impute_21 * 0.205408698366 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.394280399478 + "CenteredDataForPCA".impute_3 * 0.460001220522 + "CenteredDataForPCA".impute_4 * 0.182352400061 + "CenteredDataForPCA".impute_5 * -0.0341319490714 + "CenteredDataForPCA".impute_6 * -0.213015367639 + "CenteredDataForPCA".impute_7 * -0.121938075832 + "CenteredDataForPCA".impute_8 * -0.27531209996 + "CenteredDataForPCA".impute_9 * -0.0478302362798 + "CenteredDataForPCA".impute_10 * -0.0403032581989 + "CenteredDataForPCA".impute_11 * 0.0239496741186 + "CenteredDataForPCA".impute_12 * 0.154493668826 + "CenteredDataForPCA".impute_13 * 0.101625289373 + "CenteredDataForPCA".impute_14 * 0.096416125672 + "CenteredDataForPCA".impute_15 * -0.00256307541159 + "CenteredDataForPCA".impute_16 * 0.0468044148467 + "CenteredDataForPCA".impute_17 * 0.437304587864 + "CenteredDataForPCA".impute_18 * 0.0526486367389 + "CenteredDataForPCA".impute_19 * 0.0189138509728 + "CenteredDataForPCA".impute_20 * 0.031428056204 + "CenteredDataForPCA".impute_21 * -0.465785002259 AS anoova_19, "CenteredDataForPCA".impute_2 * 1.68945916109e-17 + "CenteredDataForPCA".impute_3 * 7.50996102873e-17 + "CenteredDataForPCA".impute_4 * -2.00716256766e-16 + "CenteredDataForPCA".impute_5 * -0.0980695031657 + "CenteredDataForPCA".impute_6 * 3.45141059254e-16 + "CenteredDataForPCA".impute_7 * -1.29895259883e-16 + "CenteredDataForPCA".impute_8 * 6.22565294217e-17 + "CenteredDataForPCA".impute_9 * -3.05310140699e-17 + "CenteredDataForPCA".impute_10 * -8.77644353262e-17 + "CenteredDataForPCA".impute_11 * -0.332798422873 + "CenteredDataForPCA".impute_12 * 1.34764852088e-16 + "CenteredDataForPCA".impute_13 * -0.32713145965 + "CenteredDataForPCA".impute_14 * 0.50878392787 + "CenteredDataForPCA".impute_15 * 8.18673043329e-17 + "CenteredDataForPCA".impute_16 * -0.548690490928 + "CenteredDataForPCA".impute_17 * 5.53821431673e-17 + "CenteredDataForPCA".impute_18 * 1.02133035906e-16 + "CenteredDataForPCA".impute_19 * 1.40835688797e-16 + "CenteredDataForPCA".impute_20 * 0.461183532117 + "CenteredDataForPCA".impute_21 * 2.1096758692e-17 AS anoova_20, "CenteredDataForPCA".impute_2 * -2.04009436006e-16 + "CenteredDataForPCA".impute_3 * 2.55898648894e-16 + "CenteredDataForPCA".impute_4 * -4.91902979087e-16 + "CenteredDataForPCA".impute_5 * -0.70446586305 + "CenteredDataForPCA".impute_6 * 5.02857939587e-17 + "CenteredDataForPCA".impute_7 * -3.54516077004e-17 + "CenteredDataForPCA".impute_8 * 1.85198961498e-17 + "CenteredDataForPCA".impute_9 * 1.02711085468e-17 + "CenteredDataForPCA".impute_10 * 9.92411686603e-17 + "CenteredDataForPCA".impute_11 * 0.476342649079 + "CenteredDataForPCA".impute_12 * 1.12931187021e-16 + "CenteredDataForPCA".impute_13 * -0.359702735659 + "CenteredDataForPCA".impute_14 * -0.165567324566 + "CenteredDataForPCA".impute_15 * 5.96777716192e-17 + "CenteredDataForPCA".impute_16 * 0.157353542188 + "CenteredDataForPCA".impute_17 * 6.18174523178e-17 + "CenteredDataForPCA".impute_18 * 9.17923483237e-17 + "CenteredDataForPCA".impute_19 * -1.87153143816e-16 + "CenteredDataForPCA".impute_20 * 0.308653194091 + "CenteredDataForPCA".impute_21 * -1.25691035743e-16 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.2671085000038147) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 1.1655125617980957) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.5111845135688782) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.2671085000038147 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 1.1655125617980957 AS threshold, 57 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16228070175438597 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 42 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3333333333333333 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_6' AS feature, -0.5111845135688782 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21511627906976744 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18518518518518517 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0_0, "DT_Output"."Estimator" AS "Estimator_0_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.5121252536773682) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.23384219408035278) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.8455737829208374) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.38746172189712524) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.5121252536773682 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00016805253493598987 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_16' AS feature, -0.23384219408035278 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2208904458155498 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00270754995909358 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.585081189805886 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_12' AS feature, -0.8455737829208374 AS threshold, 64 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12398829368540923 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.336915573933404 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_9' AS feature, 0.38746172189712524 AS threshold, 49 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1876723537104773 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9985528379203137 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24760400286129175 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_0_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_0_1, "DT_Output_1"."Estimator" AS "Estimator_0_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -2.5204076766967773) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.7208892107009888) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.864335298538208) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -2.5204076766967773 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00033878845332745074 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.1585078055428237 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -1.7208892107009888 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.09588910001188253 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6002029435674655 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_4' AS feature, -0.864335298538208 AS threshold, 60 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19834791782046687 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20681218153147754 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 45 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9965669573335446 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_0_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_0_2, "DT_Output_2"."Estimator" AS "Estimator_0_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.8458999395370483) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.2931445837020874) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.2088402509689331) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.29402947425842285) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -0.8458999395370483 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0006279502258688375 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.151588741675142 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, 0.2931445837020874 AS threshold, 74 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.10036622480992859 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_18' AS feature, 0.2088402509689331 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1976481953385492 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9969687900145189 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.45215495456821353 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_9' AS feature, -0.29402947425842285 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.020499253725630318 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.83740058453277 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5559272642718063 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_0_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_0_3, "DT_Output_3"."Estimator" AS "Estimator_0_3" 
FROM "DT_Output_3"), 
"RF_Join_CTE_0" AS 
(SELECT "RF_Tree_0_0".join_key_0_0 AS join_key_0_0, "RF_Tree_0_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Tree_0_1".join_key_0_1 AS join_key_0_1, "RF_Tree_0_1"."Estimator_0_1" AS "Estimator_0_1", "RF_Tree_0_2".join_key_0_2 AS join_key_0_2, "RF_Tree_0_2"."Estimator_0_2" AS "Estimator_0_2", "RF_Tree_0_3".join_key_0_3 AS join_key_0_3, "RF_Tree_0_3"."Estimator_0_3" AS "Estimator_0_3" 
FROM "RF_Tree_0_0" LEFT OUTER JOIN "RF_Tree_0_1" ON "RF_Tree_0_0".join_key_0_0 = "RF_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "RF_Tree_0_2" ON "RF_Tree_0_2".join_key_0_2 = "RF_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "RF_Tree_0_3" ON "RF_Tree_0_3".join_key_0_3 = "RF_Tree_0_2".join_key_0_2), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.2671085000038147) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 1.1655125617980957) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.48166435956954956) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.5512177348136902) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.2671085000038147 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00021009081504370198 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 1.1655125617980957 AS threshold, 57 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1475563692432417 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 0.48166435956954956 AS threshold, 42 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22705546100750715 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9657398707454548 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9765664454837876 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2938969267815992 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_2' AS feature, -0.5512177348136902 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19510939454326534 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.27250536045568263 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3181168475063232 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_1_0" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_1_0, "DT_Output_4"."Estimator" AS "Estimator_1_0" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.45937058329582214) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.7958434820175171) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.17421510815620422) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.2670634686946869) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, 0.45937058329582214 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0001786598511332771 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_7' AS feature, -0.7958434820175171 AS threshold, 60 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.12414123100196205 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7787512519391544 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_4' AS feature, 0.17421510815620422 AS threshold, 42 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2604876460966202 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.698581447216831 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.20363885054778175 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_16' AS feature, 0.2670634686946869 AS threshold, 40 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1857651968751099 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9824039403120021 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.42755155631780284 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_1_1" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_1_1, "DT_Output_5"."Estimator" AS "Estimator_1_1" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -2.5204076766967773) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -2.2251439094543457) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.2769131660461426) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -2.5204076766967773 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00035704596252851827 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7874074072086252 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -2.2251439094543457 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.08779479634415585 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.643536996819509 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_16' AS feature, -0.2769131660461426 AS threshold, 64 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17108728947449509 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3523153113594989 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9750323048778099 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_1_2" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_1_2, "DT_Output_6"."Estimator" AS "Estimator_1_2" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.8458999395370483) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.23714131116867065) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.31869715452194214) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.08487173169851303) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -0.8458999395370483 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0007625682935768375 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9805669599895888 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_10' AS feature, -0.23714131116867065 AS threshold, 74 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.09083811759812231 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_4' AS feature, -0.31869715452194214 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20207700702426606 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9830744190562343 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6875379735216716 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_6' AS feature, -0.08487173169851303 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.001304377328299247 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5809998674541365 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5615113024568298 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_1_3" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_1_3, "DT_Output_7"."Estimator" AS "Estimator_1_3" 
FROM "DT_Output_7"), 
"RF_Join_CTE_1" AS 
(SELECT "RF_Tree_1_0".join_key_1_0 AS join_key_1_0, "RF_Tree_1_0"."Estimator_1_0" AS "Estimator_1_0", "RF_Tree_1_1".join_key_1_1 AS join_key_1_1, "RF_Tree_1_1"."Estimator_1_1" AS "Estimator_1_1", "RF_Tree_1_2".join_key_1_2 AS join_key_1_2, "RF_Tree_1_2"."Estimator_1_2" AS "Estimator_1_2", "RF_Tree_1_3".join_key_1_3 AS join_key_1_3, "RF_Tree_1_3"."Estimator_1_3" AS "Estimator_1_3" 
FROM "RF_Tree_1_0" LEFT OUTER JOIN "RF_Tree_1_1" ON "RF_Tree_1_0".join_key_1_0 = "RF_Tree_1_1".join_key_1_1 LEFT OUTER JOIN "RF_Tree_1_2" ON "RF_Tree_1_2".join_key_1_2 = "RF_Tree_1_1".join_key_1_1 LEFT OUTER JOIN "RF_Tree_1_3" ON "RF_Tree_1_3".join_key_1_3 = "RF_Tree_1_2".join_key_1_2), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.2671085000038147) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 1.1655125617980957) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.8266190886497498) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.5111845135688782) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.2671085000038147 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00025810300617990834 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 1.1655125617980957 AS threshold, 57 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1339973267913009 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 0.8266190886497498 AS threshold, 42 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2066117929196492 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9403613658318908 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.954132277505671 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26787071948954805 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_6' AS feature, -0.5111845135688782 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1770241238717712 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4550970790440687 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.11656554504183467 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_2_0" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_2_0, "DT_Output_8"."Estimator" AS "Estimator_2_0" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.5121252536773682) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.1472916305065155) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.9691452980041504) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.6588714122772217) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.5121252536773682 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00012560208234425885 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 0.1472916305065155 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18696326615411757 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09908954755344548 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4020583631938448 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_9' AS feature, 0.9691452980041504 AS threshold, 64 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1053630904653541 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_10' AS feature, -0.6588714122772217 AS threshold, 49 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1636849483642919 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14440215782389706 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.965071004328513 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.34391765316384487 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_2_1" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_2_1, "DT_Output_9"."Estimator" AS "Estimator_2_1" 
FROM "DT_Output_9"), 
"DT_node_lookup_10" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -2.5204076766967773) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.8717358112335205) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.6735877990722656) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_10" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -2.5204076766967773 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00027224877383681066 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5291198639643935 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_4' AS feature, -0.8717358112335205 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.08041224312169767 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5331084654677368 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, -1.6735877990722656 AS threshold, 59 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17454562640892496 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.25965912649812256 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9524139665911624 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", "DT_node_lookup_10".node_id_2 AS node_id_2, "DT_node_data_10".node_id AS node_id, "DT_node_data_10".feature AS feature, "DT_node_data_10".threshold AS threshold, "DT_node_data_10".count AS count, "DT_node_data_10".depth AS depth, "DT_node_data_10".parent_id AS parent_id, "DT_node_data_10"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_10" LEFT OUTER JOIN "DT_node_data_10" ON "DT_node_lookup_10".node_id_2 = "DT_node_data_10".node_id), 
"RF_Tree_2_2" AS 
(SELECT "DT_Output_10"."KEY" AS join_key_2_2, "DT_Output_10"."Estimator" AS "Estimator_2_2" 
FROM "DT_Output_10"), 
"DT_node_lookup_11" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.8458999395370483) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.2931445837020874) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.2088402509689331) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.007422029972076416) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_11" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -0.8458999395370483 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.000958186598273782 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8607153284985605 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, 0.2931445837020874 AS threshold, 74 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0829303145419464 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_18' AS feature, 0.2088402509689331 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16553501741459042 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9537396648420347 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.37311616908587275 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_16' AS feature, 0.007422029972076416 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.019699770845278103 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.535864138762699 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7227514394088543 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", "DT_node_lookup_11".node_id_2 AS node_id_2, "DT_node_data_11".node_id AS node_id, "DT_node_data_11".feature AS feature, "DT_node_data_11".threshold AS threshold, "DT_node_data_11".count AS count, "DT_node_data_11".depth AS depth, "DT_node_data_11".parent_id AS parent_id, "DT_node_data_11"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_11" LEFT OUTER JOIN "DT_node_data_11" ON "DT_node_lookup_11".node_id_2 = "DT_node_data_11".node_id), 
"RF_Tree_2_3" AS 
(SELECT "DT_Output_11"."KEY" AS join_key_2_3, "DT_Output_11"."Estimator" AS "Estimator_2_3" 
FROM "DT_Output_11"), 
"RF_Join_CTE_2" AS 
(SELECT "RF_Tree_2_0".join_key_2_0 AS join_key_2_0, "RF_Tree_2_0"."Estimator_2_0" AS "Estimator_2_0", "RF_Tree_2_1".join_key_2_1 AS join_key_2_1, "RF_Tree_2_1"."Estimator_2_1" AS "Estimator_2_1", "RF_Tree_2_2".join_key_2_2 AS join_key_2_2, "RF_Tree_2_2"."Estimator_2_2" AS "Estimator_2_2", "RF_Tree_2_3".join_key_2_3 AS join_key_2_3, "RF_Tree_2_3"."Estimator_2_3" AS "Estimator_2_3" 
FROM "RF_Tree_2_0" LEFT OUTER JOIN "RF_Tree_2_1" ON "RF_Tree_2_0".join_key_2_0 = "RF_Tree_2_1".join_key_2_1 LEFT OUTER JOIN "RF_Tree_2_2" ON "RF_Tree_2_2".join_key_2_2 = "RF_Tree_2_1".join_key_2_1 LEFT OUTER JOIN "RF_Tree_2_3" ON "RF_Tree_2_3".join_key_2_3 = "RF_Tree_2_2".join_key_2_2), 
"DT_node_lookup_12" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.2671085000038147) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 1.1655125617980957) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.8266190886497498) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.5512177348136902) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_12" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.2671085000038147 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00043367727299007953 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 1.1655125617980957 AS threshold, 57 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12218168608052453 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 0.8266190886497498 AS threshold, 42 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18806698378147962 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9170984712764986 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9364794107669434 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23701862143412444 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_2' AS feature, -0.5512177348136902 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16095321812304395 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.27395794157912606 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0162977458178588 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_12" AS 
(SELECT "DT_node_lookup_12"."KEY" AS "KEY", "DT_node_lookup_12".node_id_2 AS node_id_2, "DT_node_data_12".node_id AS node_id, "DT_node_data_12".feature AS feature, "DT_node_data_12".threshold AS threshold, "DT_node_data_12".count AS count, "DT_node_data_12".depth AS depth, "DT_node_data_12".parent_id AS parent_id, "DT_node_data_12"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_12" LEFT OUTER JOIN "DT_node_data_12" ON "DT_node_lookup_12".node_id_2 = "DT_node_data_12".node_id), 
"RF_Tree_3_0" AS 
(SELECT "DT_Output_12"."KEY" AS join_key_3_0, "DT_Output_12"."Estimator" AS "Estimator_3_0" 
FROM "DT_Output_12"), 
"DT_node_lookup_13" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.611477255821228) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.7958434820175171) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.5001481771469116) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.0594174787402153) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_13" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, 0.611477255821228 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0002504453708695939 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_7' AS feature, -0.7958434820175171 AS threshold, 65 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09507193074525953 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7382358449522928 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_4' AS feature, 0.5001481771469116 AS threshold, 47 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19725593860579993 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2723837720797662 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.05021221272262887 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_4' AS feature, 0.0594174787402153 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1772777153008236 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9565693447884004 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6190758247276655 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_13" AS 
(SELECT "DT_node_lookup_13"."KEY" AS "KEY", "DT_node_lookup_13".node_id_2 AS node_id_2, "DT_node_data_13".node_id AS node_id, "DT_node_data_13".feature AS feature, "DT_node_data_13".threshold AS threshold, "DT_node_data_13".count AS count, "DT_node_data_13".depth AS depth, "DT_node_data_13".parent_id AS parent_id, "DT_node_data_13"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_13" LEFT OUTER JOIN "DT_node_data_13" ON "DT_node_lookup_13".node_id_2 = "DT_node_data_13".node_id), 
"RF_Tree_3_1" AS 
(SELECT "DT_Output_13"."KEY" AS join_key_3_1, "DT_Output_13"."Estimator" AS "Estimator_3_1" 
FROM "DT_Output_13"), 
"DT_node_lookup_14" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -2.5204076766967773) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.8717358112335205) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.6735877990722656) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_14" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -2.5204076766967773 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0004170927790726603 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3341455605943822 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_4' AS feature, -0.8717358112335205 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.07316950904628759 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.48219682928937935 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, -1.6735877990722656 AS threshold, 59 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1597746953870283 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23950365174686616 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9323740254552523 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_14" AS 
(SELECT "DT_node_lookup_14"."KEY" AS "KEY", "DT_node_lookup_14".node_id_2 AS node_id_2, "DT_node_data_14".node_id AS node_id, "DT_node_data_14".feature AS feature, "DT_node_data_14".threshold AS threshold, "DT_node_data_14".count AS count, "DT_node_data_14".depth AS depth, "DT_node_data_14".parent_id AS parent_id, "DT_node_data_14"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_14" LEFT OUTER JOIN "DT_node_data_14" ON "DT_node_lookup_14".node_id_2 = "DT_node_data_14".node_id), 
"RF_Tree_3_2" AS 
(SELECT "DT_Output_14"."KEY" AS join_key_3_2, "DT_Output_14"."Estimator" AS "Estimator_3_2" 
FROM "DT_Output_14"), 
"DT_node_lookup_15" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.8458999395370483) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.23714131116867065) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.31869715452194214) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.08487173169851303) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_15" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -0.8458999395370483 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0011158314472856602 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7497885593909646 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_10' AS feature, -0.23714131116867065 AS threshold, 74 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0747242031543678 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_4' AS feature, -0.31869715452194214 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1748123916340817 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.947987419273567 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6371113930890221 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_6' AS feature, -0.08487173169851303 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0058345826951580705 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5259934950558781 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5187238947186913 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_15" AS 
(SELECT "DT_node_lookup_15"."KEY" AS "KEY", "DT_node_lookup_15".node_id_2 AS node_id_2, "DT_node_data_15".node_id AS node_id, "DT_node_data_15".feature AS feature, "DT_node_data_15".threshold AS threshold, "DT_node_data_15".count AS count, "DT_node_data_15".depth AS depth, "DT_node_data_15".parent_id AS parent_id, "DT_node_data_15"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_15" LEFT OUTER JOIN "DT_node_data_15" ON "DT_node_lookup_15".node_id_2 = "DT_node_data_15".node_id), 
"RF_Tree_3_3" AS 
(SELECT "DT_Output_15"."KEY" AS join_key_3_3, "DT_Output_15"."Estimator" AS "Estimator_3_3" 
FROM "DT_Output_15"), 
"RF_Join_CTE_3" AS 
(SELECT "RF_Tree_3_0".join_key_3_0 AS join_key_3_0, "RF_Tree_3_0"."Estimator_3_0" AS "Estimator_3_0", "RF_Tree_3_1".join_key_3_1 AS join_key_3_1, "RF_Tree_3_1"."Estimator_3_1" AS "Estimator_3_1", "RF_Tree_3_2".join_key_3_2 AS join_key_3_2, "RF_Tree_3_2"."Estimator_3_2" AS "Estimator_3_2", "RF_Tree_3_3".join_key_3_3 AS join_key_3_3, "RF_Tree_3_3"."Estimator_3_3" AS "Estimator_3_3" 
FROM "RF_Tree_3_0" LEFT OUTER JOIN "RF_Tree_3_1" ON "RF_Tree_3_0".join_key_3_0 = "RF_Tree_3_1".join_key_3_1 LEFT OUTER JOIN "RF_Tree_3_2" ON "RF_Tree_3_2".join_key_3_2 = "RF_Tree_3_1".join_key_3_1 LEFT OUTER JOIN "RF_Tree_3_3" ON "RF_Tree_3_3".join_key_3_3 = "RF_Tree_3_2".join_key_3_2), 
"DT_node_lookup_16" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.7178980112075806) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= 0.22374826669692993) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.545994758605957) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.03615310788154602) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_16" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.7178980112075806 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0007075703236622688 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_13' AS feature, 0.22374826669692993 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16335749105335134 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9420310934518846 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5934560433696119 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, -1.545994758605957 AS threshold, 62 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09898109076872781 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.52242679171697 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_12' AS feature, -0.03615310788154602 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19561812780662663 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2220262364789256 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.039145776970711234 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_16" AS 
(SELECT "DT_node_lookup_16"."KEY" AS "KEY", "DT_node_lookup_16".node_id_2 AS node_id_2, "DT_node_data_16".node_id AS node_id, "DT_node_data_16".feature AS feature, "DT_node_data_16".threshold AS threshold, "DT_node_data_16".count AS count, "DT_node_data_16".depth AS depth, "DT_node_data_16".parent_id AS parent_id, "DT_node_data_16"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_16" LEFT OUTER JOIN "DT_node_data_16" ON "DT_node_lookup_16".node_id_2 = "DT_node_data_16".node_id), 
"RF_Tree_4_0" AS 
(SELECT "DT_Output_16"."KEY" AS join_key_4_0, "DT_Output_16"."Estimator" AS "Estimator_4_0" 
FROM "DT_Output_16"), 
"DT_node_lookup_17" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.5121252536773682) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.23384219408035278) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.8455737829208374) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.4219672381877899) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_17" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.5121252536773682 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00017981920327701656 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_16' AS feature, -0.23384219408035278 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15916151177352417 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.07095023461239405 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0173065274144901 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_12' AS feature, -0.8455737829208374 AS threshold, 64 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0898093178777277 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35203234592874816 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_14' AS feature, -0.4219672381877899 AS threshold, 49 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14339536206420703 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.13519229458541077 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9414349387424816 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_17" AS 
(SELECT "DT_node_lookup_17"."KEY" AS "KEY", "DT_node_lookup_17".node_id_2 AS node_id_2, "DT_node_data_17".node_id AS node_id, "DT_node_data_17".feature AS feature, "DT_node_data_17".threshold AS threshold, "DT_node_data_17".count AS count, "DT_node_data_17".depth AS depth, "DT_node_data_17".parent_id AS parent_id, "DT_node_data_17"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_17" LEFT OUTER JOIN "DT_node_data_17" ON "DT_node_lookup_17".node_id_2 = "DT_node_data_17".node_id), 
"RF_Tree_4_1" AS 
(SELECT "DT_Output_17"."KEY" AS join_key_4_1, "DT_Output_17"."Estimator" AS "Estimator_4_1" 
FROM "DT_Output_17"), 
"DT_node_lookup_18" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -2.5204076766967773) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.7208892107009888) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= 0.35485929250717163) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_18" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -2.5204076766967773 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00017236052828271037 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.172089674647334 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -1.7208892107009888 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.06684546087625497 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.45093739125308263 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_17' AS feature, 0.35485929250717163 AS threshold, 60 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.144863543523932 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9387395938211176 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19762439768225748 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_18" AS 
(SELECT "DT_node_lookup_18"."KEY" AS "KEY", "DT_node_lookup_18".node_id_2 AS node_id_2, "DT_node_data_18".node_id AS node_id, "DT_node_data_18".feature AS feature, "DT_node_data_18".threshold AS threshold, "DT_node_data_18".count AS count, "DT_node_data_18".depth AS depth, "DT_node_data_18".parent_id AS parent_id, "DT_node_data_18"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_18" LEFT OUTER JOIN "DT_node_data_18" ON "DT_node_lookup_18".node_id_2 = "DT_node_data_18".node_id), 
"RF_Tree_4_2" AS 
(SELECT "DT_Output_18"."KEY" AS join_key_4_2, "DT_Output_18"."Estimator" AS "Estimator_4_2" 
FROM "DT_Output_18"), 
"DT_node_lookup_19" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.8458999395370483) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.23714131116867065) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= 0.22103074193000793) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.8402283191680908) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_19" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -0.8458999395370483 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0017940727642222645 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6923126784083707 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_10' AS feature, -0.23714131116867065 AS threshold, 74 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.06926917695231664 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_17' AS feature, 0.22103074193000793 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1598184301533113 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9316656677568723 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5986358164682472 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_2' AS feature, 0.8402283191680908 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0036119292826302454 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.43567532178142776 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5670986576577071 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_19" AS 
(SELECT "DT_node_lookup_19"."KEY" AS "KEY", "DT_node_lookup_19".node_id_2 AS node_id_2, "DT_node_data_19".node_id AS node_id, "DT_node_data_19".feature AS feature, "DT_node_data_19".threshold AS threshold, "DT_node_data_19".count AS count, "DT_node_data_19".depth AS depth, "DT_node_data_19".parent_id AS parent_id, "DT_node_data_19"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_19" LEFT OUTER JOIN "DT_node_data_19" ON "DT_node_lookup_19".node_id_2 = "DT_node_data_19".node_id), 
"RF_Tree_4_3" AS 
(SELECT "DT_Output_19"."KEY" AS join_key_4_3, "DT_Output_19"."Estimator" AS "Estimator_4_3" 
FROM "DT_Output_19"), 
"RF_Join_CTE_4" AS 
(SELECT "RF_Tree_4_0".join_key_4_0 AS join_key_4_0, "RF_Tree_4_0"."Estimator_4_0" AS "Estimator_4_0", "RF_Tree_4_1".join_key_4_1 AS join_key_4_1, "RF_Tree_4_1"."Estimator_4_1" AS "Estimator_4_1", "RF_Tree_4_2".join_key_4_2 AS join_key_4_2, "RF_Tree_4_2"."Estimator_4_2" AS "Estimator_4_2", "RF_Tree_4_3".join_key_4_3 AS join_key_4_3, "RF_Tree_4_3"."Estimator_4_3" AS "Estimator_4_3" 
FROM "RF_Tree_4_0" LEFT OUTER JOIN "RF_Tree_4_1" ON "RF_Tree_4_0".join_key_4_0 = "RF_Tree_4_1".join_key_4_1 LEFT OUTER JOIN "RF_Tree_4_2" ON "RF_Tree_4_2".join_key_4_2 = "RF_Tree_4_1".join_key_4_1 LEFT OUTER JOIN "RF_Tree_4_3" ON "RF_Tree_4_3".join_key_4_3 = "RF_Tree_4_2".join_key_4_2), 
"DT_node_lookup_20" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.7178980112075806) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.555626630783081) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.3477075397968292) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= 0.09333963692188263) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_20" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.7178980112075806 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0008573508452088452 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_9' AS feature, -0.555626630783081 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15027360682930563 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5663009674413684 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9246359994295695 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_10' AS feature, -0.3477075397968292 AS threshold, 62 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09072035443536662 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9973666004558774 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_14' AS feature, 0.09333963692188263 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0067583555005012305 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.42881750682918374 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8236881452375174 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_20" AS 
(SELECT "DT_node_lookup_20"."KEY" AS "KEY", "DT_node_lookup_20".node_id_2 AS node_id_2, "DT_node_data_20".node_id AS node_id, "DT_node_data_20".feature AS feature, "DT_node_data_20".threshold AS threshold, "DT_node_data_20".count AS count, "DT_node_data_20".depth AS depth, "DT_node_data_20".parent_id AS parent_id, "DT_node_data_20"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_20" LEFT OUTER JOIN "DT_node_data_20" ON "DT_node_lookup_20".node_id_2 = "DT_node_data_20".node_id), 
"RF_Tree_5_0" AS 
(SELECT "DT_Output_20"."KEY" AS join_key_5_0, "DT_Output_20"."Estimator" AS "Estimator_5_0" 
FROM "DT_Output_20"), 
"DT_node_lookup_21" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.45937058329582214) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.7958434820175171) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.17421510815620422) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.2670634686946869) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_21" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, 0.45937058329582214 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -7.877329330487876e-05 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_7' AS feature, -0.7958434820175171 AS threshold, 60 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09196612033111713 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6964914548709403 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_4' AS feature, 0.17421510815620422 AS threshold, 42 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19566618130422525 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.093528762744005 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1531740743853042 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_16' AS feature, 0.2670634686946869 AS threshold, 40 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1381461137299379 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9301226804963959 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.27723514856189085 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_21" AS 
(SELECT "DT_node_lookup_21"."KEY" AS "KEY", "DT_node_lookup_21".node_id_2 AS node_id_2, "DT_node_data_21".node_id AS node_id, "DT_node_data_21".feature AS feature, "DT_node_data_21".threshold AS threshold, "DT_node_data_21".count AS count, "DT_node_data_21".depth AS depth, "DT_node_data_21".parent_id AS parent_id, "DT_node_data_21"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_21" LEFT OUTER JOIN "DT_node_data_21" ON "DT_node_lookup_21".node_id_2 = "DT_node_data_21".node_id), 
"RF_Tree_5_1" AS 
(SELECT "DT_Output_21"."KEY" AS join_key_5_1, "DT_Output_21"."Estimator" AS "Estimator_5_1" 
FROM "DT_Output_21"), 
"DT_node_lookup_22" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -2.5204076766967773) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.43994140625) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.7208892107009888) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_22" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -2.5204076766967773 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -7.564123286250917e-05 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0537847993064977 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_4' AS feature, -1.43994140625 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.06076175934408031 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7384698754276905 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, -1.7208892107009888 AS threshold, 70 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.11514590818011036 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.20410146040219698 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 52 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9156583494198146 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_22" AS 
(SELECT "DT_node_lookup_22"."KEY" AS "KEY", "DT_node_lookup_22".node_id_2 AS node_id_2, "DT_node_data_22".node_id AS node_id, "DT_node_data_22".feature AS feature, "DT_node_data_22".threshold AS threshold, "DT_node_data_22".count AS count, "DT_node_data_22".depth AS depth, "DT_node_data_22".parent_id AS parent_id, "DT_node_data_22"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_22" LEFT OUTER JOIN "DT_node_data_22" ON "DT_node_lookup_22".node_id_2 = "DT_node_data_22".node_id), 
"RF_Tree_5_2" AS 
(SELECT "DT_Output_22"."KEY" AS join_key_5_2, "DT_Output_22"."Estimator" AS "Estimator_5_2" 
FROM "DT_Output_22"), 
"DT_node_lookup_23" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.069439172744751) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.9798754453659058) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.2749978005886078) THEN 3 ELSE 4 END ELSE 5 END ELSE 6 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_23" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 1.069439172744751 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0018224653940746654 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 0.9798754453659058 AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.07006499843363596 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_10' AS feature, 0.2749978005886078 AS threshold, 48 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16602949252312343 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5283125936046843 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.024062889205831 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4380557369576805 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8182690808434463 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_23" AS 
(SELECT "DT_node_lookup_23"."KEY" AS "KEY", "DT_node_lookup_23".node_id_2 AS node_id_2, "DT_node_data_23".node_id AS node_id, "DT_node_data_23".feature AS feature, "DT_node_data_23".threshold AS threshold, "DT_node_data_23".count AS count, "DT_node_data_23".depth AS depth, "DT_node_data_23".parent_id AS parent_id, "DT_node_data_23"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_23" LEFT OUTER JOIN "DT_node_data_23" ON "DT_node_lookup_23".node_id_2 = "DT_node_data_23".node_id), 
"RF_Tree_5_3" AS 
(SELECT "DT_Output_23"."KEY" AS join_key_5_3, "DT_Output_23"."Estimator" AS "Estimator_5_3" 
FROM "DT_Output_23"), 
"RF_Join_CTE_5" AS 
(SELECT "RF_Tree_5_0".join_key_5_0 AS join_key_5_0, "RF_Tree_5_0"."Estimator_5_0" AS "Estimator_5_0", "RF_Tree_5_1".join_key_5_1 AS join_key_5_1, "RF_Tree_5_1"."Estimator_5_1" AS "Estimator_5_1", "RF_Tree_5_2".join_key_5_2 AS join_key_5_2, "RF_Tree_5_2"."Estimator_5_2" AS "Estimator_5_2", "RF_Tree_5_3".join_key_5_3 AS join_key_5_3, "RF_Tree_5_3"."Estimator_5_3" AS "Estimator_5_3" 
FROM "RF_Tree_5_0" LEFT OUTER JOIN "RF_Tree_5_1" ON "RF_Tree_5_0".join_key_5_0 = "RF_Tree_5_1".join_key_5_1 LEFT OUTER JOIN "RF_Tree_5_2" ON "RF_Tree_5_2".join_key_5_2 = "RF_Tree_5_1".join_key_5_1 LEFT OUTER JOIN "RF_Tree_5_3" ON "RF_Tree_5_3".join_key_5_3 = "RF_Tree_5_2".join_key_5_2), 
"RF_Join_CTE" AS 
(SELECT "RF_Join_CTE_0".join_key_0_0 AS join_key_0_0, "RF_Join_CTE_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Join_CTE_0".join_key_0_1 AS join_key_0_1, "RF_Join_CTE_0"."Estimator_0_1" AS "Estimator_0_1", "RF_Join_CTE_0".join_key_0_2 AS join_key_0_2, "RF_Join_CTE_0"."Estimator_0_2" AS "Estimator_0_2", "RF_Join_CTE_0".join_key_0_3 AS join_key_0_3, "RF_Join_CTE_0"."Estimator_0_3" AS "Estimator_0_3", "RF_Join_CTE_1".join_key_1_0 AS join_key_1_0, "RF_Join_CTE_1"."Estimator_1_0" AS "Estimator_1_0", "RF_Join_CTE_1".join_key_1_1 AS join_key_1_1, "RF_Join_CTE_1"."Estimator_1_1" AS "Estimator_1_1", "RF_Join_CTE_1".join_key_1_2 AS join_key_1_2, "RF_Join_CTE_1"."Estimator_1_2" AS "Estimator_1_2", "RF_Join_CTE_1".join_key_1_3 AS join_key_1_3, "RF_Join_CTE_1"."Estimator_1_3" AS "Estimator_1_3", "RF_Join_CTE_2".join_key_2_0 AS join_key_2_0, "RF_Join_CTE_2"."Estimator_2_0" AS "Estimator_2_0", "RF_Join_CTE_2".join_key_2_1 AS join_key_2_1, "RF_Join_CTE_2"."Estimator_2_1" AS "Estimator_2_1", "RF_Join_CTE_2".join_key_2_2 AS join_key_2_2, "RF_Join_CTE_2"."Estimator_2_2" AS "Estimator_2_2", "RF_Join_CTE_2".join_key_2_3 AS join_key_2_3, "RF_Join_CTE_2"."Estimator_2_3" AS "Estimator_2_3", "RF_Join_CTE_3".join_key_3_0 AS join_key_3_0, "RF_Join_CTE_3"."Estimator_3_0" AS "Estimator_3_0", "RF_Join_CTE_3".join_key_3_1 AS join_key_3_1, "RF_Join_CTE_3"."Estimator_3_1" AS "Estimator_3_1", "RF_Join_CTE_3".join_key_3_2 AS join_key_3_2, "RF_Join_CTE_3"."Estimator_3_2" AS "Estimator_3_2", "RF_Join_CTE_3".join_key_3_3 AS join_key_3_3, "RF_Join_CTE_3"."Estimator_3_3" AS "Estimator_3_3", "RF_Join_CTE_4".join_key_4_0 AS join_key_4_0, "RF_Join_CTE_4"."Estimator_4_0" AS "Estimator_4_0", "RF_Join_CTE_4".join_key_4_1 AS join_key_4_1, "RF_Join_CTE_4"."Estimator_4_1" AS "Estimator_4_1", "RF_Join_CTE_4".join_key_4_2 AS join_key_4_2, "RF_Join_CTE_4"."Estimator_4_2" AS "Estimator_4_2", "RF_Join_CTE_4".join_key_4_3 AS join_key_4_3, "RF_Join_CTE_4"."Estimator_4_3" AS "Estimator_4_3", "RF_Join_CTE_5".join_key_5_0 AS join_key_5_0, "RF_Join_CTE_5"."Estimator_5_0" AS "Estimator_5_0", "RF_Join_CTE_5".join_key_5_1 AS join_key_5_1, "RF_Join_CTE_5"."Estimator_5_1" AS "Estimator_5_1", "RF_Join_CTE_5".join_key_5_2 AS join_key_5_2, "RF_Join_CTE_5"."Estimator_5_2" AS "Estimator_5_2", "RF_Join_CTE_5".join_key_5_3 AS join_key_5_3, "RF_Join_CTE_5"."Estimator_5_3" AS "Estimator_5_3" 
FROM "RF_Join_CTE_0" LEFT OUTER JOIN "RF_Join_CTE_1" ON "RF_Join_CTE_0".join_key_0_0 = "RF_Join_CTE_1".join_key_1_0 LEFT OUTER JOIN "RF_Join_CTE_2" ON "RF_Join_CTE_2".join_key_2_0 = "RF_Join_CTE_1".join_key_1_0 LEFT OUTER JOIN "RF_Join_CTE_3" ON "RF_Join_CTE_3".join_key_3_0 = "RF_Join_CTE_2".join_key_2_0 LEFT OUTER JOIN "RF_Join_CTE_4" ON "RF_Join_CTE_4".join_key_4_0 = "RF_Join_CTE_3".join_key_3_0 LEFT OUTER JOIN "RF_Join_CTE_5" ON "RF_Join_CTE_5".join_key_5_0 = "RF_Join_CTE_4".join_key_4_0), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0_0 AS "KEY", 0.25 + 0.1 * "RF_Join_CTE"."Estimator_0_0" + 0.1 * "RF_Join_CTE"."Estimator_1_0" + 0.1 * "RF_Join_CTE"."Estimator_2_0" + 0.1 * "RF_Join_CTE"."Estimator_3_0" + 0.1 * "RF_Join_CTE"."Estimator_4_0" + 0.1 * "RF_Join_CTE"."Estimator_5_0" AS "Score_0", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0", 0.25 + 0.1 * "RF_Join_CTE"."Estimator_0_1" + 0.1 * "RF_Join_CTE"."Estimator_1_1" + 0.1 * "RF_Join_CTE"."Estimator_2_1" + 0.1 * "RF_Join_CTE"."Estimator_3_1" + 0.1 * "RF_Join_CTE"."Estimator_4_1" + 0.1 * "RF_Join_CTE"."Estimator_5_1" AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1", 0.25 + 0.1 * "RF_Join_CTE"."Estimator_0_2" + 0.1 * "RF_Join_CTE"."Estimator_1_2" + 0.1 * "RF_Join_CTE"."Estimator_2_2" + 0.1 * "RF_Join_CTE"."Estimator_3_2" + 0.1 * "RF_Join_CTE"."Estimator_4_2" + 0.1 * "RF_Join_CTE"."Estimator_5_2" AS "Score_2", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2", 0.25 + 0.1 * "RF_Join_CTE"."Estimator_0_3" + 0.1 * "RF_Join_CTE"."Estimator_1_3" + 0.1 * "RF_Join_CTE"."Estimator_2_3" + 0.1 * "RF_Join_CTE"."Estimator_3_3" + 0.1 * "RF_Join_CTE"."Estimator_4_3" + 0.1 * "RF_Join_CTE"."Estimator_5_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_3" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Score_3" AS "Score_3", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."Proba_3" AS "Proba_3", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", "RF_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte