-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 5.84333333333 ELSE "ADS"."Feature_0" END AS impute_output_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 3.054 ELSE "ADS"."Feature_1" END AS impute_output_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 3.75866666667 ELSE "ADS"."Feature_2" END AS impute_output_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 1.19866666667 ELSE "ADS"."Feature_3" END AS impute_output_5 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_output_2 - 5.84333333333 AS impute_output_2, "ADS_imp_1_OUT".impute_output_3 - 3.054 AS impute_output_3, "ADS_imp_1_OUT".impute_output_4 - 3.75866666667 AS impute_output_4, "ADS_imp_1_OUT".impute_output_5 - 1.19866666667 AS impute_output_5 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_output_2 * 0.361589677381 + "CenteredDataForPCA".impute_output_3 * -0.0822688898922 + "CenteredDataForPCA".impute_output_4 * 0.856572105291 + "CenteredDataForPCA".impute_output_5 * 0.358843926248 AS anova_output_2, "CenteredDataForPCA".impute_output_2 * 0.656539883286 + "CenteredDataForPCA".impute_output_3 * 0.729712371326 + "CenteredDataForPCA".impute_output_4 * -0.175767403429 + "CenteredDataForPCA".impute_output_5 * -0.074706470135 AS anova_output_3, "CenteredDataForPCA".impute_output_2 * -0.580997279828 + "CenteredDataForPCA".impute_output_3 * 0.596418087938 + "CenteredDataForPCA".impute_output_4 * 0.072524075487 + "CenteredDataForPCA".impute_output_5 * 0.549060910727 AS anova_output_4, "CenteredDataForPCA".impute_output_2 * 0.317254547169 + "CenteredDataForPCA".impute_output_3 * -0.324094352418 + "CenteredDataForPCA".impute_output_4 * -0.47971898733 + "CenteredDataForPCA".impute_output_5 * 0.751120560381 AS anova_output_5 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN 1 ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.515706244646329e-16 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0000000000000002 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0_0, "DT_Output"."Estimator" AS "Estimator_0_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.016780830919742584) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00035651168661645266 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9667773351250146 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1557466542564274 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_4' AS feature, 0.016780830919742584 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6330193815291539 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9365582786906377 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.739677540667755 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 56 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21925334574357264 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.07137233952647129 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0166527916526265 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_0_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_0_1, "DT_Output_1"."Estimator" AS "Estimator_0_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -0.5448577404022217) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.2532062530517578) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0011674585380873344 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_3' AS feature, -0.5448577404022217 AS threshold, 94 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.30983311166364425 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.777652359942963 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_2' AS feature, -1.2532062530517578 AS threshold, 79 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3204003696959488 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9797657691316 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9828463713652136 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5232041299481376 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8520320939217372 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8721128554017585 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_0_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_0_2, "DT_Output_2"."Estimator" AS "Estimator_0_2" 
FROM "DT_Output_2"), 
"RF_Join_CTE_0" AS 
(SELECT "RF_Tree_0_0".join_key_0_0 AS join_key_0_0, "RF_Tree_0_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Tree_0_1".join_key_0_1 AS join_key_0_1, "RF_Tree_0_1"."Estimator_0_1" AS "Estimator_0_1", "RF_Tree_0_2".join_key_0_2 AS join_key_0_2, "RF_Tree_0_2"."Estimator_0_2" AS "Estimator_0_2" 
FROM "RF_Tree_0_0" LEFT OUTER JOIN "RF_Tree_0_1" ON "RF_Tree_0_0".join_key_0_0 = "RF_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "RF_Tree_0_2" ON "RF_Tree_0_2".join_key_0_2 = "RF_Tree_0_1".join_key_0_1), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -2.7155280113220215) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 0.3144674301147461) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.0028562345542013645) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0008029273552601265 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_2' AS feature, -2.7155280113220215 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5977805440542007 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6584130061649565 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6570681573832178 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anova_output_2' AS feature, 0.3144674301147461 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.30009466305999094 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9502070763251602 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_4' AS feature, 0.0028562345542013645 AS threshold, 82 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.30046843969902964 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9525265437092046 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 45 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9534298305859653 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_1_0" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_1_0, "DT_Output_3"."Estimator" AS "Estimator_1_0" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -0.49325138330459595) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0004287918230152558 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9243227388350318 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14001861366820353 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_3' AS feature, -0.49325138330459595 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5672395708268091 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4453737431556297 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6242151467988577 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 56 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19565499552784374 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.06887328092379955 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9635525082081595 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_1_1" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_1_1, "DT_Output_4"."Estimator" AS "Estimator_1_1" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.19428545236587524) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -0.49173426628112793) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0014823746396897312 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.19428545236587524 AS threshold, 94 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2770632718197244 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_3' AS feature, -0.49173426628112793 AS threshold, 79 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2876375894945328 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9420217362815572 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 63 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9343151037852292 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7197024990342585 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4690411383394205 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7400112304705011 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.574954291470197 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_1_2" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_1_2, "DT_Output_5"."Estimator" AS "Estimator_1_2" 
FROM "DT_Output_5"), 
"RF_Join_CTE_1" AS 
(SELECT "RF_Tree_1_0".join_key_1_0 AS join_key_1_0, "RF_Tree_1_0"."Estimator_1_0" AS "Estimator_1_0", "RF_Tree_1_1".join_key_1_1 AS join_key_1_1, "RF_Tree_1_1"."Estimator_1_1" AS "Estimator_1_1", "RF_Tree_1_2".join_key_1_2 AS join_key_1_2, "RF_Tree_1_2"."Estimator_1_2" AS "Estimator_1_2" 
FROM "RF_Tree_1_0" LEFT OUTER JOIN "RF_Tree_1_1" ON "RF_Tree_1_0".join_key_1_0 = "RF_Tree_1_1".join_key_1_1 LEFT OUTER JOIN "RF_Tree_1_2" ON "RF_Tree_1_2".join_key_1_2 = "RF_Tree_1_1".join_key_1_1), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.10445671528577805) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -2.679025888442993) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.016780830919742584) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0015127360678689062 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.10445671528577805 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5348093907636833 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -2.679025888442993 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5343662802331123 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4322549197729921 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4313579097148617 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4363064722432686 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.26967379948364534 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anova_output_4' AS feature, 0.016780830919742584 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.26840053968027977 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9105468889446329 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9126059627931826 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 56 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.27067421790057483 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9174528628720533 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9123670275845391 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_2_0" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_2_0, "DT_Output_6"."Estimator" AS "Estimator_2_0" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.10445671528577805) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= -0.08109347522258759) THEN 6 ELSE 7 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.15936073660850525) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0005566544717157873 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.10445671528577805 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24922644146189893 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8882540323365254 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8873209974262729 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.12544820243852317 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anova_output_5' AS feature, -0.08109347522258759 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.50638783322431 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2401399632290229 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4144633222459924 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, -0.15936073660850525 AS threshold, 56 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17386150746459486 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15525940724414272 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8702925803318797 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_2_1" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_2_1, "DT_Output_7"."Estimator" AS "Estimator_2_1" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.19428545236587524) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.15936073660850525) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.14214996993541718) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.001857505894662097 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.19428545236587524 AS threshold, 94 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24701954393866216 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 79 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.25689027688540084 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8942836412531128 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9002612380033278 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6730174665487703 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_4' AS feature, -0.15936073660850525 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4196154109720277 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5612330952553692 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, 0.14214996993541718 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5125645077211441 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2767599865039299 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4464329120080646 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_2_2" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_2_2, "DT_Output_8"."Estimator" AS "Estimator_2_2" 
FROM "DT_Output_8"), 
"RF_Join_CTE_2" AS 
(SELECT "RF_Tree_2_0".join_key_2_0 AS join_key_2_0, "RF_Tree_2_0"."Estimator_2_0" AS "Estimator_2_0", "RF_Tree_2_1".join_key_2_1 AS join_key_2_1, "RF_Tree_2_1"."Estimator_2_1" AS "Estimator_2_1", "RF_Tree_2_2".join_key_2_2 AS join_key_2_2, "RF_Tree_2_2"."Estimator_2_2" AS "Estimator_2_2" 
FROM "RF_Tree_2_0" LEFT OUTER JOIN "RF_Tree_2_1" ON "RF_Tree_2_0".join_key_2_0 = "RF_Tree_2_1".join_key_2_1 LEFT OUTER JOIN "RF_Tree_2_2" ON "RF_Tree_2_2".join_key_2_2 = "RF_Tree_2_1".join_key_2_1), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.10445671528577805) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -0.014749303460121155) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= -0.08109347522258759) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.002288149870282453 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.10445671528577805 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.47728108863490737 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_3' AS feature, -0.014749303460121155 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.47636303368787053 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2735150049804351 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2728394275646975 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.280667774051187 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24207276912287706 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anova_output_5' AS feature, -0.08109347522258759 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24004118449731957 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8792436076787676 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8762165394807768 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 56 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24366901418581535 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8867525776666405 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8787668778436335 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_3_0" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_3_0, "DT_Output_9"."Estimator" AS "Estimator_3_0" 
FROM "DT_Output_9"), 
"DT_node_lookup_10" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.10445671528577805) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.3832025527954102) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.04408328980207443) THEN 6 ELSE 7 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.26032906770706177) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_10" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0008190583954818623 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.10445671528577805 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22215758451545004 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8575293618796431 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8560117793995426 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anova_output_2' AS feature, 1.3832025527954102 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1123073798509478 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anova_output_4' AS feature, 0.04408328980207443 AS threshold, 55 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.38563100430480457 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2889029194661858 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5213277652374418 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anova_output_3' AS feature, 0.26032906770706177 AS threshold, 45 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.221754827814877 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9107430815834517 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5556946065282761 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", "DT_node_lookup_10".node_id_2 AS node_id_2, "DT_node_data_10".node_id AS node_id, "DT_node_data_10".feature AS feature, "DT_node_data_10".threshold AS threshold, "DT_node_data_10".count AS count, "DT_node_data_10".depth AS depth, "DT_node_data_10".parent_id AS parent_id, "DT_node_data_10"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_10" LEFT OUTER JOIN "DT_node_data_10" ON "DT_node_lookup_10".node_id_2 = "DT_node_data_10".node_id), 
"RF_Tree_3_1" AS 
(SELECT "DT_Output_10"."KEY" AS join_key_3_1, "DT_Output_10"."Estimator" AS "Estimator_3_1" 
FROM "DT_Output_10"), 
"DT_node_lookup_11" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -0.5448577404022217) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.16680222749710083) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.037938639521598816) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_11" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.002274850722646073 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_3' AS feature, -0.5448577404022217 AS threshold, 94 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22042455301165154 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6265018242615519 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_4' AS feature, 0.16680222749710083 AS threshold, 79 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23010674182705906 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 62 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8636721665741419 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8748086807758565 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.37609170699093164 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5248158589041025 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, 0.037938639521598816 AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4699689731383327 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2961023609814166 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2337032414339468 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", "DT_node_lookup_11".node_id_2 AS node_id_2, "DT_node_data_11".node_id AS node_id, "DT_node_data_11".feature AS feature, "DT_node_data_11".threshold AS threshold, "DT_node_data_11".count AS count, "DT_node_data_11".depth AS depth, "DT_node_data_11".parent_id AS parent_id, "DT_node_data_11"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_11" LEFT OUTER JOIN "DT_node_data_11" ON "DT_node_lookup_11".node_id_2 = "DT_node_data_11".node_id), 
"RF_Tree_3_2" AS 
(SELECT "DT_Output_11"."KEY" AS join_key_3_2, "DT_Output_11"."Estimator" AS "Estimator_3_2" 
FROM "DT_Output_11"), 
"RF_Join_CTE_3" AS 
(SELECT "RF_Tree_3_0".join_key_3_0 AS join_key_3_0, "RF_Tree_3_0"."Estimator_3_0" AS "Estimator_3_0", "RF_Tree_3_1".join_key_3_1 AS join_key_3_1, "RF_Tree_3_1"."Estimator_3_1" AS "Estimator_3_1", "RF_Tree_3_2".join_key_3_2 AS join_key_3_2, "RF_Tree_3_2"."Estimator_3_2" AS "Estimator_3_2" 
FROM "RF_Tree_3_0" LEFT OUTER JOIN "RF_Tree_3_1" ON "RF_Tree_3_0".join_key_3_0 = "RF_Tree_3_1".join_key_3_1 LEFT OUTER JOIN "RF_Tree_3_2" ON "RF_Tree_3_2".join_key_3_2 = "RF_Tree_3_1".join_key_3_1), 
"DT_node_lookup_12" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.10445671528577805) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -2.679025888442993) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.5713317394256592) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.0911791324615479) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.11101597547531128) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_12" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0031328749829980782 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.10445671528577805 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4245416975356954 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -2.679025888442993 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.423772898386541 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.157712352358469 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.156392677185968 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.1621512700570666 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.5713317394256592 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21697016124234492 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anova_output_2' AS feature, 1.0911791324615479 AS threshold, 63 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21838590053195056 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 42 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8495913121340412 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8601650881111311 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'anova_output_4' AS feature, 0.11101597547531128 AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21455957812761103 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8503706162915223 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8474494995780066 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_12" AS 
(SELECT "DT_node_lookup_12"."KEY" AS "KEY", "DT_node_lookup_12".node_id_2 AS node_id_2, "DT_node_data_12".node_id AS node_id, "DT_node_data_12".feature AS feature, "DT_node_data_12".threshold AS threshold, "DT_node_data_12".count AS count, "DT_node_data_12".depth AS depth, "DT_node_data_12".parent_id AS parent_id, "DT_node_data_12"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_12" LEFT OUTER JOIN "DT_node_data_12" ON "DT_node_lookup_12".node_id_2 = "DT_node_data_12".node_id), 
"RF_Tree_4_0" AS 
(SELECT "DT_Output_12"."KEY" AS join_key_4_0, "DT_Output_12"."Estimator" AS "Estimator_4_0" 
FROM "DT_Output_12"), 
"DT_node_lookup_13" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.10445671528577805) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -2.679025888442993) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.3832025527954102) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.04408328980207443) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= 0.26032906770706177) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_13" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0011315230908333766 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.10445671528577805 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19768150412561483 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -2.679025888442993 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19800265707429515 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8311008666120465 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8313771419088987 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8301534988284393 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.3832025527954102 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1005380366990574 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anova_output_4' AS feature, 0.04408328980207443 AS threshold, 55 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3441133722949739 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.174839958598488 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.448493572329997 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'anova_output_3' AS feature, 0.26032906770706177 AS threshold, 45 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1971651512515071 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8799778078402904 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5092363231336314 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_13" AS 
(SELECT "DT_node_lookup_13"."KEY" AS "KEY", "DT_node_lookup_13".node_id_2 AS node_id_2, "DT_node_data_13".node_id AS node_id, "DT_node_data_13".feature AS feature, "DT_node_data_13".threshold AS threshold, "DT_node_data_13".count AS count, "DT_node_data_13".depth AS depth, "DT_node_data_13".parent_id AS parent_id, "DT_node_data_13"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_13" LEFT OUTER JOIN "DT_node_data_13" ON "DT_node_lookup_13".node_id_2 = "DT_node_data_13".node_id), 
"RF_Tree_4_1" AS 
(SELECT "DT_Output_13"."KEY" AS join_key_4_1, "DT_Output_13"."Estimator" AS "Estimator_4_1" 
FROM "DT_Output_13"), 
"DT_node_lookup_14" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -0.5448577404022217) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.07374349236488342) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.15936073660850525) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.2251313179731369) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_14" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.002683021807964921 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_3' AS feature, -0.5448577404022217 AS threshold, 94 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1963110654870772 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.586443133098099 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_4' AS feature, 0.07374349236488342 AS threshold, 79 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2054099335675608 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 49 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8350517777510196 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8463042958642032 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_4' AS feature, -0.15936073660850525 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.33670881119607127 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.40513612720660763 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, 0.2251313179731369 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.41853741386522697 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0637730861017871 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2260276024800412 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_14" AS 
(SELECT "DT_node_lookup_14"."KEY" AS "KEY", "DT_node_lookup_14".node_id_2 AS node_id_2, "DT_node_data_14".node_id AS node_id, "DT_node_data_14".feature AS feature, "DT_node_data_14".threshold AS threshold, "DT_node_data_14".count AS count, "DT_node_data_14".depth AS depth, "DT_node_data_14".parent_id AS parent_id, "DT_node_data_14"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_14" LEFT OUTER JOIN "DT_node_data_14" ON "DT_node_lookup_14".node_id_2 = "DT_node_data_14".node_id), 
"RF_Tree_4_2" AS 
(SELECT "DT_Output_14"."KEY" AS join_key_4_2, "DT_Output_14"."Estimator" AS "Estimator_4_2" 
FROM "DT_Output_14"), 
"RF_Join_CTE_4" AS 
(SELECT "RF_Tree_4_0".join_key_4_0 AS join_key_4_0, "RF_Tree_4_0"."Estimator_4_0" AS "Estimator_4_0", "RF_Tree_4_1".join_key_4_1 AS join_key_4_1, "RF_Tree_4_1"."Estimator_4_1" AS "Estimator_4_1", "RF_Tree_4_2".join_key_4_2 AS join_key_4_2, "RF_Tree_4_2"."Estimator_4_2" AS "Estimator_4_2" 
FROM "RF_Tree_4_0" LEFT OUTER JOIN "RF_Tree_4_1" ON "RF_Tree_4_0".join_key_4_0 = "RF_Tree_4_1".join_key_4_1 LEFT OUTER JOIN "RF_Tree_4_2" ON "RF_Tree_4_2".join_key_4_2 = "RF_Tree_4_1".join_key_4_1), 
"DT_node_lookup_15" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.10445671528577805) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -0.014749303460121155) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_5 <= -0.0692465677857399) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.029539117589592934) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.337817907333374) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_15" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.003990532254205809 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.10445671528577805 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.37683158930715455 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_3' AS feature, -0.014749303460121155 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3762112224867633 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0696725525629047 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0679795843841762 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.072320608963784 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_5' AS feature, -0.0692465677857399 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1944015930348859 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anova_output_4' AS feature, 0.029539117589592934 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19927880961438213 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8296170751603427 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8364026734615415 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'anova_output_2' AS feature, 1.337817907333374 AS threshold, 69 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1922103797890254 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.823235079961466 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8283424850561969 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_15" AS 
(SELECT "DT_node_lookup_15"."KEY" AS "KEY", "DT_node_lookup_15".node_id_2 AS node_id_2, "DT_node_data_15".node_id AS node_id, "DT_node_data_15".feature AS feature, "DT_node_data_15".threshold AS threshold, "DT_node_data_15".count AS count, "DT_node_data_15".depth AS depth, "DT_node_data_15".parent_id AS parent_id, "DT_node_data_15"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_15" LEFT OUTER JOIN "DT_node_data_15" ON "DT_node_lookup_15".node_id_2 = "DT_node_data_15".node_id), 
"RF_Tree_5_0" AS 
(SELECT "DT_Output_15"."KEY" AS join_key_5_0, "DT_Output_15"."Estimator" AS "Estimator_5_0" 
FROM "DT_Output_15"), 
"DT_node_lookup_16" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -1.5537705421447754) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.10445671528577805) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= -2.679025888442993) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.3832025527954102) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.04408328980207443) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.9048032760620117) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_16" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, -1.5537705421447754 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0015341156188362207 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_4' AS feature, 0.10445671528577805 AS threshold, 50 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1755037087678814 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anova_output_2' AS feature, -2.679025888442993 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17575023718227542 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8086400347424741 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8089508783659464 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8080131664760304 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_2' AS feature, 1.3832025527954102 AS threshold, 100 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09005302781219497 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anova_output_4' AS feature, 0.04408328980207443 AS threshold, 55 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.30768468941826976 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0879578142401034 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3961635661142873 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'anova_output_2' AS feature, 1.9048032760620117 AS threshold, 45 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17594122526189632 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.395977856258376 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8461057996999568 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_16" AS 
(SELECT "DT_node_lookup_16"."KEY" AS "KEY", "DT_node_lookup_16".node_id_2 AS node_id_2, "DT_node_data_16".node_id AS node_id, "DT_node_data_16".feature AS feature, "DT_node_data_16".threshold AS threshold, "DT_node_data_16".count AS count, "DT_node_data_16".depth AS depth, "DT_node_data_16".parent_id AS parent_id, "DT_node_data_16"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_16" LEFT OUTER JOIN "DT_node_data_16" ON "DT_node_lookup_16".node_id_2 = "DT_node_data_16".node_id), 
"RF_Tree_5_1" AS 
(SELECT "DT_Output_16"."KEY" AS join_key_5_1, "DT_Output_16"."Estimator" AS "Estimator_5_1" 
FROM "DT_Output_16"), 
"DT_node_lookup_17" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anova_output_2 <= 1.1425471305847168) THEN CASE WHEN ("ADS_ano_2_OUT".anova_output_3 <= -0.5448577404022217) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.07374349236488342) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= -0.15936073660850525) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anova_output_4 <= 0.2251313179731369) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_17" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anova_output_2' AS feature, 1.1425471305847168 AS threshold, 150 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.003027415389246647 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anova_output_3' AS feature, -0.5448577404022217 AS threshold, 94 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17453207718721614 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5477511779932615 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anova_output_4' AS feature, 0.07374349236488342 AS threshold, 79 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18311765756902607 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 49 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8115470953498577 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8249555725403296 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anova_output_4' AS feature, -0.15936073660850525 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.30107370649973747 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3550478897201008 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'anova_output_4' AS feature, 0.2251313179731369 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3759576569966713 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9798732433571868 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.1394523517085393 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_17" AS 
(SELECT "DT_node_lookup_17"."KEY" AS "KEY", "DT_node_lookup_17".node_id_2 AS node_id_2, "DT_node_data_17".node_id AS node_id, "DT_node_data_17".feature AS feature, "DT_node_data_17".threshold AS threshold, "DT_node_data_17".count AS count, "DT_node_data_17".depth AS depth, "DT_node_data_17".parent_id AS parent_id, "DT_node_data_17"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_17" LEFT OUTER JOIN "DT_node_data_17" ON "DT_node_lookup_17".node_id_2 = "DT_node_data_17".node_id), 
"RF_Tree_5_2" AS 
(SELECT "DT_Output_17"."KEY" AS join_key_5_2, "DT_Output_17"."Estimator" AS "Estimator_5_2" 
FROM "DT_Output_17"), 
"RF_Join_CTE_5" AS 
(SELECT "RF_Tree_5_0".join_key_5_0 AS join_key_5_0, "RF_Tree_5_0"."Estimator_5_0" AS "Estimator_5_0", "RF_Tree_5_1".join_key_5_1 AS join_key_5_1, "RF_Tree_5_1"."Estimator_5_1" AS "Estimator_5_1", "RF_Tree_5_2".join_key_5_2 AS join_key_5_2, "RF_Tree_5_2"."Estimator_5_2" AS "Estimator_5_2" 
FROM "RF_Tree_5_0" LEFT OUTER JOIN "RF_Tree_5_1" ON "RF_Tree_5_0".join_key_5_0 = "RF_Tree_5_1".join_key_5_1 LEFT OUTER JOIN "RF_Tree_5_2" ON "RF_Tree_5_2".join_key_5_2 = "RF_Tree_5_1".join_key_5_1), 
"RF_Join_CTE" AS 
(SELECT "RF_Join_CTE_0".join_key_0_0 AS join_key_0_0, "RF_Join_CTE_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Join_CTE_0".join_key_0_1 AS join_key_0_1, "RF_Join_CTE_0"."Estimator_0_1" AS "Estimator_0_1", "RF_Join_CTE_0".join_key_0_2 AS join_key_0_2, "RF_Join_CTE_0"."Estimator_0_2" AS "Estimator_0_2", "RF_Join_CTE_1".join_key_1_0 AS join_key_1_0, "RF_Join_CTE_1"."Estimator_1_0" AS "Estimator_1_0", "RF_Join_CTE_1".join_key_1_1 AS join_key_1_1, "RF_Join_CTE_1"."Estimator_1_1" AS "Estimator_1_1", "RF_Join_CTE_1".join_key_1_2 AS join_key_1_2, "RF_Join_CTE_1"."Estimator_1_2" AS "Estimator_1_2", "RF_Join_CTE_2".join_key_2_0 AS join_key_2_0, "RF_Join_CTE_2"."Estimator_2_0" AS "Estimator_2_0", "RF_Join_CTE_2".join_key_2_1 AS join_key_2_1, "RF_Join_CTE_2"."Estimator_2_1" AS "Estimator_2_1", "RF_Join_CTE_2".join_key_2_2 AS join_key_2_2, "RF_Join_CTE_2"."Estimator_2_2" AS "Estimator_2_2", "RF_Join_CTE_3".join_key_3_0 AS join_key_3_0, "RF_Join_CTE_3"."Estimator_3_0" AS "Estimator_3_0", "RF_Join_CTE_3".join_key_3_1 AS join_key_3_1, "RF_Join_CTE_3"."Estimator_3_1" AS "Estimator_3_1", "RF_Join_CTE_3".join_key_3_2 AS join_key_3_2, "RF_Join_CTE_3"."Estimator_3_2" AS "Estimator_3_2", "RF_Join_CTE_4".join_key_4_0 AS join_key_4_0, "RF_Join_CTE_4"."Estimator_4_0" AS "Estimator_4_0", "RF_Join_CTE_4".join_key_4_1 AS join_key_4_1, "RF_Join_CTE_4"."Estimator_4_1" AS "Estimator_4_1", "RF_Join_CTE_4".join_key_4_2 AS join_key_4_2, "RF_Join_CTE_4"."Estimator_4_2" AS "Estimator_4_2", "RF_Join_CTE_5".join_key_5_0 AS join_key_5_0, "RF_Join_CTE_5"."Estimator_5_0" AS "Estimator_5_0", "RF_Join_CTE_5".join_key_5_1 AS join_key_5_1, "RF_Join_CTE_5"."Estimator_5_1" AS "Estimator_5_1", "RF_Join_CTE_5".join_key_5_2 AS join_key_5_2, "RF_Join_CTE_5"."Estimator_5_2" AS "Estimator_5_2" 
FROM "RF_Join_CTE_0" LEFT OUTER JOIN "RF_Join_CTE_1" ON "RF_Join_CTE_0".join_key_0_0 = "RF_Join_CTE_1".join_key_1_0 LEFT OUTER JOIN "RF_Join_CTE_2" ON "RF_Join_CTE_2".join_key_2_0 = "RF_Join_CTE_1".join_key_1_0 LEFT OUTER JOIN "RF_Join_CTE_3" ON "RF_Join_CTE_3".join_key_3_0 = "RF_Join_CTE_2".join_key_2_0 LEFT OUTER JOIN "RF_Join_CTE_4" ON "RF_Join_CTE_4".join_key_4_0 = "RF_Join_CTE_3".join_key_3_0 LEFT OUTER JOIN "RF_Join_CTE_5" ON "RF_Join_CTE_5".join_key_5_0 = "RF_Join_CTE_4".join_key_4_0), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0_0 AS "KEY", 0.333333333333 + 0.1 * "RF_Join_CTE"."Estimator_0_0" + 0.1 * "RF_Join_CTE"."Estimator_1_0" + 0.1 * "RF_Join_CTE"."Estimator_2_0" + 0.1 * "RF_Join_CTE"."Estimator_3_0" + 0.1 * "RF_Join_CTE"."Estimator_4_0" + 0.1 * "RF_Join_CTE"."Estimator_5_0" AS "Score_0", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0", 0.333333333333 + 0.1 * "RF_Join_CTE"."Estimator_0_1" + 0.1 * "RF_Join_CTE"."Estimator_1_1" + 0.1 * "RF_Join_CTE"."Estimator_2_1" + 0.1 * "RF_Join_CTE"."Estimator_3_1" + 0.1 * "RF_Join_CTE"."Estimator_4_1" + 0.1 * "RF_Join_CTE"."Estimator_5_1" AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1", 0.333333333333 + 0.1 * "RF_Join_CTE"."Estimator_0_2" + 0.1 * "RF_Join_CTE"."Estimator_1_2" + 0.1 * "RF_Join_CTE"."Estimator_2_2" + 0.1 * "RF_Join_CTE"."Estimator_3_2" + 0.1 * "RF_Join_CTE"."Estimator_4_2" + 0.1 * "RF_Join_CTE"."Estimator_5_2" AS "Score_2", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte