-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.3009226322174072) THEN CASE WHEN ([ADS].[Feature_0] <= 0.4168534278869629) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_0] <= 0.3379644453525543) THEN 5 ELSE CASE WHEN ([ADS].[Feature_4] <= 0.41905900835990906) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.3009226322174072 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -7.638334409421077e-16 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 0.4168534278869629 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.9388648848048287 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -5.7597221396311316 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.5110552117030915 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 0.3379644453525543 AS threshold, 65 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.120927245664137 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6963306723204774 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.41905900835990906 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.999099190987213 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.1270963085357155 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 5.1691009925194 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[RF_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0_0, [DT_Output].[Estimator] AS [Estimator_0_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.27238720655441284) THEN CASE WHEN ([ADS].[Feature_1] <= 0.48088565468788147) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_0] <= 0.3379644453525543) THEN 5 ELSE CASE WHEN ([ADS].[Feature_1] <= 0.4207172989845276) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.27238720655441284 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -6.572520305780927e-16 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.48088565468788147 AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -4.01792809067532 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -5.667851080057863 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.3680051012927783 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 0.3379644453525543 AS threshold, 70 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.721969181717994 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.831188729666143 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 0.4207172989845276 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.3251148470057084 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2942256018271685 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.4130912283513535 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[RF_Tree_1_0] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_1_0, [DT_Output_1].[Estimator] AS [Estimator_1_0] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.37390798330307007) THEN CASE WHEN ([ADS].[Feature_0] <= 0.4587014317512512) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_1] <= 0.3404635787010193) THEN 5 ELSE CASE WHEN ([ADS].[Feature_0] <= 0.3776639699935913) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.37390798330307007 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -7.105427357601002e-16 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 0.4587014317512512 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.508247669231789 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -4.429676800004466 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4244599514212445 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_1' AS feature, 0.3404635787010193 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3153055408293417 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3097769067613394 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 0.3776639699935913 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.289419448805231 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.900737822511098 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.330930668525828 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[RF_Tree_2_0] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_2_0, [DT_Output_2].[Estimator] AS [Estimator_2_0] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.26902806758880615) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 0.19928023219108582) THEN 3 ELSE CASE WHEN ([ADS].[Feature_3] <= 0.6313163042068481) THEN 5 ELSE 6 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.26902806758880615 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -7.01660951563099e-16 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.4344616992773744 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 0.19928023219108582 AS threshold, 71 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4028082997048419 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.7983505435214076 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_3' AS feature, 0.6313163042068481 AS threshold, 55 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3340545086433875 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9955043794620461 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.827052729653345 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[RF_Tree_3_0] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_3_0, [DT_Output_3].[Estimator] AS [Estimator_3_0] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.27238720655441284) THEN CASE WHEN ([ADS].[Feature_1] <= 0.48088565468788147) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_0] <= 0.19928023219108582) THEN 5 ELSE CASE WHEN ([ADS].[Feature_1] <= 0.3699578642845154) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.27238720655441284 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -6.039613253960852e-16 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.48088565468788147 AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.022472999494345 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -4.538350699372518 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.5065952996161722 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 0.19928023219108582 AS threshold, 70 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2953455712118613 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.6185154891692664 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 0.3699578642845154 AS threshold, 54 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.158711811324787 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14491760695621972 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.1656089135090717 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].count AS count, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[RF_Tree_4_0] AS 
(SELECT [DT_Output_4].[KEY] AS join_key_4_0, [DT_Output_4].[Estimator] AS [Estimator_4_0] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.6313163042068481) THEN CASE WHEN ([ADS].[Feature_0] <= 0.45001906156539917) THEN CASE WHEN ([ADS].[Feature_4] <= 0.41094183921813965) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_9] <= 0.5197944641113281) THEN 7 ELSE 8 END END AS node_id_2 
FROM [INPUT_DATA] AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.6313163042068481 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.375077994860476e-16 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 0.45001906156539917 AS threshold, 68 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.2776545114803555 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_4' AS feature, 0.41094183921813965 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.7038636869492527 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -4.629230960053932 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.5486433230864471 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7597871677609268 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_9' AS feature, 0.5197944641113281 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.7150158368957547 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.598662792979268 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8313688808122421 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].count AS count, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[RF_Tree_5_0] AS 
(SELECT [DT_Output_5].[KEY] AS join_key_5_0, [DT_Output_5].[Estimator] AS [Estimator_5_0] 
FROM [DT_Output_5]), 
[RF_Join_CTE] AS 
(SELECT [RF_Tree_0_0].join_key_0_0 AS join_key_0_0, [RF_Tree_0_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Tree_1_0].join_key_1_0 AS join_key_1_0, [RF_Tree_1_0].[Estimator_1_0] AS [Estimator_1_0], [RF_Tree_2_0].join_key_2_0 AS join_key_2_0, [RF_Tree_2_0].[Estimator_2_0] AS [Estimator_2_0], [RF_Tree_3_0].join_key_3_0 AS join_key_3_0, [RF_Tree_3_0].[Estimator_3_0] AS [Estimator_3_0], [RF_Tree_4_0].join_key_4_0 AS join_key_4_0, [RF_Tree_4_0].[Estimator_4_0] AS [Estimator_4_0], [RF_Tree_5_0].join_key_5_0 AS join_key_5_0, [RF_Tree_5_0].[Estimator_5_0] AS [Estimator_5_0] 
FROM [RF_Tree_0_0] LEFT OUTER JOIN [RF_Tree_1_0] ON [RF_Tree_0_0].join_key_0_0 = [RF_Tree_1_0].join_key_1_0 LEFT OUTER JOIN [RF_Tree_2_0] ON [RF_Tree_2_0].join_key_2_0 = [RF_Tree_1_0].join_key_1_0 LEFT OUTER JOIN [RF_Tree_3_0] ON [RF_Tree_3_0].join_key_3_0 = [RF_Tree_2_0].join_key_2_0 LEFT OUTER JOIN [RF_Tree_4_0] ON [RF_Tree_4_0].join_key_4_0 = [RF_Tree_3_0].join_key_3_0 LEFT OUTER JOIN [RF_Tree_5_0] ON [RF_Tree_5_0].join_key_5_0 = [RF_Tree_4_0].join_key_4_0), 
[RF_AVG_Scores] AS 
(SELECT [RF_Join_CTE].join_key_0_0 AS [KEY], 13.4034098269 + 0.1 * [RF_Join_CTE].[Estimator_0_0] + 0.1 * [RF_Join_CTE].[Estimator_1_0] + 0.1 * [RF_Join_CTE].[Estimator_2_0] + 0.1 * [RF_Join_CTE].[Estimator_3_0] + 0.1 * [RF_Join_CTE].[Estimator_4_0] + 0.1 * [RF_Join_CTE].[Estimator_5_0] AS [Estimator] 
FROM [RF_Join_CTE])
 SELECT [RF_AVG_Scores].[KEY] AS [KEY], [RF_AVG_Scores].[Estimator] AS [Estimator] 
FROM [RF_AVG_Scores]