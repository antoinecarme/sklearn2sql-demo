-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.497392924296 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.48246016386 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.460945961057 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.503141779378 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.514120188195 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.479168456091 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.546724246654 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.51162866039 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.528830542481 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.517375468553 ELSE "ADS"."Feature_9" END AS impute_11 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.497392924296 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.48246016386 AS impute_3, "ADS_imp_1_OUT".impute_4 - 0.460945961057 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.503141779378 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.514120188195 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.479168456091 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.546724246654 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.51162866039 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.528830542481 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.517375468553 AS impute_11 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * -0.154411707976 + "CenteredDataForPCA".impute_3 * -0.350346668162 + "CenteredDataForPCA".impute_4 * 0.294470933278 + "CenteredDataForPCA".impute_5 * -0.16772815311 + "CenteredDataForPCA".impute_6 * -0.404554500471 + "CenteredDataForPCA".impute_7 * 0.307775588725 + "CenteredDataForPCA".impute_8 * -0.212526379648 + "CenteredDataForPCA".impute_9 * -0.583531901239 + "CenteredDataForPCA".impute_10 * -0.284101447111 + "CenteredDataForPCA".impute_11 * 0.117420789173 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.336356538022 + "CenteredDataForPCA".impute_3 * -0.575224000262 + "CenteredDataForPCA".impute_4 * -0.218002300805 + "CenteredDataForPCA".impute_5 * -0.372733052559 + "CenteredDataForPCA".impute_6 * 0.432959539821 + "CenteredDataForPCA".impute_7 * -0.00215387934349 + "CenteredDataForPCA".impute_8 * 0.0339221976381 + "CenteredDataForPCA".impute_9 * -0.0636120379879 + "CenteredDataForPCA".impute_10 * 0.410490432587 + "CenteredDataForPCA".impute_11 * 0.0914794665086 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.108933518871 + "CenteredDataForPCA".impute_3 * -0.24432199169 + "CenteredDataForPCA".impute_4 * -0.450074255274 + "CenteredDataForPCA".impute_5 * 0.395212470649 + "CenteredDataForPCA".impute_6 * 0.056538008337 + "CenteredDataForPCA".impute_7 * -0.0396060582348 + "CenteredDataForPCA".impute_8 * 0.589173561683 + "CenteredDataForPCA".impute_9 * -0.363810004206 + "CenteredDataForPCA".impute_10 * -0.289937365366 + "CenteredDataForPCA".impute_11 * -0.0369926155946 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.129544375597 + "CenteredDataForPCA".impute_3 * 0.111309293834 + "CenteredDataForPCA".impute_4 * -0.377063456483 + "CenteredDataForPCA".impute_5 * -0.36018638792 + "CenteredDataForPCA".impute_6 * -0.657452260025 + "CenteredDataForPCA".impute_7 * -0.174430462224 + "CenteredDataForPCA".impute_8 * 0.157434604128 + "CenteredDataForPCA".impute_9 * -0.114924631527 + "CenteredDataForPCA".impute_10 * 0.425649009643 + "CenteredDataForPCA".impute_11 * -0.130681086298 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.652346227939 + "CenteredDataForPCA".impute_3 * 0.349640350279 + "CenteredDataForPCA".impute_4 * -0.329725423942 + "CenteredDataForPCA".impute_5 * 0.0656878197635 + "CenteredDataForPCA".impute_6 * -0.00657686968657 + "CenteredDataForPCA".impute_7 * 0.427867816085 + "CenteredDataForPCA".impute_8 * -0.0653168220613 + "CenteredDataForPCA".impute_9 * -0.0155727747903 + "CenteredDataForPCA".impute_10 * -0.0622403009866 + "CenteredDataForPCA".impute_11 * -0.384272693032 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.498707899419 + "CenteredDataForPCA".impute_3 * -0.0505798832035 + "CenteredDataForPCA".impute_4 * 0.22634095564 + "CenteredDataForPCA".impute_5 * 0.312062175993 + "CenteredDataForPCA".impute_6 * -0.129469847981 + "CenteredDataForPCA".impute_7 * -0.728936690365 + "CenteredDataForPCA".impute_8 * -0.066620347196 + "CenteredDataForPCA".impute_9 * -0.147385692897 + "CenteredDataForPCA".impute_10 * 0.0715274147322 + "CenteredDataForPCA".impute_11 * -0.143982472199 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.276912622362 + "CenteredDataForPCA".impute_3 * 0.335404311438 + "CenteredDataForPCA".impute_4 * 0.20771803982 + "CenteredDataForPCA".impute_5 * 0.102652433413 + "CenteredDataForPCA".impute_6 * -0.0429855392316 + "CenteredDataForPCA".impute_7 * 0.158602107045 + "CenteredDataForPCA".impute_8 * 0.42036951532 + "CenteredDataForPCA".impute_9 * -0.0982936835693 + "CenteredDataForPCA".impute_10 * 0.291918890256 + "CenteredDataForPCA".impute_11 * 0.677161605692 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.140295981704 + "CenteredDataForPCA".impute_3 * 0.227178101518 + "CenteredDataForPCA".impute_4 * 0.116609069031 + "CenteredDataForPCA".impute_5 * -0.655757758336 + "CenteredDataForPCA".impute_6 * 0.144869132716 + "CenteredDataForPCA".impute_7 * -0.265569880188 + "CenteredDataForPCA".impute_8 * 0.371491869334 + "CenteredDataForPCA".impute_9 * 0.00773348983227 + "CenteredDataForPCA".impute_10 * -0.503253047885 + "CenteredDataForPCA".impute_11 * -0.0474042422232 AS anoova_9, "CenteredDataForPCA".impute_2 * 0.197975100544 + "CenteredDataForPCA".impute_3 * 0.145012891818 + "CenteredDataForPCA".impute_4 * 0.456114147598 + "CenteredDataForPCA".impute_5 * -0.0104901725884 + "CenteredDataForPCA".impute_6 * 0.249600135726 + "CenteredDataForPCA".impute_7 * 0.143126434153 + "CenteredDataForPCA".impute_8 * 0.272460296877 + "CenteredDataForPCA".impute_9 * -0.391015439805 + "CenteredDataForPCA".impute_10 * 0.371253082739 + "CenteredDataForPCA".impute_11 * -0.532808613406 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.156684950133 + "CenteredDataForPCA".impute_3 * 0.405401266958 + "CenteredDataForPCA".impute_4 * -0.310297474599 + "CenteredDataForPCA".impute_5 * -0.0681667984355 + "CenteredDataForPCA".impute_6 * 0.333917543301 + "CenteredDataForPCA".impute_7 * -0.206611203497 + "CenteredDataForPCA".impute_8 * -0.429085973235 + "CenteredDataForPCA".impute_9 * -0.570349941459 + "CenteredDataForPCA".impute_10 * 0.0156227717156 + "CenteredDataForPCA".impute_11 * 0.215224045401 AS anoova_11 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.039056044071912766) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.07944855839014053) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.025028962641954422) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.018981896340847015) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.039056044071912766 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5276668818842154e-15 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 0.07944855839014053 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.6655135393517293 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_9' AS feature, -0.025028962641954422 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.360659687884683 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 5.51343836093047 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.2078810148388945 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19984641421288732 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_2' AS feature, -0.018981896340847015 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.129081111412894 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.463951445587792 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -5.5721166384192395 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0_0, "DT_Output"."Estimator" AS "Estimator_0_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.039056044071912766) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.13573962450027466) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.025125162675976753) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.2167554646730423) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.039056044071912766 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3500311979441904e-15 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -0.13573962450027466 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.398962185416556 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.8991999711277465 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_11' AS feature, -0.025125162675976753 AS threshold, 34 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9282340761746792 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0048466076269593 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.6465280173316907 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_2' AS feature, 0.2167554646730423 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.8161730002716054 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0076014442094208 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -5.9013833017894495 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_1_0" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1_0, "DT_Output_1"."Estimator" AS "Estimator_1_0" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.039056044071912766) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.07944855839014053) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.025028962641954422) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.2167554646730423) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.039056044071912766 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.438849039914203e-15 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 0.07944855839014053 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.159065966874901 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_9' AS feature, -0.025028962641954422 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.601691394179991 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.639192199921201 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.5641905884387812 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.060701708976586305 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_2' AS feature, 0.2167554646730423 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.5345557002444443 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9068412997884787 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -5.3112449716105035 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_2_0" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2_0, "DT_Output_2"."Estimator" AS "Estimator_2_0" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.2652396559715271) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.015524428337812424) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 0.09540348500013351) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.16501688957214355) THEN 6 ELSE 7 END END ELSE 8 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.2652396559715271 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.723066134218243e-15 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -0.015524428337812424 AS threshold, 78 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.1442616676854744 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_7' AS feature, 0.09540348500013351 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.8947735577715674 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.9506519685385793 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.205368100544347 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_3' AS feature, -0.16501688957214355 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6062502224006183 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7441476726378682 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.080353269809551 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -4.056927730884857 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_3_0" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3_0, "DT_Output_3"."Estimator" AS "Estimator_3_0" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.2652396559715271) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.015524428337812424) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.03320007771253586) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.16501688957214355) THEN 6 ELSE 7 END END ELSE 8 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.2652396559715271 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2967404927621828e-15 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -0.015524428337812424 AS threshold, 78 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0298355009169267 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_11' AS feature, 0.03320007771253586 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.60529620199441 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5420896430463438 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.981210572397789 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_3' AS feature, -0.16501688957214355 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5456252001605567 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5697329053740812 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.7723179428285967 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.6512349577963708 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_4_0" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4_0, "DT_Output_4"."Estimator" AS "Estimator_4_0" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.2652396559715271) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.14964531362056732) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.2530074417591095) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.2652396559715271 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.059419880941278e-16 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -0.14964531362056732 AS threshold, 78 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.926851950825234 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.098657147287668 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_2' AS feature, -0.2530074417591095 AS threshold, 53 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.09758446260044287 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.6927462901428547 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.199030812367534 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.286111462016733 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_5_0" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5_0, "DT_Output_5"."Estimator" AS "Estimator_5_0" 
FROM "DT_Output_5"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0_0".join_key_0_0 AS join_key_0_0, "RF_Tree_0_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Tree_1_0".join_key_1_0 AS join_key_1_0, "RF_Tree_1_0"."Estimator_1_0" AS "Estimator_1_0", "RF_Tree_2_0".join_key_2_0 AS join_key_2_0, "RF_Tree_2_0"."Estimator_2_0" AS "Estimator_2_0", "RF_Tree_3_0".join_key_3_0 AS join_key_3_0, "RF_Tree_3_0"."Estimator_3_0" AS "Estimator_3_0", "RF_Tree_4_0".join_key_4_0 AS join_key_4_0, "RF_Tree_4_0"."Estimator_4_0" AS "Estimator_4_0", "RF_Tree_5_0".join_key_5_0 AS join_key_5_0, "RF_Tree_5_0"."Estimator_5_0" AS "Estimator_5_0" 
FROM "RF_Tree_0_0" LEFT OUTER JOIN "RF_Tree_1_0" ON "RF_Tree_0_0".join_key_0_0 = "RF_Tree_1_0".join_key_1_0 LEFT OUTER JOIN "RF_Tree_2_0" ON "RF_Tree_2_0".join_key_2_0 = "RF_Tree_1_0".join_key_1_0 LEFT OUTER JOIN "RF_Tree_3_0" ON "RF_Tree_3_0".join_key_3_0 = "RF_Tree_2_0".join_key_2_0 LEFT OUTER JOIN "RF_Tree_4_0" ON "RF_Tree_4_0".join_key_4_0 = "RF_Tree_3_0".join_key_3_0 LEFT OUTER JOIN "RF_Tree_5_0" ON "RF_Tree_5_0".join_key_5_0 = "RF_Tree_4_0".join_key_4_0), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0_0 AS "KEY", 14.1454897384 + 0.1 * "RF_Join_CTE"."Estimator_0_0" + 0.1 * "RF_Join_CTE"."Estimator_1_0" + 0.1 * "RF_Join_CTE"."Estimator_2_0" + 0.1 * "RF_Join_CTE"."Estimator_3_0" + 0.1 * "RF_Join_CTE"."Estimator_4_0" + 0.1 * "RF_Join_CTE"."Estimator_5_0" AS "Estimator" 
FROM "RF_Join_CTE")
 SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Estimator" AS "Estimator" 
FROM "RF_AVG_Scores"