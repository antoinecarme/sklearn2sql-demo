-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", -0.6658015222423249 * "ADS"."Feature_0" + 0.023513273999017995 * "ADS"."Feature_1" + 0.12966130003607293 * "ADS"."Feature_2" + 0.34842183973234875 * "ADS"."Feature_3" + 0.4797341403416895 * "ADS"."Feature_4" + 0.00728603705432776 * "ADS"."Feature_5" + 0.3603451377764104 * "ADS"."Feature_6" + -0.2701925587248333 * "ADS"."Feature_7" + -0.2703966257293437 * "ADS"."Feature_8" + 0.3603964481638835 * "ADS"."Feature_9" + -1.2241693830140328 * "ADS"."Feature_10" + 0.34503932481509525 * "ADS"."Feature_11" + -0.20456596959087248 * "ADS"."Feature_12" + -0.3196721086453712 * "ADS"."Feature_13" + 0.2294276745134789 * "ADS"."Feature_14" + 0.31200031778459375 * "ADS"."Feature_15" + 0.042511140906634104 * "ADS"."Feature_16" + 0.400999580491346 * "ADS"."Feature_17" + -0.08958285192019978 * "ADS"."Feature_18" + 0.02440255441897872 * "ADS"."Feature_19" + -3.64359994264 AS "Score_0", 0.8758672954436336 * "ADS"."Feature_0" + -0.11619630553546022 * "ADS"."Feature_1" + -0.1377590121523939 * "ADS"."Feature_2" + -0.31665699083035165 * "ADS"."Feature_3" + -0.2861630104965661 * "ADS"."Feature_4" + -0.10247224746649441 * "ADS"."Feature_5" + -0.38780287812669845 * "ADS"."Feature_6" + 0.05685673583885899 * "ADS"."Feature_7" + 0.06781967301121378 * "ADS"."Feature_8" + 0.033633561105802776 * "ADS"."Feature_9" + 0.8962171970381834 * "ADS"."Feature_10" + -0.6671473658554432 * "ADS"."Feature_11" + 0.14596770258487876 * "ADS"."Feature_12" + 0.4195914160924651 * "ADS"."Feature_13" + -0.4539490621755858 * "ADS"."Feature_14" + 0.3478999367735364 * "ADS"."Feature_15" + 0.32909578068069745 * "ADS"."Feature_16" + -0.28461882256771237 * "ADS"."Feature_17" + -0.22320088257067042 * "ADS"."Feature_18" + 0.15105002203434284 * "ADS"."Feature_19" + -0.660433235793 AS "Score_1", 0.7095099410187855 * "ADS"."Feature_0" + 0.03236419944218651 * "ADS"."Feature_1" + 0.02246947255361992 * "ADS"."Feature_2" + -0.35482391856699996 * "ADS"."Feature_3" + -0.17526157935777806 * "ADS"."Feature_4" + 0.011423694671469163 * "ADS"."Feature_5" + -0.20039462904148853 * "ADS"."Feature_6" + 0.9470978487051565 * "ADS"."Feature_7" + 0.6045485729808917 * "ADS"."Feature_8" + -0.6467455060649632 * "ADS"."Feature_9" + 1.7166477377325384 * "ADS"."Feature_10" + -0.12025771567753968 * "ADS"."Feature_11" + -0.018121196466309455 * "ADS"."Feature_12" + -0.035644452835871435 * "ADS"."Feature_13" + 0.18151096131223754 * "ADS"."Feature_14" + -0.8528115610002079 * "ADS"."Feature_15" + -0.0573026047155393 * "ADS"."Feature_16" + -0.6598676248455589 * "ADS"."Feature_17" + 0.1851943012844693 * "ADS"."Feature_18" + -1.539372048642256 * "ADS"."Feature_19" + -3.11643700846 AS "Score_2", -0.919575714220094 * "ADS"."Feature_0" + 0.060318832094255675 * "ADS"."Feature_1" + -0.014371760437298998 * "ADS"."Feature_2" + 0.3230590696650027 * "ADS"."Feature_3" + -0.018309550487345227 * "ADS"."Feature_4" + 0.08376251574069746 * "ADS"."Feature_5" + 0.22785236939177655 * "ADS"."Feature_6" + -0.7337620258191822 * "ADS"."Feature_7" + -0.4019716202627618 * "ADS"."Feature_8" + 0.252715496795277 * "ADS"."Feature_9" + -1.3886955517566886 * "ADS"."Feature_10" + 0.4423657567178874 * "ADS"."Feature_11" + 0.07671946347230316 * "ADS"."Feature_12" + -0.06427485461122236 * "ADS"."Feature_13" + 0.04301042634986928 * "ADS"."Feature_14" + 0.19291130644207788 * "ADS"."Feature_15" + -0.314304316871792 * "ADS"."Feature_16" + 0.5434868669219253 * "ADS"."Feature_17" + 0.12758943320640082 * "ADS"."Feature_18" + 1.363919472188934 * "ADS"."Feature_19" + -4.22131738407 AS "Score_3" 
FROM "INPUT_DATA" "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", (1.0 / (1.0 + exp(-linear_model_cte."Score_0"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_0", (1.0 / (1.0 + exp(-linear_model_cte."Score_1"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_1", (1.0 / (1.0 + exp(-linear_model_cte."Score_2"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_2", (1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte