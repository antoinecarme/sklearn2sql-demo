-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", -0.00022342368217170844 * "ADS"."Feature_0" + 0.00014469343281971937 * "ADS"."Feature_1" + 0.0006571503165919534 * "ADS"."Feature_2" + -0.0004048361719811231 * "ADS"."Feature_3" + -0.00041118035071260574 * "ADS"."Feature_4" + -0.0015035666902535536 * "ADS"."Feature_5" + -0.00030195876642623835 * "ADS"."Feature_6" + -7.547119338325176e-05 * "ADS"."Feature_7" + -0.00038990452052916074 * "ADS"."Feature_8" + -0.0007449523945218389 * "ADS"."Feature_9" + 0.00041171144903418705 * "ADS"."Feature_10" + -3.1856616894533254e-05 * "ADS"."Feature_11" + -0.00013551064950579765 * "ADS"."Feature_12" + -0.00047252013481833644 * "ADS"."Feature_13" + -0.0003327008783170269 * "ADS"."Feature_14" + -0.00013859576772973144 * "ADS"."Feature_15" + -0.0017259538804634325 * "ADS"."Feature_16" + -0.0005566277189856861 * "ADS"."Feature_17" + -0.00020046852221675154 * "ADS"."Feature_18" + 0.00024069311721834193 * "ADS"."Feature_19" + -1.09801486594 AS "Score_0", 0.00014605013248751052 * "ADS"."Feature_0" + 0.0002043326443057066 * "ADS"."Feature_1" + -0.002303737982100965 * "ADS"."Feature_2" + -0.00014486460253951557 * "ADS"."Feature_3" + 0.00046813009337116906 * "ADS"."Feature_4" + -0.0022996318300215484 * "ADS"."Feature_5" + 0.0003834112458663779 * "ADS"."Feature_6" + 0.0005222313355960928 * "ADS"."Feature_7" + 0.0004976505382891304 * "ADS"."Feature_8" + 0.0003809569564489963 * "ADS"."Feature_9" + 0.0003353848471724268 * "ADS"."Feature_10" + 6.913661738417704e-05 * "ADS"."Feature_11" + -0.00035328878256654514 * "ADS"."Feature_12" + 0.00028259804338680056 * "ADS"."Feature_13" + 3.62076611709349e-05 * "ADS"."Feature_14" + -0.00028555036856774195 * "ADS"."Feature_15" + 0.0013311198931751063 * "ADS"."Feature_16" + 0.003219357208750033 * "ADS"."Feature_17" + -0.0001257980795848501 * "ADS"."Feature_18" + 0.00018381128174942238 * "ADS"."Feature_19" + -1.09859041831 AS "Score_1", 0.06807535085675778 * "ADS"."Feature_0" + -0.06023186302597561 * "ADS"."Feature_1" + 0.47084824750386534 * "ADS"."Feature_2" + 0.142369559829195 * "ADS"."Feature_3" + -0.04971312944531127 * "ADS"."Feature_4" + 0.2659590868304789 * "ADS"."Feature_5" + 0.09534083345049883 * "ADS"."Feature_6" + -0.10928273198710055 * "ADS"."Feature_7" + 0.05636783598027839 * "ADS"."Feature_8" + 0.28909207472361265 * "ADS"."Feature_9" + -0.06711371456472692 * "ADS"."Feature_10" + 0.08836170784846523 * "ADS"."Feature_11" + 0.11970056488051428 * "ADS"."Feature_12" + 0.04244335148572064 * "ADS"."Feature_13" + 0.037535917191262314 * "ADS"."Feature_14" + 0.09652187852009053 * "ADS"."Feature_15" + -0.14570430416456492 * "ADS"."Feature_16" + -0.22602907606916336 * "ADS"."Feature_17" + -0.042682442296664805 * "ADS"."Feature_18" + 0.11357914386408838 * "ADS"."Feature_19" + -1.26691593416 AS "Score_2", -0.10275952976198403 * "ADS"."Feature_0" + -0.06641193570179277 * "ADS"."Feature_1" + -0.2642484758287878 * "ADS"."Feature_2" + 0.04840811768953145 * "ADS"."Feature_3" + 0.055012081406917004 * "ADS"."Feature_4" + 0.35894381980371953 * "ADS"."Feature_5" + -0.08140438239572335 * "ADS"."Feature_6" + 0.026847474039687676 * "ADS"."Feature_7" + -0.027588585853810285 * "ADS"."Feature_8" + -0.04699438113053969 * "ADS"."Feature_9" + -0.09925432322418355 * "ADS"."Feature_10" + -0.1415970039537886 * "ADS"."Feature_11" + -0.024429542135913473 * "ADS"."Feature_12" + -0.013740171033083884 * "ADS"."Feature_13" + 0.06901775496156237 * "ADS"."Feature_14" + 0.007297289063682458 * "ADS"."Feature_15" + 0.21983485177340448 * "ADS"."Feature_16" + -0.016268516076785262 * "ADS"."Feature_17" + 0.16588531567922218 * "ADS"."Feature_18" + -0.16203257942762966 * "ADS"."Feature_19" + -1.56123409843 AS "Score_3" 
FROM "INPUT_DATA" AS "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", (1.0 / (1.0 + exp(-linear_model_cte."Score_0"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_0", (1.0 / (1.0 + exp(-linear_model_cte."Score_1"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_1", (1.0 / (1.0 + exp(-linear_model_cte."Score_2"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_2", (1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte