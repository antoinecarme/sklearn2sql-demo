-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", "ADS"."Feature_0" AS "Feature_0", "ADS"."Feature_1" AS "Feature_1", "ADS"."Feature_2" AS "Feature_2", "ADS"."Feature_3" AS "Feature_3", "ADS"."Feature_4" AS "Feature_4", "ADS"."Feature_5" AS "Feature_5", "ADS"."Feature_6" AS "Feature_6", "ADS"."Feature_7" AS "Feature_7", "ADS"."Feature_8" AS "Feature_8", "ADS"."Feature_9" AS "Feature_9", "ADS"."Feature_10" AS "Feature_10", "ADS"."Feature_11" AS "Feature_11", "ADS"."Feature_12" AS "Feature_12", "ADS"."Feature_13" AS "Feature_13", "ADS"."Feature_14" AS "Feature_14", "ADS"."Feature_15" AS "Feature_15", "ADS"."Feature_16" AS "Feature_16", "ADS"."Feature_17" AS "Feature_17", "ADS"."Feature_18" AS "Feature_18", "ADS"."Feature_19" AS "Feature_19" 
FROM "INPUT_DATA" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.00409179788428 * "IL"."Feature_0" + 0.645185961833 * "IL"."Feature_1" + -0.458618357215 * "IL"."Feature_2" + -0.127193970107 * "IL"."Feature_3" + -0.209949509845 * "IL"."Feature_4" + 0.0185052864881 * "IL"."Feature_5" + -0.282329045279 * "IL"."Feature_6" + 0.0349362052772 * "IL"."Feature_7" + -0.255364797071 * "IL"."Feature_8" + 0.248412537625 * "IL"."Feature_9" + -0.352859064683 * "IL"."Feature_10" + -0.0797165481405 * "IL"."Feature_11" + -0.0297946441382 * "IL"."Feature_12" + -0.443938274847 * "IL"."Feature_13" + 0.0726163193904 * "IL"."Feature_14" + 0.141929672071 * "IL"."Feature_15" + 0.357513669485 * "IL"."Feature_16" + -0.0205885804596 * "IL"."Feature_17" + 0.0352133040922 * "IL"."Feature_18" + -0.281267777002 * "IL"."Feature_19" + 0.108992116746 AS "NEUR_1_1", 0.0448908334099 * "IL"."Feature_0" + 0.0671600958426 * "IL"."Feature_1" + 0.479287629471 * "IL"."Feature_2" + 0.272111688874 * "IL"."Feature_3" + 0.142244120869 * "IL"."Feature_4" + 0.210267617751 * "IL"."Feature_5" + -0.0473795801575 * "IL"."Feature_6" + -0.0220911346973 * "IL"."Feature_7" + -0.0705340773785 * "IL"."Feature_8" + -0.135406377795 * "IL"."Feature_9" + -0.28157025502 * "IL"."Feature_10" + 0.602941864445 * "IL"."Feature_11" + -0.463576915417 * "IL"."Feature_12" + -0.0683652624248 * "IL"."Feature_13" + 0.00437731931108 * "IL"."Feature_14" + -0.115274773447 * "IL"."Feature_15" + -0.0707153372378 * "IL"."Feature_16" + 0.334923920013 * "IL"."Feature_17" + -0.0374109648391 * "IL"."Feature_18" + 0.0950234698285 * "IL"."Feature_19" + 0.137779090641 AS "NEUR_1_2", 0.135082794773 * "IL"."Feature_0" + 0.137432780352 * "IL"."Feature_1" + 0.275929068306 * "IL"."Feature_2" + -0.27831839313 * "IL"."Feature_3" + -0.355520034375 * "IL"."Feature_4" + 0.0223026665839 * "IL"."Feature_5" + 0.129402255219 * "IL"."Feature_6" + -0.04253615842 * "IL"."Feature_7" + 0.41761777219 * "IL"."Feature_8" + 0.165377937678 * "IL"."Feature_9" + -0.323211629267 * "IL"."Feature_10" + -0.0473638202752 * "IL"."Feature_11" + 0.417070786295 * "IL"."Feature_12" + 0.185179331997 * "IL"."Feature_13" + 0.160650168749 * "IL"."Feature_14" + 0.263874061406 * "IL"."Feature_15" + 0.0350089253586 * "IL"."Feature_16" + 0.0296264498041 * "IL"."Feature_17" + -0.252405890786 * "IL"."Feature_18" + -0.516399391946 * "IL"."Feature_19" + 0.113443253892 AS "NEUR_1_3", -0.126341610983 * "IL"."Feature_0" + 0.290244314665 * "IL"."Feature_1" + 0.393625631794 * "IL"."Feature_2" + 0.428362401702 * "IL"."Feature_3" + -0.109734114974 * "IL"."Feature_4" + -0.182830499904 * "IL"."Feature_5" + -0.143787889051 * "IL"."Feature_6" + -0.0638009067101 * "IL"."Feature_7" + -0.191444457111 * "IL"."Feature_8" + -0.715794325952 * "IL"."Feature_9" + 0.00899279839663 * "IL"."Feature_10" + 0.0224010014684 * "IL"."Feature_11" + -0.42515928592 * "IL"."Feature_12" + -0.0924033098969 * "IL"."Feature_13" + -0.220754951798 * "IL"."Feature_14" + 0.0146567072681 * "IL"."Feature_15" + 0.0931463435046 * "IL"."Feature_16" + -0.187460173547 * "IL"."Feature_17" + 0.203230746116 * "IL"."Feature_18" + 0.332173402549 * "IL"."Feature_19" + 0.47790040968 AS "NEUR_1_4", -0.118186863074 * "IL"."Feature_0" + 0.087777953737 * "IL"."Feature_1" + 0.266173037741 * "IL"."Feature_2" + 0.172466209102 * "IL"."Feature_3" + 0.065886266327 * "IL"."Feature_4" + 0.128014877869 * "IL"."Feature_5" + 0.680332008578 * "IL"."Feature_6" + -0.146459463675 * "IL"."Feature_7" + 0.143695960409 * "IL"."Feature_8" + -0.316963621351 * "IL"."Feature_9" + 0.313746836478 * "IL"."Feature_10" + -0.191580355587 * "IL"."Feature_11" + 0.162995278592 * "IL"."Feature_12" + -0.199455023954 * "IL"."Feature_13" + 0.193879037621 * "IL"."Feature_14" + -0.0699394066427 * "IL"."Feature_15" + -0.179562095202 * "IL"."Feature_16" + 0.405579650234 * "IL"."Feature_17" + 0.0626628580056 * "IL"."Feature_18" + 0.18116495949 * "IL"."Feature_19" + 0.557468323813 AS "NEUR_1_5", 0.251323235295 * "IL"."Feature_0" + 0.278439582803 * "IL"."Feature_1" + 0.37394480556 * "IL"."Feature_2" + -0.0269385660191 * "IL"."Feature_3" + -0.0479652887841 * "IL"."Feature_4" + 0.372381359553 * "IL"."Feature_5" + -0.31889478213 * "IL"."Feature_6" + -0.23606472766 * "IL"."Feature_7" + -0.600016211706 * "IL"."Feature_8" + -0.227026464466 * "IL"."Feature_9" + -0.0752817103329 * "IL"."Feature_10" + 0.346012020601 * "IL"."Feature_11" + -0.349008494712 * "IL"."Feature_12" + 0.248829880004 * "IL"."Feature_13" + 0.270414668626 * "IL"."Feature_14" + 0.22079032101 * "IL"."Feature_15" + -0.345965500514 * "IL"."Feature_16" + -0.0213463320966 * "IL"."Feature_17" + 0.458281140113 * "IL"."Feature_18" + -0.148048623384 * "IL"."Feature_19" + 0.41746113584 AS "NEUR_1_6", -0.155427567835 * "IL"."Feature_0" + -0.341378090182 * "IL"."Feature_1" + -0.0277338467161 * "IL"."Feature_2" + -0.337533241147 * "IL"."Feature_3" + 0.275253716677 * "IL"."Feature_4" + -0.252141437298 * "IL"."Feature_5" + -0.286076528003 * "IL"."Feature_6" + 0.285672058708 * "IL"."Feature_7" + 0.343701271221 * "IL"."Feature_8" + -0.241148496923 * "IL"."Feature_9" + -0.0594044820266 * "IL"."Feature_10" + -0.298196105448 * "IL"."Feature_11" + 0.0863052751707 * "IL"."Feature_12" + -0.0652762675698 * "IL"."Feature_13" + 0.402869176733 * "IL"."Feature_14" + -0.297205419508 * "IL"."Feature_15" + 0.170462285456 * "IL"."Feature_16" + 0.12647298573 * "IL"."Feature_17" + -0.24295051768 * "IL"."Feature_18" + -0.0664613555852 * "IL"."Feature_19" + -0.460335995777 AS "NEUR_1_7", 0.336303423547 * "IL"."Feature_0" + -0.495755173929 * "IL"."Feature_1" + 0.161484469339 * "IL"."Feature_2" + 0.127260950565 * "IL"."Feature_3" + 0.390566072859 * "IL"."Feature_4" + -0.216199471982 * "IL"."Feature_5" + -0.497916299189 * "IL"."Feature_6" + -0.141134205254 * "IL"."Feature_7" + 0.00412153036985 * "IL"."Feature_8" + -0.510537573655 * "IL"."Feature_9" + -0.531520145881 * "IL"."Feature_10" + -0.305005894807 * "IL"."Feature_11" + 0.293929725274 * "IL"."Feature_12" + 0.263851311858 * "IL"."Feature_13" + 0.379416765382 * "IL"."Feature_14" + -0.144534278651 * "IL"."Feature_15" + 0.122170994388 * "IL"."Feature_16" + 0.475372317914 * "IL"."Feature_17" + 0.206478395309 * "IL"."Feature_18" + -0.211270126868 * "IL"."Feature_19" + 0.0278265484857 AS "NEUR_1_8" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3", CASE WHEN ("HL_BA_1"."NEUR_1_4" >= 0.0) THEN "HL_BA_1"."NEUR_1_4" ELSE 0.0 END AS "NEUR_1_4", CASE WHEN ("HL_BA_1"."NEUR_1_5" >= 0.0) THEN "HL_BA_1"."NEUR_1_5" ELSE 0.0 END AS "NEUR_1_5", CASE WHEN ("HL_BA_1"."NEUR_1_6" >= 0.0) THEN "HL_BA_1"."NEUR_1_6" ELSE 0.0 END AS "NEUR_1_6", CASE WHEN ("HL_BA_1"."NEUR_1_7" >= 0.0) THEN "HL_BA_1"."NEUR_1_7" ELSE 0.0 END AS "NEUR_1_7", CASE WHEN ("HL_BA_1"."NEUR_1_8" >= 0.0) THEN "HL_BA_1"."NEUR_1_8" ELSE 0.0 END AS "NEUR_1_8" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.356723134895 * "HL_1_relu"."NEUR_1_1" + -0.160651089857 * "HL_1_relu"."NEUR_1_2" + -0.250110850275 * "HL_1_relu"."NEUR_1_3" + -0.706326517623 * "HL_1_relu"."NEUR_1_4" + 0.0117516140131 * "HL_1_relu"."NEUR_1_5" + 0.600415952519 * "HL_1_relu"."NEUR_1_6" + 0.52836226257 * "HL_1_relu"."NEUR_1_7" + 0.460490210737 * "HL_1_relu"."NEUR_1_8" + 0.332444627879 AS "NEUR_2_1", -0.440099310523 * "HL_1_relu"."NEUR_1_1" + 0.329739319852 * "HL_1_relu"."NEUR_1_2" + 0.406200160658 * "HL_1_relu"."NEUR_1_3" + -0.468449156283 * "HL_1_relu"."NEUR_1_4" + -0.227082403667 * "HL_1_relu"."NEUR_1_5" + 0.210811453329 * "HL_1_relu"."NEUR_1_6" + -0.186184275593 * "HL_1_relu"."NEUR_1_7" + 0.463036932986 * "HL_1_relu"."NEUR_1_8" + 0.38197528529 AS "NEUR_2_2", 0.0677132818491 * "HL_1_relu"."NEUR_1_1" + 0.0560364108478 * "HL_1_relu"."NEUR_1_2" + 0.176001096664 * "HL_1_relu"."NEUR_1_3" + 0.420189432986 * "HL_1_relu"."NEUR_1_4" + 0.0809482889217 * "HL_1_relu"."NEUR_1_5" + -0.218290759521 * "HL_1_relu"."NEUR_1_6" + -0.0916525375945 * "HL_1_relu"."NEUR_1_7" + 0.36540904084 * "HL_1_relu"."NEUR_1_8" + -0.264039111531 AS "NEUR_2_3", -0.561327013374 * "HL_1_relu"."NEUR_1_1" + -0.301263340393 * "HL_1_relu"."NEUR_1_2" + -0.0733144855151 * "HL_1_relu"."NEUR_1_3" + -0.125311618126 * "HL_1_relu"."NEUR_1_4" + 0.255140679142 * "HL_1_relu"."NEUR_1_5" + -0.218984806286 * "HL_1_relu"."NEUR_1_6" + -0.395454113213 * "HL_1_relu"."NEUR_1_7" + -0.592553587425 * "HL_1_relu"."NEUR_1_8" + -0.00160302597746 AS "NEUR_2_4", -0.256096487293 * "HL_1_relu"."NEUR_1_1" + 0.728859589308 * "HL_1_relu"."NEUR_1_2" + -0.135622230325 * "HL_1_relu"."NEUR_1_3" + 0.204886924146 * "HL_1_relu"."NEUR_1_4" + 0.280839614986 * "HL_1_relu"."NEUR_1_5" + 0.177955161754 * "HL_1_relu"."NEUR_1_6" + 0.116144339416 * "HL_1_relu"."NEUR_1_7" + 0.0313952816885 * "HL_1_relu"."NEUR_1_8" + -0.652858374761 AS "NEUR_2_5", -0.596196326739 * "HL_1_relu"."NEUR_1_1" + -0.0796208044089 * "HL_1_relu"."NEUR_1_2" + -0.0679900469016 * "HL_1_relu"."NEUR_1_3" + 0.28662224834 * "HL_1_relu"."NEUR_1_4" + 0.658216027142 * "HL_1_relu"."NEUR_1_5" + -0.689831275668 * "HL_1_relu"."NEUR_1_6" + 0.0382481829844 * "HL_1_relu"."NEUR_1_7" + 0.233109800064 * "HL_1_relu"."NEUR_1_8" + 0.19809746343 AS "NEUR_2_6", 0.412962000298 * "HL_1_relu"."NEUR_1_1" + 0.217580692686 * "HL_1_relu"."NEUR_1_2" + -0.409955795255 * "HL_1_relu"."NEUR_1_3" + 0.686105968082 * "HL_1_relu"."NEUR_1_4" + -0.27770160029 * "HL_1_relu"."NEUR_1_5" + -0.183685064167 * "HL_1_relu"."NEUR_1_6" + 0.0937304101923 * "HL_1_relu"."NEUR_1_7" + 0.666573836995 * "HL_1_relu"."NEUR_1_8" + 0.517119022625 AS "NEUR_2_7", -0.0917706581831 * "HL_1_relu"."NEUR_1_1" + 0.34589520279 * "HL_1_relu"."NEUR_1_2" + 0.119960330788 * "HL_1_relu"."NEUR_1_3" + -0.42992396695 * "HL_1_relu"."NEUR_1_4" + 0.393174135545 * "HL_1_relu"."NEUR_1_5" + 0.100649872423 * "HL_1_relu"."NEUR_1_6" + -0.485636932388 * "HL_1_relu"."NEUR_1_7" + -0.3949970007 * "HL_1_relu"."NEUR_1_8" + 0.461546097759 AS "NEUR_2_8", 0.0472109890287 * "HL_1_relu"."NEUR_1_1" + 0.367363142885 * "HL_1_relu"."NEUR_1_2" + 0.0317073318701 * "HL_1_relu"."NEUR_1_3" + 0.298581264929 * "HL_1_relu"."NEUR_1_4" + -0.118633533308 * "HL_1_relu"."NEUR_1_5" + -0.0899229897203 * "HL_1_relu"."NEUR_1_6" + -0.139864896155 * "HL_1_relu"."NEUR_1_7" + -0.000959757488579 * "HL_1_relu"."NEUR_1_8" + -0.211922171391 AS "NEUR_2_9", 0.439675827249 * "HL_1_relu"."NEUR_1_1" + -0.299647194093 * "HL_1_relu"."NEUR_1_2" + 0.134168092476 * "HL_1_relu"."NEUR_1_3" + -0.0528090741342 * "HL_1_relu"."NEUR_1_4" + 0.407681361615 * "HL_1_relu"."NEUR_1_5" + -0.157080782146 * "HL_1_relu"."NEUR_1_6" + -0.0733685227669 * "HL_1_relu"."NEUR_1_7" + -0.403430091834 * "HL_1_relu"."NEUR_1_8" + 0.418789974336 AS "NEUR_2_10", 0.273505141368 * "HL_1_relu"."NEUR_1_1" + -0.359076469484 * "HL_1_relu"."NEUR_1_2" + -0.0944983932692 * "HL_1_relu"."NEUR_1_3" + -0.590081594415 * "HL_1_relu"."NEUR_1_4" + 0.480043933967 * "HL_1_relu"."NEUR_1_5" + -0.487928410449 * "HL_1_relu"."NEUR_1_6" + 0.12525753145 * "HL_1_relu"."NEUR_1_7" + -0.390628837226 * "HL_1_relu"."NEUR_1_8" + -0.107200514055 AS "NEUR_2_11", -0.433397744954 * "HL_1_relu"."NEUR_1_1" + -0.114842039201 * "HL_1_relu"."NEUR_1_2" + -0.225023192836 * "HL_1_relu"."NEUR_1_3" + 0.0977723945359 * "HL_1_relu"."NEUR_1_4" + -0.476089768566 * "HL_1_relu"."NEUR_1_5" + 0.32947362611 * "HL_1_relu"."NEUR_1_6" + 0.601809844804 * "HL_1_relu"."NEUR_1_7" + 0.556651993604 * "HL_1_relu"."NEUR_1_8" + 0.707455033877 AS "NEUR_2_12" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5", CASE WHEN ("HL_BA_2"."NEUR_2_6" >= 0.0) THEN "HL_BA_2"."NEUR_2_6" ELSE 0.0 END AS "NEUR_2_6", CASE WHEN ("HL_BA_2"."NEUR_2_7" >= 0.0) THEN "HL_BA_2"."NEUR_2_7" ELSE 0.0 END AS "NEUR_2_7", CASE WHEN ("HL_BA_2"."NEUR_2_8" >= 0.0) THEN "HL_BA_2"."NEUR_2_8" ELSE 0.0 END AS "NEUR_2_8", CASE WHEN ("HL_BA_2"."NEUR_2_9" >= 0.0) THEN "HL_BA_2"."NEUR_2_9" ELSE 0.0 END AS "NEUR_2_9", CASE WHEN ("HL_BA_2"."NEUR_2_10" >= 0.0) THEN "HL_BA_2"."NEUR_2_10" ELSE 0.0 END AS "NEUR_2_10", CASE WHEN ("HL_BA_2"."NEUR_2_11" >= 0.0) THEN "HL_BA_2"."NEUR_2_11" ELSE 0.0 END AS "NEUR_2_11", CASE WHEN ("HL_BA_2"."NEUR_2_12" >= 0.0) THEN "HL_BA_2"."NEUR_2_12" ELSE 0.0 END AS "NEUR_2_12" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.638538879496 * "HL_2_relu"."NEUR_2_1" + -0.225594109875 * "HL_2_relu"."NEUR_2_2" + -0.0908836645202 * "HL_2_relu"."NEUR_2_3" + -0.176444330088 * "HL_2_relu"."NEUR_2_4" + 0.629037017974 * "HL_2_relu"."NEUR_2_5" + -0.697754555094 * "HL_2_relu"."NEUR_2_6" + 0.562601755235 * "HL_2_relu"."NEUR_2_7" + -0.188245630527 * "HL_2_relu"."NEUR_2_8" + 0.34357425002 * "HL_2_relu"."NEUR_2_9" + -0.464432425011 * "HL_2_relu"."NEUR_2_10" + -0.387307934431 * "HL_2_relu"."NEUR_2_11" + -0.523540030122 * "HL_2_relu"."NEUR_2_12" + -0.310555479385 AS "NEUR_3_1", 0.546993561029 * "HL_2_relu"."NEUR_2_1" + 0.614327753167 * "HL_2_relu"."NEUR_2_2" + -0.553315228348 * "HL_2_relu"."NEUR_2_3" + 0.0613271854016 * "HL_2_relu"."NEUR_2_4" + -0.573952816368 * "HL_2_relu"."NEUR_2_5" + 0.33851339561 * "HL_2_relu"."NEUR_2_6" + 0.087173908189 * "HL_2_relu"."NEUR_2_7" + -0.318345483616 * "HL_2_relu"."NEUR_2_8" + -0.796374878155 * "HL_2_relu"."NEUR_2_9" + -0.671640711579 * "HL_2_relu"."NEUR_2_10" + -0.221057169098 * "HL_2_relu"."NEUR_2_11" + -0.228434268929 * "HL_2_relu"."NEUR_2_12" + 0.184085683329 AS "NEUR_3_2", 0.00237723083733 * "HL_2_relu"."NEUR_2_1" + 0.0192932255523 * "HL_2_relu"."NEUR_2_2" + 0.663116174116 * "HL_2_relu"."NEUR_2_3" + -0.336515920684 * "HL_2_relu"."NEUR_2_4" + -0.00341738217677 * "HL_2_relu"."NEUR_2_5" + 0.408714472624 * "HL_2_relu"."NEUR_2_6" + -0.111030659926 * "HL_2_relu"."NEUR_2_7" + -0.654409524857 * "HL_2_relu"."NEUR_2_8" + 0.374471422995 * "HL_2_relu"."NEUR_2_9" + 0.101244923482 * "HL_2_relu"."NEUR_2_10" + 0.153157992853 * "HL_2_relu"."NEUR_2_11" + -0.820224214098 * "HL_2_relu"."NEUR_2_12" + 0.0968284682088 AS "NEUR_3_3", 0.411981635475 * "HL_2_relu"."NEUR_2_1" + -0.46232066555 * "HL_2_relu"."NEUR_2_2" + -0.188561905041 * "HL_2_relu"."NEUR_2_3" + -0.280693722279 * "HL_2_relu"."NEUR_2_4" + -0.610618404792 * "HL_2_relu"."NEUR_2_5" + 0.730074243755 * "HL_2_relu"."NEUR_2_6" + -0.676006101238 * "HL_2_relu"."NEUR_2_7" + -0.364541007043 * "HL_2_relu"."NEUR_2_8" + -0.570358044139 * "HL_2_relu"."NEUR_2_9" + -0.148662736388 * "HL_2_relu"."NEUR_2_10" + 0.568976261119 * "HL_2_relu"."NEUR_2_11" + -0.376511813991 * "HL_2_relu"."NEUR_2_12" + 0.405781758611 AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "Score_0", "OL_softmax"."NEUR_3_2" AS "Score_1", "OL_softmax"."NEUR_3_3" AS "Score_2", "OL_softmax"."NEUR_3_4" AS "Score_3", CAST(NULL AS FLOAT(53)) AS "Proba_0", CAST(NULL AS FLOAT(53)) AS "Proba_1", CAST(NULL AS FLOAT(53)) AS "Proba_2", CAST(NULL AS FLOAT(53)) AS "Proba_3", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "LogProba_2", CAST(NULL AS FLOAT(53)) AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "OL_softmax"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1", exp(CASE WHEN (score_max."Score_2" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_2" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_2", exp(CASE WHEN (score_max."Score_3" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_3" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte