-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.0555566570563 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.00486040212798 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.0141591393391 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0352118992211 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0674970923928 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.0426983331909 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.350995161659 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.171999751632 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.0307891156311 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.030144249466 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.123462844126 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.933872923146 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.0626668950415 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.0541259993451 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.197487461538 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.243913842585 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.142359111909 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0184992502261 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.103649786819 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.826180592543 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - -0.0555566570563 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.00486040212798 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.0141591393391 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.0352118992211 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.0674970923928 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.0426983331909 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.350995161659 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.171999751632 AS impute_9, "ADS_imp_1_OUT".impute_10 - -0.0307891156311 AS impute_10, "ADS_imp_1_OUT".impute_11 - -0.030144249466 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.123462844126 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.933872923146 AS impute_13, "ADS_imp_1_OUT".impute_14 - -0.0626668950415 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.0541259993451 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.197487461538 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.243913842585 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.142359111909 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.0184992502261 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.103649786819 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.826180592543 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * -0.386325056707 + "CenteredDataForPCA".impute_3 * 0.00910213866082 + "CenteredDataForPCA".impute_4 * 0.0494313353319 + "CenteredDataForPCA".impute_5 * 0.00963655181413 + "CenteredDataForPCA".impute_6 * 0.0353933189627 + "CenteredDataForPCA".impute_7 * 0.00223567448218 + "CenteredDataForPCA".impute_8 * 0.365456992828 + "CenteredDataForPCA".impute_9 * -0.0406493645049 + "CenteredDataForPCA".impute_10 * 0.0302171104255 + "CenteredDataForPCA".impute_11 * 0.00372983744104 + "CenteredDataForPCA".impute_12 * -0.0582940109055 + "CenteredDataForPCA".impute_13 * 0.458942020604 + "CenteredDataForPCA".impute_14 * -0.00717843188203 + "CenteredDataForPCA".impute_15 * 0.0277841222208 + "CenteredDataForPCA".impute_16 * 0.0298679592058 + "CenteredDataForPCA".impute_17 * 0.658463385418 + "CenteredDataForPCA".impute_18 * -0.184694757294 + "CenteredDataForPCA".impute_19 * 0.00190779626684 + "CenteredDataForPCA".impute_20 * 0.0273627843901 + "CenteredDataForPCA".impute_21 * -0.162965730026 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.0560420799298 + "CenteredDataForPCA".impute_3 * 0.0833046059799 + "CenteredDataForPCA".impute_4 * -0.139690940878 + "CenteredDataForPCA".impute_5 * -0.128372406588 + "CenteredDataForPCA".impute_6 * 0.156431533959 + "CenteredDataForPCA".impute_7 * -0.139654212909 + "CenteredDataForPCA".impute_8 * 0.039313740045 + "CenteredDataForPCA".impute_9 * 0.00539667505997 + "CenteredDataForPCA".impute_10 * -0.0600457769886 + "CenteredDataForPCA".impute_11 * 0.0534568052294 + "CenteredDataForPCA".impute_12 * 0.0142808111563 + "CenteredDataForPCA".impute_13 * -0.573615662397 + "CenteredDataForPCA".impute_14 * 0.0191144090751 + "CenteredDataForPCA".impute_15 * -0.0314110864025 + "CenteredDataForPCA".impute_16 * -0.0216311368695 + "CenteredDataForPCA".impute_17 * 0.392724950807 + "CenteredDataForPCA".impute_18 * 0.486186331369 + "CenteredDataForPCA".impute_19 * -0.0710584420533 + "CenteredDataForPCA".impute_20 * -0.0749669019722 + "CenteredDataForPCA".impute_21 * -0.411796652962 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.200826691014 + "CenteredDataForPCA".impute_3 * -0.0246069048906 + "CenteredDataForPCA".impute_4 * -0.124031282322 + "CenteredDataForPCA".impute_5 * 0.230838060604 + "CenteredDataForPCA".impute_6 * 0.0952345668265 + "CenteredDataForPCA".impute_7 * 0.0222817993973 + "CenteredDataForPCA".impute_8 * 0.097524251885 + "CenteredDataForPCA".impute_9 * -0.0147391671079 + "CenteredDataForPCA".impute_10 * 0.0110649477634 + "CenteredDataForPCA".impute_11 * 0.175759211448 + "CenteredDataForPCA".impute_12 * -0.012408684674 + "CenteredDataForPCA".impute_13 * 0.20857594908 + "CenteredDataForPCA".impute_14 * -0.213321288918 + "CenteredDataForPCA".impute_15 * 0.105488674263 + "CenteredDataForPCA".impute_16 * 0.0437626890835 + "CenteredDataForPCA".impute_17 * -0.00779828417926 + "CenteredDataForPCA".impute_18 * 0.663591258075 + "CenteredDataForPCA".impute_19 * -0.0877228402867 + "CenteredDataForPCA".impute_20 * -0.0326823051249 + "CenteredDataForPCA".impute_21 * 0.537308668459 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.535787210572 + "CenteredDataForPCA".impute_3 * 0.190534763252 + "CenteredDataForPCA".impute_4 * 0.140953543587 + "CenteredDataForPCA".impute_5 * 0.106920988464 + "CenteredDataForPCA".impute_6 * -0.0643043063245 + "CenteredDataForPCA".impute_7 * -0.159810064926 + "CenteredDataForPCA".impute_8 * 0.512144836323 + "CenteredDataForPCA".impute_9 * 0.139191090087 + "CenteredDataForPCA".impute_10 * 0.100871822334 + "CenteredDataForPCA".impute_11 * 0.0684372417012 + "CenteredDataForPCA".impute_12 * -0.318814104382 + "CenteredDataForPCA".impute_13 * 0.00344464497222 + "CenteredDataForPCA".impute_14 * 0.0673943554345 + "CenteredDataForPCA".impute_15 * -0.0919423657318 + "CenteredDataForPCA".impute_16 * -0.0863913980865 + "CenteredDataForPCA".impute_17 * 0.0539674458707 + "CenteredDataForPCA".impute_18 * 0.0655861913644 + "CenteredDataForPCA".impute_19 * 0.294020193031 + "CenteredDataForPCA".impute_20 * -0.307980957204 + "CenteredDataForPCA".impute_21 * 0.0922043805428 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.20317237487 + "CenteredDataForPCA".impute_3 * 0.161529766496 + "CenteredDataForPCA".impute_4 * 0.303416679974 + "CenteredDataForPCA".impute_5 * 0.426629601926 + "CenteredDataForPCA".impute_6 * 0.247474347463 + "CenteredDataForPCA".impute_7 * 0.150553021762 + "CenteredDataForPCA".impute_8 * -0.201627652591 + "CenteredDataForPCA".impute_9 * 0.405824051843 + "CenteredDataForPCA".impute_10 * -0.119254713794 + "CenteredDataForPCA".impute_11 * -0.14707014979 + "CenteredDataForPCA".impute_12 * 0.0268073336003 + "CenteredDataForPCA".impute_13 * -0.0276986955634 + "CenteredDataForPCA".impute_14 * -0.0871125105164 + "CenteredDataForPCA".impute_15 * -0.391195544532 + "CenteredDataForPCA".impute_16 * 0.180022118295 + "CenteredDataForPCA".impute_17 * -0.00597658513298 + "CenteredDataForPCA".impute_18 * -0.0393358956722 + "CenteredDataForPCA".impute_19 * -0.0311985370286 + "CenteredDataForPCA".impute_20 * -0.361942375224 + "CenteredDataForPCA".impute_21 * -0.0732915286356 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.103073347672 + "CenteredDataForPCA".impute_3 * -0.254220716488 + "CenteredDataForPCA".impute_4 * -0.155240038122 + "CenteredDataForPCA".impute_5 * 0.125291198743 + "CenteredDataForPCA".impute_6 * 0.222498036795 + "CenteredDataForPCA".impute_7 * 0.371924353249 + "CenteredDataForPCA".impute_8 * 0.130312590848 + "CenteredDataForPCA".impute_9 * 0.268539365412 + "CenteredDataForPCA".impute_10 * 0.206977780042 + "CenteredDataForPCA".impute_11 * -0.518863602318 + "CenteredDataForPCA".impute_12 * 0.0763587261793 + "CenteredDataForPCA".impute_13 * -0.0273830108599 + "CenteredDataForPCA".impute_14 * 0.38079948888 + "CenteredDataForPCA".impute_15 * 0.349918635955 + "CenteredDataForPCA".impute_16 * -0.102666819451 + "CenteredDataForPCA".impute_17 * 0.0490353378533 + "CenteredDataForPCA".impute_18 * 0.0919384062978 + "CenteredDataForPCA".impute_19 * -0.0113721780317 + "CenteredDataForPCA".impute_20 * -0.00281075971859 + "CenteredDataForPCA".impute_21 * 0.019915615059 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.148031873765 + "CenteredDataForPCA".impute_3 * -0.116374424014 + "CenteredDataForPCA".impute_4 * -0.199157705522 + "CenteredDataForPCA".impute_5 * 0.303158390805 + "CenteredDataForPCA".impute_6 * 0.492944689023 + "CenteredDataForPCA".impute_7 * -0.491972615006 + "CenteredDataForPCA".impute_8 * 0.0532025110103 + "CenteredDataForPCA".impute_9 * 0.0928369969775 + "CenteredDataForPCA".impute_10 * 0.00650347721098 + "CenteredDataForPCA".impute_11 * 0.0682664217175 + "CenteredDataForPCA".impute_12 * -0.0780561750492 + "CenteredDataForPCA".impute_13 * 0.0432785757551 + "CenteredDataForPCA".impute_14 * -0.1116082095 + "CenteredDataForPCA".impute_15 * 0.0153787883372 + "CenteredDataForPCA".impute_16 * -0.258110948206 + "CenteredDataForPCA".impute_17 * -0.0578367231062 + "CenteredDataForPCA".impute_18 * -0.226236099535 + "CenteredDataForPCA".impute_19 * -0.397404447771 + "CenteredDataForPCA".impute_20 * 0.173689747141 + "CenteredDataForPCA".impute_21 * -0.0434186105968 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.248558304787 + "CenteredDataForPCA".impute_3 * -0.302703135744 + "CenteredDataForPCA".impute_4 * 0.0693050219332 + "CenteredDataForPCA".impute_5 * 0.114755319267 + "CenteredDataForPCA".impute_6 * -0.227358249388 + "CenteredDataForPCA".impute_7 * 0.369704662497 + "CenteredDataForPCA".impute_8 * 0.225364111484 + "CenteredDataForPCA".impute_9 * 0.179886597589 + "CenteredDataForPCA".impute_10 * 0.0383170754412 + "CenteredDataForPCA".impute_11 * 0.209179134995 + "CenteredDataForPCA".impute_12 * -0.0645880759002 + "CenteredDataForPCA".impute_13 * -0.0995610954118 + "CenteredDataForPCA".impute_14 * -0.0972509794498 + "CenteredDataForPCA".impute_15 * -0.337113368306 + "CenteredDataForPCA".impute_16 * 0.215507987136 + "CenteredDataForPCA".impute_17 * 0.0817810138349 + "CenteredDataForPCA".impute_18 * 0.0392086233864 + "CenteredDataForPCA".impute_19 * -0.358774863657 + "CenteredDataForPCA".impute_20 * 0.432239490988 + "CenteredDataForPCA".impute_21 * -0.066822826867 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.194140579542 + "CenteredDataForPCA".impute_3 * -0.112526841675 + "CenteredDataForPCA".impute_4 * 0.0247387105661 + "CenteredDataForPCA".impute_5 * -0.456858855169 + "CenteredDataForPCA".impute_6 * 0.140322282231 + "CenteredDataForPCA".impute_7 * -0.114892152854 + "CenteredDataForPCA".impute_8 * -0.154064548949 + "CenteredDataForPCA".impute_9 * 0.555479615396 + "CenteredDataForPCA".impute_10 * 0.116350928256 + "CenteredDataForPCA".impute_11 * 0.00458869199589 + "CenteredDataForPCA".impute_12 * -0.453087054491 + "CenteredDataForPCA".impute_13 * 0.0488599424693 + "CenteredDataForPCA".impute_14 * -0.0769085596738 + "CenteredDataForPCA".impute_15 * -0.0805502816891 + "CenteredDataForPCA".impute_16 * -0.0448403743021 + "CenteredDataForPCA".impute_17 * -0.043941099576 + "CenteredDataForPCA".impute_18 * 0.0671074012529 + "CenteredDataForPCA".impute_19 * 0.24372738004 + "CenteredDataForPCA".impute_20 * 0.260778217491 + "CenteredDataForPCA".impute_21 * 0.0751055972076 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.158838936539 + "CenteredDataForPCA".impute_3 * 0.00920722305041 + "CenteredDataForPCA".impute_4 * -0.338876521449 + "CenteredDataForPCA".impute_5 * -0.334454893705 + "CenteredDataForPCA".impute_6 * 0.16795757143 + "CenteredDataForPCA".impute_7 * 0.279521366923 + "CenteredDataForPCA".impute_8 * 0.176213923537 + "CenteredDataForPCA".impute_9 * -0.0167438943283 + "CenteredDataForPCA".impute_10 * -0.393897835221 + "CenteredDataForPCA".impute_11 * -0.261107460923 + "CenteredDataForPCA".impute_12 * 0.133623191043 + "CenteredDataForPCA".impute_13 * 0.0902643381254 + "CenteredDataForPCA".impute_14 * -0.459031354675 + "CenteredDataForPCA".impute_15 * -0.263187776357 + "CenteredDataForPCA".impute_16 * -0.233016637573 + "CenteredDataForPCA".impute_17 * 0.00582303714211 + "CenteredDataForPCA".impute_18 * -0.0540679476497 + "CenteredDataForPCA".impute_19 * 0.0175278863826 + "CenteredDataForPCA".impute_20 * -0.139697444465 + "CenteredDataForPCA".impute_21 * 0.0626481092652 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.096457689416 + "CenteredDataForPCA".impute_3 * -0.278285522775 + "CenteredDataForPCA".impute_4 * 0.0402841596377 + "CenteredDataForPCA".impute_5 * -0.22829047751 + "CenteredDataForPCA".impute_6 * 0.0633431555201 + "CenteredDataForPCA".impute_7 * -0.402266939513 + "CenteredDataForPCA".impute_8 * 0.118148178613 + "CenteredDataForPCA".impute_9 * -0.0625256357391 + "CenteredDataForPCA".impute_10 * -0.207259115134 + "CenteredDataForPCA".impute_11 * -0.333622459187 + "CenteredDataForPCA".impute_12 * 0.0461816572759 + "CenteredDataForPCA".impute_13 * 0.0682935638466 + "CenteredDataForPCA".impute_14 * 0.122618868832 + "CenteredDataForPCA".impute_15 * -0.0758430515082 + "CenteredDataForPCA".impute_16 * 0.672194200808 + "CenteredDataForPCA".impute_17 * -0.020169576022 + "CenteredDataForPCA".impute_18 * 0.0555435183268 + "CenteredDataForPCA".impute_19 * -0.121754323725 + "CenteredDataForPCA".impute_20 * -0.10319667531 + "CenteredDataForPCA".impute_21 * 0.11471280784 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.107160813402 + "CenteredDataForPCA".impute_3 * -0.429744623905 + "CenteredDataForPCA".impute_4 * 0.275894176875 + "CenteredDataForPCA".impute_5 * -0.00477032303264 + "CenteredDataForPCA".impute_6 * -0.204580257076 + "CenteredDataForPCA".impute_7 * 0.0269851071858 + "CenteredDataForPCA".impute_8 * -0.0982287028482 + "CenteredDataForPCA".impute_9 * -0.236530830055 + "CenteredDataForPCA".impute_10 * -0.140984765725 + "CenteredDataForPCA".impute_11 * -0.166598900571 + "CenteredDataForPCA".impute_12 * -0.507473568016 + "CenteredDataForPCA".impute_13 * -0.0452986957585 + "CenteredDataForPCA".impute_14 * -0.0470708614878 + "CenteredDataForPCA".impute_15 * 0.0342101427393 + "CenteredDataForPCA".impute_16 * -0.329299940801 + "CenteredDataForPCA".impute_17 * 0.00555300183816 + "CenteredDataForPCA".impute_18 * 0.0576744249989 + "CenteredDataForPCA".impute_19 * -0.295152392999 + "CenteredDataForPCA".impute_20 * -0.330925418817 + "CenteredDataForPCA".impute_21 * -0.0223000095345 AS anoova_13, "CenteredDataForPCA".impute_2 * -0.0495677299431 + "CenteredDataForPCA".impute_3 * -0.277465704176 + "CenteredDataForPCA".impute_4 * -0.31970928325 + "CenteredDataForPCA".impute_5 * 0.162172455331 + "CenteredDataForPCA".impute_6 * -0.121127362503 + "CenteredDataForPCA".impute_7 * 0.00263472689417 + "CenteredDataForPCA".impute_8 * -0.0272923593778 + "CenteredDataForPCA".impute_9 * 0.234264725367 + "CenteredDataForPCA".impute_10 * -0.611134566454 + "CenteredDataForPCA".impute_11 * 0.379271509019 + "CenteredDataForPCA".impute_12 * -0.0154687925881 + "CenteredDataForPCA".impute_13 * 0.0382826107393 + "CenteredDataForPCA".impute_14 * 0.368848936746 + "CenteredDataForPCA".impute_15 * 0.0618821531383 + "CenteredDataForPCA".impute_16 * -0.0257672138829 + "CenteredDataForPCA".impute_17 * 0.0127538022446 + "CenteredDataForPCA".impute_18 * -0.0660428622708 + "CenteredDataForPCA".impute_19 * 0.212797173896 + "CenteredDataForPCA".impute_20 * -0.108854601568 + "CenteredDataForPCA".impute_21 * -0.0224038226915 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.0284922598349 + "CenteredDataForPCA".impute_3 * 0.434138442602 + "CenteredDataForPCA".impute_4 * -0.429654107151 + "CenteredDataForPCA".impute_5 * -0.0675868938616 + "CenteredDataForPCA".impute_6 * 0.0823489575643 + "CenteredDataForPCA".impute_7 * 0.240542478734 + "CenteredDataForPCA".impute_8 * -0.069187662894 + "CenteredDataForPCA".impute_9 * -0.137069343532 + "CenteredDataForPCA".impute_10 * 0.0376182318957 + "CenteredDataForPCA".impute_11 * 0.0386659061629 + "CenteredDataForPCA".impute_12 * -0.514568607802 + "CenteredDataForPCA".impute_13 * 0.047997111287 + "CenteredDataForPCA".impute_14 * 0.253280771937 + "CenteredDataForPCA".impute_15 * -0.0473518493653 + "CenteredDataForPCA".impute_16 * 0.259091467226 + "CenteredDataForPCA".impute_17 * -0.0679922870228 + "CenteredDataForPCA".impute_18 * -0.0906554273338 + "CenteredDataForPCA".impute_19 * -0.324992240268 + "CenteredDataForPCA".impute_20 * -0.104687167081 + "CenteredDataForPCA".impute_21 * 0.0196769028899 AS anoova_15, "CenteredDataForPCA".impute_2 * 0.0521990324946 + "CenteredDataForPCA".impute_3 * -0.103870661516 + "CenteredDataForPCA".impute_4 * -0.0962700894681 + "CenteredDataForPCA".impute_5 * -0.198832808385 + "CenteredDataForPCA".impute_6 * -0.122814889743 + "CenteredDataForPCA".impute_7 * 0.0380020310007 + "CenteredDataForPCA".impute_8 * 0.00250542081771 + "CenteredDataForPCA".impute_9 * 0.347657156786 + "CenteredDataForPCA".impute_10 * 0.237820721424 + "CenteredDataForPCA".impute_11 * 0.300013859004 + "CenteredDataForPCA".impute_12 * 0.146697691952 + "CenteredDataForPCA".impute_13 * -0.00310542018168 + "CenteredDataForPCA".impute_14 * -0.315485605492 + "CenteredDataForPCA".impute_15 * 0.409333690909 + "CenteredDataForPCA".impute_16 * 0.17636293034 + "CenteredDataForPCA".impute_17 * -0.00289895283816 + "CenteredDataForPCA".impute_18 * -0.159141547771 + "CenteredDataForPCA".impute_19 * -0.264746311854 + "CenteredDataForPCA".impute_20 * -0.480601759927 + "CenteredDataForPCA".impute_21 * -0.0871505453212 AS anoova_16, "CenteredDataForPCA".impute_2 * 0.0474575212068 + "CenteredDataForPCA".impute_3 * 0.111472994786 + "CenteredDataForPCA".impute_4 * -0.0579164566662 + "CenteredDataForPCA".impute_5 * 0.335064500227 + "CenteredDataForPCA".impute_6 * -0.140971661478 + "CenteredDataForPCA".impute_7 * 0.00768083801015 + "CenteredDataForPCA".impute_8 * -0.0261383363102 + "CenteredDataForPCA".impute_9 * 0.0133732281053 + "CenteredDataForPCA".impute_10 * -0.254377754797 + "CenteredDataForPCA".impute_11 * -0.245017599086 + "CenteredDataForPCA".impute_12 * -0.297741651496 + "CenteredDataForPCA".impute_13 * -0.129203467506 + "CenteredDataForPCA".impute_14 * -0.463897622499 + "CenteredDataForPCA".impute_15 * 0.45361576335 + "CenteredDataForPCA".impute_16 * 0.256972315797 + "CenteredDataForPCA".impute_17 * 0.0258720805438 + "CenteredDataForPCA".impute_18 * -0.0583429629539 + "CenteredDataForPCA".impute_19 * 0.216000859488 + "CenteredDataForPCA".impute_20 * 0.243463410024 + "CenteredDataForPCA".impute_21 * -0.14769076183 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.0281187307781 + "CenteredDataForPCA".impute_3 * -0.442524059831 + "CenteredDataForPCA".impute_4 * -0.300941420526 + "CenteredDataForPCA".impute_5 * 0.16681248806 + "CenteredDataForPCA".impute_6 * 0.224213397895 + "CenteredDataForPCA".impute_7 * 0.0911219807752 + "CenteredDataForPCA".impute_8 * -0.0841195862725 + "CenteredDataForPCA".impute_9 * -0.312032315486 + "CenteredDataForPCA".impute_10 * 0.385744231901 + "CenteredDataForPCA".impute_11 * 0.125567832857 + "CenteredDataForPCA".impute_12 * -0.122869597124 + "CenteredDataForPCA".impute_13 * -0.0627689307557 + "CenteredDataForPCA".impute_14 * -0.159221021991 + "CenteredDataForPCA".impute_15 * -0.223412524196 + "CenteredDataForPCA".impute_16 * 0.191530149341 + "CenteredDataForPCA".impute_17 * -0.00634771330504 + "CenteredDataForPCA".impute_18 * -0.0873362020137 + "CenteredDataForPCA".impute_19 * 0.426078617253 + "CenteredDataForPCA".impute_20 * -0.162648020609 + "CenteredDataForPCA".impute_21 * -0.103721670345 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.126153542067 + "CenteredDataForPCA".impute_3 * -0.02827785414 + "CenteredDataForPCA".impute_4 * 0.44605921314 + "CenteredDataForPCA".impute_5 * -0.180854822778 + "CenteredDataForPCA".impute_6 * 0.595978006247 + "CenteredDataForPCA".impute_7 * 0.305270634007 + "CenteredDataForPCA".impute_8 * 0.0550267225798 + "CenteredDataForPCA".impute_9 * -0.200429365434 + "CenteredDataForPCA".impute_10 * -0.223874660777 + "CenteredDataForPCA".impute_11 * 0.322303845864 + "CenteredDataForPCA".impute_12 * -0.0685215486915 + "CenteredDataForPCA".impute_13 * -0.0278931878178 + "CenteredDataForPCA".impute_14 * 0.0293972007309 + "CenteredDataForPCA".impute_15 * 0.278058356337 + "CenteredDataForPCA".impute_16 * 0.122646899921 + "CenteredDataForPCA".impute_17 * -0.0392534440056 + "CenteredDataForPCA".impute_18 * -0.0328186431141 + "CenteredDataForPCA".impute_19 * 0.0470067970565 + "CenteredDataForPCA".impute_20 * 0.0500411686292 + "CenteredDataForPCA".impute_21 * -0.00105712259024 AS anoova_19, "CenteredDataForPCA".impute_2 * -0.173821938072 + "CenteredDataForPCA".impute_3 * -1.94289029309e-16 + "CenteredDataForPCA".impute_4 * 1.01481323345e-16 + "CenteredDataForPCA".impute_5 * 1.62088224787e-17 + "CenteredDataForPCA".impute_6 * 1.21430643318e-16 + "CenteredDataForPCA".impute_7 * -4.20236762055e-16 + "CenteredDataForPCA".impute_8 * 0.0922524864962 + "CenteredDataForPCA".impute_9 * -3.46944695195e-18 + "CenteredDataForPCA".impute_10 * -4.77048955894e-17 + "CenteredDataForPCA".impute_11 * 1.16443313325e-16 + "CenteredDataForPCA".impute_12 * -2.80483102022e-16 + "CenteredDataForPCA".impute_13 * -0.568150233467 + "CenteredDataForPCA".impute_14 * 6.15826833972e-17 + "CenteredDataForPCA".impute_15 * 1.43114686768e-16 + "CenteredDataForPCA".impute_16 * 3.105155022e-16 + "CenteredDataForPCA".impute_17 * 0.28816367196 + "CenteredDataForPCA".impute_18 * -0.395613156905 + "CenteredDataForPCA".impute_19 * 1.74339709336e-16 + "CenteredDataForPCA".impute_20 * 8.76035355368e-17 + "CenteredDataForPCA".impute_21 * 0.631611156518 AS anoova_20, "CenteredDataForPCA".impute_2 * -0.495723792059 + "CenteredDataForPCA".impute_3 * -2.77555756156e-16 + "CenteredDataForPCA".impute_4 * -3.08780778724e-16 + "CenteredDataForPCA".impute_5 * -1.98734258217e-16 + "CenteredDataForPCA".impute_6 * -6.93889390391e-17 + "CenteredDataForPCA".impute_7 * 4.68375338514e-17 + "CenteredDataForPCA".impute_8 * 0.615310302008 + "CenteredDataForPCA".impute_9 * 4.16333634234e-17 + "CenteredDataForPCA".impute_10 * -7.8062556419e-18 + "CenteredDataForPCA".impute_11 * -6.41847686111e-17 + "CenteredDataForPCA".impute_12 * 7.82793968535e-17 + "CenteredDataForPCA".impute_13 * -0.195660326022 + "CenteredDataForPCA".impute_14 * -4.51028103754e-17 + "CenteredDataForPCA".impute_15 * -6.93889390391e-18 + "CenteredDataForPCA".impute_16 * -8.32667268469e-17 + "CenteredDataForPCA".impute_17 * -0.551598764595 + "CenteredDataForPCA".impute_18 * -0.0421082683318 + "CenteredDataForPCA".impute_19 * 2.42861286637e-17 + "CenteredDataForPCA".impute_20 * 1.04083408559e-17 + "CenteredDataForPCA".impute_21 * -0.177013806484 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.5883585810661316) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.3114584684371948) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -1.122920036315918) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.023206278681755066) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.5883585810661316 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 0.3114584684371948 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5526315789473685 AS "Proba_0", -0.593063722003 AS "LogProba_0", 0.4473684210526316 AS "Proba_1", -0.80437281567 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.34782608695652173 AS "Proba_0", -1.05605267425 AS "LogProba_0", 0.6521739130434783 AS "Proba_1", -0.427444014827 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8666666666666667 AS "Proba_0", -0.143100843641 AS "LogProba_0", 0.13333333333333333 AS "Proba_1", -2.01490302054 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_3' AS feature, -1.122920036315918 AS threshold, 62 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8709677419354839 AS "Proba_0", -0.138150338481 AS "LogProba_0", 0.12903225806451613 AS "Proba_1", -2.04769284337 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7 AS "Proba_0", -0.356674943939 AS "LogProba_0", 0.3 AS "Proba_1", -1.20397280433 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_18' AS feature, 0.023206278681755066 AS threshold, 42 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9523809523809523 AS "Proba_0", -0.0487901641694 AS "LogProba_0", 0.047619047619047616 AS "Proba_1", -3.04452243772 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8666666666666667 AS "Proba_0", -0.143100843641 AS "LogProba_0", 0.13333333333333333 AS "Proba_1", -2.01490302054 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"OVR_Score_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0", "DT_Output"."Proba_1" AS "Proba_0", "DT_Output"."LogProba_1" AS "LogProba_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.1409130096435547) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.7337032556533813) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.3260626792907715) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.7944979071617126) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.1409130096435547 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 0.7337032556533813 AS threshold, 46 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 1.3260626792907715 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3225806451612903 AS "Proba_0", -1.13140211149 AS "LogProba_0", 0.6774193548387096 AS "Proba_1", -0.389464766762 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0625 AS "Proba_0", -2.77258872224 AS "LogProba_0", 0.9375 AS "Proba_1", -0.0645385211376 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6 AS "Proba_0", -0.510825623766 AS "LogProba_0", 0.4 AS "Proba_1", -0.916290731874 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8666666666666667 AS "Proba_0", -0.143100843641 AS "LogProba_0", 0.13333333333333333 AS "Proba_1", -2.01490302054 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_6' AS feature, -0.7944979071617126 AS threshold, 54 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9629629629629629 AS "Proba_0", -0.0377403279828 AS "LogProba_0", 0.037037037037037035 AS "Proba_1", -3.295836866 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8666666666666667 AS "Proba_0", -0.143100843641 AS "LogProba_0", 0.13333333333333333 AS "Proba_1", -2.01490302054 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"OVR_Score_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1", "DT_Output_1"."Proba_1" AS "Proba_1", "DT_Output_1"."LogProba_1" AS "LogProba_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.8187017440795898) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.7862996459007263) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.6234827041625977) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.8187017440795898 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 0.7862996459007263 AS threshold, 64 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.921875 AS "Proba_0", -0.081345639454 AS "LogProba_0", 0.078125 AS "Proba_1", -2.54944517093 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6875 AS "Proba_0", -0.374693449441 AS "LogProba_0", 0.3125 AS "Proba_1", -1.16315080981 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, 0.6234827041625977 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4444444444444444 AS "Proba_0", -0.810930216216 AS "LogProba_0", 0.5555555555555556 AS "Proba_1", -0.587786664902 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7058823529411765 AS "Proba_0", -0.348306694268 AS "LogProba_0", 0.29411764705882354 AS "Proba_1", -1.22377543162 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21052631578947367 AS "Proba_0", -1.55814461805 AS "LogProba_0", 0.7894736842105263 AS "Proba_1", -0.236388778064 AS "LogProba_1", 1 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"OVR_Score_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2", "DT_Output_2"."Proba_1" AS "Proba_2", "DT_Output_2"."LogProba_1" AS "LogProba_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.4321272373199463) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.47565996646881104) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.4990508258342743) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6644097566604614) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -1.4321272373199463 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 0.47565996646881104 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.47058823529411764 AS "Proba_0", -0.753771802376 AS "LogProba_0", 0.5294117647058824 AS "Proba_1", -0.63598876672 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8823529411764706 AS "Proba_0", -0.125163142954 AS "LogProba_0", 0.11764705882352941 AS "Proba_1", -2.1400661635 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.058823529411764705 AS "Proba_0", -2.83321334406 AS "LogProba_0", 0.9411764705882353 AS "Proba_1", -0.0606246218164 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, 0.4990508258342743 AS threshold, 66 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8939393939393939 AS "Proba_0", -0.112117298121 AS "LogProba_0", 0.10606060606060606 AS "Proba_1", -2.24374459297 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7222222222222222 AS "Proba_0", -0.325422400435 AS "LogProba_0", 0.2777777777777778 AS "Proba_1", -1.28093384546 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_4' AS feature, -0.6644097566604614 AS threshold, 48 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9583333333333334 AS "Proba_0", -0.0425596144188 AS "LogProba_0", 0.041666666666666664 AS "Proba_1", -3.17805383035 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8666666666666667 AS "Proba_0", -0.143100843641 AS "LogProba_0", 0.13333333333333333 AS "Proba_1", -2.01490302054 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"OVR_Score_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_3"."Proba_1" AS "Proba_3", "DT_Output_3"."LogProba_1" AS "LogProba_3" 
FROM "DT_Output_3"), 
"OVR_Join_CTE" AS 
(SELECT "OVR_Score_0".join_key_0 AS join_key_0, "OVR_Score_0"."Score_0" AS "Score_0", "OVR_Score_0"."Proba_0" AS "Proba_0", "OVR_Score_0"."LogProba_0" AS "LogProba_0", "OVR_Score_1".join_key_1 AS join_key_1, "OVR_Score_1"."Score_1" AS "Score_1", "OVR_Score_1"."Proba_1" AS "Proba_1", "OVR_Score_1"."LogProba_1" AS "LogProba_1", "OVR_Score_2".join_key_2 AS join_key_2, "OVR_Score_2"."Score_2" AS "Score_2", "OVR_Score_2"."Proba_2" AS "Proba_2", "OVR_Score_2"."LogProba_2" AS "LogProba_2", "OVR_Score_3".join_key_3 AS join_key_3, "OVR_Score_3"."Score_3" AS "Score_3", "OVR_Score_3"."Proba_3" AS "Proba_3", "OVR_Score_3"."LogProba_3" AS "LogProba_3" 
FROM "OVR_Score_0" LEFT OUTER JOIN "OVR_Score_1" ON "OVR_Score_0".join_key_0 = "OVR_Score_1".join_key_1 LEFT OUTER JOIN "OVR_Score_2" ON "OVR_Score_2".join_key_2 = "OVR_Score_1".join_key_1 LEFT OUTER JOIN "OVR_Score_3" ON "OVR_Score_3".join_key_3 = "OVR_Score_2".join_key_2), 
"OVR_Scores" AS 
(SELECT "OVR_Join_CTE".join_key_0 AS "KEY", "OVR_Join_CTE"."Score_0" AS "Score_0", "OVR_Join_CTE"."Proba_0" AS "Proba_0", "OVR_Join_CTE"."LogProba_0" AS "LogProba_0", "OVR_Join_CTE"."Score_1" AS "Score_1", "OVR_Join_CTE"."Proba_1" AS "Proba_1", "OVR_Join_CTE"."LogProba_1" AS "LogProba_1", "OVR_Join_CTE"."Score_2" AS "Score_2", "OVR_Join_CTE"."Proba_2" AS "Proba_2", "OVR_Join_CTE"."LogProba_2" AS "LogProba_2", "OVR_Join_CTE"."Score_3" AS "Score_3", "OVR_Join_CTE"."Proba_3" AS "Proba_3", "OVR_Join_CTE"."LogProba_3" AS "LogProba_3" 
FROM "OVR_Join_CTE"), 
orig_cte AS 
(SELECT "OVR_Scores"."KEY" AS "KEY", "OVR_Scores"."Score_0" AS "Score_0", "OVR_Scores"."Score_1" AS "Score_1", "OVR_Scores"."Score_2" AS "Score_2", "OVR_Scores"."Score_3" AS "Score_3", "OVR_Scores"."Proba_0" AS "Proba_0", "OVR_Scores"."Proba_1" AS "Proba_1", "OVR_Scores"."Proba_2" AS "Proba_2", "OVR_Scores"."Proba_3" AS "Proba_3", "OVR_Scores"."LogProba_0" AS "LogProba_0", "OVR_Scores"."LogProba_1" AS "LogProba_1", "OVR_Scores"."LogProba_2" AS "LogProba_2", "OVR_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OVR_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte