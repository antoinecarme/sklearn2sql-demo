-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT [ADS].[KEY] AS [KEY], -0.07308086457755701 * [ADS].[Feature_0] + -0.320978025722122 * [ADS].[Feature_1] + -0.5831192019546502 * [ADS].[Feature_2] + 0.4171820609396395 * [ADS].[Feature_3] + -0.3566603817721883 * [ADS].[Feature_4] + 0.01947047666267429 * [ADS].[Feature_5] + -0.17985285176424987 * [ADS].[Feature_6] + -0.07115562684333006 * [ADS].[Feature_7] + 0.6853574320652763 * [ADS].[Feature_8] + -0.3817178128101077 * [ADS].[Feature_9] + 0.24492589507384666 * [ADS].[Feature_10] + 0.6209594662791716 * [ADS].[Feature_11] + 0.39421346615802394 * [ADS].[Feature_12] + -0.03915875132841423 * [ADS].[Feature_13] + 0.10000606063986518 * [ADS].[Feature_14] + -0.598063473799283 * [ADS].[Feature_15] + 0.011903452807422013 * [ADS].[Feature_16] + 0.25061289186217095 * [ADS].[Feature_17] + 0.2032110655589048 * [ADS].[Feature_18] + 0.46967150665516644 * [ADS].[Feature_19] + -1.00811080832 AS [Score_0], -0.29216456774659705 * [ADS].[Feature_0] + 0.29122606089949615 * [ADS].[Feature_1] + 0.022647189376131284 * [ADS].[Feature_2] + -0.12988685892991222 * [ADS].[Feature_3] + 0.5657809476631451 * [ADS].[Feature_4] + 0.21383792851213368 * [ADS].[Feature_5] + -0.3734676840366512 * [ADS].[Feature_6] + 0.2820452071999589 * [ADS].[Feature_7] + -0.2018644836037103 * [ADS].[Feature_8] + 0.28379155412722434 * [ADS].[Feature_9] + -0.40287352648068175 * [ADS].[Feature_10] + 0.2336870319116647 * [ADS].[Feature_11] + -0.43821209722972776 * [ADS].[Feature_12] + -0.9485652629041853 * [ADS].[Feature_13] + -0.33136445967036166 * [ADS].[Feature_14] + 0.19205865360351743 * [ADS].[Feature_15] + -0.06548822962969272 * [ADS].[Feature_16] + 0.42077376794397736 * [ADS].[Feature_17] + 0.01246414400527156 * [ADS].[Feature_18] + 0.08670841853354512 * [ADS].[Feature_19] + -1.58311007173 AS [Score_1], 0.22014123047199097 * [ADS].[Feature_0] + -0.040349038105468624 * [ADS].[Feature_1] + -0.1550891545461537 * [ADS].[Feature_2] + -0.14754325401508045 * [ADS].[Feature_3] + -0.39225077839855604 * [ADS].[Feature_4] + 0.17271217753453383 * [ADS].[Feature_5] + 0.44409784931092494 * [ADS].[Feature_6] + 0.6028112355175829 * [ADS].[Feature_7] + 0.019874786143855405 * [ADS].[Feature_8] + -0.14004803769027252 * [ADS].[Feature_9] + 0.05966771634609658 * [ADS].[Feature_10] + -0.39171837337363585 * [ADS].[Feature_11] + 0.0824780198826479 * [ADS].[Feature_12] + -0.19893637641225131 * [ADS].[Feature_13] + -0.17693014531524096 * [ADS].[Feature_14] + 0.5018825422607751 * [ADS].[Feature_15] + 0.3391347070763304 * [ADS].[Feature_16] + -0.34380074205032035 * [ADS].[Feature_17] + -0.04837136520715851 * [ADS].[Feature_18] + -0.4585650881057265 * [ADS].[Feature_19] + -1.4153777821 AS [Score_2], 0.1621492298376319 * [ADS].[Feature_0] + 0.0922140130289217 * [ADS].[Feature_1] + 0.47393140227872194 * [ADS].[Feature_2] + -0.11294789270131131 * [ADS].[Feature_3] + -0.0015097975832004838 * [ADS].[Feature_4] + 0.15320077854307926 * [ADS].[Feature_5] + 0.41011872361994445 * [ADS].[Feature_6] + -0.5084245911431042 * [ADS].[Feature_7] + 0.08087712426139235 * [ADS].[Feature_8] + 0.025890200010467178 * [ADS].[Feature_9] + 0.41473503415207497 * [ADS].[Feature_10] + -0.3226932235625992 * [ADS].[Feature_11] + 0.23076065294045092 * [ADS].[Feature_12] + 1.1826024484242452 * [ADS].[Feature_13] + 0.5197910481219793 * [ADS].[Feature_14] + -0.3230602150045747 * [ADS].[Feature_15] + -0.09684540953069967 * [ADS].[Feature_16] + -0.5890810625390642 * [ADS].[Feature_17] + -0.6265257535536647 * [ADS].[Feature_18] + -0.3596986963786308 * [ADS].[Feature_19] + -1.25711611776 AS [Score_3] 
FROM [INPUT_DATA] AS [ADS]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], linear_model_cte.[Score_3] AS [Score_3], CAST(NULL AS FLOAT(53)) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max.[max_LogProba] = score_class_union.[LogProba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max.[max_Proba] = score_class_union.[Proba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max.[max_Score] = score_class_union.[Score] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score] 
FROM score_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte