-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", -0.08577730327609955 * "ADS"."Feature_0" + 0.08657375613875505 * "ADS"."Feature_1" + 0.13236081717674777 * "ADS"."Feature_2" + -0.10351171622047171 * "ADS"."Feature_3" + 0.09425928085180042 * "ADS"."Feature_4" + -0.032369857190060844 * "ADS"."Feature_5" + 0.026129103282485237 * "ADS"."Feature_6" + -0.20501330521211866 * "ADS"."Feature_7" + 0.0003462654885675702 * "ADS"."Feature_8" + -0.0045575157469297245 * "ADS"."Feature_9" + 0.04934170277166156 * "ADS"."Feature_10" + 0.14355663737328794 * "ADS"."Feature_11" + -0.009582295246146358 * "ADS"."Feature_12" + -0.012184523060951469 * "ADS"."Feature_13" + 0.07445533383237903 * "ADS"."Feature_14" + -0.042881953393647476 * "ADS"."Feature_15" + 0.043261846521482204 * "ADS"."Feature_16" + -0.011340770030571348 * "ADS"."Feature_17" + 0.08441431591516944 * "ADS"."Feature_18" + -0.012595413101001422 * "ADS"."Feature_19" + -0.494188530689 AS "Score_0", 0.00136953277167573 * "ADS"."Feature_0" + 0.018190282274266084 * "ADS"."Feature_1" + -0.03546522164619838 * "ADS"."Feature_2" + 0.09686067198306444 * "ADS"."Feature_3" + 0.007982264559171101 * "ADS"."Feature_4" + -0.04859759260983859 * "ADS"."Feature_5" + -0.2469419239778442 * "ADS"."Feature_6" + 0.2026525961349852 * "ADS"."Feature_7" + 0.009552005925171358 * "ADS"."Feature_8" + 0.0875332931523402 * "ADS"."Feature_9" + -0.03253405825054876 * "ADS"."Feature_10" + -0.04009591158947853 * "ADS"."Feature_11" + -0.056416986850016615 * "ADS"."Feature_12" + -0.07387529390024264 * "ADS"."Feature_13" + -0.04107298793323111 * "ADS"."Feature_14" + 0.04475576012268914 * "ADS"."Feature_15" + 0.026791297577243495 * "ADS"."Feature_16" + 0.1339477886944793 * "ADS"."Feature_17" + -0.1104040413130152 * "ADS"."Feature_18" + 0.049246956438514664 * "ADS"."Feature_19" + -0.357215309783 AS "Score_1", 0.0743508998775639 * "ADS"."Feature_0" + -0.004886713868540421 * "ADS"."Feature_1" + -0.12624230487070104 * "ADS"."Feature_2" + 0.14973701967289946 * "ADS"."Feature_3" + -0.02381565200581137 * "ADS"."Feature_4" + 0.057016781917538034 * "ADS"."Feature_5" + 0.0337751741231097 * "ADS"."Feature_6" + -0.18432553485545186 * "ADS"."Feature_7" + -0.04774146053689126 * "ADS"."Feature_8" + -0.015873285750368102 * "ADS"."Feature_9" + -0.028862194623432723 * "ADS"."Feature_10" + -0.0791713964486065 * "ADS"."Feature_11" + 0.03022337676884758 * "ADS"."Feature_12" + 0.028601587709904473 * "ADS"."Feature_13" + -0.12263802914310826 * "ADS"."Feature_14" + 0.11111017891919209 * "ADS"."Feature_15" + 0.08870393587867725 * "ADS"."Feature_16" + -0.05667464761607416 * "ADS"."Feature_17" + 0.014640721862441447 * "ADS"."Feature_18" + -0.02063437168247984 * "ADS"."Feature_19" + -0.542047043646 AS "Score_2", 0.01005687062686051 * "ADS"."Feature_0" + -0.09987732454447937 * "ADS"."Feature_1" + 0.02934670934015039 * "ADS"."Feature_2" + -0.14308597543549187 * "ADS"."Feature_3" + -0.0784258934051599 * "ADS"."Feature_4" + 0.023950667882361783 * "ADS"."Feature_5" + 0.1870376465722498 * "ADS"."Feature_6" + 0.18668624393258335 * "ADS"."Feature_7" + 0.03784318912315264 * "ADS"."Feature_8" + -0.0671024916550427 * "ADS"."Feature_9" + 0.01205455010231963 * "ADS"."Feature_10" + -0.024289329335204536 * "ADS"."Feature_11" + 0.03577590532731413 * "ADS"."Feature_12" + 0.057458229251288996 * "ADS"."Feature_13" + 0.08925568324396062 * "ADS"."Feature_14" + -0.11298398564823448 * "ADS"."Feature_15" + -0.1587570799774034 * "ADS"."Feature_16" + -0.06593237104783496 * "ADS"."Feature_17" + 0.011349003535405355 * "ADS"."Feature_18" + -0.016017171655033004 * "ADS"."Feature_19" + -0.606549115883 AS "Score_3" 
FROM "INPUT_DATA" "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte