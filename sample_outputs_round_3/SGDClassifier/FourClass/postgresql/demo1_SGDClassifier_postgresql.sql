-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", 0.730699807882909 * "ADS"."Feature_0" + -74.64774178652394 * "ADS"."Feature_1" + 3.5355648526379837 * "ADS"."Feature_2" + 28.294376958315315 * "ADS"."Feature_3" + 5.887881693566341 * "ADS"."Feature_4" + -3.1097289461582753 * "ADS"."Feature_5" + 42.46624748591088 * "ADS"."Feature_6" + 25.214716380881413 * "ADS"."Feature_7" + 33.887137083351185 * "ADS"."Feature_8" + -0.7431245868912563 * "ADS"."Feature_9" + -12.249561399397631 * "ADS"."Feature_10" + 20.2563915580273 * "ADS"."Feature_11" + -10.541340462914834 * "ADS"."Feature_12" + 40.669778846238955 * "ADS"."Feature_13" + -32.13011297027295 * "ADS"."Feature_14" + -97.69693356090556 * "ADS"."Feature_15" + -44.0740537433275 * "ADS"."Feature_16" + 27.04110228636344 * "ADS"."Feature_17" + 98.92839386460571 * "ADS"."Feature_18" + 3.506127211357581 * "ADS"."Feature_19" + -40.097336755 AS "Score_0", 7.714633912780151 * "ADS"."Feature_0" + 54.832239956473124 * "ADS"."Feature_1" + -5.250454391554846 * "ADS"."Feature_2" + 16.013386314973346 * "ADS"."Feature_3" + 2.3926240406617927 * "ADS"."Feature_4" + 11.047258781559103 * "ADS"."Feature_5" + -22.359524879717405 * "ADS"."Feature_6" + 0.8740444769641292 * "ADS"."Feature_7" + -24.312917401842597 * "ADS"."Feature_8" + -55.72824717360607 * "ADS"."Feature_9" + -23.751941307365524 * "ADS"."Feature_10" + -57.204755617640835 * "ADS"."Feature_11" + -33.546043535642774 * "ADS"."Feature_12" + -9.183316675949563 * "ADS"."Feature_13" + 46.84725112982233 * "ADS"."Feature_14" + -52.84869328659587 * "ADS"."Feature_15" + -11.210032204215496 * "ADS"."Feature_16" + 38.94641130648611 * "ADS"."Feature_17" + 29.61222791390156 * "ADS"."Feature_18" + 0.1397640603338928 * "ADS"."Feature_19" + -103.126224272 AS "Score_1", -4.093639292720607 * "ADS"."Feature_0" + -20.740742483513706 * "ADS"."Feature_1" + 18.91286663246609 * "ADS"."Feature_2" + -29.658284090070595 * "ADS"."Feature_3" + 22.22611535696725 * "ADS"."Feature_4" + 25.28416516070107 * "ADS"."Feature_5" + 37.79305928427568 * "ADS"."Feature_6" + 45.415697667521634 * "ADS"."Feature_7" + 15.1791906029934 * "ADS"."Feature_8" + 39.69453216976325 * "ADS"."Feature_9" + 6.719738453340185 * "ADS"."Feature_10" + -12.51066502130409 * "ADS"."Feature_11" + 18.420939420805958 * "ADS"."Feature_12" + -11.659591474608005 * "ADS"."Feature_13" + -3.968964744392419 * "ADS"."Feature_14" + 58.86352424519073 * "ADS"."Feature_15" + 52.5637660706518 * "ADS"."Feature_16" + 11.85022571089854 * "ADS"."Feature_17" + -81.58502679529737 * "ADS"."Feature_18" + -17.445246063163243 * "ADS"."Feature_19" + -164.503920678 AS "Score_2", -11.398890924092969 * "ADS"."Feature_0" + 85.28397351343881 * "ADS"."Feature_1" + -1.0504677666581899 * "ADS"."Feature_2" + -16.220018607727464 * "ADS"."Feature_3" + -30.47053024919028 * "ADS"."Feature_4" + -14.559624041505963 * "ADS"."Feature_5" + -25.086243901446263 * "ADS"."Feature_6" + -52.02684352801883 * "ADS"."Feature_7" + 13.66462734417858 * "ADS"."Feature_8" + -35.18685186619706 * "ADS"."Feature_9" + 33.22742542899567 * "ADS"."Feature_10" + 29.773875455901287 * "ADS"."Feature_11" + 40.67257872573438 * "ADS"."Feature_12" + -65.46481342789087 * "ADS"."Feature_13" + -4.216671206580025 * "ADS"."Feature_14" + 67.23830977253006 * "ADS"."Feature_15" + -3.140002626499392 * "ADS"."Feature_16" + -3.993512562538563 * "ADS"."Feature_17" + -8.355919442621826 * "ADS"."Feature_18" + 8.046120477611778 * "ADS"."Feature_19" + -143.199639109 AS "Score_3" 
FROM "INPUT_DATA" AS "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", CAST(NULL AS FLOAT(53)) AS "Proba_0", CAST(NULL AS FLOAT(53)) AS "Proba_1", CAST(NULL AS FLOAT(53)) AS "Proba_2", CAST(NULL AS FLOAT(53)) AS "Proba_3", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "LogProba_2", CAST(NULL AS FLOAT(53)) AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte