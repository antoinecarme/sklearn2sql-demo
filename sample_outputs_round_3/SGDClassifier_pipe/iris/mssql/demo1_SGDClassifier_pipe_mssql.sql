-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 5.84333333333 ELSE [ADS].[Feature_0] END AS impute_output_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 3.054 ELSE [ADS].[Feature_1] END AS impute_output_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 3.75866666667 ELSE [ADS].[Feature_2] END AS impute_output_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 1.19866666667 ELSE [ADS].[Feature_3] END AS impute_output_5 
FROM [INPUT_DATA] AS [ADS]), 
[CenteredDataForPCA] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], [ADS_imp_1_OUT].impute_output_2 - 5.84333333333 AS impute_output_2, [ADS_imp_1_OUT].impute_output_3 - 3.054 AS impute_output_3, [ADS_imp_1_OUT].impute_output_4 - 3.75866666667 AS impute_output_4, [ADS_imp_1_OUT].impute_output_5 - 1.19866666667 AS impute_output_5 
FROM [ADS_imp_1_OUT]), 
[ADS_ano_2_OUT] AS 
(SELECT [CenteredDataForPCA].[KEY] AS [KEY], [CenteredDataForPCA].impute_output_2 * 0.361589677381 + [CenteredDataForPCA].impute_output_3 * -0.0822688898922 + [CenteredDataForPCA].impute_output_4 * 0.856572105291 + [CenteredDataForPCA].impute_output_5 * 0.358843926248 AS anova_output_2, [CenteredDataForPCA].impute_output_2 * 0.656539883286 + [CenteredDataForPCA].impute_output_3 * 0.729712371326 + [CenteredDataForPCA].impute_output_4 * -0.175767403429 + [CenteredDataForPCA].impute_output_5 * -0.074706470135 AS anova_output_3, [CenteredDataForPCA].impute_output_2 * -0.580997279828 + [CenteredDataForPCA].impute_output_3 * 0.596418087938 + [CenteredDataForPCA].impute_output_4 * 0.072524075487 + [CenteredDataForPCA].impute_output_5 * 0.549060910727 AS anova_output_4, [CenteredDataForPCA].impute_output_2 * 0.317254547169 + [CenteredDataForPCA].impute_output_3 * -0.324094352418 + [CenteredDataForPCA].impute_output_4 * -0.47971898733 + [CenteredDataForPCA].impute_output_5 * 0.751120560381 AS anova_output_5 
FROM [CenteredDataForPCA]), 
linear_model_cte AS 
(SELECT [ADS_ano_2_OUT].[KEY] AS [KEY], -13.980925908745292 * [ADS_ano_2_OUT].anova_output_2 + 12.278319945926107 * [ADS_ano_2_OUT].anova_output_3 + -0.2147859292061172 * [ADS_ano_2_OUT].anova_output_4 + -1.0972132438890512 * [ADS_ano_2_OUT].anova_output_5 + -19.2512927224 AS [Score_0], -12.227351141301753 * [ADS_ano_2_OUT].anova_output_2 + -32.80323414768752 * [ADS_ano_2_OUT].anova_output_3 + -25.921276210677473 * [ADS_ano_2_OUT].anova_output_4 + -12.747325693734068 * [ADS_ano_2_OUT].anova_output_5 + -18.2843010352 AS [Score_1], 39.38011262122278 * [ADS_ano_2_OUT].anova_output_2 + -15.562813349144191 * [ADS_ano_2_OUT].anova_output_3 + 16.53195037465748 * [ADS_ano_2_OUT].anova_output_4 + 7.085617765233868 * [ADS_ano_2_OUT].anova_output_5 + -45.8694564033 AS [Score_2] 
FROM [ADS_ano_2_OUT]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max.[max_LogProba] = score_class_union.[LogProba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max.[max_Proba] = score_class_union.[Proba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max.[max_Score] = score_class_union.[Score] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score] 
FROM score_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte