-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `DT_node_lookup` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_8` <= 0.015935897827148438) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.0061888848431408405) THEN CASE WHEN (`ADS`.`Feature_6` <= 0.021027816459536552) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_3` <= -0.02575402334332466) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.010500133037567139) THEN CASE WHEN (`ADS`.`Feature_2` <= -0.02291204035282135) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.08486916124820709) THEN 13 ELSE 14 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, 0.015935897827148438 AS threshold, 442 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 152.89366515837105 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 0.0061888848431408405 AS threshold, 278 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 115.23381294964028 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, 0.021027816459536552 AS threshold, 225 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 103.32888888888888 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 127 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 121.62992125984252 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 98 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 79.61224489795919 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_3' AS feature, -0.02575402334332466 AS threshold, 53 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 165.77358490566039 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 125.23529411764706 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 184.91666666666666 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 0.010500133037567139 AS threshold, 164 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 216.73170731707316 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_2' AS feature, -0.02291204035282135 AS threshold, 57 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 166.80701754385964 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 132.5 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 39 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 182.64102564102564 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 0.08486916124820709 AS threshold, 107 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 243.3271028037383 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 81 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 229.14814814814815 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 287.5 AS `Estimator`) AS `Values`), 
`DT_Output` AS 
(SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup` LEFT OUTER JOIN `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id), 
`AdaBoost_Estim_0` AS 
(SELECT `DT_Output`.`KEY` AS join_key_0, `DT_Output`.`Estimator` AS `Estimator_0` 
FROM `DT_Output`), 
`DT_node_lookup_1` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_8` <= -0.003761786036193371) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.02828403189778328) THEN CASE WHEN (`ADS`.`Feature_6` <= -0.01578856259584427) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_3` <= -0.02288496494293213) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.06870198249816895) THEN CASE WHEN (`ADS`.`Feature_8` <= 0.04262029379606247) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_4` <= 0.014254498295485973) THEN 13 ELSE 14 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_1` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, -0.003761786036193371 AS threshold, 442 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 156.28733031674207 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 0.02828403189778328 AS threshold, 207 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 108.47826086956522 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, -0.01578856259584427 AS threshold, 175 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 98.48571428571428 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 125.86206896551724 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 146 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 93.04794520547945 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_3' AS feature, -0.02288496494293213 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 163.125 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 113.1875 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 213.0625 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 0.06870198249816895 AS threshold, 235 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 198.4 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_8' AS feature, 0.04262029379606247 AS threshold, 203 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 187.06896551724137 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 138 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 173.36231884057972 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 65 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 216.16923076923078 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_4' AS feature, 0.014254498295485973 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 270.28125 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 303.06666666666666 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 241.35294117647058 AS `Estimator`) AS `Values`), 
`DT_Output_1` AS 
(SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_1` LEFT OUTER JOIN `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id), 
`AdaBoost_Estim_1` AS 
(SELECT `DT_Output_1`.`KEY` AS join_key_1, `DT_Output_1`.`Estimator` AS `Estimator_1` 
FROM `DT_Output_1`), 
`DT_node_lookup_2` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.018044818192720413) THEN CASE WHEN (`ADS`.`Feature_8` <= -0.009431487880647182) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.0217294842004776) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_9` <= 0.029988106340169907) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.02359379082918167) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.029361844062805176) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_0` <= -0.0036982859019190073) THEN 13 ELSE 14 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_2` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.018044818192720413 AS threshold, 442 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 150.94343891402715 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_8' AS feature, -0.009431487880647182 AS threshold, 280 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 122.98571428571428 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 0.0217294842004776 AS threshold, 162 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 97.79629629629629 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 123 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 89.7560975609756 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 39 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 123.15384615384616 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_9' AS feature, 0.029988106340169907 AS threshold, 118 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 157.5677966101695 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 94 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 139.03191489361703 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 24 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 230.16666666666666 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_3' AS feature, 0.02359379082918167 AS threshold, 162 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 199.26543209876544 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_2' AS feature, 0.029361844062805176 AS threshold, 91 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 167.7032967032967 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 244.1 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 71 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 146.18309859154928 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_0' AS feature, -0.0036982859019190073 AS threshold, 71 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 239.71830985915494 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 198.65384615384616 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 45 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 263.44444444444446 AS `Estimator`) AS `Values`), 
`DT_Output_2` AS 
(SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_2` LEFT OUTER JOIN `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id), 
`AdaBoost_Estim_2` AS 
(SELECT `DT_Output_2`.`KEY` AS join_key_2, `DT_Output_2`.`Estimator` AS `Estimator_2` 
FROM `DT_Output_2`), 
`DT_node_lookup_3` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_8` <= -0.010411696508526802) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.04597245156764984) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.007805602625012398) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_2` <= -0.01375063881278038) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.039086706936359406) THEN 8 ELSE 9 END ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.02359379082918167) THEN 11 ELSE 12 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_3` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, -0.010411696508526802 AS threshold, 442 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 161.7285067873303 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.04597245156764984 AS threshold, 182 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 116.13736263736264 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 0.007805602625012398 AS threshold, 155 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 100.33548387096774 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 127 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 90.5748031496063 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 144.60714285714286 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 206.85185185185185 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, -0.01375063881278038 AS threshold, 260 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 193.6423076923077 AS `Estimator` UNION ALL SELECT 7 AS node_id, 'Feature_3' AS feature, 0.039086706936359406 AS threshold, 59 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 136.67796610169492 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 42 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 120.16666666666667 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 177.47058823529412 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_3' AS feature, 0.02359379082918167 AS threshold, 201 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 210.36318407960198 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 113 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 186.35398230088495 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 88 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 241.1931818181818 AS `Estimator`) AS `Values`), 
`DT_Output_3` AS 
(SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_3` LEFT OUTER JOIN `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id), 
`AdaBoost_Estim_3` AS 
(SELECT `DT_Output_3`.`KEY` AS join_key_3, `DT_Output_3`.`Estimator` AS `Estimator_3` 
FROM `DT_Output_3`), 
`DT_node_lookup_4` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.005111072678118944) THEN CASE WHEN (`ADS`.`Feature_6` <= -0.023151837289333344) THEN CASE WHEN (`ADS`.`Feature_8` <= 0.02165217697620392) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_2` <= -0.01967860572040081) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_9` <= 0.025845997035503387) THEN CASE WHEN (`ADS`.`Feature_3` <= -0.01772065833210945) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_6` <= -0.00842528697103262) THEN 13 ELSE 14 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_4` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.005111072678118944 AS threshold, 442 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 157.97737556561086 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, -0.023151837289333344 AS threshold, 242 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 123.94214876033058 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_8' AS feature, 0.02165217697620392 AS threshold, 73 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 165.34246575342465 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 53 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 146.50943396226415 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 215.25 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, -0.01967860572040081 AS threshold, 169 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 106.05917159763314 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 104 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 91.00961538461539 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 65 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 130.13846153846154 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_9' AS feature, 0.025845997035503387 AS threshold, 200 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 199.16 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_3' AS feature, -0.01772065833210945 AS threshold, 122 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 165.08196721311475 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 56 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 133.17857142857142 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 66 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 192.15151515151516 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_6' AS feature, -0.00842528697103262 AS threshold, 78 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 252.46153846153845 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 60 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 267.95 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 200.83333333333334 AS `Estimator`) AS `Values`), 
`DT_Output_4` AS 
(SELECT `DT_node_lookup_4`.`KEY` AS `KEY`, `DT_node_lookup_4`.node_id_2 AS node_id_2, `DT_node_data_4`.node_id AS node_id, `DT_node_data_4`.feature AS feature, `DT_node_data_4`.threshold AS threshold, `DT_node_data_4`.count AS count, `DT_node_data_4`.depth AS depth, `DT_node_data_4`.parent_id AS parent_id, `DT_node_data_4`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_4` LEFT OUTER JOIN `DT_node_data_4` ON `DT_node_lookup_4`.node_id_2 = `DT_node_data_4`.node_id), 
`AdaBoost_Estim_4` AS 
(SELECT `DT_Output_4`.`KEY` AS join_key_4, `DT_Output_4`.`Estimator` AS `Estimator_4` 
FROM `DT_Output_4`), 
`DT_node_lookup_5` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_8` <= -0.009431487880647182) THEN CASE WHEN (`ADS`.`Feature_8` <= -0.04327875375747681) THEN CASE WHEN (`ADS`.`Feature_0` <= -0.040023669600486755) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.0029554483480751514) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.05576823651790619) THEN CASE WHEN (`ADS`.`Feature_4` <= 0.050029270350933075) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.10049743950366974) THEN 13 ELSE 14 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_5` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, -0.009431487880647182 AS threshold, 442 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 164.68778280542986 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_8' AS feature, -0.04327875375747681 AS threshold, 168 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 113.27380952380952 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, -0.040023669600486755 AS threshold, 56 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 77.55357142857143 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 106.0 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 61.75 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, 0.0029554483480751514 AS threshold, 112 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 131.13392857142858 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 69 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 106.46376811594203 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 43 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 170.72093023255815 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 0.05576823651790619 AS threshold, 274 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 196.21167883211677 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_4' AS feature, 0.050029270350933075 AS threshold, 218 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 178.4908256880734 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 166 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 194.75903614457832 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 52 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 126.5576923076923 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 0.10049743950366974 AS threshold, 56 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 265.19642857142856 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 40 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 247.575 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 309.25 AS `Estimator`) AS `Values`), 
`DT_Output_5` AS 
(SELECT `DT_node_lookup_5`.`KEY` AS `KEY`, `DT_node_lookup_5`.node_id_2 AS node_id_2, `DT_node_data_5`.node_id AS node_id, `DT_node_data_5`.feature AS feature, `DT_node_data_5`.threshold AS threshold, `DT_node_data_5`.count AS count, `DT_node_data_5`.depth AS depth, `DT_node_data_5`.parent_id AS parent_id, `DT_node_data_5`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_5` LEFT OUTER JOIN `DT_node_data_5` ON `DT_node_lookup_5`.node_id_2 = `DT_node_data_5`.node_id), 
`AdaBoost_Estim_5` AS 
(SELECT `DT_Output_5`.`KEY` AS join_key_5, `DT_Output_5`.`Estimator` AS `Estimator_5` 
FROM `DT_Output_5`), 
`AdaBoost_Join_CTE` AS 
(SELECT `AdaBoost_Estim_0`.join_key_0 AS join_key_0, `AdaBoost_Estim_0`.`Estimator_0` AS `Estimator_0`, `AdaBoost_Estim_1`.join_key_1 AS join_key_1, `AdaBoost_Estim_1`.`Estimator_1` AS `Estimator_1`, `AdaBoost_Estim_2`.join_key_2 AS join_key_2, `AdaBoost_Estim_2`.`Estimator_2` AS `Estimator_2`, `AdaBoost_Estim_3`.join_key_3 AS join_key_3, `AdaBoost_Estim_3`.`Estimator_3` AS `Estimator_3`, `AdaBoost_Estim_4`.join_key_4 AS join_key_4, `AdaBoost_Estim_4`.`Estimator_4` AS `Estimator_4`, `AdaBoost_Estim_5`.join_key_5 AS join_key_5, `AdaBoost_Estim_5`.`Estimator_5` AS `Estimator_5` 
FROM `AdaBoost_Estim_0` LEFT OUTER JOIN `AdaBoost_Estim_1` ON `AdaBoost_Estim_0`.join_key_0 = `AdaBoost_Estim_1`.join_key_1 LEFT OUTER JOIN `AdaBoost_Estim_2` ON `AdaBoost_Estim_2`.join_key_2 = `AdaBoost_Estim_1`.join_key_1 LEFT OUTER JOIN `AdaBoost_Estim_3` ON `AdaBoost_Estim_3`.join_key_3 = `AdaBoost_Estim_2`.join_key_2 LEFT OUTER JOIN `AdaBoost_Estim_4` ON `AdaBoost_Estim_4`.join_key_4 = `AdaBoost_Estim_3`.join_key_3 LEFT OUTER JOIN `AdaBoost_Estim_5` ON `AdaBoost_Estim_5`.join_key_5 = `AdaBoost_Estim_4`.join_key_4), 
`WeightedEstimators` AS 
(SELECT `Values`.`Key` AS `Key`, `Values`.sub_estimator AS sub_estimator, `Values`.`Weight` AS `Weight`, `Values`.`Value` AS `Value` 
FROM (SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 0 AS sub_estimator, 0.203205679236 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_0` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 1 AS sub_estimator, 0.201814274442 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_1` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 2 AS sub_estimator, 0.193558206665 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_2` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 3 AS sub_estimator, 0.14566383744 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_3` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 4 AS sub_estimator, 0.163548356002 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_4` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 5 AS sub_estimator, 0.0922096462148 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_5` AS `Value` 
FROM `AdaBoost_Join_CTE`) AS `Values`), 
`Cumulative_Frequencies` AS 
(SELECT u1.`Key` AS `Key`, u1.sub_estimator AS sub_estimator, u1.`Weight` AS `Weight`, u1.`Value` AS `Value`, (SELECT sum(u2.`Weight`) AS sum_1 
FROM `WeightedEstimators` AS u2 
WHERE u1.`Key` = u2.`Key` AND u1.`Value` >= u2.`Value`) AS cum_weight 
FROM `WeightedEstimators` AS u1), 
`Quantiles` AS 
(SELECT `AdaBoost_Join_CTE`.join_key_0 AS join_key_0, `AdaBoost_Join_CTE`.`Estimator_0` AS `Estimator_0`, `AdaBoost_Join_CTE`.join_key_1 AS join_key_1, `AdaBoost_Join_CTE`.`Estimator_1` AS `Estimator_1`, `AdaBoost_Join_CTE`.join_key_2 AS join_key_2, `AdaBoost_Join_CTE`.`Estimator_2` AS `Estimator_2`, `AdaBoost_Join_CTE`.join_key_3 AS join_key_3, `AdaBoost_Join_CTE`.`Estimator_3` AS `Estimator_3`, `AdaBoost_Join_CTE`.join_key_4 AS join_key_4, `AdaBoost_Join_CTE`.`Estimator_4` AS `Estimator_4`, `AdaBoost_Join_CTE`.join_key_5 AS join_key_5, `AdaBoost_Join_CTE`.`Estimator_5` AS `Estimator_5`, (SELECT min(`Cumulative_Frequencies`.`Value`) AS min_1 
FROM `Cumulative_Frequencies` 
WHERE `AdaBoost_Join_CTE`.join_key_0 = `Cumulative_Frequencies`.`Key` AND `Cumulative_Frequencies`.cum_weight >= 0.5) AS `Median` 
FROM `AdaBoost_Join_CTE`)
 SELECT `Quantiles`.join_key_0 AS `KEY`, `Quantiles`.`Median` AS `Estimator` 
FROM `Quantiles`