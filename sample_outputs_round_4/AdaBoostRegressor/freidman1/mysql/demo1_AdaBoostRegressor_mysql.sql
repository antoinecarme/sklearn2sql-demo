-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `DT_node_lookup` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.4098060131072998) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.21298664808273315) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.646847128868103) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.3753651976585388) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.4098060131072998 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.565770075760161 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.21298664808273315 AS threshold, 49 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.472258093497201 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 8.576523023824077 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.894059395752047 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_1' AS feature, 0.646847128868103 AS threshold, 51 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.537967862640254 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, 0.3753651976585388 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.310201799152871 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.41251352598803 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.20789007231771 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.28999491693479 AS `Estimator`) AS `Values`), 
`DT_Output` AS 
(SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup` LEFT OUTER JOIN `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id), 
`AdaBoost_Estim_0` AS 
(SELECT `DT_Output`.`KEY` AS join_key_0, `DT_Output`.`Estimator` AS `Estimator_0` 
FROM `DT_Output`), 
`DT_node_lookup_1` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_1` <= 0.3146727681159973) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.2231779545545578) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.251677542924881) THEN 5 ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.6844801306724548) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_1` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, 0.3146727681159973 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.445311403945189 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.2231779545545578 AS threshold, 33 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.48139959693001 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 7.661380809037078 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.415169559066246 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 0.251677542924881 AS threshold, 67 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.397685876057137 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 10.006470470816149 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 0.6844801306724548 AS threshold, 52 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.95284416603051 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.253037432339346 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.452446264806422 AS `Estimator`) AS `Values`), 
`DT_Output_1` AS 
(SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_1` LEFT OUTER JOIN `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id), 
`AdaBoost_Estim_1` AS 
(SELECT `DT_Output_1`.`KEY` AS join_key_1, `DT_Output_1`.`Estimator` AS `Estimator_1` 
FROM `DT_Output_1`), 
`DT_node_lookup_2` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.5646461248397827) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.3477802872657776) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.4625895917415619) THEN 4 ELSE 5 END END ELSE CASE WHEN (`ADS`.`Feature_6` <= 0.6187397241592407) THEN 7 ELSE 8 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_2` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.5646461248397827 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.883858400271317 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.3477802872657776 AS threshold, 64 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.06161447184307 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 7.643472669344208 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_0' AS feature, 0.4625895917415619 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.979108653732672 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.671983147524374 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.09566897770598 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_6' AS feature, 0.6187397241592407 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.9011809396993 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.217736095838735 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 20.81792725674257 AS `Estimator`) AS `Values`), 
`DT_Output_2` AS 
(SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_2` LEFT OUTER JOIN `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id), 
`AdaBoost_Estim_2` AS 
(SELECT `DT_Output_2`.`KEY` AS join_key_2, `DT_Output_2`.`Estimator` AS `Estimator_2` 
FROM `DT_Output_2`), 
`DT_node_lookup_3` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.40362095832824707) THEN CASE WHEN (`ADS`.`Feature_4` <= 0.5312111377716064) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.3600841164588928) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.1852557510137558) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_3` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.40362095832824707 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.047745563058788 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_4' AS feature, 0.5312111377716064 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 11.263263636390864 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.363989407458451 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.935193812326855 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 0.3600841164588928 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.235552791155012 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, 0.1852557510137558 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.772896312891683 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.740640557265579 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.805152068517781 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 19.077079496843478 AS `Estimator`) AS `Values`), 
`DT_Output_3` AS 
(SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_3` LEFT OUTER JOIN `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id), 
`AdaBoost_Estim_3` AS 
(SELECT `DT_Output_3`.`KEY` AS join_key_3, `DT_Output_3`.`Estimator` AS `Estimator_3` 
FROM `DT_Output_3`), 
`DT_node_lookup_4` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_4` <= 0.7546722888946533) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.32761019468307495) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.34683167934417725) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_4` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_4' AS feature, 0.7546722888946533 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.273483293903537 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.32761019468307495 AS threshold, 76 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 12.959133520139158 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.586245648268726 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_0' AS feature, 0.34683167934417725 AS threshold, 50 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.713035213511779 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.137362908642048 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 24 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.42001354378732 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.435590910824057 AS `Estimator`) AS `Values`), 
`DT_Output_4` AS 
(SELECT `DT_node_lookup_4`.`KEY` AS `KEY`, `DT_node_lookup_4`.node_id_2 AS node_id_2, `DT_node_data_4`.node_id AS node_id, `DT_node_data_4`.feature AS feature, `DT_node_data_4`.threshold AS threshold, `DT_node_data_4`.count AS count, `DT_node_data_4`.depth AS depth, `DT_node_data_4`.parent_id AS parent_id, `DT_node_data_4`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_4` LEFT OUTER JOIN `DT_node_data_4` ON `DT_node_lookup_4`.node_id_2 = `DT_node_data_4`.node_id), 
`AdaBoost_Estim_4` AS 
(SELECT `DT_Output_4`.`KEY` AS join_key_4, `DT_Output_4`.`Estimator` AS `Estimator_4` 
FROM `DT_Output_4`), 
`DT_node_lookup_5` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.8188267946243286) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.20206719636917114) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_4` <= 0.7218925952911377) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data_5` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.8188267946243286 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.227373217631332 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.20206719636917114 AS threshold, 77 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.345592630870442 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.408196639058405 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_4' AS feature, 0.7218925952911377 AS threshold, 55 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.920551027595256 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 13.084325160401233 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.133946295184785 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 23 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 21.527247355917776 AS `Estimator`) AS `Values`), 
`DT_Output_5` AS 
(SELECT `DT_node_lookup_5`.`KEY` AS `KEY`, `DT_node_lookup_5`.node_id_2 AS node_id_2, `DT_node_data_5`.node_id AS node_id, `DT_node_data_5`.feature AS feature, `DT_node_data_5`.threshold AS threshold, `DT_node_data_5`.count AS count, `DT_node_data_5`.depth AS depth, `DT_node_data_5`.parent_id AS parent_id, `DT_node_data_5`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_5` LEFT OUTER JOIN `DT_node_data_5` ON `DT_node_lookup_5`.node_id_2 = `DT_node_data_5`.node_id), 
`AdaBoost_Estim_5` AS 
(SELECT `DT_Output_5`.`KEY` AS join_key_5, `DT_Output_5`.`Estimator` AS `Estimator_5` 
FROM `DT_Output_5`), 
`AdaBoost_Join_CTE` AS 
(SELECT `AdaBoost_Estim_0`.join_key_0 AS join_key_0, `AdaBoost_Estim_0`.`Estimator_0` AS `Estimator_0`, `AdaBoost_Estim_1`.join_key_1 AS join_key_1, `AdaBoost_Estim_1`.`Estimator_1` AS `Estimator_1`, `AdaBoost_Estim_2`.join_key_2 AS join_key_2, `AdaBoost_Estim_2`.`Estimator_2` AS `Estimator_2`, `AdaBoost_Estim_3`.join_key_3 AS join_key_3, `AdaBoost_Estim_3`.`Estimator_3` AS `Estimator_3`, `AdaBoost_Estim_4`.join_key_4 AS join_key_4, `AdaBoost_Estim_4`.`Estimator_4` AS `Estimator_4`, `AdaBoost_Estim_5`.join_key_5 AS join_key_5, `AdaBoost_Estim_5`.`Estimator_5` AS `Estimator_5` 
FROM `AdaBoost_Estim_0` LEFT OUTER JOIN `AdaBoost_Estim_1` ON `AdaBoost_Estim_0`.join_key_0 = `AdaBoost_Estim_1`.join_key_1 LEFT OUTER JOIN `AdaBoost_Estim_2` ON `AdaBoost_Estim_2`.join_key_2 = `AdaBoost_Estim_1`.join_key_1 LEFT OUTER JOIN `AdaBoost_Estim_3` ON `AdaBoost_Estim_3`.join_key_3 = `AdaBoost_Estim_2`.join_key_2 LEFT OUTER JOIN `AdaBoost_Estim_4` ON `AdaBoost_Estim_4`.join_key_4 = `AdaBoost_Estim_3`.join_key_3 LEFT OUTER JOIN `AdaBoost_Estim_5` ON `AdaBoost_Estim_5`.join_key_5 = `AdaBoost_Estim_4`.join_key_4), 
`WeightedEstimators` AS 
(SELECT `Values`.`Key` AS `Key`, `Values`.sub_estimator AS sub_estimator, `Values`.`Weight` AS `Weight`, `Values`.`Value` AS `Value` 
FROM (SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 0 AS sub_estimator, 0.155771529922 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_0` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 1 AS sub_estimator, 0.171975798705 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_1` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 2 AS sub_estimator, 0.187805910073 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_2` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 3 AS sub_estimator, 0.086228896043 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_3` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 4 AS sub_estimator, 0.186562073106 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_4` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 5 AS sub_estimator, 0.211655792151 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_5` AS `Value` 
FROM `AdaBoost_Join_CTE`) AS `Values`), 
`Cumulative_Frequencies` AS 
(SELECT u1.`Key` AS `Key`, u1.sub_estimator AS sub_estimator, u1.`Weight` AS `Weight`, u1.`Value` AS `Value`, (SELECT sum(u2.`Weight`) AS sum_1 
FROM `WeightedEstimators` AS u2 
WHERE u1.`Key` = u2.`Key` AND u1.`Value` >= u2.`Value`) AS cum_weight 
FROM `WeightedEstimators` AS u1), 
`Quantiles` AS 
(SELECT `AdaBoost_Join_CTE`.join_key_0 AS join_key_0, `AdaBoost_Join_CTE`.`Estimator_0` AS `Estimator_0`, `AdaBoost_Join_CTE`.join_key_1 AS join_key_1, `AdaBoost_Join_CTE`.`Estimator_1` AS `Estimator_1`, `AdaBoost_Join_CTE`.join_key_2 AS join_key_2, `AdaBoost_Join_CTE`.`Estimator_2` AS `Estimator_2`, `AdaBoost_Join_CTE`.join_key_3 AS join_key_3, `AdaBoost_Join_CTE`.`Estimator_3` AS `Estimator_3`, `AdaBoost_Join_CTE`.join_key_4 AS join_key_4, `AdaBoost_Join_CTE`.`Estimator_4` AS `Estimator_4`, `AdaBoost_Join_CTE`.join_key_5 AS join_key_5, `AdaBoost_Join_CTE`.`Estimator_5` AS `Estimator_5`, (SELECT min(`Cumulative_Frequencies`.`Value`) AS min_1 
FROM `Cumulative_Frequencies` 
WHERE `AdaBoost_Join_CTE`.join_key_0 = `Cumulative_Frequencies`.`Key` AND `Cumulative_Frequencies`.cum_weight >= 0.5) AS `Median` 
FROM `AdaBoost_Join_CTE`)
 SELECT `Quantiles`.join_key_0 AS `KEY`, `Quantiles`.`Median` AS `Estimator` 
FROM `Quantiles`