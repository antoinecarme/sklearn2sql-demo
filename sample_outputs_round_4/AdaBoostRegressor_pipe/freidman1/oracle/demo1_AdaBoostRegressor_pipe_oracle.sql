-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.504472624592 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.504425388372 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.488165068656 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.45974534673 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.446056129604 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.535919416501 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.486898155368 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.500226921401 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.437807666734 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.523246973022 ELSE "ADS"."Feature_9" END AS impute_11 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.504472624592 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.504425388372 AS impute_3, "ADS_imp_1_OUT".impute_4 - 0.488165068656 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.45974534673 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.446056129604 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.535919416501 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.486898155368 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.500226921401 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.437807666734 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.523246973022 AS impute_11 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0383256302403 + "CenteredDataForPCA".impute_3 * -0.487476534659 + "CenteredDataForPCA".impute_4 * -0.0866132635148 + "CenteredDataForPCA".impute_5 * 0.173601618406 + "CenteredDataForPCA".impute_6 * 0.4328259881 + "CenteredDataForPCA".impute_7 * 0.14006544002 + "CenteredDataForPCA".impute_8 * -0.520027435748 + "CenteredDataForPCA".impute_9 * -0.42302927383 + "CenteredDataForPCA".impute_10 * -0.0103514596771 + "CenteredDataForPCA".impute_11 * -0.258480711594 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.301404296716 + "CenteredDataForPCA".impute_3 * -0.00569553297221 + "CenteredDataForPCA".impute_4 * 0.535881497411 + "CenteredDataForPCA".impute_5 * -0.502619349661 + "CenteredDataForPCA".impute_6 * 0.341755356019 + "CenteredDataForPCA".impute_7 * 0.376757670236 + "CenteredDataForPCA".impute_8 * 0.0832367354304 + "CenteredDataForPCA".impute_9 * 0.124764881529 + "CenteredDataForPCA".impute_10 * 0.288788065596 + "CenteredDataForPCA".impute_11 * -0.0684951008225 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.450149631919 + "CenteredDataForPCA".impute_3 * -0.512433780908 + "CenteredDataForPCA".impute_4 * -0.168836309043 + "CenteredDataForPCA".impute_5 * -0.364391832489 + "CenteredDataForPCA".impute_6 * -0.262949032338 + "CenteredDataForPCA".impute_7 * -0.0720658004815 + "CenteredDataForPCA".impute_8 * -0.132851868796 + "CenteredDataForPCA".impute_9 * 0.233078029272 + "CenteredDataForPCA".impute_10 * -0.394646877438 + "CenteredDataForPCA".impute_11 * 0.267269535079 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.318179352148 + "CenteredDataForPCA".impute_3 * 0.188639747383 + "CenteredDataForPCA".impute_4 * -0.657254156287 + "CenteredDataForPCA".impute_5 * 0.0573475721947 + "CenteredDataForPCA".impute_6 * -0.0507386039301 + "CenteredDataForPCA".impute_7 * 0.592248667233 + "CenteredDataForPCA".impute_8 * 0.0759696723539 + "CenteredDataForPCA".impute_9 * 0.000695642782975 + "CenteredDataForPCA".impute_10 * 0.26140024516 + "CenteredDataForPCA".impute_11 * 0.0216869224833 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.175423268856 + "CenteredDataForPCA".impute_3 * 0.224481814018 + "CenteredDataForPCA".impute_4 * 0.113318352658 + "CenteredDataForPCA".impute_5 * -0.332119338767 + "CenteredDataForPCA".impute_6 * -0.403815735888 + "CenteredDataForPCA".impute_7 * 0.127329439553 + "CenteredDataForPCA".impute_8 * -0.457643189112 + "CenteredDataForPCA".impute_9 * -0.484082989927 + "CenteredDataForPCA".impute_10 * 0.144414750542 + "CenteredDataForPCA".impute_11 * 0.389590943308 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.372901408417 + "CenteredDataForPCA".impute_3 * 0.0705185448666 + "CenteredDataForPCA".impute_4 * -0.29002531316 + "CenteredDataForPCA".impute_5 * -0.476737910643 + "CenteredDataForPCA".impute_6 * -0.0640468517592 + "CenteredDataForPCA".impute_7 * -0.0812337148973 + "CenteredDataForPCA".impute_8 * -0.332013002912 + "CenteredDataForPCA".impute_9 * 0.380378452052 + "CenteredDataForPCA".impute_10 * 0.0886657695728 + "CenteredDataForPCA".impute_11 * -0.520667860995 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.0264930293498 + "CenteredDataForPCA".impute_3 * 0.454482360927 + "CenteredDataForPCA".impute_4 * 0.0830117207488 + "CenteredDataForPCA".impute_5 * 0.0757362408777 + "CenteredDataForPCA".impute_6 * 0.267959197755 + "CenteredDataForPCA".impute_7 * 0.316736241704 + "CenteredDataForPCA".impute_8 * -0.292095299753 + "CenteredDataForPCA".impute_9 * 0.18873350104 + "CenteredDataForPCA".impute_10 * -0.692215923172 + "CenteredDataForPCA".impute_11 * 0.0888263346235 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.642900419692 + "CenteredDataForPCA".impute_3 * 0.435518042314 + "CenteredDataForPCA".impute_4 * -0.0126291650861 + "CenteredDataForPCA".impute_5 * 0.026827884828 + "CenteredDataForPCA".impute_6 * 0.0231102457687 + "CenteredDataForPCA".impute_7 * -0.499670259615 + "CenteredDataForPCA".impute_8 * -0.270321595912 + "CenteredDataForPCA".impute_9 * -0.102028629243 + "CenteredDataForPCA".impute_10 * 0.0999340708391 + "CenteredDataForPCA".impute_11 * -0.229017416903 AS anoova_9, "CenteredDataForPCA".impute_2 * 0.133253148783 + "CenteredDataForPCA".impute_3 * -0.101231274242 + "CenteredDataForPCA".impute_4 * 0.374724165725 + "CenteredDataForPCA".impute_5 * 0.39542127912 + "CenteredDataForPCA".impute_6 * -0.592220575527 + "CenteredDataForPCA".impute_7 * 0.316775281496 + "CenteredDataForPCA".impute_8 * -0.205802967877 + "CenteredDataForPCA".impute_9 * 0.196389056173 + "CenteredDataForPCA".impute_10 * 0.0242575398656 + "CenteredDataForPCA".impute_11 * -0.377671681279 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.0469658298991 + "CenteredDataForPCA".impute_3 * -0.048145119159 + "CenteredDataForPCA".impute_4 * 0.020397666891 + "CenteredDataForPCA".impute_5 * 0.284200850838 + "CenteredDataForPCA".impute_6 * 0.184167771754 + "CenteredDataForPCA".impute_7 * -0.0966067816481 + "CenteredDataForPCA".impute_8 * -0.422852087849 + "CenteredDataForPCA".impute_9 * 0.53621932198 + "CenteredDataForPCA".impute_10 * 0.417088341355 + "CenteredDataForPCA".impute_11 * 0.480355803047 AS anoova_11 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.01977846585214138) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.11006687581539154) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 0.04171942174434662) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.045920927077531815) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_9' AS feature, 0.01977846585214138 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.565770075760161 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -0.11006687581539154 AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 11.260417579137831 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 8.830311825504657 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_7' AS feature, 0.04171942174434662 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.718481031317733 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.537867918073127 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.792071386517906 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_4' AS feature, -0.045920927077531815 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.4998550714613 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 20.36541204175473 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.970433489889032 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"AdaBoost_Estim_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, "DT_Output"."Estimator" AS "Estimator_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.1662885546684265) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.062233977019786835) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.012063979171216488) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.07983772456645966) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.1662885546684265 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.838149289454806 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_6' AS feature, -0.062233977019786835 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.919404798498293 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.534398844554264 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.141208847180232 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_4' AS feature, 0.012063979171216488 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.95172288635435 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_7' AS feature, -0.07983772456645966 AS threshold, 38 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.402956801278012 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 19.502616871921703 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.033613276945164 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.194378447999407 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"AdaBoost_Estim_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, "DT_Output_1"."Estimator" AS "Estimator_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.09530390799045563) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.05849633365869522) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.05546235665678978) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.10428747534751892) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -0.09530390799045563 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.199511556426145 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, -0.05849633365869522 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 18.11260804802062 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 20.393956999576147 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.831259096465077 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_9' AS feature, 0.05546235665678978 AS threshold, 68 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.358054383911114 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'anoova_5' AS feature, -0.10428747534751892 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.244541820249681 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 7.2001102847566765 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.071200741545487 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.37735804628458 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"AdaBoost_Estim_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, "DT_Output_2"."Estimator" AS "Estimator_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.014177536591887474) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.06771130859851837) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.03263619914650917) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.037610094994306564) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.033421583473682404) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.014177536591887474 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.195364509856681 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_9' AS feature, -0.06771130859851837 AS threshold, 55 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.45376868156369 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.827612162123774 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_11' AS feature, -0.03263619914650917 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 19.871206361190296 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 21.964991007431223 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.64656017455933 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_8' AS feature, 0.037610094994306564 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.212870522214777 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'anoova_10' AS feature, 0.033421583473682404 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.030880809939141 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.240436600775059 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 7.821325019103227 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.576849946766044 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"AdaBoost_Estim_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, "DT_Output_3"."Estimator" AS "Estimator_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.31159597635269165) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.07200510054826736) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.01299147680401802) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.06408849358558655) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, -0.31159597635269165 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.37434476917076 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 20.37801157053974 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, 0.07200510054826736 AS threshold, 83 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.144678074914463 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_7' AS feature, -0.01299147680401802 AS threshold, 51 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 11.195594851510405 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.38337436300683 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 8.96414919346291 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_9' AS feature, -0.06408849358558655 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.25102946221467 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.213404967252625 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 18.048933428357657 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"AdaBoost_Estim_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, "DT_Output_4"."Estimator" AS "Estimator_4" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.03635949641466141) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.32990795373916626) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.17989003658294678) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.46990296244621277) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.03635949641466141 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.914568624126687 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_6' AS feature, -0.32990795373916626 AS threshold, 57 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.7223640391179 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 24.017360194835014 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_7' AS feature, -0.17989003658294678 AS threshold, 42 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.474151126361786 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 18.657001707365414 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.515473845744166 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'anoova_4' AS feature, 0.46990296244621277 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 8.86702586471974 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 11.381800043788585 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 6.232500534266653 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"AdaBoost_Estim_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, "DT_Output_5"."Estimator" AS "Estimator_5" 
FROM "DT_Output_5"), 
"AdaBoost_Join_CTE" AS 
(SELECT "AdaBoost_Estim_0".join_key_0 AS join_key_0, "AdaBoost_Estim_0"."Estimator_0" AS "Estimator_0", "AdaBoost_Estim_1".join_key_1 AS join_key_1, "AdaBoost_Estim_1"."Estimator_1" AS "Estimator_1", "AdaBoost_Estim_2".join_key_2 AS join_key_2, "AdaBoost_Estim_2"."Estimator_2" AS "Estimator_2", "AdaBoost_Estim_3".join_key_3 AS join_key_3, "AdaBoost_Estim_3"."Estimator_3" AS "Estimator_3", "AdaBoost_Estim_4".join_key_4 AS join_key_4, "AdaBoost_Estim_4"."Estimator_4" AS "Estimator_4", "AdaBoost_Estim_5".join_key_5 AS join_key_5, "AdaBoost_Estim_5"."Estimator_5" AS "Estimator_5" 
FROM "AdaBoost_Estim_0" LEFT OUTER JOIN "AdaBoost_Estim_1" ON "AdaBoost_Estim_0".join_key_0 = "AdaBoost_Estim_1".join_key_1 LEFT OUTER JOIN "AdaBoost_Estim_2" ON "AdaBoost_Estim_2".join_key_2 = "AdaBoost_Estim_1".join_key_1 LEFT OUTER JOIN "AdaBoost_Estim_3" ON "AdaBoost_Estim_3".join_key_3 = "AdaBoost_Estim_2".join_key_2 LEFT OUTER JOIN "AdaBoost_Estim_4" ON "AdaBoost_Estim_4".join_key_4 = "AdaBoost_Estim_3".join_key_3 LEFT OUTER JOIN "AdaBoost_Estim_5" ON "AdaBoost_Estim_5".join_key_5 = "AdaBoost_Estim_4".join_key_4), 
"WeightedEstimators" AS 
(SELECT "Values"."Key" AS "Key", "Values".sub_estimator AS sub_estimator, "Values"."Weight" AS "Weight", "Values"."Value" AS "Value" 
FROM (SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 0 AS sub_estimator, 0.149121541756 AS "Weight", "AdaBoost_Join_CTE"."Estimator_0" AS "Value" 
FROM "AdaBoost_Join_CTE" UNION ALL SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 1 AS sub_estimator, 0.202881487153 AS "Weight", "AdaBoost_Join_CTE"."Estimator_1" AS "Value" 
FROM "AdaBoost_Join_CTE" UNION ALL SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 2 AS sub_estimator, 0.124385180331 AS "Weight", "AdaBoost_Join_CTE"."Estimator_2" AS "Value" 
FROM "AdaBoost_Join_CTE" UNION ALL SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 3 AS sub_estimator, 0.197524571925 AS "Weight", "AdaBoost_Join_CTE"."Estimator_3" AS "Value" 
FROM "AdaBoost_Join_CTE" UNION ALL SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 4 AS sub_estimator, 0.112896965143 AS "Weight", "AdaBoost_Join_CTE"."Estimator_4" AS "Value" 
FROM "AdaBoost_Join_CTE" UNION ALL SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 5 AS sub_estimator, 0.213190253693 AS "Weight", "AdaBoost_Join_CTE"."Estimator_5" AS "Value" 
FROM "AdaBoost_Join_CTE") "Values"), 
"Cumulative_Frequencies" AS 
(SELECT u1."Key" AS "Key", u1.sub_estimator AS sub_estimator, u1."Weight" AS "Weight", u1."Value" AS "Value", (SELECT sum(u2."Weight") AS sum_1 
FROM "WeightedEstimators" u2 
WHERE u1."Key" = u2."Key" AND u1."Value" >= u2."Value") AS cum_weight 
FROM "WeightedEstimators" u1), 
"Quantiles" AS 
(SELECT "AdaBoost_Join_CTE".join_key_0 AS join_key_0, "AdaBoost_Join_CTE"."Estimator_0" AS "Estimator_0", "AdaBoost_Join_CTE".join_key_1 AS join_key_1, "AdaBoost_Join_CTE"."Estimator_1" AS "Estimator_1", "AdaBoost_Join_CTE".join_key_2 AS join_key_2, "AdaBoost_Join_CTE"."Estimator_2" AS "Estimator_2", "AdaBoost_Join_CTE".join_key_3 AS join_key_3, "AdaBoost_Join_CTE"."Estimator_3" AS "Estimator_3", "AdaBoost_Join_CTE".join_key_4 AS join_key_4, "AdaBoost_Join_CTE"."Estimator_4" AS "Estimator_4", "AdaBoost_Join_CTE".join_key_5 AS join_key_5, "AdaBoost_Join_CTE"."Estimator_5" AS "Estimator_5", (SELECT min("Cumulative_Frequencies"."Value") AS min_1 
FROM "Cumulative_Frequencies" 
WHERE "AdaBoost_Join_CTE".join_key_0 = "Cumulative_Frequencies"."Key" AND "Cumulative_Frequencies".cum_weight >= 0.5) AS "Median" 
FROM "AdaBoost_Join_CTE")
 SELECT "Quantiles".join_key_0 AS "KEY", "Quantiles"."Median" AS "Estimator" 
FROM "Quantiles"