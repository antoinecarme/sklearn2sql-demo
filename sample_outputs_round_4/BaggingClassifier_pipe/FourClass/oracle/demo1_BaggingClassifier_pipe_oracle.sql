-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.0430923427296 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.260464521204 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.0913112982841 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0266202145108 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.128532651103 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.200199562446 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.366807451718 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0473842254325 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0773793964813 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.537081696589 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN -0.197743351303 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.0214367148009 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.0505522331936 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.116898727405 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0768468670269 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.193468435773 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0262703218108 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.625800460026 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.0531795530421 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.254493171155 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - -0.0430923427296 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.260464521204 AS impute_3, "ADS_imp_1_OUT".impute_4 - 0.0913112982841 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.0266202145108 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.128532651103 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.200199562446 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.366807451718 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.0473842254325 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0773793964813 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.537081696589 AS impute_11, "ADS_imp_1_OUT".impute_12 - -0.197743351303 AS impute_12, "ADS_imp_1_OUT".impute_13 - 0.0214367148009 AS impute_13, "ADS_imp_1_OUT".impute_14 - -0.0505522331936 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.116898727405 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0768468670269 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.193468435773 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.0262703218108 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.625800460026 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.0531795530421 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.254493171155 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0204109271261 + "CenteredDataForPCA".impute_3 * 0.0315474246113 + "CenteredDataForPCA".impute_4 * -0.0133788922196 + "CenteredDataForPCA".impute_5 * -0.0838591986512 + "CenteredDataForPCA".impute_6 * 0.0434394334005 + "CenteredDataForPCA".impute_7 * -0.118865652635 + "CenteredDataForPCA".impute_8 * 0.469241069124 + "CenteredDataForPCA".impute_9 * -0.00645545777525 + "CenteredDataForPCA".impute_10 * 0.108291193229 + "CenteredDataForPCA".impute_11 * 0.0330877299792 + "CenteredDataForPCA".impute_12 * -0.0887788132411 + "CenteredDataForPCA".impute_13 * -0.14496110295 + "CenteredDataForPCA".impute_14 * 0.01500747353 + "CenteredDataForPCA".impute_15 * -0.0333078695719 + "CenteredDataForPCA".impute_16 * -0.109584206755 + "CenteredDataForPCA".impute_17 * -0.503350960147 + "CenteredDataForPCA".impute_18 * 0.0255483044109 + "CenteredDataForPCA".impute_19 * -0.0741003254255 + "CenteredDataForPCA".impute_20 * -0.0917808459746 + "CenteredDataForPCA".impute_21 * -0.657375014238 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.0211205771876 + "CenteredDataForPCA".impute_3 * -0.0094854342772 + "CenteredDataForPCA".impute_4 * 0.0173932174141 + "CenteredDataForPCA".impute_5 * 0.0750833358359 + "CenteredDataForPCA".impute_6 * 0.0287392601163 + "CenteredDataForPCA".impute_7 * 0.582047147652 + "CenteredDataForPCA".impute_8 * 0.429494910215 + "CenteredDataForPCA".impute_9 * -0.0837516987229 + "CenteredDataForPCA".impute_10 * -0.0125761557935 + "CenteredDataForPCA".impute_11 * 0.126195906473 + "CenteredDataForPCA".impute_12 * -0.00906938170833 + "CenteredDataForPCA".impute_13 * 0.0150181571364 + "CenteredDataForPCA".impute_14 * -0.0174009807758 + "CenteredDataForPCA".impute_15 * 0.0846311133889 + "CenteredDataForPCA".impute_16 * -0.0490810941796 + "CenteredDataForPCA".impute_17 * 0.135528333727 + "CenteredDataForPCA".impute_18 * 0.13364659273 + "CenteredDataForPCA".impute_19 * 0.631435907434 + "CenteredDataForPCA".impute_20 * 0.0222635055212 + "CenteredDataForPCA".impute_21 * 0.0271480373423 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.11496806581 + "CenteredDataForPCA".impute_3 * -0.0117608037286 + "CenteredDataForPCA".impute_4 * -0.0140315270209 + "CenteredDataForPCA".impute_5 * 0.0850959514405 + "CenteredDataForPCA".impute_6 * -0.0969416663273 + "CenteredDataForPCA".impute_7 * -0.231497079815 + "CenteredDataForPCA".impute_8 * 0.394688859799 + "CenteredDataForPCA".impute_9 * 0.17511679171 + "CenteredDataForPCA".impute_10 * 0.0568312572325 + "CenteredDataForPCA".impute_11 * -0.675816124283 + "CenteredDataForPCA".impute_12 * -0.00408868113581 + "CenteredDataForPCA".impute_13 * -0.0368499896638 + "CenteredDataForPCA".impute_14 * 0.126109367874 + "CenteredDataForPCA".impute_15 * 0.0274565353996 + "CenteredDataForPCA".impute_16 * -0.0419077084835 + "CenteredDataForPCA".impute_17 * 0.486119021548 + "CenteredDataForPCA".impute_18 * 0.0643091750874 + "CenteredDataForPCA".impute_19 * -0.0244281611374 + "CenteredDataForPCA".impute_20 * 0.0583166690129 + "CenteredDataForPCA".impute_21 * -0.0747098015041 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.105787909268 + "CenteredDataForPCA".impute_3 * -0.0707285038979 + "CenteredDataForPCA".impute_4 * 0.057154612278 + "CenteredDataForPCA".impute_5 * -0.112324028046 + "CenteredDataForPCA".impute_6 * 0.013023691172 + "CenteredDataForPCA".impute_7 * -0.603692104855 + "CenteredDataForPCA".impute_8 * 0.304946696131 + "CenteredDataForPCA".impute_9 * 0.140714934914 + "CenteredDataForPCA".impute_10 * -0.132582271877 + "CenteredDataForPCA".impute_11 * 0.547264970115 + "CenteredDataForPCA".impute_12 * -0.0548260951575 + "CenteredDataForPCA".impute_13 * -0.135208997007 + "CenteredDataForPCA".impute_14 * 0.0254763937167 + "CenteredDataForPCA".impute_15 * -0.00650537116194 + "CenteredDataForPCA".impute_16 * -0.000135973441299 + "CenteredDataForPCA".impute_17 * 0.201558596613 + "CenteredDataForPCA".impute_18 * 0.153355992245 + "CenteredDataForPCA".impute_19 * 0.183204103573 + "CenteredDataForPCA".impute_20 * -0.0632943338429 + "CenteredDataForPCA".impute_21 * 0.223039225791 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.208684504086 + "CenteredDataForPCA".impute_3 * 0.0110729314601 + "CenteredDataForPCA".impute_4 * -0.0502252795559 + "CenteredDataForPCA".impute_5 * 0.00748089754521 + "CenteredDataForPCA".impute_6 * 0.126700229946 + "CenteredDataForPCA".impute_7 * -0.0714783609027 + "CenteredDataForPCA".impute_8 * 0.0449553357453 + "CenteredDataForPCA".impute_9 * -0.544594172085 + "CenteredDataForPCA".impute_10 * 0.0358688528824 + "CenteredDataForPCA".impute_11 * -0.0659721800356 + "CenteredDataForPCA".impute_12 * 0.337407822537 + "CenteredDataForPCA".impute_13 * -0.213037040823 + "CenteredDataForPCA".impute_14 * 0.171583613158 + "CenteredDataForPCA".impute_15 * -0.309720398119 + "CenteredDataForPCA".impute_16 * 0.430627402855 + "CenteredDataForPCA".impute_17 * 0.0541037371681 + "CenteredDataForPCA".impute_18 * 0.386262873027 + "CenteredDataForPCA".impute_19 * -0.0218689766732 + "CenteredDataForPCA".impute_20 * -0.0750098254532 + "CenteredDataForPCA".impute_21 * -0.00879971870617 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.22630462514 + "CenteredDataForPCA".impute_3 * -0.199552741933 + "CenteredDataForPCA".impute_4 * 0.280533353895 + "CenteredDataForPCA".impute_5 * 0.150472004686 + "CenteredDataForPCA".impute_6 * -0.207580925286 + "CenteredDataForPCA".impute_7 * -0.0476403336537 + "CenteredDataForPCA".impute_8 * -0.0588015595882 + "CenteredDataForPCA".impute_9 * -0.0847248148676 + "CenteredDataForPCA".impute_10 * 0.213218221717 + "CenteredDataForPCA".impute_11 * -0.0131676588579 + "CenteredDataForPCA".impute_12 * -0.129830200668 + "CenteredDataForPCA".impute_13 * 0.240530840273 + "CenteredDataForPCA".impute_14 * -0.471772875534 + "CenteredDataForPCA".impute_15 * 0.167523664171 + "CenteredDataForPCA".impute_16 * 0.10999374902 + "CenteredDataForPCA".impute_17 * -0.0692885182853 + "CenteredDataForPCA".impute_18 * 0.58118784117 + "CenteredDataForPCA".impute_19 * -0.0923342432346 + "CenteredDataForPCA".impute_20 * 0.124640439654 + "CenteredDataForPCA".impute_21 * -0.0436910038461 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.169721666056 + "CenteredDataForPCA".impute_3 * 0.124068956777 + "CenteredDataForPCA".impute_4 * -0.13556555902 + "CenteredDataForPCA".impute_5 * -0.189658358004 + "CenteredDataForPCA".impute_6 * 0.0835179439714 + "CenteredDataForPCA".impute_7 * -0.0600479020681 + "CenteredDataForPCA".impute_8 * 0.114105433429 + "CenteredDataForPCA".impute_9 * -0.0504293353107 + "CenteredDataForPCA".impute_10 * -0.280366457887 + "CenteredDataForPCA".impute_11 * 0.00115482178263 + "CenteredDataForPCA".impute_12 * 0.282553139899 + "CenteredDataForPCA".impute_13 * 0.414775073486 + "CenteredDataForPCA".impute_14 * -0.256724000414 + "CenteredDataForPCA".impute_15 * -0.459769666121 + "CenteredDataForPCA".impute_16 * -0.13975196256 + "CenteredDataForPCA".impute_17 * -0.00784182145616 + "CenteredDataForPCA".impute_18 * -0.0432578560999 + "CenteredDataForPCA".impute_19 * 0.0180836755338 + "CenteredDataForPCA".impute_20 * 0.491463191872 + "CenteredDataForPCA".impute_21 * -0.0648525599028 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.135013940808 + "CenteredDataForPCA".impute_3 * -0.652228831884 + "CenteredDataForPCA".impute_4 * -0.443633216476 + "CenteredDataForPCA".impute_5 * -0.326913888352 + "CenteredDataForPCA".impute_6 * -0.0135226439522 + "CenteredDataForPCA".impute_7 * 0.0381645403075 + "CenteredDataForPCA".impute_8 * -0.00539761775513 + "CenteredDataForPCA".impute_9 * -0.195710141768 + "CenteredDataForPCA".impute_10 * 0.0231947443262 + "CenteredDataForPCA".impute_11 * -0.0643265743781 + "CenteredDataForPCA".impute_12 * -0.299930654425 + "CenteredDataForPCA".impute_13 * 0.177201984408 + "CenteredDataForPCA".impute_14 * 0.0126871866879 + "CenteredDataForPCA".impute_15 * -0.149674106489 + "CenteredDataForPCA".impute_16 * -0.0123288640017 + "CenteredDataForPCA".impute_17 * 0.0483169679329 + "CenteredDataForPCA".impute_18 * -0.0418751610192 + "CenteredDataForPCA".impute_19 * 0.0103966162779 + "CenteredDataForPCA".impute_20 * -0.243651142792 + "CenteredDataForPCA".impute_21 * 0.0200624336793 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.295876159718 + "CenteredDataForPCA".impute_3 * -0.234901731532 + "CenteredDataForPCA".impute_4 * 0.379078459046 + "CenteredDataForPCA".impute_5 * 0.262641203842 + "CenteredDataForPCA".impute_6 * -0.494769452271 + "CenteredDataForPCA".impute_7 * -0.0551355635138 + "CenteredDataForPCA".impute_8 * 0.0654766551672 + "CenteredDataForPCA".impute_9 * -0.26052179342 + "CenteredDataForPCA".impute_10 * -0.124882741173 + "CenteredDataForPCA".impute_11 * 0.0121908897424 + "CenteredDataForPCA".impute_12 * -0.0248874412851 + "CenteredDataForPCA".impute_13 * -0.0581410413561 + "CenteredDataForPCA".impute_14 * -0.0939846607615 + "CenteredDataForPCA".impute_15 * -0.355947620802 + "CenteredDataForPCA".impute_16 * -0.308587965715 + "CenteredDataForPCA".impute_17 * 0.0361427907898 + "CenteredDataForPCA".impute_18 * -0.250504954499 + "CenteredDataForPCA".impute_19 * 0.0247878863299 + "CenteredDataForPCA".impute_20 * -0.0970717232259 + "CenteredDataForPCA".impute_21 * 0.00179546990213 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.38308128652 + "CenteredDataForPCA".impute_3 * 0.0854452358079 + "CenteredDataForPCA".impute_4 * 0.0684296949681 + "CenteredDataForPCA".impute_5 * -0.111137807493 + "CenteredDataForPCA".impute_6 * 0.385958634053 + "CenteredDataForPCA".impute_7 * -0.123609428979 + "CenteredDataForPCA".impute_8 * 0.144942046571 + "CenteredDataForPCA".impute_9 * -0.0597331694984 + "CenteredDataForPCA".impute_10 * 0.268554542695 + "CenteredDataForPCA".impute_11 * -0.0663242083278 + "CenteredDataForPCA".impute_12 * 0.00502148396024 + "CenteredDataForPCA".impute_13 * 0.137828902733 + "CenteredDataForPCA".impute_14 * -0.598519625717 + "CenteredDataForPCA".impute_15 * 0.050589695066 + "CenteredDataForPCA".impute_16 * 0.0952381939298 + "CenteredDataForPCA".impute_17 * 0.159168729075 + "CenteredDataForPCA".impute_18 * -0.282173168445 + "CenteredDataForPCA".impute_19 * 0.0480721300909 + "CenteredDataForPCA".impute_20 * -0.257649894238 + "CenteredDataForPCA".impute_21 * 0.032332347821 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.285741633165 + "CenteredDataForPCA".impute_3 * -0.240958583299 + "CenteredDataForPCA".impute_4 * 0.209254144146 + "CenteredDataForPCA".impute_5 * 0.0991074932402 + "CenteredDataForPCA".impute_6 * 0.412975428739 + "CenteredDataForPCA".impute_7 * 0.157531158482 + "CenteredDataForPCA".impute_8 * -0.124659344834 + "CenteredDataForPCA".impute_9 * 0.292458610257 + "CenteredDataForPCA".impute_10 * -0.21604904512 + "CenteredDataForPCA".impute_11 * -0.111349082961 + "CenteredDataForPCA".impute_12 * 0.164022888317 + "CenteredDataForPCA".impute_13 * -0.396958594123 + "CenteredDataForPCA".impute_14 * -0.224723319201 + "CenteredDataForPCA".impute_15 * -0.31291234744 + "CenteredDataForPCA".impute_16 * -0.172552721521 + "CenteredDataForPCA".impute_17 * -0.0158650070548 + "CenteredDataForPCA".impute_18 * 0.136943499496 + "CenteredDataForPCA".impute_19 * -0.0358300540515 + "CenteredDataForPCA".impute_20 * -0.261017195261 + "CenteredDataForPCA".impute_21 * 0.00898590344733 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.179220497449 + "CenteredDataForPCA".impute_3 * -0.389323645137 + "CenteredDataForPCA".impute_4 * -0.0381022941524 + "CenteredDataForPCA".impute_5 * 0.0750097757473 + "CenteredDataForPCA".impute_6 * -0.00861450867743 + "CenteredDataForPCA".impute_7 * -0.0480123572015 + "CenteredDataForPCA".impute_8 * 0.0606737694574 + "CenteredDataForPCA".impute_9 * -0.184913069274 + "CenteredDataForPCA".impute_10 * -0.0265580238763 + "CenteredDataForPCA".impute_11 * 0.0231707317223 + "CenteredDataForPCA".impute_12 * 0.300876052027 + "CenteredDataForPCA".impute_13 * -0.370396114175 + "CenteredDataForPCA".impute_14 * -0.18546813409 + "CenteredDataForPCA".impute_15 * 0.374312597432 + "CenteredDataForPCA".impute_16 * 0.200674582469 + "CenteredDataForPCA".impute_17 * -0.0231965707667 + "CenteredDataForPCA".impute_18 * -0.391784760849 + "CenteredDataForPCA".impute_19 * 0.00265791197649 + "CenteredDataForPCA".impute_20 * 0.411545664119 + "CenteredDataForPCA".impute_21 * -0.0427142699077 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.217646175245 + "CenteredDataForPCA".impute_3 * 0.339897887895 + "CenteredDataForPCA".impute_4 * -0.381686727859 + "CenteredDataForPCA".impute_5 * 0.152831359343 + "CenteredDataForPCA".impute_6 * 0.0182090585761 + "CenteredDataForPCA".impute_7 * -0.0805842070165 + "CenteredDataForPCA".impute_8 * -0.0724271436547 + "CenteredDataForPCA".impute_9 * -0.448620927117 + "CenteredDataForPCA".impute_10 * 0.0642240623182 + "CenteredDataForPCA".impute_11 * -0.00355512111429 + "CenteredDataForPCA".impute_12 * -0.121627411061 + "CenteredDataForPCA".impute_13 * -0.288636876745 + "CenteredDataForPCA".impute_14 * -0.217170272739 + "CenteredDataForPCA".impute_15 * 0.100447047819 + "CenteredDataForPCA".impute_16 * -0.518095585117 + "CenteredDataForPCA".impute_17 * 0.0821845713994 + "CenteredDataForPCA".impute_18 * 0.0856011589021 + "CenteredDataForPCA".impute_19 * -0.0376550193872 + "CenteredDataForPCA".impute_20 * -0.042994253828 + "CenteredDataForPCA".impute_21 * 0.0972619685898 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.0298870616225 + "CenteredDataForPCA".impute_3 * -0.151122425573 + "CenteredDataForPCA".impute_4 * 0.387355511436 + "CenteredDataForPCA".impute_5 * 0.0498430591112 + "CenteredDataForPCA".impute_6 * 0.526508613297 + "CenteredDataForPCA".impute_7 * -0.0942788060914 + "CenteredDataForPCA".impute_8 * 0.00694959289693 + "CenteredDataForPCA".impute_9 * -0.361936403541 + "CenteredDataForPCA".impute_10 * -0.236007707636 + "CenteredDataForPCA".impute_11 * -0.0576956747102 + "CenteredDataForPCA".impute_12 * -0.170865958864 + "CenteredDataForPCA".impute_13 * 0.260987825077 + "CenteredDataForPCA".impute_14 * 0.310509775951 + "CenteredDataForPCA".impute_15 * 0.265075498908 + "CenteredDataForPCA".impute_16 * -0.253824816908 + "CenteredDataForPCA".impute_17 * 0.0160606646331 + "CenteredDataForPCA".impute_18 * 0.0154512875567 + "CenteredDataForPCA".impute_19 * -0.066056282559 + "CenteredDataForPCA".impute_20 * 0.11729903223 + "CenteredDataForPCA".impute_21 * -0.0229841672926 AS anoova_15, "CenteredDataForPCA".impute_2 * 0.253434205841 + "CenteredDataForPCA".impute_3 * -0.0406872746779 + "CenteredDataForPCA".impute_4 * -0.0829385935614 + "CenteredDataForPCA".impute_5 * 0.248266525584 + "CenteredDataForPCA".impute_6 * -0.0811887136399 + "CenteredDataForPCA".impute_7 * -0.0761777336877 + "CenteredDataForPCA".impute_8 * 0.0503528506522 + "CenteredDataForPCA".impute_9 * -0.0384782869663 + "CenteredDataForPCA".impute_10 * 0.0321076807491 + "CenteredDataForPCA".impute_11 * 0.0684874839727 + "CenteredDataForPCA".impute_12 * 0.607031019584 + "CenteredDataForPCA".impute_13 * 0.406023467136 + "CenteredDataForPCA".impute_14 * 0.0969543691418 + "CenteredDataForPCA".impute_15 * 0.203175855999 + "CenteredDataForPCA".impute_16 * -0.102456032046 + "CenteredDataForPCA".impute_17 * -0.0409317093282 + "CenteredDataForPCA".impute_18 * -0.0790039709575 + "CenteredDataForPCA".impute_19 * -0.00395342222995 + "CenteredDataForPCA".impute_20 * -0.489609329518 + "CenteredDataForPCA".impute_21 * -0.036041659955 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.219160114059 + "CenteredDataForPCA".impute_3 * 0.018839604193 + "CenteredDataForPCA".impute_4 * 0.112545603419 + "CenteredDataForPCA".impute_5 * -0.654927278522 + "CenteredDataForPCA".impute_6 * -0.235401321539 + "CenteredDataForPCA".impute_7 * 0.0697047289603 + "CenteredDataForPCA".impute_8 * -0.0387155354743 + "CenteredDataForPCA".impute_9 * -0.0200092341645 + "CenteredDataForPCA".impute_10 * -0.318203300006 + "CenteredDataForPCA".impute_11 * -0.127900065651 + "CenteredDataForPCA".impute_12 * 0.270917265568 + "CenteredDataForPCA".impute_13 * -0.122849231333 + "CenteredDataForPCA".impute_14 * -0.111579607166 + "CenteredDataForPCA".impute_15 * 0.337904443183 + "CenteredDataForPCA".impute_16 * -0.225026306892 + "CenteredDataForPCA".impute_17 * 0.0182380034377 + "CenteredDataForPCA".impute_18 * 0.222152806526 + "CenteredDataForPCA".impute_19 * -0.0334431149855 + "CenteredDataForPCA".impute_20 * -0.115828487865 + "CenteredDataForPCA".impute_21 * -0.0161420815924 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.537909792835 + "CenteredDataForPCA".impute_3 * -0.314008847962 + "CenteredDataForPCA".impute_4 * -0.327295183097 + "CenteredDataForPCA".impute_5 * 0.244723835411 + "CenteredDataForPCA".impute_6 * 0.129668827104 + "CenteredDataForPCA".impute_7 * -0.0461176805949 + "CenteredDataForPCA".impute_8 * -0.0251905187607 + "CenteredDataForPCA".impute_9 * 0.266348876675 + "CenteredDataForPCA".impute_10 * 0.170175028307 + "CenteredDataForPCA".impute_11 * 0.0700583899144 + "CenteredDataForPCA".impute_12 * 0.214613826904 + "CenteredDataForPCA".impute_13 * 0.0078072216911 + "CenteredDataForPCA".impute_14 * 0.0458421442622 + "CenteredDataForPCA".impute_15 * 0.0603470696874 + "CenteredDataForPCA".impute_16 * -0.352619959515 + "CenteredDataForPCA".impute_17 * -0.0377111447323 + "CenteredDataForPCA".impute_18 * 0.284954051559 + "CenteredDataForPCA".impute_19 * -0.0208686460069 + "CenteredDataForPCA".impute_20 * 0.24772126165 + "CenteredDataForPCA".impute_21 * 0.00532314085745 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.187080278112 + "CenteredDataForPCA".impute_3 * -0.0440492035091 + "CenteredDataForPCA".impute_4 * 0.289182055887 + "CenteredDataForPCA".impute_5 * -0.358961075539 + "CenteredDataForPCA".impute_6 * 0.0259382585301 + "CenteredDataForPCA".impute_7 * 0.0317345905682 + "CenteredDataForPCA".impute_8 * -0.0610171104315 + "CenteredDataForPCA".impute_9 * -0.040308876644 + "CenteredDataForPCA".impute_10 * 0.717807191266 + "CenteredDataForPCA".impute_11 * 0.0608014600698 + "CenteredDataForPCA".impute_12 * 0.196249913931 + "CenteredDataForPCA".impute_13 * -0.0621461229439 + "CenteredDataForPCA".impute_14 * 0.212959705318 + "CenteredDataForPCA".impute_15 * -0.162518518502 + "CenteredDataForPCA".impute_16 * -0.271916006155 + "CenteredDataForPCA".impute_17 * 0.0481949336613 + "CenteredDataForPCA".impute_18 * -0.0651705288761 + "CenteredDataForPCA".impute_19 * 0.0408525589871 + "CenteredDataForPCA".impute_20 * 0.134895592271 + "CenteredDataForPCA".impute_21 * 0.1004752672 AS anoova_19, "CenteredDataForPCA".impute_2 * 4.3956456908e-17 + "CenteredDataForPCA".impute_3 * 4.20312011305e-16 + "CenteredDataForPCA".impute_4 * -1.94908742116e-18 + "CenteredDataForPCA".impute_5 * -4.57110347712e-16 + "CenteredDataForPCA".impute_6 * -2.76696655839e-16 + "CenteredDataForPCA".impute_7 * -0.30819001121 + "CenteredDataForPCA".impute_8 * -0.509401846317 + "CenteredDataForPCA".impute_9 * 1.23041077131e-16 + "CenteredDataForPCA".impute_10 * -9.850729909e-17 + "CenteredDataForPCA".impute_11 * -0.122374344293 + "CenteredDataForPCA".impute_12 * -7.47513046762e-17 + "CenteredDataForPCA".impute_13 * -8.32097082245e-17 + "CenteredDataForPCA".impute_14 * -1.07528390194e-17 + "CenteredDataForPCA".impute_15 * 3.27952855557e-17 + "CenteredDataForPCA".impute_16 * 2.56083181113e-17 + "CenteredDataForPCA".impute_17 * 0.0627887853365 + "CenteredDataForPCA".impute_18 * 1.01983989169e-16 + "CenteredDataForPCA".impute_19 * 0.660323272362 + "CenteredDataForPCA".impute_20 * -1.45329520157e-17 + "CenteredDataForPCA".impute_21 * -0.436559205871 AS anoova_20, "CenteredDataForPCA".impute_2 * 5.72153839382e-18 + "CenteredDataForPCA".impute_3 * 2.35450221467e-16 + "CenteredDataForPCA".impute_4 * -4.58131239433e-16 + "CenteredDataForPCA".impute_5 * 1.40498220841e-16 + "CenteredDataForPCA".impute_6 * -1.67247155606e-17 + "CenteredDataForPCA".impute_7 * 0.216832639532 + "CenteredDataForPCA".impute_8 * -0.101757253901 + "CenteredDataForPCA".impute_9 * 1.04140007943e-16 + "CenteredDataForPCA".impute_10 * -1.3152847221e-16 + "CenteredDataForPCA".impute_11 * 0.39068474401 + "CenteredDataForPCA".impute_12 * 8.17317271685e-17 + "CenteredDataForPCA".impute_13 * -2.72483251116e-17 + "CenteredDataForPCA".impute_14 * 1.04101625734e-16 + "CenteredDataForPCA".impute_15 * -1.97999955759e-17 + "CenteredDataForPCA".impute_16 * 6.53803372712e-17 + "CenteredDataForPCA".impute_17 * 0.630134761033 + "CenteredDataForPCA".impute_18 * 9.16594231758e-17 + "CenteredDataForPCA".impute_19 * -0.320835624105 + "CenteredDataForPCA".impute_20 * 1.66137029986e-16 + "CenteredDataForPCA".impute_21 * -0.538506437987 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.7222859859466553) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.2739104628562927) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.7222859859466553 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.29 AS "Proba_0", -1.237874356 AS "LogProba_0", 0.24 AS "Proba_1", -1.42711635564 AS "LogProba_1", 0.29 AS "Proba_2", -1.237874356 AS "LogProba_2", 0.18 AS "Proba_3", -1.71479842809 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.631578947368421 AS "Proba_1", -0.459532329378 AS "LogProba_1", 0.18421052631578946 AS "Proba_2", -1.69167601067 AS "LogProba_2", 0.18421052631578946 AS "Proba_3", -1.69167601067 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, -0.2739104628562927 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.46774193548387094 AS "Proba_0", -0.759838555059 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.3548387096774194 AS "Proba_2", -1.03609193169 AS "LogProba_2", 0.1774193548387097 AS "Proba_3", -1.72923911225 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6551724137931034 AS "Proba_0", -0.42285685082 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.06896551724137931 AS "Proba_2", -2.67414864943 AS "LogProba_2", 0.27586206896551724 AS "Proba_3", -1.28785428831 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.30303030303030304 AS "Proba_0", -1.19392246847 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.6060606060606061 AS "Proba_2", -0.500775287912 AS "LogProba_2", 0.09090909090909091 AS "Proba_3", -2.3978952728 AS "LogProba_3", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Proba_3" AS "Proba_3", "DT_node_data"."LogProba_3" AS "LogProba_3", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0" AS "Proba_0_0", "DT_Output"."LogProba_0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1" AS "Proba_0_1", "DT_Output"."LogProba_1" AS "LogProba_0_1", CAST(NULL AS FLOAT) AS "Score_0_2", "DT_Output"."Proba_2" AS "Proba_0_2", "DT_Output"."LogProba_2" AS "LogProba_0_2", CAST(NULL AS FLOAT) AS "Score_0_3", "DT_Output"."Proba_3" AS "Proba_0_3", "DT_Output"."LogProba_3" AS "LogProba_0_3" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.5268257856369019) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.19304870069026947) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.5268257856369019 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22 AS "Proba_0", -1.51412773263 AS "LogProba_0", 0.26 AS "Proba_1", -1.34707364797 AS "LogProba_1", 0.27 AS "Proba_2", -1.30933331998 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.021739130434782608 AS "Proba_0", -3.82864139649 AS "LogProba_0", 0.5652173913043478 AS "Proba_1", -0.570544858468 AS "LogProba_1", 0.08695652173913043 AS "Proba_2", -2.44234703537 AS "LogProba_2", 0.32608695652173914 AS "Proba_3", -1.12059119539 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_18' AS feature, 0.19304870069026947 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3888888888888889 AS "Proba_0", -0.944461608841 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.42592592592592593 AS "Proba_2", -0.853489830635 AS "LogProba_2", 0.18518518518518517 AS "Proba_3", -1.68639895357 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6551724137931034 AS "Proba_0", -0.42285685082 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.3103448275862069 AS "Proba_2", -1.17007125265 AS "LogProba_2", 0.034482758620689655 AS "Proba_3", -3.36729582999 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.08 AS "Proba_0", -2.52572864431 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.56 AS "Proba_2", -0.579818495253 AS "LogProba_2", 0.36 AS "Proba_3", -1.02165124753 AS "LogProba_3", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Proba_3" AS "Proba_3", "DT_node_data_1"."LogProba_3" AS "LogProba_3", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0" AS "Proba_1_0", "DT_Output_1"."LogProba_0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1" AS "Proba_1_1", "DT_Output_1"."LogProba_1" AS "LogProba_1_1", CAST(NULL AS FLOAT) AS "Score_1_2", "DT_Output_1"."Proba_2" AS "Proba_1_2", "DT_Output_1"."LogProba_2" AS "LogProba_1_2", CAST(NULL AS FLOAT) AS "Score_1_3", "DT_Output_1"."Proba_3" AS "Proba_1_3", "DT_Output_1"."LogProba_3" AS "LogProba_1_3" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.46265339851379395) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.1048516035079956) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.522337555885315) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -0.46265339851379395 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.19 AS "Proba_1", -1.66073120682 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.31 AS "Proba_3", -1.1711829815 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, -0.1048516035079956 AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4583333333333333 AS "Proba_0", -0.78015855755 AS "LogProba_0", 0.3541666666666667 AS "Proba_1", -1.03798766685 AS "LogProba_1", 0.1875 AS "Proba_2", -1.67397643357 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16 AS "Proba_0", -1.83258146375 AS "LogProba_0", 0.68 AS "Proba_1", -0.385662480812 AS "LogProba_1", 0.16 AS "Proba_2", -1.83258146375 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.782608695652174 AS "Proba_0", -0.245122458033 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.21739130434782608 AS "Proba_2", -1.5260563035 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, 1.522337555885315 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.057692307692307696 AS "Proba_0", -2.85263142991 AS "LogProba_0", 0.038461538461538464 AS "Proba_1", -3.25809653802 AS "LogProba_1", 0.3076923076923077 AS "Proba_2", -1.17865499634 AS "LogProba_2", 0.5961538461538461 AS "Proba_3", -0.517256514096 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0967741935483871 AS "Proba_0", -2.33537491582 AS "LogProba_0", 0.03225806451612903 AS "Proba_1", -3.43398720449 AS "LogProba_1", 0.45161290322580644 AS "Proba_2", -0.79492987487 AS "LogProba_2", 0.41935483870967744 AS "Proba_3", -0.869037847024 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.047619047619047616 AS "Proba_1", -3.04452243772 AS "LogProba_1", 0.09523809523809523 AS "Proba_2", -2.35137525716 AS "LogProba_2", 0.8571428571428571 AS "Proba_3", -0.154150679827 AS "LogProba_3", 3 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Proba_3" AS "Proba_3", "DT_node_data_2"."LogProba_3" AS "LogProba_3", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0" AS "Proba_2_0", "DT_Output_2"."LogProba_0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1" AS "Proba_2_1", "DT_Output_2"."LogProba_1" AS "LogProba_2_1", CAST(NULL AS FLOAT) AS "Score_2_2", "DT_Output_2"."Proba_2" AS "Proba_2_2", "DT_Output_2"."LogProba_2" AS "LogProba_2_2", CAST(NULL AS FLOAT) AS "Score_2_3", "DT_Output_2"."Proba_3" AS "Proba_2_3", "DT_Output_2"."LogProba_3" AS "LogProba_2_3" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.5268257856369019) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.46265339851379395) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.5268257856369019 AS threshold, 62 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26 AS "Proba_0", -1.34707364797 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.28 AS "Proba_2", -1.27296567581 AS "LogProba_2", 0.21 AS "Proba_3", -1.56064774826 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.043478260869565216 AS "Proba_0", -3.13549421593 AS "LogProba_0", 0.5434782608695652 AS "Proba_1", -0.609765571621 AS "LogProba_1", 0.043478260869565216 AS "Proba_2", -3.13549421593 AS "LogProba_2", 0.3695652173913043 AS "Proba_3", -0.995428052433 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -0.46265339851379395 AS threshold, 33 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4444444444444444 AS "Proba_0", -0.810930216216 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.48148148148148145 AS "Proba_2", -0.730887508543 AS "LogProba_2", 0.07407407407407407 AS "Proba_3", -2.60268968544 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6666666666666666 AS "Proba_0", -0.405465108108 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.3333333333333333 AS "Proba_2", -1.09861228867 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16666666666666666 AS "Proba_0", -1.79175946923 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.6666666666666666 AS "Proba_2", -0.405465108108 AS "LogProba_2", 0.16666666666666666 AS "Proba_3", -1.79175946923 AS "LogProba_3", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Proba_3" AS "Proba_3", "DT_node_data_3"."LogProba_3" AS "LogProba_3", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0" AS "Proba_3_0", "DT_Output_3"."LogProba_0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1" AS "Proba_3_1", "DT_Output_3"."LogProba_1" AS "LogProba_3_1", CAST(NULL AS FLOAT) AS "Score_3_2", "DT_Output_3"."Proba_2" AS "Proba_3_2", "DT_Output_3"."LogProba_2" AS "LogProba_3_2", CAST(NULL AS FLOAT) AS "Score_3_3", "DT_Output_3"."Proba_3" AS "Proba_3_3", "DT_Output_3"."LogProba_3" AS "LogProba_3_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6209845542907715) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.07138961553573608) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6209845542907715 AS threshold, 65 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.34 AS "Proba_0", -1.07880966137 AS "LogProba_0", 0.21 AS "Proba_1", -1.56064774826 AS "LogProba_1", 0.18 AS "Proba_2", -1.71479842809 AS "LogProba_2", 0.27 AS "Proba_3", -1.30933331998 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05 AS "Proba_0", -2.99573227355 AS "LogProba_0", 0.525 AS "Proba_1", -0.644357016391 AS "LogProba_1", 0.05 AS "Proba_2", -2.99573227355 AS "LogProba_2", 0.375 AS "Proba_3", -0.980829253012 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 0.07138961553573608 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5333333333333333 AS "Proba_0", -0.628608659422 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.26666666666666666 AS "Proba_2", -1.32175583998 AS "LogProba_2", 0.2 AS "Proba_3", -1.60943791243 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.717948717948718 AS "Proba_0", -0.331357135954 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.23076923076923078 AS "Proba_2", -1.46633706879 AS "LogProba_2", 0.05128205128205128 AS "Proba_3", -2.97041446557 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19047619047619047 AS "Proba_0", -1.6582280766 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.3333333333333333 AS "Proba_2", -1.09861228867 AS "LogProba_2", 0.47619047619047616 AS "Proba_3", -0.741937344729 AS "LogProba_3", 3 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Proba_0" AS "Proba_0", "DT_node_data_4"."LogProba_0" AS "LogProba_0", "DT_node_data_4"."Proba_1" AS "Proba_1", "DT_node_data_4"."LogProba_1" AS "LogProba_1", "DT_node_data_4"."Proba_2" AS "Proba_2", "DT_node_data_4"."LogProba_2" AS "LogProba_2", "DT_node_data_4"."Proba_3" AS "Proba_3", "DT_node_data_4"."LogProba_3" AS "LogProba_3", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0" AS "Proba_4_0", "DT_Output_4"."LogProba_0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1" AS "Proba_4_1", "DT_Output_4"."LogProba_1" AS "LogProba_4_1", CAST(NULL AS FLOAT) AS "Score_4_2", "DT_Output_4"."Proba_2" AS "Proba_4_2", "DT_Output_4"."LogProba_2" AS "LogProba_4_2", CAST(NULL AS FLOAT) AS "Score_4_3", "DT_Output_4"."Proba_3" AS "Proba_4_3", "DT_Output_4"."LogProba_3" AS "LogProba_4_3" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6209845542907715) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.4402797818183899) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6209845542907715 AS threshold, 63 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21 AS "Proba_0", -1.56064774826 AS "LogProba_0", 0.26 AS "Proba_1", -1.34707364797 AS "LogProba_1", 0.29 AS "Proba_2", -1.237874356 AS "LogProba_2", 0.24 AS "Proba_3", -1.42711635564 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.04081632653061224 AS "Proba_0", -3.19867311755 AS "LogProba_0", 0.5306122448979592 AS "Proba_1", -0.633723760089 AS "LogProba_1", 0.10204081632653061 AS "Proba_2", -2.28238238568 AS "LogProba_2", 0.32653061224489793 AS "Proba_3", -1.11923157587 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_4' AS feature, 0.4402797818183899 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.37254901960784315 AS "Proba_0", -0.987386653558 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.47058823529411764 AS "Proba_2", -0.753771802376 AS "LogProba_2", 0.1568627450980392 AS "Proba_3", -1.85238409104 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5769230769230769 AS "Proba_0", -0.550046336919 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.15384615384615385 AS "Proba_2", -1.8718021769 AS "LogProba_2", 0.2692307692307692 AS "Proba_3", -1.31218638897 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16 AS "Proba_0", -1.83258146375 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.8 AS "Proba_2", -0.223143551314 AS "LogProba_2", 0.04 AS "Proba_3", -3.21887582487 AS "LogProba_3", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Proba_0" AS "Proba_0", "DT_node_data_5"."LogProba_0" AS "LogProba_0", "DT_node_data_5"."Proba_1" AS "Proba_1", "DT_node_data_5"."LogProba_1" AS "LogProba_1", "DT_node_data_5"."Proba_2" AS "Proba_2", "DT_node_data_5"."LogProba_2" AS "LogProba_2", "DT_node_data_5"."Proba_3" AS "Proba_3", "DT_node_data_5"."LogProba_3" AS "LogProba_3", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0" AS "Proba_5_0", "DT_Output_5"."LogProba_0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1" AS "Proba_5_1", "DT_Output_5"."LogProba_1" AS "LogProba_5_1", CAST(NULL AS FLOAT) AS "Score_5_2", "DT_Output_5"."Proba_2" AS "Proba_5_2", "DT_Output_5"."LogProba_2" AS "LogProba_5_2", CAST(NULL AS FLOAT) AS "Score_5_3", "DT_Output_5"."Proba_3" AS "Proba_5_3", "DT_Output_5"."LogProba_3" AS "LogProba_5_3" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.5675954222679138) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.20492297410964966) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.5675954222679138 AS threshold, 58 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19 AS "Proba_0", -1.66073120682 AS "LogProba_0", 0.31 AS "Proba_1", -1.1711829815 AS "LogProba_1", 0.26 AS "Proba_2", -1.34707364797 AS "LogProba_2", 0.24 AS "Proba_3", -1.42711635564 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05454545454545454 AS "Proba_0", -2.90872089656 AS "LogProba_0", 0.5636363636363636 AS "Proba_1", -0.573345980747 AS "LogProba_1", 0.09090909090909091 AS "Proba_2", -2.3978952728 AS "LogProba_2", 0.2909090909090909 AS "Proba_3", -1.23474446299 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -0.20492297410964966 AS threshold, 31 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35555555555555557 AS "Proba_0", -1.03407376753 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.4666666666666667 AS "Proba_2", -0.762140052047 AS "LogProba_2", 0.17777777777777778 AS "Proba_3", -1.72722094809 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6842105263157895 AS "Proba_0", -0.379489621705 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.3157894736842105 AS "Proba_2", -1.15267950994 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.11538461538461539 AS "Proba_0", -2.15948424935 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.5769230769230769 AS "Proba_2", -0.550046336919 AS "LogProba_2", 0.3076923076923077 AS "Proba_3", -1.17865499634 AS "LogProba_3", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Proba_0" AS "Proba_0", "DT_node_data_6"."LogProba_0" AS "LogProba_0", "DT_node_data_6"."Proba_1" AS "Proba_1", "DT_node_data_6"."LogProba_1" AS "LogProba_1", "DT_node_data_6"."Proba_2" AS "Proba_2", "DT_node_data_6"."LogProba_2" AS "LogProba_2", "DT_node_data_6"."Proba_3" AS "Proba_3", "DT_node_data_6"."LogProba_3" AS "LogProba_3", "DT_node_data_6"."Decision" AS "Decision" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, CAST(NULL AS FLOAT) AS "Score_6_0", "DT_Output_6"."Proba_0" AS "Proba_6_0", "DT_Output_6"."LogProba_0" AS "LogProba_6_0", CAST(NULL AS FLOAT) AS "Score_6_1", "DT_Output_6"."Proba_1" AS "Proba_6_1", "DT_Output_6"."LogProba_1" AS "LogProba_6_1", CAST(NULL AS FLOAT) AS "Score_6_2", "DT_Output_6"."Proba_2" AS "Proba_6_2", "DT_Output_6"."LogProba_2" AS "LogProba_6_2", CAST(NULL AS FLOAT) AS "Score_6_3", "DT_Output_6"."Proba_3" AS "Proba_6_3", "DT_Output_6"."LogProba_3" AS "LogProba_6_3" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.4247879981994629) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.7126106023788452) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.4247879981994629 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23 AS "Proba_0", -1.46967597006 AS "LogProba_0", 0.24 AS "Proba_1", -1.42711635564 AS "LogProba_1", 0.27 AS "Proba_2", -1.30933331998 AS "LogProba_2", 0.26 AS "Proba_3", -1.34707364797 AS "LogProba_3", 2 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -0.7126106023788452 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14285714285714285 AS "Proba_0", -1.94591014906 AS "LogProba_0", 0.38095238095238093 AS "Proba_1", -0.965080896044 AS "LogProba_1", 0.07936507936507936 AS "Proba_2", -2.53369681396 AS "LogProba_2", 0.3968253968253968 AS "Proba_3", -0.924258901523 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18518518518518517 AS "Proba_0", -1.68639895357 AS "LogProba_0", 0.7407407407407407 AS "Proba_1", -0.30010459245 AS "LogProba_1", 0.07407407407407407 AS "Proba_2", -2.60268968544 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1111111111111111 AS "Proba_0", -2.19722457734 AS "LogProba_0", 0.1111111111111111 AS "Proba_1", -2.19722457734 AS "LogProba_1", 0.08333333333333333 AS "Proba_2", -2.48490664979 AS "LogProba_2", 0.6944444444444444 AS "Proba_3", -0.364643113588 AS "LogProba_3", 3 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3783783783783784 AS "Proba_0", -0.971860583029 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.5945945945945946 AS "Proba_2", -0.519875459286 AS "LogProba_2", 0.02702702702702703 AS "Proba_3", -3.61091791264 AS "LogProba_3", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Proba_0" AS "Proba_0", "DT_node_data_7"."LogProba_0" AS "LogProba_0", "DT_node_data_7"."Proba_1" AS "Proba_1", "DT_node_data_7"."LogProba_1" AS "LogProba_1", "DT_node_data_7"."Proba_2" AS "Proba_2", "DT_node_data_7"."LogProba_2" AS "LogProba_2", "DT_node_data_7"."Proba_3" AS "Proba_3", "DT_node_data_7"."LogProba_3" AS "LogProba_3", "DT_node_data_7"."Decision" AS "Decision" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, CAST(NULL AS FLOAT) AS "Score_7_0", "DT_Output_7"."Proba_0" AS "Proba_7_0", "DT_Output_7"."LogProba_0" AS "LogProba_7_0", CAST(NULL AS FLOAT) AS "Score_7_1", "DT_Output_7"."Proba_1" AS "Proba_7_1", "DT_Output_7"."LogProba_1" AS "LogProba_7_1", CAST(NULL AS FLOAT) AS "Score_7_2", "DT_Output_7"."Proba_2" AS "Proba_7_2", "DT_Output_7"."LogProba_2" AS "LogProba_7_2", CAST(NULL AS FLOAT) AS "Score_7_3", "DT_Output_7"."Proba_3" AS "Proba_7_3", "DT_Output_7"."LogProba_3" AS "LogProba_7_3" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.5066481232643127) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.2739104628562927) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.5066481232643127 AS threshold, 65 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.37 AS "Proba_0", -0.994252273344 AS "LogProba_0", 0.24 AS "Proba_1", -1.42711635564 AS "LogProba_1", 0.18 AS "Proba_2", -1.71479842809 AS "LogProba_2", 0.21 AS "Proba_3", -1.56064774826 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1111111111111111 AS "Proba_0", -2.19722457734 AS "LogProba_0", 0.5333333333333333 AS "Proba_1", -0.628608659422 AS "LogProba_1", 0.06666666666666667 AS "Proba_2", -2.7080502011 AS "LogProba_2", 0.28888888888888886 AS "Proba_3", -1.24171313231 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, -0.2739104628562927 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5818181818181818 AS "Proba_0", -0.541597282433 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.2727272727272727 AS "Proba_2", -1.29928298413 AS "LogProba_2", 0.14545454545454545 AS "Proba_3", -1.92789164355 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7142857142857143 AS "Proba_0", -0.336472236621 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.2857142857142857 AS "Proba_3", -1.2527629685 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.4411764705882353 AS "Proba_2", -0.818310323514 AS "LogProba_2", 0.058823529411764705 AS "Proba_3", -2.83321334406 AS "LogProba_3", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Proba_0" AS "Proba_0", "DT_node_data_8"."LogProba_0" AS "LogProba_0", "DT_node_data_8"."Proba_1" AS "Proba_1", "DT_node_data_8"."LogProba_1" AS "LogProba_1", "DT_node_data_8"."Proba_2" AS "Proba_2", "DT_node_data_8"."LogProba_2" AS "LogProba_2", "DT_node_data_8"."Proba_3" AS "Proba_3", "DT_node_data_8"."LogProba_3" AS "LogProba_3", "DT_node_data_8"."Decision" AS "Decision" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, CAST(NULL AS FLOAT) AS "Score_8_0", "DT_Output_8"."Proba_0" AS "Proba_8_0", "DT_Output_8"."LogProba_0" AS "LogProba_8_0", CAST(NULL AS FLOAT) AS "Score_8_1", "DT_Output_8"."Proba_1" AS "Proba_8_1", "DT_Output_8"."LogProba_1" AS "LogProba_8_1", CAST(NULL AS FLOAT) AS "Score_8_2", "DT_Output_8"."Proba_2" AS "Proba_8_2", "DT_Output_8"."LogProba_2" AS "LogProba_8_2", CAST(NULL AS FLOAT) AS "Score_8_3", "DT_Output_8"."Proba_3" AS "Proba_8_3", "DT_Output_8"."LogProba_3" AS "LogProba_8_3" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6255994439125061) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.0721503496170044) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6255994439125061 AS threshold, 61 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.34 AS "Proba_0", -1.07880966137 AS "LogProba_0", 0.27 AS "Proba_1", -1.30933331998 AS "LogProba_1", 0.22 AS "Proba_2", -1.51412773263 AS "LogProba_2", 0.17 AS "Proba_3", -1.77195684193 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05405405405405406 AS "Proba_0", -2.91777073208 AS "LogProba_0", 0.7297297297297297 AS "Proba_1", -0.31508104664 AS "LogProba_1", 0.05405405405405406 AS "Proba_2", -2.91777073208 AS "LogProba_2", 0.16216216216216217 AS "Proba_3", -1.81915844342 AS "LogProba_3", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_18' AS feature, 0.0721503496170044 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5079365079365079 AS "Proba_0", -0.677398823592 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.31746031746031744 AS "Proba_2", -1.14740245284 AS "LogProba_2", 0.1746031746031746 AS "Proba_3", -1.74523945359 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7777777777777778 AS "Proba_0", -0.251314428281 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.16666666666666666 AS "Proba_2", -1.79175946923 AS "LogProba_2", 0.05555555555555555 AS "Proba_3", -2.8903717579 AS "LogProba_3", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14814814814814814 AS "Proba_0", -1.90954250488 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.5185185185185185 AS "Proba_2", -0.656779536389 AS "LogProba_2", 0.3333333333333333 AS "Proba_3", -1.09861228867 AS "LogProba_3", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Proba_0" AS "Proba_0", "DT_node_data_9"."LogProba_0" AS "LogProba_0", "DT_node_data_9"."Proba_1" AS "Proba_1", "DT_node_data_9"."LogProba_1" AS "LogProba_1", "DT_node_data_9"."Proba_2" AS "Proba_2", "DT_node_data_9"."LogProba_2" AS "LogProba_2", "DT_node_data_9"."Proba_3" AS "Proba_3", "DT_node_data_9"."LogProba_3" AS "LogProba_3", "DT_node_data_9"."Decision" AS "Decision" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, CAST(NULL AS FLOAT) AS "Score_9_0", "DT_Output_9"."Proba_0" AS "Proba_9_0", "DT_Output_9"."LogProba_0" AS "LogProba_9_0", CAST(NULL AS FLOAT) AS "Score_9_1", "DT_Output_9"."Proba_1" AS "Proba_9_1", "DT_Output_9"."LogProba_1" AS "LogProba_9_1", CAST(NULL AS FLOAT) AS "Score_9_2", "DT_Output_9"."Proba_2" AS "Proba_9_2", "DT_Output_9"."LogProba_2" AS "LogProba_9_2", CAST(NULL AS FLOAT) AS "Score_9_3", "DT_Output_9"."Proba_3" AS "Proba_9_3", "DT_Output_9"."LogProba_3" AS "LogProba_9_3" 
FROM "DT_Output_9"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0".join_key_0 AS join_key_0, "RF_Tree_0"."Score_0_0" AS "Score_0_0", "RF_Tree_0"."Proba_0_0" AS "Proba_0_0", "RF_Tree_0"."LogProba_0_0" AS "LogProba_0_0", "RF_Tree_0"."Score_0_1" AS "Score_0_1", "RF_Tree_0"."Proba_0_1" AS "Proba_0_1", "RF_Tree_0"."LogProba_0_1" AS "LogProba_0_1", "RF_Tree_0"."Score_0_2" AS "Score_0_2", "RF_Tree_0"."Proba_0_2" AS "Proba_0_2", "RF_Tree_0"."LogProba_0_2" AS "LogProba_0_2", "RF_Tree_0"."Score_0_3" AS "Score_0_3", "RF_Tree_0"."Proba_0_3" AS "Proba_0_3", "RF_Tree_0"."LogProba_0_3" AS "LogProba_0_3", "RF_Tree_1".join_key_1 AS join_key_1, "RF_Tree_1"."Score_1_0" AS "Score_1_0", "RF_Tree_1"."Proba_1_0" AS "Proba_1_0", "RF_Tree_1"."LogProba_1_0" AS "LogProba_1_0", "RF_Tree_1"."Score_1_1" AS "Score_1_1", "RF_Tree_1"."Proba_1_1" AS "Proba_1_1", "RF_Tree_1"."LogProba_1_1" AS "LogProba_1_1", "RF_Tree_1"."Score_1_2" AS "Score_1_2", "RF_Tree_1"."Proba_1_2" AS "Proba_1_2", "RF_Tree_1"."LogProba_1_2" AS "LogProba_1_2", "RF_Tree_1"."Score_1_3" AS "Score_1_3", "RF_Tree_1"."Proba_1_3" AS "Proba_1_3", "RF_Tree_1"."LogProba_1_3" AS "LogProba_1_3", "RF_Tree_2".join_key_2 AS join_key_2, "RF_Tree_2"."Score_2_0" AS "Score_2_0", "RF_Tree_2"."Proba_2_0" AS "Proba_2_0", "RF_Tree_2"."LogProba_2_0" AS "LogProba_2_0", "RF_Tree_2"."Score_2_1" AS "Score_2_1", "RF_Tree_2"."Proba_2_1" AS "Proba_2_1", "RF_Tree_2"."LogProba_2_1" AS "LogProba_2_1", "RF_Tree_2"."Score_2_2" AS "Score_2_2", "RF_Tree_2"."Proba_2_2" AS "Proba_2_2", "RF_Tree_2"."LogProba_2_2" AS "LogProba_2_2", "RF_Tree_2"."Score_2_3" AS "Score_2_3", "RF_Tree_2"."Proba_2_3" AS "Proba_2_3", "RF_Tree_2"."LogProba_2_3" AS "LogProba_2_3", "RF_Tree_3".join_key_3 AS join_key_3, "RF_Tree_3"."Score_3_0" AS "Score_3_0", "RF_Tree_3"."Proba_3_0" AS "Proba_3_0", "RF_Tree_3"."LogProba_3_0" AS "LogProba_3_0", "RF_Tree_3"."Score_3_1" AS "Score_3_1", "RF_Tree_3"."Proba_3_1" AS "Proba_3_1", "RF_Tree_3"."LogProba_3_1" AS "LogProba_3_1", "RF_Tree_3"."Score_3_2" AS "Score_3_2", "RF_Tree_3"."Proba_3_2" AS "Proba_3_2", "RF_Tree_3"."LogProba_3_2" AS "LogProba_3_2", "RF_Tree_3"."Score_3_3" AS "Score_3_3", "RF_Tree_3"."Proba_3_3" AS "Proba_3_3", "RF_Tree_3"."LogProba_3_3" AS "LogProba_3_3", "RF_Tree_4".join_key_4 AS join_key_4, "RF_Tree_4"."Score_4_0" AS "Score_4_0", "RF_Tree_4"."Proba_4_0" AS "Proba_4_0", "RF_Tree_4"."LogProba_4_0" AS "LogProba_4_0", "RF_Tree_4"."Score_4_1" AS "Score_4_1", "RF_Tree_4"."Proba_4_1" AS "Proba_4_1", "RF_Tree_4"."LogProba_4_1" AS "LogProba_4_1", "RF_Tree_4"."Score_4_2" AS "Score_4_2", "RF_Tree_4"."Proba_4_2" AS "Proba_4_2", "RF_Tree_4"."LogProba_4_2" AS "LogProba_4_2", "RF_Tree_4"."Score_4_3" AS "Score_4_3", "RF_Tree_4"."Proba_4_3" AS "Proba_4_3", "RF_Tree_4"."LogProba_4_3" AS "LogProba_4_3", "RF_Tree_5".join_key_5 AS join_key_5, "RF_Tree_5"."Score_5_0" AS "Score_5_0", "RF_Tree_5"."Proba_5_0" AS "Proba_5_0", "RF_Tree_5"."LogProba_5_0" AS "LogProba_5_0", "RF_Tree_5"."Score_5_1" AS "Score_5_1", "RF_Tree_5"."Proba_5_1" AS "Proba_5_1", "RF_Tree_5"."LogProba_5_1" AS "LogProba_5_1", "RF_Tree_5"."Score_5_2" AS "Score_5_2", "RF_Tree_5"."Proba_5_2" AS "Proba_5_2", "RF_Tree_5"."LogProba_5_2" AS "LogProba_5_2", "RF_Tree_5"."Score_5_3" AS "Score_5_3", "RF_Tree_5"."Proba_5_3" AS "Proba_5_3", "RF_Tree_5"."LogProba_5_3" AS "LogProba_5_3", "RF_Tree_6".join_key_6 AS join_key_6, "RF_Tree_6"."Score_6_0" AS "Score_6_0", "RF_Tree_6"."Proba_6_0" AS "Proba_6_0", "RF_Tree_6"."LogProba_6_0" AS "LogProba_6_0", "RF_Tree_6"."Score_6_1" AS "Score_6_1", "RF_Tree_6"."Proba_6_1" AS "Proba_6_1", "RF_Tree_6"."LogProba_6_1" AS "LogProba_6_1", "RF_Tree_6"."Score_6_2" AS "Score_6_2", "RF_Tree_6"."Proba_6_2" AS "Proba_6_2", "RF_Tree_6"."LogProba_6_2" AS "LogProba_6_2", "RF_Tree_6"."Score_6_3" AS "Score_6_3", "RF_Tree_6"."Proba_6_3" AS "Proba_6_3", "RF_Tree_6"."LogProba_6_3" AS "LogProba_6_3", "RF_Tree_7".join_key_7 AS join_key_7, "RF_Tree_7"."Score_7_0" AS "Score_7_0", "RF_Tree_7"."Proba_7_0" AS "Proba_7_0", "RF_Tree_7"."LogProba_7_0" AS "LogProba_7_0", "RF_Tree_7"."Score_7_1" AS "Score_7_1", "RF_Tree_7"."Proba_7_1" AS "Proba_7_1", "RF_Tree_7"."LogProba_7_1" AS "LogProba_7_1", "RF_Tree_7"."Score_7_2" AS "Score_7_2", "RF_Tree_7"."Proba_7_2" AS "Proba_7_2", "RF_Tree_7"."LogProba_7_2" AS "LogProba_7_2", "RF_Tree_7"."Score_7_3" AS "Score_7_3", "RF_Tree_7"."Proba_7_3" AS "Proba_7_3", "RF_Tree_7"."LogProba_7_3" AS "LogProba_7_3", "RF_Tree_8".join_key_8 AS join_key_8, "RF_Tree_8"."Score_8_0" AS "Score_8_0", "RF_Tree_8"."Proba_8_0" AS "Proba_8_0", "RF_Tree_8"."LogProba_8_0" AS "LogProba_8_0", "RF_Tree_8"."Score_8_1" AS "Score_8_1", "RF_Tree_8"."Proba_8_1" AS "Proba_8_1", "RF_Tree_8"."LogProba_8_1" AS "LogProba_8_1", "RF_Tree_8"."Score_8_2" AS "Score_8_2", "RF_Tree_8"."Proba_8_2" AS "Proba_8_2", "RF_Tree_8"."LogProba_8_2" AS "LogProba_8_2", "RF_Tree_8"."Score_8_3" AS "Score_8_3", "RF_Tree_8"."Proba_8_3" AS "Proba_8_3", "RF_Tree_8"."LogProba_8_3" AS "LogProba_8_3", "RF_Tree_9".join_key_9 AS join_key_9, "RF_Tree_9"."Score_9_0" AS "Score_9_0", "RF_Tree_9"."Proba_9_0" AS "Proba_9_0", "RF_Tree_9"."LogProba_9_0" AS "LogProba_9_0", "RF_Tree_9"."Score_9_1" AS "Score_9_1", "RF_Tree_9"."Proba_9_1" AS "Proba_9_1", "RF_Tree_9"."LogProba_9_1" AS "LogProba_9_1", "RF_Tree_9"."Score_9_2" AS "Score_9_2", "RF_Tree_9"."Proba_9_2" AS "Proba_9_2", "RF_Tree_9"."LogProba_9_2" AS "LogProba_9_2", "RF_Tree_9"."Score_9_3" AS "Score_9_3", "RF_Tree_9"."Proba_9_3" AS "Proba_9_3", "RF_Tree_9"."LogProba_9_3" AS "LogProba_9_3" 
FROM "RF_Tree_0" LEFT OUTER JOIN "RF_Tree_1" ON "RF_Tree_0".join_key_0 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_2" ON "RF_Tree_2".join_key_2 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_3" ON "RF_Tree_3".join_key_3 = "RF_Tree_2".join_key_2 LEFT OUTER JOIN "RF_Tree_4" ON "RF_Tree_4".join_key_4 = "RF_Tree_3".join_key_3 LEFT OUTER JOIN "RF_Tree_5" ON "RF_Tree_5".join_key_5 = "RF_Tree_4".join_key_4 LEFT OUTER JOIN "RF_Tree_6" ON "RF_Tree_6".join_key_6 = "RF_Tree_5".join_key_5 LEFT OUTER JOIN "RF_Tree_7" ON "RF_Tree_7".join_key_7 = "RF_Tree_6".join_key_6 LEFT OUTER JOIN "RF_Tree_8" ON "RF_Tree_8".join_key_8 = "RF_Tree_7".join_key_7 LEFT OUTER JOIN "RF_Tree_9" ON "RF_Tree_9".join_key_9 = "RF_Tree_8".join_key_8), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0 AS "KEY", "RF_Join_CTE"."Score_0_0" / 10 + "RF_Join_CTE"."Score_1_0" / 10 + "RF_Join_CTE"."Score_2_0" / 10 + "RF_Join_CTE"."Score_3_0" / 10 + "RF_Join_CTE"."Score_4_0" / 10 + "RF_Join_CTE"."Score_5_0" / 10 + "RF_Join_CTE"."Score_6_0" / 10 + "RF_Join_CTE"."Score_7_0" / 10 + "RF_Join_CTE"."Score_8_0" / 10 + "RF_Join_CTE"."Score_9_0" / 10 AS "Score_0", "RF_Join_CTE"."Proba_0_0" / 10 + "RF_Join_CTE"."Proba_1_0" / 10 + "RF_Join_CTE"."Proba_2_0" / 10 + "RF_Join_CTE"."Proba_3_0" / 10 + "RF_Join_CTE"."Proba_4_0" / 10 + "RF_Join_CTE"."Proba_5_0" / 10 + "RF_Join_CTE"."Proba_6_0" / 10 + "RF_Join_CTE"."Proba_7_0" / 10 + "RF_Join_CTE"."Proba_8_0" / 10 + "RF_Join_CTE"."Proba_9_0" / 10 AS "Proba_0", "RF_Join_CTE"."LogProba_0_0" / 10 + "RF_Join_CTE"."LogProba_1_0" / 10 + "RF_Join_CTE"."LogProba_2_0" / 10 + "RF_Join_CTE"."LogProba_3_0" / 10 + "RF_Join_CTE"."LogProba_4_0" / 10 + "RF_Join_CTE"."LogProba_5_0" / 10 + "RF_Join_CTE"."LogProba_6_0" / 10 + "RF_Join_CTE"."LogProba_7_0" / 10 + "RF_Join_CTE"."LogProba_8_0" / 10 + "RF_Join_CTE"."LogProba_9_0" / 10 AS "LogProba_0", "RF_Join_CTE"."Score_0_1" / 10 + "RF_Join_CTE"."Score_1_1" / 10 + "RF_Join_CTE"."Score_2_1" / 10 + "RF_Join_CTE"."Score_3_1" / 10 + "RF_Join_CTE"."Score_4_1" / 10 + "RF_Join_CTE"."Score_5_1" / 10 + "RF_Join_CTE"."Score_6_1" / 10 + "RF_Join_CTE"."Score_7_1" / 10 + "RF_Join_CTE"."Score_8_1" / 10 + "RF_Join_CTE"."Score_9_1" / 10 AS "Score_1", "RF_Join_CTE"."Proba_0_1" / 10 + "RF_Join_CTE"."Proba_1_1" / 10 + "RF_Join_CTE"."Proba_2_1" / 10 + "RF_Join_CTE"."Proba_3_1" / 10 + "RF_Join_CTE"."Proba_4_1" / 10 + "RF_Join_CTE"."Proba_5_1" / 10 + "RF_Join_CTE"."Proba_6_1" / 10 + "RF_Join_CTE"."Proba_7_1" / 10 + "RF_Join_CTE"."Proba_8_1" / 10 + "RF_Join_CTE"."Proba_9_1" / 10 AS "Proba_1", "RF_Join_CTE"."LogProba_0_1" / 10 + "RF_Join_CTE"."LogProba_1_1" / 10 + "RF_Join_CTE"."LogProba_2_1" / 10 + "RF_Join_CTE"."LogProba_3_1" / 10 + "RF_Join_CTE"."LogProba_4_1" / 10 + "RF_Join_CTE"."LogProba_5_1" / 10 + "RF_Join_CTE"."LogProba_6_1" / 10 + "RF_Join_CTE"."LogProba_7_1" / 10 + "RF_Join_CTE"."LogProba_8_1" / 10 + "RF_Join_CTE"."LogProba_9_1" / 10 AS "LogProba_1", "RF_Join_CTE"."Score_0_2" / 10 + "RF_Join_CTE"."Score_1_2" / 10 + "RF_Join_CTE"."Score_2_2" / 10 + "RF_Join_CTE"."Score_3_2" / 10 + "RF_Join_CTE"."Score_4_2" / 10 + "RF_Join_CTE"."Score_5_2" / 10 + "RF_Join_CTE"."Score_6_2" / 10 + "RF_Join_CTE"."Score_7_2" / 10 + "RF_Join_CTE"."Score_8_2" / 10 + "RF_Join_CTE"."Score_9_2" / 10 AS "Score_2", "RF_Join_CTE"."Proba_0_2" / 10 + "RF_Join_CTE"."Proba_1_2" / 10 + "RF_Join_CTE"."Proba_2_2" / 10 + "RF_Join_CTE"."Proba_3_2" / 10 + "RF_Join_CTE"."Proba_4_2" / 10 + "RF_Join_CTE"."Proba_5_2" / 10 + "RF_Join_CTE"."Proba_6_2" / 10 + "RF_Join_CTE"."Proba_7_2" / 10 + "RF_Join_CTE"."Proba_8_2" / 10 + "RF_Join_CTE"."Proba_9_2" / 10 AS "Proba_2", "RF_Join_CTE"."LogProba_0_2" / 10 + "RF_Join_CTE"."LogProba_1_2" / 10 + "RF_Join_CTE"."LogProba_2_2" / 10 + "RF_Join_CTE"."LogProba_3_2" / 10 + "RF_Join_CTE"."LogProba_4_2" / 10 + "RF_Join_CTE"."LogProba_5_2" / 10 + "RF_Join_CTE"."LogProba_6_2" / 10 + "RF_Join_CTE"."LogProba_7_2" / 10 + "RF_Join_CTE"."LogProba_8_2" / 10 + "RF_Join_CTE"."LogProba_9_2" / 10 AS "LogProba_2", "RF_Join_CTE"."Score_0_3" / 10 + "RF_Join_CTE"."Score_1_3" / 10 + "RF_Join_CTE"."Score_2_3" / 10 + "RF_Join_CTE"."Score_3_3" / 10 + "RF_Join_CTE"."Score_4_3" / 10 + "RF_Join_CTE"."Score_5_3" / 10 + "RF_Join_CTE"."Score_6_3" / 10 + "RF_Join_CTE"."Score_7_3" / 10 + "RF_Join_CTE"."Score_8_3" / 10 + "RF_Join_CTE"."Score_9_3" / 10 AS "Score_3", "RF_Join_CTE"."Proba_0_3" / 10 + "RF_Join_CTE"."Proba_1_3" / 10 + "RF_Join_CTE"."Proba_2_3" / 10 + "RF_Join_CTE"."Proba_3_3" / 10 + "RF_Join_CTE"."Proba_4_3" / 10 + "RF_Join_CTE"."Proba_5_3" / 10 + "RF_Join_CTE"."Proba_6_3" / 10 + "RF_Join_CTE"."Proba_7_3" / 10 + "RF_Join_CTE"."Proba_8_3" / 10 + "RF_Join_CTE"."Proba_9_3" / 10 AS "Proba_3", "RF_Join_CTE"."LogProba_0_3" / 10 + "RF_Join_CTE"."LogProba_1_3" / 10 + "RF_Join_CTE"."LogProba_2_3" / 10 + "RF_Join_CTE"."LogProba_3_3" / 10 + "RF_Join_CTE"."LogProba_4_3" / 10 + "RF_Join_CTE"."LogProba_5_3" / 10 + "RF_Join_CTE"."LogProba_6_3" / 10 + "RF_Join_CTE"."LogProba_7_3" / 10 + "RF_Join_CTE"."LogProba_8_3" / 10 + "RF_Join_CTE"."LogProba_9_3" / 10 AS "LogProba_3" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Score_3" AS "Score_3", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."Proba_3" AS "Proba_3", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", "RF_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte