-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.170220411278 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.0704942172332 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.00935852342383 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.075371673784 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.431856127042 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.287739218444 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.397666867074 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.135040027011 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.0644810108618 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.048607817971 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.327014923994 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.0194259940247 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.025714500143 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.0843783224063 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0332292529306 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.0642575886657 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0525523959404 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.109094240637 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.0504838824383 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.153168027723 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.170220411278 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.0704942172332 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.00935852342383 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.075371673784 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.431856127042 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.287739218444 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.397666867074 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.135040027011 AS impute_9, "ADS_imp_1_OUT".impute_10 - -0.0644810108618 AS impute_10, "ADS_imp_1_OUT".impute_11 - -0.048607817971 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.327014923994 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.0194259940247 AS impute_13, "ADS_imp_1_OUT".impute_14 - -0.025714500143 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.0843783224063 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0332292529306 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.0642575886657 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.0525523959404 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.109094240637 AS impute_19, "ADS_imp_1_OUT".impute_20 - -0.0504838824383 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.153168027723 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.00287268357424 + "CenteredDataForPCA".impute_3 * 0.498830761225 + "CenteredDataForPCA".impute_4 * 0.0333921375189 + "CenteredDataForPCA".impute_5 * -0.0256485903963 + "CenteredDataForPCA".impute_6 * 0.073109262688 + "CenteredDataForPCA".impute_7 * 0.619528112671 + "CenteredDataForPCA".impute_8 * -0.375813303247 + "CenteredDataForPCA".impute_9 * -0.290359070895 + "CenteredDataForPCA".impute_10 * 0.019002174762 + "CenteredDataForPCA".impute_11 * 0.0462720042819 + "CenteredDataForPCA".impute_12 * 0.341198413173 + "CenteredDataForPCA".impute_13 * 0.0121863055268 + "CenteredDataForPCA".impute_14 * -0.0405593131379 + "CenteredDataForPCA".impute_15 * 0.0191334855334 + "CenteredDataForPCA".impute_16 * -0.0580909209256 + "CenteredDataForPCA".impute_17 * -0.0619234924252 + "CenteredDataForPCA".impute_18 * 0.0313041660253 + "CenteredDataForPCA".impute_19 * 0.0119586467385 + "CenteredDataForPCA".impute_20 * 0.0537147059028 + "CenteredDataForPCA".impute_21 * 0.0488585982902 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.0587367737253 + "CenteredDataForPCA".impute_3 * -0.351866010427 + "CenteredDataForPCA".impute_4 * 0.0645932481694 + "CenteredDataForPCA".impute_5 * 0.105548540447 + "CenteredDataForPCA".impute_6 * -0.673314701138 + "CenteredDataForPCA".impute_7 * 0.0775059466765 + "CenteredDataForPCA".impute_8 * -0.157332662743 + "CenteredDataForPCA".impute_9 * 0.245838063857 + "CenteredDataForPCA".impute_10 * 0.0167431996581 + "CenteredDataForPCA".impute_11 * 0.0435817394234 + "CenteredDataForPCA".impute_12 * 0.54060364937 + "CenteredDataForPCA".impute_13 * -0.00124172450369 + "CenteredDataForPCA".impute_14 * 0.0387496975282 + "CenteredDataForPCA".impute_15 * 0.0695139364986 + "CenteredDataForPCA".impute_16 * -0.0402584544445 + "CenteredDataForPCA".impute_17 * -0.0143366671909 + "CenteredDataForPCA".impute_18 * -0.0444349476776 + "CenteredDataForPCA".impute_19 * 0.0670239490697 + "CenteredDataForPCA".impute_20 * 0.0435420439325 + "CenteredDataForPCA".impute_21 * -0.0438360264667 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.118933906154 + "CenteredDataForPCA".impute_3 * 0.411256011243 + "CenteredDataForPCA".impute_4 * 0.0360137046565 + "CenteredDataForPCA".impute_5 * 0.132451732155 + "CenteredDataForPCA".impute_6 * 0.0993833823153 + "CenteredDataForPCA".impute_7 * -0.0295653551936 + "CenteredDataForPCA".impute_8 * 0.51195196219 + "CenteredDataForPCA".impute_9 * 0.375484763193 + "CenteredDataForPCA".impute_10 * 0.177587166113 + "CenteredDataForPCA".impute_11 * -0.114893551785 + "CenteredDataForPCA".impute_12 * 0.389261421172 + "CenteredDataForPCA".impute_13 * 0.00287359801414 + "CenteredDataForPCA".impute_14 * -0.0613008130824 + "CenteredDataForPCA".impute_15 * -0.0882004282911 + "CenteredDataForPCA".impute_16 * 0.249112984666 + "CenteredDataForPCA".impute_17 * 0.300452479645 + "CenteredDataForPCA".impute_18 * 0.0886077310907 + "CenteredDataForPCA".impute_19 * -0.0515948513721 + "CenteredDataForPCA".impute_20 * 0.0897186815664 + "CenteredDataForPCA".impute_21 * 0.0731345761247 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.288953184125 + "CenteredDataForPCA".impute_3 * -0.126439678318 + "CenteredDataForPCA".impute_4 * 0.275157404631 + "CenteredDataForPCA".impute_5 * 0.203537477733 + "CenteredDataForPCA".impute_6 * 0.105200359169 + "CenteredDataForPCA".impute_7 * -0.0640295574705 + "CenteredDataForPCA".impute_8 * 0.303476393953 + "CenteredDataForPCA".impute_9 * -0.516131703995 + "CenteredDataForPCA".impute_10 * 0.040069099006 + "CenteredDataForPCA".impute_11 * -0.270251151592 + "CenteredDataForPCA".impute_12 * 0.209193014425 + "CenteredDataForPCA".impute_13 * -0.161199488779 + "CenteredDataForPCA".impute_14 * 0.193479244069 + "CenteredDataForPCA".impute_15 * 0.270385492498 + "CenteredDataForPCA".impute_16 * 0.0858434246344 + "CenteredDataForPCA".impute_17 * -0.240574581934 + "CenteredDataForPCA".impute_18 * -0.24958391326 + "CenteredDataForPCA".impute_19 * 0.00490633234214 + "CenteredDataForPCA".impute_20 * 0.0805236127803 + "CenteredDataForPCA".impute_21 * -0.144038140701 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.0587017329108 + "CenteredDataForPCA".impute_3 * 0.0931412402251 + "CenteredDataForPCA".impute_4 * 0.196588667985 + "CenteredDataForPCA".impute_5 * 0.0367558354476 + "CenteredDataForPCA".impute_6 * 0.00975623223269 + "CenteredDataForPCA".impute_7 * 0.0505809428106 + "CenteredDataForPCA".impute_8 * -0.0948826998449 + "CenteredDataForPCA".impute_9 * 0.132308737604 + "CenteredDataForPCA".impute_10 * -0.508190588767 + "CenteredDataForPCA".impute_11 * 0.0457855744563 + "CenteredDataForPCA".impute_12 * -0.0637522797874 + "CenteredDataForPCA".impute_13 * -0.421387505915 + "CenteredDataForPCA".impute_14 * 0.480563498909 + "CenteredDataForPCA".impute_15 * -0.289641806426 + "CenteredDataForPCA".impute_16 * 0.0307219233688 + "CenteredDataForPCA".impute_17 * 0.213840242018 + "CenteredDataForPCA".impute_18 * 0.039014021488 + "CenteredDataForPCA".impute_19 * -0.0491473762715 + "CenteredDataForPCA".impute_20 * 0.134498565194 + "CenteredDataForPCA".impute_21 * -0.305287468009 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.158066499722 + "CenteredDataForPCA".impute_3 * -0.000714644666025 + "CenteredDataForPCA".impute_4 * -0.102740881492 + "CenteredDataForPCA".impute_5 * -0.185839775488 + "CenteredDataForPCA".impute_6 * 0.0498346890847 + "CenteredDataForPCA".impute_7 * -0.0288310181608 + "CenteredDataForPCA".impute_8 * 0.237274815138 + "CenteredDataForPCA".impute_9 * -0.198164314671 + "CenteredDataForPCA".impute_10 * 0.259307881041 + "CenteredDataForPCA".impute_11 * 0.326198524353 + "CenteredDataForPCA".impute_12 * 0.198807013072 + "CenteredDataForPCA".impute_13 * 0.0018906266726 + "CenteredDataForPCA".impute_14 * 0.217611741633 + "CenteredDataForPCA".impute_15 * -0.196603454816 + "CenteredDataForPCA".impute_16 * -0.391675532013 + "CenteredDataForPCA".impute_17 * 0.285618635665 + "CenteredDataForPCA".impute_18 * -0.284904861805 + "CenteredDataForPCA".impute_19 * 0.234916275406 + "CenteredDataForPCA".impute_20 * -0.323782807973 + "CenteredDataForPCA".impute_21 * -0.235962043364 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.31211302003 + "CenteredDataForPCA".impute_3 * 0.197100003989 + "CenteredDataForPCA".impute_4 * 0.269823084409 + "CenteredDataForPCA".impute_5 * 0.080778938708 + "CenteredDataForPCA".impute_6 * 0.0278464246577 + "CenteredDataForPCA".impute_7 * 0.028561939262 + "CenteredDataForPCA".impute_8 * -0.118221283379 + "CenteredDataForPCA".impute_9 * 0.396336823008 + "CenteredDataForPCA".impute_10 * 0.188806522719 + "CenteredDataForPCA".impute_11 * -0.0563391427964 + "CenteredDataForPCA".impute_12 * -0.164178667339 + "CenteredDataForPCA".impute_13 * -0.242936615345 + "CenteredDataForPCA".impute_14 * 0.113740622219 + "CenteredDataForPCA".impute_15 * 0.221358492755 + "CenteredDataForPCA".impute_16 * -0.0350192680273 + "CenteredDataForPCA".impute_17 * -0.165497481364 + "CenteredDataForPCA".impute_18 * -0.582297531275 + "CenteredDataForPCA".impute_19 * 0.139018265317 + "CenteredDataForPCA".impute_20 * -0.00566746728209 + "CenteredDataForPCA".impute_21 * 0.194887748275 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.162720724734 + "CenteredDataForPCA".impute_3 * 0.156268845465 + "CenteredDataForPCA".impute_4 * -0.105594730305 + "CenteredDataForPCA".impute_5 * 0.227558901769 + "CenteredDataForPCA".impute_6 * 0.0329403289692 + "CenteredDataForPCA".impute_7 * 0.0189725188065 + "CenteredDataForPCA".impute_8 * 0.0805013130919 + "CenteredDataForPCA".impute_9 * 0.166903351768 + "CenteredDataForPCA".impute_10 * -0.405508009648 + "CenteredDataForPCA".impute_11 * 0.23229026512 + "CenteredDataForPCA".impute_12 * 0.0629315042444 + "CenteredDataForPCA".impute_13 * 0.1914511827 + "CenteredDataForPCA".impute_14 * -0.0113323551602 + "CenteredDataForPCA".impute_15 * 0.127296474752 + "CenteredDataForPCA".impute_16 * 0.131774517135 + "CenteredDataForPCA".impute_17 * -0.305508464875 + "CenteredDataForPCA".impute_18 * -0.129346072522 + "CenteredDataForPCA".impute_19 * -0.0894517701033 + "CenteredDataForPCA".impute_20 * -0.654277590545 + "CenteredDataForPCA".impute_21 * -0.107392302963 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.235834584093 + "CenteredDataForPCA".impute_3 * -0.0325116805938 + "CenteredDataForPCA".impute_4 * -0.221442946639 + "CenteredDataForPCA".impute_5 * 0.158548733598 + "CenteredDataForPCA".impute_6 * 0.0168791039099 + "CenteredDataForPCA".impute_7 * 0.0289170337111 + "CenteredDataForPCA".impute_8 * -0.0578753651633 + "CenteredDataForPCA".impute_9 * -0.120064997433 + "CenteredDataForPCA".impute_10 * -0.170179022178 + "CenteredDataForPCA".impute_11 * -0.0060160097702 + "CenteredDataForPCA".impute_12 * -0.0294811874832 + "CenteredDataForPCA".impute_13 * 0.103481972376 + "CenteredDataForPCA".impute_14 * 0.184485570114 + "CenteredDataForPCA".impute_15 * 0.500117410914 + "CenteredDataForPCA".impute_16 * 0.342977737047 + "CenteredDataForPCA".impute_17 * 0.427104857023 + "CenteredDataForPCA".impute_18 * 0.0808757127392 + "CenteredDataForPCA".impute_19 * 0.46736693838 + "CenteredDataForPCA".impute_20 * -0.000659717643984 + "CenteredDataForPCA".impute_21 * 0.0226172510073 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.082673846194 + "CenteredDataForPCA".impute_3 * 0.0286134340575 + "CenteredDataForPCA".impute_4 * -0.629349303937 + "CenteredDataForPCA".impute_5 * 0.483860787735 + "CenteredDataForPCA".impute_6 * 0.0314807708126 + "CenteredDataForPCA".impute_7 * -0.0107215022266 + "CenteredDataForPCA".impute_8 * 0.0282373000111 + "CenteredDataForPCA".impute_9 * 0.0149748336278 + "CenteredDataForPCA".impute_10 * 0.139302635859 + "CenteredDataForPCA".impute_11 * 0.18706074159 + "CenteredDataForPCA".impute_12 * -0.0143081579845 + "CenteredDataForPCA".impute_13 * -0.375010402623 + "CenteredDataForPCA".impute_14 * 0.140136546533 + "CenteredDataForPCA".impute_15 * 0.0438117928263 + "CenteredDataForPCA".impute_16 * -0.233466299419 + "CenteredDataForPCA".impute_17 * -0.161804764791 + "CenteredDataForPCA".impute_18 * 0.0631669513909 + "CenteredDataForPCA".impute_19 * -0.0767281169405 + "CenteredDataForPCA".impute_20 * 0.185172647348 + "CenteredDataForPCA".impute_21 * 0.135540585712 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.318942255173 + "CenteredDataForPCA".impute_3 * -0.0285877287157 + "CenteredDataForPCA".impute_4 * 0.38875873309 + "CenteredDataForPCA".impute_5 * 0.558624757404 + "CenteredDataForPCA".impute_6 * 0.0259280211924 + "CenteredDataForPCA".impute_7 * -0.0119453822879 + "CenteredDataForPCA".impute_8 * -0.0125682299853 + "CenteredDataForPCA".impute_9 * -0.0613452431341 + "CenteredDataForPCA".impute_10 * 0.200279750006 + "CenteredDataForPCA".impute_11 * 0.0220754299098 + "CenteredDataForPCA".impute_12 * -0.0470190349121 + "CenteredDataForPCA".impute_13 * 0.210468389238 + "CenteredDataForPCA".impute_14 * 0.202065684087 + "CenteredDataForPCA".impute_15 * -0.269407659455 + "CenteredDataForPCA".impute_16 * -0.0578306418291 + "CenteredDataForPCA".impute_17 * -0.143558213633 + "CenteredDataForPCA".impute_18 * 0.402353941814 + "CenteredDataForPCA".impute_19 * 0.147952494198 + "CenteredDataForPCA".impute_20 * -0.13808340092 + "CenteredDataForPCA".impute_21 * 0.0470147453056 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.315676887243 + "CenteredDataForPCA".impute_3 * -0.0205395279981 + "CenteredDataForPCA".impute_4 * -0.297595328924 + "CenteredDataForPCA".impute_5 * 0.126779806455 + "CenteredDataForPCA".impute_6 * -0.0572843206651 + "CenteredDataForPCA".impute_7 * 0.0599040653728 + "CenteredDataForPCA".impute_8 * -0.0713908374835 + "CenteredDataForPCA".impute_9 * -0.0444233166552 + "CenteredDataForPCA".impute_10 * -0.031022720384 + "CenteredDataForPCA".impute_11 * -0.717754478181 + "CenteredDataForPCA".impute_12 * 0.0575808597582 + "CenteredDataForPCA".impute_13 * -0.145526455771 + "CenteredDataForPCA".impute_14 * -0.17255927195 + "CenteredDataForPCA".impute_15 * -0.233285637295 + "CenteredDataForPCA".impute_16 * 0.00412591806639 + "CenteredDataForPCA".impute_17 * 0.0607107979078 + "CenteredDataForPCA".impute_18 * -0.101071319488 + "CenteredDataForPCA".impute_19 * -0.0635477084762 + "CenteredDataForPCA".impute_20 * -0.287668785928 + "CenteredDataForPCA".impute_21 * -0.236249624589 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.215228133003 + "CenteredDataForPCA".impute_3 * 0.0927902823681 + "CenteredDataForPCA".impute_4 * -0.111873341638 + "CenteredDataForPCA".impute_5 * 0.146817011223 + "CenteredDataForPCA".impute_6 * 0.0241205082553 + "CenteredDataForPCA".impute_7 * 0.0360376670414 + "CenteredDataForPCA".impute_8 * -0.13111978479 + "CenteredDataForPCA".impute_9 * 0.173976426411 + "CenteredDataForPCA".impute_10 * 0.0874809325045 + "CenteredDataForPCA".impute_11 * -0.222110072845 + "CenteredDataForPCA".impute_12 * -0.140564491464 + "CenteredDataForPCA".impute_13 * 0.62120113376 + "CenteredDataForPCA".impute_14 * 0.332979104397 + "CenteredDataForPCA".impute_15 * 0.0970214190726 + "CenteredDataForPCA".impute_16 * -0.259795551304 + "CenteredDataForPCA".impute_17 * 0.114564744549 + "CenteredDataForPCA".impute_18 * -0.190941172508 + "CenteredDataForPCA".impute_19 * -0.182298752568 + "CenteredDataForPCA".impute_20 * 0.226091152778 + "CenteredDataForPCA".impute_21 * -0.278037011874 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.343809540242 + "CenteredDataForPCA".impute_3 * 0.0122105112673 + "CenteredDataForPCA".impute_4 * -0.0324971516722 + "CenteredDataForPCA".impute_5 * -0.284393978278 + "CenteredDataForPCA".impute_6 * -0.0414793408649 + "CenteredDataForPCA".impute_7 * 0.0390636926397 + "CenteredDataForPCA".impute_8 * -0.145555163094 + "CenteredDataForPCA".impute_9 * 0.110707650903 + "CenteredDataForPCA".impute_10 * 0.351353395313 + "CenteredDataForPCA".impute_11 * -0.247461360225 + "CenteredDataForPCA".impute_12 * -0.0830105373158 + "CenteredDataForPCA".impute_13 * -0.172965672052 + "CenteredDataForPCA".impute_14 * 0.453563640588 + "CenteredDataForPCA".impute_15 * 0.119058869302 + "CenteredDataForPCA".impute_16 * 0.047288848726 + "CenteredDataForPCA".impute_17 * -0.00822426802199 + "CenteredDataForPCA".impute_18 * 0.312124138899 + "CenteredDataForPCA".impute_19 * 0.0250828017816 + "CenteredDataForPCA".impute_20 * -0.428426927341 + "CenteredDataForPCA".impute_21 * 0.194235884675 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.160978722166 + "CenteredDataForPCA".impute_3 * -0.116686655962 + "CenteredDataForPCA".impute_4 * -0.182823625221 + "CenteredDataForPCA".impute_5 * -0.0470659174592 + "CenteredDataForPCA".impute_6 * -0.0546705564767 + "CenteredDataForPCA".impute_7 * 0.0241006951649 + "CenteredDataForPCA".impute_8 * -0.0392850549729 + "CenteredDataForPCA".impute_9 * -0.188675796612 + "CenteredDataForPCA".impute_10 * 0.0789944041824 + "CenteredDataForPCA".impute_11 * 0.111780782019 + "CenteredDataForPCA".impute_12 * 0.0606626067679 + "CenteredDataForPCA".impute_13 * 0.179433407378 + "CenteredDataForPCA".impute_14 * 0.349674605789 + "CenteredDataForPCA".impute_15 * -0.351892279381 + "CenteredDataForPCA".impute_16 * 0.539006923214 + "CenteredDataForPCA".impute_17 * -0.0261041464979 + "CenteredDataForPCA".impute_18 * -0.303664123452 + "CenteredDataForPCA".impute_19 * -0.31441626529 + "CenteredDataForPCA".impute_20 * 0.0366766664549 + "CenteredDataForPCA".impute_21 * 0.315883509455 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.123955441275 + "CenteredDataForPCA".impute_3 * -0.00278177546731 + "CenteredDataForPCA".impute_4 * 0.0411991352287 + "CenteredDataForPCA".impute_5 * 0.041495625203 + "CenteredDataForPCA".impute_6 * -0.00980231260767 + "CenteredDataForPCA".impute_7 * 0.0354214183143 + "CenteredDataForPCA".impute_8 * -0.134633316184 + "CenteredDataForPCA".impute_9 * 0.0297630701164 + "CenteredDataForPCA".impute_10 * 0.424778195495 + "CenteredDataForPCA".impute_11 * 0.257635774822 + "CenteredDataForPCA".impute_12 * -0.0968578186688 + "CenteredDataForPCA".impute_13 * -0.159684521239 + "CenteredDataForPCA".impute_14 * -0.101284950379 + "CenteredDataForPCA".impute_15 * 0.212823180844 + "CenteredDataForPCA".impute_16 * 0.349313424595 + "CenteredDataForPCA".impute_17 * 0.0289486506392 + "CenteredDataForPCA".impute_18 * 0.0919314790303 + "CenteredDataForPCA".impute_19 * -0.337710264839 + "CenteredDataForPCA".impute_20 * -0.0311782675045 + "CenteredDataForPCA".impute_21 * -0.614223156875 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.367842758008 + "CenteredDataForPCA".impute_3 * 0.108846749084 + "CenteredDataForPCA".impute_4 * -0.192918455092 + "CenteredDataForPCA".impute_5 * -0.372742971102 + "CenteredDataForPCA".impute_6 * 0.0150556217362 + "CenteredDataForPCA".impute_7 * -0.0396776462484 + "CenteredDataForPCA".impute_8 * 0.226153496831 + "CenteredDataForPCA".impute_9 * 0.123062903413 + "CenteredDataForPCA".impute_10 * -0.0742387543283 + "CenteredDataForPCA".impute_11 * -0.0603197356289 + "CenteredDataForPCA".impute_12 * 0.170172357366 + "CenteredDataForPCA".impute_13 * 0.0968273888031 + "CenteredDataForPCA".impute_14 * 0.27145477298 + "CenteredDataForPCA".impute_15 * 0.0820301671555 + "CenteredDataForPCA".impute_16 * 0.0288581798961 + "CenteredDataForPCA".impute_17 * -0.558892721497 + "CenteredDataForPCA".impute_18 * 0.222319195394 + "CenteredDataForPCA".impute_19 * 0.147330227262 + "CenteredDataForPCA".impute_20 * 0.214856406688 + "CenteredDataForPCA".impute_21 * -0.22407258583 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.376343619236 + "CenteredDataForPCA".impute_3 * -0.0225111372931 + "CenteredDataForPCA".impute_4 * 0.117565353621 + "CenteredDataForPCA".impute_5 * -0.048287715949 + "CenteredDataForPCA".impute_6 * -0.0103947751626 + "CenteredDataForPCA".impute_7 * -0.0246624406776 + "CenteredDataForPCA".impute_8 * 0.13091489756 + "CenteredDataForPCA".impute_9 * -0.0750978234482 + "CenteredDataForPCA".impute_10 * -0.167039787243 + "CenteredDataForPCA".impute_11 * -0.0179530941814 + "CenteredDataForPCA".impute_12 * 0.13081723391 + "CenteredDataForPCA".impute_13 * -0.0303057401339 + "CenteredDataForPCA".impute_14 * 0.131170699121 + "CenteredDataForPCA".impute_15 * 0.384299685818 + "CenteredDataForPCA".impute_16 * -0.306628700703 + "CenteredDataForPCA".impute_17 * 0.199535159119 + "CenteredDataForPCA".impute_18 * 0.147662614504 + "CenteredDataForPCA".impute_19 * -0.623721542241 + "CenteredDataForPCA".impute_20 * -0.101940132294 + "CenteredDataForPCA".impute_21 * 0.22804056738 AS anoova_19, "CenteredDataForPCA".impute_2 * 1.90655491229e-17 + "CenteredDataForPCA".impute_3 * -0.0156699367672 + "CenteredDataForPCA".impute_4 * -1.59160878921e-16 + "CenteredDataForPCA".impute_5 * 1.04517089428e-16 + "CenteredDataForPCA".impute_6 * -0.421213321537 + "CenteredDataForPCA".impute_7 * 0.59892564398 + "CenteredDataForPCA".impute_8 * 0.505654036593 + "CenteredDataForPCA".impute_9 * -0.0429974299286 + "CenteredDataForPCA".impute_10 * -2.62376925741e-16 + "CenteredDataForPCA".impute_11 * 1.34441069388e-17 + "CenteredDataForPCA".impute_12 * -0.453968148796 + "CenteredDataForPCA".impute_13 * 1.39211558947e-16 + "CenteredDataForPCA".impute_14 * -9.77950359582e-17 + "CenteredDataForPCA".impute_15 * 1.24032728532e-16 + "CenteredDataForPCA".impute_16 * -2.85795692667e-16 + "CenteredDataForPCA".impute_17 * -6.02816407902e-17 + "CenteredDataForPCA".impute_18 * 9.49761103097e-17 + "CenteredDataForPCA".impute_19 * 3.54750950837e-16 + "CenteredDataForPCA".impute_20 * 5.07406616723e-17 + "CenteredDataForPCA".impute_21 * -1.26201132877e-16 AS anoova_20, "CenteredDataForPCA".impute_2 * 5.42658717502e-17 + "CenteredDataForPCA".impute_3 * -0.576366280994 + "CenteredDataForPCA".impute_4 * -1.66533453694e-16 + "CenteredDataForPCA".impute_5 * -2.49800180541e-16 + "CenteredDataForPCA".impute_6 * 0.572316899926 + "CenteredDataForPCA".impute_7 * 0.480001491643 + "CenteredDataForPCA".impute_8 * 0.0513758698208 + "CenteredDataForPCA".impute_9 * 0.290073046616 + "CenteredDataForPCA".impute_10 * 1.66533453694e-16 + "CenteredDataForPCA".impute_11 * 1.66533453694e-16 + "CenteredDataForPCA".impute_12 * 0.151894673508 + "CenteredDataForPCA".impute_13 * -2.77555756156e-17 + "CenteredDataForPCA".impute_14 * 6.93889390391e-17 + "CenteredDataForPCA".impute_15 * -2.08166817117e-16 + "CenteredDataForPCA".impute_16 * 0.0 + "CenteredDataForPCA".impute_17 * -1.52655665886e-16 + "CenteredDataForPCA".impute_18 * 6.93889390391e-17 + "CenteredDataForPCA".impute_19 * 2.77555756156e-17 + "CenteredDataForPCA".impute_20 * -4.16333634234e-17 + "CenteredDataForPCA".impute_21 * 1.2490009027e-16 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.9178044199943542) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.2554766535758972) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.9178044199943542 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23 AS "Proba_0", -1.46967597006 AS "LogProba_0", 0.26 AS "Proba_1", -1.34707364797 AS "LogProba_1", 0.29 AS "Proba_2", -1.237874356 AS "LogProba_2", 0.22 AS "Proba_3", -1.51412773263 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 0.2554766535758972 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1111111111111111 AS "Proba_0", -2.19722457734 AS "LogProba_0", 0.4444444444444444 AS "Proba_1", -0.810930216216 AS "LogProba_1", 0.07407407407407407 AS "Proba_2", -2.60268968544 AS "LogProba_2", 0.37037037037037035 AS "Proba_3", -0.99325177301 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16666666666666666 AS "Proba_0", -1.79175946923 AS "LogProba_0", 0.7 AS "Proba_1", -0.356674943939 AS "LogProba_1", 0.03333333333333333 AS "Proba_2", -3.40119738166 AS "LogProba_2", 0.1 AS "Proba_3", -2.30258509299 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.041666666666666664 AS "Proba_0", -3.17805383035 AS "LogProba_0", 0.125 AS "Proba_1", -2.07944154168 AS "LogProba_1", 0.125 AS "Proba_2", -2.07944154168 AS "LogProba_2", 0.7083333333333334 AS "Proba_3", -0.344840486292 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3695652173913043 AS "Proba_0", -0.995428052433 AS "LogProba_0", 0.043478260869565216 AS "Proba_1", -3.13549421593 AS "LogProba_1", 0.5434782608695652 AS "Proba_2", -0.609765571621 AS "LogProba_2", 0.043478260869565216 AS "Proba_3", -3.13549421593 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Proba_3" AS "Proba_3", "DT_node_data"."LogProba_3" AS "LogProba_3", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0" AS "Proba_0_0", "DT_Output"."LogProba_0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1" AS "Proba_0_1", "DT_Output"."LogProba_1" AS "LogProba_0_1", CAST(NULL AS FLOAT) AS "Score_0_2", "DT_Output"."Proba_2" AS "Proba_0_2", "DT_Output"."LogProba_2" AS "LogProba_0_2", CAST(NULL AS FLOAT) AS "Score_0_3", "DT_Output"."Proba_3" AS "Proba_0_3", "DT_Output"."LogProba_3" AS "LogProba_0_3" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.0786223411560059) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.5151602029800415) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.469365656375885) THEN 3 ELSE 4 END ELSE 5 END ELSE 6 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 1.0786223411560059 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21 AS "Proba_0", -1.56064774826 AS "LogProba_0", 0.24 AS "Proba_1", -1.42711635564 AS "LogProba_1", 0.28 AS "Proba_2", -1.27296567581 AS "LogProba_2", 0.27 AS "Proba_3", -1.30933331998 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 0.5151602029800415 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2361111111111111 AS "Proba_0", -1.44345277496 AS "LogProba_0", 0.3055555555555556 AS "Proba_1", -1.18562366566 AS "LogProba_1", 0.08333333333333333 AS "Proba_2", -2.48490664979 AS "LogProba_2", 0.375 AS "Proba_3", -0.980829253012 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, -0.469365656375885 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3269230769230769 AS "Proba_0", -1.11803037453 AS "LogProba_0", 0.40384615384615385 AS "Proba_1", -0.906721280858 AS "LogProba_1", 0.11538461538461539 AS "Proba_2", -2.15948424935 AS "LogProba_2", 0.15384615384615385 AS "Proba_3", -1.8718021769 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.08 AS "Proba_0", -2.52572864431 AS "LogProba_0", 0.64 AS "Proba_1", -0.446287102628 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.28 AS "Proba_3", -1.27296567581 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5555555555555556 AS "Proba_0", -0.587786664902 AS "LogProba_0", 0.18518518518518517 AS "Proba_1", -1.68639895357 AS "LogProba_1", 0.2222222222222222 AS "Proba_2", -1.50407739678 AS "LogProba_2", 0.037037037037037035 AS "Proba_3", -3.295836866 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.05 AS "Proba_1", -2.99573227355 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.95 AS "Proba_3", -0.0512932943876 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14285714285714285 AS "Proba_0", -1.94591014906 AS "LogProba_0", 0.07142857142857142 AS "Proba_1", -2.63905732962 AS "LogProba_1", 0.7857142857142857 AS "Proba_2", -0.241162056817 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Proba_3" AS "Proba_3", "DT_node_data_1"."LogProba_3" AS "LogProba_3", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0" AS "Proba_1_0", "DT_Output_1"."LogProba_0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1" AS "Proba_1_1", "DT_Output_1"."LogProba_1" AS "LogProba_1_1", CAST(NULL AS FLOAT) AS "Score_1_2", "DT_Output_1"."Proba_2" AS "Proba_1_2", "DT_Output_1"."LogProba_2" AS "LogProba_1_2", CAST(NULL AS FLOAT) AS "Score_1_3", "DT_Output_1"."Proba_3" AS "Proba_1_3", "DT_Output_1"."LogProba_3" AS "LogProba_1_3" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.23693959414958954) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.381187379360199) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.23693959414958954 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.34 AS "Proba_0", -1.07880966137 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.2 AS "Proba_2", -1.60943791243 AS "LogProba_2", 0.21 AS "Proba_3", -1.56064774826 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, 0.381187379360199 AS threshold, 40 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.47692307692307695 AS "Proba_0", -0.74040006541 AS "LogProba_0", 0.3384615384615385 AS "Proba_1", -1.08334481654 AS "LogProba_1", 0.12307692307692308 AS "Proba_2", -2.09494572822 AS "LogProba_2", 0.06153846153846154 AS "Proba_3", -2.78809290878 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2222222222222222 AS "Proba_0", -1.50407739678 AS "LogProba_0", 0.5555555555555556 AS "Proba_1", -0.587786664902 AS "LogProba_1", 0.1388888888888889 AS "Proba_2", -1.97408102602 AS "LogProba_2", 0.08333333333333333 AS "Proba_3", -2.48490664979 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7931034482758621 AS "Proba_0", -0.231801614057 AS "LogProba_0", 0.06896551724137931 AS "Proba_1", -2.67414864943 AS "LogProba_1", 0.10344827586206896 AS "Proba_2", -2.26868354132 AS "LogProba_2", 0.034482758620689655 AS "Proba_3", -3.36729582999 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.08571428571428572 AS "Proba_0", -2.45673577282 AS "LogProba_0", 0.08571428571428572 AS "Proba_1", -2.45673577282 AS "LogProba_1", 0.34285714285714286 AS "Proba_2", -1.0704414117 AS "LogProba_2", 0.4857142857142857 AS "Proba_3", -0.722134717433 AS "LogProba_3", 3 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Proba_3" AS "Proba_3", "DT_node_data_2"."LogProba_3" AS "LogProba_3", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0" AS "Proba_2_0", "DT_Output_2"."LogProba_0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1" AS "Proba_2_1", "DT_Output_2"."LogProba_1" AS "LogProba_2_1", CAST(NULL AS FLOAT) AS "Score_2_2", "DT_Output_2"."Proba_2" AS "Proba_2_2", "DT_Output_2"."LogProba_2" AS "LogProba_2_2", CAST(NULL AS FLOAT) AS "Score_2_3", "DT_Output_2"."Proba_3" AS "Proba_2_3", "DT_Output_2"."LogProba_3" AS "LogProba_2_3" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.2632123529911041) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.24654261767864227) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.2632123529911041 AS threshold, 62 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.29 AS "Proba_0", -1.237874356 AS "LogProba_0", 0.27 AS "Proba_1", -1.30933331998 AS "LogProba_1", 0.23 AS "Proba_2", -1.46967597006 AS "LogProba_2", 0.21 AS "Proba_3", -1.56064774826 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, -0.24654261767864227 AS threshold, 33 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.10714285714285714 AS "Proba_0", -2.23359222151 AS "LogProba_0", 0.4642857142857143 AS "Proba_1", -0.767255152714 AS "LogProba_1", 0.08928571428571429 AS "Proba_2", -2.4159137783 AS "LogProba_2", 0.3392857142857143 AS "Proba_3", -1.08091271157 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24 AS "Proba_0", -1.42711635564 AS "LogProba_0", 0.12 AS "Proba_1", -2.1202635362 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.64 AS "Proba_3", -0.446287102628 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.7419354838709677 AS "Proba_1", -0.298492988556 AS "LogProba_1", 0.16129032258064516 AS "Proba_2", -1.82454929205 AS "LogProba_2", 0.0967741935483871 AS "Proba_3", -2.33537491582 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5227272727272727 AS "Proba_0", -0.648695417989 AS "LogProba_0", 0.022727272727272728 AS "Proba_1", -3.78418963392 AS "LogProba_1", 0.4090909090909091 AS "Proba_2", -0.893817876022 AS "LogProba_2", 0.045454545454545456 AS "Proba_3", -3.09104245336 AS "LogProba_3", 0 AS "Decision") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Proba_3" AS "Proba_3", "DT_node_data_3"."LogProba_3" AS "LogProba_3", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0" AS "Proba_3_0", "DT_Output_3"."LogProba_0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1" AS "Proba_3_1", "DT_Output_3"."LogProba_1" AS "LogProba_3_1", CAST(NULL AS FLOAT) AS "Score_3_2", "DT_Output_3"."Proba_2" AS "Proba_3_2", "DT_Output_3"."LogProba_2" AS "LogProba_3_2", CAST(NULL AS FLOAT) AS "Score_3_3", "DT_Output_3"."Proba_3" AS "Proba_3_3", "DT_Output_3"."LogProba_3" AS "LogProba_3_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.6216015815734863) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.391528844833374) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.6216015815734863 AS threshold, 65 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26 AS "Proba_0", -1.34707364797 AS "LogProba_0", 0.21 AS "Proba_1", -1.56064774826 AS "LogProba_1", 0.29 AS "Proba_2", -1.237874356 AS "LogProba_2", 0.24 AS "Proba_3", -1.42711635564 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.46153846153846156 AS "Proba_0", -0.773189888233 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.07692307692307693 AS "Proba_2", -2.56494935746 AS "LogProba_2", 0.46153846153846156 AS "Proba_3", -0.773189888233 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 0.391528844833374 AS threshold, 41 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.13114754098360656 AS "Proba_0", -2.03143232249 AS "LogProba_0", 0.3442622950819672 AS "Proba_1", -1.06635142645 AS "LogProba_1", 0.4262295081967213 AS "Proba_2", -0.852777326152 AS "LogProba_2", 0.09836065573770492 AS "Proba_3", -2.31911439495 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.037037037037037035 AS "Proba_0", -3.295836866 AS "LogProba_0", 0.7407407407407407 AS "Proba_1", -0.30010459245 AS "LogProba_1", 0.14814814814814814 AS "Proba_2", -1.90954250488 AS "LogProba_2", 0.07407407407407407 AS "Proba_3", -2.60268968544 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.20588235294117646 AS "Proba_0", -1.58045037556 AS "LogProba_0", 0.029411764705882353 AS "Proba_1", -3.52636052462 AS "LogProba_1", 0.6470588235294118 AS "Proba_2", -0.435318071258 AS "LogProba_2", 0.11764705882352941 AS "Proba_3", -2.1400661635 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Proba_0" AS "Proba_0", "DT_node_data_4"."LogProba_0" AS "LogProba_0", "DT_node_data_4"."Proba_1" AS "Proba_1", "DT_node_data_4"."LogProba_1" AS "LogProba_1", "DT_node_data_4"."Proba_2" AS "Proba_2", "DT_node_data_4"."LogProba_2" AS "LogProba_2", "DT_node_data_4"."Proba_3" AS "Proba_3", "DT_node_data_4"."LogProba_3" AS "LogProba_3", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0" AS "Proba_4_0", "DT_Output_4"."LogProba_0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1" AS "Proba_4_1", "DT_Output_4"."LogProba_1" AS "LogProba_4_1", CAST(NULL AS FLOAT) AS "Score_4_2", "DT_Output_4"."Proba_2" AS "Proba_4_2", "DT_Output_4"."LogProba_2" AS "LogProba_4_2", CAST(NULL AS FLOAT) AS "Score_4_3", "DT_Output_4"."Proba_3" AS "Proba_4_3", "DT_Output_4"."LogProba_3" AS "LogProba_4_3" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.30528345704078674) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.4156399965286255) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.0481584258377552) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.30528345704078674 AS threshold, 63 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.27 AS "Proba_0", -1.30933331998 AS "LogProba_0", 0.23 AS "Proba_1", -1.46967597006 AS "LogProba_1", 0.26 AS "Proba_2", -1.34707364797 AS "LogProba_2", 0.24 AS "Proba_3", -1.42711635564 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, -0.4156399965286255 AS threshold, 31 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.125 AS "Proba_0", -2.07944154168 AS "LogProba_0", 0.4583333333333333 AS "Proba_1", -0.78015855755 AS "LogProba_1", 0.020833333333333332 AS "Proba_2", -3.87120101091 AS "LogProba_2", 0.3958333333333333 AS "Proba_3", -0.926762031741 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24 AS "Proba_0", -1.42711635564 AS "LogProba_0", 0.16 AS "Proba_1", -1.83258146375 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.6 AS "Proba_3", -0.510825623766 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 0.782608695652174 AS "Proba_1", -0.245122458033 AS "LogProba_1", 0.043478260869565216 AS "Proba_2", -3.13549421593 AS "LogProba_2", 0.17391304347826086 AS "Proba_3", -1.74919985481 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_4' AS feature, -0.0481584258377552 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.40384615384615385 AS "Proba_0", -0.906721280858 AS "LogProba_0", 0.019230769230769232 AS "Proba_1", -3.95124371858 AS "LogProba_1", 0.4807692307692308 AS "Proba_2", -0.732367893713 AS "LogProba_2", 0.09615384615384616 AS "Proba_3", -2.34180580615 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.72 AS "Proba_0", -0.328504066972 AS "LogProba_0", 0.04 AS "Proba_1", -3.21887582487 AS "LogProba_1", 0.24 AS "Proba_2", -1.42711635564 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1111111111111111 AS "Proba_0", -2.19722457734 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.7037037037037037 AS "Proba_2", -0.351397886838 AS "LogProba_2", 0.18518518518518517 AS "Proba_3", -1.68639895357 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Proba_0" AS "Proba_0", "DT_node_data_5"."LogProba_0" AS "LogProba_0", "DT_node_data_5"."Proba_1" AS "Proba_1", "DT_node_data_5"."LogProba_1" AS "LogProba_1", "DT_node_data_5"."Proba_2" AS "Proba_2", "DT_node_data_5"."LogProba_2" AS "LogProba_2", "DT_node_data_5"."Proba_3" AS "Proba_3", "DT_node_data_5"."LogProba_3" AS "LogProba_3", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0" AS "Proba_5_0", "DT_Output_5"."LogProba_0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1" AS "Proba_5_1", "DT_Output_5"."LogProba_1" AS "LogProba_5_1", CAST(NULL AS FLOAT) AS "Score_5_2", "DT_Output_5"."Proba_2" AS "Proba_5_2", "DT_Output_5"."LogProba_2" AS "LogProba_5_2", CAST(NULL AS FLOAT) AS "Score_5_3", "DT_Output_5"."Proba_3" AS "Proba_5_3", "DT_Output_5"."LogProba_3" AS "LogProba_5_3" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.9375779628753662) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.24494224786758423) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.9375779628753662 AS threshold, 58 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21 AS "Proba_0", -1.56064774826 AS "LogProba_0", 0.22 AS "Proba_1", -1.51412773263 AS "LogProba_1", 0.31 AS "Proba_2", -1.1711829815 AS "LogProba_2", 0.26 AS "Proba_3", -1.34707364797 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 0.24494224786758423 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1724137931034483 AS "Proba_0", -1.75785791755 AS "LogProba_0", 0.3275862068965517 AS "Proba_1", -1.11600403138 AS "LogProba_1", 0.05172413793103448 AS "Proba_2", -2.96183072188 AS "LogProba_2", 0.4482758620689655 AS "Proba_3", -0.802346472525 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2727272727272727 AS "Proba_0", -1.29928298413 AS "LogProba_0", 0.5757575757575758 AS "Proba_1", -0.5520685823 AS "LogProba_1", 0.06060606060606061 AS "Proba_2", -2.80336038091 AS "LogProba_2", 0.09090909090909091 AS "Proba_3", -2.3978952728 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.04 AS "Proba_0", -3.21887582487 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.04 AS "Proba_2", -3.21887582487 AS "LogProba_2", 0.92 AS "Proba_3", -0.0833816089391 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2619047619047619 AS "Proba_0", -1.33977434548 AS "LogProba_0", 0.07142857142857142 AS "Proba_1", -2.63905732962 AS "LogProba_1", 0.6666666666666666 AS "Proba_2", -0.405465108108 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Proba_0" AS "Proba_0", "DT_node_data_6"."LogProba_0" AS "LogProba_0", "DT_node_data_6"."Proba_1" AS "Proba_1", "DT_node_data_6"."LogProba_1" AS "LogProba_1", "DT_node_data_6"."Proba_2" AS "Proba_2", "DT_node_data_6"."LogProba_2" AS "LogProba_2", "DT_node_data_6"."Proba_3" AS "Proba_3", "DT_node_data_6"."LogProba_3" AS "LogProba_3", "DT_node_data_6"."Decision" AS "Decision" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, CAST(NULL AS FLOAT) AS "Score_6_0", "DT_Output_6"."Proba_0" AS "Proba_6_0", "DT_Output_6"."LogProba_0" AS "LogProba_6_0", CAST(NULL AS FLOAT) AS "Score_6_1", "DT_Output_6"."Proba_1" AS "Proba_6_1", "DT_Output_6"."LogProba_1" AS "LogProba_6_1", CAST(NULL AS FLOAT) AS "Score_6_2", "DT_Output_6"."Proba_2" AS "Proba_6_2", "DT_Output_6"."LogProba_2" AS "LogProba_6_2", CAST(NULL AS FLOAT) AS "Score_6_3", "DT_Output_6"."Proba_3" AS "Proba_6_3", "DT_Output_6"."LogProba_3" AS "LogProba_6_3" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.0455776453018188) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.3468548357486725) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 1.0455776453018188 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2 AS "Proba_0", -1.60943791243 AS "LogProba_0", 0.23 AS "Proba_1", -1.46967597006 AS "LogProba_1", 0.28 AS "Proba_2", -1.27296567581 AS "LogProba_2", 0.29 AS "Proba_3", -1.237874356 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 0.3468548357486725 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18461538461538463 AS "Proba_0", -1.68948062011 AS "LogProba_0", 0.3230769230769231 AS "Proba_1", -1.12986483217 AS "LogProba_1", 0.06153846153846154 AS "Proba_2", -2.78809290878 AS "LogProba_2", 0.4307692307692308 AS "Proba_3", -0.84218275972 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.28205128205128205 AS "Proba_0", -1.26566637333 AS "LogProba_0", 0.5128205128205128 AS "Proba_1", -0.667829372576 AS "LogProba_1", 0.05128205128205128 AS "Proba_2", -2.97041446557 AS "LogProba_2", 0.15384615384615385 AS "Proba_3", -1.8718021769 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.038461538461538464 AS "Proba_0", -3.25809653802 AS "LogProba_0", 0.038461538461538464 AS "Proba_1", -3.25809653802 AS "LogProba_1", 0.07692307692307693 AS "Proba_2", -2.56494935746 AS "LogProba_2", 0.8461538461538461 AS "Proba_3", -0.167054084663 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22857142857142856 AS "Proba_0", -1.47590651981 AS "LogProba_0", 0.05714285714285714 AS "Proba_1", -2.86220088093 AS "LogProba_1", 0.6857142857142857 AS "Proba_2", -0.377294231141 AS "LogProba_2", 0.02857142857142857 AS "Proba_3", -3.55534806149 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Proba_0" AS "Proba_0", "DT_node_data_7"."LogProba_0" AS "LogProba_0", "DT_node_data_7"."Proba_1" AS "Proba_1", "DT_node_data_7"."LogProba_1" AS "LogProba_1", "DT_node_data_7"."Proba_2" AS "Proba_2", "DT_node_data_7"."LogProba_2" AS "LogProba_2", "DT_node_data_7"."Proba_3" AS "Proba_3", "DT_node_data_7"."LogProba_3" AS "LogProba_3", "DT_node_data_7"."Decision" AS "Decision" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, CAST(NULL AS FLOAT) AS "Score_7_0", "DT_Output_7"."Proba_0" AS "Proba_7_0", "DT_Output_7"."LogProba_0" AS "LogProba_7_0", CAST(NULL AS FLOAT) AS "Score_7_1", "DT_Output_7"."Proba_1" AS "Proba_7_1", "DT_Output_7"."LogProba_1" AS "LogProba_7_1", CAST(NULL AS FLOAT) AS "Score_7_2", "DT_Output_7"."Proba_2" AS "Proba_7_2", "DT_Output_7"."LogProba_2" AS "LogProba_7_2", CAST(NULL AS FLOAT) AS "Score_7_3", "DT_Output_7"."Proba_3" AS "Proba_7_3", "DT_Output_7"."LogProba_3" AS "LogProba_7_3" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.4106913208961487) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.1135241761803627) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.06792717427015305) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.4106913208961487 AS threshold, 65 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2 AS "Proba_0", -1.60943791243 AS "LogProba_0", 0.33 AS "Proba_1", -1.10866262452 AS "LogProba_1", 0.21 AS "Proba_2", -1.56064774826 AS "LogProba_2", 0.26 AS "Proba_3", -1.34707364797 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, -0.1135241761803627 AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.36363636363636365 AS "Proba_0", -1.01160091168 AS "LogProba_0", 0.022727272727272728 AS "Proba_1", -3.78418963392 AS "LogProba_1", 0.11363636363636363 AS "Proba_2", -2.17475172148 AS "LogProba_2", 0.5 AS "Proba_3", -0.69314718056 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5833333333333334 AS "Proba_0", -0.538996500733 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.20833333333333334 AS "Proba_2", -1.56861591791 AS "LogProba_2", 0.20833333333333334 AS "Proba_3", -1.56861591791 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1 AS "Proba_0", -2.30258509299 AS "LogProba_0", 0.05 AS "Proba_1", -2.99573227355 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.85 AS "Proba_3", -0.162518929498 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_4' AS feature, -0.06792717427015305 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.07142857142857142 AS "Proba_0", -2.63905732962 AS "LogProba_0", 0.5714285714285714 AS "Proba_1", -0.559615787935 AS "LogProba_1", 0.2857142857142857 AS "Proba_2", -1.2527629685 AS "LogProba_2", 0.07142857142857142 AS "Proba_3", -2.63905732962 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.08571428571428572 AS "Proba_0", -2.45673577282 AS "LogProba_0", 0.8 AS "Proba_1", -0.223143551314 AS "LogProba_1", 0.11428571428571428 AS "Proba_2", -2.16905370037 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.047619047619047616 AS "Proba_0", -3.04452243772 AS "LogProba_0", 0.19047619047619047 AS "Proba_1", -1.6582280766 AS "LogProba_1", 0.5714285714285714 AS "Proba_2", -0.559615787935 AS "LogProba_2", 0.19047619047619047 AS "Proba_3", -1.6582280766 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Proba_0" AS "Proba_0", "DT_node_data_8"."LogProba_0" AS "LogProba_0", "DT_node_data_8"."Proba_1" AS "Proba_1", "DT_node_data_8"."LogProba_1" AS "LogProba_1", "DT_node_data_8"."Proba_2" AS "Proba_2", "DT_node_data_8"."LogProba_2" AS "LogProba_2", "DT_node_data_8"."Proba_3" AS "Proba_3", "DT_node_data_8"."LogProba_3" AS "LogProba_3", "DT_node_data_8"."Decision" AS "Decision" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, CAST(NULL AS FLOAT) AS "Score_8_0", "DT_Output_8"."Proba_0" AS "Proba_8_0", "DT_Output_8"."LogProba_0" AS "LogProba_8_0", CAST(NULL AS FLOAT) AS "Score_8_1", "DT_Output_8"."Proba_1" AS "Proba_8_1", "DT_Output_8"."LogProba_1" AS "LogProba_8_1", CAST(NULL AS FLOAT) AS "Score_8_2", "DT_Output_8"."Proba_2" AS "Proba_8_2", "DT_Output_8"."LogProba_2" AS "LogProba_8_2", CAST(NULL AS FLOAT) AS "Score_8_3", "DT_Output_8"."Proba_3" AS "Proba_8_3", "DT_Output_8"."LogProba_3" AS "LogProba_8_3" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.2632123529911041) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.30206191539764404) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.2632123529911041 AS threshold, 61 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.27 AS "Proba_0", -1.30933331998 AS "LogProba_0", 0.22 AS "Proba_1", -1.51412773263 AS "LogProba_1", 0.31 AS "Proba_2", -1.1711829815 AS "LogProba_2", 0.2 AS "Proba_3", -1.60943791243 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1590909090909091 AS "Proba_0", -1.83827948486 AS "LogProba_0", 0.36363636363636365 AS "Proba_1", -1.01160091168 AS "LogProba_1", 0.022727272727272728 AS "Proba_2", -3.78418963392 AS "LogProba_2", 0.45454545454545453 AS "Proba_3", -0.788457360364 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_10' AS feature, 0.30206191539764404 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35714285714285715 AS "Proba_0", -1.02961941718 AS "LogProba_0", 0.10714285714285714 AS "Proba_1", -2.23359222151 AS "LogProba_1", 0.5357142857142857 AS "Proba_2", -0.624154309073 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1111111111111111 AS "Proba_0", -2.19722457734 AS "LogProba_0", 0.037037037037037035 AS "Proba_1", -3.295836866 AS "LogProba_1", 0.8518518518518519 AS "Proba_2", -0.160342650075 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5862068965517241 AS "Proba_0", -0.53408248593 AS "LogProba_0", 0.1724137931034483 AS "Proba_1", -1.75785791755 AS "LogProba_1", 0.2413793103448276 AS "Proba_2", -1.42138568093 AS "LogProba_2", 0.0 AS "Proba_3", -1.79769313486231e+308 AS "LogProba_3", 0 AS "Decision") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Proba_0" AS "Proba_0", "DT_node_data_9"."LogProba_0" AS "LogProba_0", "DT_node_data_9"."Proba_1" AS "Proba_1", "DT_node_data_9"."LogProba_1" AS "LogProba_1", "DT_node_data_9"."Proba_2" AS "Proba_2", "DT_node_data_9"."LogProba_2" AS "LogProba_2", "DT_node_data_9"."Proba_3" AS "Proba_3", "DT_node_data_9"."LogProba_3" AS "LogProba_3", "DT_node_data_9"."Decision" AS "Decision" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, CAST(NULL AS FLOAT) AS "Score_9_0", "DT_Output_9"."Proba_0" AS "Proba_9_0", "DT_Output_9"."LogProba_0" AS "LogProba_9_0", CAST(NULL AS FLOAT) AS "Score_9_1", "DT_Output_9"."Proba_1" AS "Proba_9_1", "DT_Output_9"."LogProba_1" AS "LogProba_9_1", CAST(NULL AS FLOAT) AS "Score_9_2", "DT_Output_9"."Proba_2" AS "Proba_9_2", "DT_Output_9"."LogProba_2" AS "LogProba_9_2", CAST(NULL AS FLOAT) AS "Score_9_3", "DT_Output_9"."Proba_3" AS "Proba_9_3", "DT_Output_9"."LogProba_3" AS "LogProba_9_3" 
FROM "DT_Output_9"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0".join_key_0 AS join_key_0, "RF_Tree_0"."Score_0_0" AS "Score_0_0", "RF_Tree_0"."Proba_0_0" AS "Proba_0_0", "RF_Tree_0"."LogProba_0_0" AS "LogProba_0_0", "RF_Tree_0"."Score_0_1" AS "Score_0_1", "RF_Tree_0"."Proba_0_1" AS "Proba_0_1", "RF_Tree_0"."LogProba_0_1" AS "LogProba_0_1", "RF_Tree_0"."Score_0_2" AS "Score_0_2", "RF_Tree_0"."Proba_0_2" AS "Proba_0_2", "RF_Tree_0"."LogProba_0_2" AS "LogProba_0_2", "RF_Tree_0"."Score_0_3" AS "Score_0_3", "RF_Tree_0"."Proba_0_3" AS "Proba_0_3", "RF_Tree_0"."LogProba_0_3" AS "LogProba_0_3", "RF_Tree_1".join_key_1 AS join_key_1, "RF_Tree_1"."Score_1_0" AS "Score_1_0", "RF_Tree_1"."Proba_1_0" AS "Proba_1_0", "RF_Tree_1"."LogProba_1_0" AS "LogProba_1_0", "RF_Tree_1"."Score_1_1" AS "Score_1_1", "RF_Tree_1"."Proba_1_1" AS "Proba_1_1", "RF_Tree_1"."LogProba_1_1" AS "LogProba_1_1", "RF_Tree_1"."Score_1_2" AS "Score_1_2", "RF_Tree_1"."Proba_1_2" AS "Proba_1_2", "RF_Tree_1"."LogProba_1_2" AS "LogProba_1_2", "RF_Tree_1"."Score_1_3" AS "Score_1_3", "RF_Tree_1"."Proba_1_3" AS "Proba_1_3", "RF_Tree_1"."LogProba_1_3" AS "LogProba_1_3", "RF_Tree_2".join_key_2 AS join_key_2, "RF_Tree_2"."Score_2_0" AS "Score_2_0", "RF_Tree_2"."Proba_2_0" AS "Proba_2_0", "RF_Tree_2"."LogProba_2_0" AS "LogProba_2_0", "RF_Tree_2"."Score_2_1" AS "Score_2_1", "RF_Tree_2"."Proba_2_1" AS "Proba_2_1", "RF_Tree_2"."LogProba_2_1" AS "LogProba_2_1", "RF_Tree_2"."Score_2_2" AS "Score_2_2", "RF_Tree_2"."Proba_2_2" AS "Proba_2_2", "RF_Tree_2"."LogProba_2_2" AS "LogProba_2_2", "RF_Tree_2"."Score_2_3" AS "Score_2_3", "RF_Tree_2"."Proba_2_3" AS "Proba_2_3", "RF_Tree_2"."LogProba_2_3" AS "LogProba_2_3", "RF_Tree_3".join_key_3 AS join_key_3, "RF_Tree_3"."Score_3_0" AS "Score_3_0", "RF_Tree_3"."Proba_3_0" AS "Proba_3_0", "RF_Tree_3"."LogProba_3_0" AS "LogProba_3_0", "RF_Tree_3"."Score_3_1" AS "Score_3_1", "RF_Tree_3"."Proba_3_1" AS "Proba_3_1", "RF_Tree_3"."LogProba_3_1" AS "LogProba_3_1", "RF_Tree_3"."Score_3_2" AS "Score_3_2", "RF_Tree_3"."Proba_3_2" AS "Proba_3_2", "RF_Tree_3"."LogProba_3_2" AS "LogProba_3_2", "RF_Tree_3"."Score_3_3" AS "Score_3_3", "RF_Tree_3"."Proba_3_3" AS "Proba_3_3", "RF_Tree_3"."LogProba_3_3" AS "LogProba_3_3", "RF_Tree_4".join_key_4 AS join_key_4, "RF_Tree_4"."Score_4_0" AS "Score_4_0", "RF_Tree_4"."Proba_4_0" AS "Proba_4_0", "RF_Tree_4"."LogProba_4_0" AS "LogProba_4_0", "RF_Tree_4"."Score_4_1" AS "Score_4_1", "RF_Tree_4"."Proba_4_1" AS "Proba_4_1", "RF_Tree_4"."LogProba_4_1" AS "LogProba_4_1", "RF_Tree_4"."Score_4_2" AS "Score_4_2", "RF_Tree_4"."Proba_4_2" AS "Proba_4_2", "RF_Tree_4"."LogProba_4_2" AS "LogProba_4_2", "RF_Tree_4"."Score_4_3" AS "Score_4_3", "RF_Tree_4"."Proba_4_3" AS "Proba_4_3", "RF_Tree_4"."LogProba_4_3" AS "LogProba_4_3", "RF_Tree_5".join_key_5 AS join_key_5, "RF_Tree_5"."Score_5_0" AS "Score_5_0", "RF_Tree_5"."Proba_5_0" AS "Proba_5_0", "RF_Tree_5"."LogProba_5_0" AS "LogProba_5_0", "RF_Tree_5"."Score_5_1" AS "Score_5_1", "RF_Tree_5"."Proba_5_1" AS "Proba_5_1", "RF_Tree_5"."LogProba_5_1" AS "LogProba_5_1", "RF_Tree_5"."Score_5_2" AS "Score_5_2", "RF_Tree_5"."Proba_5_2" AS "Proba_5_2", "RF_Tree_5"."LogProba_5_2" AS "LogProba_5_2", "RF_Tree_5"."Score_5_3" AS "Score_5_3", "RF_Tree_5"."Proba_5_3" AS "Proba_5_3", "RF_Tree_5"."LogProba_5_3" AS "LogProba_5_3", "RF_Tree_6".join_key_6 AS join_key_6, "RF_Tree_6"."Score_6_0" AS "Score_6_0", "RF_Tree_6"."Proba_6_0" AS "Proba_6_0", "RF_Tree_6"."LogProba_6_0" AS "LogProba_6_0", "RF_Tree_6"."Score_6_1" AS "Score_6_1", "RF_Tree_6"."Proba_6_1" AS "Proba_6_1", "RF_Tree_6"."LogProba_6_1" AS "LogProba_6_1", "RF_Tree_6"."Score_6_2" AS "Score_6_2", "RF_Tree_6"."Proba_6_2" AS "Proba_6_2", "RF_Tree_6"."LogProba_6_2" AS "LogProba_6_2", "RF_Tree_6"."Score_6_3" AS "Score_6_3", "RF_Tree_6"."Proba_6_3" AS "Proba_6_3", "RF_Tree_6"."LogProba_6_3" AS "LogProba_6_3", "RF_Tree_7".join_key_7 AS join_key_7, "RF_Tree_7"."Score_7_0" AS "Score_7_0", "RF_Tree_7"."Proba_7_0" AS "Proba_7_0", "RF_Tree_7"."LogProba_7_0" AS "LogProba_7_0", "RF_Tree_7"."Score_7_1" AS "Score_7_1", "RF_Tree_7"."Proba_7_1" AS "Proba_7_1", "RF_Tree_7"."LogProba_7_1" AS "LogProba_7_1", "RF_Tree_7"."Score_7_2" AS "Score_7_2", "RF_Tree_7"."Proba_7_2" AS "Proba_7_2", "RF_Tree_7"."LogProba_7_2" AS "LogProba_7_2", "RF_Tree_7"."Score_7_3" AS "Score_7_3", "RF_Tree_7"."Proba_7_3" AS "Proba_7_3", "RF_Tree_7"."LogProba_7_3" AS "LogProba_7_3", "RF_Tree_8".join_key_8 AS join_key_8, "RF_Tree_8"."Score_8_0" AS "Score_8_0", "RF_Tree_8"."Proba_8_0" AS "Proba_8_0", "RF_Tree_8"."LogProba_8_0" AS "LogProba_8_0", "RF_Tree_8"."Score_8_1" AS "Score_8_1", "RF_Tree_8"."Proba_8_1" AS "Proba_8_1", "RF_Tree_8"."LogProba_8_1" AS "LogProba_8_1", "RF_Tree_8"."Score_8_2" AS "Score_8_2", "RF_Tree_8"."Proba_8_2" AS "Proba_8_2", "RF_Tree_8"."LogProba_8_2" AS "LogProba_8_2", "RF_Tree_8"."Score_8_3" AS "Score_8_3", "RF_Tree_8"."Proba_8_3" AS "Proba_8_3", "RF_Tree_8"."LogProba_8_3" AS "LogProba_8_3", "RF_Tree_9".join_key_9 AS join_key_9, "RF_Tree_9"."Score_9_0" AS "Score_9_0", "RF_Tree_9"."Proba_9_0" AS "Proba_9_0", "RF_Tree_9"."LogProba_9_0" AS "LogProba_9_0", "RF_Tree_9"."Score_9_1" AS "Score_9_1", "RF_Tree_9"."Proba_9_1" AS "Proba_9_1", "RF_Tree_9"."LogProba_9_1" AS "LogProba_9_1", "RF_Tree_9"."Score_9_2" AS "Score_9_2", "RF_Tree_9"."Proba_9_2" AS "Proba_9_2", "RF_Tree_9"."LogProba_9_2" AS "LogProba_9_2", "RF_Tree_9"."Score_9_3" AS "Score_9_3", "RF_Tree_9"."Proba_9_3" AS "Proba_9_3", "RF_Tree_9"."LogProba_9_3" AS "LogProba_9_3" 
FROM "RF_Tree_0" LEFT OUTER JOIN "RF_Tree_1" ON "RF_Tree_0".join_key_0 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_2" ON "RF_Tree_2".join_key_2 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_3" ON "RF_Tree_3".join_key_3 = "RF_Tree_2".join_key_2 LEFT OUTER JOIN "RF_Tree_4" ON "RF_Tree_4".join_key_4 = "RF_Tree_3".join_key_3 LEFT OUTER JOIN "RF_Tree_5" ON "RF_Tree_5".join_key_5 = "RF_Tree_4".join_key_4 LEFT OUTER JOIN "RF_Tree_6" ON "RF_Tree_6".join_key_6 = "RF_Tree_5".join_key_5 LEFT OUTER JOIN "RF_Tree_7" ON "RF_Tree_7".join_key_7 = "RF_Tree_6".join_key_6 LEFT OUTER JOIN "RF_Tree_8" ON "RF_Tree_8".join_key_8 = "RF_Tree_7".join_key_7 LEFT OUTER JOIN "RF_Tree_9" ON "RF_Tree_9".join_key_9 = "RF_Tree_8".join_key_8), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0 AS "KEY", "RF_Join_CTE"."Score_0_0" / 10 + "RF_Join_CTE"."Score_1_0" / 10 + "RF_Join_CTE"."Score_2_0" / 10 + "RF_Join_CTE"."Score_3_0" / 10 + "RF_Join_CTE"."Score_4_0" / 10 + "RF_Join_CTE"."Score_5_0" / 10 + "RF_Join_CTE"."Score_6_0" / 10 + "RF_Join_CTE"."Score_7_0" / 10 + "RF_Join_CTE"."Score_8_0" / 10 + "RF_Join_CTE"."Score_9_0" / 10 AS "Score_0", "RF_Join_CTE"."Proba_0_0" / 10 + "RF_Join_CTE"."Proba_1_0" / 10 + "RF_Join_CTE"."Proba_2_0" / 10 + "RF_Join_CTE"."Proba_3_0" / 10 + "RF_Join_CTE"."Proba_4_0" / 10 + "RF_Join_CTE"."Proba_5_0" / 10 + "RF_Join_CTE"."Proba_6_0" / 10 + "RF_Join_CTE"."Proba_7_0" / 10 + "RF_Join_CTE"."Proba_8_0" / 10 + "RF_Join_CTE"."Proba_9_0" / 10 AS "Proba_0", "RF_Join_CTE"."LogProba_0_0" / 10 + "RF_Join_CTE"."LogProba_1_0" / 10 + "RF_Join_CTE"."LogProba_2_0" / 10 + "RF_Join_CTE"."LogProba_3_0" / 10 + "RF_Join_CTE"."LogProba_4_0" / 10 + "RF_Join_CTE"."LogProba_5_0" / 10 + "RF_Join_CTE"."LogProba_6_0" / 10 + "RF_Join_CTE"."LogProba_7_0" / 10 + "RF_Join_CTE"."LogProba_8_0" / 10 + "RF_Join_CTE"."LogProba_9_0" / 10 AS "LogProba_0", "RF_Join_CTE"."Score_0_1" / 10 + "RF_Join_CTE"."Score_1_1" / 10 + "RF_Join_CTE"."Score_2_1" / 10 + "RF_Join_CTE"."Score_3_1" / 10 + "RF_Join_CTE"."Score_4_1" / 10 + "RF_Join_CTE"."Score_5_1" / 10 + "RF_Join_CTE"."Score_6_1" / 10 + "RF_Join_CTE"."Score_7_1" / 10 + "RF_Join_CTE"."Score_8_1" / 10 + "RF_Join_CTE"."Score_9_1" / 10 AS "Score_1", "RF_Join_CTE"."Proba_0_1" / 10 + "RF_Join_CTE"."Proba_1_1" / 10 + "RF_Join_CTE"."Proba_2_1" / 10 + "RF_Join_CTE"."Proba_3_1" / 10 + "RF_Join_CTE"."Proba_4_1" / 10 + "RF_Join_CTE"."Proba_5_1" / 10 + "RF_Join_CTE"."Proba_6_1" / 10 + "RF_Join_CTE"."Proba_7_1" / 10 + "RF_Join_CTE"."Proba_8_1" / 10 + "RF_Join_CTE"."Proba_9_1" / 10 AS "Proba_1", "RF_Join_CTE"."LogProba_0_1" / 10 + "RF_Join_CTE"."LogProba_1_1" / 10 + "RF_Join_CTE"."LogProba_2_1" / 10 + "RF_Join_CTE"."LogProba_3_1" / 10 + "RF_Join_CTE"."LogProba_4_1" / 10 + "RF_Join_CTE"."LogProba_5_1" / 10 + "RF_Join_CTE"."LogProba_6_1" / 10 + "RF_Join_CTE"."LogProba_7_1" / 10 + "RF_Join_CTE"."LogProba_8_1" / 10 + "RF_Join_CTE"."LogProba_9_1" / 10 AS "LogProba_1", "RF_Join_CTE"."Score_0_2" / 10 + "RF_Join_CTE"."Score_1_2" / 10 + "RF_Join_CTE"."Score_2_2" / 10 + "RF_Join_CTE"."Score_3_2" / 10 + "RF_Join_CTE"."Score_4_2" / 10 + "RF_Join_CTE"."Score_5_2" / 10 + "RF_Join_CTE"."Score_6_2" / 10 + "RF_Join_CTE"."Score_7_2" / 10 + "RF_Join_CTE"."Score_8_2" / 10 + "RF_Join_CTE"."Score_9_2" / 10 AS "Score_2", "RF_Join_CTE"."Proba_0_2" / 10 + "RF_Join_CTE"."Proba_1_2" / 10 + "RF_Join_CTE"."Proba_2_2" / 10 + "RF_Join_CTE"."Proba_3_2" / 10 + "RF_Join_CTE"."Proba_4_2" / 10 + "RF_Join_CTE"."Proba_5_2" / 10 + "RF_Join_CTE"."Proba_6_2" / 10 + "RF_Join_CTE"."Proba_7_2" / 10 + "RF_Join_CTE"."Proba_8_2" / 10 + "RF_Join_CTE"."Proba_9_2" / 10 AS "Proba_2", "RF_Join_CTE"."LogProba_0_2" / 10 + "RF_Join_CTE"."LogProba_1_2" / 10 + "RF_Join_CTE"."LogProba_2_2" / 10 + "RF_Join_CTE"."LogProba_3_2" / 10 + "RF_Join_CTE"."LogProba_4_2" / 10 + "RF_Join_CTE"."LogProba_5_2" / 10 + "RF_Join_CTE"."LogProba_6_2" / 10 + "RF_Join_CTE"."LogProba_7_2" / 10 + "RF_Join_CTE"."LogProba_8_2" / 10 + "RF_Join_CTE"."LogProba_9_2" / 10 AS "LogProba_2", "RF_Join_CTE"."Score_0_3" / 10 + "RF_Join_CTE"."Score_1_3" / 10 + "RF_Join_CTE"."Score_2_3" / 10 + "RF_Join_CTE"."Score_3_3" / 10 + "RF_Join_CTE"."Score_4_3" / 10 + "RF_Join_CTE"."Score_5_3" / 10 + "RF_Join_CTE"."Score_6_3" / 10 + "RF_Join_CTE"."Score_7_3" / 10 + "RF_Join_CTE"."Score_8_3" / 10 + "RF_Join_CTE"."Score_9_3" / 10 AS "Score_3", "RF_Join_CTE"."Proba_0_3" / 10 + "RF_Join_CTE"."Proba_1_3" / 10 + "RF_Join_CTE"."Proba_2_3" / 10 + "RF_Join_CTE"."Proba_3_3" / 10 + "RF_Join_CTE"."Proba_4_3" / 10 + "RF_Join_CTE"."Proba_5_3" / 10 + "RF_Join_CTE"."Proba_6_3" / 10 + "RF_Join_CTE"."Proba_7_3" / 10 + "RF_Join_CTE"."Proba_8_3" / 10 + "RF_Join_CTE"."Proba_9_3" / 10 AS "Proba_3", "RF_Join_CTE"."LogProba_0_3" / 10 + "RF_Join_CTE"."LogProba_1_3" / 10 + "RF_Join_CTE"."LogProba_2_3" / 10 + "RF_Join_CTE"."LogProba_3_3" / 10 + "RF_Join_CTE"."LogProba_4_3" / 10 + "RF_Join_CTE"."LogProba_5_3" / 10 + "RF_Join_CTE"."LogProba_6_3" / 10 + "RF_Join_CTE"."LogProba_7_3" / 10 + "RF_Join_CTE"."LogProba_8_3" / 10 + "RF_Join_CTE"."LogProba_9_3" / 10 AS "LogProba_3" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Score_3" AS "Score_3", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."Proba_3" AS "Proba_3", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", "RF_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte