-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.000289421797674 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.201262929456 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.173175202025 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0884879422864 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0445025670543 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.133837722574 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.176310127849 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.234003662156 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.0615353771115 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.503706624426 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.00591942692307 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.422994144578 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.0575713277768 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.156936979133 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.171024427789 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.181353418206 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0644252253037 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.128528531662 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.0533389065872 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.122289863839 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.000289421797674 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.201262929456 AS impute_3, "ADS_imp_1_OUT".impute_4 - 0.173175202025 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.0884879422864 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.0445025670543 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.133837722574 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.176310127849 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.234003662156 AS impute_9, "ADS_imp_1_OUT".impute_10 - -0.0615353771115 AS impute_10, "ADS_imp_1_OUT".impute_11 - -0.503706624426 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.00591942692307 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.422994144578 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.0575713277768 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.156936979133 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.171024427789 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.181353418206 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.0644252253037 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.128528531662 AS impute_19, "ADS_imp_1_OUT".impute_20 - -0.0533389065872 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.122289863839 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.00790378528714 + "CenteredDataForPCA".impute_3 * 0.0283012356368 + "CenteredDataForPCA".impute_4 * -0.0103951696407 + "CenteredDataForPCA".impute_5 * -0.00332367547612 + "CenteredDataForPCA".impute_6 * 0.00363050787826 + "CenteredDataForPCA".impute_7 * -0.763960421223 + "CenteredDataForPCA".impute_8 * 0.240002367712 + "CenteredDataForPCA".impute_9 * -0.0244196963228 + "CenteredDataForPCA".impute_10 * 0.0657719247965 + "CenteredDataForPCA".impute_11 * -0.20721545485 + "CenteredDataForPCA".impute_12 * 0.0061374515244 + "CenteredDataForPCA".impute_13 * -0.416441494478 + "CenteredDataForPCA".impute_14 * 0.0127997132585 + "CenteredDataForPCA".impute_15 * -0.064016730021 + "CenteredDataForPCA".impute_16 * -0.0202683893317 + "CenteredDataForPCA".impute_17 * 0.00796450528011 + "CenteredDataForPCA".impute_18 * -0.0193004384551 + "CenteredDataForPCA".impute_19 * 0.0222383917581 + "CenteredDataForPCA".impute_20 * 0.0152781817267 + "CenteredDataForPCA".impute_21 * -0.361398991967 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.0252366665807 + "CenteredDataForPCA".impute_3 * 0.0324761886388 + "CenteredDataForPCA".impute_4 * -0.0323425698199 + "CenteredDataForPCA".impute_5 * 0.0300472679754 + "CenteredDataForPCA".impute_6 * -0.031569327117 + "CenteredDataForPCA".impute_7 * -0.0493881451894 + "CenteredDataForPCA".impute_8 * 0.379817020436 + "CenteredDataForPCA".impute_9 * 0.390360801057 + "CenteredDataForPCA".impute_10 * 0.172566083216 + "CenteredDataForPCA".impute_11 * 0.564697249747 + "CenteredDataForPCA".impute_12 * -0.0597169600681 + "CenteredDataForPCA".impute_13 * 0.402040260176 + "CenteredDataForPCA".impute_14 * -0.060231478292 + "CenteredDataForPCA".impute_15 * -0.0728443061026 + "CenteredDataForPCA".impute_16 * -0.0438845367849 + "CenteredDataForPCA".impute_17 * 0.0263877163522 + "CenteredDataForPCA".impute_18 * 0.0164408259459 + "CenteredDataForPCA".impute_19 * 0.0184211560475 + "CenteredDataForPCA".impute_20 * -0.0321021308816 + "CenteredDataForPCA".impute_21 * -0.411363822795 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.0881771151624 + "CenteredDataForPCA".impute_3 * -0.0846705672172 + "CenteredDataForPCA".impute_4 * 0.065334093142 + "CenteredDataForPCA".impute_5 * 0.0965599688292 + "CenteredDataForPCA".impute_6 * -0.0812027809313 + "CenteredDataForPCA".impute_7 * -0.267064510419 + "CenteredDataForPCA".impute_8 * -0.385758710468 + "CenteredDataForPCA".impute_9 * -0.635585889474 + "CenteredDataForPCA".impute_10 * -0.0107468096744 + "CenteredDataForPCA".impute_11 * 0.314176586951 + "CenteredDataForPCA".impute_12 * 0.0316357706112 + "CenteredDataForPCA".impute_13 * 0.31132153981 + "CenteredDataForPCA".impute_14 * 0.162226677469 + "CenteredDataForPCA".impute_15 * 0.101792926377 + "CenteredDataForPCA".impute_16 * -0.0823413414248 + "CenteredDataForPCA".impute_17 * -0.0104980524361 + "CenteredDataForPCA".impute_18 * -0.0835858860375 + "CenteredDataForPCA".impute_19 * -0.0233654789242 + "CenteredDataForPCA".impute_20 * -0.215965459794 + "CenteredDataForPCA".impute_21 * -0.215126007673 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.0716722779415 + "CenteredDataForPCA".impute_3 * -0.155091213308 + "CenteredDataForPCA".impute_4 * -0.0826659017946 + "CenteredDataForPCA".impute_5 * 0.00662540059825 + "CenteredDataForPCA".impute_6 * -0.0478583686694 + "CenteredDataForPCA".impute_7 * 0.132817297032 + "CenteredDataForPCA".impute_8 * -0.586151411246 + "CenteredDataForPCA".impute_9 * 0.423823325652 + "CenteredDataForPCA".impute_10 * 0.0893846880617 + "CenteredDataForPCA".impute_11 * -0.160821808246 + "CenteredDataForPCA".impute_12 * 0.0243030525191 + "CenteredDataForPCA".impute_13 * -0.120048262139 + "CenteredDataForPCA".impute_14 * -0.0323510431381 + "CenteredDataForPCA".impute_15 * 0.288577818406 + "CenteredDataForPCA".impute_16 * -0.0156991419163 + "CenteredDataForPCA".impute_17 * -0.0304785746121 + "CenteredDataForPCA".impute_18 * -0.140034222406 + "CenteredDataForPCA".impute_19 * -0.0688178962451 + "CenteredDataForPCA".impute_20 * 0.00432952316917 + "CenteredDataForPCA".impute_21 * -0.511940252173 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.0624511620468 + "CenteredDataForPCA".impute_3 * -0.253059633616 + "CenteredDataForPCA".impute_4 * -0.00770303170372 + "CenteredDataForPCA".impute_5 * -0.0849052769995 + "CenteredDataForPCA".impute_6 * 0.299594780333 + "CenteredDataForPCA".impute_7 * -0.0281446250649 + "CenteredDataForPCA".impute_8 * 0.0944115426063 + "CenteredDataForPCA".impute_9 * 0.0697216932408 + "CenteredDataForPCA".impute_10 * -0.485811222565 + "CenteredDataForPCA".impute_11 * -0.00156012265893 + "CenteredDataForPCA".impute_12 * -0.146415456265 + "CenteredDataForPCA".impute_13 * -0.0255021603972 + "CenteredDataForPCA".impute_14 * -0.350403814259 + "CenteredDataForPCA".impute_15 * 0.11234567644 + "CenteredDataForPCA".impute_16 * -0.0801123187371 + "CenteredDataForPCA".impute_17 * 0.197180997435 + "CenteredDataForPCA".impute_18 * -0.035082992538 + "CenteredDataForPCA".impute_19 * -0.0883909051109 + "CenteredDataForPCA".impute_20 * -0.610336630877 + "CenteredDataForPCA".impute_21 * -0.0104171189463 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.151851384119 + "CenteredDataForPCA".impute_3 * -0.265759622473 + "CenteredDataForPCA".impute_4 * 0.206882773396 + "CenteredDataForPCA".impute_5 * -0.16307558766 + "CenteredDataForPCA".impute_6 * 0.18374473591 + "CenteredDataForPCA".impute_7 * -0.0698852002686 + "CenteredDataForPCA".impute_8 * 0.068473936757 + "CenteredDataForPCA".impute_9 * -0.00026974454217 + "CenteredDataForPCA".impute_10 * -0.42806081806 + "CenteredDataForPCA".impute_11 * 0.105023513596 + "CenteredDataForPCA".impute_12 * -0.203942191719 + "CenteredDataForPCA".impute_13 * 0.0672452724795 + "CenteredDataForPCA".impute_14 * 0.115750204139 + "CenteredDataForPCA".impute_15 * 0.188758270439 + "CenteredDataForPCA".impute_16 * 0.133252137143 + "CenteredDataForPCA".impute_17 * -0.551757383323 + "CenteredDataForPCA".impute_18 * -0.0425817392285 + "CenteredDataForPCA".impute_19 * -0.0271886983751 + "CenteredDataForPCA".impute_20 * 0.416590683742 + "CenteredDataForPCA".impute_21 * -0.0767027918596 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.524070655556 + "CenteredDataForPCA".impute_3 * 0.197741888325 + "CenteredDataForPCA".impute_4 * -0.221560524841 + "CenteredDataForPCA".impute_5 * -0.102598872403 + "CenteredDataForPCA".impute_6 * 0.237501747851 + "CenteredDataForPCA".impute_7 * 0.007316673424 + "CenteredDataForPCA".impute_8 * -0.0981109498823 + "CenteredDataForPCA".impute_9 * 0.0162334423086 + "CenteredDataForPCA".impute_10 * -0.0526453337906 + "CenteredDataForPCA".impute_11 * 0.0317132705011 + "CenteredDataForPCA".impute_12 * 0.0653531587288 + "CenteredDataForPCA".impute_13 * 0.0344839793241 + "CenteredDataForPCA".impute_14 * 0.278159422831 + "CenteredDataForPCA".impute_15 * 0.0676404313605 + "CenteredDataForPCA".impute_16 * 0.269924262531 + "CenteredDataForPCA".impute_17 * 0.140042782572 + "CenteredDataForPCA".impute_18 * -0.00633417174332 + "CenteredDataForPCA".impute_19 * 0.597303919906 + "CenteredDataForPCA".impute_20 * -0.105651343655 + "CenteredDataForPCA".impute_21 * -0.0930154666704 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.251316051486 + "CenteredDataForPCA".impute_3 * -0.0924732119435 + "CenteredDataForPCA".impute_4 * -0.157007302464 + "CenteredDataForPCA".impute_5 * 0.22299233097 + "CenteredDataForPCA".impute_6 * -0.461959744896 + "CenteredDataForPCA".impute_7 * -0.0384530547128 + "CenteredDataForPCA".impute_8 * 0.012257681285 + "CenteredDataForPCA".impute_9 * -0.0945204614933 + "CenteredDataForPCA".impute_10 * 0.093957681186 + "CenteredDataForPCA".impute_11 * -0.00716727239989 + "CenteredDataForPCA".impute_12 * -0.605516674667 + "CenteredDataForPCA".impute_13 * -0.00541348586633 + "CenteredDataForPCA".impute_14 * -0.257433290339 + "CenteredDataForPCA".impute_15 * 0.174167806169 + "CenteredDataForPCA".impute_16 * 0.375019618039 + "CenteredDataForPCA".impute_17 * 0.110374243256 + "CenteredDataForPCA".impute_18 * 0.0126903905578 + "CenteredDataForPCA".impute_19 * -0.0260108726112 + "CenteredDataForPCA".impute_20 * 0.0403190547815 + "CenteredDataForPCA".impute_21 * 0.0499134179967 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.0447544776728 + "CenteredDataForPCA".impute_3 * -0.357234127512 + "CenteredDataForPCA".impute_4 * 0.245378659695 + "CenteredDataForPCA".impute_5 * 0.272677246982 + "CenteredDataForPCA".impute_6 * -0.463972298502 + "CenteredDataForPCA".impute_7 * 0.0465893728675 + "CenteredDataForPCA".impute_8 * 0.0668877610129 + "CenteredDataForPCA".impute_9 * 0.182124671071 + "CenteredDataForPCA".impute_10 * -0.221042014637 + "CenteredDataForPCA".impute_11 * -0.0563113096806 + "CenteredDataForPCA".impute_12 * 0.187644211126 + "CenteredDataForPCA".impute_13 * -0.0652975595635 + "CenteredDataForPCA".impute_14 * 0.34747270391 + "CenteredDataForPCA".impute_15 * -0.18216100194 + "CenteredDataForPCA".impute_16 * 0.11308857759 + "CenteredDataForPCA".impute_17 * -0.112031881792 + "CenteredDataForPCA".impute_18 * 0.26032208924 + "CenteredDataForPCA".impute_19 * 0.234245233409 + "CenteredDataForPCA".impute_20 * -0.29512169092 + "CenteredDataForPCA".impute_21 * -0.0152658710186 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.460410941926 + "CenteredDataForPCA".impute_3 * 0.0995682513585 + "CenteredDataForPCA".impute_4 * 0.12271708009 + "CenteredDataForPCA".impute_5 * 0.342791893772 + "CenteredDataForPCA".impute_6 * 0.197234040552 + "CenteredDataForPCA".impute_7 * -0.0179171582285 + "CenteredDataForPCA".impute_8 * -0.0617709236475 + "CenteredDataForPCA".impute_9 * 0.0167821425664 + "CenteredDataForPCA".impute_10 * -0.00863006007777 + "CenteredDataForPCA".impute_11 * 0.0223532573975 + "CenteredDataForPCA".impute_12 * 0.237382048139 + "CenteredDataForPCA".impute_13 * 0.0163844295114 + "CenteredDataForPCA".impute_14 * 0.0565213849354 + "CenteredDataForPCA".impute_15 * 0.028786225796 + "CenteredDataForPCA".impute_16 * 0.143929065629 + "CenteredDataForPCA".impute_17 * 0.106520903698 + "CenteredDataForPCA".impute_18 * 0.417224055133 + "CenteredDataForPCA".impute_19 * -0.570731335361 + "CenteredDataForPCA".impute_20 * 0.0442657878042 + "CenteredDataForPCA".impute_21 * -0.0847026019728 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.0435985282785 + "CenteredDataForPCA".impute_3 * -0.143277006784 + "CenteredDataForPCA".impute_4 * -0.527432317881 + "CenteredDataForPCA".impute_5 * 0.0308520778961 + "CenteredDataForPCA".impute_6 * -0.102896166907 + "CenteredDataForPCA".impute_7 * -0.0455675480843 + "CenteredDataForPCA".impute_8 * 0.215604521028 + "CenteredDataForPCA".impute_9 * -0.0574621709196 + "CenteredDataForPCA".impute_10 * 0.0797781111516 + "CenteredDataForPCA".impute_11 * 0.0388537179789 + "CenteredDataForPCA".impute_12 * 0.504618739828 + "CenteredDataForPCA".impute_13 * 0.0138972407976 + "CenteredDataForPCA".impute_14 * -0.133856424946 + "CenteredDataForPCA".impute_15 * 0.390032393973 + "CenteredDataForPCA".impute_16 * 0.216384394917 + "CenteredDataForPCA".impute_17 * -0.336926149957 + "CenteredDataForPCA".impute_18 * -0.0630016033116 + "CenteredDataForPCA".impute_19 * -0.0804896085118 + "CenteredDataForPCA".impute_20 * -0.125089777325 + "CenteredDataForPCA".impute_21 * 0.129599731073 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.142744980076 + "CenteredDataForPCA".impute_3 * 0.284076265964 + "CenteredDataForPCA".impute_4 * 0.242837492096 + "CenteredDataForPCA".impute_5 * -0.335293459119 + "CenteredDataForPCA".impute_6 * -0.325821966269 + "CenteredDataForPCA".impute_7 * -0.028162536593 + "CenteredDataForPCA".impute_8 * -0.171911177271 + "CenteredDataForPCA".impute_9 * -0.0529739195561 + "CenteredDataForPCA".impute_10 * -0.160121336096 + "CenteredDataForPCA".impute_11 * 0.0352593423791 + "CenteredDataForPCA".impute_12 * 0.295192995903 + "CenteredDataForPCA".impute_13 * 0.0418024077784 + "CenteredDataForPCA".impute_14 * -0.5893017016 + "CenteredDataForPCA".impute_15 * -0.172234480575 + "CenteredDataForPCA".impute_16 * 0.117353015876 + "CenteredDataForPCA".impute_17 * -0.145897346803 + "CenteredDataForPCA".impute_18 * 0.16753194762 + "CenteredDataForPCA".impute_19 * 0.126825622534 + "CenteredDataForPCA".impute_20 * 0.0221538185816 + "CenteredDataForPCA".impute_21 * -0.125738427046 AS anoova_13, "CenteredDataForPCA".impute_2 * -0.000400672556665 + "CenteredDataForPCA".impute_3 * -0.172094707788 + "CenteredDataForPCA".impute_4 * 0.526115739882 + "CenteredDataForPCA".impute_5 * -0.138893935826 + "CenteredDataForPCA".impute_6 * 0.250054553966 + "CenteredDataForPCA".impute_7 * 0.0120781898586 + "CenteredDataForPCA".impute_8 * 0.0510876454469 + "CenteredDataForPCA".impute_9 * -0.0201243322917 + "CenteredDataForPCA".impute_10 * 0.597644053892 + "CenteredDataForPCA".impute_11 * -0.0361004636803 + "CenteredDataForPCA".impute_12 * -0.0306927521944 + "CenteredDataForPCA".impute_13 * -0.0289524072504 + "CenteredDataForPCA".impute_14 * -0.0804013849905 + "CenteredDataForPCA".impute_15 * 0.188386570089 + "CenteredDataForPCA".impute_16 * 0.292823365715 + "CenteredDataForPCA".impute_17 * -0.164950034074 + "CenteredDataForPCA".impute_18 * 0.0243510873051 + "CenteredDataForPCA".impute_19 * 0.0835171079738 + "CenteredDataForPCA".impute_20 * -0.28105736161 + "CenteredDataForPCA".impute_21 * 0.0829136078161 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.527739290946 + "CenteredDataForPCA".impute_3 * -0.310673186531 + "CenteredDataForPCA".impute_4 * 0.123303551772 + "CenteredDataForPCA".impute_5 * -0.325267618386 + "CenteredDataForPCA".impute_6 * -0.313030032341 + "CenteredDataForPCA".impute_7 * 0.0104510140469 + "CenteredDataForPCA".impute_8 * 0.111804674218 + "CenteredDataForPCA".impute_9 * 0.000718648591584 + "CenteredDataForPCA".impute_10 * 0.136164003047 + "CenteredDataForPCA".impute_11 * 0.00759333479208 + "CenteredDataForPCA".impute_12 * 0.161977846116 + "CenteredDataForPCA".impute_13 * 0.00191317563908 + "CenteredDataForPCA".impute_14 * 0.105689406834 + "CenteredDataForPCA".impute_15 * 0.0874449098292 + "CenteredDataForPCA".impute_16 * -0.388287771035 + "CenteredDataForPCA".impute_17 * 0.200674213231 + "CenteredDataForPCA".impute_18 * -0.328510247393 + "CenteredDataForPCA".impute_19 * -0.146069703467 + "CenteredDataForPCA".impute_20 * 0.0522607257891 + "CenteredDataForPCA".impute_21 * 0.0818113584331 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.213249763154 + "CenteredDataForPCA".impute_3 * -0.385649202288 + "CenteredDataForPCA".impute_4 * 0.0117808585748 + "CenteredDataForPCA".impute_5 * -0.134798731824 + "CenteredDataForPCA".impute_6 * 0.066060679479 + "CenteredDataForPCA".impute_7 * -0.0566550153632 + "CenteredDataForPCA".impute_8 * 0.0241579888456 + "CenteredDataForPCA".impute_9 * -0.0793807233269 + "CenteredDataForPCA".impute_10 * -0.0164362743893 + "CenteredDataForPCA".impute_11 * 0.051406314146 + "CenteredDataForPCA".impute_12 * 0.142341600235 + "CenteredDataForPCA".impute_13 * 0.0378369622349 + "CenteredDataForPCA".impute_14 * -0.120380786752 + "CenteredDataForPCA".impute_15 * 0.284623230523 + "CenteredDataForPCA".impute_16 * 0.020066749329 + "CenteredDataForPCA".impute_17 * 0.501706912805 + "CenteredDataForPCA".impute_18 * 0.448600600184 + "CenteredDataForPCA".impute_19 * 0.224162871338 + "CenteredDataForPCA".impute_20 * 0.386394380436 + "CenteredDataForPCA".impute_21 * -0.00435649838541 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.0349699394899 + "CenteredDataForPCA".impute_3 * 0.415063684798 + "CenteredDataForPCA".impute_4 * 0.0539603508556 + "CenteredDataForPCA".impute_5 * -0.198930287023 + "CenteredDataForPCA".impute_6 * -0.196879739845 + "CenteredDataForPCA".impute_7 * -0.00381657285354 + "CenteredDataForPCA".impute_8 * 0.0866862991891 + "CenteredDataForPCA".impute_9 * 0.049821871615 + "CenteredDataForPCA".impute_10 * -0.0317123245798 + "CenteredDataForPCA".impute_11 * -0.0251760381883 + "CenteredDataForPCA".impute_12 * -0.195076260677 + "CenteredDataForPCA".impute_13 * -0.0359372798423 + "CenteredDataForPCA".impute_14 * 0.212497290989 + "CenteredDataForPCA".impute_15 * 0.555661419868 + "CenteredDataForPCA".impute_16 * -0.347973492563 + "CenteredDataForPCA".impute_17 * -0.126314713932 + "CenteredDataForPCA".impute_18 * 0.407220010924 + "CenteredDataForPCA".impute_19 * -0.00666622753356 + "CenteredDataForPCA".impute_20 * -0.190324858326 + "CenteredDataForPCA".impute_21 * 0.0346957133137 AS anoova_17, "CenteredDataForPCA".impute_2 * 0.235029366022 + "CenteredDataForPCA".impute_3 * -0.150379013591 + "CenteredDataForPCA".impute_4 * -0.0500108562797 + "CenteredDataForPCA".impute_5 * 0.459921625445 + "CenteredDataForPCA".impute_6 * 0.143108692288 + "CenteredDataForPCA".impute_7 * 0.0124628994002 + "CenteredDataForPCA".impute_8 * -0.0502408048956 + "CenteredDataForPCA".impute_9 * -0.0476978775545 + "CenteredDataForPCA".impute_10 * 0.163224919715 + "CenteredDataForPCA".impute_11 * -0.032042611803 + "CenteredDataForPCA".impute_12 * -0.0331736712099 + "CenteredDataForPCA".impute_13 * -0.0145649363153 + "CenteredDataForPCA".impute_14 * -0.337218823629 + "CenteredDataForPCA".impute_15 * -0.0164663322796 + "CenteredDataForPCA".impute_16 * -0.5466358241 + "CenteredDataForPCA".impute_17 * -0.293129438897 + "CenteredDataForPCA".impute_18 * 0.158109719032 + "CenteredDataForPCA".impute_19 * 0.353245305116 + "CenteredDataForPCA".impute_20 * 0.0650736360593 + "CenteredDataForPCA".impute_21 * 0.0310355763239 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.0701104914384 + "CenteredDataForPCA".impute_3 * 0.275848372555 + "CenteredDataForPCA".impute_4 * 0.401454017787 + "CenteredDataForPCA".impute_5 * 0.442796346066 + "CenteredDataForPCA".impute_6 * -0.0416278242799 + "CenteredDataForPCA".impute_7 * -0.00961683332039 + "CenteredDataForPCA".impute_8 * 0.141405595967 + "CenteredDataForPCA".impute_9 * 0.0509396003569 + "CenteredDataForPCA".impute_10 * -0.205832485525 + "CenteredDataForPCA".impute_11 * 0.016595571603 + "CenteredDataForPCA".impute_12 * 0.202283392894 + "CenteredDataForPCA".impute_13 * -0.00487150745092 + "CenteredDataForPCA".impute_14 * -0.0943130921006 + "CenteredDataForPCA".impute_15 * 0.405976857441 + "CenteredDataForPCA".impute_16 * 0.0453148692579 + "CenteredDataForPCA".impute_17 * 0.208130308922 + "CenteredDataForPCA".impute_18 * -0.441650183915 + "CenteredDataForPCA".impute_19 * 0.146041110761 + "CenteredDataForPCA".impute_20 * 0.128654906205 + "CenteredDataForPCA".impute_21 * 0.0417011101522 AS anoova_19, "CenteredDataForPCA".impute_2 * -4.18471767737e-17 + "CenteredDataForPCA".impute_3 * 2.81849340755e-16 + "CenteredDataForPCA".impute_4 * -5.78984622678e-17 + "CenteredDataForPCA".impute_5 * -2.74391282236e-16 + "CenteredDataForPCA".impute_6 * -2.5940171561e-16 + "CenteredDataForPCA".impute_7 * -0.5137497159 + "CenteredDataForPCA".impute_8 * -0.38704279257 + "CenteredDataForPCA".impute_9 * 0.431151060191 + "CenteredDataForPCA".impute_10 * -3.54697645534e-16 + "CenteredDataForPCA".impute_11 * 0.280880237458 + "CenteredDataForPCA".impute_12 * 2.32918125155e-16 + "CenteredDataForPCA".impute_13 * 0.065629397437 + "CenteredDataForPCA".impute_14 * -2.30664740318e-16 + "CenteredDataForPCA".impute_15 * -1.25018639043e-16 + "CenteredDataForPCA".impute_16 * 1.15766867066e-16 + "CenteredDataForPCA".impute_17 * 1.96006480209e-16 + "CenteredDataForPCA".impute_18 * -3.293901962e-16 + "CenteredDataForPCA".impute_19 * -2.00317789524e-16 + "CenteredDataForPCA".impute_20 * 2.16246669729e-16 + "CenteredDataForPCA".impute_21 * 0.56317576637 AS anoova_20, "CenteredDataForPCA".impute_2 * -5.28200016758e-17 + "CenteredDataForPCA".impute_3 * -5.20919036233e-17 + "CenteredDataForPCA".impute_4 * -9.38824887082e-17 + "CenteredDataForPCA".impute_5 * 8.46705785344e-17 + "CenteredDataForPCA".impute_6 * 2.16437917972e-16 + "CenteredDataForPCA".impute_7 * 0.21148522672 + "CenteredDataForPCA".impute_8 * -0.0501783258716 + "CenteredDataForPCA".impute_9 * -0.0992889510386 + "CenteredDataForPCA".impute_10 * -3.36041498275e-16 + "CenteredDataForPCA".impute_11 * 0.64051702362 + "CenteredDataForPCA".impute_12 * -2.20107651035e-16 + "CenteredDataForPCA".impute_13 * -0.729819004186 + "CenteredDataForPCA".impute_14 * -1.55979675496e-17 + "CenteredDataForPCA".impute_15 * -5.92623166406e-17 + "CenteredDataForPCA".impute_16 * -2.10917207807e-16 + "CenteredDataForPCA".impute_17 * 1.15360481446e-16 + "CenteredDataForPCA".impute_18 * -3.72939426474e-17 + "CenteredDataForPCA".impute_19 * 1.62876608893e-16 + "CenteredDataForPCA".impute_20 * 1.73504443401e-16 + "CenteredDataForPCA".impute_21 * 4.76939389029e-05 AS anoova_21 
FROM "CenteredDataForPCA"), 
"RawScores" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -1.38629436112 + "ADS_ano_2_OUT".anoova_2 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_2) * -0.810930216216 + "ADS_ano_2_OUT".anoova_3 * -0.351397886838 + (1 - "ADS_ano_2_OUT".anoova_3) * -1.21639532432 + "ADS_ano_2_OUT".anoova_4 * -0.351397886838 + (1 - "ADS_ano_2_OUT".anoova_4) * -1.21639532432 + "ADS_ano_2_OUT".anoova_5 * -0.405465108108 + (1 - "ADS_ano_2_OUT".anoova_5) * -1.09861228867 + "ADS_ano_2_OUT".anoova_6 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_6) * -0.810930216216 + "ADS_ano_2_OUT".anoova_7 * -1.21639532432 + (1 - "ADS_ano_2_OUT".anoova_7) * -0.351397886838 + "ADS_ano_2_OUT".anoova_8 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_8) * -0.523248143765 + "ADS_ano_2_OUT".anoova_9 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_9) * -0.587786664902 + "ADS_ano_2_OUT".anoova_10 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_10) * -0.656779536389 + "ADS_ano_2_OUT".anoova_11 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_11) * -0.656779536389 + "ADS_ano_2_OUT".anoova_12 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_12) * -0.730887508543 + "ADS_ano_2_OUT".anoova_13 * -1.09861228867 + (1 - "ADS_ano_2_OUT".anoova_13) * -0.405465108108 + "ADS_ano_2_OUT".anoova_14 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_14) * -0.730887508543 + "ADS_ano_2_OUT".anoova_15 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_15) * -0.523248143765 + "ADS_ano_2_OUT".anoova_16 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_16) * -0.810930216216 + "ADS_ano_2_OUT".anoova_17 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_17) * -0.587786664902 + "ADS_ano_2_OUT".anoova_18 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_18) * -0.730887508543 + "ADS_ano_2_OUT".anoova_19 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_19) * -0.523248143765 + "ADS_ano_2_OUT".anoova_20 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_20) * -0.730887508543 + "ADS_ano_2_OUT".anoova_21 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_21) * -0.810930216216 AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -1.38629436112 + "ADS_ano_2_OUT".anoova_2 * -0.251314428281 + (1 - "ADS_ano_2_OUT".anoova_2) * -1.50407739678 + "ADS_ano_2_OUT".anoova_3 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_3) * -0.656779536389 + "ADS_ano_2_OUT".anoova_4 * -1.09861228867 + (1 - "ADS_ano_2_OUT".anoova_4) * -0.405465108108 + "ADS_ano_2_OUT".anoova_5 * -0.251314428281 + (1 - "ADS_ano_2_OUT".anoova_5) * -1.50407739678 + "ADS_ano_2_OUT".anoova_6 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_6) * -0.587786664902 + "ADS_ano_2_OUT".anoova_7 * -0.405465108108 + (1 - "ADS_ano_2_OUT".anoova_7) * -1.09861228867 + "ADS_ano_2_OUT".anoova_8 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_8) * -0.810930216216 + "ADS_ano_2_OUT".anoova_9 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_9) * -0.587786664902 + "ADS_ano_2_OUT".anoova_10 * -0.462623521948 + (1 - "ADS_ano_2_OUT".anoova_10) * -0.99325177301 + "ADS_ano_2_OUT".anoova_11 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_11) * -0.810930216216 + "ADS_ano_2_OUT".anoova_12 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_12) * -0.656779536389 + "ADS_ano_2_OUT".anoova_13 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_13) * -0.730887508543 + "ADS_ano_2_OUT".anoova_14 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_14) * -0.810930216216 + "ADS_ano_2_OUT".anoova_15 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_15) * -0.656779536389 + "ADS_ano_2_OUT".anoova_16 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_16) * -0.523248143765 + "ADS_ano_2_OUT".anoova_17 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_17) * -0.656779536389 + "ADS_ano_2_OUT".anoova_18 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_18) * -0.810930216216 + "ADS_ano_2_OUT".anoova_19 * -0.99325177301 + (1 - "ADS_ano_2_OUT".anoova_19) * -0.462623521948 + "ADS_ano_2_OUT".anoova_20 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_20) * -0.587786664902 + "ADS_ano_2_OUT".anoova_21 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_21) * -0.897941593206 AS "Score_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "Proba_2", -1.38629436112 + "ADS_ano_2_OUT".anoova_2 * -1.34992671695 + (1 - "ADS_ano_2_OUT".anoova_2) * -0.30010459245 + "ADS_ano_2_OUT".anoova_3 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_3) * -0.523248143765 + "ADS_ano_2_OUT".anoova_4 * -0.30010459245 + (1 - "ADS_ano_2_OUT".anoova_4) * -1.34992671695 + "ADS_ano_2_OUT".anoova_5 * -1.68639895357 + (1 - "ADS_ano_2_OUT".anoova_5) * -0.204794412646 + "ADS_ano_2_OUT".anoova_6 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_6) * -0.523248143765 + "ADS_ano_2_OUT".anoova_7 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_7) * -0.897941593206 + "ADS_ano_2_OUT".anoova_8 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_8) * -0.523248143765 + "ADS_ano_2_OUT".anoova_9 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_9) * -0.810930216216 + "ADS_ano_2_OUT".anoova_10 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_10) * -0.730887508543 + "ADS_ano_2_OUT".anoova_11 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_11) * -0.730887508543 + "ADS_ano_2_OUT".anoova_12 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_12) * -0.730887508543 + "ADS_ano_2_OUT".anoova_13 * -0.99325177301 + (1 - "ADS_ano_2_OUT".anoova_13) * -0.462623521948 + "ADS_ano_2_OUT".anoova_14 * -0.405465108108 + (1 - "ADS_ano_2_OUT".anoova_14) * -1.09861228867 + "ADS_ano_2_OUT".anoova_15 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_15) * -0.810930216216 + "ADS_ano_2_OUT".anoova_16 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_16) * -0.730887508543 + "ADS_ano_2_OUT".anoova_17 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_17) * -0.810930216216 + "ADS_ano_2_OUT".anoova_18 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_18) * -0.656779536389 + "ADS_ano_2_OUT".anoova_19 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_19) * -0.656779536389 + "ADS_ano_2_OUT".anoova_20 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_20) * -0.656779536389 + "ADS_ano_2_OUT".anoova_21 * -0.405465108108 + (1 - "ADS_ano_2_OUT".anoova_21) * -1.09861228867 AS "Score_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Proba_3", -1.38629436112 + "ADS_ano_2_OUT".anoova_2 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_2) * -0.523248143765 + "ADS_ano_2_OUT".anoova_3 * -1.09861228867 + (1 - "ADS_ano_2_OUT".anoova_3) * -0.405465108108 + "ADS_ano_2_OUT".anoova_4 * -2.19722457734 + (1 - "ADS_ano_2_OUT".anoova_4) * -0.117783035656 + "ADS_ano_2_OUT".anoova_5 * -1.21639532432 + (1 - "ADS_ano_2_OUT".anoova_5) * -0.351397886838 + "ADS_ano_2_OUT".anoova_6 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_6) * -0.810930216216 + "ADS_ano_2_OUT".anoova_7 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_7) * -0.587786664902 + "ADS_ano_2_OUT".anoova_8 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_8) * -0.587786664902 + "ADS_ano_2_OUT".anoova_9 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_9) * -0.656779536389 + "ADS_ano_2_OUT".anoova_10 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_10) * -0.656779536389 + "ADS_ano_2_OUT".anoova_11 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_11) * -0.523248143765 + "ADS_ano_2_OUT".anoova_12 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_12) * -0.656779536389 + "ADS_ano_2_OUT".anoova_13 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_13) * -0.897941593206 + "ADS_ano_2_OUT".anoova_14 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_14) * -0.587786664902 + "ADS_ano_2_OUT".anoova_15 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_15) * -0.656779536389 + "ADS_ano_2_OUT".anoova_16 * -0.405465108108 + (1 - "ADS_ano_2_OUT".anoova_16) * -1.09861228867 + "ADS_ano_2_OUT".anoova_17 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_17) * -0.587786664902 + "ADS_ano_2_OUT".anoova_18 * -0.462623521948 + (1 - "ADS_ano_2_OUT".anoova_18) * -0.99325177301 + "ADS_ano_2_OUT".anoova_19 * -0.462623521948 + (1 - "ADS_ano_2_OUT".anoova_19) * -0.99325177301 + "ADS_ano_2_OUT".anoova_20 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_20) * -0.730887508543 + "ADS_ano_2_OUT".anoova_21 * -0.251314428281 + (1 - "ADS_ano_2_OUT".anoova_21) * -1.50407739678 AS "Score_3" 
FROM "ADS_ano_2_OUT"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte