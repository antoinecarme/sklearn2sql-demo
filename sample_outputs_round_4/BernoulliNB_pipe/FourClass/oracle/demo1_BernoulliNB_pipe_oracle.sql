-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.186094480909 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0990665827969 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.18254868458 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.10273859765 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.283943972924 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.0312943873268 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.0953276824985 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.316839901544 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0312670442337 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0842343613602 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN -0.0160823639339 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.00193032706249 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.0326568058985 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.11534795824 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.0807473014996 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.021487131587 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.184127308709 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.169881599811 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.101402820232 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.20681423879 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - -0.186094480909 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.0990665827969 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.18254868458 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.10273859765 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.283943972924 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.0312943873268 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.0953276824985 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.316839901544 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0312670442337 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.0842343613602 AS impute_11, "ADS_imp_1_OUT".impute_12 - -0.0160823639339 AS impute_12, "ADS_imp_1_OUT".impute_13 - 0.00193032706249 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.0326568058985 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.11534795824 AS impute_15, "ADS_imp_1_OUT".impute_16 - 0.0807473014996 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.021487131587 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.184127308709 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.169881599811 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.101402820232 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.20681423879 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * -0.0186852637042 + "CenteredDataForPCA".impute_3 * -0.0403630398939 + "CenteredDataForPCA".impute_4 * 0.00126886640604 + "CenteredDataForPCA".impute_5 * -0.0124812321921 + "CenteredDataForPCA".impute_6 * -0.183440942753 + "CenteredDataForPCA".impute_7 * 0.00121561968835 + "CenteredDataForPCA".impute_8 * 0.0788614059255 + "CenteredDataForPCA".impute_9 * -0.817020705919 + "CenteredDataForPCA".impute_10 * -0.358927140106 + "CenteredDataForPCA".impute_11 * 0.0582849745185 + "CenteredDataForPCA".impute_12 * 0.0042851832864 + "CenteredDataForPCA".impute_13 * -0.0237108925438 + "CenteredDataForPCA".impute_14 * 0.0124933630454 + "CenteredDataForPCA".impute_15 * 0.324396952067 + "CenteredDataForPCA".impute_16 * -0.0466264346943 + "CenteredDataForPCA".impute_17 * -0.0133803571685 + "CenteredDataForPCA".impute_18 * 0.208775191475 + "CenteredDataForPCA".impute_19 * -0.0093361197658 + "CenteredDataForPCA".impute_20 * 0.0253435985902 + "CenteredDataForPCA".impute_21 * 0.0748653205412 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.0122061664074 + "CenteredDataForPCA".impute_3 * -0.064637995023 + "CenteredDataForPCA".impute_4 * 0.0304751265101 + "CenteredDataForPCA".impute_5 * 0.039932496011 + "CenteredDataForPCA".impute_6 * 0.257722309742 + "CenteredDataForPCA".impute_7 * 0.0724888330405 + "CenteredDataForPCA".impute_8 * 0.393192286943 + "CenteredDataForPCA".impute_9 * -0.121517014854 + "CenteredDataForPCA".impute_10 * 0.209161062892 + "CenteredDataForPCA".impute_11 * -0.00523895041146 + "CenteredDataForPCA".impute_12 * 0.107645055663 + "CenteredDataForPCA".impute_13 * 0.037528908732 + "CenteredDataForPCA".impute_14 * 0.0408894284839 + "CenteredDataForPCA".impute_15 * 0.412402611787 + "CenteredDataForPCA".impute_16 * -0.072719079864 + "CenteredDataForPCA".impute_17 * 0.0907359915858 + "CenteredDataForPCA".impute_18 * -0.713304506354 + "CenteredDataForPCA".impute_19 * -0.00365163331699 + "CenteredDataForPCA".impute_20 * 0.0049005155009 + "CenteredDataForPCA".impute_21 * 0.0350190784097 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.0306357642093 + "CenteredDataForPCA".impute_3 * -0.0216476083047 + "CenteredDataForPCA".impute_4 * 0.243947750315 + "CenteredDataForPCA".impute_5 * -0.0869103603559 + "CenteredDataForPCA".impute_6 * 0.46348882422 + "CenteredDataForPCA".impute_7 * 0.209466599754 + "CenteredDataForPCA".impute_8 * 0.398380458719 + "CenteredDataForPCA".impute_9 * 0.0593272978612 + "CenteredDataForPCA".impute_10 * -0.47827386404 + "CenteredDataForPCA".impute_11 * 0.124035611911 + "CenteredDataForPCA".impute_12 * -0.0361128929743 + "CenteredDataForPCA".impute_13 * 0.131127899811 + "CenteredDataForPCA".impute_14 * -0.0160486082593 + "CenteredDataForPCA".impute_15 * -0.311199425336 + "CenteredDataForPCA".impute_16 * -0.141922609194 + "CenteredDataForPCA".impute_17 * 0.264818199827 + "CenteredDataForPCA".impute_18 * 0.128843618617 + "CenteredDataForPCA".impute_19 * 0.0743752506541 + "CenteredDataForPCA".impute_20 * 0.157376475515 + "CenteredDataForPCA".impute_21 * -0.117053852182 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.100000619288 + "CenteredDataForPCA".impute_3 * -0.0254229075952 + "CenteredDataForPCA".impute_4 * 0.123100838338 + "CenteredDataForPCA".impute_5 * 0.301453682131 + "CenteredDataForPCA".impute_6 * 0.315332729142 + "CenteredDataForPCA".impute_7 * 0.295635661784 + "CenteredDataForPCA".impute_8 * -0.568379421907 + "CenteredDataForPCA".impute_9 * -0.0228592029049 + "CenteredDataForPCA".impute_10 * -0.137654492678 + "CenteredDataForPCA".impute_11 * -0.0639350606048 + "CenteredDataForPCA".impute_12 * -0.196625506094 + "CenteredDataForPCA".impute_13 * -0.155293133752 + "CenteredDataForPCA".impute_14 * -0.158128948015 + "CenteredDataForPCA".impute_15 * 0.254443499765 + "CenteredDataForPCA".impute_16 * 0.13912686913 + "CenteredDataForPCA".impute_17 * 0.295287225343 + "CenteredDataForPCA".impute_18 * -0.0668173143901 + "CenteredDataForPCA".impute_19 * 0.0707082423253 + "CenteredDataForPCA".impute_20 * -0.211316302746 + "CenteredDataForPCA".impute_21 * -0.191527154487 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.0950870716072 + "CenteredDataForPCA".impute_3 * -0.110959613274 + "CenteredDataForPCA".impute_4 * 0.0400172135288 + "CenteredDataForPCA".impute_5 * -0.186208185445 + "CenteredDataForPCA".impute_6 * -0.0116592723193 + "CenteredDataForPCA".impute_7 * 0.117310331861 + "CenteredDataForPCA".impute_8 * -0.243876888521 + "CenteredDataForPCA".impute_9 * 0.00871810204448 + "CenteredDataForPCA".impute_10 * 0.0511541155305 + "CenteredDataForPCA".impute_11 * 0.0871628844156 + "CenteredDataForPCA".impute_12 * 0.11270981782 + "CenteredDataForPCA".impute_13 * -0.168577401455 + "CenteredDataForPCA".impute_14 * 0.615355497303 + "CenteredDataForPCA".impute_15 * 0.0963032572695 + "CenteredDataForPCA".impute_16 * 0.0471921254181 + "CenteredDataForPCA".impute_17 * 0.133616460621 + "CenteredDataForPCA".impute_18 * -0.0115020875341 + "CenteredDataForPCA".impute_19 * -0.18464370139 + "CenteredDataForPCA".impute_20 * 0.548879318895 + "CenteredDataForPCA".impute_21 * -0.272166742176 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.00332665835263 + "CenteredDataForPCA".impute_3 * -0.167990189368 + "CenteredDataForPCA".impute_4 * 0.377364667751 + "CenteredDataForPCA".impute_5 * 0.126621362227 + "CenteredDataForPCA".impute_6 * -0.386430315544 + "CenteredDataForPCA".impute_7 * -0.0753963268851 + "CenteredDataForPCA".impute_8 * -0.0468567265274 + "CenteredDataForPCA".impute_9 * -0.00156560259061 + "CenteredDataForPCA".impute_10 * 0.289696862311 + "CenteredDataForPCA".impute_11 * 0.387200454389 + "CenteredDataForPCA".impute_12 * -0.0847716421858 + "CenteredDataForPCA".impute_13 * 0.254519789223 + "CenteredDataForPCA".impute_14 * -0.269294369375 + "CenteredDataForPCA".impute_15 * 0.029176749345 + "CenteredDataForPCA".impute_16 * -0.293871585 + "CenteredDataForPCA".impute_17 * 0.38898129455 + "CenteredDataForPCA".impute_18 * 0.0238855587721 + "CenteredDataForPCA".impute_19 * 0.0260969887058 + "CenteredDataForPCA".impute_20 * 0.149972657786 + "CenteredDataForPCA".impute_21 * -0.124595681118 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.249562804385 + "CenteredDataForPCA".impute_3 * -0.187747636423 + "CenteredDataForPCA".impute_4 * 0.197502735901 + "CenteredDataForPCA".impute_5 * 0.0809512970618 + "CenteredDataForPCA".impute_6 * -0.0488696594567 + "CenteredDataForPCA".impute_7 * 0.0205319197998 + "CenteredDataForPCA".impute_8 * 0.051101398619 + "CenteredDataForPCA".impute_9 * 0.0405089432015 + "CenteredDataForPCA".impute_10 * -0.00262240768879 + "CenteredDataForPCA".impute_11 * 0.193609508754 + "CenteredDataForPCA".impute_12 * 0.34845191673 + "CenteredDataForPCA".impute_13 * -0.400366969632 + "CenteredDataForPCA".impute_14 * 0.33314287596 + "CenteredDataForPCA".impute_15 * -0.0913566705457 + "CenteredDataForPCA".impute_16 * -0.189166718817 + "CenteredDataForPCA".impute_17 * 0.166170257318 + "CenteredDataForPCA".impute_18 * 0.0719711233299 + "CenteredDataForPCA".impute_19 * 0.0374638055322 + "CenteredDataForPCA".impute_20 * -0.55765253497 + "CenteredDataForPCA".impute_21 * 0.174230141278 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.145840123721 + "CenteredDataForPCA".impute_3 * 0.0909321493841 + "CenteredDataForPCA".impute_4 * -0.00494070773347 + "CenteredDataForPCA".impute_5 * -0.305988571109 + "CenteredDataForPCA".impute_6 * -0.320087682606 + "CenteredDataForPCA".impute_7 * 0.621953589704 + "CenteredDataForPCA".impute_8 * 0.154045848469 + "CenteredDataForPCA".impute_9 * -0.0412978724491 + "CenteredDataForPCA".impute_10 * 0.172728044943 + "CenteredDataForPCA".impute_11 * -0.205055956959 + "CenteredDataForPCA".impute_12 * -0.0280299677287 + "CenteredDataForPCA".impute_13 * 0.259003533 + "CenteredDataForPCA".impute_14 * 0.130566712577 + "CenteredDataForPCA".impute_15 * -0.0514501487948 + "CenteredDataForPCA".impute_16 * 0.22724960907 + "CenteredDataForPCA".impute_17 * 0.227757347164 + "CenteredDataForPCA".impute_18 * 0.056958741004 + "CenteredDataForPCA".impute_19 * -0.0750345293088 + "CenteredDataForPCA".impute_20 * -0.294492861723 + "CenteredDataForPCA".impute_21 * -0.0593971502861 AS anoova_9, "CenteredDataForPCA".impute_2 * 0.291685064602 + "CenteredDataForPCA".impute_3 * -0.361195809569 + "CenteredDataForPCA".impute_4 * -0.0560823296338 + "CenteredDataForPCA".impute_5 * 0.255690069907 + "CenteredDataForPCA".impute_6 * -0.0303404017226 + "CenteredDataForPCA".impute_7 * 0.0571095828795 + "CenteredDataForPCA".impute_8 * 0.213555642574 + "CenteredDataForPCA".impute_9 * -0.0207045299467 + "CenteredDataForPCA".impute_10 * -0.0286788388195 + "CenteredDataForPCA".impute_11 * -0.0365160830595 + "CenteredDataForPCA".impute_12 * -0.0622090077967 + "CenteredDataForPCA".impute_13 * -0.0570416292845 + "CenteredDataForPCA".impute_14 * -0.203627779547 + "CenteredDataForPCA".impute_15 * -0.0836065202647 + "CenteredDataForPCA".impute_16 * 0.186274388255 + "CenteredDataForPCA".impute_17 * -0.134886326768 + "CenteredDataForPCA".impute_18 * 0.0241259232423 + "CenteredDataForPCA".impute_19 * -0.646636015691 + "CenteredDataForPCA".impute_20 * -0.0823698482232 + "CenteredDataForPCA".impute_21 * -0.359981454275 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.360837605381 + "CenteredDataForPCA".impute_3 * -0.157455531442 + "CenteredDataForPCA".impute_4 * 0.089060471967 + "CenteredDataForPCA".impute_5 * 0.0273209149948 + "CenteredDataForPCA".impute_6 * 0.0569227898341 + "CenteredDataForPCA".impute_7 * 0.134519990176 + "CenteredDataForPCA".impute_8 * -0.119568139737 + "CenteredDataForPCA".impute_9 * 0.0462504779222 + "CenteredDataForPCA".impute_10 * -0.035939973134 + "CenteredDataForPCA".impute_11 * 0.170545228643 + "CenteredDataForPCA".impute_12 * 0.62657747126 + "CenteredDataForPCA".impute_13 * 0.034083579551 + "CenteredDataForPCA".impute_14 * -0.261015095757 + "CenteredDataForPCA".impute_15 * -0.0119716783637 + "CenteredDataForPCA".impute_16 * 0.304858595635 + "CenteredDataForPCA".impute_17 * -0.0143550914383 + "CenteredDataForPCA".impute_18 * 0.0359739628359 + "CenteredDataForPCA".impute_19 * -0.221772978307 + "CenteredDataForPCA".impute_20 * 0.185710418628 + "CenteredDataForPCA".impute_21 * 0.357817205076 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.154986194532 + "CenteredDataForPCA".impute_3 * 0.0642248352539 + "CenteredDataForPCA".impute_4 * 0.482513212884 + "CenteredDataForPCA".impute_5 * -0.215623053771 + "CenteredDataForPCA".impute_6 * 0.127737051561 + "CenteredDataForPCA".impute_7 * 0.0642458651665 + "CenteredDataForPCA".impute_8 * -0.205480241254 + "CenteredDataForPCA".impute_9 * 0.0125374279441 + "CenteredDataForPCA".impute_10 * -0.0329925007543 + "CenteredDataForPCA".impute_11 * 0.126703465865 + "CenteredDataForPCA".impute_12 * -0.0553858861388 + "CenteredDataForPCA".impute_13 * 0.248154951933 + "CenteredDataForPCA".impute_14 * 0.121859840028 + "CenteredDataForPCA".impute_15 * 0.0971950251455 + "CenteredDataForPCA".impute_16 * -0.263883128752 + "CenteredDataForPCA".impute_17 * -0.573444552241 + "CenteredDataForPCA".impute_18 * -0.050395236462 + "CenteredDataForPCA".impute_19 * -0.258472759233 + "CenteredDataForPCA".impute_20 * -0.221111106438 + "CenteredDataForPCA".impute_21 * -0.0831875822756 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.244760948807 + "CenteredDataForPCA".impute_3 * 0.476163216385 + "CenteredDataForPCA".impute_4 * 0.499395033599 + "CenteredDataForPCA".impute_5 * -0.0926558833253 + "CenteredDataForPCA".impute_6 * -0.11534189867 + "CenteredDataForPCA".impute_7 * 0.0631962482769 + "CenteredDataForPCA".impute_8 * 0.131267039442 + "CenteredDataForPCA".impute_9 * -0.0456821463178 + "CenteredDataForPCA".impute_10 * 0.0732227705567 + "CenteredDataForPCA".impute_11 * -0.115727927236 + "CenteredDataForPCA".impute_12 * 0.113066026549 + "CenteredDataForPCA".impute_13 * -0.436625106888 + "CenteredDataForPCA".impute_14 * -0.281214277135 + "CenteredDataForPCA".impute_15 * 0.00427325385062 + "CenteredDataForPCA".impute_16 * 0.23303209388 + "CenteredDataForPCA".impute_17 * -0.0967450878977 + "CenteredDataForPCA".impute_18 * -0.0260312773731 + "CenteredDataForPCA".impute_19 * 0.0856755102817 + "CenteredDataForPCA".impute_20 * 0.158164525594 + "CenteredDataForPCA".impute_21 * -0.144178948162 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.296918001151 + "CenteredDataForPCA".impute_3 * -0.370328616564 + "CenteredDataForPCA".impute_4 * 0.149634841239 + "CenteredDataForPCA".impute_5 * -0.447606992056 + "CenteredDataForPCA".impute_6 * 0.103221211154 + "CenteredDataForPCA".impute_7 * -0.27812429761 + "CenteredDataForPCA".impute_8 * -0.0806469559719 + "CenteredDataForPCA".impute_9 * -0.0185677168061 + "CenteredDataForPCA".impute_10 * -0.0417550564812 + "CenteredDataForPCA".impute_11 * 0.132348287826 + "CenteredDataForPCA".impute_12 * -0.057853584918 + "CenteredDataForPCA".impute_13 * 0.211438680084 + "CenteredDataForPCA".impute_14 * -0.0484579685424 + "CenteredDataForPCA".impute_15 * 0.0708206114168 + "CenteredDataForPCA".impute_16 * 0.535674158701 + "CenteredDataForPCA".impute_17 * 0.0194144407864 + "CenteredDataForPCA".impute_18 * -0.0512419761914 + "CenteredDataForPCA".impute_19 * 0.267832542176 + "CenteredDataForPCA".impute_20 * -0.13995039 + "CenteredDataForPCA".impute_21 * -0.0339247492476 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.100210771458 + "CenteredDataForPCA".impute_3 * -0.282538419967 + "CenteredDataForPCA".impute_4 * 0.198378460493 + "CenteredDataForPCA".impute_5 * -0.306492858914 + "CenteredDataForPCA".impute_6 * 0.0297126551714 + "CenteredDataForPCA".impute_7 * -0.0736921999959 + "CenteredDataForPCA".impute_8 * -0.117890227007 + "CenteredDataForPCA".impute_9 * 0.021730150403 + "CenteredDataForPCA".impute_10 * -0.00753936166807 + "CenteredDataForPCA".impute_11 * -0.6211722134 + "CenteredDataForPCA".impute_12 * -0.0987349978084 + "CenteredDataForPCA".impute_13 * -0.104167662257 + "CenteredDataForPCA".impute_14 * -0.158863314827 + "CenteredDataForPCA".impute_15 * 0.0215837604543 + "CenteredDataForPCA".impute_16 * -0.299417631567 + "CenteredDataForPCA".impute_17 * 0.204882569414 + "CenteredDataForPCA".impute_18 * 0.0112662349494 + "CenteredDataForPCA".impute_19 * -0.224545357104 + "CenteredDataForPCA".impute_20 * 0.111562452357 + "CenteredDataForPCA".impute_21 * 0.359608236405 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.285645811323 + "CenteredDataForPCA".impute_3 * 0.353543899894 + "CenteredDataForPCA".impute_4 * 0.0860298789079 + "CenteredDataForPCA".impute_5 * -0.0461514310017 + "CenteredDataForPCA".impute_6 * 0.0506002240466 + "CenteredDataForPCA".impute_7 * -0.573731951368 + "CenteredDataForPCA".impute_8 * 0.0254744214189 + "CenteredDataForPCA".impute_9 * -0.0342701291557 + "CenteredDataForPCA".impute_10 * -0.0565290260326 + "CenteredDataForPCA".impute_11 * -0.112394832157 + "CenteredDataForPCA".impute_12 * 0.103876985435 + "CenteredDataForPCA".impute_13 * 0.0991247872941 + "CenteredDataForPCA".impute_14 * 0.145138340598 + "CenteredDataForPCA".impute_15 * 0.00778982221262 + "CenteredDataForPCA".impute_16 * 0.141400003744 + "CenteredDataForPCA".impute_17 * 0.397641176381 + "CenteredDataForPCA".impute_18 * -0.000713621805781 + "CenteredDataForPCA".impute_19 * -0.364358038379 + "CenteredDataForPCA".impute_20 * -0.219719317618 + "CenteredDataForPCA".impute_21 * -0.183339930362 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.437363291574 + "CenteredDataForPCA".impute_3 * -0.281958253788 + "CenteredDataForPCA".impute_4 * 0.362258082936 + "CenteredDataForPCA".impute_5 * 0.314018436364 + "CenteredDataForPCA".impute_6 * -0.11671368196 + "CenteredDataForPCA".impute_7 * -0.0919441545263 + "CenteredDataForPCA".impute_8 * 0.226398395143 + "CenteredDataForPCA".impute_9 * 0.00893553225899 + "CenteredDataForPCA".impute_10 * 0.0562120246325 + "CenteredDataForPCA".impute_11 * -0.122708717237 + "CenteredDataForPCA".impute_12 * -0.371874784432 + "CenteredDataForPCA".impute_13 * -0.182221108038 + "CenteredDataForPCA".impute_14 * 0.285567279622 + "CenteredDataForPCA".impute_15 * -0.0935367036753 + "CenteredDataForPCA".impute_16 * 0.298668170289 + "CenteredDataForPCA".impute_17 * -0.112454227522 + "CenteredDataForPCA".impute_18 * 0.0148773731617 + "CenteredDataForPCA".impute_19 * 0.114714526823 + "CenteredDataForPCA".impute_20 * 0.0680981732737 + "CenteredDataForPCA".impute_21 * 0.161509644112 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.451494967007 + "CenteredDataForPCA".impute_3 * -0.305230921868 + "CenteredDataForPCA".impute_4 * -0.130706408138 + "CenteredDataForPCA".impute_5 * -0.303782633902 + "CenteredDataForPCA".impute_6 * -0.0586836554268 + "CenteredDataForPCA".impute_7 * -0.0682002950599 + "CenteredDataForPCA".impute_8 * 0.0617758898141 + "CenteredDataForPCA".impute_9 * -0.0103718070104 + "CenteredDataForPCA".impute_10 * 0.0319876187393 + "CenteredDataForPCA".impute_11 * -0.0896724001691 + "CenteredDataForPCA".impute_12 * 0.186777586459 + "CenteredDataForPCA".impute_13 * -0.33500507969 + "CenteredDataForPCA".impute_14 * -0.204822462957 + "CenteredDataForPCA".impute_15 * -0.0148647450946 + "CenteredDataForPCA".impute_16 * -0.196795231619 + "CenteredDataForPCA".impute_17 * -0.0827726930892 + "CenteredDataForPCA".impute_18 * 0.00254792869683 + "CenteredDataForPCA".impute_19 * 0.223470109581 + "CenteredDataForPCA".impute_20 * -0.0842038082589 + "CenteredDataForPCA".impute_21 * -0.529747368427 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.147704654733 + "CenteredDataForPCA".impute_3 * 0.0910243985168 + "CenteredDataForPCA".impute_4 * -0.174974013874 + "CenteredDataForPCA".impute_5 * -0.374726211723 + "CenteredDataForPCA".impute_6 * 0.0401864678915 + "CenteredDataForPCA".impute_7 * 0.047303156309 + "CenteredDataForPCA".impute_8 * 0.0322780444342 + "CenteredDataForPCA".impute_9 * 0.0375750267721 + "CenteredDataForPCA".impute_10 * 0.0281606509307 + "CenteredDataForPCA".impute_11 * 0.490999762546 + "CenteredDataForPCA".impute_12 * -0.443791278224 + "CenteredDataForPCA".impute_13 * -0.410718892717 + "CenteredDataForPCA".impute_14 * -0.1342376243 + "CenteredDataForPCA".impute_15 * 0.00984557319266 + "CenteredDataForPCA".impute_16 * 0.0304575892139 + "CenteredDataForPCA".impute_17 * 0.0951353275651 + "CenteredDataForPCA".impute_18 * -0.066775351901 + "CenteredDataForPCA".impute_19 * -0.296783204819 + "CenteredDataForPCA".impute_20 * -0.0351176368589 + "CenteredDataForPCA".impute_21 * 0.251344236749 AS anoova_19, "CenteredDataForPCA".impute_2 * -7.16254772848e-17 + "CenteredDataForPCA".impute_3 * 2.15439835295e-16 + "CenteredDataForPCA".impute_4 * -4.884062391e-17 + "CenteredDataForPCA".impute_5 * 9.73675794148e-17 + "CenteredDataForPCA".impute_6 * -0.325872204891 + "CenteredDataForPCA".impute_7 * -2.9626767214e-16 + "CenteredDataForPCA".impute_8 * -0.243167618877 + "CenteredDataForPCA".impute_9 * -0.156384200686 + "CenteredDataForPCA".impute_10 * -0.370152320689 + "CenteredDataForPCA".impute_11 * -6.74255384529e-18 + "CenteredDataForPCA".impute_12 * -9.94072454091e-17 + "CenteredDataForPCA".impute_13 * 6.40051079837e-17 + "CenteredDataForPCA".impute_14 * 9.10823531331e-17 + "CenteredDataForPCA".impute_15 * -0.52025121998 + "CenteredDataForPCA".impute_16 * 7.36942968151e-17 + "CenteredDataForPCA".impute_17 * 6.46253382514e-17 + "CenteredDataForPCA".impute_18 * -0.634465700084 + "CenteredDataForPCA".impute_19 * 2.72912873731e-17 + "CenteredDataForPCA".impute_20 * -6.10434964688e-17 + "CenteredDataForPCA".impute_21 * 8.31251035771e-17 AS anoova_20, "CenteredDataForPCA".impute_2 * 9.67834734764e-17 + "CenteredDataForPCA".impute_3 * 5.8943592163e-16 + "CenteredDataForPCA".impute_4 * -1.13496043589e-16 + "CenteredDataForPCA".impute_5 * -5.88539896351e-17 + "CenteredDataForPCA".impute_6 * 0.398259613543 + "CenteredDataForPCA".impute_7 * -2.4649293806e-16 + "CenteredDataForPCA".impute_8 * -0.117277547591 + "CenteredDataForPCA".impute_9 * -0.526673536904 + "CenteredDataForPCA".impute_10 * 0.55479418071 + "CenteredDataForPCA".impute_11 * 1.85542887184e-17 + "CenteredDataForPCA".impute_12 * -1.53877761993e-16 + "CenteredDataForPCA".impute_13 * -4.56565437574e-16 + "CenteredDataForPCA".impute_14 * 1.39533992373e-16 + "CenteredDataForPCA".impute_15 * -0.490016755322 + "CenteredDataForPCA".impute_16 * 3.06898346088e-18 + "CenteredDataForPCA".impute_17 * 5.99505509828e-17 + "CenteredDataForPCA".impute_18 * 0.0483450011097 + "CenteredDataForPCA".impute_19 * 2.16092665311e-17 + "CenteredDataForPCA".impute_20 * 9.47747225892e-17 + "CenteredDataForPCA".impute_21 * 5.26007584232e-17 AS anoova_21 
FROM "CenteredDataForPCA"), 
"RawScores" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -1.38629436112 + "ADS_ano_2_OUT".anoova_2 * -0.30010459245 + (1 - "ADS_ano_2_OUT".anoova_2) * -1.34992671695 + "ADS_ano_2_OUT".anoova_3 * -0.30010459245 + (1 - "ADS_ano_2_OUT".anoova_3) * -1.34992671695 + "ADS_ano_2_OUT".anoova_4 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_4) * -0.587786664902 + "ADS_ano_2_OUT".anoova_5 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_5) * -0.810930216216 + "ADS_ano_2_OUT".anoova_6 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_6) * -0.656779536389 + "ADS_ano_2_OUT".anoova_7 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_7) * -0.587786664902 + "ADS_ano_2_OUT".anoova_8 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_8) * -0.730887508543 + "ADS_ano_2_OUT".anoova_9 * -1.21639532432 + (1 - "ADS_ano_2_OUT".anoova_9) * -0.351397886838 + "ADS_ano_2_OUT".anoova_10 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_10) * -0.656779536389 + "ADS_ano_2_OUT".anoova_11 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_11) * -0.587786664902 + "ADS_ano_2_OUT".anoova_12 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_12) * -0.730887508543 + "ADS_ano_2_OUT".anoova_13 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_13) * -0.587786664902 + "ADS_ano_2_OUT".anoova_14 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_14) * -0.897941593206 + "ADS_ano_2_OUT".anoova_15 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_15) * -0.656779536389 + "ADS_ano_2_OUT".anoova_16 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_16) * -0.730887508543 + "ADS_ano_2_OUT".anoova_17 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_17) * -0.587786664902 + "ADS_ano_2_OUT".anoova_18 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_18) * -0.810930216216 + "ADS_ano_2_OUT".anoova_19 * -0.462623521948 + (1 - "ADS_ano_2_OUT".anoova_19) * -0.99325177301 + "ADS_ano_2_OUT".anoova_20 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_20) * -0.587786664902 + "ADS_ano_2_OUT".anoova_21 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_21) * -0.587786664902 AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -1.38629436112 + "ADS_ano_2_OUT".anoova_2 * -1.09861228867 + (1 - "ADS_ano_2_OUT".anoova_2) * -0.405465108108 + "ADS_ano_2_OUT".anoova_3 * -1.34992671695 + (1 - "ADS_ano_2_OUT".anoova_3) * -0.30010459245 + "ADS_ano_2_OUT".anoova_4 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_4) * -0.897941593206 + "ADS_ano_2_OUT".anoova_5 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_5) * -0.810930216216 + "ADS_ano_2_OUT".anoova_6 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_6) * -0.523248143765 + "ADS_ano_2_OUT".anoova_7 * -1.34992671695 + (1 - "ADS_ano_2_OUT".anoova_7) * -0.30010459245 + "ADS_ano_2_OUT".anoova_8 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_8) * -0.897941593206 + "ADS_ano_2_OUT".anoova_9 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_9) * -0.810930216216 + "ADS_ano_2_OUT".anoova_10 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_10) * -0.730887508543 + "ADS_ano_2_OUT".anoova_11 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_11) * -0.656779536389 + "ADS_ano_2_OUT".anoova_12 * -0.351397886838 + (1 - "ADS_ano_2_OUT".anoova_12) * -1.21639532432 + "ADS_ano_2_OUT".anoova_13 * -1.09861228867 + (1 - "ADS_ano_2_OUT".anoova_13) * -0.405465108108 + "ADS_ano_2_OUT".anoova_14 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_14) * -0.587786664902 + "ADS_ano_2_OUT".anoova_15 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_15) * -0.810930216216 + "ADS_ano_2_OUT".anoova_16 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_16) * -0.810930216216 + "ADS_ano_2_OUT".anoova_17 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_17) * -0.656779536389 + "ADS_ano_2_OUT".anoova_18 * -0.351397886838 + (1 - "ADS_ano_2_OUT".anoova_18) * -1.21639532432 + "ADS_ano_2_OUT".anoova_19 * -0.810930216216 + (1 - "ADS_ano_2_OUT".anoova_19) * -0.587786664902 + "ADS_ano_2_OUT".anoova_20 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_20) * -0.656779536389 + "ADS_ano_2_OUT".anoova_21 * -0.462623521948 + (1 - "ADS_ano_2_OUT".anoova_21) * -0.99325177301 AS "Score_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "Proba_2", -1.38629436112 + "ADS_ano_2_OUT".anoova_2 * -0.405465108108 + (1 - "ADS_ano_2_OUT".anoova_2) * -1.09861228867 + "ADS_ano_2_OUT".anoova_3 * -1.21639532432 + (1 - "ADS_ano_2_OUT".anoova_3) * -0.351397886838 + "ADS_ano_2_OUT".anoova_4 * -1.90954250488 + (1 - "ADS_ano_2_OUT".anoova_4) * -0.160342650075 + "ADS_ano_2_OUT".anoova_5 * -0.351397886838 + (1 - "ADS_ano_2_OUT".anoova_5) * -1.21639532432 + "ADS_ano_2_OUT".anoova_6 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_6) * -0.897941593206 + "ADS_ano_2_OUT".anoova_7 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_7) * -0.897941593206 + "ADS_ano_2_OUT".anoova_8 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_8) * -0.730887508543 + "ADS_ano_2_OUT".anoova_9 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_9) * -0.656779536389 + "ADS_ano_2_OUT".anoova_10 * -1.21639532432 + (1 - "ADS_ano_2_OUT".anoova_10) * -0.351397886838 + "ADS_ano_2_OUT".anoova_11 * -0.462623521948 + (1 - "ADS_ano_2_OUT".anoova_11) * -0.99325177301 + "ADS_ano_2_OUT".anoova_12 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_12) * -0.810930216216 + "ADS_ano_2_OUT".anoova_13 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_13) * -0.730887508543 + "ADS_ano_2_OUT".anoova_14 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_14) * -0.656779536389 + "ADS_ano_2_OUT".anoova_15 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_15) * -0.730887508543 + "ADS_ano_2_OUT".anoova_16 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_16) * -0.730887508543 + "ADS_ano_2_OUT".anoova_17 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_17) * -0.810930216216 + "ADS_ano_2_OUT".anoova_18 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_18) * -0.523248143765 + "ADS_ano_2_OUT".anoova_19 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_19) * -0.656779536389 + "ADS_ano_2_OUT".anoova_20 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_20) * -0.656779536389 + "ADS_ano_2_OUT".anoova_21 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_21) * -0.730887508543 AS "Score_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Proba_3", -1.38629436112 + "ADS_ano_2_OUT".anoova_2 * -1.68639895357 + (1 - "ADS_ano_2_OUT".anoova_2) * -0.204794412646 + "ADS_ano_2_OUT".anoova_3 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_3) * -0.656779536389 + "ADS_ano_2_OUT".anoova_4 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_4) * -0.656779536389 + "ADS_ano_2_OUT".anoova_5 * -1.21639532432 + (1 - "ADS_ano_2_OUT".anoova_5) * -0.351397886838 + "ADS_ano_2_OUT".anoova_6 * -0.656779536389 + (1 - "ADS_ano_2_OUT".anoova_6) * -0.730887508543 + "ADS_ano_2_OUT".anoova_7 * -0.462623521948 + (1 - "ADS_ano_2_OUT".anoova_7) * -0.99325177301 + "ADS_ano_2_OUT".anoova_8 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_8) * -0.810930216216 + "ADS_ano_2_OUT".anoova_9 * -0.405465108108 + (1 - "ADS_ano_2_OUT".anoova_9) * -1.09861228867 + "ADS_ano_2_OUT".anoova_10 * -0.405465108108 + (1 - "ADS_ano_2_OUT".anoova_10) * -1.09861228867 + "ADS_ano_2_OUT".anoova_11 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_11) * -0.810930216216 + "ADS_ano_2_OUT".anoova_12 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_12) * -0.523248143765 + "ADS_ano_2_OUT".anoova_13 * -0.523248143765 + (1 - "ADS_ano_2_OUT".anoova_13) * -0.897941593206 + "ADS_ano_2_OUT".anoova_14 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_14) * -0.810930216216 + "ADS_ano_2_OUT".anoova_15 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_15) * -0.523248143765 + "ADS_ano_2_OUT".anoova_16 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_16) * -0.656779536389 + "ADS_ano_2_OUT".anoova_17 * -0.587786664902 + (1 - "ADS_ano_2_OUT".anoova_17) * -0.810930216216 + "ADS_ano_2_OUT".anoova_18 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_18) * -0.656779536389 + "ADS_ano_2_OUT".anoova_19 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_19) * -0.523248143765 + "ADS_ano_2_OUT".anoova_20 * -0.730887508543 + (1 - "ADS_ano_2_OUT".anoova_20) * -0.656779536389 + "ADS_ano_2_OUT".anoova_21 * -0.897941593206 + (1 - "ADS_ano_2_OUT".anoova_21) * -0.523248143765 AS "Score_3" 
FROM "ADS_ano_2_OUT"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte