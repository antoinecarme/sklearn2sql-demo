-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.00188819542901 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0480975595754 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.0620292431042 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.00432506278977 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0684257796778 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.209011113038 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.0227267111562 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0460925307623 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.0632841858179 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.0749809961804 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN -0.267952822331 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.0188435532295 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.249233119269 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 0.0762112689999 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0394974086074 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.0014293452876 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.11973664171 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0193742053867 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.0465792176257 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.0582072580636 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.00188819542901 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.0480975595754 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.0620292431042 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.00432506278977 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.0684257796778 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.209011113038 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.0227267111562 AS impute_8, "ADS_imp_1_OUT".impute_9 - -0.0460925307623 AS impute_9, "ADS_imp_1_OUT".impute_10 - -0.0632841858179 AS impute_10, "ADS_imp_1_OUT".impute_11 - -0.0749809961804 AS impute_11, "ADS_imp_1_OUT".impute_12 - -0.267952822331 AS impute_12, "ADS_imp_1_OUT".impute_13 - 0.0188435532295 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.249233119269 AS impute_14, "ADS_imp_1_OUT".impute_15 - 0.0762112689999 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0394974086074 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.0014293452876 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.11973664171 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.0193742053867 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.0465792176257 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.0582072580636 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.0111619879495 + "CenteredDataForPCA".impute_3 * -0.0242186054791 + "CenteredDataForPCA".impute_4 * -0.0227701924123 + "CenteredDataForPCA".impute_5 * 0.0413593690894 + "CenteredDataForPCA".impute_6 * -0.0160544792866 + "CenteredDataForPCA".impute_7 * 0.0383913375228 + "CenteredDataForPCA".impute_8 * 0.0329193377078 + "CenteredDataForPCA".impute_9 * -0.0274270388303 + "CenteredDataForPCA".impute_10 * -0.00965558593136 + "CenteredDataForPCA".impute_11 * 0.287623460219 + "CenteredDataForPCA".impute_12 * 0.0122364397162 + "CenteredDataForPCA".impute_13 * -0.00582626488127 + "CenteredDataForPCA".impute_14 * 0.214914797842 + "CenteredDataForPCA".impute_15 * 0.78378180575 + "CenteredDataForPCA".impute_16 * -0.191130199987 + "CenteredDataForPCA".impute_17 * -0.0038299219001 + "CenteredDataForPCA".impute_18 * 0.180011520678 + "CenteredDataForPCA".impute_19 * -0.424618894931 + "CenteredDataForPCA".impute_20 * -0.00192982443425 + "CenteredDataForPCA".impute_21 * -0.0270420779371 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.0227682734275 + "CenteredDataForPCA".impute_3 * 0.0579329104253 + "CenteredDataForPCA".impute_4 * 0.0787456040943 + "CenteredDataForPCA".impute_5 * 0.0336663508277 + "CenteredDataForPCA".impute_6 * 0.000958106638139 + "CenteredDataForPCA".impute_7 * -0.103340269493 + "CenteredDataForPCA".impute_8 * 0.0431719671516 + "CenteredDataForPCA".impute_9 * 0.126282990758 + "CenteredDataForPCA".impute_10 * 0.0786195712339 + "CenteredDataForPCA".impute_11 * 0.601623991235 + "CenteredDataForPCA".impute_12 * 0.00445010459089 + "CenteredDataForPCA".impute_13 * -0.0223115125043 + "CenteredDataForPCA".impute_14 * -0.339520728415 + "CenteredDataForPCA".impute_15 * -0.00277914869362 + "CenteredDataForPCA".impute_16 * -0.326528991281 + "CenteredDataForPCA".impute_17 * 0.0652762362216 + "CenteredDataForPCA".impute_18 * -0.591146294133 + "CenteredDataForPCA".impute_19 * 0.109884152482 + "CenteredDataForPCA".impute_20 * -0.016151804991 + "CenteredDataForPCA".impute_21 * -0.0607956493454 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.0499019285027 + "CenteredDataForPCA".impute_3 * 0.152908664323 + "CenteredDataForPCA".impute_4 * 0.00222639192204 + "CenteredDataForPCA".impute_5 * 0.0613327676208 + "CenteredDataForPCA".impute_6 * 0.11348922614 + "CenteredDataForPCA".impute_7 * 0.124380554161 + "CenteredDataForPCA".impute_8 * -0.0680648183108 + "CenteredDataForPCA".impute_9 * -0.0460700437263 + "CenteredDataForPCA".impute_10 * 0.0428329277051 + "CenteredDataForPCA".impute_11 * -0.262086621794 + "CenteredDataForPCA".impute_12 * -0.13541192834 + "CenteredDataForPCA".impute_13 * -0.0429558518473 + "CenteredDataForPCA".impute_14 * -0.549406496792 + "CenteredDataForPCA".impute_15 * 0.0904862839632 + "CenteredDataForPCA".impute_16 * -0.563829549934 + "CenteredDataForPCA".impute_17 * -0.031222726628 + "CenteredDataForPCA".impute_18 * 0.378387556434 + "CenteredDataForPCA".impute_19 * 0.13340318403 + "CenteredDataForPCA".impute_20 * 0.179993995088 + "CenteredDataForPCA".impute_21 * -0.149216446925 AS anoova_4, "CenteredDataForPCA".impute_2 * 0.245791700123 + "CenteredDataForPCA".impute_3 * 0.221209996295 + "CenteredDataForPCA".impute_4 * 0.0447251136527 + "CenteredDataForPCA".impute_5 * -0.0271966575996 + "CenteredDataForPCA".impute_6 * 0.291042855752 + "CenteredDataForPCA".impute_7 * -0.301010810736 + "CenteredDataForPCA".impute_8 * 0.0202300887362 + "CenteredDataForPCA".impute_9 * 0.0077306095784 + "CenteredDataForPCA".impute_10 * -0.0507565691615 + "CenteredDataForPCA".impute_11 * -0.350838650306 + "CenteredDataForPCA".impute_12 * 0.0431081681591 + "CenteredDataForPCA".impute_13 * 0.0403652487852 + "CenteredDataForPCA".impute_14 * 0.439594241753 + "CenteredDataForPCA".impute_15 * 0.132935411086 + "CenteredDataForPCA".impute_16 * -0.411083779217 + "CenteredDataForPCA".impute_17 * -0.120572352037 + "CenteredDataForPCA".impute_18 * -0.307666645357 + "CenteredDataForPCA".impute_19 * 0.22723793653 + "CenteredDataForPCA".impute_20 * -0.0630667960559 + "CenteredDataForPCA".impute_21 * 0.195608552367 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.114794112687 + "CenteredDataForPCA".impute_3 * 0.231464062788 + "CenteredDataForPCA".impute_4 * -0.0616927881684 + "CenteredDataForPCA".impute_5 * 0.113476134727 + "CenteredDataForPCA".impute_6 * 0.207744700573 + "CenteredDataForPCA".impute_7 * -0.609633029343 + "CenteredDataForPCA".impute_8 * 0.111096132744 + "CenteredDataForPCA".impute_9 * -0.108842258695 + "CenteredDataForPCA".impute_10 * -0.0137760259009 + "CenteredDataForPCA".impute_11 * 0.123714735646 + "CenteredDataForPCA".impute_12 * 0.0201621190645 + "CenteredDataForPCA".impute_13 * 0.0624678149362 + "CenteredDataForPCA".impute_14 * -0.286660159888 + "CenteredDataForPCA".impute_15 * -0.0291004446932 + "CenteredDataForPCA".impute_16 * 0.173001725907 + "CenteredDataForPCA".impute_17 * 0.297334937569 + "CenteredDataForPCA".impute_18 * 0.282775385897 + "CenteredDataForPCA".impute_19 * -0.136841943627 + "CenteredDataForPCA".impute_20 * -0.258127477179 + "CenteredDataForPCA".impute_21 * 0.301802513321 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.568352659352 + "CenteredDataForPCA".impute_3 * 0.392443593274 + "CenteredDataForPCA".impute_4 * -0.147677809997 + "CenteredDataForPCA".impute_5 * 0.00955994090949 + "CenteredDataForPCA".impute_6 * -0.300273004406 + "CenteredDataForPCA".impute_7 * -0.168880827192 + "CenteredDataForPCA".impute_8 * 0.309364107166 + "CenteredDataForPCA".impute_9 * -0.291790309018 + "CenteredDataForPCA".impute_10 * 0.0932456101288 + "CenteredDataForPCA".impute_11 * -0.116925996383 + "CenteredDataForPCA".impute_12 * -0.0651251929541 + "CenteredDataForPCA".impute_13 * 0.000123159364534 + "CenteredDataForPCA".impute_14 * 0.119497408228 + "CenteredDataForPCA".impute_15 * 0.0177044382917 + "CenteredDataForPCA".impute_16 * -0.0782458683632 + "CenteredDataForPCA".impute_17 * 0.00806815996142 + "CenteredDataForPCA".impute_18 * -0.0506306818024 + "CenteredDataForPCA".impute_19 * 0.0566706103651 + "CenteredDataForPCA".impute_20 * -0.177251514443 + "CenteredDataForPCA".impute_21 * -0.341978589793 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.034136510972 + "CenteredDataForPCA".impute_3 * 0.0706198331079 + "CenteredDataForPCA".impute_4 * 0.17565947514 + "CenteredDataForPCA".impute_5 * 0.223032226628 + "CenteredDataForPCA".impute_6 * 0.0101489996584 + "CenteredDataForPCA".impute_7 * -0.0373433391671 + "CenteredDataForPCA".impute_8 * 0.183795502193 + "CenteredDataForPCA".impute_9 * 0.685921013711 + "CenteredDataForPCA".impute_10 * 0.103590016487 + "CenteredDataForPCA".impute_11 * -0.146377086977 + "CenteredDataForPCA".impute_12 * -0.0454162312947 + "CenteredDataForPCA".impute_13 * -0.385653144446 + "CenteredDataForPCA".impute_14 * 0.127292750032 + "CenteredDataForPCA".impute_15 * 0.0177157756674 + "CenteredDataForPCA".impute_16 * 0.0254202262392 + "CenteredDataForPCA".impute_17 * 0.399307347958 + "CenteredDataForPCA".impute_18 * 0.0685513779176 + "CenteredDataForPCA".impute_19 * 0.000458736215845 + "CenteredDataForPCA".impute_20 * -0.0159834547262 + "CenteredDataForPCA".impute_21 * -0.207289712702 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.221952553882 + "CenteredDataForPCA".impute_3 * 0.224219927328 + "CenteredDataForPCA".impute_4 * -0.221718831643 + "CenteredDataForPCA".impute_5 * -0.381361882751 + "CenteredDataForPCA".impute_6 * 0.263190222489 + "CenteredDataForPCA".impute_7 * -0.109794216021 + "CenteredDataForPCA".impute_8 * 0.369648497477 + "CenteredDataForPCA".impute_9 * 0.0584654269064 + "CenteredDataForPCA".impute_10 * -0.241267801539 + "CenteredDataForPCA".impute_11 * 0.134150697317 + "CenteredDataForPCA".impute_12 * -0.111232687311 + "CenteredDataForPCA".impute_13 * -0.158794643857 + "CenteredDataForPCA".impute_14 * -0.0107787090872 + "CenteredDataForPCA".impute_15 * -0.0429301910877 + "CenteredDataForPCA".impute_16 * 0.197451792759 + "CenteredDataForPCA".impute_17 * -0.202043128006 + "CenteredDataForPCA".impute_18 * 0.0102390186584 + "CenteredDataForPCA".impute_19 * -0.0818048755833 + "CenteredDataForPCA".impute_20 * 0.434459781505 + "CenteredDataForPCA".impute_21 * -0.305563864114 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.0419659033086 + "CenteredDataForPCA".impute_3 * -0.50811835147 + "CenteredDataForPCA".impute_4 * -0.209984752847 + "CenteredDataForPCA".impute_5 * -0.391282103122 + "CenteredDataForPCA".impute_6 * -0.144638140909 + "CenteredDataForPCA".impute_7 * -0.404669005234 + "CenteredDataForPCA".impute_8 * -0.0311017588403 + "CenteredDataForPCA".impute_9 * 0.100515973309 + "CenteredDataForPCA".impute_10 * 0.176671623714 + "CenteredDataForPCA".impute_11 * -0.0830745388647 + "CenteredDataForPCA".impute_12 * 0.229636423646 + "CenteredDataForPCA".impute_13 * -0.347351531131 + "CenteredDataForPCA".impute_14 * -0.0986321327363 + "CenteredDataForPCA".impute_15 * 0.0348946426157 + "CenteredDataForPCA".impute_16 * -0.147937426434 + "CenteredDataForPCA".impute_17 * -0.211825473634 + "CenteredDataForPCA".impute_18 * 0.081722581455 + "CenteredDataForPCA".impute_19 * 0.0365409246653 + "CenteredDataForPCA".impute_20 * -0.203366988242 + "CenteredDataForPCA".impute_21 * -0.0923998588784 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.00484970525898 + "CenteredDataForPCA".impute_3 * 0.24203869286 + "CenteredDataForPCA".impute_4 * 0.197003242489 + "CenteredDataForPCA".impute_5 * -0.548944991715 + "CenteredDataForPCA".impute_6 * 0.0476574827201 + "CenteredDataForPCA".impute_7 * 0.17678656776 + "CenteredDataForPCA".impute_8 * -0.151192816539 + "CenteredDataForPCA".impute_9 * -0.251147268911 + "CenteredDataForPCA".impute_10 * 0.382703047677 + "CenteredDataForPCA".impute_11 * 0.00687054235884 + "CenteredDataForPCA".impute_12 * 0.16312163678 + "CenteredDataForPCA".impute_13 * -0.257129237647 + "CenteredDataForPCA".impute_14 * 0.0538476616573 + "CenteredDataForPCA".impute_15 * 0.023726643698 + "CenteredDataForPCA".impute_16 * 0.0137277250548 + "CenteredDataForPCA".impute_17 * 0.438908276166 + "CenteredDataForPCA".impute_18 * -0.0207147144829 + "CenteredDataForPCA".impute_19 * -0.0137060438802 + "CenteredDataForPCA".impute_20 * 0.14347063276 + "CenteredDataForPCA".impute_21 * 0.158299583013 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.379279853619 + "CenteredDataForPCA".impute_3 * -0.349736039544 + "CenteredDataForPCA".impute_4 * 0.294194176225 + "CenteredDataForPCA".impute_5 * -0.13091782837 + "CenteredDataForPCA".impute_6 * -0.179507822086 + "CenteredDataForPCA".impute_7 * -0.0556290934156 + "CenteredDataForPCA".impute_8 * 0.278179153471 + "CenteredDataForPCA".impute_9 * -0.278838298622 + "CenteredDataForPCA".impute_10 * -0.176306376713 + "CenteredDataForPCA".impute_11 * -0.0757237449417 + "CenteredDataForPCA".impute_12 * -0.207943253581 + "CenteredDataForPCA".impute_13 * 0.212922040504 + "CenteredDataForPCA".impute_14 * 0.0301513724571 + "CenteredDataForPCA".impute_15 * 0.00346383930055 + "CenteredDataForPCA".impute_16 * -0.0890567408717 + "CenteredDataForPCA".impute_17 * 0.404455004365 + "CenteredDataForPCA".impute_18 * -0.031247875446 + "CenteredDataForPCA".impute_19 * 0.0540186989946 + "CenteredDataForPCA".impute_20 * -0.135215354262 + "CenteredDataForPCA".impute_21 * -0.34595057017 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.0442543640071 + "CenteredDataForPCA".impute_3 * -0.052897320572 + "CenteredDataForPCA".impute_4 * -0.00847321427661 + "CenteredDataForPCA".impute_5 * -0.0107473065291 + "CenteredDataForPCA".impute_6 * 0.365869324064 + "CenteredDataForPCA".impute_7 * 0.317234066826 + "CenteredDataForPCA".impute_8 * 0.444405924768 + "CenteredDataForPCA".impute_9 * 0.0413830142112 + "CenteredDataForPCA".impute_10 * 0.0631418299213 + "CenteredDataForPCA".impute_11 * -0.0204457204673 + "CenteredDataForPCA".impute_12 * 0.6486772631 + "CenteredDataForPCA".impute_13 * 0.234987952014 + "CenteredDataForPCA".impute_14 * -0.0820269888263 + "CenteredDataForPCA".impute_15 * -0.018689717411 + "CenteredDataForPCA".impute_16 * -0.0332792878818 + "CenteredDataForPCA".impute_17 * -0.000480167208226 + "CenteredDataForPCA".impute_18 * 0.0494285673443 + "CenteredDataForPCA".impute_19 * 0.0150178284645 + "CenteredDataForPCA".impute_20 * -0.248047824462 + "CenteredDataForPCA".impute_21 * -0.092524409875 AS anoova_13, "CenteredDataForPCA".impute_2 * -0.0282967615208 + "CenteredDataForPCA".impute_3 * -0.00885211822063 + "CenteredDataForPCA".impute_4 * -0.539737884331 + "CenteredDataForPCA".impute_5 * 0.0246361847708 + "CenteredDataForPCA".impute_6 * -0.137348552511 + "CenteredDataForPCA".impute_7 * 0.109536270385 + "CenteredDataForPCA".impute_8 * -0.151248578806 + "CenteredDataForPCA".impute_9 * -0.0313416178172 + "CenteredDataForPCA".impute_10 * -0.567077646495 + "CenteredDataForPCA".impute_11 * -0.0373250811427 + "CenteredDataForPCA".impute_12 * 0.25953093286 + "CenteredDataForPCA".impute_13 * -0.142798586356 + "CenteredDataForPCA".impute_14 * 0.00860936754972 + "CenteredDataForPCA".impute_15 * 0.0100118606741 + "CenteredDataForPCA".impute_16 * -0.138597910558 + "CenteredDataForPCA".impute_17 * 0.447234040735 + "CenteredDataForPCA".impute_18 * -0.0884666380305 + "CenteredDataForPCA".impute_19 * 0.0721729057168 + "CenteredDataForPCA".impute_20 * 0.0605778847487 + "CenteredDataForPCA".impute_21 * 0.0751719205448 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.201156275646 + "CenteredDataForPCA".impute_3 * 0.117294045818 + "CenteredDataForPCA".impute_4 * 0.366408013199 + "CenteredDataForPCA".impute_5 * -0.380399870926 + "CenteredDataForPCA".impute_6 * -0.166236021505 + "CenteredDataForPCA".impute_7 * 0.140651672749 + "CenteredDataForPCA".impute_8 * 0.198234580784 + "CenteredDataForPCA".impute_9 * 0.201476787732 + "CenteredDataForPCA".impute_10 * -0.492744415822 + "CenteredDataForPCA".impute_11 * 0.00111182420238 + "CenteredDataForPCA".impute_12 * -0.128453015608 + "CenteredDataForPCA".impute_13 * -0.0831334826038 + "CenteredDataForPCA".impute_14 * -0.122179767824 + "CenteredDataForPCA".impute_15 * 0.0271473874376 + "CenteredDataForPCA".impute_16 * -0.0746210565698 + "CenteredDataForPCA".impute_17 * -0.159231945997 + "CenteredDataForPCA".impute_18 * 0.0784769911002 + "CenteredDataForPCA".impute_19 * -0.00416049804668 + "CenteredDataForPCA".impute_20 * -0.278798380919 + "CenteredDataForPCA".impute_21 * 0.377902220179 AS anoova_15, "CenteredDataForPCA".impute_2 * 0.163097684202 + "CenteredDataForPCA".impute_3 * 0.121889600046 + "CenteredDataForPCA".impute_4 * -0.262318819648 + "CenteredDataForPCA".impute_5 * -0.0948095375905 + "CenteredDataForPCA".impute_6 * 0.310421183309 + "CenteredDataForPCA".impute_7 * 0.284933198857 + "CenteredDataForPCA".impute_8 * -0.221145080424 + "CenteredDataForPCA".impute_9 * -0.0280593028179 + "CenteredDataForPCA".impute_10 * 0.028302725441 + "CenteredDataForPCA".impute_11 * 0.0632003546318 + "CenteredDataForPCA".impute_12 * -0.34891702532 + "CenteredDataForPCA".impute_13 * -0.197171935701 + "CenteredDataForPCA".impute_14 * 0.0161004141396 + "CenteredDataForPCA".impute_15 * -0.0182437684498 + "CenteredDataForPCA".impute_16 * 0.0622830466591 + "CenteredDataForPCA".impute_17 * -0.0285888725911 + "CenteredDataForPCA".impute_18 * -0.0423452419527 + "CenteredDataForPCA".impute_19 * -0.018300872104 + "CenteredDataForPCA".impute_20 * -0.655957183472 + "CenteredDataForPCA".impute_21 * -0.224476567813 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.451164880984 + "CenteredDataForPCA".impute_3 * -0.28758983127 + "CenteredDataForPCA".impute_4 * 0.309587879329 + "CenteredDataForPCA".impute_5 * 0.132721353507 + "CenteredDataForPCA".impute_6 * 0.549154041745 + "CenteredDataForPCA".impute_7 * -0.113698892208 + "CenteredDataForPCA".impute_8 * -0.132247871383 + "CenteredDataForPCA".impute_9 * -0.281513017218 + "CenteredDataForPCA".impute_10 * -0.275334883377 + "CenteredDataForPCA".impute_11 * 0.0182049736213 + "CenteredDataForPCA".impute_12 * -0.03562480436 + "CenteredDataForPCA".impute_13 * -0.281880061484 + "CenteredDataForPCA".impute_14 * 0.0379945122254 + "CenteredDataForPCA".impute_15 * -0.00167689124197 + "CenteredDataForPCA".impute_16 * 0.0220937957149 + "CenteredDataForPCA".impute_17 * 0.0545251296097 + "CenteredDataForPCA".impute_18 * -0.036967497192 + "CenteredDataForPCA".impute_19 * -0.00313873435349 + "CenteredDataForPCA".impute_20 * 0.0987268908876 + "CenteredDataForPCA".impute_21 * -0.127078190953 AS anoova_17, "CenteredDataForPCA".impute_2 * 0.169940245049 + "CenteredDataForPCA".impute_3 * 0.323362810877 + "CenteredDataForPCA".impute_4 * 0.339767517302 + "CenteredDataForPCA".impute_5 * -0.00937148322815 + "CenteredDataForPCA".impute_6 * -0.157966658894 + "CenteredDataForPCA".impute_7 * -0.161452502359 + "CenteredDataForPCA".impute_8 * -0.458014260305 + "CenteredDataForPCA".impute_9 * 0.0335948390011 + "CenteredDataForPCA".impute_10 * -0.240329887304 + "CenteredDataForPCA".impute_11 * 0.0347107010592 + "CenteredDataForPCA".impute_12 * 0.435019655091 + "CenteredDataForPCA".impute_13 * 0.0168985122106 + "CenteredDataForPCA".impute_14 * -0.0237446611723 + "CenteredDataForPCA".impute_15 * -0.00842214985428 + "CenteredDataForPCA".impute_16 * 0.0912890515928 + "CenteredDataForPCA".impute_17 * -0.144984515291 + "CenteredDataForPCA".impute_18 * 0.0635566172011 + "CenteredDataForPCA".impute_19 * -0.05007913097 + "CenteredDataForPCA".impute_20 * -0.105325708246 + "CenteredDataForPCA".impute_21 * -0.439295124033 AS anoova_18, "CenteredDataForPCA".impute_2 * -0.319267010732 + "CenteredDataForPCA".impute_3 * -0.055207190999 + "CenteredDataForPCA".impute_4 * -0.102223509071 + "CenteredDataForPCA".impute_5 * -0.375241552551 + "CenteredDataForPCA".impute_6 * 0.201997347982 + "CenteredDataForPCA".impute_7 * -0.132066259273 + "CenteredDataForPCA".impute_8 * -0.276567311418 + "CenteredDataForPCA".impute_9 * 0.36720786465 + "CenteredDataForPCA".impute_10 * 0.00102441862004 + "CenteredDataForPCA".impute_11 * -0.0310322360131 + "CenteredDataForPCA".impute_12 * -0.145181511587 + "CenteredDataForPCA".impute_13 * 0.620405017358 + "CenteredDataForPCA".impute_14 * 0.0248274233934 + "CenteredDataForPCA".impute_15 * 0.0426996025829 + "CenteredDataForPCA".impute_16 * -0.0254165053496 + "CenteredDataForPCA".impute_17 * 0.200480272759 + "CenteredDataForPCA".impute_18 * 0.0307590286369 + "CenteredDataForPCA".impute_19 * -0.0117429790332 + "CenteredDataForPCA".impute_20 * 0.0450561009177 + "CenteredDataForPCA".impute_21 * -0.144406319766 AS anoova_19, "CenteredDataForPCA".impute_2 * 9.567665137e-17 + "CenteredDataForPCA".impute_3 * -2.45389352916e-16 + "CenteredDataForPCA".impute_4 * -3.0554350957e-16 + "CenteredDataForPCA".impute_5 * 3.99496448018e-16 + "CenteredDataForPCA".impute_6 * 1.22140146795e-16 + "CenteredDataForPCA".impute_7 * 2.87853330842e-16 + "CenteredDataForPCA".impute_8 * 3.06191802366e-16 + "CenteredDataForPCA".impute_9 * -1.1247740348e-16 + "CenteredDataForPCA".impute_10 * -7.54658186873e-17 + "CenteredDataForPCA".impute_11 * -0.339886170001 + "CenteredDataForPCA".impute_12 * -2.1862227052e-16 + "CenteredDataForPCA".impute_13 * 2.34800155499e-17 + "CenteredDataForPCA".impute_14 * -0.385257319374 + "CenteredDataForPCA".impute_15 * 0.572578644941 + "CenteredDataForPCA".impute_16 * 0.467591083864 + "CenteredDataForPCA".impute_17 * -8.48223258904e-17 + "CenteredDataForPCA".impute_18 * -0.333609202277 + "CenteredDataForPCA".impute_19 * 0.279770196976 + "CenteredDataForPCA".impute_20 * -1.59690444521e-16 + "CenteredDataForPCA".impute_21 * -2.14017465408e-16 AS anoova_20, "CenteredDataForPCA".impute_2 * -1.08160545587e-16 + "CenteredDataForPCA".impute_3 * -1.27470203494e-16 + "CenteredDataForPCA".impute_4 * -1.19284613192e-16 + "CenteredDataForPCA".impute_5 * -2.39897739805e-16 + "CenteredDataForPCA".impute_6 * 1.12863264368e-16 + "CenteredDataForPCA".impute_7 * 7.78600726969e-17 + "CenteredDataForPCA".impute_8 * -2.92572284886e-17 + "CenteredDataForPCA".impute_9 * 2.64267137748e-16 + "CenteredDataForPCA".impute_10 * -8.88467722424e-17 + "CenteredDataForPCA".impute_11 * -0.398287880414 + "CenteredDataForPCA".impute_12 * 1.45134012678e-16 + "CenteredDataForPCA".impute_13 * 2.07139700508e-16 + "CenteredDataForPCA".impute_14 * -0.209999453109 + "CenteredDataForPCA".impute_15 * -0.153122112657 + "CenteredDataForPCA".impute_16 * -0.0799397490184 + "CenteredDataForPCA".impute_17 * 1.42746180126e-17 + "CenteredDataForPCA".impute_18 * -0.386036056058 + "CenteredDataForPCA".impute_19 * -0.786388207296 + "CenteredDataForPCA".impute_20 * 1.54809646556e-17 + "CenteredDataForPCA".impute_21 * -1.04401455503e-16 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.8073890209197998) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -2.2133736610412598) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 1.8073890209197998 AS threshold, 64 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -2.2133736610412598 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.06976744186046512 AS "Proba_0", -2.66258782703 AS "LogProba_0", 0.37209302325581395 AS "Proba_1", -0.988611393454 AS "LogProba_1", 0.23255813953488372 AS "Proba_2", -1.4586150227 AS "LogProba_2", 0.32558139534883723 AS "Proba_3", -1.12214278608 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1111111111111111 AS "Proba_0", -2.19722457734 AS "LogProba_0", 0.16666666666666666 AS "Proba_1", -1.79175946923 AS "LogProba_1", 0.5555555555555556 AS "Proba_2", -0.587786664902 AS "LogProba_2", 0.16666666666666666 AS "Proba_3", -1.79175946923 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.04 AS "Proba_0", -3.21887582487 AS "LogProba_0", 0.52 AS "Proba_1", -0.653926467407 AS "LogProba_1", 0.0 AS "Proba_2", -1.79769313486231e+308 AS "LogProba_2", 0.44 AS "Proba_3", -0.82098055207 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6190476190476191 AS "Proba_0", -0.479573080262 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0.2857142857142857 AS "Proba_2", -1.2527629685 AS "LogProba_2", 0.09523809523809523 AS "Proba_3", -2.35137525716 AS "LogProba_3", 0 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Proba_3" AS "Proba_3", "DT_node_data"."LogProba_3" AS "LogProba_3", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
calibration_base_estimator AS 
(SELECT "DT_Output"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output"."Proba_0" AS "Proba_0", "DT_Output"."Proba_1" AS "Proba_1", "DT_Output"."Proba_2" AS "Proba_2", "DT_Output"."Proba_3" AS "Proba_3", "DT_Output"."LogProba_0" AS "LogProba_0", "DT_Output"."LogProba_1" AS "LogProba_1", "DT_Output"."LogProba_2" AS "LogProba_2", "DT_Output"."LogProba_3" AS "LogProba_3", "DT_Output"."Decision" AS "Decision" 
FROM "DT_Output"), 
sigmoid_calibration_0 AS 
(SELECT calibration_base_estimator."KEY" AS "KEY", 1.0 / (1.0 + exp(-2.05973465082 * calibration_base_estimator."Proba_0" + 1.66436430441)) AS "Proba_0_0", 1.0 / (1.0 + exp(-2.05973465082 * calibration_base_estimator."Proba_1" + 1.66436430441)) AS "Proba_1_0", 1.0 / (1.0 + exp(-2.05973465082 * calibration_base_estimator."Proba_2" + 1.66436430441)) AS "Proba_2_0", 1.0 / (1.0 + exp(-2.05973465082 * calibration_base_estimator."Proba_3" + 1.66436430441)) AS "Proba_3_0" 
FROM calibration_base_estimator), 
sigmoid_cte_0 AS 
(SELECT sigmoid_calibration_0."KEY" AS join_key_0, sigmoid_calibration_0."Proba_0_0" AS "Proba_0_0", sigmoid_calibration_0."Proba_1_0" AS "Proba_1_0", sigmoid_calibration_0."Proba_2_0" AS "Proba_2_0", sigmoid_calibration_0."Proba_3_0" AS "Proba_3_0" 
FROM sigmoid_calibration_0), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -2.2133736610412598) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.8073890209197998) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -2.2133736610412598 AS threshold, 68 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.11764705882352941 AS "Proba_0", -2.1400661635 AS "LogProba_0", 0.058823529411764705 AS "Proba_1", -2.83321334406 AS "LogProba_1", 0.6470588235294118 AS "Proba_2", -0.435318071258 AS "LogProba_2", 0.17647058823529413 AS "Proba_3", -1.73460105539 AS "LogProba_3", 2 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 1.8073890209197998 AS threshold, 51 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.29411764705882354 AS "Proba_0", -1.22377543162 AS "LogProba_0", 0.3137254901960784 AS "Proba_1", -1.15923691048 AS "LogProba_1", 0.11764705882352941 AS "Proba_2", -2.1400661635 AS "LogProba_2", 0.27450980392156865 AS "Proba_3", -1.29276830311 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.07407407407407407 AS "Proba_0", -2.60268968544 AS "LogProba_0", 0.5555555555555556 AS "Proba_1", -0.587786664902 AS "LogProba_1", 0.037037037037037035 AS "Proba_2", -3.295836866 AS "LogProba_2", 0.3333333333333333 AS "Proba_3", -1.09861228867 AS "LogProba_3", 1 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5416666666666666 AS "Proba_0", -0.613104472886 AS "LogProba_0", 0.041666666666666664 AS "Proba_1", -3.17805383035 AS "LogProba_1", 0.20833333333333334 AS "Proba_2", -1.56861591791 AS "LogProba_2", 0.20833333333333334 AS "Proba_3", -1.56861591791 AS "LogProba_3", 0 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Proba_3" AS "Proba_3", "DT_node_data_1"."LogProba_3" AS "LogProba_3", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
calibration_base_estimator_1 AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_1"."Proba_0" AS "Proba_0", "DT_Output_1"."Proba_1" AS "Proba_1", "DT_Output_1"."Proba_2" AS "Proba_2", "DT_Output_1"."Proba_3" AS "Proba_3", "DT_Output_1"."LogProba_0" AS "LogProba_0", "DT_Output_1"."LogProba_1" AS "LogProba_1", "DT_Output_1"."LogProba_2" AS "LogProba_2", "DT_Output_1"."LogProba_3" AS "LogProba_3", "DT_Output_1"."Decision" AS "Decision" 
FROM "DT_Output_1"), 
sigmoid_calibration_1 AS 
(SELECT calibration_base_estimator_1."KEY" AS "KEY", 1.0 / (1.0 + exp(-2.99450986678 * calibration_base_estimator_1."Proba_0" + 2.02875133044)) AS "Proba_0_1", 1.0 / (1.0 + exp(-2.99450986678 * calibration_base_estimator_1."Proba_1" + 2.02875133044)) AS "Proba_1_1", 1.0 / (1.0 + exp(-2.99450986678 * calibration_base_estimator_1."Proba_2" + 2.02875133044)) AS "Proba_2_1", 1.0 / (1.0 + exp(-2.99450986678 * calibration_base_estimator_1."Proba_3" + 2.02875133044)) AS "Proba_3_1" 
FROM calibration_base_estimator_1), 
sigmoid_cte_1 AS 
(SELECT sigmoid_calibration_1."KEY" AS join_key_1, sigmoid_calibration_1."Proba_0_1" AS "Proba_0_1", sigmoid_calibration_1."Proba_1_1" AS "Proba_1_1", sigmoid_calibration_1."Proba_2_1" AS "Proba_2_1", sigmoid_calibration_1."Proba_3_1" AS "Proba_3_1" 
FROM sigmoid_calibration_1), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -1.0561703443527222) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.05036993324756622) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -1.0561703443527222 AS threshold, 68 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0625 AS "Proba_0", -2.77258872224 AS "LogProba_0", 0.0625 AS "Proba_1", -2.77258872224 AS "LogProba_1", 0.0625 AS "Proba_2", -2.77258872224 AS "LogProba_2", 0.8125 AS "Proba_3", -0.207639364778 AS "LogProba_3", 3 AS "Decision" UNION ALL SELECT 2 AS node_id, 'anoova_4' AS feature, -0.05036993324756622 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3076923076923077 AS "Proba_0", -1.17865499634 AS "LogProba_0", 0.3076923076923077 AS "Proba_1", -1.17865499634 AS "LogProba_1", 0.3076923076923077 AS "Proba_2", -1.17865499634 AS "LogProba_2", 0.07692307692307693 AS "Proba_3", -2.56494935746 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5185185185185185 AS "Proba_0", -0.656779536389 AS "LogProba_0", 0.25925925925925924 AS "Proba_1", -1.34992671695 AS "LogProba_1", 0.14814814814814814 AS "Proba_2", -1.90954250488 AS "LogProba_2", 0.07407407407407407 AS "Proba_3", -2.60268968544 AS "LogProba_3", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.08 AS "Proba_0", -2.52572864431 AS "LogProba_0", 0.36 AS "Proba_1", -1.02165124753 AS "LogProba_1", 0.48 AS "Proba_2", -0.73396917508 AS "LogProba_2", 0.08 AS "Proba_3", -2.52572864431 AS "LogProba_3", 2 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Proba_3" AS "Proba_3", "DT_node_data_2"."LogProba_3" AS "LogProba_3", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
calibration_base_estimator_2 AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_2"."Proba_0" AS "Proba_0", "DT_Output_2"."Proba_1" AS "Proba_1", "DT_Output_2"."Proba_2" AS "Proba_2", "DT_Output_2"."Proba_3" AS "Proba_3", "DT_Output_2"."LogProba_0" AS "LogProba_0", "DT_Output_2"."LogProba_1" AS "LogProba_1", "DT_Output_2"."LogProba_2" AS "LogProba_2", "DT_Output_2"."LogProba_3" AS "LogProba_3", "DT_Output_2"."Decision" AS "Decision" 
FROM "DT_Output_2"), 
sigmoid_calibration_2 AS 
(SELECT calibration_base_estimator_2."KEY" AS "KEY", 1.0 / (1.0 + exp(-0.759166490589 * calibration_base_estimator_2."Proba_0" + 1.2653997339)) AS "Proba_0_2", 1.0 / (1.0 + exp(-0.759166490589 * calibration_base_estimator_2."Proba_1" + 1.2653997339)) AS "Proba_1_2", 1.0 / (1.0 + exp(-0.759166490589 * calibration_base_estimator_2."Proba_2" + 1.2653997339)) AS "Proba_2_2", 1.0 / (1.0 + exp(-0.759166490589 * calibration_base_estimator_2."Proba_3" + 1.2653997339)) AS "Proba_3_2" 
FROM calibration_base_estimator_2), 
sigmoid_cte_2 AS 
(SELECT sigmoid_calibration_2."KEY" AS join_key_2, sigmoid_calibration_2."Proba_0_2" AS "Proba_0_2", sigmoid_calibration_2."Proba_1_2" AS "Proba_1_2", sigmoid_calibration_2."Proba_2_2" AS "Proba_2_2", sigmoid_calibration_2."Proba_3_2" AS "Proba_3_2" 
FROM sigmoid_calibration_2), 
"Calibration_Join_CTE" AS 
(SELECT sigmoid_cte_0.join_key_0 AS join_key_0, sigmoid_cte_0."Proba_0_0" AS "Proba_0_0", sigmoid_cte_0."Proba_1_0" AS "Proba_1_0", sigmoid_cte_0."Proba_2_0" AS "Proba_2_0", sigmoid_cte_0."Proba_3_0" AS "Proba_3_0", sigmoid_cte_1.join_key_1 AS join_key_1, sigmoid_cte_1."Proba_0_1" AS "Proba_0_1", sigmoid_cte_1."Proba_1_1" AS "Proba_1_1", sigmoid_cte_1."Proba_2_1" AS "Proba_2_1", sigmoid_cte_1."Proba_3_1" AS "Proba_3_1", sigmoid_cte_2.join_key_2 AS join_key_2, sigmoid_cte_2."Proba_0_2" AS "Proba_0_2", sigmoid_cte_2."Proba_1_2" AS "Proba_1_2", sigmoid_cte_2."Proba_2_2" AS "Proba_2_2", sigmoid_cte_2."Proba_3_2" AS "Proba_3_2" 
FROM sigmoid_cte_0 LEFT OUTER JOIN sigmoid_cte_1 ON sigmoid_cte_0.join_key_0 = sigmoid_cte_1.join_key_1 LEFT OUTER JOIN sigmoid_cte_2 ON sigmoid_cte_2.join_key_2 = sigmoid_cte_1.join_key_1), 
"Avg_Proba_CTE" AS 
(SELECT "Calibration_Join_CTE".join_key_0 AS "KEY", ("Calibration_Join_CTE"."Proba_0_0" + "Calibration_Join_CTE"."Proba_0_1" + "Calibration_Join_CTE"."Proba_0_2") / 3 AS "AvgProba_0", ("Calibration_Join_CTE"."Proba_1_0" + "Calibration_Join_CTE"."Proba_1_1" + "Calibration_Join_CTE"."Proba_1_2") / 3 AS "AvgProba_1", ("Calibration_Join_CTE"."Proba_2_0" + "Calibration_Join_CTE"."Proba_2_1" + "Calibration_Join_CTE"."Proba_2_2") / 3 AS "AvgProba_2", ("Calibration_Join_CTE"."Proba_3_0" + "Calibration_Join_CTE"."Proba_3_1" + "Calibration_Join_CTE"."Proba_3_2") / 3 AS "AvgProba_3" 
FROM "Calibration_Join_CTE"), 
orig_cte AS 
(SELECT "Avg_Proba_CTE"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "Avg_Proba_CTE"."AvgProba_0" / ("Avg_Proba_CTE"."AvgProba_0" + "Avg_Proba_CTE"."AvgProba_1" + "Avg_Proba_CTE"."AvgProba_2" + "Avg_Proba_CTE"."AvgProba_3") AS "Proba_0", "Avg_Proba_CTE"."AvgProba_1" / ("Avg_Proba_CTE"."AvgProba_0" + "Avg_Proba_CTE"."AvgProba_1" + "Avg_Proba_CTE"."AvgProba_2" + "Avg_Proba_CTE"."AvgProba_3") AS "Proba_1", "Avg_Proba_CTE"."AvgProba_2" / ("Avg_Proba_CTE"."AvgProba_0" + "Avg_Proba_CTE"."AvgProba_1" + "Avg_Proba_CTE"."AvgProba_2" + "Avg_Proba_CTE"."AvgProba_3") AS "Proba_2", "Avg_Proba_CTE"."AvgProba_3" / ("Avg_Proba_CTE"."AvgProba_0" + "Avg_Proba_CTE"."AvgProba_1" + "Avg_Proba_CTE"."AvgProba_2" + "Avg_Proba_CTE"."AvgProba_3") AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "Avg_Proba_CTE"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte