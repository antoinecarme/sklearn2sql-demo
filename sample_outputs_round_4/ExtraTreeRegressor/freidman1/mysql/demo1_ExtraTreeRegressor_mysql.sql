-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `DT_node_lookup` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` <= 0.3033664983937631) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.721418376126332) THEN CASE WHEN (`ADS`.`Feature_7` <= 0.6490102929789436) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`), 
`DT_node_data` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.3033664983937631 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 14.775125025493397 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 28 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 9.856523253882216 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 0.721418376126332 AS threshold, 72 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.687914603342183 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_7' AS feature, 0.6490102929789436 AS threshold, 47 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.940464559936164 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 15.489639291876562 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 16.666794158476623 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 18.093120684945504 AS `Estimator`) AS `Values`), 
`DT_Output` AS 
(SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup` LEFT OUTER JOIN `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id)
 SELECT `DT_Output`.`KEY` AS `KEY`, `DT_Output`.`Estimator` AS `Estimator` 
FROM `DT_Output`