-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.137884992414 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.0607121569904 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.147953949704 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.00553072826509 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.107316387005 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.104493114193 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.235446516257 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0255542359473 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0145947536368 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.520637598098 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.0532191778555 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.0179290162233 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.0449167763267 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.00177018339674 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.125331440257 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.0882277781649 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.030225191313 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0873353026963 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.204385604904 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.0188270615233 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - -0.137884992414 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.0607121569904 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.147953949704 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.00553072826509 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.107316387005 AS impute_6, "ADS_imp_1_OUT".impute_7 - -0.104493114193 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.235446516257 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.0255542359473 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0145947536368 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.520637598098 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.0532191778555 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.0179290162233 AS impute_13, "ADS_imp_1_OUT".impute_14 - -0.0449167763267 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.00177018339674 AS impute_15, "ADS_imp_1_OUT".impute_16 - 0.125331440257 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.0882277781649 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.030225191313 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.0873353026963 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.204385604904 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.0188270615233 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * 0.00147156660452 + "CenteredDataForPCA".impute_3 * -0.0429545802592 + "CenteredDataForPCA".impute_4 * -0.637623411469 + "CenteredDataForPCA".impute_5 * -0.0535182655223 + "CenteredDataForPCA".impute_6 * -0.0883500646882 + "CenteredDataForPCA".impute_7 * 0.0933771120796 + "CenteredDataForPCA".impute_8 * -0.0517044974717 + "CenteredDataForPCA".impute_9 * 0.0632636092041 + "CenteredDataForPCA".impute_10 * -0.0469720881365 + "CenteredDataForPCA".impute_11 * 0.177337251151 + "CenteredDataForPCA".impute_12 * -0.000473972095043 + "CenteredDataForPCA".impute_13 * 0.0532150047443 + "CenteredDataForPCA".impute_14 * -0.0189838961741 + "CenteredDataForPCA".impute_15 * 0.0307127741774 + "CenteredDataForPCA".impute_16 * -0.346893485315 + "CenteredDataForPCA".impute_17 * 0.00424780343534 + "CenteredDataForPCA".impute_18 * -0.604028300277 + "CenteredDataForPCA".impute_19 * -0.00927860365842 + "CenteredDataForPCA".impute_20 * -0.198854633677 + "CenteredDataForPCA".impute_21 * -0.0538616689781 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.283152975596 + "CenteredDataForPCA".impute_3 * 0.0499326562434 + "CenteredDataForPCA".impute_4 * -0.0316083104702 + "CenteredDataForPCA".impute_5 * -0.0423665180536 + "CenteredDataForPCA".impute_6 * 0.0715381584875 + "CenteredDataForPCA".impute_7 * -0.12477365058 + "CenteredDataForPCA".impute_8 * -0.501147486601 + "CenteredDataForPCA".impute_9 * 0.0293850886351 + "CenteredDataForPCA".impute_10 * 0.0478464136656 + "CenteredDataForPCA".impute_11 * -0.070313897718 + "CenteredDataForPCA".impute_12 * -0.0375553631674 + "CenteredDataForPCA".impute_13 * 0.0390591504074 + "CenteredDataForPCA".impute_14 * 0.0102036111454 + "CenteredDataForPCA".impute_15 * 0.0813520753773 + "CenteredDataForPCA".impute_16 * -0.00735729300159 + "CenteredDataForPCA".impute_17 * 0.0846322485902 + "CenteredDataForPCA".impute_18 * 0.265635541341 + "CenteredDataForPCA".impute_19 * 2.8786900998e-05 + "CenteredDataForPCA".impute_20 * -0.727305728742 + "CenteredDataForPCA".impute_21 * 0.134886709798 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.223483051318 + "CenteredDataForPCA".impute_3 * 0.257680696718 + "CenteredDataForPCA".impute_4 * 0.122459317111 + "CenteredDataForPCA".impute_5 * 0.179176879596 + "CenteredDataForPCA".impute_6 * -0.199939705038 + "CenteredDataForPCA".impute_7 * -0.0738529987897 + "CenteredDataForPCA".impute_8 * 0.554712098868 + "CenteredDataForPCA".impute_9 * -0.144521846608 + "CenteredDataForPCA".impute_10 * 0.105831906207 + "CenteredDataForPCA".impute_11 * -0.292642696031 + "CenteredDataForPCA".impute_12 * 0.0341917947117 + "CenteredDataForPCA".impute_13 * 0.122703118199 + "CenteredDataForPCA".impute_14 * 0.0628251897925 + "CenteredDataForPCA".impute_15 * 0.14892221161 + "CenteredDataForPCA".impute_16 * -0.303623749395 + "CenteredDataForPCA".impute_17 * -0.12354617453 + "CenteredDataForPCA".impute_18 * -0.00446812491285 + "CenteredDataForPCA".impute_19 * 0.10787353503 + "CenteredDataForPCA".impute_20 * -0.394589464184 + "CenteredDataForPCA".impute_21 * 0.220305394863 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.0308424303971 + "CenteredDataForPCA".impute_3 * -0.154961995871 + "CenteredDataForPCA".impute_4 * -0.0776758127964 + "CenteredDataForPCA".impute_5 * 0.0221844341064 + "CenteredDataForPCA".impute_6 * 0.222385103421 + "CenteredDataForPCA".impute_7 * -0.155943375354 + "CenteredDataForPCA".impute_8 * -0.188701607381 + "CenteredDataForPCA".impute_9 * -0.0202658154082 + "CenteredDataForPCA".impute_10 * -0.0529963809839 + "CenteredDataForPCA".impute_11 * -0.848910061568 + "CenteredDataForPCA".impute_12 * -0.0139999803656 + "CenteredDataForPCA".impute_13 * 0.0785745802896 + "CenteredDataForPCA".impute_14 * 0.16078654251 + "CenteredDataForPCA".impute_15 * -0.127851742424 + "CenteredDataForPCA".impute_16 * -0.00423098510945 + "CenteredDataForPCA".impute_17 * 0.0340312611908 + "CenteredDataForPCA".impute_18 * -0.232060875407 + "CenteredDataForPCA".impute_19 * 0.059740680854 + "CenteredDataForPCA".impute_20 * 0.127910445934 + "CenteredDataForPCA".impute_21 * -0.108322714305 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.0940999178217 + "CenteredDataForPCA".impute_3 * 0.368340876537 + "CenteredDataForPCA".impute_4 * -0.0307840051756 + "CenteredDataForPCA".impute_5 * 0.190461121845 + "CenteredDataForPCA".impute_6 * -0.337874521827 + "CenteredDataForPCA".impute_7 * -0.10896218651 + "CenteredDataForPCA".impute_8 * -0.128821693195 + "CenteredDataForPCA".impute_9 * 0.213404514156 + "CenteredDataForPCA".impute_10 * -0.222817292236 + "CenteredDataForPCA".impute_11 * -0.074341867803 + "CenteredDataForPCA".impute_12 * 0.228396685117 + "CenteredDataForPCA".impute_13 * -0.303805200522 + "CenteredDataForPCA".impute_14 * -0.0469028050211 + "CenteredDataForPCA".impute_15 * -0.499989320765 + "CenteredDataForPCA".impute_16 * 0.0266916693141 + "CenteredDataForPCA".impute_17 * -0.412687779728 + "CenteredDataForPCA".impute_18 * -0.00621183913746 + "CenteredDataForPCA".impute_19 * -0.0616793967024 + "CenteredDataForPCA".impute_20 * -0.0179789095109 + "CenteredDataForPCA".impute_21 * -0.0553418541416 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.218754970461 + "CenteredDataForPCA".impute_3 * -0.538182741032 + "CenteredDataForPCA".impute_4 * 0.0767871895329 + "CenteredDataForPCA".impute_5 * -0.137270962282 + "CenteredDataForPCA".impute_6 * -0.330557245368 + "CenteredDataForPCA".impute_7 * 0.273684363413 + "CenteredDataForPCA".impute_8 * -0.038377394385 + "CenteredDataForPCA".impute_9 * -0.282498874854 + "CenteredDataForPCA".impute_10 * -0.107258186162 + "CenteredDataForPCA".impute_11 * -0.0740229408234 + "CenteredDataForPCA".impute_12 * 0.137153671537 + "CenteredDataForPCA".impute_13 * 0.225362423887 + "CenteredDataForPCA".impute_14 * -0.198424272476 + "CenteredDataForPCA".impute_15 * -0.221816431029 + "CenteredDataForPCA".impute_16 * -0.00839381111392 + "CenteredDataForPCA".impute_17 * -0.193310091042 + "CenteredDataForPCA".impute_18 * 0.128900588907 + "CenteredDataForPCA".impute_19 * -0.250392018744 + "CenteredDataForPCA".impute_20 * -0.214171897415 + "CenteredDataForPCA".impute_21 * -0.185844525917 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.561931475747 + "CenteredDataForPCA".impute_3 * 0.129110040574 + "CenteredDataForPCA".impute_4 * -0.0193671392926 + "CenteredDataForPCA".impute_5 * 0.0426325690298 + "CenteredDataForPCA".impute_6 * -0.376292031468 + "CenteredDataForPCA".impute_7 * 0.278636885195 + "CenteredDataForPCA".impute_8 * -0.282064676495 + "CenteredDataForPCA".impute_9 * 0.180838838631 + "CenteredDataForPCA".impute_10 * 0.00728596888377 + "CenteredDataForPCA".impute_11 * -0.0780026669759 + "CenteredDataForPCA".impute_12 * -0.211114389297 + "CenteredDataForPCA".impute_13 * -0.228407288374 + "CenteredDataForPCA".impute_14 * 0.328632906481 + "CenteredDataForPCA".impute_15 * 0.135785170305 + "CenteredDataForPCA".impute_16 * 0.0979801787315 + "CenteredDataForPCA".impute_17 * 0.297593206813 + "CenteredDataForPCA".impute_18 * 0.0510062357626 + "CenteredDataForPCA".impute_19 * -0.0591726712235 + "CenteredDataForPCA".impute_20 * -0.014186725355 + "CenteredDataForPCA".impute_21 * 0.00967500110667 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.292332258107 + "CenteredDataForPCA".impute_3 * -0.156196220002 + "CenteredDataForPCA".impute_4 * 0.0618075765799 + "CenteredDataForPCA".impute_5 * 0.408173585592 + "CenteredDataForPCA".impute_6 * -0.280427887489 + "CenteredDataForPCA".impute_7 * 0.130437668254 + "CenteredDataForPCA".impute_8 * 0.070667543932 + "CenteredDataForPCA".impute_9 * 0.105237585314 + "CenteredDataForPCA".impute_10 * -0.399067102917 + "CenteredDataForPCA".impute_11 * -0.0201255673746 + "CenteredDataForPCA".impute_12 * -0.0157464243632 + "CenteredDataForPCA".impute_13 * 0.117193121843 + "CenteredDataForPCA".impute_14 * -0.0731738432113 + "CenteredDataForPCA".impute_15 * 0.0994599059648 + "CenteredDataForPCA".impute_16 * -0.0050413654276 + "CenteredDataForPCA".impute_17 * 0.310960115381 + "CenteredDataForPCA".impute_18 * 0.0470420371239 + "CenteredDataForPCA".impute_19 * 0.500062806495 + "CenteredDataForPCA".impute_20 * -0.0204042773671 + "CenteredDataForPCA".impute_21 * -0.263996103685 AS anoova_9, "CenteredDataForPCA".impute_2 * 0.170330514572 + "CenteredDataForPCA".impute_3 * -0.20115839765 + "CenteredDataForPCA".impute_4 * -0.064520194608 + "CenteredDataForPCA".impute_5 * 0.116422121741 + "CenteredDataForPCA".impute_6 * -0.295116470761 + "CenteredDataForPCA".impute_7 * -0.0487392085388 + "CenteredDataForPCA".impute_8 * -0.159869723928 + "CenteredDataForPCA".impute_9 * -0.156486048186 + "CenteredDataForPCA".impute_10 * 0.0308697578466 + "CenteredDataForPCA".impute_11 * 0.0892893239497 + "CenteredDataForPCA".impute_12 * -0.0776973228301 + "CenteredDataForPCA".impute_13 * 0.285936821732 + "CenteredDataForPCA".impute_14 * 0.365940261729 + "CenteredDataForPCA".impute_15 * -0.105634077651 + "CenteredDataForPCA".impute_16 * 0.100793723019 + "CenteredDataForPCA".impute_17 * -0.169928557691 + "CenteredDataForPCA".impute_18 * -0.0532081201747 + "CenteredDataForPCA".impute_19 * 0.149291519146 + "CenteredDataForPCA".impute_20 * 0.217740308862 + "CenteredDataForPCA".impute_21 * 0.64802183856 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.0307136814538 + "CenteredDataForPCA".impute_3 * -0.155689717919 + "CenteredDataForPCA".impute_4 * -0.00619578843525 + "CenteredDataForPCA".impute_5 * 0.184876579546 + "CenteredDataForPCA".impute_6 * -0.211236906216 + "CenteredDataForPCA".impute_7 * -0.470689378739 + "CenteredDataForPCA".impute_8 * 0.0157729106865 + "CenteredDataForPCA".impute_9 * 0.192407363907 + "CenteredDataForPCA".impute_10 * -0.214000979669 + "CenteredDataForPCA".impute_11 * -0.0703162405813 + "CenteredDataForPCA".impute_12 * -0.257314126917 + "CenteredDataForPCA".impute_13 * -0.00756005154533 + "CenteredDataForPCA".impute_14 * -0.423315896732 + "CenteredDataForPCA".impute_15 * 0.234436991 + "CenteredDataForPCA".impute_16 * 0.00732052674125 + "CenteredDataForPCA".impute_17 * 0.124032273003 + "CenteredDataForPCA".impute_18 * -0.0458009739566 + "CenteredDataForPCA".impute_19 * -0.461423334899 + "CenteredDataForPCA".impute_20 * 0.0877934249137 + "CenteredDataForPCA".impute_21 * 0.218725128572 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.1023645652 + "CenteredDataForPCA".impute_3 * 0.0573253476756 + "CenteredDataForPCA".impute_4 * 0.0905693769264 + "CenteredDataForPCA".impute_5 * -0.35117467877 + "CenteredDataForPCA".impute_6 * -0.068757704378 + "CenteredDataForPCA".impute_7 * -0.130250844604 + "CenteredDataForPCA".impute_8 * 0.180925356915 + "CenteredDataForPCA".impute_9 * 0.458793435813 + "CenteredDataForPCA".impute_10 * -0.264529862291 + "CenteredDataForPCA".impute_11 * 0.0452581421013 + "CenteredDataForPCA".impute_12 * 0.122973664486 + "CenteredDataForPCA".impute_13 * 0.441283441245 + "CenteredDataForPCA".impute_14 * 0.457209916563 + "CenteredDataForPCA".impute_15 * 0.0209692457164 + "CenteredDataForPCA".impute_16 * -0.0330432573516 + "CenteredDataForPCA".impute_17 * 0.0358022308654 + "CenteredDataForPCA".impute_18 * 0.0608587277345 + "CenteredDataForPCA".impute_19 * -0.254829628508 + "CenteredDataForPCA".impute_20 * -0.0294104190918 + "CenteredDataForPCA".impute_21 * -0.162946038447 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.0717170009867 + "CenteredDataForPCA".impute_3 * -0.209597817314 + "CenteredDataForPCA".impute_4 * 0.0484365689502 + "CenteredDataForPCA".impute_5 * -0.601189980497 + "CenteredDataForPCA".impute_6 * -0.103244393368 + "CenteredDataForPCA".impute_7 * -0.100470980293 + "CenteredDataForPCA".impute_8 * 0.189784603962 + "CenteredDataForPCA".impute_9 * -0.0342886396108 + "CenteredDataForPCA".impute_10 * -0.321240736823 + "CenteredDataForPCA".impute_11 * -0.0674453024777 + "CenteredDataForPCA".impute_12 * -0.0888119970258 + "CenteredDataForPCA".impute_13 * -0.516752125046 + "CenteredDataForPCA".impute_14 * 0.0146137015202 + "CenteredDataForPCA".impute_15 * -0.0508642969206 + "CenteredDataForPCA".impute_16 * -0.0795468229793 + "CenteredDataForPCA".impute_17 * 0.0858947171756 + "CenteredDataForPCA".impute_18 * -0.00257380008081 + "CenteredDataForPCA".impute_19 * 0.26481447578 + "CenteredDataForPCA".impute_20 * -0.0684423729645 + "CenteredDataForPCA".impute_21 * 0.234975250301 AS anoova_13, "CenteredDataForPCA".impute_2 * -0.502963069745 + "CenteredDataForPCA".impute_3 * -0.169684751854 + "CenteredDataForPCA".impute_4 * -0.0125618917533 + "CenteredDataForPCA".impute_5 * 0.134818996322 + "CenteredDataForPCA".impute_6 * 0.305709250084 + "CenteredDataForPCA".impute_7 * -0.315005997194 + "CenteredDataForPCA".impute_8 * 0.0184225562439 + "CenteredDataForPCA".impute_9 * 0.199125440479 + "CenteredDataForPCA".impute_10 * -0.0967967935923 + "CenteredDataForPCA".impute_11 * 0.243282051545 + "CenteredDataForPCA".impute_12 * -0.072901710639 + "CenteredDataForPCA".impute_13 * 0.153645228399 + "CenteredDataForPCA".impute_14 * -0.0384588366262 + "CenteredDataForPCA".impute_15 * -0.485607123878 + "CenteredDataForPCA".impute_16 * -0.0331980608726 + "CenteredDataForPCA".impute_17 * 0.124094529757 + "CenteredDataForPCA".impute_18 * 0.0651632163818 + "CenteredDataForPCA".impute_19 * 0.283651058344 + "CenteredDataForPCA".impute_20 * -0.153042879217 + "CenteredDataForPCA".impute_21 * 0.0884619162446 AS anoova_14, "CenteredDataForPCA".impute_2 * -0.148814168485 + "CenteredDataForPCA".impute_3 * 0.369639278582 + "CenteredDataForPCA".impute_4 * -0.0556419588035 + "CenteredDataForPCA".impute_5 * -0.29541242162 + "CenteredDataForPCA".impute_6 * -0.254475081798 + "CenteredDataForPCA".impute_7 * -0.312036175918 + "CenteredDataForPCA".impute_8 * -0.190941057692 + "CenteredDataForPCA".impute_9 * -0.364607388617 + "CenteredDataForPCA".impute_10 * -0.0322519503172 + "CenteredDataForPCA".impute_11 * 0.0142029730994 + "CenteredDataForPCA".impute_12 * 0.357402139341 + "CenteredDataForPCA".impute_13 * 0.271578877543 + "CenteredDataForPCA".impute_14 * -0.221776499775 + "CenteredDataForPCA".impute_15 * 0.0112783647742 + "CenteredDataForPCA".impute_16 * 0.0911360136723 + "CenteredDataForPCA".impute_17 * 0.330768912339 + "CenteredDataForPCA".impute_18 * -0.0324367650463 + "CenteredDataForPCA".impute_19 * 0.164102169354 + "CenteredDataForPCA".impute_20 * 0.141691577517 + "CenteredDataForPCA".impute_21 * -0.038963080273 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.181852966513 + "CenteredDataForPCA".impute_3 * 0.0684247567629 + "CenteredDataForPCA".impute_4 * -0.0400595075917 + "CenteredDataForPCA".impute_5 * 0.184671538475 + "CenteredDataForPCA".impute_6 * 0.291182864227 + "CenteredDataForPCA".impute_7 * -0.0702614602117 + "CenteredDataForPCA".impute_8 * -0.0969250308631 + "CenteredDataForPCA".impute_9 * -0.412124941979 + "CenteredDataForPCA".impute_10 * -0.638741922014 + "CenteredDataForPCA".impute_11 * 0.13430266317 + "CenteredDataForPCA".impute_12 * 0.0915507217227 + "CenteredDataForPCA".impute_13 * -0.0872554569529 + "CenteredDataForPCA".impute_14 * 0.261190202665 + "CenteredDataForPCA".impute_15 * 0.28973969339 + "CenteredDataForPCA".impute_16 * 0.023034163372 + "CenteredDataForPCA".impute_17 * -0.216727979224 + "CenteredDataForPCA".impute_18 * 0.0207317918173 + "CenteredDataForPCA".impute_19 * -0.117054293181 + "CenteredDataForPCA".impute_20 * -0.0348105681896 + "CenteredDataForPCA".impute_21 * -0.0231486003097 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.214017909824 + "CenteredDataForPCA".impute_3 * 0.0698606389766 + "CenteredDataForPCA".impute_4 * -0.000407299862825 + "CenteredDataForPCA".impute_5 * -0.217002740527 + "CenteredDataForPCA".impute_6 * 0.0296139535621 + "CenteredDataForPCA".impute_7 * 0.12196244476 + "CenteredDataForPCA".impute_8 * -0.18366368168 + "CenteredDataForPCA".impute_9 * 0.327501482918 + "CenteredDataForPCA".impute_10 * -0.0950647259308 + "CenteredDataForPCA".impute_11 * -0.0790595032693 + "CenteredDataForPCA".impute_12 * -0.086775587222 + "CenteredDataForPCA".impute_13 * 0.224154423693 + "CenteredDataForPCA".impute_14 * -0.321497023106 + "CenteredDataForPCA".impute_15 * 0.363308027465 + "CenteredDataForPCA".impute_16 * 0.0881823186851 + "CenteredDataForPCA".impute_17 * -0.529166998016 + "CenteredDataForPCA".impute_18 * 0.0235804924487 + "CenteredDataForPCA".impute_19 * 0.374833011169 + "CenteredDataForPCA".impute_20 * 0.0673553774965 + "CenteredDataForPCA".impute_21 * 0.0606769866418 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.0535466364676 + "CenteredDataForPCA".impute_3 * -0.275648748537 + "CenteredDataForPCA".impute_4 * -0.0224917865987 + "CenteredDataForPCA".impute_5 * 0.0363767832147 + "CenteredDataForPCA".impute_6 * -0.238285544577 + "CenteredDataForPCA".impute_7 * -0.543519529215 + "CenteredDataForPCA".impute_8 * -0.0451738497698 + "CenteredDataForPCA".impute_9 * -0.0516230999768 + "CenteredDataForPCA".impute_10 * 0.327633106414 + "CenteredDataForPCA".impute_11 * 0.130755189236 + "CenteredDataForPCA".impute_12 * 0.00236978950567 + "CenteredDataForPCA".impute_13 * -0.180366238802 + "CenteredDataForPCA".impute_14 * 0.264890188858 + "CenteredDataForPCA".impute_15 * 0.232176745051 + "CenteredDataForPCA".impute_16 * 0.0152425375387 + "CenteredDataForPCA".impute_17 * -0.26029736448 + "CenteredDataForPCA".impute_18 * 0.0193096577103 + "CenteredDataForPCA".impute_19 * 0.180899045482 + "CenteredDataForPCA".impute_20 * -0.0153547018523 + "CenteredDataForPCA".impute_21 * -0.424324528452 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.092499029188 + "CenteredDataForPCA".impute_3 * 0.275634752287 + "CenteredDataForPCA".impute_4 * 0.00522010882352 + "CenteredDataForPCA".impute_5 * -0.136945963505 + "CenteredDataForPCA".impute_6 * -0.07887211982 + "CenteredDataForPCA".impute_7 * -0.0413184769585 + "CenteredDataForPCA".impute_8 * 0.019205358261 + "CenteredDataForPCA".impute_9 * -0.281385859735 + "CenteredDataForPCA".impute_10 * -0.0795801945631 + "CenteredDataForPCA".impute_11 * 0.0295714160171 + "CenteredDataForPCA".impute_12 * -0.798251371792 + "CenteredDataForPCA".impute_13 * 0.184632307244 + "CenteredDataForPCA".impute_14 * 0.00597143982709 + "CenteredDataForPCA".impute_15 * -0.226842358965 + "CenteredDataForPCA".impute_16 * -0.00347089842772 + "CenteredDataForPCA".impute_17 * -0.104829650882 + "CenteredDataForPCA".impute_18 * 0.00669452089021 + "CenteredDataForPCA".impute_19 * 0.00811360006384 + "CenteredDataForPCA".impute_20 * -0.00295038026642 + "CenteredDataForPCA".impute_21 * -0.260954986031 AS anoova_19, "CenteredDataForPCA".impute_2 * -1.363289287e-16 + "CenteredDataForPCA".impute_3 * 3.5664787259e-17 + "CenteredDataForPCA".impute_4 * -0.698243662304 + "CenteredDataForPCA".impute_5 * 1.16766394654e-16 + "CenteredDataForPCA".impute_6 * -4.88137688608e-17 + "CenteredDataForPCA".impute_7 * -2.47437253414e-16 + "CenteredDataForPCA".impute_8 * 0.17751883705 + "CenteredDataForPCA".impute_9 * -3.88505990314e-17 + "CenteredDataForPCA".impute_10 * -1.36258504425e-16 + "CenteredDataForPCA".impute_11 * -0.131159459805 + "CenteredDataForPCA".impute_12 * -3.92481557448e-17 + "CenteredDataForPCA".impute_13 * 1.39410063239e-16 + "CenteredDataForPCA".impute_14 * -1.88425701572e-16 + "CenteredDataForPCA".impute_15 * -1.60063041111e-16 + "CenteredDataForPCA".impute_16 * -0.0512130507826 + "CenteredDataForPCA".impute_17 * -1.10310800291e-18 + "CenteredDataForPCA".impute_18 * 0.659431878463 + "CenteredDataForPCA".impute_19 * 3.05032068747e-17 + "CenteredDataForPCA".impute_20 * 0.162070564092 + "CenteredDataForPCA".impute_21 * 1.22416872672e-16 AS anoova_20, "CenteredDataForPCA".impute_2 * 1.05387100026e-16 + "CenteredDataForPCA".impute_3 * 1.59190753264e-16 + "CenteredDataForPCA".impute_4 * 0.229525676795 + "CenteredDataForPCA".impute_5 * 1.31588007388e-17 + "CenteredDataForPCA".impute_6 * -3.49727679661e-18 + "CenteredDataForPCA".impute_7 * 1.48433947611e-16 + "CenteredDataForPCA".impute_8 * -0.30304348557 + "CenteredDataForPCA".impute_9 * -4.24664379434e-17 + "CenteredDataForPCA".impute_10 * -9.79504155442e-17 + "CenteredDataForPCA".impute_11 * 0.0382105033782 + "CenteredDataForPCA".impute_12 * 7.08340246727e-17 + "CenteredDataForPCA".impute_13 * 3.63236651141e-17 + "CenteredDataForPCA".impute_14 * -8.25436271388e-17 + "CenteredDataForPCA".impute_15 * -1.22026428436e-17 + "CenteredDataForPCA".impute_16 * -0.859524758266 + "CenteredDataForPCA".impute_17 * -9.53598918843e-17 + "CenteredDataForPCA".impute_18 * 0.197624036759 + "CenteredDataForPCA".impute_19 * 4.77960216564e-17 + "CenteredDataForPCA".impute_20 * 0.276015392684 + "CenteredDataForPCA".impute_21 * -1.53735868966e-17 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= -0.6340826191199026) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -1.208635887538695) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.8949859631661763) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_19' AS feature, -0.6340826191199026 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35294117647058826 AS "Proba_0.0", -1.04145387483 AS "LogProba_0.0", 0.058823529411764705 AS "Proba_1.0", -2.83321334406 AS "LogProba_1.0", 0.11764705882352941 AS "Proba_2.0", -2.1400661635 AS "LogProba_2.0", 0.47058823529411764 AS "Proba_3.0", -0.753771802376 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -1.208635887538695 AS threshold, 83 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2289156626506024 AS "Proba_0.0", -1.47440162863 AS "LogProba_0.0", 0.2891566265060241 AS "Proba_1.0", -1.24078677745 AS "LogProba_1.0", 0.27710843373493976 AS "Proba_2.0", -1.28334639187 AS "LogProba_2.0", 0.20481927710843373 AS "Proba_3.0", -1.58562726374 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05263157894736842 AS "Proba_0.0", -2.94443897917 AS "LogProba_0.0", 0.5263157894736842 AS "Proba_1.0", -0.641853886172 AS "LogProba_1.0", 0.21052631578947367 AS "Proba_2.0", -1.55814461805 AS "LogProba_2.0", 0.21052631578947367 AS "Proba_3.0", -1.55814461805 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, 0.8949859631661763 AS threshold, 64 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.28125 AS "Proba_0.0", -1.26851132546 AS "LogProba_0.0", 0.21875 AS "Proba_1.0", -1.51982575374 AS "LogProba_1.0", 0.296875 AS "Proba_2.0", -1.21444410419 AS "LogProba_2.0", 0.203125 AS "Proba_3.0", -1.5939337259 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19444444444444445 AS "Proba_0.0", -1.6376087894 AS "LogProba_0.0", 0.3055555555555556 AS "Proba_1.0", -1.18562366566 AS "LogProba_1.0", 0.16666666666666666 AS "Proba_2.0", -1.79175946923 AS "LogProba_2.0", 0.3333333333333333 AS "Proba_3.0", -1.09861228867 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.39285714285714285 AS "Proba_0.0", -0.934309237377 AS "LogProba_0.0", 0.10714285714285714 AS "Proba_1.0", -2.23359222151 AS "LogProba_1.0", 0.4642857142857143 AS "Proba_2.0", -0.767255152714 AS "LogProba_2.0", 0.03571428571428571 AS "Proba_3.0", -3.33220451018 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0.0" AS "Proba_0.0", "DT_node_data"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data"."Proba_1.0" AS "Proba_1.0", "DT_node_data"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data"."Proba_2.0" AS "Proba_2.0", "DT_node_data"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data"."Proba_3.0" AS "Proba_3.0", "DT_node_data"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0_0", "DT_Output"."Proba_0.0" AS "Proba_0_0", "DT_Output"."LogProba_0.0" AS "LogProba_0_0", CAST(NULL AS FLOAT) AS "Score_0_1", "DT_Output"."Proba_1.0" AS "Proba_0_1", "DT_Output"."LogProba_1.0" AS "LogProba_0_1", CAST(NULL AS FLOAT) AS "Score_0_2", "DT_Output"."Proba_2.0" AS "Proba_0_2", "DT_Output"."LogProba_2.0" AS "LogProba_0_2", CAST(NULL AS FLOAT) AS "Score_0_3", "DT_Output"."Proba_3.0" AS "Proba_0_3", "DT_Output"."LogProba_3.0" AS "LogProba_0_3" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.17754020082610156) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.12433438482996872) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.17754020082610156 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_11' AS feature, -0.12433438482996872 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.06818181818181818 AS "Proba_0.0", -2.68557734525 AS "LogProba_0.0", 0.2727272727272727 AS "Proba_1.0", -1.29928298413 AS "LogProba_1.0", 0.4090909090909091 AS "Proba_2.0", -0.893817876022 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.17647058823529413 AS "Proba_0.0", -1.73460105539 AS "LogProba_0.0", 0.29411764705882354 AS "Proba_1.0", -1.22377543162 AS "LogProba_1.0", 0.4117647058823529 AS "Proba_2.0", -0.887303195001 AS "LogProba_2.0", 0.11764705882352941 AS "Proba_3.0", -2.1400661635 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Proba_0.0", -BINARY_FLOAT_INFINITY AS "LogProba_0.0", 0.25925925925925924 AS "Proba_1.0", -1.34992671695 AS "LogProba_1.0", 0.4074074074074074 AS "Proba_2.0", -0.897941593206 AS "LogProba_2.0", 0.3333333333333333 AS "Proba_3.0", -1.09861228867 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 56 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.39285714285714285 AS "Proba_0.0", -0.934309237377 AS "LogProba_0.0", 0.23214285714285715 AS "Proba_1.0", -1.46040233327 AS "LogProba_1.0", 0.125 AS "Proba_2.0", -2.07944154168 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0.0" AS "Proba_0.0", "DT_node_data_1"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_1"."Proba_1.0" AS "Proba_1.0", "DT_node_data_1"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_1"."Proba_2.0" AS "Proba_2.0", "DT_node_data_1"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_1"."Proba_3.0" AS "Proba_3.0", "DT_node_data_1"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1_0", "DT_Output_1"."Proba_0.0" AS "Proba_1_0", "DT_Output_1"."LogProba_0.0" AS "LogProba_1_0", CAST(NULL AS FLOAT) AS "Score_1_1", "DT_Output_1"."Proba_1.0" AS "Proba_1_1", "DT_Output_1"."LogProba_1.0" AS "LogProba_1_1", CAST(NULL AS FLOAT) AS "Score_1_2", "DT_Output_1"."Proba_2.0" AS "Proba_1_2", "DT_Output_1"."LogProba_2.0" AS "LogProba_1_2", CAST(NULL AS FLOAT) AS "Score_1_3", "DT_Output_1"."Proba_3.0" AS "Proba_1_3", "DT_Output_1"."LogProba_3.0" AS "LogProba_1_3" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.9892019856448435) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.31964729419266247) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 0.9892019856448435 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_8' AS feature, 0.31964729419266247 AS threshold, 70 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21428571428571427 AS "Proba_0.0", -1.54044504095 AS "LogProba_0.0", 0.3 AS "Proba_1.0", -1.20397280433 AS "LogProba_1.0", 0.2571428571428571 AS "Proba_2.0", -1.35812348415 AS "LogProba_2.0", 0.22857142857142856 AS "Proba_3.0", -1.47590651981 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21052631578947367 AS "Proba_0.0", -1.55814461805 AS "LogProba_0.0", 0.34210526315789475 AS "Proba_1.0", -1.07263680226 AS "LogProba_1.0", 0.3157894736842105 AS "Proba_2.0", -1.15267950994 AS "LogProba_2.0", 0.13157894736842105 AS "Proba_3.0", -2.02814824729 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21875 AS "Proba_0.0", -1.51982575374 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.1875 AS "Proba_2.0", -1.67397643357 AS "LogProba_2.0", 0.34375 AS "Proba_3.0", -1.06784063 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3333333333333333 AS "Proba_0.0", -1.09861228867 AS "LogProba_0.0", 0.13333333333333333 AS "Proba_1.0", -2.01490302054 AS "LogProba_1.0", 0.23333333333333334 AS "Proba_2.0", -1.45528723261 AS "LogProba_2.0", 0.3 AS "Proba_3.0", -1.20397280433 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0.0" AS "Proba_0.0", "DT_node_data_2"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_2"."Proba_1.0" AS "Proba_1.0", "DT_node_data_2"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_2"."Proba_2.0" AS "Proba_2.0", "DT_node_data_2"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_2"."Proba_3.0" AS "Proba_3.0", "DT_node_data_2"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2_0", "DT_Output_2"."Proba_0.0" AS "Proba_2_0", "DT_Output_2"."LogProba_0.0" AS "LogProba_2_0", CAST(NULL AS FLOAT) AS "Score_2_1", "DT_Output_2"."Proba_1.0" AS "Proba_2_1", "DT_Output_2"."LogProba_1.0" AS "LogProba_2_1", CAST(NULL AS FLOAT) AS "Score_2_2", "DT_Output_2"."Proba_2.0" AS "Proba_2_2", "DT_Output_2"."LogProba_2.0" AS "LogProba_2_2", CAST(NULL AS FLOAT) AS "Score_2_3", "DT_Output_2"."Proba_3.0" AS "Proba_2_3", "DT_Output_2"."LogProba_3.0" AS "LogProba_2_3" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.4621944500823607) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= -0.1395154935118872) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -1.4621944500823607 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3 AS "Proba_0.0", -1.20397280433 AS "LogProba_0.0", 0.45 AS "Proba_1.0", -0.798507696218 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.0 AS "Proba_3.0", -BINARY_FLOAT_INFINITY AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_17' AS feature, -0.1395154935118872 AS threshold, 80 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2375 AS "Proba_0.0", -1.43758765551 AS "LogProba_0.0", 0.2 AS "Proba_1.0", -1.60943791243 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.3125 AS "Proba_3.0", -1.16315080981 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1875 AS "Proba_0.0", -1.67397643357 AS "LogProba_0.0", 0.125 AS "Proba_1.0", -2.07944154168 AS "LogProba_1.0", 0.3125 AS "Proba_2.0", -1.16315080981 AS "LogProba_2.0", 0.375 AS "Proba_3.0", -0.980829253012 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 48 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2708333333333333 AS "Proba_0.0", -1.30625165345 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.20833333333333334 AS "Proba_2.0", -1.56861591791 AS "LogProba_2.0", 0.2708333333333333 AS "Proba_3.0", -1.30625165345 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0.0" AS "Proba_0.0", "DT_node_data_3"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_3"."Proba_1.0" AS "Proba_1.0", "DT_node_data_3"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_3"."Proba_2.0" AS "Proba_2.0", "DT_node_data_3"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_3"."Proba_3.0" AS "Proba_3.0", "DT_node_data_3"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3_0", "DT_Output_3"."Proba_0.0" AS "Proba_3_0", "DT_Output_3"."LogProba_0.0" AS "LogProba_3_0", CAST(NULL AS FLOAT) AS "Score_3_1", "DT_Output_3"."Proba_1.0" AS "Proba_3_1", "DT_Output_3"."LogProba_1.0" AS "LogProba_3_1", CAST(NULL AS FLOAT) AS "Score_3_2", "DT_Output_3"."Proba_2.0" AS "Proba_3_2", "DT_Output_3"."LogProba_2.0" AS "LogProba_3_2", CAST(NULL AS FLOAT) AS "Score_3_3", "DT_Output_3"."Proba_3.0" AS "Proba_3_3", "DT_Output_3"."LogProba_3.0" AS "LogProba_3_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.6502372565882593) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.5279094905553086) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.5674891725668632) THEN 3 ELSE 4 END ELSE 5 END ELSE 6 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_11' AS feature, 0.6502372565882593 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 1.5279094905553086 AS threshold, 74 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2702702702702703 AS "Proba_0.0", -1.30833281965 AS "LogProba_0.0", 0.22972972972972974 AS "Proba_1.0", -1.47085174915 AS "LogProba_1.0", 0.25675675675675674 AS "Proba_2.0", -1.35962611404 AS "LogProba_2.0", 0.24324324324324326 AS "Proba_3.0", -1.41369333531 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, 0.5674891725668632 AS threshold, 58 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.27586206896551724 AS "Proba_0.0", -1.28785428831 AS "LogProba_0.0", 0.22413793103448276 AS "Proba_1.0", -1.49549365308 AS "LogProba_1.0", 0.27586206896551724 AS "Proba_2.0", -1.28785428831 AS "LogProba_2.0", 0.22413793103448276 AS "Proba_3.0", -1.49549365308 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3055555555555556 AS "Proba_0.0", -1.18562366566 AS "LogProba_0.0", 0.3055555555555556 AS "Proba_1.0", -1.18562366566 AS "LogProba_1.0", 0.2777777777777778 AS "Proba_2.0", -1.28093384546 AS "LogProba_2.0", 0.1111111111111111 AS "Proba_3.0", -2.19722457734 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22727272727272727 AS "Proba_0.0", -1.48160454092 AS "LogProba_0.0", 0.09090909090909091 AS "Proba_1.0", -2.3978952728 AS "LogProba_1.0", 0.2727272727272727 AS "Proba_2.0", -1.29928298413 AS "LogProba_2.0", 0.4090909090909091 AS "Proba_3.0", -0.893817876022 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.1875 AS "Proba_2.0", -1.67397643357 AS "LogProba_2.0", 0.3125 AS "Proba_3.0", -1.16315080981 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19230769230769232 AS "Proba_0.0", -1.64865862559 AS "LogProba_0.0", 0.3076923076923077 AS "Proba_1.0", -1.17865499634 AS "LogProba_1.0", 0.23076923076923078 AS "Proba_2.0", -1.46633706879 AS "LogProba_2.0", 0.2692307692307692 AS "Proba_3.0", -1.31218638897 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Proba_0.0" AS "Proba_0.0", "DT_node_data_4"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_4"."Proba_1.0" AS "Proba_1.0", "DT_node_data_4"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_4"."Proba_2.0" AS "Proba_2.0", "DT_node_data_4"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_4"."Proba_3.0" AS "Proba_3.0", "DT_node_data_4"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_4"."Decision" AS "Decision" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, CAST(NULL AS FLOAT) AS "Score_4_0", "DT_Output_4"."Proba_0.0" AS "Proba_4_0", "DT_Output_4"."LogProba_0.0" AS "LogProba_4_0", CAST(NULL AS FLOAT) AS "Score_4_1", "DT_Output_4"."Proba_1.0" AS "Proba_4_1", "DT_Output_4"."LogProba_1.0" AS "LogProba_4_1", CAST(NULL AS FLOAT) AS "Score_4_2", "DT_Output_4"."Proba_2.0" AS "Proba_4_2", "DT_Output_4"."LogProba_2.0" AS "LogProba_4_2", CAST(NULL AS FLOAT) AS "Score_4_3", "DT_Output_4"."Proba_3.0" AS "Proba_4_3", "DT_Output_4"."LogProba_3.0" AS "LogProba_4_3" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", 0 AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Proba_0.0" AS "Proba_0.0", "DT_node_data_5"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_5"."Proba_1.0" AS "Proba_1.0", "DT_node_data_5"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_5"."Proba_2.0" AS "Proba_2.0", "DT_node_data_5"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_5"."Proba_3.0" AS "Proba_3.0", "DT_node_data_5"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_5"."Decision" AS "Decision" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, CAST(NULL AS FLOAT) AS "Score_5_0", "DT_Output_5"."Proba_0.0" AS "Proba_5_0", "DT_Output_5"."LogProba_0.0" AS "LogProba_5_0", CAST(NULL AS FLOAT) AS "Score_5_1", "DT_Output_5"."Proba_1.0" AS "Proba_5_1", "DT_Output_5"."LogProba_1.0" AS "LogProba_5_1", CAST(NULL AS FLOAT) AS "Score_5_2", "DT_Output_5"."Proba_2.0" AS "Proba_5_2", "DT_Output_5"."LogProba_2.0" AS "LogProba_5_2", CAST(NULL AS FLOAT) AS "Score_5_3", "DT_Output_5"."Proba_3.0" AS "Proba_5_3", "DT_Output_5"."LogProba_3.0" AS "LogProba_5_3" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= 0.4180560673756144) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.9553980984310602) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= -0.28276303470098096) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_7' AS feature, 0.4180560673756144 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -0.9553980984310602 AS threshold, 61 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26229508196721313 AS "Proba_0.0", -1.33828514193 AS "LogProba_0.0", 0.3114754098360656 AS "Proba_1.0", -1.16643488501 AS "LogProba_1.0", 0.2459016393442623 AS "Proba_2.0", -1.40282366307 AS "LogProba_2.0", 0.18032786885245902 AS "Proba_3.0", -1.71297859137 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05555555555555555 AS "Proba_0.0", -2.8903717579 AS "LogProba_0.0", 0.3888888888888889 AS "Proba_1.0", -0.944461608841 AS "LogProba_1.0", 0.3333333333333333 AS "Proba_2.0", -1.09861228867 AS "LogProba_2.0", 0.2222222222222222 AS "Proba_3.0", -1.50407739678 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3488372093023256 AS "Proba_0.0", -1.05314991459 AS "LogProba_0.0", 0.27906976744186046 AS "Proba_1.0", -1.27629346591 AS "LogProba_1.0", 0.20930232558139536 AS "Proba_2.0", -1.56397553836 AS "LogProba_2.0", 0.16279069767441862 AS "Proba_3.0", -1.81528996664 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, 'anoova_19' AS feature, -0.28276303470098096 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23076923076923078 AS "Proba_0.0", -1.46633706879 AS "LogProba_0.0", 0.15384615384615385 AS "Proba_1.0", -1.8718021769 AS "LogProba_1.0", 0.2564102564102564 AS "Proba_2.0", -1.36097655314 AS "LogProba_2.0", 0.358974358974359 AS "Proba_3.0", -1.02450431651 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.13333333333333333 AS "Proba_0.0", -2.01490302054 AS "LogProba_0.0", 0.06666666666666667 AS "Proba_1.0", -2.7080502011 AS "LogProba_1.0", 0.2 AS "Proba_2.0", -1.60943791243 AS "LogProba_2.0", 0.6 AS "Proba_3.0", -0.510825623766 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2916666666666667 AS "Proba_0.0", -1.23214368129 AS "LogProba_0.0", 0.20833333333333334 AS "Proba_1.0", -1.56861591791 AS "LogProba_1.0", 0.2916666666666667 AS "Proba_2.0", -1.23214368129 AS "LogProba_2.0", 0.20833333333333334 AS "Proba_3.0", -1.56861591791 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Proba_0.0" AS "Proba_0.0", "DT_node_data_6"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_6"."Proba_1.0" AS "Proba_1.0", "DT_node_data_6"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_6"."Proba_2.0" AS "Proba_2.0", "DT_node_data_6"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_6"."Proba_3.0" AS "Proba_3.0", "DT_node_data_6"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_6"."Decision" AS "Decision" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, CAST(NULL AS FLOAT) AS "Score_6_0", "DT_Output_6"."Proba_0.0" AS "Proba_6_0", "DT_Output_6"."LogProba_0.0" AS "LogProba_6_0", CAST(NULL AS FLOAT) AS "Score_6_1", "DT_Output_6"."Proba_1.0" AS "Proba_6_1", "DT_Output_6"."LogProba_1.0" AS "LogProba_6_1", CAST(NULL AS FLOAT) AS "Score_6_2", "DT_Output_6"."Proba_2.0" AS "Proba_6_2", "DT_Output_6"."LogProba_2.0" AS "LogProba_6_2", CAST(NULL AS FLOAT) AS "Score_6_3", "DT_Output_6"."Proba_3.0" AS "Proba_6_3", "DT_Output_6"."LogProba_3.0" AS "LogProba_6_3" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= 1.0463363501905683) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.1137374081029687) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= 0.27727278741149464) THEN 3 ELSE 4 END ELSE 5 END ELSE 6 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_6' AS feature, 1.0463363501905683 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, 1.1137374081029687 AS threshold, 82 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23170731707317074 AS "Proba_0.0", -1.4622802681 AS "LogProba_0.0", 0.24390243902439024 AS "Proba_1.0", -1.41098697371 AS "LogProba_1.0", 0.2682926829268293 AS "Proba_2.0", -1.31567679391 AS "LogProba_2.0", 0.25609756097560976 AS "Proba_3.0", -1.36219680954 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_14' AS feature, 0.27727278741149464 AS threshold, 55 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18181818181818182 AS "Proba_0.0", -1.70474809224 AS "LogProba_0.0", 0.2727272727272727 AS "Proba_1.0", -1.29928298413 AS "LogProba_1.0", 0.21818181818181817 AS "Proba_2.0", -1.52242653544 AS "LogProba_2.0", 0.32727272727272727 AS "Proba_3.0", -1.11696142734 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15625 AS "Proba_0.0", -1.85629799037 AS "LogProba_0.0", 0.28125 AS "Proba_1.0", -1.26851132546 AS "LogProba_1.0", 0.21875 AS "Proba_2.0", -1.51982575374 AS "LogProba_2.0", 0.34375 AS "Proba_3.0", -1.06784063 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21739130434782608 AS "Proba_0.0", -1.5260563035 AS "LogProba_0.0", 0.2608695652173913 AS "Proba_1.0", -1.3437347467 AS "LogProba_1.0", 0.21739130434782608 AS "Proba_2.0", -1.5260563035 AS "LogProba_2.0", 0.30434782608695654 AS "Proba_3.0", -1.18958406687 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3333333333333333 AS "Proba_0.0", -1.09861228867 AS "LogProba_0.0", 0.18518518518518517 AS "Proba_1.0", -1.68639895357 AS "LogProba_1.0", 0.37037037037037035 AS "Proba_2.0", -0.99325177301 AS "LogProba_2.0", 0.1111111111111111 AS "Proba_3.0", -2.19722457734 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3333333333333333 AS "Proba_0.0", -1.09861228867 AS "LogProba_0.0", 0.2777777777777778 AS "Proba_1.0", -1.28093384546 AS "LogProba_1.0", 0.16666666666666666 AS "Proba_2.0", -1.79175946923 AS "LogProba_2.0", 0.2222222222222222 AS "Proba_3.0", -1.50407739678 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Proba_0.0" AS "Proba_0.0", "DT_node_data_7"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_7"."Proba_1.0" AS "Proba_1.0", "DT_node_data_7"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_7"."Proba_2.0" AS "Proba_2.0", "DT_node_data_7"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_7"."Proba_3.0" AS "Proba_3.0", "DT_node_data_7"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_7"."Decision" AS "Decision" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, CAST(NULL AS FLOAT) AS "Score_7_0", "DT_Output_7"."Proba_0.0" AS "Proba_7_0", "DT_Output_7"."LogProba_0.0" AS "LogProba_7_0", CAST(NULL AS FLOAT) AS "Score_7_1", "DT_Output_7"."Proba_1.0" AS "Proba_7_1", "DT_Output_7"."LogProba_1.0" AS "LogProba_7_1", CAST(NULL AS FLOAT) AS "Score_7_2", "DT_Output_7"."Proba_2.0" AS "Proba_7_2", "DT_Output_7"."LogProba_2.0" AS "LogProba_7_2", CAST(NULL AS FLOAT) AS "Score_7_3", "DT_Output_7"."Proba_3.0" AS "Proba_7_3", "DT_Output_7"."LogProba_3.0" AS "LogProba_7_3" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.9732844707681831) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.6373931155831412) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.6995529371483853) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_11' AS feature, 0.9732844707681831 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_9' AS feature, -0.6373931155831412 AS threshold, 84 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.27380952380952384 AS "Proba_0.0", -1.29532258291 AS "LogProba_0.0", 0.23809523809523808 AS "Proba_1.0", -1.43508452529 AS "LogProba_1.0", 0.27380952380952384 AS "Proba_2.0", -1.29532258291 AS "LogProba_2.0", 0.21428571428571427 AS "Proba_3.0", -1.54044504095 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2222222222222222 AS "Proba_0.0", -1.50407739678 AS "LogProba_0.0", 0.25925925925925924 AS "Proba_1.0", -1.34992671695 AS "LogProba_1.0", 0.25925925925925924 AS "Proba_2.0", -1.34992671695 AS "LogProba_2.0", 0.25925925925925924 AS "Proba_3.0", -1.34992671695 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, 'anoova_11' AS feature, -0.6995529371483853 AS threshold, 57 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2982456140350877 AS "Proba_0.0", -1.20983792378 AS "LogProba_0.0", 0.22807017543859648 AS "Proba_1.0", -1.47810191037 AS "LogProba_1.0", 0.2807017543859649 AS "Proba_2.0", -1.27046254559 AS "LogProba_2.0", 0.19298245614035087 AS "Proba_3.0", -1.64515599504 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5333333333333333 AS "Proba_0.0", -0.628608659422 AS "LogProba_0.0", 0.13333333333333333 AS "Proba_1.0", -2.01490302054 AS "LogProba_1.0", 0.26666666666666666 AS "Proba_2.0", -1.32175583998 AS "LogProba_2.0", 0.06666666666666667 AS "Proba_3.0", -2.7080502011 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 42 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.21428571428571427 AS "Proba_0.0", -1.54044504095 AS "LogProba_0.0", 0.2619047619047619 AS "Proba_1.0", -1.33977434548 AS "LogProba_1.0", 0.2857142857142857 AS "Proba_2.0", -1.2527629685 AS "LogProba_2.0", 0.23809523809523808 AS "Proba_3.0", -1.43508452529 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.125 AS "Proba_0.0", -2.07944154168 AS "LogProba_0.0", 0.3125 AS "Proba_1.0", -1.16315080981 AS "LogProba_1.0", 0.125 AS "Proba_2.0", -2.07944154168 AS "LogProba_2.0", 0.4375 AS "Proba_3.0", -0.826678573184 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Proba_0.0" AS "Proba_0.0", "DT_node_data_8"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_8"."Proba_1.0" AS "Proba_1.0", "DT_node_data_8"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_8"."Proba_2.0" AS "Proba_2.0", "DT_node_data_8"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_8"."Proba_3.0" AS "Proba_3.0", "DT_node_data_8"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_8"."Decision" AS "Decision" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, CAST(NULL AS FLOAT) AS "Score_8_0", "DT_Output_8"."Proba_0.0" AS "Proba_8_0", "DT_Output_8"."LogProba_0.0" AS "LogProba_8_0", CAST(NULL AS FLOAT) AS "Score_8_1", "DT_Output_8"."Proba_1.0" AS "Proba_8_1", "DT_Output_8"."LogProba_1.0" AS "LogProba_8_1", CAST(NULL AS FLOAT) AS "Score_8_2", "DT_Output_8"."Proba_2.0" AS "Proba_8_2", "DT_Output_8"."LogProba_2.0" AS "LogProba_8_2", CAST(NULL AS FLOAT) AS "Score_8_3", "DT_Output_8"."Proba_3.0" AS "Proba_8_3", "DT_Output_8"."LogProba_3.0" AS "LogProba_8_3" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.3059697791471345) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= -0.15352905441513331) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0.0" AS "Proba_0.0", "Values"."LogProba_0.0" AS "LogProba_0.0", "Values"."Proba_1.0" AS "Proba_1.0", "Values"."LogProba_1.0" AS "LogProba_1.0", "Values"."Proba_2.0" AS "Proba_2.0", "Values"."LogProba_2.0" AS "LogProba_2.0", "Values"."Proba_3.0" AS "Proba_3.0", "Values"."LogProba_3.0" AS "LogProba_3.0", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_18' AS feature, -0.3059697791471345 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS "Proba_0.0", -1.38629436112 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.25 AS "Proba_2.0", -1.38629436112 AS "LogProba_2.0", 0.25 AS "Proba_3.0", -1.38629436112 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26666666666666666 AS "Proba_0.0", -1.32175583998 AS "LogProba_0.0", 0.2 AS "Proba_1.0", -1.60943791243 AS "LogProba_1.0", 0.23333333333333334 AS "Proba_2.0", -1.45528723261 AS "LogProba_2.0", 0.3 AS "Proba_3.0", -1.20397280433 AS "LogProba_3.0", 3 AS "Decision" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_17' AS feature, -0.15352905441513331 AS threshold, 70 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24285714285714285 AS "Proba_0.0", -1.41528189799 AS "LogProba_0.0", 0.2714285714285714 AS "Proba_1.0", -1.30405626288 AS "LogProba_1.0", 0.2571428571428571 AS "Proba_2.0", -1.35812348415 AS "LogProba_2.0", 0.22857142857142856 AS "Proba_3.0", -1.47590651981 AS "LogProba_3.0", 1 AS "Decision" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1875 AS "Proba_0.0", -1.67397643357 AS "LogProba_0.0", 0.25 AS "Proba_1.0", -1.38629436112 AS "LogProba_1.0", 0.28125 AS "Proba_2.0", -1.26851132546 AS "LogProba_2.0", 0.28125 AS "Proba_3.0", -1.26851132546 AS "LogProba_3.0", 2 AS "Decision" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2894736842105263 AS "Proba_0.0", -1.23969088693 AS "LogProba_0.0", 0.2894736842105263 AS "Proba_1.0", -1.23969088693 AS "LogProba_1.0", 0.23684210526315788 AS "Proba_2.0", -1.44036158239 AS "LogProba_2.0", 0.18421052631578946 AS "Proba_3.0", -1.69167601067 AS "LogProba_3.0", 0 AS "Decision" FROM DUAL) "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Proba_0.0" AS "Proba_0.0", "DT_node_data_9"."LogProba_0.0" AS "LogProba_0.0", "DT_node_data_9"."Proba_1.0" AS "Proba_1.0", "DT_node_data_9"."LogProba_1.0" AS "LogProba_1.0", "DT_node_data_9"."Proba_2.0" AS "Proba_2.0", "DT_node_data_9"."LogProba_2.0" AS "LogProba_2.0", "DT_node_data_9"."Proba_3.0" AS "Proba_3.0", "DT_node_data_9"."LogProba_3.0" AS "LogProba_3.0", "DT_node_data_9"."Decision" AS "Decision" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, CAST(NULL AS FLOAT) AS "Score_9_0", "DT_Output_9"."Proba_0.0" AS "Proba_9_0", "DT_Output_9"."LogProba_0.0" AS "LogProba_9_0", CAST(NULL AS FLOAT) AS "Score_9_1", "DT_Output_9"."Proba_1.0" AS "Proba_9_1", "DT_Output_9"."LogProba_1.0" AS "LogProba_9_1", CAST(NULL AS FLOAT) AS "Score_9_2", "DT_Output_9"."Proba_2.0" AS "Proba_9_2", "DT_Output_9"."LogProba_2.0" AS "LogProba_9_2", CAST(NULL AS FLOAT) AS "Score_9_3", "DT_Output_9"."Proba_3.0" AS "Proba_9_3", "DT_Output_9"."LogProba_3.0" AS "LogProba_9_3" 
FROM "DT_Output_9"), 
"RF_Join_CTE" AS 
(SELECT "RF_Tree_0".join_key_0 AS join_key_0, "RF_Tree_0"."Score_0_0" AS "Score_0_0", "RF_Tree_0"."Proba_0_0" AS "Proba_0_0", "RF_Tree_0"."LogProba_0_0" AS "LogProba_0_0", "RF_Tree_0"."Score_0_1" AS "Score_0_1", "RF_Tree_0"."Proba_0_1" AS "Proba_0_1", "RF_Tree_0"."LogProba_0_1" AS "LogProba_0_1", "RF_Tree_0"."Score_0_2" AS "Score_0_2", "RF_Tree_0"."Proba_0_2" AS "Proba_0_2", "RF_Tree_0"."LogProba_0_2" AS "LogProba_0_2", "RF_Tree_0"."Score_0_3" AS "Score_0_3", "RF_Tree_0"."Proba_0_3" AS "Proba_0_3", "RF_Tree_0"."LogProba_0_3" AS "LogProba_0_3", "RF_Tree_1".join_key_1 AS join_key_1, "RF_Tree_1"."Score_1_0" AS "Score_1_0", "RF_Tree_1"."Proba_1_0" AS "Proba_1_0", "RF_Tree_1"."LogProba_1_0" AS "LogProba_1_0", "RF_Tree_1"."Score_1_1" AS "Score_1_1", "RF_Tree_1"."Proba_1_1" AS "Proba_1_1", "RF_Tree_1"."LogProba_1_1" AS "LogProba_1_1", "RF_Tree_1"."Score_1_2" AS "Score_1_2", "RF_Tree_1"."Proba_1_2" AS "Proba_1_2", "RF_Tree_1"."LogProba_1_2" AS "LogProba_1_2", "RF_Tree_1"."Score_1_3" AS "Score_1_3", "RF_Tree_1"."Proba_1_3" AS "Proba_1_3", "RF_Tree_1"."LogProba_1_3" AS "LogProba_1_3", "RF_Tree_2".join_key_2 AS join_key_2, "RF_Tree_2"."Score_2_0" AS "Score_2_0", "RF_Tree_2"."Proba_2_0" AS "Proba_2_0", "RF_Tree_2"."LogProba_2_0" AS "LogProba_2_0", "RF_Tree_2"."Score_2_1" AS "Score_2_1", "RF_Tree_2"."Proba_2_1" AS "Proba_2_1", "RF_Tree_2"."LogProba_2_1" AS "LogProba_2_1", "RF_Tree_2"."Score_2_2" AS "Score_2_2", "RF_Tree_2"."Proba_2_2" AS "Proba_2_2", "RF_Tree_2"."LogProba_2_2" AS "LogProba_2_2", "RF_Tree_2"."Score_2_3" AS "Score_2_3", "RF_Tree_2"."Proba_2_3" AS "Proba_2_3", "RF_Tree_2"."LogProba_2_3" AS "LogProba_2_3", "RF_Tree_3".join_key_3 AS join_key_3, "RF_Tree_3"."Score_3_0" AS "Score_3_0", "RF_Tree_3"."Proba_3_0" AS "Proba_3_0", "RF_Tree_3"."LogProba_3_0" AS "LogProba_3_0", "RF_Tree_3"."Score_3_1" AS "Score_3_1", "RF_Tree_3"."Proba_3_1" AS "Proba_3_1", "RF_Tree_3"."LogProba_3_1" AS "LogProba_3_1", "RF_Tree_3"."Score_3_2" AS "Score_3_2", "RF_Tree_3"."Proba_3_2" AS "Proba_3_2", "RF_Tree_3"."LogProba_3_2" AS "LogProba_3_2", "RF_Tree_3"."Score_3_3" AS "Score_3_3", "RF_Tree_3"."Proba_3_3" AS "Proba_3_3", "RF_Tree_3"."LogProba_3_3" AS "LogProba_3_3", "RF_Tree_4".join_key_4 AS join_key_4, "RF_Tree_4"."Score_4_0" AS "Score_4_0", "RF_Tree_4"."Proba_4_0" AS "Proba_4_0", "RF_Tree_4"."LogProba_4_0" AS "LogProba_4_0", "RF_Tree_4"."Score_4_1" AS "Score_4_1", "RF_Tree_4"."Proba_4_1" AS "Proba_4_1", "RF_Tree_4"."LogProba_4_1" AS "LogProba_4_1", "RF_Tree_4"."Score_4_2" AS "Score_4_2", "RF_Tree_4"."Proba_4_2" AS "Proba_4_2", "RF_Tree_4"."LogProba_4_2" AS "LogProba_4_2", "RF_Tree_4"."Score_4_3" AS "Score_4_3", "RF_Tree_4"."Proba_4_3" AS "Proba_4_3", "RF_Tree_4"."LogProba_4_3" AS "LogProba_4_3", "RF_Tree_5".join_key_5 AS join_key_5, "RF_Tree_5"."Score_5_0" AS "Score_5_0", "RF_Tree_5"."Proba_5_0" AS "Proba_5_0", "RF_Tree_5"."LogProba_5_0" AS "LogProba_5_0", "RF_Tree_5"."Score_5_1" AS "Score_5_1", "RF_Tree_5"."Proba_5_1" AS "Proba_5_1", "RF_Tree_5"."LogProba_5_1" AS "LogProba_5_1", "RF_Tree_5"."Score_5_2" AS "Score_5_2", "RF_Tree_5"."Proba_5_2" AS "Proba_5_2", "RF_Tree_5"."LogProba_5_2" AS "LogProba_5_2", "RF_Tree_5"."Score_5_3" AS "Score_5_3", "RF_Tree_5"."Proba_5_3" AS "Proba_5_3", "RF_Tree_5"."LogProba_5_3" AS "LogProba_5_3", "RF_Tree_6".join_key_6 AS join_key_6, "RF_Tree_6"."Score_6_0" AS "Score_6_0", "RF_Tree_6"."Proba_6_0" AS "Proba_6_0", "RF_Tree_6"."LogProba_6_0" AS "LogProba_6_0", "RF_Tree_6"."Score_6_1" AS "Score_6_1", "RF_Tree_6"."Proba_6_1" AS "Proba_6_1", "RF_Tree_6"."LogProba_6_1" AS "LogProba_6_1", "RF_Tree_6"."Score_6_2" AS "Score_6_2", "RF_Tree_6"."Proba_6_2" AS "Proba_6_2", "RF_Tree_6"."LogProba_6_2" AS "LogProba_6_2", "RF_Tree_6"."Score_6_3" AS "Score_6_3", "RF_Tree_6"."Proba_6_3" AS "Proba_6_3", "RF_Tree_6"."LogProba_6_3" AS "LogProba_6_3", "RF_Tree_7".join_key_7 AS join_key_7, "RF_Tree_7"."Score_7_0" AS "Score_7_0", "RF_Tree_7"."Proba_7_0" AS "Proba_7_0", "RF_Tree_7"."LogProba_7_0" AS "LogProba_7_0", "RF_Tree_7"."Score_7_1" AS "Score_7_1", "RF_Tree_7"."Proba_7_1" AS "Proba_7_1", "RF_Tree_7"."LogProba_7_1" AS "LogProba_7_1", "RF_Tree_7"."Score_7_2" AS "Score_7_2", "RF_Tree_7"."Proba_7_2" AS "Proba_7_2", "RF_Tree_7"."LogProba_7_2" AS "LogProba_7_2", "RF_Tree_7"."Score_7_3" AS "Score_7_3", "RF_Tree_7"."Proba_7_3" AS "Proba_7_3", "RF_Tree_7"."LogProba_7_3" AS "LogProba_7_3", "RF_Tree_8".join_key_8 AS join_key_8, "RF_Tree_8"."Score_8_0" AS "Score_8_0", "RF_Tree_8"."Proba_8_0" AS "Proba_8_0", "RF_Tree_8"."LogProba_8_0" AS "LogProba_8_0", "RF_Tree_8"."Score_8_1" AS "Score_8_1", "RF_Tree_8"."Proba_8_1" AS "Proba_8_1", "RF_Tree_8"."LogProba_8_1" AS "LogProba_8_1", "RF_Tree_8"."Score_8_2" AS "Score_8_2", "RF_Tree_8"."Proba_8_2" AS "Proba_8_2", "RF_Tree_8"."LogProba_8_2" AS "LogProba_8_2", "RF_Tree_8"."Score_8_3" AS "Score_8_3", "RF_Tree_8"."Proba_8_3" AS "Proba_8_3", "RF_Tree_8"."LogProba_8_3" AS "LogProba_8_3", "RF_Tree_9".join_key_9 AS join_key_9, "RF_Tree_9"."Score_9_0" AS "Score_9_0", "RF_Tree_9"."Proba_9_0" AS "Proba_9_0", "RF_Tree_9"."LogProba_9_0" AS "LogProba_9_0", "RF_Tree_9"."Score_9_1" AS "Score_9_1", "RF_Tree_9"."Proba_9_1" AS "Proba_9_1", "RF_Tree_9"."LogProba_9_1" AS "LogProba_9_1", "RF_Tree_9"."Score_9_2" AS "Score_9_2", "RF_Tree_9"."Proba_9_2" AS "Proba_9_2", "RF_Tree_9"."LogProba_9_2" AS "LogProba_9_2", "RF_Tree_9"."Score_9_3" AS "Score_9_3", "RF_Tree_9"."Proba_9_3" AS "Proba_9_3", "RF_Tree_9"."LogProba_9_3" AS "LogProba_9_3" 
FROM "RF_Tree_0" LEFT OUTER JOIN "RF_Tree_1" ON "RF_Tree_0".join_key_0 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_2" ON "RF_Tree_2".join_key_2 = "RF_Tree_1".join_key_1 LEFT OUTER JOIN "RF_Tree_3" ON "RF_Tree_3".join_key_3 = "RF_Tree_2".join_key_2 LEFT OUTER JOIN "RF_Tree_4" ON "RF_Tree_4".join_key_4 = "RF_Tree_3".join_key_3 LEFT OUTER JOIN "RF_Tree_5" ON "RF_Tree_5".join_key_5 = "RF_Tree_4".join_key_4 LEFT OUTER JOIN "RF_Tree_6" ON "RF_Tree_6".join_key_6 = "RF_Tree_5".join_key_5 LEFT OUTER JOIN "RF_Tree_7" ON "RF_Tree_7".join_key_7 = "RF_Tree_6".join_key_6 LEFT OUTER JOIN "RF_Tree_8" ON "RF_Tree_8".join_key_8 = "RF_Tree_7".join_key_7 LEFT OUTER JOIN "RF_Tree_9" ON "RF_Tree_9".join_key_9 = "RF_Tree_8".join_key_8), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0 AS "KEY", "RF_Join_CTE"."Score_0_0" / 10 + "RF_Join_CTE"."Score_1_0" / 10 + "RF_Join_CTE"."Score_2_0" / 10 + "RF_Join_CTE"."Score_3_0" / 10 + "RF_Join_CTE"."Score_4_0" / 10 + "RF_Join_CTE"."Score_5_0" / 10 + "RF_Join_CTE"."Score_6_0" / 10 + "RF_Join_CTE"."Score_7_0" / 10 + "RF_Join_CTE"."Score_8_0" / 10 + "RF_Join_CTE"."Score_9_0" / 10 AS "Score_0", "RF_Join_CTE"."Proba_0_0" / 10 + "RF_Join_CTE"."Proba_1_0" / 10 + "RF_Join_CTE"."Proba_2_0" / 10 + "RF_Join_CTE"."Proba_3_0" / 10 + "RF_Join_CTE"."Proba_4_0" / 10 + "RF_Join_CTE"."Proba_5_0" / 10 + "RF_Join_CTE"."Proba_6_0" / 10 + "RF_Join_CTE"."Proba_7_0" / 10 + "RF_Join_CTE"."Proba_8_0" / 10 + "RF_Join_CTE"."Proba_9_0" / 10 AS "Proba_0", "RF_Join_CTE"."LogProba_0_0" / 10 + "RF_Join_CTE"."LogProba_1_0" / 10 + "RF_Join_CTE"."LogProba_2_0" / 10 + "RF_Join_CTE"."LogProba_3_0" / 10 + "RF_Join_CTE"."LogProba_4_0" / 10 + "RF_Join_CTE"."LogProba_5_0" / 10 + "RF_Join_CTE"."LogProba_6_0" / 10 + "RF_Join_CTE"."LogProba_7_0" / 10 + "RF_Join_CTE"."LogProba_8_0" / 10 + "RF_Join_CTE"."LogProba_9_0" / 10 AS "LogProba_0", "RF_Join_CTE"."Score_0_1" / 10 + "RF_Join_CTE"."Score_1_1" / 10 + "RF_Join_CTE"."Score_2_1" / 10 + "RF_Join_CTE"."Score_3_1" / 10 + "RF_Join_CTE"."Score_4_1" / 10 + "RF_Join_CTE"."Score_5_1" / 10 + "RF_Join_CTE"."Score_6_1" / 10 + "RF_Join_CTE"."Score_7_1" / 10 + "RF_Join_CTE"."Score_8_1" / 10 + "RF_Join_CTE"."Score_9_1" / 10 AS "Score_1", "RF_Join_CTE"."Proba_0_1" / 10 + "RF_Join_CTE"."Proba_1_1" / 10 + "RF_Join_CTE"."Proba_2_1" / 10 + "RF_Join_CTE"."Proba_3_1" / 10 + "RF_Join_CTE"."Proba_4_1" / 10 + "RF_Join_CTE"."Proba_5_1" / 10 + "RF_Join_CTE"."Proba_6_1" / 10 + "RF_Join_CTE"."Proba_7_1" / 10 + "RF_Join_CTE"."Proba_8_1" / 10 + "RF_Join_CTE"."Proba_9_1" / 10 AS "Proba_1", "RF_Join_CTE"."LogProba_0_1" / 10 + "RF_Join_CTE"."LogProba_1_1" / 10 + "RF_Join_CTE"."LogProba_2_1" / 10 + "RF_Join_CTE"."LogProba_3_1" / 10 + "RF_Join_CTE"."LogProba_4_1" / 10 + "RF_Join_CTE"."LogProba_5_1" / 10 + "RF_Join_CTE"."LogProba_6_1" / 10 + "RF_Join_CTE"."LogProba_7_1" / 10 + "RF_Join_CTE"."LogProba_8_1" / 10 + "RF_Join_CTE"."LogProba_9_1" / 10 AS "LogProba_1", "RF_Join_CTE"."Score_0_2" / 10 + "RF_Join_CTE"."Score_1_2" / 10 + "RF_Join_CTE"."Score_2_2" / 10 + "RF_Join_CTE"."Score_3_2" / 10 + "RF_Join_CTE"."Score_4_2" / 10 + "RF_Join_CTE"."Score_5_2" / 10 + "RF_Join_CTE"."Score_6_2" / 10 + "RF_Join_CTE"."Score_7_2" / 10 + "RF_Join_CTE"."Score_8_2" / 10 + "RF_Join_CTE"."Score_9_2" / 10 AS "Score_2", "RF_Join_CTE"."Proba_0_2" / 10 + "RF_Join_CTE"."Proba_1_2" / 10 + "RF_Join_CTE"."Proba_2_2" / 10 + "RF_Join_CTE"."Proba_3_2" / 10 + "RF_Join_CTE"."Proba_4_2" / 10 + "RF_Join_CTE"."Proba_5_2" / 10 + "RF_Join_CTE"."Proba_6_2" / 10 + "RF_Join_CTE"."Proba_7_2" / 10 + "RF_Join_CTE"."Proba_8_2" / 10 + "RF_Join_CTE"."Proba_9_2" / 10 AS "Proba_2", "RF_Join_CTE"."LogProba_0_2" / 10 + "RF_Join_CTE"."LogProba_1_2" / 10 + "RF_Join_CTE"."LogProba_2_2" / 10 + "RF_Join_CTE"."LogProba_3_2" / 10 + "RF_Join_CTE"."LogProba_4_2" / 10 + "RF_Join_CTE"."LogProba_5_2" / 10 + "RF_Join_CTE"."LogProba_6_2" / 10 + "RF_Join_CTE"."LogProba_7_2" / 10 + "RF_Join_CTE"."LogProba_8_2" / 10 + "RF_Join_CTE"."LogProba_9_2" / 10 AS "LogProba_2", "RF_Join_CTE"."Score_0_3" / 10 + "RF_Join_CTE"."Score_1_3" / 10 + "RF_Join_CTE"."Score_2_3" / 10 + "RF_Join_CTE"."Score_3_3" / 10 + "RF_Join_CTE"."Score_4_3" / 10 + "RF_Join_CTE"."Score_5_3" / 10 + "RF_Join_CTE"."Score_6_3" / 10 + "RF_Join_CTE"."Score_7_3" / 10 + "RF_Join_CTE"."Score_8_3" / 10 + "RF_Join_CTE"."Score_9_3" / 10 AS "Score_3", "RF_Join_CTE"."Proba_0_3" / 10 + "RF_Join_CTE"."Proba_1_3" / 10 + "RF_Join_CTE"."Proba_2_3" / 10 + "RF_Join_CTE"."Proba_3_3" / 10 + "RF_Join_CTE"."Proba_4_3" / 10 + "RF_Join_CTE"."Proba_5_3" / 10 + "RF_Join_CTE"."Proba_6_3" / 10 + "RF_Join_CTE"."Proba_7_3" / 10 + "RF_Join_CTE"."Proba_8_3" / 10 + "RF_Join_CTE"."Proba_9_3" / 10 AS "Proba_3", "RF_Join_CTE"."LogProba_0_3" / 10 + "RF_Join_CTE"."LogProba_1_3" / 10 + "RF_Join_CTE"."LogProba_2_3" / 10 + "RF_Join_CTE"."LogProba_3_3" / 10 + "RF_Join_CTE"."LogProba_4_3" / 10 + "RF_Join_CTE"."LogProba_5_3" / 10 + "RF_Join_CTE"."LogProba_6_3" / 10 + "RF_Join_CTE"."LogProba_7_3" / 10 + "RF_Join_CTE"."LogProba_8_3" / 10 + "RF_Join_CTE"."LogProba_9_3" / 10 AS "LogProba_3" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Score_3" AS "Score_3", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."Proba_3" AS "Proba_3", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", "RF_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte