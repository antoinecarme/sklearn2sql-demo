-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "RawScores" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -1.38629436112 + (-0.5 * 2.16570590338 - (0.5 * ("ADS"."Feature_0" - -0.749714605862) * ("ADS"."Feature_0" - -0.749714605862)) / 1.38795138599) + (-0.5 * 1.92831151168 - (0.5 * ("ADS"."Feature_1" - -0.379264541598) * ("ADS"."Feature_1" - -0.379264541598)) / 1.09464974582) + (-0.5 * 0.984897119474 - (0.5 * ("ADS"."Feature_2" - 1.11617920874) * ("ADS"."Feature_2" - 1.11617920874)) / 0.426143153989) + (-0.5 * 2.35484695125 - (0.5 * ("ADS"."Feature_3" - 1.17758392346) * ("ADS"."Feature_3" - 1.17758392346)) / 1.67693862628) + (-0.5 * 1.3276157217 - (0.5 * ("ADS"."Feature_4" - 0.621151785265) * ("ADS"."Feature_4" - 0.621151785265)) / 0.600338662973) + (-0.5 * 2.06212886334 - (0.5 * ("ADS"."Feature_5" - -0.245493968763) * ("ADS"."Feature_5" - -0.245493968763)) / 1.25138607493) + (-0.5 * 2.2484746556 - (0.5 * ("ADS"."Feature_6" - 0.0483293117988) * ("ADS"."Feature_6" - 0.0483293117988)) / 1.50771851224) + (-0.5 * 1.16651294905 - (0.5 * ("ADS"."Feature_7" - -0.189052676386) * ("ADS"."Feature_7" - -0.189052676386)) / 0.511011023115) + (-0.5 * 1.37760684474 - (0.5 * ("ADS"."Feature_8" - 0.273933811386) * ("ADS"."Feature_8" - 0.273933811386)) / 0.631113082034) + (-0.5 * 2.33818604078 - (0.5 * ("ADS"."Feature_9" - -0.122904138804) * ("ADS"."Feature_9" - -0.122904138804)) / 1.64923076203) + (-0.5 * 1.48257208614 - (0.5 * ("ADS"."Feature_10" - -0.357657170857) * ("ADS"."Feature_10" - -0.357657170857)) / 0.700959631748) + (-0.5 * 2.13489001624 - (0.5 * ("ADS"."Feature_11" - -0.245545506802) * ("ADS"."Feature_11" - -0.245545506802)) / 1.34583272764) + (-0.5 * 1.51026702099 - (0.5 * ("ADS"."Feature_12" - 0.00071190194802) * ("ADS"."Feature_12" - 0.00071190194802)) / 0.72064398334) + (-0.5 * 1.92111114636 - (0.5 * ("ADS"."Feature_13" - 0.937603115786) * ("ADS"."Feature_13" - 0.937603115786)) / 1.08679617597) + (-0.5 * 1.4721748441 - (0.5 * ("ADS"."Feature_14" - -0.307933664851) * ("ADS"."Feature_14" - -0.307933664851)) / 0.693709341624) + (-0.5 * 2.0463345952 - (0.5 * ("ADS"."Feature_15" - -0.341785161637) * ("ADS"."Feature_15" - -0.341785161637)) / 1.23177661391) + (-0.5 * 1.55163478419 - (0.5 * ("ADS"."Feature_16" - -0.0907139926737) * ("ADS"."Feature_16" - -0.0907139926737)) / 0.751080620418) + (-0.5 * 1.30208818349 - (0.5 * ("ADS"."Feature_17" - -0.0270883642665) * ("ADS"."Feature_17" - -0.0270883642665)) / 0.585207447838) + (-0.5 * 1.63237899504 - (0.5 * ("ADS"."Feature_18" - -0.318218997537) * ("ADS"."Feature_18" - -0.318218997537)) / 0.814241664934) + (-0.5 * 1.73703406025 - (0.5 * ("ADS"."Feature_19" - -0.0671754231702) * ("ADS"."Feature_19" - -0.0671754231702)) / 0.904074955943) AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -1.38629436112 + (-0.5 * 2.93900561543 - (0.5 * ("ADS"."Feature_0" - 0.303572482405) * ("ADS"."Feature_0" - 0.303572482405)) / 3.00755828637) + (-0.5 * 1.87851330483 - (0.5 * ("ADS"."Feature_1" - -0.150013307425) * ("ADS"."Feature_1" - -0.150013307425)) / 1.0414731887) + (-0.5 * 2.11451248862 - (0.5 * ("ADS"."Feature_2" - 0.426410639993) * ("ADS"."Feature_2" - 0.426410639993)) / 1.31868551994) + (-0.5 * 3.06733841434 - (0.5 * ("ADS"."Feature_3" - 0.0766200841055) * ("ADS"."Feature_3" - 0.0766200841055)) / 3.41938718015) + (-0.5 * 1.91993324224 - (0.5 * ("ADS"."Feature_4" - 0.0487019135141) * ("ADS"."Feature_4" - 0.0487019135141)) / 1.08551678792) + (-0.5 * 1.98175456864 - (0.5 * ("ADS"."Feature_5" - -0.0290445410027) * ("ADS"."Feature_5" - -0.0290445410027)) / 1.15474264646) + (-0.5 * 2.16880972343 - (0.5 * ("ADS"."Feature_6" - 0.570533927608) * ("ADS"."Feature_6" - 0.570533927608)) / 1.39226602981) + (-0.5 * 1.6521410289 - (0.5 * ("ADS"."Feature_7" - -0.209894876393) * ("ADS"."Feature_7" - -0.209894876393)) / 0.830492784995) + (-0.5 * 0.708407168665 - (0.5 * ("ADS"."Feature_8" - 0.320511444867) * ("ADS"."Feature_8" - 0.320511444867)) / 0.323204542476) + (-0.5 * 1.31684117082 - (0.5 * ("ADS"."Feature_9" - 0.167990341822) * ("ADS"."Feature_9" - 0.167990341822)) / 0.593905005629) + (-0.5 * 1.99965336641 - (0.5 * ("ADS"."Feature_10" - -0.345953891249) * ("ADS"."Feature_10" - -0.345953891249)) / 1.17559723081) + (-0.5 * 1.50541066908 - (0.5 * ("ADS"."Feature_11" - -0.0583338200955) * ("ADS"."Feature_11" - -0.0583338200955)) / 0.717152766708) + (-0.5 * 1.54670236575 - (0.5 * ("ADS"."Feature_12" - 0.0622100188756) * ("ADS"."Feature_12" - 0.0622100188756)) / 0.747385097944) + (-0.5 * 2.29852290815 - (0.5 * ("ADS"."Feature_13" - -0.111240571697) * ("ADS"."Feature_13" - -0.111240571697)) / 1.58509737654) + (-0.5 * 1.68873749577 - (0.5 * ("ADS"."Feature_14" - -0.332585245754) * ("ADS"."Feature_14" - -0.332585245754)) / 0.861448873542) + (-0.5 * 1.21898978262 - (0.5 * ("ADS"."Feature_15" - 0.222467945352) * ("ADS"."Feature_15" - 0.222467945352)) / 0.538543350241) + (-0.5 * 2.29663641533 - (0.5 * ("ADS"."Feature_16" - -0.151690918783) * ("ADS"."Feature_16" - -0.151690918783)) / 1.58210992051) + (-0.5 * 1.74409415313 - (0.5 * ("ADS"."Feature_17" - 0.190090634987) * ("ADS"."Feature_17" - 0.190090634987)) / 0.910480393988) + (-0.5 * 2.11367053156 - (0.5 * ("ADS"."Feature_18" - 0.0452123664118) * ("ADS"."Feature_18" - 0.0452123664118)) / 1.31757571063) + (-0.5 * 1.98794126197 - (0.5 * ("ADS"."Feature_19" - 0.17345636971) * ("ADS"."Feature_19" - 0.17345636971)) / 1.16190882973) AS "Score_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "Proba_2", -1.38629436112 + (-0.5 * 2.56903263051 - (0.5 * ("ADS"."Feature_0" - 0.509699052335) * ("ADS"."Feature_0" - 0.509699052335)) / 2.07747988233) + (-0.5 * 0.990933912304 - (0.5 * ("ADS"."Feature_1" - 0.0395723739142) * ("ADS"."Feature_1" - 0.0395723739142)) / 0.428723472513) + (-0.5 * 2.33785488152 - (0.5 * ("ADS"."Feature_2" - -0.0874034747998) * ("ADS"."Feature_2" - -0.0874034747998)) / 1.6486846944) + (-0.5 * 2.6826606958 - (0.5 * ("ADS"."Feature_3" - 0.0895109554221) * ("ADS"."Feature_3" - 0.0895109554221)) / 2.32747416308) + (-0.5 * 1.71998359963 - (0.5 * ("ADS"."Feature_4" - -0.201281406789) * ("ADS"."Feature_4" - -0.201281406789)) / 0.888790733314) + (-0.5 * 1.59561961287 - (0.5 * ("ADS"."Feature_5" - -0.348969384775) * ("ADS"."Feature_5" - -0.348969384775)) / 0.784854088072) + (-0.5 * 2.49807646844 - (0.5 * ("ADS"."Feature_6" - 0.982348580544) * ("ADS"."Feature_6" - 0.982348580544)) / 1.93517817439) + (-0.5 * 1.7147598464 - (0.5 * ("ADS"."Feature_7" - -0.016342055469) * ("ADS"."Feature_7" - -0.016342055469)) / 0.884160015241) + (-0.5 * 1.68915710624 - (0.5 * ("ADS"."Feature_8" - 0.230959978103) * ("ADS"."Feature_8" - 0.230959978103)) / 0.861810422353) + (-0.5 * 1.97741042755 - (0.5 * ("ADS"."Feature_9" - -0.358497160243) * ("ADS"."Feature_9" - -0.358497160243)) / 1.14973716162) + (-0.5 * 1.5050691826 - (0.5 * ("ADS"."Feature_10" - 0.26906738154) * ("ADS"."Feature_10" - 0.26906738154)) / 0.716907910546) + (-0.5 * 1.0986302463 - (0.5 * ("ADS"."Feature_11" - 0.0575763974379) * ("ADS"."Feature_11" - 0.0575763974379)) / 0.47747340349) + (-0.5 * 2.17727771184 - (0.5 * ("ADS"."Feature_12" - -0.402901382592) * ("ADS"."Feature_12" - -0.402901382592)) / 1.4041057811) + (-0.5 * 2.96695271081 - (0.5 * ("ADS"."Feature_13" - -0.0731004936336) * ("ADS"."Feature_13" - -0.0731004936336)) / 3.0927963348) + (-0.5 * 1.75635322531 - (0.5 * ("ADS"."Feature_14" - -0.116824219542) * ("ADS"."Feature_14" - -0.116824219542)) / 0.921710734997) + (-0.5 * 1.10023316624 - (0.5 * ("ADS"."Feature_15" - 0.185195353013) * ("ADS"."Feature_15" - 0.185195353013)) / 0.478239368855) + (-0.5 * 2.01082493743 - (0.5 * ("ADS"."Feature_16" - 0.0661155058471) * ("ADS"."Feature_16" - 0.0661155058471)) / 1.18880413233) + (-0.5 * 1.88165512624 - (0.5 * ("ADS"."Feature_17" - -0.148205465418) * ("ADS"."Feature_17" - -0.148205465418)) / 1.04475045706) + (-0.5 * 1.76923613712 - (0.5 * ("ADS"."Feature_18" - -0.394405383155) * ("ADS"."Feature_18" - -0.394405383155)) / 0.933661870529) + (-0.5 * 2.38444766467 - (0.5 * ("ADS"."Feature_19" - 0.383890748422) * ("ADS"."Feature_19" - 0.383890748422)) / 1.72731917753) AS "Score_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Proba_3", -1.38629436112 + (-0.5 * 2.30745222796 - (0.5 * ("ADS"."Feature_0" - -1.69540421138) * ("ADS"."Feature_0" - -1.69540421138)) / 1.59931459854) + (-0.5 * 1.79539932018 - (0.5 * ("ADS"."Feature_1" - -0.0194486683083) * ("ADS"."Feature_1" - -0.0194486683083)) / 0.95841179356) + (-0.5 * 2.45749888939 - (0.5 * ("ADS"."Feature_2" - -0.207338794041) * ("ADS"."Feature_2" - -0.207338794041)) / 1.85822517089) + (-0.5 * 1.89263904855 - (0.5 * ("ADS"."Feature_3" - 1.15507067119) * ("ADS"."Feature_3" - 1.15507067119)) / 1.05628916907) + (-0.5 * 1.83741699094 - (0.5 * ("ADS"."Feature_4" - 0.119642173765) * ("ADS"."Feature_4" - 0.119642173765)) / 0.999540030351) + (-0.5 * 2.25197430753 - (0.5 * ("ADS"."Feature_5" - -0.0563142375087) * ("ADS"."Feature_5" - -0.0563142375087)) / 1.51300424596) + (-0.5 * 2.57106659227 - (0.5 * ("ADS"."Feature_6" - -1.20277076546) * ("ADS"."Feature_6" - -1.20277076546)) / 2.08170969714) + (-0.5 * 1.32132240131 - (0.5 * ("ADS"."Feature_7" - 0.307181743809) * ("ADS"."Feature_7" - 0.307181743809)) / 0.596572402999) + (-0.5 * 1.3457082194 - (0.5 * ("ADS"."Feature_8" - -0.0809296022628) * ("ADS"."Feature_8" - -0.0809296022628)) / 0.611299141085) + (-0.5 * 2.37459046719 - (0.5 * ("ADS"."Feature_9" - -0.0275643965838) * ("ADS"."Feature_9" - -0.0275643965838)) / 1.71037629315) + (-0.5 * 1.86475690567 - (0.5 * ("ADS"."Feature_10" - -0.0709269938233) * ("ADS"."Feature_10" - -0.0709269938233)) / 1.02724436091) + (-0.5 * 1.87861363231 - (0.5 * ("ADS"."Feature_11" - -0.423327266708) * ("ADS"."Feature_11" - -0.423327266708)) / 1.04157768233) + (-0.5 * 1.9793212296 - (0.5 * ("ADS"."Feature_12" - 0.310505729066) * ("ADS"."Feature_12" - 0.310505729066)) / 1.15193618203) + (-0.5 * 1.9879257694 - (0.5 * ("ADS"."Feature_13" - 0.0242044800561) * ("ADS"."Feature_13" - 0.0242044800561)) / 1.16189082891) + (-0.5 * 1.53958531211 - (0.5 * ("ADS"."Feature_14" - 0.0806754566464) * ("ADS"."Feature_14" - 0.0806754566464)) / 0.742084801728) + (-0.5 * 1.73356091095 - (0.5 * ("ADS"."Feature_15" - -0.288254486755) * ("ADS"."Feature_15" - -0.288254486755)) / 0.900940415161) + (-0.5 * 1.57189146263 - (0.5 * ("ADS"."Feature_16" - -0.185025118743) * ("ADS"."Feature_16" - -0.185025118743)) / 0.766450161407) + (-0.5 * 2.18646370238 - (0.5 * ("ADS"."Feature_17" - -0.0128974016757) * ("ADS"."Feature_17" - -0.0128974016757)) / 1.41706330626) + (-0.5 * 2.01054050195 - (0.5 * ("ADS"."Feature_18" - -0.126535758249) * ("ADS"."Feature_18" - -0.126535758249)) / 1.18846604234) + (-0.5 * 1.78855294508 - (0.5 * ("ADS"."Feature_19" - -0.0475576149786) * ("ADS"."Feature_19" - -0.0475576149786)) / 0.951872557496) AS "Score_3" 
FROM "INPUT_DATA" "ADS"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte