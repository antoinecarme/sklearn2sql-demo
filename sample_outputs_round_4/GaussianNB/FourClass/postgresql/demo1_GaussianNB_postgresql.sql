-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "RawScores" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "Proba_0", -1.42711635564 + (-0.5 * 2.05729220153 - (0.5 * ("ADS"."Feature_0" - 0.352387466099) * ("ADS"."Feature_0" - 0.352387466099)) / 1.24534815715) + (-0.5 * 1.31597406759 - (0.5 * ("ADS"."Feature_1" - -0.333506765957) * ("ADS"."Feature_1" - -0.333506765957)) / 0.593390251887) + (-0.5 * 1.62744812556 - (0.5 * ("ADS"."Feature_2" - 0.0841479536533) * ("ADS"."Feature_2" - 0.0841479536533)) / 0.810236627831) + (-0.5 * 1.67248156626 - (0.5 * ("ADS"."Feature_3" - -0.0720985468322) * ("ADS"."Feature_3" - -0.0720985468322)) / 0.847558428309) + (-0.5 * 1.37576156867 - (0.5 * ("ADS"."Feature_4" - -0.0529546299997) * ("ADS"."Feature_4" - -0.0529546299997)) / 0.629949577988) + (-0.5 * 1.46440361933 - (0.5 * ("ADS"."Feature_5" - 0.227319430406) * ("ADS"."Feature_5" - 0.227319430406)) / 0.688339263474) + (-0.5 * 2.07707717712 - (0.5 * ("ADS"."Feature_6" - -0.0844919372186) * ("ADS"."Feature_6" - -0.0844919372186)) / 1.27023269833) + (-0.5 * 2.31354869233 - (0.5 * ("ADS"."Feature_7" - -1.5514461648) * ("ADS"."Feature_7" - -1.5514461648)) / 1.60909454425) + (-0.5 * 2.55268846142 - (0.5 * ("ADS"."Feature_8" - -1.23231055694) * ("ADS"."Feature_8" - -1.23231055694)) / 2.04380117481) + (-0.5 * 1.60170348417 - (0.5 * ("ADS"."Feature_9" - -0.292539610162) * ("ADS"."Feature_9" - -0.292539610162)) / 0.789643593932) + (-0.5 * 2.14712176568 - (0.5 * ("ADS"."Feature_10" - 0.118153684767) * ("ADS"."Feature_10" - 0.118153684767)) / 1.36239570695) + (-0.5 * 1.09703176747 - (0.5 * ("ADS"."Feature_11" - 0.10392010364) * ("ADS"."Feature_11" - 0.10392010364)) / 0.476710782041) + (-0.5 * 2.36988176478 - (0.5 * ("ADS"."Feature_12" - -0.0215242789989) * ("ADS"."Feature_12" - -0.0215242789989)) / 1.70234157158) + (-0.5 * 1.48996028993 - (0.5 * ("ADS"."Feature_13" - -0.20018147603) * ("ADS"."Feature_13" - -0.20018147603)) / 0.706157642693) + (-0.5 * 1.74701626617 - (0.5 * ("ADS"."Feature_14" - 0.0917829392079) * ("ADS"."Feature_14" - 0.0917829392079)) / 0.91314481159) + (-0.5 * 1.73255516263 - (0.5 * ("ADS"."Feature_15" - -0.168353717664) * ("ADS"."Feature_15" - -0.168353717664)) / 0.900034751363) + (-0.5 * 1.56749640704 - (0.5 * ("ADS"."Feature_16" - -0.25512378047) * ("ADS"."Feature_16" - -0.25512378047)) / 0.763088962078) + (-0.5 * 1.09906000969 - (0.5 * ("ADS"."Feature_17" - -0.0801120818225) * ("ADS"."Feature_17" - -0.0801120818225)) / 0.477678648177) + (-0.5 * 1.72956340229 - (0.5 * ("ADS"."Feature_18" - -1.5560613425) * ("ADS"."Feature_18" - -1.5560613425)) / 0.897346087013) + (-0.5 * 3.68409168342 - (0.5 * ("ADS"."Feature_19" - 0.51839190654) * ("ADS"."Feature_19" - 0.51839190654)) / 6.33579067788) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Proba_1", -1.38629436112 + (-0.5 * 2.39471132416 - (0.5 * ("ADS"."Feature_0" - -0.702556824189) * ("ADS"."Feature_0" - -0.702556824189)) / 1.74513908571) + (-0.5 * 2.16958633528 - (0.5 * ("ADS"."Feature_1" - -0.224364809711) * ("ADS"."Feature_1" - -0.224364809711)) / 1.39334770008) + (-0.5 * 1.52377558825 - (0.5 * ("ADS"."Feature_2" - -0.0700489004143) * ("ADS"."Feature_2" - -0.0700489004143)) / 0.730444900196) + (-0.5 * 1.62956125908 - (0.5 * ("ADS"."Feature_3" - -0.391765584899) * ("ADS"."Feature_3" - -0.391765584899)) / 0.811950576277) + (-0.5 * 1.93211663958 - (0.5 * ("ADS"."Feature_4" - -0.0917485118612) * ("ADS"."Feature_4" - -0.0917485118612)) / 1.09882296289) + (-0.5 * 1.97162679078 - (0.5 * ("ADS"."Feature_5" - 0.0486857577057) * ("ADS"."Feature_5" - 0.0486857577057)) / 1.1431066921) + (-0.5 * 1.99111124636 - (0.5 * ("ADS"."Feature_6" - 0.117851160722) * ("ADS"."Feature_6" - 0.117851160722)) / 1.16559790665) + (-0.5 * 2.07764590284 - (0.5 * ("ADS"."Feature_7" - 0.994898674047) * ("ADS"."Feature_7" - 0.994898674047)) / 1.2709553178) + (-0.5 * 1.57027808261 - (0.5 * ("ADS"."Feature_8" - 0.942830572817) * ("ADS"."Feature_8" - 0.942830572817)) / 0.765214583029) + (-0.5 * 1.93751822894 - (0.5 * ("ADS"."Feature_9" - 0.023728781219) * ("ADS"."Feature_9" - 0.023728781219)) / 1.10477441248) + (-0.5 * 2.01314901869 - (0.5 * ("ADS"."Feature_10" - 0.233165084364) * ("ADS"."Feature_10" - 0.233165084364)) / 1.1915702228) + (-0.5 * 1.79866151763 - (0.5 * ("ADS"."Feature_11" - 0.0244181598898) * ("ADS"."Feature_11" - 0.0244181598898)) / 0.961543427296) + (-0.5 * 2.06548633747 - (0.5 * ("ADS"."Feature_12" - -0.145910713822) * ("ADS"."Feature_12" - -0.145910713822)) / 1.25559463242) + (-0.5 * 2.04049350659 - (0.5 * ("ADS"."Feature_13" - -0.0201497290203) * ("ADS"."Feature_13" - -0.0201497290203)) / 1.22460266978) + (-0.5 * 1.94102860137 - (0.5 * ("ADS"."Feature_14" - -0.104223601964) * ("ADS"."Feature_14" - -0.104223601964)) / 1.108659397) + (-0.5 * 1.63981612791 - (0.5 * ("ADS"."Feature_15" - -0.00979288367084) * ("ADS"."Feature_15" - -0.00979288367084)) / 0.820319862551) + (-0.5 * 1.27771187669 - (0.5 * ("ADS"."Feature_16" - -0.0320669370605) * ("ADS"."Feature_16" - -0.0320669370605)) / 0.571114713775) + (-0.5 * 1.70547448101 - (0.5 * ("ADS"."Feature_17" - -0.471658403544) * ("ADS"."Feature_17" - -0.471658403544)) / 0.875988263998) + (-0.5 * 2.59904490523 - (0.5 * ("ADS"."Feature_18" - 0.22218328213) * ("ADS"."Feature_18" - 0.22218328213)) / 2.14077484118) + (-0.5 * 1.02626706952 - (0.5 * ("ADS"."Feature_19" - -1.07622941866) * ("ADS"."Feature_19" - -1.07622941866)) / 0.444142422367) AS "Score_1", CAST(NULL AS FLOAT(53)) AS "LogProba_2", CAST(NULL AS FLOAT(53)) AS "Proba_2", -1.42711635564 + (-0.5 * 2.79558416187 - (0.5 * ("ADS"."Feature_0" - 1.01612366373) * ("ADS"."Feature_0" - 1.01612366373)) / 2.60571496286) + (-0.5 * 1.86738118287 - (0.5 * ("ADS"."Feature_1" - 0.0954226104288) * ("ADS"."Feature_1" - 0.0954226104288)) / 1.02994367519) + (-0.5 * 1.55854069536 - (0.5 * ("ADS"."Feature_2" - 0.14925046141) * ("ADS"."Feature_2" - 0.14925046141)) / 0.756285467891) + (-0.5 * 1.84801969022 - (0.5 * ("ADS"."Feature_3" - 0.101850799694) * ("ADS"."Feature_3" - 0.101850799694)) / 1.01019423456) + (-0.5 * 1.6785384308 - (0.5 * ("ADS"."Feature_4" - -0.14878076302) * ("ADS"."Feature_4" - -0.14878076302)) / 0.852707552933) + (-0.5 * 1.95867976648 - (0.5 * ("ADS"."Feature_5" - -0.126194620071) * ("ADS"."Feature_5" - -0.126194620071)) / 1.12840225672) + (-0.5 * 1.92704023275 - (0.5 * ("ADS"."Feature_6" - 0.166509292875) * ("ADS"."Feature_6" - 0.166509292875)) / 1.09325902485) + (-0.5 * 2.14927209591 - (0.5 * ("ADS"."Feature_7" - -0.492329650082) * ("ADS"."Feature_7" - -0.492329650082)) / 1.3653284597) + (-0.5 * 2.83443939042 - (0.5 * ("ADS"."Feature_8" - -0.157428757347) * ("ADS"."Feature_8" - -0.157428757347)) / 2.7089532997) + (-0.5 * 2.21186125107 - (0.5 * ("ADS"."Feature_9" - -0.198554953584) * ("ADS"."Feature_9" - -0.198554953584)) / 1.45351416246) + (-0.5 * 1.56539059689 - (0.5 * ("ADS"."Feature_10" - 0.0103723611727) * ("ADS"."Feature_10" - 0.0103723611727)) / 0.761483732349) + (-0.5 * 2.5572965901 - (0.5 * ("ADS"."Feature_11" - 0.0302520131557) * ("ADS"."Feature_11" - 0.0302520131557)) / 2.05324100688) + (-0.5 * 1.61408339679 - (0.5 * ("ADS"."Feature_12" - 0.263196488935) * ("ADS"."Feature_12" - 0.263196488935)) / 0.799480074382) + (-0.5 * 1.49659666793 - (0.5 * ("ADS"."Feature_13" - 0.504101686114) * ("ADS"."Feature_13" - 0.504101686114)) / 0.710859556318) + (-0.5 * 1.79969470494 - (0.5 * ("ADS"."Feature_14" - 0.229436155318) * ("ADS"."Feature_14" - 0.229436155318)) / 0.962537395148) + (-0.5 * 1.9056258411 - (0.5 * ("ADS"."Feature_15" - -0.052584811733) * ("ADS"."Feature_15" - -0.052584811733)) / 1.0700964394) + (-0.5 * 2.02367351893 - (0.5 * ("ADS"."Feature_16" - 0.0200243566082) * ("ADS"."Feature_16" - 0.0200243566082)) / 1.20417712821) + (-0.5 * 2.23737649496 - (0.5 * ("ADS"."Feature_17" - 0.657216771424) * ("ADS"."Feature_17" - 0.657216771424)) / 1.49107811967) + (-0.5 * 2.02171542564 - (0.5 * ("ADS"."Feature_18" - 0.715684638347) * ("ADS"."Feature_18" - 0.715684638347)) / 1.20182154404) + (-0.5 * 2.18469828747 - (0.5 * ("ADS"."Feature_19" - -0.166279790155) * ("ADS"."Feature_19" - -0.166279790155)) / 1.41456380855) AS "Score_2", CAST(NULL AS FLOAT(53)) AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Proba_3", -1.30933331998 + (-0.5 * 2.9130944477 - (0.5 * ("ADS"."Feature_0" - 0.013726517299) * ("ADS"."Feature_0" - 0.013726517299)) / 2.9306298954) + (-0.5 * 1.64267586222 - (0.5 * ("ADS"."Feature_1" - 0.0809376915061) * ("ADS"."Feature_1" - 0.0809376915061)) / 0.82266911693) + (-0.5 * 1.12640115614 - (0.5 * ("ADS"."Feature_2" - -0.0861542241145) * ("ADS"."Feature_2" - -0.0861542241145)) / 0.490919109954) + (-0.5 * 1.66333816593 - (0.5 * ("ADS"."Feature_3" - 0.00571562292239) * ("ADS"."Feature_3" - 0.00571562292239)) / 0.839844183255) + (-0.5 * 1.71137538425 - (0.5 * ("ADS"."Feature_4" - -0.189304255822) * ("ADS"."Feature_4" - -0.189304255822)) / 0.881172667267) + (-0.5 * 1.59857796677 - (0.5 * ("ADS"."Feature_5" - 0.118236307659) * ("ADS"."Feature_5" - 0.118236307659)) / 0.787179402084) + (-0.5 * 1.87411557995 - (0.5 * ("ADS"."Feature_6" - -0.100247664947) * ("ADS"."Feature_6" - -0.100247664947)) / 1.03690313243) + (-0.5 * 2.66746360371 - (0.5 * ("ADS"."Feature_7" - -0.595867458976) * ("ADS"."Feature_7" - -0.595867458976)) / 2.29237073451) + (-0.5 * 2.0809657344 - (0.5 * ("ADS"."Feature_8" - 0.649047186078) * ("ADS"."Feature_8" - 0.649047186078)) / 1.2751816869) + (-0.5 * 1.45231754795 - (0.5 * ("ADS"."Feature_9" - 0.273010660396) * ("ADS"."Feature_9" - 0.273010660396)) / 0.680070018002) + (-0.5 * 1.84266389295 - (0.5 * ("ADS"."Feature_10" - -0.216702045444) * ("ADS"."Feature_10" - -0.216702045444)) / 1.0047983017) + (-0.5 * 1.68168733591 - (0.5 * ("ADS"."Feature_11" - 0.0161585758175) * ("ADS"."Feature_11" - 0.0161585758175)) / 0.855396880095) + (-0.5 * 1.75770066435 - (0.5 * ("ADS"."Feature_12" - -0.0964046639257) * ("ADS"."Feature_12" - -0.0964046639257)) / 0.922953521123) + (-0.5 * 2.16426077542 - (0.5 * ("ADS"."Feature_13" - 0.0471520070277) * ("ADS"."Feature_13" - 0.0471520070277)) / 1.38594706723) + (-0.5 * 1.90876199822 - (0.5 * ("ADS"."Feature_14" - 0.138219997853) * ("ADS"."Feature_14" - 0.138219997853)) / 1.07345769792) + (-0.5 * 1.46488593804 - (0.5 * ("ADS"."Feature_15" - 0.260902686033) * ("ADS"."Feature_15" - 0.260902686033)) / 0.688671342455) + (-0.5 * 1.45186433642 - (0.5 * ("ADS"."Feature_16" - 0.173809571412) * ("ADS"."Feature_16" - 0.173809571412)) / 0.679761872262) + (-0.5 * 2.32955751761 - (0.5 * ("ADS"."Feature_17" - -0.298356328913) * ("ADS"."Feature_17" - -0.298356328913)) / 1.63506155376) + (-0.5 * 2.8270019941 - (0.5 * ("ADS"."Feature_18" - -0.163819498232) * ("ADS"."Feature_18" - -0.163819498232)) / 2.6888804777) + (-0.5 * 2.24143598827 - (0.5 * ("ADS"."Feature_19" - 1.30601236928) * ("ADS"."Feature_19" - 1.30601236928)) / 1.49714344406) AS "Score_3" 
FROM "INPUT_DATA" AS "ADS"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1", exp(CASE WHEN (score_max."Score_2" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_2" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_2", exp(CASE WHEN (score_max."Score_3" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_3" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "Score_1", CAST(NULL AS FLOAT(53)) AS "Score_2", CAST(NULL AS FLOAT(53)) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte