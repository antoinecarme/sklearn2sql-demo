-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.027641344673 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.11215635305 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.0935102121121 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.0241695905673 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0946612184143 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.0268023460001 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.0161743254413 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.213248941182 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.179846884531 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.140110039184 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.104705892729 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.221457069207 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.00145223794109 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.0382833316521 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0406681923971 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.172143968278 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.349489120685 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0784794392832 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.00878824113596 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.171373767524 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.027641344673 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.11215635305 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.0935102121121 AS impute_4, "ADS_imp_1_OUT".impute_5 - -0.0241695905673 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.0946612184143 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.0268023460001 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.0161743254413 AS impute_8, "ADS_imp_1_OUT".impute_9 - -0.213248941182 AS impute_9, "ADS_imp_1_OUT".impute_10 - -0.179846884531 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.140110039184 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.104705892729 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.221457069207 AS impute_13, "ADS_imp_1_OUT".impute_14 - -0.00145223794109 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.0382833316521 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0406681923971 AS impute_16, "ADS_imp_1_OUT".impute_17 - -0.172143968278 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.349489120685 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.0784794392832 AS impute_19, "ADS_imp_1_OUT".impute_20 - -0.00878824113596 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.171373767524 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * -0.183923410031 + "CenteredDataForPCA".impute_3 * -0.0169079363231 + "CenteredDataForPCA".impute_4 * -0.000488280420985 + "CenteredDataForPCA".impute_5 * 0.303699492743 + "CenteredDataForPCA".impute_6 * 0.0199760911296 + "CenteredDataForPCA".impute_7 * 0.0345617005181 + "CenteredDataForPCA".impute_8 * -0.005844543316 + "CenteredDataForPCA".impute_9 * 0.607257000862 + "CenteredDataForPCA".impute_10 * -0.00212027518457 + "CenteredDataForPCA".impute_11 * -0.144177476261 + "CenteredDataForPCA".impute_12 * -0.0582843543579 + "CenteredDataForPCA".impute_13 * 0.0971068839942 + "CenteredDataForPCA".impute_14 * 0.0137922929281 + "CenteredDataForPCA".impute_15 * -0.508363502048 + "CenteredDataForPCA".impute_16 * -0.00103047028453 + "CenteredDataForPCA".impute_17 * -0.0535542147421 + "CenteredDataForPCA".impute_18 * 0.449413409146 + "CenteredDataForPCA".impute_19 * -0.0134436156341 + "CenteredDataForPCA".impute_20 * 0.0328390747083 + "CenteredDataForPCA".impute_21 * -0.0701506028251 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.64784331197 + "CenteredDataForPCA".impute_3 * -0.055363640894 + "CenteredDataForPCA".impute_4 * -0.0229489538196 + "CenteredDataForPCA".impute_5 * -0.624402251466 + "CenteredDataForPCA".impute_6 * 0.00690488113392 + "CenteredDataForPCA".impute_7 * -0.11578575186 + "CenteredDataForPCA".impute_8 * 0.0686509703471 + "CenteredDataForPCA".impute_9 * 0.224986986802 + "CenteredDataForPCA".impute_10 * -0.0194427579791 + "CenteredDataForPCA".impute_11 * -0.0509575427101 + "CenteredDataForPCA".impute_12 * 0.00604014023105 + "CenteredDataForPCA".impute_13 * 0.0405749645736 + "CenteredDataForPCA".impute_14 * -0.155540101067 + "CenteredDataForPCA".impute_15 * -0.0860038879034 + "CenteredDataForPCA".impute_16 * 0.00660044303355 + "CenteredDataForPCA".impute_17 * 0.0342111856819 + "CenteredDataForPCA".impute_18 * 0.273306746752 + "CenteredDataForPCA".impute_19 * -0.0565092978187 + "CenteredDataForPCA".impute_20 * 0.0513734322051 + "CenteredDataForPCA".impute_21 * 0.0072796031558 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.0184868368568 + "CenteredDataForPCA".impute_3 * 0.0774494540669 + "CenteredDataForPCA".impute_4 * -0.0661126191079 + "CenteredDataForPCA".impute_5 * 0.0619640573275 + "CenteredDataForPCA".impute_6 * -0.162701220648 + "CenteredDataForPCA".impute_7 * 0.0334960448025 + "CenteredDataForPCA".impute_8 * -0.0890974195456 + "CenteredDataForPCA".impute_9 * 0.0435493513345 + "CenteredDataForPCA".impute_10 * 0.030496543814 + "CenteredDataForPCA".impute_11 * -0.846625254167 + "CenteredDataForPCA".impute_12 * 0.0249349164889 + "CenteredDataForPCA".impute_13 * 0.00102063534233 + "CenteredDataForPCA".impute_14 * -0.15683709334 + "CenteredDataForPCA".impute_15 * 0.418360492038 + "CenteredDataForPCA".impute_16 * -0.116039024071 + "CenteredDataForPCA".impute_17 * -0.0815211606505 + "CenteredDataForPCA".impute_18 * 0.095156127322 + "CenteredDataForPCA".impute_19 * -0.0265209955845 + "CenteredDataForPCA".impute_20 * -0.00487274401266 + "CenteredDataForPCA".impute_21 * -0.0133323104856 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.0677813082868 + "CenteredDataForPCA".impute_3 * -0.33213087085 + "CenteredDataForPCA".impute_4 * -0.519570325314 + "CenteredDataForPCA".impute_5 * 0.0552227684402 + "CenteredDataForPCA".impute_6 * -0.254922803401 + "CenteredDataForPCA".impute_7 * -0.113069321971 + "CenteredDataForPCA".impute_8 * 0.503762197239 + "CenteredDataForPCA".impute_9 * -0.033973117262 + "CenteredDataForPCA".impute_10 * -0.0918495880186 + "CenteredDataForPCA".impute_11 * 0.0583317971344 + "CenteredDataForPCA".impute_12 * -0.0114488352394 + "CenteredDataForPCA".impute_13 * 0.323348666 + "CenteredDataForPCA".impute_14 * -0.129677572766 + "CenteredDataForPCA".impute_15 * 0.0101569539143 + "CenteredDataForPCA".impute_16 * -0.222263088027 + "CenteredDataForPCA".impute_17 * -0.0911581292922 + "CenteredDataForPCA".impute_18 * -0.0181480767574 + "CenteredDataForPCA".impute_19 * 0.22944612382 + "CenteredDataForPCA".impute_20 * -0.00401575011222 + "CenteredDataForPCA".impute_21 * 0.187738023148 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.102132599577 + "CenteredDataForPCA".impute_3 * -0.673277183847 + "CenteredDataForPCA".impute_4 * 0.100279986743 + "CenteredDataForPCA".impute_5 * 0.0294943818445 + "CenteredDataForPCA".impute_6 * 0.0645649109311 + "CenteredDataForPCA".impute_7 * -0.102339626822 + "CenteredDataForPCA".impute_8 * -0.296391118987 + "CenteredDataForPCA".impute_9 * -0.0521431757849 + "CenteredDataForPCA".impute_10 * -0.121241201878 + "CenteredDataForPCA".impute_11 * 0.0963690637021 + "CenteredDataForPCA".impute_12 * -0.431658867874 + "CenteredDataForPCA".impute_13 * -0.0310542236398 + "CenteredDataForPCA".impute_14 * -0.248715754583 + "CenteredDataForPCA".impute_15 * 0.191223931561 + "CenteredDataForPCA".impute_16 * -0.0555149822863 + "CenteredDataForPCA".impute_17 * 0.0959481030626 + "CenteredDataForPCA".impute_18 * 0.169290593887 + "CenteredDataForPCA".impute_19 * -0.159119428311 + "CenteredDataForPCA".impute_20 * -0.0610933406852 + "CenteredDataForPCA".impute_21 * -0.201065177604 AS anoova_6, "CenteredDataForPCA".impute_2 * -0.0541025364771 + "CenteredDataForPCA".impute_3 * 0.143414958901 + "CenteredDataForPCA".impute_4 * 0.0586784178653 + "CenteredDataForPCA".impute_5 * 0.0811591315438 + "CenteredDataForPCA".impute_6 * -0.028236685649 + "CenteredDataForPCA".impute_7 * -0.538832583801 + "CenteredDataForPCA".impute_8 * 0.041580021783 + "CenteredDataForPCA".impute_9 * -0.0120929792368 + "CenteredDataForPCA".impute_10 * 0.117582495664 + "CenteredDataForPCA".impute_11 * -0.0852585795855 + "CenteredDataForPCA".impute_12 * 0.0172839883153 + "CenteredDataForPCA".impute_13 * 0.298674123689 + "CenteredDataForPCA".impute_14 * -0.247317117373 + "CenteredDataForPCA".impute_15 * -0.0316302610715 + "CenteredDataForPCA".impute_16 * 0.406735084486 + "CenteredDataForPCA".impute_17 * 0.478220397664 + "CenteredDataForPCA".impute_18 * -0.100582350118 + "CenteredDataForPCA".impute_19 * 0.196274802003 + "CenteredDataForPCA".impute_20 * -0.0293923154905 + "CenteredDataForPCA".impute_21 * -0.238879763896 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.0506376772426 + "CenteredDataForPCA".impute_3 * 0.184926337907 + "CenteredDataForPCA".impute_4 * -0.636266945303 + "CenteredDataForPCA".impute_5 * 0.0140684263205 + "CenteredDataForPCA".impute_6 * 0.0208184545974 + "CenteredDataForPCA".impute_7 * -0.17721133051 + "CenteredDataForPCA".impute_8 * -0.00340163475424 + "CenteredDataForPCA".impute_9 * 0.0073101675193 + "CenteredDataForPCA".impute_10 * 0.156452939593 + "CenteredDataForPCA".impute_11 * 0.108564736683 + "CenteredDataForPCA".impute_12 * 0.0372120145624 + "CenteredDataForPCA".impute_13 * -0.363106591645 + "CenteredDataForPCA".impute_14 * 0.0264961873013 + "CenteredDataForPCA".impute_15 * 0.0444471628672 + "CenteredDataForPCA".impute_16 * -0.0325719895631 + "CenteredDataForPCA".impute_17 * 0.109828212635 + "CenteredDataForPCA".impute_18 * 0.11945978219 + "CenteredDataForPCA".impute_19 * -0.431050141771 + "CenteredDataForPCA".impute_20 * -0.238675356092 + "CenteredDataForPCA".impute_21 * -0.289768427047 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.0752464082295 + "CenteredDataForPCA".impute_3 * 0.339013889388 + "CenteredDataForPCA".impute_4 * -0.118239755042 + "CenteredDataForPCA".impute_5 * -0.00829276398631 + "CenteredDataForPCA".impute_6 * 0.0663449874678 + "CenteredDataForPCA".impute_7 * 0.241682644894 + "CenteredDataForPCA".impute_8 * 0.110606244496 + "CenteredDataForPCA".impute_9 * -0.0633125346713 + "CenteredDataForPCA".impute_10 * -0.0868455564227 + "CenteredDataForPCA".impute_11 * 0.193854881396 + "CenteredDataForPCA".impute_12 * -0.258282897108 + "CenteredDataForPCA".impute_13 * 0.00211504863216 + "CenteredDataForPCA".impute_14 * -0.4394391667 + "CenteredDataForPCA".impute_15 * 0.166079152326 + "CenteredDataForPCA".impute_16 * 0.212448308 + "CenteredDataForPCA".impute_17 * -0.307911443539 + "CenteredDataForPCA".impute_18 * 0.172481311021 + "CenteredDataForPCA".impute_19 * 0.13877325089 + "CenteredDataForPCA".impute_20 * 0.41708269696 + "CenteredDataForPCA".impute_21 * -0.301444489036 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.0229857635164 + "CenteredDataForPCA".impute_3 * 0.278974983315 + "CenteredDataForPCA".impute_4 * 0.27571480055 + "CenteredDataForPCA".impute_5 * 0.0223282211305 + "CenteredDataForPCA".impute_6 * -0.238747714119 + "CenteredDataForPCA".impute_7 * 0.0560385358988 + "CenteredDataForPCA".impute_8 * 0.432442618496 + "CenteredDataForPCA".impute_9 * 0.0130099175414 + "CenteredDataForPCA".impute_10 * -0.470354926888 + "CenteredDataForPCA".impute_11 * -0.011886866386 + "CenteredDataForPCA".impute_12 * -0.367924110976 + "CenteredDataForPCA".impute_13 * -0.149162560879 + "CenteredDataForPCA".impute_14 * -0.0433684963694 + "CenteredDataForPCA".impute_15 * 0.00513725656798 + "CenteredDataForPCA".impute_16 * -0.112321432619 + "CenteredDataForPCA".impute_17 * 0.305230858759 + "CenteredDataForPCA".impute_18 * 0.0228759634726 + "CenteredDataForPCA".impute_19 * -0.23590222916 + "CenteredDataForPCA".impute_20 * -0.223080008839 + "CenteredDataForPCA".impute_21 * 0.0720486713752 AS anoova_10, "CenteredDataForPCA".impute_2 * -0.0731232345686 + "CenteredDataForPCA".impute_3 * 0.0403781712523 + "CenteredDataForPCA".impute_4 * 0.092084142484 + "CenteredDataForPCA".impute_5 * -0.0374132916669 + "CenteredDataForPCA".impute_6 * 0.11328999218 + "CenteredDataForPCA".impute_7 * 0.414045043987 + "CenteredDataForPCA".impute_8 * 0.0447856328989 + "CenteredDataForPCA".impute_9 * -0.0226466359418 + "CenteredDataForPCA".impute_10 * 0.0602704071969 + "CenteredDataForPCA".impute_11 * 0.178643473245 + "CenteredDataForPCA".impute_12 * 0.381243859572 + "CenteredDataForPCA".impute_13 * 0.345645172714 + "CenteredDataForPCA".impute_14 * -0.059390524458 + "CenteredDataForPCA".impute_15 * 0.254787432184 + "CenteredDataForPCA".impute_16 * -0.264159456784 + "CenteredDataForPCA".impute_17 * 0.34815087535 + "CenteredDataForPCA".impute_18 * 0.334809994651 + "CenteredDataForPCA".impute_19 * 0.0581160990145 + "CenteredDataForPCA".impute_20 * -0.241421166386 + "CenteredDataForPCA".impute_21 * -0.250600910373 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.0151161593801 + "CenteredDataForPCA".impute_3 * -0.214865688325 + "CenteredDataForPCA".impute_4 * 0.0135680160307 + "CenteredDataForPCA".impute_5 * -0.0125879992302 + "CenteredDataForPCA".impute_6 * 0.314005727812 + "CenteredDataForPCA".impute_7 * 0.203661697027 + "CenteredDataForPCA".impute_8 * 0.381012660565 + "CenteredDataForPCA".impute_9 * 0.0385535507869 + "CenteredDataForPCA".impute_10 * 0.176514540087 + "CenteredDataForPCA".impute_11 * -0.133386674232 + "CenteredDataForPCA".impute_12 * -0.081450541341 + "CenteredDataForPCA".impute_13 * -0.379007969998 + "CenteredDataForPCA".impute_14 * 0.0356314952878 + "CenteredDataForPCA".impute_15 * 0.0712221212439 + "CenteredDataForPCA".impute_16 * 0.397183234133 + "CenteredDataForPCA".impute_17 * -0.0211816208057 + "CenteredDataForPCA".impute_18 * 0.0772030541179 + "CenteredDataForPCA".impute_19 * 0.373026966452 + "CenteredDataForPCA".impute_20 * -0.397040804983 + "CenteredDataForPCA".impute_21 * -0.000393489451163 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.114508084753 + "CenteredDataForPCA".impute_3 * -0.117156944542 + "CenteredDataForPCA".impute_4 * -0.0976527597567 + "CenteredDataForPCA".impute_5 * -0.0406074988546 + "CenteredDataForPCA".impute_6 * -0.137208600428 + "CenteredDataForPCA".impute_7 * 0.429705463 + "CenteredDataForPCA".impute_8 * 0.136472700228 + "CenteredDataForPCA".impute_9 * -0.0181133445304 + "CenteredDataForPCA".impute_10 * 0.393341292918 + "CenteredDataForPCA".impute_11 * -0.150933043307 + "CenteredDataForPCA".impute_12 * -0.363755442368 + "CenteredDataForPCA".impute_13 * 0.221890247008 + "CenteredDataForPCA".impute_14 * 0.264409834222 + "CenteredDataForPCA".impute_15 * -0.135084058455 + "CenteredDataForPCA".impute_16 * 0.0940985011244 + "CenteredDataForPCA".impute_17 * 0.257980996916 + "CenteredDataForPCA".impute_18 * -0.261492397157 + "CenteredDataForPCA".impute_19 * -0.204746434427 + "CenteredDataForPCA".impute_20 * 0.232090460329 + "CenteredDataForPCA".impute_21 * -0.229707288806 AS anoova_13, "CenteredDataForPCA".impute_2 * -0.00283829422446 + "CenteredDataForPCA".impute_3 * 0.302030024843 + "CenteredDataForPCA".impute_4 * -0.00787324380067 + "CenteredDataForPCA".impute_5 * -0.0543336801568 + "CenteredDataForPCA".impute_6 * 0.122005578537 + "CenteredDataForPCA".impute_7 * -0.129138855035 + "CenteredDataForPCA".impute_8 * -0.133907301282 + "CenteredDataForPCA".impute_9 * -0.0255483807815 + "CenteredDataForPCA".impute_10 * 0.297061934404 + "CenteredDataForPCA".impute_11 * 0.0947585817699 + "CenteredDataForPCA".impute_12 * -0.490382874331 + "CenteredDataForPCA".impute_13 * 0.404133373547 + "CenteredDataForPCA".impute_14 * 0.133320131547 + "CenteredDataForPCA".impute_15 * 0.136213530236 + "CenteredDataForPCA".impute_16 * -0.0547233197218 + "CenteredDataForPCA".impute_17 * -0.249250891773 + "CenteredDataForPCA".impute_18 * 0.154253432469 + "CenteredDataForPCA".impute_19 * 0.0142810863789 + "CenteredDataForPCA".impute_20 * -0.409665734952 + "CenteredDataForPCA".impute_21 * 0.247613277477 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.00446996071065 + "CenteredDataForPCA".impute_3 * -0.074900219613 + "CenteredDataForPCA".impute_4 * 0.366165609368 + "CenteredDataForPCA".impute_5 * 0.0346927120986 + "CenteredDataForPCA".impute_6 * -0.201934445568 + "CenteredDataForPCA".impute_7 * -0.0730063155815 + "CenteredDataForPCA".impute_8 * 0.261582101372 + "CenteredDataForPCA".impute_9 * -0.0186608101693 + "CenteredDataForPCA".impute_10 * 0.386242957593 + "CenteredDataForPCA".impute_11 * 0.0374740078476 + "CenteredDataForPCA".impute_12 * 0.168801756087 + "CenteredDataForPCA".impute_13 * 0.00159512580115 + "CenteredDataForPCA".impute_14 * -0.380674832723 + "CenteredDataForPCA".impute_15 * -0.151771521102 + "CenteredDataForPCA".impute_16 * -0.122463670721 + "CenteredDataForPCA".impute_17 * -0.397284571178 + "CenteredDataForPCA".impute_18 * -0.180971194641 + "CenteredDataForPCA".impute_19 * -0.28324434197 + "CenteredDataForPCA".impute_20 * -0.236621069709 + "CenteredDataForPCA".impute_21 * -0.235321075842 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.091900263233 + "CenteredDataForPCA".impute_3 * -0.0413654691208 + "CenteredDataForPCA".impute_4 * 0.159641100714 + "CenteredDataForPCA".impute_5 * 0.050404476067 + "CenteredDataForPCA".impute_6 * 0.568129466372 + "CenteredDataForPCA".impute_7 * -0.292310317851 + "CenteredDataForPCA".impute_8 * 0.422159330703 + "CenteredDataForPCA".impute_9 * -0.0276349957304 + "CenteredDataForPCA".impute_10 * 0.127678487468 + "CenteredDataForPCA".impute_11 * -0.0672070735225 + "CenteredDataForPCA".impute_12 * 0.0202907066023 + "CenteredDataForPCA".impute_13 * 0.042561266451 + "CenteredDataForPCA".impute_14 * 0.165238552565 + "CenteredDataForPCA".impute_15 * 0.190744089108 + "CenteredDataForPCA".impute_16 * -0.167906008602 + "CenteredDataForPCA".impute_17 * 0.0183597954939 + "CenteredDataForPCA".impute_18 * 0.126630528787 + "CenteredDataForPCA".impute_19 * -0.288541195607 + "CenteredDataForPCA".impute_20 * 0.392658232041 + "CenteredDataForPCA".impute_21 * 0.0767371104797 AS anoova_16, "CenteredDataForPCA".impute_2 * 0.00928071800864 + "CenteredDataForPCA".impute_3 * -0.0375628907599 + "CenteredDataForPCA".impute_4 * -0.173216952702 + "CenteredDataForPCA".impute_5 * 0.0499149686139 + "CenteredDataForPCA".impute_6 * 0.36149084468 + "CenteredDataForPCA".impute_7 * 0.252287108143 + "CenteredDataForPCA".impute_8 * -0.0540757801152 + "CenteredDataForPCA".impute_9 * -0.010519146392 + "CenteredDataForPCA".impute_10 * -0.22505610502 + "CenteredDataForPCA".impute_11 * -0.100884729941 + "CenteredDataForPCA".impute_12 * 0.127768216603 + "CenteredDataForPCA".impute_13 * 0.277698414496 + "CenteredDataForPCA".impute_14 * -0.36120178048 + "CenteredDataForPCA".impute_15 * -0.12702760278 + "CenteredDataForPCA".impute_16 * 0.327906527271 + "CenteredDataForPCA".impute_17 * 0.00642304742176 + "CenteredDataForPCA".impute_18 * -0.211755347672 + "CenteredDataForPCA".impute_19 * -0.428743095335 + "CenteredDataForPCA".impute_20 * -0.15372535015 + "CenteredDataForPCA".impute_21 * 0.328511461336 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.0060541042352 + "CenteredDataForPCA".impute_3 * -0.116198427658 + "CenteredDataForPCA".impute_4 * 0.0486987268754 + "CenteredDataForPCA".impute_5 * -0.0418606882915 + "CenteredDataForPCA".impute_6 * -0.17677306578 + "CenteredDataForPCA".impute_7 * -0.0804027000327 + "CenteredDataForPCA".impute_8 * 0.104688496283 + "CenteredDataForPCA".impute_9 * -0.0314603273611 + "CenteredDataForPCA".impute_10 * -0.332229032525 + "CenteredDataForPCA".impute_11 * -0.00621835740195 + "CenteredDataForPCA".impute_12 * 0.154728383879 + "CenteredDataForPCA".impute_13 * 0.269363191371 + "CenteredDataForPCA".impute_14 * 0.464782283001 + "CenteredDataForPCA".impute_15 * 0.175861089309 + "CenteredDataForPCA".impute_16 * 0.441953287573 + "CenteredDataForPCA".impute_17 * -0.339506441074 + "CenteredDataForPCA".impute_18 * 0.134500777185 + "CenteredDataForPCA".impute_19 * -0.210795565261 + "CenteredDataForPCA".impute_20 * -0.0905799427354 + "CenteredDataForPCA".impute_21 * -0.312242638439 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.127861273306 + "CenteredDataForPCA".impute_3 * 0.0673401320055 + "CenteredDataForPCA".impute_4 * -0.0813321194116 + "CenteredDataForPCA".impute_5 * -0.0228653678227 + "CenteredDataForPCA".impute_6 * 0.413129207225 + "CenteredDataForPCA".impute_7 * -0.050992431777 + "CenteredDataForPCA".impute_8 * -0.0212068034646 + "CenteredDataForPCA".impute_9 * -0.00923445490197 + "CenteredDataForPCA".impute_10 * -0.322812214303 + "CenteredDataForPCA".impute_11 * -0.183330624848 + "CenteredDataForPCA".impute_12 * -0.108520864192 + "CenteredDataForPCA".impute_13 * 0.113727528712 + "CenteredDataForPCA".impute_14 * 0.0655584016058 + "CenteredDataForPCA".impute_15 * -0.220129194277 + "CenteredDataForPCA".impute_16 * -0.352623999821 + "CenteredDataForPCA".impute_17 * -0.138750828581 + "CenteredDataForPCA".impute_18 * -0.356505269845 + "CenteredDataForPCA".impute_19 * 0.205746805777 + "CenteredDataForPCA".impute_20 * -0.177013546147 + "CenteredDataForPCA".impute_21 * -0.488392999246 AS anoova_19, "CenteredDataForPCA".impute_2 * -0.684170850374 + "CenteredDataForPCA".impute_3 * 2.22044604925e-16 + "CenteredDataForPCA".impute_4 * 5.63785129692e-17 + "CenteredDataForPCA".impute_5 * -0.693507663234 + "CenteredDataForPCA".impute_6 * -2.64003229e-17 + "CenteredDataForPCA".impute_7 * 2.77555756156e-17 + "CenteredDataForPCA".impute_8 * 4.16333634234e-17 + "CenteredDataForPCA".impute_9 * -0.0273051015627 + "CenteredDataForPCA".impute_10 * 1.62630325873e-17 + "CenteredDataForPCA".impute_11 * -0.129408378546 + "CenteredDataForPCA".impute_12 * 0.0 + "CenteredDataForPCA".impute_13 * -7.8062556419e-17 + "CenteredDataForPCA".impute_14 * -6.93889390391e-17 + "CenteredDataForPCA".impute_15 * -0.18167097562 + "CenteredDataForPCA".impute_16 * 9.54097911787e-17 + "CenteredDataForPCA".impute_17 * 6.93889390391e-18 + "CenteredDataForPCA".impute_18 * -0.0214692370983 + "CenteredDataForPCA".impute_19 * -6.93889390391e-18 + "CenteredDataForPCA".impute_20 * 5.55111512313e-17 + "CenteredDataForPCA".impute_21 * 2.77555756156e-17 AS anoova_20, "CenteredDataForPCA".impute_2 * -0.0877503040488 + "CenteredDataForPCA".impute_3 * -2.77555756156e-16 + "CenteredDataForPCA".impute_4 * 2.049142106e-16 + "CenteredDataForPCA".impute_5 * -0.0845832963685 + "CenteredDataForPCA".impute_6 * 1.79123751422e-16 + "CenteredDataForPCA".impute_7 * -1.52655665886e-16 + "CenteredDataForPCA".impute_8 * 1.97758476261e-16 + "CenteredDataForPCA".impute_9 * 0.751298556432 + "CenteredDataForPCA".impute_10 * -1.57155104902e-16 + "CenteredDataForPCA".impute_11 * 0.205952240074 + "CenteredDataForPCA".impute_12 * -7.8062556419e-18 + "CenteredDataForPCA".impute_13 * 1.48318857196e-16 + "CenteredDataForPCA".impute_14 * 1.56125112838e-17 + "CenteredDataForPCA".impute_15 * 0.44402322796 + "CenteredDataForPCA".impute_16 * -8.67361737988e-19 + "CenteredDataForPCA".impute_17 * 1.75207071074e-16 + "CenteredDataForPCA".impute_18 * -0.425585569608 + "CenteredDataForPCA".impute_19 * 3.46944695195e-17 + "CenteredDataForPCA".impute_20 * 3.72965547335e-17 + "CenteredDataForPCA".impute_21 * -8.32667268469e-17 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.4098530411720276) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.13068103790283203) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.0740903839468956) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.2226015329360962) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_16' AS feature, -0.4098530411720276 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.007506270728959787 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9473405821520511 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anoova_11' AS feature, -0.13068103790283203 AS threshold, 71 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.10666120030642451 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'anoova_5' AS feature, 0.0740903839468956 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.009636586413897323 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6614543132410735 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5492513462104964 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_18' AS feature, 0.2226015329360962 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21972849295118196 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9966860464425982 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7282252263033371 AS "Estimator") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0_0, "DT_Output"."Estimator" AS "Estimator_0_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6569892168045044) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= 0.2605286240577698) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.3320809006690979) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.09414440393447876) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6569892168045044 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -7.508224873686408e-05 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_17' AS feature, 0.2605286240577698 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.202532110575607 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0001004629805068 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4680749531694769 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_18' AS feature, 0.3320809006690979 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1465317313672726 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anoova_3' AS feature, -0.09414440393447876 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26247424659571195 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7306370819753942 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.40022404623322244 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.36650528339640254 AS "Estimator") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_0_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_0_1, "DT_Output_1"."Estimator" AS "Estimator_0_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.16634733974933624) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.08194293826818466) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= 0.17759782075881958) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= -0.48111027479171753) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.158769428730011) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.16634733974933624 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.007564029625006285 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_12' AS feature, -0.08194293826818466 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.20578308312076551 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.28848523051283 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'anoova_9' AS feature, 0.17759782075881958 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.41024456689034955 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0809163532753507 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.1510251012816917 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_13' AS feature, -0.48111027479171753 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20717327832873278 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.46006301275596506 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anoova_18' AS feature, -0.158769428730011 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.249417561072645 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9940973568921334 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0038703842680048 AS "Estimator") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_0_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_0_2, "DT_Output_2"."Estimator" AS "Estimator_0_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.8042873740196228) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.0376558303833008) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.41926097869873047) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.3966555893421173) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -0.8042873740196228 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0005568694716030539 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 1.0376558303833008 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3159874919908245 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4544463998372001 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.4273107069247146 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_12' AS feature, -0.41926097869873047 AS threshold, 63 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18469603581746358 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.308063217746808 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_4' AS feature, 0.3966555893421173 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24648755242143908 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9908915001835201 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.002435934618469 AS "Estimator") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_0_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_0_3, "DT_Output_3"."Estimator" AS "Estimator_0_3" 
FROM "DT_Output_3"), 
"RF_Join_CTE_0" AS 
(SELECT "RF_Tree_0_0".join_key_0_0 AS join_key_0_0, "RF_Tree_0_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Tree_0_1".join_key_0_1 AS join_key_0_1, "RF_Tree_0_1"."Estimator_0_1" AS "Estimator_0_1", "RF_Tree_0_2".join_key_0_2 AS join_key_0_2, "RF_Tree_0_2"."Estimator_0_2" AS "Estimator_0_2", "RF_Tree_0_3".join_key_0_3 AS join_key_0_3, "RF_Tree_0_3"."Estimator_0_3" AS "Estimator_0_3" 
FROM "RF_Tree_0_0" LEFT OUTER JOIN "RF_Tree_0_1" ON "RF_Tree_0_0".join_key_0_0 = "RF_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "RF_Tree_0_2" ON "RF_Tree_0_2".join_key_0_2 = "RF_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "RF_Tree_0_3" ON "RF_Tree_0_3".join_key_0_3 = "RF_Tree_0_2".join_key_0_2), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.8111475706100464) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.2039263248443604) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.043483197689056396) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_16' AS feature, -0.8111475706100464 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0064052219926609335 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2766055321991538 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, -1.2039263248443604 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.06629493626888741 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.978487889067381 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_11' AS feature, -0.043483197689056396 AS threshold, 59 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0070168883837174595 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5347768776596631 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5503043422697182 AS "Estimator") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_1_0" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_1_0, "DT_Output_4"."Estimator" AS "Estimator_1_0" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6569892168045044) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.43848317861557007) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.3320809006690979) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.09414440393447876) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6569892168045044 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.416552953789842e-05 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_10' AS feature, -0.43848317861557007 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18424300087540968 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4193168289187274 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9762294262155521 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_18' AS feature, 0.3320809006690979 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.13347625154691373 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anoova_3' AS feature, -0.09414440393447876 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2403003995415274 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4373485872741087 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3704961762982346 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3493823756028216 AS "Estimator") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_1_1" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_1_1, "DT_Output_5"."Estimator" AS "Estimator_1_1" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.16634733974933624) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.41229838132858276) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= -0.25230222940444946) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.4529881179332733) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.1075621098279953) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.16634733974933624 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.006425099118513525 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, -0.41229838132858276 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1843848062929428 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.640521746338455 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'anoova_13' AS feature, -0.25230222940444946 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.005609633693391474 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6815536222679722 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.758139419894178 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_14' AS feature, -0.4529881179332733 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18636458365378492 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4471703676131267 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anoova_18' AS feature, -0.1075621098279953 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2266978659262267 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9628707320876402 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9775072631631206 AS "Estimator") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_1_2" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_1_2, "DT_Output_6"."Estimator" AS "Estimator_1_2" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.8042873740196228) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.0376558303833008) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.41926097869873047) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.12549294531345367) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -0.8042873740196228 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00035255813053154173 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 1.0376558303833008 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.28800252868279747 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.40854913006446203 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9565106047798053 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_12' AS feature, -0.41926097869873047 AS threshold, 63 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16858472616206904 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2798367366806486 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_18' AS feature, -0.12549294531345367 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22615550515530902 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9597239299965998 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9773516182124901 AS "Estimator") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_1_3" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_1_3, "DT_Output_7"."Estimator" AS "Estimator_1_3" 
FROM "DT_Output_7"), 
"RF_Join_CTE_1" AS 
(SELECT "RF_Tree_1_0".join_key_1_0 AS join_key_1_0, "RF_Tree_1_0"."Estimator_1_0" AS "Estimator_1_0", "RF_Tree_1_1".join_key_1_1 AS join_key_1_1, "RF_Tree_1_1"."Estimator_1_1" AS "Estimator_1_1", "RF_Tree_1_2".join_key_1_2 AS join_key_1_2, "RF_Tree_1_2"."Estimator_1_2" AS "Estimator_1_2", "RF_Tree_1_3".join_key_1_3 AS join_key_1_3, "RF_Tree_1_3"."Estimator_1_3" AS "Estimator_1_3" 
FROM "RF_Tree_1_0" LEFT OUTER JOIN "RF_Tree_1_1" ON "RF_Tree_1_0".join_key_1_0 = "RF_Tree_1_1".join_key_1_1 LEFT OUTER JOIN "RF_Tree_1_2" ON "RF_Tree_1_2".join_key_1_2 = "RF_Tree_1_1".join_key_1_1 LEFT OUTER JOIN "RF_Tree_1_3" ON "RF_Tree_1_3".join_key_1_3 = "RF_Tree_1_2".join_key_1_2), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.4098530411720276) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.13068103790283203) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.0740903839468956) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.20545950531959534) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_16' AS feature, -0.4098530411720276 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.005487118106268305 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7688234062080426 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anoova_11' AS feature, -0.13068103790283203 AS threshold, 71 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.091390169298799 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'anoova_5' AS feature, 0.0740903839468956 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00938399457234791 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5822152700709388 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.517371601263028 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_16' AS feature, 0.20545950531959534 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18936505084019184 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6580113040411059 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.962079644472649 AS "Estimator") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_2_0" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_2_0, "DT_Output_8"."Estimator" AS "Estimator_2_0" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6569892168045044) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= 0.20678597688674927) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.08070191740989685) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.20862963795661926) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6569892168045044 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00016473963808918412 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_19' AS feature, 0.20678597688674927 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1676527674738575 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.956880876242247 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3656699229142161 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_18' AS feature, -0.08070191740989685 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.12168776202949882 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anoova_9' AS feature, -0.20862963795661926 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2556739386877787 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6164451044077461 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.17998544992727544 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1280586823781747 AS "Estimator") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_2_1" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_2_1, "DT_Output_9"."Estimator" AS "Estimator_2_1" 
FROM "DT_Output_9"), 
"DT_node_lookup_10" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.16634733974933624) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.3347831964492798) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.13248619437217712) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= -0.48111027479171753) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.158769428730011) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_10" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.16634733974933624 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.005086342231427437 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_12' AS feature, -0.3347831964492798 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1646503965242798 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5438533764105816 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'anoova_5' AS feature, -0.13248619437217712 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.31131785903276565 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3757390872172564 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5825510744877134 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_13' AS feature, -0.48111027479171753 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1677747165858292 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.37214429358598416 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anoova_18' AS feature, -0.158769428730011 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20576506740388492 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9350998834189409 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9548712915889677 AS "Estimator") AS "Values"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", "DT_node_lookup_10".node_id_2 AS node_id_2, "DT_node_data_10".node_id AS node_id, "DT_node_data_10".feature AS feature, "DT_node_data_10".threshold AS threshold, "DT_node_data_10".count AS count, "DT_node_data_10".depth AS depth, "DT_node_data_10".parent_id AS parent_id, "DT_node_data_10"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_10" LEFT OUTER JOIN "DT_node_data_10" ON "DT_node_lookup_10".node_id_2 = "DT_node_data_10".node_id), 
"RF_Tree_2_2" AS 
(SELECT "DT_Output_10"."KEY" AS join_key_2_2, "DT_Output_10"."Estimator" AS "Estimator_2_2" 
FROM "DT_Output_10"), 
"DT_node_lookup_11" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.8042873740196228) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.0376558303833008) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= -0.16417405009269714) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.25756585597991943) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_11" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -0.8042873740196228 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0004493415283318461 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 1.0376558303833008 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26456482884670024 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.36811699618890664 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6783548965521595 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_17' AS feature, -0.16417405009269714 AS threshold, 63 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1546661034046781 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3062853783985779 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_12' AS feature, -0.25756585597991943 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21873667839815378 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9869608863167774 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9424110417824113 AS "Estimator") AS "Values"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", "DT_node_lookup_11".node_id_2 AS node_id_2, "DT_node_data_11".node_id AS node_id, "DT_node_data_11".feature AS feature, "DT_node_data_11".threshold AS threshold, "DT_node_data_11".count AS count, "DT_node_data_11".depth AS depth, "DT_node_data_11".parent_id AS parent_id, "DT_node_data_11"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_11" LEFT OUTER JOIN "DT_node_data_11" ON "DT_node_lookup_11".node_id_2 = "DT_node_data_11".node_id), 
"RF_Tree_2_3" AS 
(SELECT "DT_Output_11"."KEY" AS join_key_2_3, "DT_Output_11"."Estimator" AS "Estimator_2_3" 
FROM "DT_Output_11"), 
"RF_Join_CTE_2" AS 
(SELECT "RF_Tree_2_0".join_key_2_0 AS join_key_2_0, "RF_Tree_2_0"."Estimator_2_0" AS "Estimator_2_0", "RF_Tree_2_1".join_key_2_1 AS join_key_2_1, "RF_Tree_2_1"."Estimator_2_1" AS "Estimator_2_1", "RF_Tree_2_2".join_key_2_2 AS join_key_2_2, "RF_Tree_2_2"."Estimator_2_2" AS "Estimator_2_2", "RF_Tree_2_3".join_key_2_3 AS join_key_2_3, "RF_Tree_2_3"."Estimator_2_3" AS "Estimator_2_3" 
FROM "RF_Tree_2_0" LEFT OUTER JOIN "RF_Tree_2_1" ON "RF_Tree_2_0".join_key_2_0 = "RF_Tree_2_1".join_key_2_1 LEFT OUTER JOIN "RF_Tree_2_2" ON "RF_Tree_2_2".join_key_2_2 = "RF_Tree_2_1".join_key_2_1 LEFT OUTER JOIN "RF_Tree_2_3" ON "RF_Tree_2_3".join_key_2_3 = "RF_Tree_2_2".join_key_2_2), 
"DT_node_lookup_12" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.4098530411720276) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.26341670751571655) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.0740903839468956) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_12" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_16' AS feature, -0.4098530411720276 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.004600149007978323 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6822146888373449 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anoova_11' AS feature, 0.26341670751571655 AS threshold, 71 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.08317159869931222 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'anoova_5' AS feature, 0.0740903839468956 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.008480837363940768 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.45867871914194536 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5683291348437236 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9370825664427456 AS "Estimator") AS "Values"), 
"DT_Output_12" AS 
(SELECT "DT_node_lookup_12"."KEY" AS "KEY", "DT_node_lookup_12".node_id_2 AS node_id_2, "DT_node_data_12".node_id AS node_id, "DT_node_data_12".feature AS feature, "DT_node_data_12".threshold AS threshold, "DT_node_data_12".count AS count, "DT_node_data_12".depth AS depth, "DT_node_data_12".parent_id AS parent_id, "DT_node_data_12"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_12" LEFT OUTER JOIN "DT_node_data_12" ON "DT_node_lookup_12".node_id_2 = "DT_node_data_12".node_id), 
"RF_Tree_3_0" AS 
(SELECT "DT_Output_12"."KEY" AS join_key_3_0, "DT_Output_12"."Estimator" AS "Estimator_3_0" 
FROM "DT_Output_12"), 
"DT_node_lookup_13" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6569892168045044) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= 0.20678597688674927) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= 0.3320809006690979) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= -0.08405770361423492) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_13" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6569892168045044 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00029717584393059826 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_19' AS feature, 0.20678597688674927 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15289712812097944 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9360707364863106 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.337631136137699 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_18' AS feature, 0.3320809006690979 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.11123098216334822 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anoova_13' AS feature, -0.08405770361423492 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.20374803838699113 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2822253134757753 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2288199354368396 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3281473525628928 AS "Estimator") AS "Values"), 
"DT_Output_13" AS 
(SELECT "DT_node_lookup_13"."KEY" AS "KEY", "DT_node_lookup_13".node_id_2 AS node_id_2, "DT_node_data_13".node_id AS node_id, "DT_node_data_13".feature AS feature, "DT_node_data_13".threshold AS threshold, "DT_node_data_13".count AS count, "DT_node_data_13".depth AS depth, "DT_node_data_13".parent_id AS parent_id, "DT_node_data_13"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_13" LEFT OUTER JOIN "DT_node_data_13" ON "DT_node_lookup_13".node_id_2 = "DT_node_data_13".node_id), 
"RF_Tree_3_1" AS 
(SELECT "DT_Output_13"."KEY" AS join_key_3_1, "DT_Output_13"."Estimator" AS "Estimator_3_1" 
FROM "DT_Output_13"), 
"DT_node_lookup_14" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.16634733974933624) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.41229838132858276) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_13 <= -0.25230222940444946) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.4529881179332733) THEN 7 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_18 <= -0.1075621098279953) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_14" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, 0.16634733974933624 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.003778936426524303 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, -0.41229838132858276 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14656667843412402 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2562184524898061 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'anoova_13' AS feature, -0.25230222940444946 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.02224526788964516 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.497646934725607 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7474151072788053 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_14' AS feature, -0.4529881179332733 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1509077840817087 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3581936831590292 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'anoova_18' AS feature, -0.1075621098279953 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.188149713299229 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9098222173239159 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9412032359903469 AS "Estimator") AS "Values"), 
"DT_Output_14" AS 
(SELECT "DT_node_lookup_14"."KEY" AS "KEY", "DT_node_lookup_14".node_id_2 AS node_id_2, "DT_node_data_14".node_id AS node_id, "DT_node_data_14".feature AS feature, "DT_node_data_14".threshold AS threshold, "DT_node_data_14".count AS count, "DT_node_data_14".depth AS depth, "DT_node_data_14".parent_id AS parent_id, "DT_node_data_14"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_14" LEFT OUTER JOIN "DT_node_data_14" ON "DT_node_lookup_14".node_id_2 = "DT_node_data_14".node_id), 
"RF_Tree_3_2" AS 
(SELECT "DT_Output_14"."KEY" AS join_key_3_2, "DT_Output_14"."Estimator" AS "Estimator_3_2" 
FROM "DT_Output_14"), 
"DT_node_lookup_15" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.9380051493644714) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.0376558303833008) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= -0.16417405009269714) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.25756585597991943) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_15" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -0.9380051493644714 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0006619753670116776 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 1.0376558303833008 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26020854443703056 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35784039075928115 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.47657257728505 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_17' AS feature, -0.16417405009269714 AS threshold, 66 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.133043832941786 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19646072185349947 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_12' AS feature, -0.25756585597991943 AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20273903186834233 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.964227672988165 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9295448308852111 AS "Estimator") AS "Values"), 
"DT_Output_15" AS 
(SELECT "DT_node_lookup_15"."KEY" AS "KEY", "DT_node_lookup_15".node_id_2 AS node_id_2, "DT_node_data_15".node_id AS node_id, "DT_node_data_15".feature AS feature, "DT_node_data_15".threshold AS threshold, "DT_node_data_15".count AS count, "DT_node_data_15".depth AS depth, "DT_node_data_15".parent_id AS parent_id, "DT_node_data_15"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_15" LEFT OUTER JOIN "DT_node_data_15" ON "DT_node_lookup_15".node_id_2 = "DT_node_data_15".node_id), 
"RF_Tree_3_3" AS 
(SELECT "DT_Output_15"."KEY" AS join_key_3_3, "DT_Output_15"."Estimator" AS "Estimator_3_3" 
FROM "DT_Output_15"), 
"RF_Join_CTE_3" AS 
(SELECT "RF_Tree_3_0".join_key_3_0 AS join_key_3_0, "RF_Tree_3_0"."Estimator_3_0" AS "Estimator_3_0", "RF_Tree_3_1".join_key_3_1 AS join_key_3_1, "RF_Tree_3_1"."Estimator_3_1" AS "Estimator_3_1", "RF_Tree_3_2".join_key_3_2 AS join_key_3_2, "RF_Tree_3_2"."Estimator_3_2" AS "Estimator_3_2", "RF_Tree_3_3".join_key_3_3 AS join_key_3_3, "RF_Tree_3_3"."Estimator_3_3" AS "Estimator_3_3" 
FROM "RF_Tree_3_0" LEFT OUTER JOIN "RF_Tree_3_1" ON "RF_Tree_3_0".join_key_3_0 = "RF_Tree_3_1".join_key_3_1 LEFT OUTER JOIN "RF_Tree_3_2" ON "RF_Tree_3_2".join_key_3_2 = "RF_Tree_3_1".join_key_3_1 LEFT OUTER JOIN "RF_Tree_3_3" ON "RF_Tree_3_3".join_key_3_3 = "RF_Tree_3_2".join_key_3_2), 
"DT_node_lookup_16" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.8111475706100464) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= -0.6170735359191895) THEN 3 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_15 <= 0.09905708581209183) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_16" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_16' AS feature, -0.8111475706100464 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0037797916190706314 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9039448435632359 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anoova_6' AS feature, -0.6170735359191895 AS threshold, 85 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.051311763793912175 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.40412828683589197 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_15' AS feature, 0.09905708581209183 AS threshold, 60 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.11125286711459072 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8433925655179307 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0786580239152699 AS "Estimator") AS "Values"), 
"DT_Output_16" AS 
(SELECT "DT_node_lookup_16"."KEY" AS "KEY", "DT_node_lookup_16".node_id_2 AS node_id_2, "DT_node_data_16".node_id AS node_id, "DT_node_data_16".feature AS feature, "DT_node_data_16".threshold AS threshold, "DT_node_data_16".count AS count, "DT_node_data_16".depth AS depth, "DT_node_data_16".parent_id AS parent_id, "DT_node_data_16"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_16" LEFT OUTER JOIN "DT_node_data_16" ON "DT_node_lookup_16".node_id_2 = "DT_node_data_16".node_id), 
"RF_Tree_4_0" AS 
(SELECT "DT_Output_16"."KEY" AS join_key_4_0, "DT_Output_16"."Estimator" AS "Estimator_4_0" 
FROM "DT_Output_16"), 
"DT_node_lookup_17" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6569892168045044) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.43848317861557007) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.14951573312282562) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.11143826693296432) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_17" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6569892168045044 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0003637002233562614 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_10' AS feature, -0.43848317861557007 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.13943075265631025 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.28599162279104645 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9227571058533766 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_9' AS feature, -0.14951573312282562 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.10159416610173548 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8670672561810251 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_10' AS feature, -0.11143826693296432 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.020633796515450904 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6146780591700699 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7810765778292468 AS "Estimator") AS "Values"), 
"DT_Output_17" AS 
(SELECT "DT_node_lookup_17"."KEY" AS "KEY", "DT_node_lookup_17".node_id_2 AS node_id_2, "DT_node_data_17".node_id AS node_id, "DT_node_data_17".feature AS feature, "DT_node_data_17".threshold AS threshold, "DT_node_data_17".count AS count, "DT_node_data_17".depth AS depth, "DT_node_data_17".parent_id AS parent_id, "DT_node_data_17"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_17" LEFT OUTER JOIN "DT_node_data_17" ON "DT_node_lookup_17".node_id_2 = "DT_node_data_17".node_id), 
"RF_Tree_4_1" AS 
(SELECT "DT_Output_17"."KEY" AS join_key_4_1, "DT_Output_17"."Estimator" AS "Estimator_4_1" 
FROM "DT_Output_17"), 
"DT_node_lookup_18" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6569892168045044) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.2659720182418823) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.2863211631774902) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= 0.0871063694357872) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_18" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6569892168045044 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.002287399655881383 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, -0.2659720182418823 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15959228856914634 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2474149491076931 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12337199544612325 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, 1.2863211631774902 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.11162303714337954 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anoova_11' AS feature, 0.0871063694357872 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16272274120221122 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.931961406424206 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.601933174527718 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15183128075452124 AS "Estimator") AS "Values"), 
"DT_Output_18" AS 
(SELECT "DT_node_lookup_18"."KEY" AS "KEY", "DT_node_lookup_18".node_id_2 AS node_id_2, "DT_node_data_18".node_id AS node_id, "DT_node_data_18".feature AS feature, "DT_node_data_18".threshold AS threshold, "DT_node_data_18".count AS count, "DT_node_data_18".depth AS depth, "DT_node_data_18".parent_id AS parent_id, "DT_node_data_18"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_18" LEFT OUTER JOIN "DT_node_data_18" ON "DT_node_lookup_18".node_id_2 = "DT_node_data_18".node_id), 
"RF_Tree_4_2" AS 
(SELECT "DT_Output_18"."KEY" AS join_key_4_2, "DT_Output_18"."Estimator" AS "Estimator_4_2" 
FROM "DT_Output_18"), 
"DT_node_lookup_19" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.8042873740196228) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.0376558303833008) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.41926097869873047) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= -0.21285706758499146) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_19" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -0.8042873740196228 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.001083887827551109 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 1.0376558303833008 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22584691920537853 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.32055108917765873 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3229989547052667 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_12' AS feature, -0.41926097869873047 AS threshold, 63 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.13091979726736336 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17924031457124773 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_17' AS feature, -0.21285706758499146 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18319489517870846 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9376111841248371 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9088665186956509 AS "Estimator") AS "Values"), 
"DT_Output_19" AS 
(SELECT "DT_node_lookup_19"."KEY" AS "KEY", "DT_node_lookup_19".node_id_2 AS node_id_2, "DT_node_data_19".node_id AS node_id, "DT_node_data_19".feature AS feature, "DT_node_data_19".threshold AS threshold, "DT_node_data_19".count AS count, "DT_node_data_19".depth AS depth, "DT_node_data_19".parent_id AS parent_id, "DT_node_data_19"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_19" LEFT OUTER JOIN "DT_node_data_19" ON "DT_node_lookup_19".node_id_2 = "DT_node_data_19".node_id), 
"RF_Tree_4_3" AS 
(SELECT "DT_Output_19"."KEY" AS join_key_4_3, "DT_Output_19"."Estimator" AS "Estimator_4_3" 
FROM "DT_Output_19"), 
"RF_Join_CTE_4" AS 
(SELECT "RF_Tree_4_0".join_key_4_0 AS join_key_4_0, "RF_Tree_4_0"."Estimator_4_0" AS "Estimator_4_0", "RF_Tree_4_1".join_key_4_1 AS join_key_4_1, "RF_Tree_4_1"."Estimator_4_1" AS "Estimator_4_1", "RF_Tree_4_2".join_key_4_2 AS join_key_4_2, "RF_Tree_4_2"."Estimator_4_2" AS "Estimator_4_2", "RF_Tree_4_3".join_key_4_3 AS join_key_4_3, "RF_Tree_4_3"."Estimator_4_3" AS "Estimator_4_3" 
FROM "RF_Tree_4_0" LEFT OUTER JOIN "RF_Tree_4_1" ON "RF_Tree_4_0".join_key_4_0 = "RF_Tree_4_1".join_key_4_1 LEFT OUTER JOIN "RF_Tree_4_2" ON "RF_Tree_4_2".join_key_4_2 = "RF_Tree_4_1".join_key_4_1 LEFT OUTER JOIN "RF_Tree_4_3" ON "RF_Tree_4_3".join_key_4_3 = "RF_Tree_4_2".join_key_4_2), 
"DT_node_lookup_20" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= -0.4098530411720276) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_11 <= -0.13068103790283203) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_16 <= 0.2811039984226227) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= 0.20360273122787476) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_20" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_16' AS feature, -0.4098530411720276 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.002585753536200079 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5763098274182001 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'anoova_11' AS feature, -0.13068103790283203 AS threshold, 71 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.07052358871739184 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'anoova_16' AS feature, 0.2811039984226227 AS threshold, 35 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.015698614929479212 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.38334463898617743 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6589576159588812 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_19' AS feature, 0.20360273122787476 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15435073115184983 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9256395702971499 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5716724446008067 AS "Estimator") AS "Values"), 
"DT_Output_20" AS 
(SELECT "DT_node_lookup_20"."KEY" AS "KEY", "DT_node_lookup_20".node_id_2 AS node_id_2, "DT_node_data_20".node_id AS node_id, "DT_node_data_20".feature AS feature, "DT_node_data_20".threshold AS threshold, "DT_node_data_20".count AS count, "DT_node_data_20".depth AS depth, "DT_node_data_20".parent_id AS parent_id, "DT_node_data_20"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_20" LEFT OUTER JOIN "DT_node_data_20" ON "DT_node_lookup_20".node_id_2 = "DT_node_data_20".node_id), 
"RF_Tree_5_0" AS 
(SELECT "DT_Output_20"."KEY" AS join_key_5_0, "DT_Output_20"."Estimator" AS "Estimator_5_0" 
FROM "DT_Output_20"), 
"DT_node_lookup_21" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -0.6569892168045044) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= -0.2796052098274231) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.14951573312282562) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= -0.11143826693296432) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_21" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -0.6569892168045044 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00029691159183383055 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_8' AS feature, -0.2796052098274231 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12647139308284444 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2759566908837878 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9081486810505954 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_9' AS feature, -0.14951573312282562 AS threshold, 58 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09209464945970429 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.774970029010945 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_10' AS feature, -0.11143826693296432 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.021128238674804685 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.53061914617714 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7486707200327581 AS "Estimator") AS "Values"), 
"DT_Output_21" AS 
(SELECT "DT_node_lookup_21"."KEY" AS "KEY", "DT_node_lookup_21".node_id_2 AS node_id_2, "DT_node_data_21".node_id AS node_id, "DT_node_data_21".feature AS feature, "DT_node_data_21".threshold AS threshold, "DT_node_data_21".count AS count, "DT_node_data_21".depth AS depth, "DT_node_data_21".parent_id AS parent_id, "DT_node_data_21"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_21" LEFT OUTER JOIN "DT_node_data_21" ON "DT_node_lookup_21".node_id_2 = "DT_node_data_21".node_id), 
"RF_Tree_5_1" AS 
(SELECT "DT_Output_21"."KEY" AS join_key_5_1, "DT_Output_21"."Estimator" AS "Estimator_5_1" 
FROM "DT_Output_21"), 
"DT_node_lookup_22" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.0778999328613281) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= 0.0038310177624225616) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.364828109741211) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= 0.9397132396697998) THEN 6 ELSE 7 END ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_22" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -1.0778999328613281 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0008529736223577045 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_12' AS feature, 0.0038310177624225616 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.17630166304036296 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.08559763855287379 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.1124785449416545 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, 1.364828109741211 AS threshold, 68 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.08171111551552711 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'anoova_5' AS feature, 0.9397132396697998 AS threshold, 51 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15504056004154557 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9554896605862179 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3631660605991399 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5515669692600591 AS "Estimator") AS "Values"), 
"DT_Output_22" AS 
(SELECT "DT_node_lookup_22"."KEY" AS "KEY", "DT_node_lookup_22".node_id_2 AS node_id_2, "DT_node_data_22".node_id AS node_id, "DT_node_data_22".feature AS feature, "DT_node_data_22".threshold AS threshold, "DT_node_data_22".count AS count, "DT_node_data_22".depth AS depth, "DT_node_data_22".parent_id AS parent_id, "DT_node_data_22"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_22" LEFT OUTER JOIN "DT_node_data_22" ON "DT_node_lookup_22".node_id_2 = "DT_node_data_22".node_id), 
"RF_Tree_5_2" AS 
(SELECT "DT_Output_22"."KEY" AS join_key_5_2, "DT_Output_22"."Estimator" AS "Estimator_5_2" 
FROM "DT_Output_22"), 
"DT_node_lookup_23" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -0.8042873740196228) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 1.0376558303833008) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_14 <= -0.4968169629573822) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_7 <= -0.26919081807136536) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_23" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -0.8042873740196228 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0013990589563883638 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'anoova_4' AS feature, 1.0376558303833008 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.20884500919426266 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.29858016033552875 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2038769594614485 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'anoova_14' AS feature, -0.4968169629573822 AS threshold, 63 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12043427689760128 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.052359184500165884 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'anoova_7' AS feature, -0.26919081807136536 AS threshold, 46 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.161069634002211 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5729705567883401 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9252924060575722 AS "Estimator") AS "Values"), 
"DT_Output_23" AS 
(SELECT "DT_node_lookup_23"."KEY" AS "KEY", "DT_node_lookup_23".node_id_2 AS node_id_2, "DT_node_data_23".node_id AS node_id, "DT_node_data_23".feature AS feature, "DT_node_data_23".threshold AS threshold, "DT_node_data_23".count AS count, "DT_node_data_23".depth AS depth, "DT_node_data_23".parent_id AS parent_id, "DT_node_data_23"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_23" LEFT OUTER JOIN "DT_node_data_23" ON "DT_node_lookup_23".node_id_2 = "DT_node_data_23".node_id), 
"RF_Tree_5_3" AS 
(SELECT "DT_Output_23"."KEY" AS join_key_5_3, "DT_Output_23"."Estimator" AS "Estimator_5_3" 
FROM "DT_Output_23"), 
"RF_Join_CTE_5" AS 
(SELECT "RF_Tree_5_0".join_key_5_0 AS join_key_5_0, "RF_Tree_5_0"."Estimator_5_0" AS "Estimator_5_0", "RF_Tree_5_1".join_key_5_1 AS join_key_5_1, "RF_Tree_5_1"."Estimator_5_1" AS "Estimator_5_1", "RF_Tree_5_2".join_key_5_2 AS join_key_5_2, "RF_Tree_5_2"."Estimator_5_2" AS "Estimator_5_2", "RF_Tree_5_3".join_key_5_3 AS join_key_5_3, "RF_Tree_5_3"."Estimator_5_3" AS "Estimator_5_3" 
FROM "RF_Tree_5_0" LEFT OUTER JOIN "RF_Tree_5_1" ON "RF_Tree_5_0".join_key_5_0 = "RF_Tree_5_1".join_key_5_1 LEFT OUTER JOIN "RF_Tree_5_2" ON "RF_Tree_5_2".join_key_5_2 = "RF_Tree_5_1".join_key_5_1 LEFT OUTER JOIN "RF_Tree_5_3" ON "RF_Tree_5_3".join_key_5_3 = "RF_Tree_5_2".join_key_5_2), 
"RF_Join_CTE" AS 
(SELECT "RF_Join_CTE_0".join_key_0_0 AS join_key_0_0, "RF_Join_CTE_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Join_CTE_0".join_key_0_1 AS join_key_0_1, "RF_Join_CTE_0"."Estimator_0_1" AS "Estimator_0_1", "RF_Join_CTE_0".join_key_0_2 AS join_key_0_2, "RF_Join_CTE_0"."Estimator_0_2" AS "Estimator_0_2", "RF_Join_CTE_0".join_key_0_3 AS join_key_0_3, "RF_Join_CTE_0"."Estimator_0_3" AS "Estimator_0_3", "RF_Join_CTE_1".join_key_1_0 AS join_key_1_0, "RF_Join_CTE_1"."Estimator_1_0" AS "Estimator_1_0", "RF_Join_CTE_1".join_key_1_1 AS join_key_1_1, "RF_Join_CTE_1"."Estimator_1_1" AS "Estimator_1_1", "RF_Join_CTE_1".join_key_1_2 AS join_key_1_2, "RF_Join_CTE_1"."Estimator_1_2" AS "Estimator_1_2", "RF_Join_CTE_1".join_key_1_3 AS join_key_1_3, "RF_Join_CTE_1"."Estimator_1_3" AS "Estimator_1_3", "RF_Join_CTE_2".join_key_2_0 AS join_key_2_0, "RF_Join_CTE_2"."Estimator_2_0" AS "Estimator_2_0", "RF_Join_CTE_2".join_key_2_1 AS join_key_2_1, "RF_Join_CTE_2"."Estimator_2_1" AS "Estimator_2_1", "RF_Join_CTE_2".join_key_2_2 AS join_key_2_2, "RF_Join_CTE_2"."Estimator_2_2" AS "Estimator_2_2", "RF_Join_CTE_2".join_key_2_3 AS join_key_2_3, "RF_Join_CTE_2"."Estimator_2_3" AS "Estimator_2_3", "RF_Join_CTE_3".join_key_3_0 AS join_key_3_0, "RF_Join_CTE_3"."Estimator_3_0" AS "Estimator_3_0", "RF_Join_CTE_3".join_key_3_1 AS join_key_3_1, "RF_Join_CTE_3"."Estimator_3_1" AS "Estimator_3_1", "RF_Join_CTE_3".join_key_3_2 AS join_key_3_2, "RF_Join_CTE_3"."Estimator_3_2" AS "Estimator_3_2", "RF_Join_CTE_3".join_key_3_3 AS join_key_3_3, "RF_Join_CTE_3"."Estimator_3_3" AS "Estimator_3_3", "RF_Join_CTE_4".join_key_4_0 AS join_key_4_0, "RF_Join_CTE_4"."Estimator_4_0" AS "Estimator_4_0", "RF_Join_CTE_4".join_key_4_1 AS join_key_4_1, "RF_Join_CTE_4"."Estimator_4_1" AS "Estimator_4_1", "RF_Join_CTE_4".join_key_4_2 AS join_key_4_2, "RF_Join_CTE_4"."Estimator_4_2" AS "Estimator_4_2", "RF_Join_CTE_4".join_key_4_3 AS join_key_4_3, "RF_Join_CTE_4"."Estimator_4_3" AS "Estimator_4_3", "RF_Join_CTE_5".join_key_5_0 AS join_key_5_0, "RF_Join_CTE_5"."Estimator_5_0" AS "Estimator_5_0", "RF_Join_CTE_5".join_key_5_1 AS join_key_5_1, "RF_Join_CTE_5"."Estimator_5_1" AS "Estimator_5_1", "RF_Join_CTE_5".join_key_5_2 AS join_key_5_2, "RF_Join_CTE_5"."Estimator_5_2" AS "Estimator_5_2", "RF_Join_CTE_5".join_key_5_3 AS join_key_5_3, "RF_Join_CTE_5"."Estimator_5_3" AS "Estimator_5_3" 
FROM "RF_Join_CTE_0" LEFT OUTER JOIN "RF_Join_CTE_1" ON "RF_Join_CTE_0".join_key_0_0 = "RF_Join_CTE_1".join_key_1_0 LEFT OUTER JOIN "RF_Join_CTE_2" ON "RF_Join_CTE_2".join_key_2_0 = "RF_Join_CTE_1".join_key_1_0 LEFT OUTER JOIN "RF_Join_CTE_3" ON "RF_Join_CTE_3".join_key_3_0 = "RF_Join_CTE_2".join_key_2_0 LEFT OUTER JOIN "RF_Join_CTE_4" ON "RF_Join_CTE_4".join_key_4_0 = "RF_Join_CTE_3".join_key_3_0 LEFT OUTER JOIN "RF_Join_CTE_5" ON "RF_Join_CTE_5".join_key_5_0 = "RF_Join_CTE_4".join_key_4_0), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0_0 AS "KEY", 0.24 + 0.1 * "RF_Join_CTE"."Estimator_0_0" + 0.1 * "RF_Join_CTE"."Estimator_1_0" + 0.1 * "RF_Join_CTE"."Estimator_2_0" + 0.1 * "RF_Join_CTE"."Estimator_3_0" + 0.1 * "RF_Join_CTE"."Estimator_4_0" + 0.1 * "RF_Join_CTE"."Estimator_5_0" AS "Score_0", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0", 0.25 + 0.1 * "RF_Join_CTE"."Estimator_0_1" + 0.1 * "RF_Join_CTE"."Estimator_1_1" + 0.1 * "RF_Join_CTE"."Estimator_2_1" + 0.1 * "RF_Join_CTE"."Estimator_3_1" + 0.1 * "RF_Join_CTE"."Estimator_4_1" + 0.1 * "RF_Join_CTE"."Estimator_5_1" AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1", 0.26 + 0.1 * "RF_Join_CTE"."Estimator_0_2" + 0.1 * "RF_Join_CTE"."Estimator_1_2" + 0.1 * "RF_Join_CTE"."Estimator_2_2" + 0.1 * "RF_Join_CTE"."Estimator_3_2" + 0.1 * "RF_Join_CTE"."Estimator_4_2" + 0.1 * "RF_Join_CTE"."Estimator_5_2" AS "Score_2", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2", 0.25 + 0.1 * "RF_Join_CTE"."Estimator_0_3" + 0.1 * "RF_Join_CTE"."Estimator_1_3" + 0.1 * "RF_Join_CTE"."Estimator_2_3" + 0.1 * "RF_Join_CTE"."Estimator_3_3" + 0.1 * "RF_Join_CTE"."Estimator_4_3" + 0.1 * "RF_Join_CTE"."Estimator_5_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_3" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Score_3" AS "Score_3", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."Proba_3" AS "Proba_3", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", "RF_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1", exp(CASE WHEN (score_max."Score_2" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_2" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_2", exp(CASE WHEN (score_max."Score_3" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_3" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte