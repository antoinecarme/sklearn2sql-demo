-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", 0.08034818916096564 * "ADS"."Feature_0" + 0.30335852610684044 * "ADS"."Feature_1" + -0.5382382551021434 * "ADS"."Feature_2" + 0.042000525075292644 * "ADS"."Feature_3" + -0.09958808980572127 * "ADS"."Feature_4" + 0.15980424155978576 * "ADS"."Feature_5" + -0.03633694197471879 * "ADS"."Feature_6" + -0.07804403633422491 * "ADS"."Feature_7" + 0.06300860710467923 * "ADS"."Feature_8" + 0.3634085209008769 * "ADS"."Feature_9" + -0.0232401224187353 * "ADS"."Feature_10" + 0.27026248306629524 * "ADS"."Feature_11" + 0.07588358526206405 * "ADS"."Feature_12" + -0.38304731108618834 * "ADS"."Feature_13" + -0.40404069243331514 * "ADS"."Feature_14" + 0.20302353743604265 * "ADS"."Feature_15" + 0.19603540176500128 * "ADS"."Feature_16" + -0.5115741853989672 * "ADS"."Feature_17" + -0.05821533798469148 * "ADS"."Feature_18" + -0.19920370904380844 * "ADS"."Feature_19" + -2.30989092765 AS "Score_0", -0.0842728058703524 * "ADS"."Feature_0" + 0.08021105104194586 * "ADS"."Feature_1" + 0.007460098332794041 * "ADS"."Feature_2" + -0.06368427571860456 * "ADS"."Feature_3" + -0.09263812864301721 * "ADS"."Feature_4" + -0.08583844167883554 * "ADS"."Feature_5" + -0.0947353592438375 * "ADS"."Feature_6" + 0.08353599677980006 * "ADS"."Feature_7" + -0.011208123703306917 * "ADS"."Feature_8" + -0.40906321851099414 * "ADS"."Feature_9" + -0.3524975497871378 * "ADS"."Feature_10" + 0.01698500601162401 * "ADS"."Feature_11" + -0.19129062115847698 * "ADS"."Feature_12" + 0.06617068975299309 * "ADS"."Feature_13" + -0.03875313540648248 * "ADS"."Feature_14" + -0.01598791455150718 * "ADS"."Feature_15" + 0.03742859471832287 * "ADS"."Feature_16" + 0.04960916420056534 * "ADS"."Feature_17" + 0.16939456247503965 * "ADS"."Feature_18" + -0.11469811469860675 * "ADS"."Feature_19" + -1.51296471171 AS "Score_1", -0.04753238365785301 * "ADS"."Feature_0" + -0.13452533441782638 * "ADS"."Feature_1" + -0.11005397245030682 * "ADS"."Feature_2" + -0.4594421726131 * "ADS"."Feature_3" + -0.1808906447010497 * "ADS"."Feature_4" + 0.005591345063958947 * "ADS"."Feature_5" + -0.4728977464089561 * "ADS"."Feature_6" + -0.0801858870242496 * "ADS"."Feature_7" + 0.08220629053924519 * "ADS"."Feature_8" + 0.05813418050984806 * "ADS"."Feature_9" + 0.6293460100000032 * "ADS"."Feature_10" + -0.2443930546840868 * "ADS"."Feature_11" + 0.030693236512667338 * "ADS"."Feature_12" + 1.1266126963301306 * "ADS"."Feature_13" + 0.7997033496762874 * "ADS"."Feature_14" + -0.24083651765683387 * "ADS"."Feature_15" + 0.2072105103509172 * "ADS"."Feature_16" + 0.4553550427774706 * "ADS"."Feature_17" + 0.4676937982893723 * "ADS"."Feature_18" + 0.36750516394379384 * "ADS"."Feature_19" + -2.48084927509 AS "Score_2", 0.05145700036723983 * "ADS"."Feature_0" + -0.24904424273095987 * "ADS"."Feature_1" + 0.6408321292196562 * "ADS"."Feature_2" + 0.48112592325641207 * "ADS"."Feature_3" + 0.3731168631497882 * "ADS"."Feature_4" + -0.07955714494490912 * "ADS"."Feature_5" + 0.6039700476275125 * "ADS"."Feature_6" + 0.07469392657867442 * "ADS"."Feature_7" + -0.1340067739406175 * "ADS"."Feature_8" + -0.012479482899730665 * "ADS"."Feature_9" + -0.2536083377941303 * "ADS"."Feature_10" + -0.0428544343938323 * "ADS"."Feature_11" + 0.08471379938374562 * "ADS"."Feature_12" + -0.8097360749969358 * "ADS"."Feature_13" + -0.35690952183649005 * "ADS"."Feature_14" + 0.053800894772298505 * "ADS"."Feature_15" + -0.4406745068342414 * "ADS"."Feature_16" + 0.006609978420930879 * "ADS"."Feature_17" + -0.5788730227797207 * "ADS"."Feature_18" + -0.05360334020137879 * "ADS"."Feature_19" + -2.36873039133 AS "Score_3" 
FROM "INPUT_DATA" "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", (1.0 / (1.0 + exp(-linear_model_cte."Score_0"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_0", (1.0 / (1.0 + exp(-linear_model_cte."Score_1"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_1", (1.0 / (1.0 + exp(-linear_model_cte."Score_2"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_2", (1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte