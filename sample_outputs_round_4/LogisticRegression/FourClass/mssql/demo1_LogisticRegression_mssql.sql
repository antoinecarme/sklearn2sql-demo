-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT [ADS].[KEY] AS [KEY], -0.08853924370321786 * [ADS].[Feature_0] + -0.5490133471750333 * [ADS].[Feature_1] + 0.11774269819282045 * [ADS].[Feature_2] + -0.24929196168933093 * [ADS].[Feature_3] + -0.4629909158175839 * [ADS].[Feature_4] + 0.5551673871674201 * [ADS].[Feature_5] + -0.11622806071861658 * [ADS].[Feature_6] + 0.27621331004863453 * [ADS].[Feature_7] + 0.08773974693766715 * [ADS].[Feature_8] + 0.1539351968603184 * [ADS].[Feature_9] + -0.03065172838479943 * [ADS].[Feature_10] + -0.01006074825234129 * [ADS].[Feature_11] + 0.30816813133548937 * [ADS].[Feature_12] + 0.11504528653636005 * [ADS].[Feature_13] + 0.11624735616276813 * [ADS].[Feature_14] + -0.19987840749906455 * [ADS].[Feature_15] + -0.3907898275872212 * [ADS].[Feature_16] + -0.06990034422748687 * [ADS].[Feature_17] + -0.2458836441771727 * [ADS].[Feature_18] + 0.26328022188592715 * [ADS].[Feature_19] + -1.24337289291 AS [Score_0], 0.033975835566951385 * [ADS].[Feature_0] + 0.05387206847292395 * [ADS].[Feature_1] + 0.08693134417772871 * [ADS].[Feature_2] + 0.28648146474849184 * [ADS].[Feature_3] + -0.2053247817716667 * [ADS].[Feature_4] + -0.06781711654610804 * [ADS].[Feature_5] + 0.44282058266944535 * [ADS].[Feature_6] + -0.15810533055249743 * [ADS].[Feature_7] + -0.09936805098704268 * [ADS].[Feature_8] + -0.10862705083843159 * [ADS].[Feature_9] + -0.387723691727602 * [ADS].[Feature_10] + -0.19094861556028322 * [ADS].[Feature_11] + -0.1375930375043047 * [ADS].[Feature_12] + 0.017658825572025406 * [ADS].[Feature_13] + 0.05160027402569684 * [ADS].[Feature_14] + 0.22872148260501837 * [ADS].[Feature_15] + -0.6307468834732309 * [ADS].[Feature_16] + -0.14901573016819988 * [ADS].[Feature_17] + 0.08565237103321865 * [ADS].[Feature_18] + -0.204860984295684 * [ADS].[Feature_19] + -1.84653933714 AS [Score_1], -0.1161675234189835 * [ADS].[Feature_0] + 0.14711673875514314 * [ADS].[Feature_1] + -0.11328565008036731 * [ADS].[Feature_2] + -0.15885874498058083 * [ADS].[Feature_3] + 0.15778907381422855 * [ADS].[Feature_4] + -0.1779279940671425 * [ADS].[Feature_5] + -0.5604707665065355 * [ADS].[Feature_6] + -0.07081329914276382 * [ADS].[Feature_7] + -0.00439078551172044 * [ADS].[Feature_8] + -0.34157250653403837 * [ADS].[Feature_9] + 0.09459978704502443 * [ADS].[Feature_10] + 0.12049992552116795 * [ADS].[Feature_11] + -0.4400480851094002 * [ADS].[Feature_12] + -0.4635816209689824 * [ADS].[Feature_13] + -0.5223169905236069 * [ADS].[Feature_14] + -0.3175530638570425 * [ADS].[Feature_15] + 0.28880404287564826 * [ADS].[Feature_16] + 0.1966644214096555 * [ADS].[Feature_17] + 0.08632133573593236 * [ADS].[Feature_18] + 0.3664437256868251 * [ADS].[Feature_19] + -1.33734909994 AS [Score_2], 0.12419631331042881 * [ADS].[Feature_0] + 0.4435323171730662 * [ADS].[Feature_1] + -0.02623797594418643 * [ADS].[Feature_2] + 0.31619697795711627 * [ADS].[Feature_3] + 0.5867290177843628 * [ADS].[Feature_4] + -0.25508778148269384 * [ADS].[Feature_5] + 0.10450098592759106 * [ADS].[Feature_6] + -0.29275295482460767 * [ADS].[Feature_7] + 0.018722791129983346 * [ADS].[Feature_8] + 0.5961209902890813 * [ADS].[Feature_9] + 0.46991130750500176 * [ADS].[Feature_10] + -0.053019120992410566 * [ADS].[Feature_11] + 0.24338006044664945 * [ADS].[Feature_12] + 0.44968324556505873 * [ADS].[Feature_13] + 0.27871097017577495 * [ADS].[Feature_14] + 0.06211824078351175 * [ADS].[Feature_15] + 0.7695013328251222 * [ADS].[Feature_16] + 0.05881106479815089 * [ADS].[Feature_17] + 0.09975957618544427 * [ADS].[Feature_18] + -0.29793565404126937 * [ADS].[Feature_19] + -1.3961245932 AS [Score_3] 
FROM [INPUT_DATA] AS [ADS]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], linear_model_cte.[Score_3] AS [Score_3], (1.0 / (1.0 + exp(-linear_model_cte.[Score_0]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_0], (1.0 / (1.0 + exp(-linear_model_cte.[Score_1]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_1], (1.0 / (1.0 + exp(-linear_model_cte.[Score_2]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_2], (1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max.[max_LogProba] = score_class_union.[LogProba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max.[max_Proba] = score_class_union.[Proba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max.[max_Score] = score_class_union.[Score] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score] 
FROM score_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte