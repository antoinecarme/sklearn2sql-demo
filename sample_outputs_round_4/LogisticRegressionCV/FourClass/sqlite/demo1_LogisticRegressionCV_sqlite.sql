-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", 0.002111692408237739 * "ADS"."Feature_0" + -0.0002420265197033846 * "ADS"."Feature_1" + -0.00016606657431796507 * "ADS"."Feature_2" + -0.0004063660312191229 * "ADS"."Feature_3" + -0.00036496562227408363 * "ADS"."Feature_4" + -0.0004688096575551281 * "ADS"."Feature_5" + 0.0001619218192109271 * "ADS"."Feature_6" + -0.00022662611802813288 * "ADS"."Feature_7" + 0.0014250793052021156 * "ADS"."Feature_8" + -0.00047735235977862346 * "ADS"."Feature_9" + -1.5129650278994125e-05 * "ADS"."Feature_10" + 8.287162501338126e-05 * "ADS"."Feature_11" + 0.0007292837876329257 * "ADS"."Feature_12" + 7.047092643431471e-05 * "ADS"."Feature_13" + -0.0009634653729434653 * "ADS"."Feature_14" + 8.743530908611702e-05 * "ADS"."Feature_15" + -0.002488116351101761 * "ADS"."Feature_16" + 0.0003883626084583237 * "ADS"."Feature_17" + 0.0011969312497918238 * "ADS"."Feature_18" + -0.0004307716155936581 * "ADS"."Feature_19" + -1.09940784328 AS "Score_0", -0.0029754184167714985 * "ADS"."Feature_0" + 0.0005437998685051307 * "ADS"."Feature_1" + 0.0004211357139049463 * "ADS"."Feature_2" + -0.00016284247214142224 * "ADS"."Feature_3" + 0.00019732934203516042 * "ADS"."Feature_4" + 0.00024546578466834825 * "ADS"."Feature_5" + -0.0005202129981123836 * "ADS"."Feature_6" + 0.00039379152816831935 * "ADS"."Feature_7" + 0.001347890376358065 * "ADS"."Feature_8" + -8.037846355036001e-05 * "ADS"."Feature_9" + -0.00016799837779916095 * "ADS"."Feature_10" + 0.001787578924071591 * "ADS"."Feature_11" + -0.00036996853189660026 * "ADS"."Feature_12" + 0.00015202691080709797 * "ADS"."Feature_13" + -0.0017428331607566106 * "ADS"."Feature_14" + -0.0001793378470086245 * "ADS"."Feature_15" + 0.0011483367038057745 * "ADS"."Feature_16" + 0.0006903096732662745 * "ADS"."Feature_17" + -0.0013667759205132088 * "ADS"."Feature_18" + 9.966597249552884e-05 * "ADS"."Feature_19" + -1.09869785652 AS "Score_1", 0.13893542411891888 * "ADS"."Feature_0" + -0.0026594949404937385 * "ADS"."Feature_1" + -0.16848751082721053 * "ADS"."Feature_2" + 0.07791778838107431 * "ADS"."Feature_3" + 0.14557187272409558 * "ADS"."Feature_4" + 0.07356523814692674 * "ADS"."Feature_5" + 0.10968618325134633 * "ADS"."Feature_6" + 0.12933465279662903 * "ADS"."Feature_7" + -0.21687727029025305 * "ADS"."Feature_8" + 0.01207621061554349 * "ADS"."Feature_9" + -0.1352905791620515 * "ADS"."Feature_10" + -0.049977076202393195 * "ADS"."Feature_11" + -0.08037140206788108 * "ADS"."Feature_12" + -0.08252377732558516 * "ADS"."Feature_13" + 0.05155046574257017 * "ADS"."Feature_14" + -0.042237265770787326 * "ADS"."Feature_15" + -0.22534059641838758 * "ADS"."Feature_16" + -0.13232047281295847 * "ADS"."Feature_17" + 0.07487250372863986 * "ADS"."Feature_18" + 0.07480036267402466 * "ADS"."Feature_19" + -1.14515111165 AS "Score_2", -0.0001825808376289515 * "ADS"."Feature_0" + -0.00013199985657055813 * "ADS"."Feature_1" + 0.0005627381707932271 * "ADS"."Feature_2" + 0.00023982938686953253 * "ADS"."Feature_3" + -0.000608747347618399 * "ADS"."Feature_4" + -9.646631869477997e-05 * "ADS"."Feature_5" + 1.1056298251499712e-05 * "ADS"."Feature_6" + -0.00045953499747417595 * "ADS"."Feature_7" + -0.0010414428817071154 * "ADS"."Feature_8" + 0.000532427880629806 * "ADS"."Feature_9" + 0.0008749091155923312 * "ADS"."Feature_10" + -0.0013021315892699575 * "ADS"."Feature_11" + -0.00014289312106586044 * "ADS"."Feature_12" + 5.960444189234584e-05 * "ADS"."Feature_13" + 0.0018804572621822276 * "ADS"."Feature_14" + 0.00025675860344308624 * "ADS"."Feature_15" + 0.002464018734493665 * "ADS"."Feature_16" + -0.0006356097347373814 * "ADS"."Feature_17" + -0.000401110051564014 * "ADS"."Feature_18" + 0.00011497730093927409 * "ADS"."Feature_19" + -1.0979939793 AS "Score_3" 
FROM "INPUT_DATA" AS "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", (1.0 / (1.0 + exp(-linear_model_cte."Score_0"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_0", (1.0 / (1.0 + exp(-linear_model_cte."Score_1"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_1", (1.0 / (1.0 + exp(-linear_model_cte."Score_2"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_2", (1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte