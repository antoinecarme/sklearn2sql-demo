-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT "ADS"."KEY" AS "KEY", -0.2970913999568789 * "ADS"."Feature_0" + 0.06525866866872482 * "ADS"."Feature_1" + 0.1737055646392652 * "ADS"."Feature_2" + -0.014657623586570006 * "ADS"."Feature_3" + 0.04322520423934404 * "ADS"."Feature_4" + -0.2007554145549469 * "ADS"."Feature_5" + 0.0848381650138015 * "ADS"."Feature_6" + -0.1622456690228276 * "ADS"."Feature_7" + -0.3330409383606814 * "ADS"."Feature_8" + -0.027094400032480866 * "ADS"."Feature_9" + 0.11587636827735195 * "ADS"."Feature_10" + -0.09602644139142921 * "ADS"."Feature_11" + 0.07916173230626593 * "ADS"."Feature_12" + 0.21355256383871446 * "ADS"."Feature_13" + -0.13137859929237541 * "ADS"."Feature_14" + -0.10633453967733286 * "ADS"."Feature_15" + -0.021569389142862338 * "ADS"."Feature_16" + -0.28741678522243763 * "ADS"."Feature_17" + -0.0602866570814899 * "ADS"."Feature_18" + -0.17374464840445525 * "ADS"."Feature_19" + -1.40195804133 AS "Score_0", 0.33843253084124464 * "ADS"."Feature_0" + -0.2949109230030168 * "ADS"."Feature_1" + 0.1472360915926475 * "ADS"."Feature_2" + -0.21873665699503267 * "ADS"."Feature_3" + -0.07342822752668228 * "ADS"."Feature_4" + 0.36662795046553015 * "ADS"."Feature_5" + -0.15259861122037638 * "ADS"."Feature_6" + 0.11589575251117923 * "ADS"."Feature_7" + 0.7725706648966284 * "ADS"."Feature_8" + -0.2361151560041892 * "ADS"."Feature_9" + -0.2372366526236034 * "ADS"."Feature_10" + -0.3088884210300824 * "ADS"."Feature_11" + -0.5162222711289762 * "ADS"."Feature_12" + 0.1803910958471941 * "ADS"."Feature_13" + 0.5367213778295052 * "ADS"."Feature_14" + -0.10287169789519005 * "ADS"."Feature_15" + 0.1515720684982663 * "ADS"."Feature_16" + -0.9592209892981081 * "ADS"."Feature_17" + 0.32944267148003586 * "ADS"."Feature_18" + 0.7180565092198997 * "ADS"."Feature_19" + -2.00685577927 AS "Score_1", 0.0770037880466709 * "ADS"."Feature_0" + 0.03551157392344906 * "ADS"."Feature_1" + 0.0022062602011630027 * "ADS"."Feature_2" + 0.07118555980573577 * "ADS"."Feature_3" + -0.10168931257659083 * "ADS"."Feature_4" + 0.24912484004882943 * "ADS"."Feature_5" + -0.18708827197691275 * "ADS"."Feature_6" + -0.02292091594100462 * "ADS"."Feature_7" + -0.16569380991122187 * "ADS"."Feature_8" + 0.03640105155267145 * "ADS"."Feature_9" + 0.03927093686133138 * "ADS"."Feature_10" + -0.01898457707800971 * "ADS"."Feature_11" + -0.009763032376922125 * "ADS"."Feature_12" + 0.04296916259417689 * "ADS"."Feature_13" + 0.012824650824154904 * "ADS"."Feature_14" + -0.021308036010676618 * "ADS"."Feature_15" + -0.36327276762685 * "ADS"."Feature_16" + 0.4482354803334087 * "ADS"."Feature_17" + -0.06277490860079145 * "ADS"."Feature_18" + -0.004394134089185246 * "ADS"."Feature_19" + -1.35117952513 AS "Score_2", 0.1498951607041793 * "ADS"."Feature_0" + -0.21572960009120173 * "ADS"."Feature_1" + -0.4810956535078188 * "ADS"."Feature_2" + 0.2403433244731522 * "ADS"."Feature_3" + 0.39878603836348525 * "ADS"."Feature_4" + -0.5297334270149953 * "ADS"."Feature_5" + 0.42484681935733015 * "ADS"."Feature_6" + 0.24018366606649222 * "ADS"."Feature_7" + -0.018579148425804114 * "ADS"."Feature_8" + 0.2119210500340845 * "ADS"."Feature_9" + -0.017576361141052817 * "ADS"."Feature_10" + 0.34529540533757414 * "ADS"."Feature_11" + 0.20293100481370735 * "ADS"."Feature_12" + -0.4296196158457306 * "ADS"."Feature_13" + -0.047822225746439004 * "ADS"."Feature_14" + 0.3746960692050142 * "ADS"."Feature_15" + 0.6572369162398142 * "ADS"."Feature_16" + 0.37221290617604796 * "ADS"."Feature_17" + 0.005284283446794227 * "ADS"."Feature_18" + -0.11347530714550876 * "ADS"."Feature_19" + -1.96896525112 AS "Score_3" 
FROM "INPUT_DATA" AS "ADS"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", (1.0 / (1.0 + exp(-linear_model_cte."Score_0"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_0", (1.0 / (1.0 + exp(-linear_model_cte."Score_1"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_1", (1.0 / (1.0 + exp(-linear_model_cte."Score_2"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_2", (1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte