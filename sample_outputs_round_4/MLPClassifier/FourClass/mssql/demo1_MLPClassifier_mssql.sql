-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [IL] AS 
(SELECT [ADS].[KEY] AS [KEY], [ADS].[Feature_0] AS [Feature_0], [ADS].[Feature_1] AS [Feature_1], [ADS].[Feature_2] AS [Feature_2], [ADS].[Feature_3] AS [Feature_3], [ADS].[Feature_4] AS [Feature_4], [ADS].[Feature_5] AS [Feature_5], [ADS].[Feature_6] AS [Feature_6], [ADS].[Feature_7] AS [Feature_7], [ADS].[Feature_8] AS [Feature_8], [ADS].[Feature_9] AS [Feature_9], [ADS].[Feature_10] AS [Feature_10], [ADS].[Feature_11] AS [Feature_11], [ADS].[Feature_12] AS [Feature_12], [ADS].[Feature_13] AS [Feature_13], [ADS].[Feature_14] AS [Feature_14], [ADS].[Feature_15] AS [Feature_15], [ADS].[Feature_16] AS [Feature_16], [ADS].[Feature_17] AS [Feature_17], [ADS].[Feature_18] AS [Feature_18], [ADS].[Feature_19] AS [Feature_19] 
FROM [INPUT_DATA] AS [ADS]), 
[HL_BA_1] AS 
(SELECT [IL].[KEY] AS [KEY], -0.0807802819502 * [IL].[Feature_0] + 0.281660264795 * [IL].[Feature_1] + -0.228770179994 * [IL].[Feature_2] + -0.241108017038 * [IL].[Feature_3] + -0.0290270254155 * [IL].[Feature_4] + -0.180290638503 * [IL].[Feature_5] + -0.00141443333756 * [IL].[Feature_6] + -0.0189109317618 * [IL].[Feature_7] + -0.284512927942 * [IL].[Feature_8] + 0.240771982039 * [IL].[Feature_9] + -0.346301223346 * [IL].[Feature_10] + 0.014799833894 * [IL].[Feature_11] + 0.100698420864 * [IL].[Feature_12] + -0.436179457166 * [IL].[Feature_13] + 0.188802424165 * [IL].[Feature_14] + 0.0534847353005 * [IL].[Feature_15] + 0.284878855763 * [IL].[Feature_16] + 0.159790686898 * [IL].[Feature_17] + 0.452942499221 * [IL].[Feature_18] + -0.203600108423 * [IL].[Feature_19] + 0.255137836317 AS [NEUR_1_1], 0.325096950444 * [IL].[Feature_0] + -0.154828151634 * [IL].[Feature_1] + 0.570267698946 * [IL].[Feature_2] + 0.305678675236 * [IL].[Feature_3] + 0.255101623372 * [IL].[Feature_4] + 0.146313688015 * [IL].[Feature_5] + -0.116663179417 * [IL].[Feature_6] + -0.111381469355 * [IL].[Feature_7] + -0.26369092598 * [IL].[Feature_8] + 0.251027092773 * [IL].[Feature_9] + -0.219728168059 * [IL].[Feature_10] + 0.356764434725 * [IL].[Feature_11] + -0.548688935488 * [IL].[Feature_12] + -0.137680713949 * [IL].[Feature_13] + -0.277328790961 * [IL].[Feature_14] + 0.119078949182 * [IL].[Feature_15] + -0.323839625641 * [IL].[Feature_16] + 0.000568558786817 * [IL].[Feature_17] + 0.101365915823 * [IL].[Feature_18] + -0.0117055470221 * [IL].[Feature_19] + 0.0168371817756 AS [NEUR_1_2], 0.243280287192 * [IL].[Feature_0] + 0.475583642551 * [IL].[Feature_1] + 0.110571458628 * [IL].[Feature_2] + -0.297870598287 * [IL].[Feature_3] + -0.273840177159 * [IL].[Feature_4] + 0.0609633667526 * [IL].[Feature_5] + 0.077484290757 * [IL].[Feature_6] + -0.0333597669075 * [IL].[Feature_7] + 0.106879435852 * [IL].[Feature_8] + 0.07732753605 * [IL].[Feature_9] + -0.437288519777 * [IL].[Feature_10] + -0.0354105519036 * [IL].[Feature_11] + 0.163658331974 * [IL].[Feature_12] + -0.142499722913 * [IL].[Feature_13] + 0.17879591585 * [IL].[Feature_14] + 0.519436487329 * [IL].[Feature_15] + 0.214172100126 * [IL].[Feature_16] + 0.0563981302312 * [IL].[Feature_17] + -0.351181657393 * [IL].[Feature_18] + -0.180704967115 * [IL].[Feature_19] + 0.284371890516 AS [NEUR_1_3], 0.202996985379 * [IL].[Feature_0] + 0.14307375683 * [IL].[Feature_1] + 0.254099408156 * [IL].[Feature_2] + 0.240609753009 * [IL].[Feature_3] + 0.219237607836 * [IL].[Feature_4] + -0.514487902792 * [IL].[Feature_5] + -0.162799736034 * [IL].[Feature_6] + -0.000379000686324 * [IL].[Feature_7] + -0.290229034279 * [IL].[Feature_8] + -0.646690732692 * [IL].[Feature_9] + 0.409974838652 * [IL].[Feature_10] + -0.00813494634887 * [IL].[Feature_11] + -0.596280629714 * [IL].[Feature_12] + 0.252465721251 * [IL].[Feature_13] + -0.224548038996 * [IL].[Feature_14] + -0.0554137165203 * [IL].[Feature_15] + 0.0909665690447 * [IL].[Feature_16] + 0.139491183354 * [IL].[Feature_17] + 0.309069087224 * [IL].[Feature_18] + 0.433195494883 * [IL].[Feature_19] + 0.502593915451 AS [NEUR_1_4], -0.0145513942032 * [IL].[Feature_0] + 0.198004081299 * [IL].[Feature_1] + 0.315815551557 * [IL].[Feature_2] + -0.157446790846 * [IL].[Feature_3] + 0.335524583592 * [IL].[Feature_4] + 0.0185166572783 * [IL].[Feature_5] + 0.255931328219 * [IL].[Feature_6] + -0.44968031974 * [IL].[Feature_7] + 0.145519383216 * [IL].[Feature_8] + -0.363282336263 * [IL].[Feature_9] + -0.0590601451058 * [IL].[Feature_10] + -0.286567008408 * [IL].[Feature_11] + 0.0599502886996 * [IL].[Feature_12] + -0.27427890763 * [IL].[Feature_13] + 0.344929325122 * [IL].[Feature_14] + -0.0200531911567 * [IL].[Feature_15] + -0.152643284507 * [IL].[Feature_16] + 0.313455706842 * [IL].[Feature_17] + 0.069663925245 * [IL].[Feature_18] + 0.293462213866 * [IL].[Feature_19] + 0.443022135804 AS [NEUR_1_5], 0.0655302049923 * [IL].[Feature_0] + 0.180029375004 * [IL].[Feature_1] + 0.285653746967 * [IL].[Feature_2] + -0.0775737720508 * [IL].[Feature_3] + 0.0137853133164 * [IL].[Feature_4] + 0.381967778359 * [IL].[Feature_5] + -0.161686389813 * [IL].[Feature_6] + -0.309915742856 * [IL].[Feature_7] + -0.4513170568 * [IL].[Feature_8] + -0.405223943803 * [IL].[Feature_9] + -0.0249091315616 * [IL].[Feature_10] + 0.324018317523 * [IL].[Feature_11] + -0.0567068836335 * [IL].[Feature_12] + 0.674645133701 * [IL].[Feature_13] + 0.201325918962 * [IL].[Feature_14] + -0.0379416624084 * [IL].[Feature_15] + -0.206791350982 * [IL].[Feature_16] + 0.131900788637 * [IL].[Feature_17] + 0.412721031797 * [IL].[Feature_18] + -0.110435354063 * [IL].[Feature_19] + 0.507022511805 AS [NEUR_1_6], -0.244130031762 * [IL].[Feature_0] + -0.392400414553 * [IL].[Feature_1] + 0.177135454312 * [IL].[Feature_2] + -0.152206155184 * [IL].[Feature_3] + 0.198969985398 * [IL].[Feature_4] + -0.0783046088056 * [IL].[Feature_5] + -0.440302368397 * [IL].[Feature_6] + -0.0556711888509 * [IL].[Feature_7] + 0.490598713531 * [IL].[Feature_8] + -0.134546549385 * [IL].[Feature_9] + -0.161996494425 * [IL].[Feature_10] + -0.339977957898 * [IL].[Feature_11] + 0.375709466867 * [IL].[Feature_12] + -0.0815880214499 * [IL].[Feature_13] + 0.377761020405 * [IL].[Feature_14] + -0.539375664258 * [IL].[Feature_15] + -0.0127326074931 * [IL].[Feature_16] + -0.00460546947854 * [IL].[Feature_17] + -0.504921008853 * [IL].[Feature_18] + -0.00664429849553 * [IL].[Feature_19] + -0.334475447755 AS [NEUR_1_7], 0.207507287287 * [IL].[Feature_0] + -0.440365104578 * [IL].[Feature_1] + 0.448632214613 * [IL].[Feature_2] + 0.0743288526554 * [IL].[Feature_3] + 0.184656018826 * [IL].[Feature_4] + -0.161351512418 * [IL].[Feature_5] + -0.274329137602 * [IL].[Feature_6] + -0.408083557897 * [IL].[Feature_7] + 0.100041046851 * [IL].[Feature_8] + -0.240654809069 * [IL].[Feature_9] + -0.524597437266 * [IL].[Feature_10] + -0.496052514092 * [IL].[Feature_11] + 0.573834715684 * [IL].[Feature_12] + 0.220539384591 * [IL].[Feature_13] + 0.305220857292 * [IL].[Feature_14] + -0.329188988732 * [IL].[Feature_15] + 0.127965447404 * [IL].[Feature_16] + 0.375014767419 * [IL].[Feature_17] + 0.474207754729 * [IL].[Feature_18] + -0.386588624689 * [IL].[Feature_19] + 0.0278740216718 AS [NEUR_1_8] 
FROM [IL]), 
[HL_1_relu] AS 
(SELECT [HL_BA_1].[KEY] AS [KEY], CASE WHEN ([HL_BA_1].[NEUR_1_1] >= 0.0) THEN [HL_BA_1].[NEUR_1_1] ELSE 0.0 END AS [NEUR_1_1], CASE WHEN ([HL_BA_1].[NEUR_1_2] >= 0.0) THEN [HL_BA_1].[NEUR_1_2] ELSE 0.0 END AS [NEUR_1_2], CASE WHEN ([HL_BA_1].[NEUR_1_3] >= 0.0) THEN [HL_BA_1].[NEUR_1_3] ELSE 0.0 END AS [NEUR_1_3], CASE WHEN ([HL_BA_1].[NEUR_1_4] >= 0.0) THEN [HL_BA_1].[NEUR_1_4] ELSE 0.0 END AS [NEUR_1_4], CASE WHEN ([HL_BA_1].[NEUR_1_5] >= 0.0) THEN [HL_BA_1].[NEUR_1_5] ELSE 0.0 END AS [NEUR_1_5], CASE WHEN ([HL_BA_1].[NEUR_1_6] >= 0.0) THEN [HL_BA_1].[NEUR_1_6] ELSE 0.0 END AS [NEUR_1_6], CASE WHEN ([HL_BA_1].[NEUR_1_7] >= 0.0) THEN [HL_BA_1].[NEUR_1_7] ELSE 0.0 END AS [NEUR_1_7], CASE WHEN ([HL_BA_1].[NEUR_1_8] >= 0.0) THEN [HL_BA_1].[NEUR_1_8] ELSE 0.0 END AS [NEUR_1_8] 
FROM [HL_BA_1]), 
[HL_BA_2] AS 
(SELECT [HL_1_relu].[KEY] AS [KEY], 0.209047749615 * [HL_1_relu].[NEUR_1_1] + -0.469922191564 * [HL_1_relu].[NEUR_1_2] + -0.210860114045 * [HL_1_relu].[NEUR_1_3] + -0.618601420379 * [HL_1_relu].[NEUR_1_4] + -0.0584096701668 * [HL_1_relu].[NEUR_1_5] + 0.688936534568 * [HL_1_relu].[NEUR_1_6] + 0.561986257715 * [HL_1_relu].[NEUR_1_7] + 0.443948917719 * [HL_1_relu].[NEUR_1_8] + 0.32318052805 AS [NEUR_2_1], -0.339554505535 * [HL_1_relu].[NEUR_1_1] + 0.232400436291 * [HL_1_relu].[NEUR_1_2] + 0.473140354041 * [HL_1_relu].[NEUR_1_3] + -0.286521029754 * [HL_1_relu].[NEUR_1_4] + -0.244123726991 * [HL_1_relu].[NEUR_1_5] + 0.278188621622 * [HL_1_relu].[NEUR_1_6] + -0.579214927801 * [HL_1_relu].[NEUR_1_7] + 0.170648911232 * [HL_1_relu].[NEUR_1_8] + 0.389865455751 AS [NEUR_2_2], 0.178620984865 * [HL_1_relu].[NEUR_1_1] + 0.291062493946 * [HL_1_relu].[NEUR_1_2] + 0.39494025205 * [HL_1_relu].[NEUR_1_3] + 0.123683250774 * [HL_1_relu].[NEUR_1_4] + 0.122451433683 * [HL_1_relu].[NEUR_1_5] + -0.27643947068 * [HL_1_relu].[NEUR_1_6] + -0.0531815056367 * [HL_1_relu].[NEUR_1_7] + 0.40126411967 * [HL_1_relu].[NEUR_1_8] + -0.252739084012 AS [NEUR_2_3], -0.401740760767 * [HL_1_relu].[NEUR_1_1] + -0.080477070545 * [HL_1_relu].[NEUR_1_2] + -0.0762828138293 * [HL_1_relu].[NEUR_1_3] + 0.132170999799 * [HL_1_relu].[NEUR_1_4] + 0.311786081141 * [HL_1_relu].[NEUR_1_5] + -0.542486969317 * [HL_1_relu].[NEUR_1_6] + -0.210229519334 * [HL_1_relu].[NEUR_1_7] + -0.643148499293 * [HL_1_relu].[NEUR_1_8] + 0.336362613767 AS [NEUR_2_4], -0.0530592041462 * [HL_1_relu].[NEUR_1_1] + 0.67487409259 * [HL_1_relu].[NEUR_1_2] + -0.0811997977521 * [HL_1_relu].[NEUR_1_3] + -0.146741900616 * [HL_1_relu].[NEUR_1_4] + 0.350591062726 * [HL_1_relu].[NEUR_1_5] + -0.202689377542 * [HL_1_relu].[NEUR_1_6] + 0.472481020711 * [HL_1_relu].[NEUR_1_7] + 0.176241668996 * [HL_1_relu].[NEUR_1_8] + -0.318152784584 AS [NEUR_2_5], -0.636995930797 * [HL_1_relu].[NEUR_1_1] + -0.0369683835449 * [HL_1_relu].[NEUR_1_2] + -0.0597464151488 * [HL_1_relu].[NEUR_1_3] + 0.66681706707 * [HL_1_relu].[NEUR_1_4] + 0.375425353449 * [HL_1_relu].[NEUR_1_5] + -0.258618691367 * [HL_1_relu].[NEUR_1_6] + -0.109241128676 * [HL_1_relu].[NEUR_1_7] + 0.30813919188 * [HL_1_relu].[NEUR_1_8] + 0.122879454042 AS [NEUR_2_6], 0.472434654554 * [HL_1_relu].[NEUR_1_1] + 0.0556634909335 * [HL_1_relu].[NEUR_1_2] + -0.498949430477 * [HL_1_relu].[NEUR_1_3] + 0.445474140703 * [HL_1_relu].[NEUR_1_4] + -0.143996381295 * [HL_1_relu].[NEUR_1_5] + -0.498965198729 * [HL_1_relu].[NEUR_1_6] + 0.19284854424 * [HL_1_relu].[NEUR_1_7] + 0.541124767905 * [HL_1_relu].[NEUR_1_8] + 0.534635532211 AS [NEUR_2_7], -0.114387275856 * [HL_1_relu].[NEUR_1_1] + -0.0447054141986 * [HL_1_relu].[NEUR_1_2] + -0.179181688429 * [HL_1_relu].[NEUR_1_3] + -0.448539081732 * [HL_1_relu].[NEUR_1_4] + 0.414514236241 * [HL_1_relu].[NEUR_1_5] + -0.233883895654 * [HL_1_relu].[NEUR_1_6] + -0.214183662477 * [HL_1_relu].[NEUR_1_7] + -0.0370891256397 * [HL_1_relu].[NEUR_1_8] + 0.439332819549 AS [NEUR_2_8], -0.190085698769 * [HL_1_relu].[NEUR_1_1] + 0.266542165993 * [HL_1_relu].[NEUR_1_2] + -0.0750372015927 * [HL_1_relu].[NEUR_1_3] + 0.119085943791 * [HL_1_relu].[NEUR_1_4] + -0.324793700277 * [HL_1_relu].[NEUR_1_5] + -0.136615707116 * [HL_1_relu].[NEUR_1_6] + -0.356068066142 * [HL_1_relu].[NEUR_1_7] + -0.281889361832 * [HL_1_relu].[NEUR_1_8] + -0.233116925933 AS [NEUR_2_9], 0.623436498121 * [HL_1_relu].[NEUR_1_1] + 0.0136686109206 * [HL_1_relu].[NEUR_1_2] + 0.294199659265 * [HL_1_relu].[NEUR_1_3] + -0.17027525182 * [HL_1_relu].[NEUR_1_4] + 0.512142247877 * [HL_1_relu].[NEUR_1_5] + -0.150796115879 * [HL_1_relu].[NEUR_1_6] + -0.0546212837472 * [HL_1_relu].[NEUR_1_7] + -0.430024534903 * [HL_1_relu].[NEUR_1_8] + 0.419041691231 AS [NEUR_2_10], 0.372239714785 * [HL_1_relu].[NEUR_1_1] + 0.0230594998335 * [HL_1_relu].[NEUR_1_2] + 0.0979833239713 * [HL_1_relu].[NEUR_1_3] + -0.469519394112 * [HL_1_relu].[NEUR_1_4] + 0.220982542877 * [HL_1_relu].[NEUR_1_5] + -0.116735677365 * [HL_1_relu].[NEUR_1_6] + -0.213116597023 * [HL_1_relu].[NEUR_1_7] + -0.640451484464 * [HL_1_relu].[NEUR_1_8] + -0.186984838649 AS [NEUR_2_11], -0.510209601188 * [HL_1_relu].[NEUR_1_1] + -0.219754423895 * [HL_1_relu].[NEUR_1_2] + -0.188807069712 * [HL_1_relu].[NEUR_1_3] + 0.496633107438 * [HL_1_relu].[NEUR_1_4] + -0.168057210295 * [HL_1_relu].[NEUR_1_5] + 0.344376573782 * [HL_1_relu].[NEUR_1_6] + 0.590262271922 * [HL_1_relu].[NEUR_1_7] + 0.62442054808 * [HL_1_relu].[NEUR_1_8] + 0.678569018444 AS [NEUR_2_12] 
FROM [HL_1_relu]), 
[HL_2_relu] AS 
(SELECT [HL_BA_2].[KEY] AS [KEY], CASE WHEN ([HL_BA_2].[NEUR_2_1] >= 0.0) THEN [HL_BA_2].[NEUR_2_1] ELSE 0.0 END AS [NEUR_2_1], CASE WHEN ([HL_BA_2].[NEUR_2_2] >= 0.0) THEN [HL_BA_2].[NEUR_2_2] ELSE 0.0 END AS [NEUR_2_2], CASE WHEN ([HL_BA_2].[NEUR_2_3] >= 0.0) THEN [HL_BA_2].[NEUR_2_3] ELSE 0.0 END AS [NEUR_2_3], CASE WHEN ([HL_BA_2].[NEUR_2_4] >= 0.0) THEN [HL_BA_2].[NEUR_2_4] ELSE 0.0 END AS [NEUR_2_4], CASE WHEN ([HL_BA_2].[NEUR_2_5] >= 0.0) THEN [HL_BA_2].[NEUR_2_5] ELSE 0.0 END AS [NEUR_2_5], CASE WHEN ([HL_BA_2].[NEUR_2_6] >= 0.0) THEN [HL_BA_2].[NEUR_2_6] ELSE 0.0 END AS [NEUR_2_6], CASE WHEN ([HL_BA_2].[NEUR_2_7] >= 0.0) THEN [HL_BA_2].[NEUR_2_7] ELSE 0.0 END AS [NEUR_2_7], CASE WHEN ([HL_BA_2].[NEUR_2_8] >= 0.0) THEN [HL_BA_2].[NEUR_2_8] ELSE 0.0 END AS [NEUR_2_8], CASE WHEN ([HL_BA_2].[NEUR_2_9] >= 0.0) THEN [HL_BA_2].[NEUR_2_9] ELSE 0.0 END AS [NEUR_2_9], CASE WHEN ([HL_BA_2].[NEUR_2_10] >= 0.0) THEN [HL_BA_2].[NEUR_2_10] ELSE 0.0 END AS [NEUR_2_10], CASE WHEN ([HL_BA_2].[NEUR_2_11] >= 0.0) THEN [HL_BA_2].[NEUR_2_11] ELSE 0.0 END AS [NEUR_2_11], CASE WHEN ([HL_BA_2].[NEUR_2_12] >= 0.0) THEN [HL_BA_2].[NEUR_2_12] ELSE 0.0 END AS [NEUR_2_12] 
FROM [HL_BA_2]), 
[OL_BA] AS 
(SELECT [HL_2_relu].[KEY] AS [KEY], 0.641271012215 * [HL_2_relu].[NEUR_2_1] + -0.47240142449 * [HL_2_relu].[NEUR_2_2] + -0.062300536348 * [HL_2_relu].[NEUR_2_3] + -0.0245131197336 * [HL_2_relu].[NEUR_2_4] + 0.654604922527 * [HL_2_relu].[NEUR_2_5] + -0.655624206784 * [HL_2_relu].[NEUR_2_6] + 0.754640219402 * [HL_2_relu].[NEUR_2_7] + -0.0487581969326 * [HL_2_relu].[NEUR_2_8] + 0.240177161921 * [HL_2_relu].[NEUR_2_9] + -0.468409140272 * [HL_2_relu].[NEUR_2_10] + -0.287333254719 * [HL_2_relu].[NEUR_2_11] + -0.493680721452 * [HL_2_relu].[NEUR_2_12] + -0.386464872484 AS [NEUR_3_1], 0.18916576407 * [HL_2_relu].[NEUR_2_1] + 0.628535285449 * [HL_2_relu].[NEUR_2_2] + -0.673151940413 * [HL_2_relu].[NEUR_2_3] + 0.411398553546 * [HL_2_relu].[NEUR_2_4] + -0.634721742882 * [HL_2_relu].[NEUR_2_5] + 0.683149987132 * [HL_2_relu].[NEUR_2_6] + 0.385055470432 * [HL_2_relu].[NEUR_2_7] + -0.507411470694 * [HL_2_relu].[NEUR_2_8] + -0.603401620276 * [HL_2_relu].[NEUR_2_9] + -0.70827576204 * [HL_2_relu].[NEUR_2_10] + -0.171247699089 * [HL_2_relu].[NEUR_2_11] + -0.263875338329 * [HL_2_relu].[NEUR_2_12] + 0.145691176011 AS [NEUR_3_2], -0.0110247157503 * [HL_2_relu].[NEUR_2_1] + 0.0571362464393 * [HL_2_relu].[NEUR_2_2] + 0.611615136634 * [HL_2_relu].[NEUR_2_3] + -0.277863998655 * [HL_2_relu].[NEUR_2_4] + -0.0732089775685 * [HL_2_relu].[NEUR_2_5] + 0.465079719471 * [HL_2_relu].[NEUR_2_6] + -0.312730580987 * [HL_2_relu].[NEUR_2_7] + -0.514949717618 * [HL_2_relu].[NEUR_2_8] + 0.298499377728 * [HL_2_relu].[NEUR_2_9] + 0.250658815905 * [HL_2_relu].[NEUR_2_10] + 0.699540511632 * [HL_2_relu].[NEUR_2_11] + -0.728524453225 * [HL_2_relu].[NEUR_2_12] + 0.128434100304 AS [NEUR_3_3], 0.683896211838 * [HL_2_relu].[NEUR_2_1] + -0.486654924224 * [HL_2_relu].[NEUR_2_2] + 0.0163206212587 * [HL_2_relu].[NEUR_2_3] + -0.461868399356 * [HL_2_relu].[NEUR_2_4] + -0.411656485002 * [HL_2_relu].[NEUR_2_5] + 0.686749464297 * [HL_2_relu].[NEUR_2_6] + -0.473100445441 * [HL_2_relu].[NEUR_2_7] + -0.456925240894 * [HL_2_relu].[NEUR_2_8] + -0.378586589838 * [HL_2_relu].[NEUR_2_9] + -0.499377294632 * [HL_2_relu].[NEUR_2_10] + 0.0489162585124 * [HL_2_relu].[NEUR_2_11] + -0.0461799003981 * [HL_2_relu].[NEUR_2_12] + 0.377744145825 AS [NEUR_3_4] 
FROM [HL_2_relu]), 
[OL_softmax] AS 
(SELECT [OL_BA].[KEY] AS [KEY], [OL_BA].[NEUR_3_1] AS [NEUR_3_1], [OL_BA].[NEUR_3_2] AS [NEUR_3_2], [OL_BA].[NEUR_3_3] AS [NEUR_3_3], [OL_BA].[NEUR_3_4] AS [NEUR_3_4] 
FROM [OL_BA]), 
orig_cte AS 
(SELECT [OL_softmax].[KEY] AS [KEY], [OL_softmax].[NEUR_3_1] AS [Score_0], [OL_softmax].[NEUR_3_2] AS [Score_1], [OL_softmax].[NEUR_3_3] AS [Score_2], [OL_softmax].[NEUR_3_4] AS [Score_3], CAST(NULL AS FLOAT(53)) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [OL_softmax]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte