-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", "ADS"."Feature_0" AS "Feature_0", "ADS"."Feature_1" AS "Feature_1", "ADS"."Feature_2" AS "Feature_2", "ADS"."Feature_3" AS "Feature_3", "ADS"."Feature_4" AS "Feature_4", "ADS"."Feature_5" AS "Feature_5", "ADS"."Feature_6" AS "Feature_6", "ADS"."Feature_7" AS "Feature_7", "ADS"."Feature_8" AS "Feature_8", "ADS"."Feature_9" AS "Feature_9", "ADS"."Feature_10" AS "Feature_10", "ADS"."Feature_11" AS "Feature_11", "ADS"."Feature_12" AS "Feature_12", "ADS"."Feature_13" AS "Feature_13", "ADS"."Feature_14" AS "Feature_14", "ADS"."Feature_15" AS "Feature_15", "ADS"."Feature_16" AS "Feature_16", "ADS"."Feature_17" AS "Feature_17", "ADS"."Feature_18" AS "Feature_18", "ADS"."Feature_19" AS "Feature_19" 
FROM "INPUT_DATA" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.129085223937 * "IL"."Feature_0" + 0.341103557897 * "IL"."Feature_1" + -0.437966643622 * "IL"."Feature_2" + -0.380115471654 * "IL"."Feature_3" + -0.0943049408135 * "IL"."Feature_4" + -0.275441989744 * "IL"."Feature_5" + -0.157056637227 * "IL"."Feature_6" + -0.0403384336846 * "IL"."Feature_7" + -0.207619572991 * "IL"."Feature_8" + 0.477025657313 * "IL"."Feature_9" + -0.0535046220381 * "IL"."Feature_10" + 0.282324394629 * "IL"."Feature_11" + 0.295701052322 * "IL"."Feature_12" + -0.229993764772 * "IL"."Feature_13" + 0.0810122179137 * "IL"."Feature_14" + 0.0435565635929 * "IL"."Feature_15" + 0.143138421744 * "IL"."Feature_16" + 0.206413952942 * "IL"."Feature_17" + 0.385410706099 * "IL"."Feature_18" + -0.229319291859 * "IL"."Feature_19" + 0.155331470708 AS "NEUR_1_1", 0.312071215601 * "IL"."Feature_0" + -0.223427750801 * "IL"."Feature_1" + 0.0719650515499 * "IL"."Feature_2" + 0.0335807001898 * "IL"."Feature_3" + -0.0898591791733 * "IL"."Feature_4" + 0.123709511876 * "IL"."Feature_5" + 0.0113929235918 * "IL"."Feature_6" + 0.00474608936824 * "IL"."Feature_7" + -0.250856629553 * "IL"."Feature_8" + -0.113939447716 * "IL"."Feature_9" + -0.185136207214 * "IL"."Feature_10" + 0.520887764296 * "IL"."Feature_11" + -0.644050347133 * "IL"."Feature_12" + 0.0490199699178 * "IL"."Feature_13" + -0.197894603907 * "IL"."Feature_14" + -0.043930362664 * "IL"."Feature_15" + -0.394128157877 * "IL"."Feature_16" + 0.281374313939 * "IL"."Feature_17" + 0.158242266286 * "IL"."Feature_18" + 0.320091608345 * "IL"."Feature_19" + 0.161385906872 AS "NEUR_1_2", -0.0605896552938 * "IL"."Feature_0" + 0.243850445608 * "IL"."Feature_1" + 0.120598266436 * "IL"."Feature_2" + -0.133616981102 * "IL"."Feature_3" + -0.54905849875 * "IL"."Feature_4" + 0.337933925729 * "IL"."Feature_5" + 0.121064879813 * "IL"."Feature_6" + -0.0155437209144 * "IL"."Feature_7" + 0.206354865156 * "IL"."Feature_8" + 0.0555255561137 * "IL"."Feature_9" + -0.344751732437 * "IL"."Feature_10" + -0.0148520019335 * "IL"."Feature_11" + 0.210492260582 * "IL"."Feature_12" + 0.227907964111 * "IL"."Feature_13" + 0.242499940298 * "IL"."Feature_14" + 0.479127296579 * "IL"."Feature_15" + -0.0471325083299 * "IL"."Feature_16" + 0.0527219997662 * "IL"."Feature_17" + -0.216178901142 * "IL"."Feature_18" + -0.284797364566 * "IL"."Feature_19" + 0.166582605255 AS "NEUR_1_3", 0.0454236286093 * "IL"."Feature_0" + -0.149405443508 * "IL"."Feature_1" + 0.142767020977 * "IL"."Feature_2" + 0.194205884984 * "IL"."Feature_3" + -0.14722366926 * "IL"."Feature_4" + -0.477724232764 * "IL"."Feature_5" + -0.221699271411 * "IL"."Feature_6" + -0.45241847676 * "IL"."Feature_7" + -0.364793000345 * "IL"."Feature_8" + -0.548678280999 * "IL"."Feature_9" + 0.140618858672 * "IL"."Feature_10" + -0.0976021311541 * "IL"."Feature_11" + -0.336153434237 * "IL"."Feature_12" + 0.241061766328 * "IL"."Feature_13" + -0.221579030384 * "IL"."Feature_14" + 0.157910533801 * "IL"."Feature_15" + -0.24576085581 * "IL"."Feature_16" + 0.120497984735 * "IL"."Feature_17" + 0.538205679329 * "IL"."Feature_18" + 0.532415091989 * "IL"."Feature_19" + 0.448207853088 AS "NEUR_1_4", -0.0315440932059 * "IL"."Feature_0" + -0.0578817966811 * "IL"."Feature_1" + 0.533710415134 * "IL"."Feature_2" + -0.167917105743 * "IL"."Feature_3" + 0.0130841368461 * "IL"."Feature_4" + 0.110942398939 * "IL"."Feature_5" + 0.508417498364 * "IL"."Feature_6" + -0.159603883271 * "IL"."Feature_7" + 0.158997286749 * "IL"."Feature_8" + -0.106613772752 * "IL"."Feature_9" + -0.149281701212 * "IL"."Feature_10" + -0.30139746439 * "IL"."Feature_11" + 0.109047338239 * "IL"."Feature_12" + -0.179737541847 * "IL"."Feature_13" + 0.277835260231 * "IL"."Feature_14" + 0.00832328218673 * "IL"."Feature_15" + -0.18183289314 * "IL"."Feature_16" + 0.576583200601 * "IL"."Feature_17" + 0.229128469606 * "IL"."Feature_18" + 0.444094516518 * "IL"."Feature_19" + 0.418597249076 AS "NEUR_1_5", -0.0535294539276 * "IL"."Feature_0" + 0.563596820541 * "IL"."Feature_1" + 0.115319981862 * "IL"."Feature_2" + 0.0696744118338 * "IL"."Feature_3" + -0.00626919762945 * "IL"."Feature_4" + 0.0233182249929 * "IL"."Feature_5" + -0.514511717865 * "IL"."Feature_6" + -0.203271761951 * "IL"."Feature_7" + -0.391442477442 * "IL"."Feature_8" + -0.53889975415 * "IL"."Feature_9" + -0.225344753827 * "IL"."Feature_10" + 0.0263436426674 * "IL"."Feature_11" + -0.399530473187 * "IL"."Feature_12" + 0.424263886895 * "IL"."Feature_13" + 0.125149261755 * "IL"."Feature_14" + 0.0338854828986 * "IL"."Feature_15" + -0.407890236873 * "IL"."Feature_16" + -0.0992405530873 * "IL"."Feature_17" + 0.365089348721 * "IL"."Feature_18" + -0.156887053111 * "IL"."Feature_19" + 0.513261089653 AS "NEUR_1_6", -0.0829903145776 * "IL"."Feature_0" + -0.373619873981 * "IL"."Feature_1" + 0.161993177111 * "IL"."Feature_2" + -0.275781212745 * "IL"."Feature_3" + 0.371276532108 * "IL"."Feature_4" + -0.232449806152 * "IL"."Feature_5" + -0.0455549562581 * "IL"."Feature_6" + 0.263823328759 * "IL"."Feature_7" + 0.594240581544 * "IL"."Feature_8" + -0.191114193222 * "IL"."Feature_9" + -0.141404810982 * "IL"."Feature_10" + -0.289140677505 * "IL"."Feature_11" + -0.032477205224 * "IL"."Feature_12" + 0.108204117066 * "IL"."Feature_13" + 0.509563239913 * "IL"."Feature_14" + -0.588596232004 * "IL"."Feature_15" + 0.263276354166 * "IL"."Feature_16" + 0.127162424417 * "IL"."Feature_17" + -0.102901713571 * "IL"."Feature_18" + -0.263726151691 * "IL"."Feature_19" + -0.315845457494 AS "NEUR_1_7", 0.421802911272 * "IL"."Feature_0" + -0.243557753497 * "IL"."Feature_1" + 0.143332396244 * "IL"."Feature_2" + 0.08374301708 * "IL"."Feature_3" + 0.1022279907 * "IL"."Feature_4" + -0.152145826046 * "IL"."Feature_5" + -0.508076603237 * "IL"."Feature_6" + -0.469987983739 * "IL"."Feature_7" + 0.0608187982764 * "IL"."Feature_8" + -0.440522403296 * "IL"."Feature_9" + -0.374307431174 * "IL"."Feature_10" + -0.320997037183 * "IL"."Feature_11" + 0.586938413092 * "IL"."Feature_12" + 0.128172656704 * "IL"."Feature_13" + 0.297118435895 * "IL"."Feature_14" + -0.241078766345 * "IL"."Feature_15" + -0.0464104166452 * "IL"."Feature_16" + 0.216685757344 * "IL"."Feature_17" + 0.209420352777 * "IL"."Feature_18" + -0.520002979549 * "IL"."Feature_19" + -0.209013796724 AS "NEUR_1_8" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3", CASE WHEN ("HL_BA_1"."NEUR_1_4" >= 0.0) THEN "HL_BA_1"."NEUR_1_4" ELSE 0.0 END AS "NEUR_1_4", CASE WHEN ("HL_BA_1"."NEUR_1_5" >= 0.0) THEN "HL_BA_1"."NEUR_1_5" ELSE 0.0 END AS "NEUR_1_5", CASE WHEN ("HL_BA_1"."NEUR_1_6" >= 0.0) THEN "HL_BA_1"."NEUR_1_6" ELSE 0.0 END AS "NEUR_1_6", CASE WHEN ("HL_BA_1"."NEUR_1_7" >= 0.0) THEN "HL_BA_1"."NEUR_1_7" ELSE 0.0 END AS "NEUR_1_7", CASE WHEN ("HL_BA_1"."NEUR_1_8" >= 0.0) THEN "HL_BA_1"."NEUR_1_8" ELSE 0.0 END AS "NEUR_1_8" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.359480432468 * "HL_1_relu"."NEUR_1_1" + -0.327663923165 * "HL_1_relu"."NEUR_1_2" + -0.186953112786 * "HL_1_relu"."NEUR_1_3" + -0.444571116407 * "HL_1_relu"."NEUR_1_4" + -0.143514180853 * "HL_1_relu"."NEUR_1_5" + 0.645768773831 * "HL_1_relu"."NEUR_1_6" + 0.599346211926 * "HL_1_relu"."NEUR_1_7" + 0.402819008831 * "HL_1_relu"."NEUR_1_8" + 0.320093254302 AS "NEUR_2_1", -0.158114576949 * "HL_1_relu"."NEUR_1_1" + 0.218060306357 * "HL_1_relu"."NEUR_1_2" + 0.441412433589 * "HL_1_relu"."NEUR_1_3" + -0.384145461569 * "HL_1_relu"."NEUR_1_4" + -0.255631951339 * "HL_1_relu"."NEUR_1_5" + 0.470026166364 * "HL_1_relu"."NEUR_1_6" + -0.590663969936 * "HL_1_relu"."NEUR_1_7" + 0.242597703809 * "HL_1_relu"."NEUR_1_8" + 0.402490792773 AS "NEUR_2_2", -0.0281880403278 * "HL_1_relu"."NEUR_1_1" + 0.271764244249 * "HL_1_relu"."NEUR_1_2" + 0.191802884828 * "HL_1_relu"."NEUR_1_3" + 0.349320941141 * "HL_1_relu"."NEUR_1_4" + 0.0889484051273 * "HL_1_relu"."NEUR_1_5" + -0.401395834036 * "HL_1_relu"."NEUR_1_6" + 0.0341475291338 * "HL_1_relu"."NEUR_1_7" + 0.371070082924 * "HL_1_relu"."NEUR_1_8" + -0.176129784909 AS "NEUR_2_3", -0.451540459589 * "HL_1_relu"."NEUR_1_1" + -0.442658743792 * "HL_1_relu"."NEUR_1_2" + -0.0879984288143 * "HL_1_relu"."NEUR_1_3" + -0.121440265168 * "HL_1_relu"."NEUR_1_4" + 0.267634419095 * "HL_1_relu"."NEUR_1_5" + -0.28208225293 * "HL_1_relu"."NEUR_1_6" + -0.493012066695 * "HL_1_relu"."NEUR_1_7" + -0.511997927107 * "HL_1_relu"."NEUR_1_8" + -0.00485712673859 AS "NEUR_2_4", -0.354833903919 * "HL_1_relu"."NEUR_1_1" + 0.629488562973 * "HL_1_relu"."NEUR_1_2" + -0.507258657213 * "HL_1_relu"."NEUR_1_3" + 0.214749810796 * "HL_1_relu"."NEUR_1_4" + 0.0149822611847 * "HL_1_relu"."NEUR_1_5" + 0.158378166771 * "HL_1_relu"."NEUR_1_6" + 0.069804690344 * "HL_1_relu"."NEUR_1_7" + 0.0433678292884 * "HL_1_relu"."NEUR_1_8" + -0.398285634957 AS "NEUR_2_5", -0.540355224659 * "HL_1_relu"."NEUR_1_1" + 0.185888898404 * "HL_1_relu"."NEUR_1_2" + -0.416543376762 * "HL_1_relu"."NEUR_1_3" + 0.318575636895 * "HL_1_relu"."NEUR_1_4" + 0.56631100602 * "HL_1_relu"."NEUR_1_5" + -0.703503426635 * "HL_1_relu"."NEUR_1_6" + 0.04155914312 * "HL_1_relu"."NEUR_1_7" + -0.128620343272 * "HL_1_relu"."NEUR_1_8" + 0.125704481765 AS "NEUR_2_6", 0.44590831452 * "HL_1_relu"."NEUR_1_1" + -0.0156422069723 * "HL_1_relu"."NEUR_1_2" + -0.563043674021 * "HL_1_relu"."NEUR_1_3" + 0.72883781278 * "HL_1_relu"."NEUR_1_4" + -0.359656274267 * "HL_1_relu"."NEUR_1_5" + -0.175129388426 * "HL_1_relu"."NEUR_1_6" + -0.0912481271728 * "HL_1_relu"."NEUR_1_7" + 0.729493310466 * "HL_1_relu"."NEUR_1_8" + 0.512162161394 AS "NEUR_2_7", -0.131637646727 * "HL_1_relu"."NEUR_1_1" + -0.0423261705878 * "HL_1_relu"."NEUR_1_2" + 0.0978327667989 * "HL_1_relu"."NEUR_1_3" + -0.337281191722 * "HL_1_relu"."NEUR_1_4" + 0.153984943788 * "HL_1_relu"."NEUR_1_5" + 0.168389316732 * "HL_1_relu"."NEUR_1_6" + -0.558799483208 * "HL_1_relu"."NEUR_1_7" + -0.0397125059779 * "HL_1_relu"."NEUR_1_8" + 0.563390579941 AS "NEUR_2_8", -0.209873528881 * "HL_1_relu"."NEUR_1_1" + 0.432048710859 * "HL_1_relu"."NEUR_1_2" + -0.248258376039 * "HL_1_relu"."NEUR_1_3" + 0.326866941156 * "HL_1_relu"."NEUR_1_4" + -0.135417680183 * "HL_1_relu"."NEUR_1_5" + -0.0977676091496 * "HL_1_relu"."NEUR_1_6" + -0.153115372912 * "HL_1_relu"."NEUR_1_7" + -0.130506978546 * "HL_1_relu"."NEUR_1_8" + -0.0122031292831 AS "NEUR_2_9", 0.394059669597 * "HL_1_relu"."NEUR_1_1" + 0.00917170548611 * "HL_1_relu"."NEUR_1_2" + 0.122436994887 * "HL_1_relu"."NEUR_1_3" + -0.170401438511 * "HL_1_relu"."NEUR_1_4" + 0.508403422626 * "HL_1_relu"."NEUR_1_5" + -0.160330102463 * "HL_1_relu"."NEUR_1_6" + -0.0809018917665 * "HL_1_relu"."NEUR_1_7" + -0.515353652083 * "HL_1_relu"."NEUR_1_8" + 0.446834893502 AS "NEUR_2_10", 0.234958870739 * "HL_1_relu"."NEUR_1_1" + -0.136552687667 * "HL_1_relu"."NEUR_1_2" + -0.178695516191 * "HL_1_relu"."NEUR_1_3" + -0.400115605622 * "HL_1_relu"."NEUR_1_4" + 0.305646391521 * "HL_1_relu"."NEUR_1_5" + -0.362422414233 * "HL_1_relu"."NEUR_1_6" + -0.140001975041 * "HL_1_relu"."NEUR_1_7" + -0.35961458237 * "HL_1_relu"."NEUR_1_8" + -0.247910600279 AS "NEUR_2_11", -0.519567217975 * "HL_1_relu"."NEUR_1_1" + -0.461167493782 * "HL_1_relu"."NEUR_1_2" + -0.14249130858 * "HL_1_relu"."NEUR_1_3" + 0.414306791764 * "HL_1_relu"."NEUR_1_4" + -0.141756905322 * "HL_1_relu"."NEUR_1_5" + 0.190029314124 * "HL_1_relu"."NEUR_1_6" + 0.72729710212 * "HL_1_relu"."NEUR_1_7" + 0.55686499797 * "HL_1_relu"."NEUR_1_8" + 0.654988344978 AS "NEUR_2_12" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5", CASE WHEN ("HL_BA_2"."NEUR_2_6" >= 0.0) THEN "HL_BA_2"."NEUR_2_6" ELSE 0.0 END AS "NEUR_2_6", CASE WHEN ("HL_BA_2"."NEUR_2_7" >= 0.0) THEN "HL_BA_2"."NEUR_2_7" ELSE 0.0 END AS "NEUR_2_7", CASE WHEN ("HL_BA_2"."NEUR_2_8" >= 0.0) THEN "HL_BA_2"."NEUR_2_8" ELSE 0.0 END AS "NEUR_2_8", CASE WHEN ("HL_BA_2"."NEUR_2_9" >= 0.0) THEN "HL_BA_2"."NEUR_2_9" ELSE 0.0 END AS "NEUR_2_9", CASE WHEN ("HL_BA_2"."NEUR_2_10" >= 0.0) THEN "HL_BA_2"."NEUR_2_10" ELSE 0.0 END AS "NEUR_2_10", CASE WHEN ("HL_BA_2"."NEUR_2_11" >= 0.0) THEN "HL_BA_2"."NEUR_2_11" ELSE 0.0 END AS "NEUR_2_11", CASE WHEN ("HL_BA_2"."NEUR_2_12" >= 0.0) THEN "HL_BA_2"."NEUR_2_12" ELSE 0.0 END AS "NEUR_2_12" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.485139318753 * "HL_2_relu"."NEUR_2_1" + -0.331494675114 * "HL_2_relu"."NEUR_2_2" + -0.0788214118852 * "HL_2_relu"."NEUR_2_3" + -0.0811186030093 * "HL_2_relu"."NEUR_2_4" + 0.60943668019 * "HL_2_relu"."NEUR_2_5" + -0.630672831877 * "HL_2_relu"."NEUR_2_6" + 0.675533584626 * "HL_2_relu"."NEUR_2_7" + -0.323015267691 * "HL_2_relu"."NEUR_2_8" + 0.472682615062 * "HL_2_relu"."NEUR_2_9" + -0.548566592216 * "HL_2_relu"."NEUR_2_10" + 0.0146848742383 * "HL_2_relu"."NEUR_2_11" + -0.164248352498 * "HL_2_relu"."NEUR_2_12" + -0.321750898987 AS "NEUR_3_1", 0.536164188468 * "HL_2_relu"."NEUR_2_1" + 0.643908968603 * "HL_2_relu"."NEUR_2_2" + -0.626412869822 * "HL_2_relu"."NEUR_2_3" + 0.0982419679327 * "HL_2_relu"."NEUR_2_4" + -0.566894760077 * "HL_2_relu"."NEUR_2_5" + 0.28272042736 * "HL_2_relu"."NEUR_2_6" + 0.258875511075 * "HL_2_relu"."NEUR_2_7" + -0.0696198993588 * "HL_2_relu"."NEUR_2_8" + -0.794682607646 * "HL_2_relu"."NEUR_2_9" + -0.470093394774 * "HL_2_relu"."NEUR_2_10" + -0.0763571891915 * "HL_2_relu"."NEUR_2_11" + -0.591454082134 * "HL_2_relu"."NEUR_2_12" + 0.0464173323514 AS "NEUR_3_2", -0.00133515696257 * "HL_2_relu"."NEUR_2_1" + 0.0383642498538 * "HL_2_relu"."NEUR_2_2" + 0.570330894024 * "HL_2_relu"."NEUR_2_3" + -0.0374535305968 * "HL_2_relu"."NEUR_2_4" + -0.0649165389951 * "HL_2_relu"."NEUR_2_5" + 0.808602801926 * "HL_2_relu"."NEUR_2_6" + -0.032410837464 * "HL_2_relu"."NEUR_2_7" + -0.445454129236 * "HL_2_relu"."NEUR_2_8" + 0.515547782844 * "HL_2_relu"."NEUR_2_9" + 0.148673330245 * "HL_2_relu"."NEUR_2_10" + 0.615849504336 * "HL_2_relu"."NEUR_2_11" + -0.804108693963 * "HL_2_relu"."NEUR_2_12" + 0.144349393547 AS "NEUR_3_3", 0.611162087196 * "HL_2_relu"."NEUR_2_1" + -0.611888896851 * "HL_2_relu"."NEUR_2_2" + -0.00821970364732 * "HL_2_relu"."NEUR_2_3" + -0.400994013779 * "HL_2_relu"."NEUR_2_4" + -0.363923317 * "HL_2_relu"."NEUR_2_5" + 0.742478951473 * "HL_2_relu"."NEUR_2_6" + -0.780721712247 * "HL_2_relu"."NEUR_2_7" + -0.588978846998 * "HL_2_relu"."NEUR_2_8" + -0.635810967795 * "HL_2_relu"."NEUR_2_9" + -0.171003343229 * "HL_2_relu"."NEUR_2_10" + 0.118418295594 * "HL_2_relu"."NEUR_2_11" + -0.017299466475 * "HL_2_relu"."NEUR_2_12" + 0.36791406152 AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "Score_0", "OL_softmax"."NEUR_3_2" AS "Score_1", "OL_softmax"."NEUR_3_3" AS "Score_2", "OL_softmax"."NEUR_3_4" AS "Score_3", CAST(NULL AS FLOAT(53)) AS "Proba_0", CAST(NULL AS FLOAT(53)) AS "Proba_1", CAST(NULL AS FLOAT(53)) AS "Proba_2", CAST(NULL AS FLOAT(53)) AS "Proba_3", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "LogProba_2", CAST(NULL AS FLOAT(53)) AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "OL_softmax"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1", exp(CASE WHEN (score_max."Score_2" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_2" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_2", exp(CASE WHEN (score_max."Score_3" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_3" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte