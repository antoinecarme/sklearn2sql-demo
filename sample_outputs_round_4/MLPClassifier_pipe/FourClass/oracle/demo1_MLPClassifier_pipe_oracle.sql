-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.223119106979 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0520073202673 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.168015905853 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.151621173021 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.14882339307 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.243871272981 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.0964675229159 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0628896787308 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.167284537805 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.116333376744 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN -0.0363622190954 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.108199350483 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.012176526356 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 0.160586010154 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0900860430697 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.152459825211 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0979793710539 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.468310037745 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.0909217071472 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.0380000881811 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - 0.223119106979 AS impute_2, "ADS_imp_1_OUT".impute_3 - 0.0520073202673 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.168015905853 AS impute_4, "ADS_imp_1_OUT".impute_5 - -0.151621173021 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.14882339307 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.243871272981 AS impute_7, "ADS_imp_1_OUT".impute_8 - 0.0964675229159 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.0628896787308 AS impute_9, "ADS_imp_1_OUT".impute_10 - -0.167284537805 AS impute_10, "ADS_imp_1_OUT".impute_11 - 0.116333376744 AS impute_11, "ADS_imp_1_OUT".impute_12 - -0.0363622190954 AS impute_12, "ADS_imp_1_OUT".impute_13 - 0.108199350483 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.012176526356 AS impute_14, "ADS_imp_1_OUT".impute_15 - 0.160586010154 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0900860430697 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.152459825211 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.0979793710539 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.468310037745 AS impute_19, "ADS_imp_1_OUT".impute_20 - 0.0909217071472 AS impute_20, "ADS_imp_1_OUT".impute_21 - 0.0380000881811 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * -0.00726636877911 + "CenteredDataForPCA".impute_3 * -0.0122905616578 + "CenteredDataForPCA".impute_4 * -0.0745151134578 + "CenteredDataForPCA".impute_5 * 0.414918321886 + "CenteredDataForPCA".impute_6 * 0.0917514746675 + "CenteredDataForPCA".impute_7 * 0.693937492917 + "CenteredDataForPCA".impute_8 * -0.0247569707093 + "CenteredDataForPCA".impute_9 * -0.00114058452079 + "CenteredDataForPCA".impute_10 * 0.0474998508301 + "CenteredDataForPCA".impute_11 * -0.017340737954 + "CenteredDataForPCA".impute_12 * -0.450004167533 + "CenteredDataForPCA".impute_13 * -0.00500528172382 + "CenteredDataForPCA".impute_14 * -0.224582656361 + "CenteredDataForPCA".impute_15 * -0.0184248402802 + "CenteredDataForPCA".impute_16 * 0.00160629591466 + "CenteredDataForPCA".impute_17 * 0.0128242215327 + "CenteredDataForPCA".impute_18 * -0.0607913481182 + "CenteredDataForPCA".impute_19 * 0.26744344408 + "CenteredDataForPCA".impute_20 * 0.0118063547922 + "CenteredDataForPCA".impute_21 * -0.0106789845719 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.00660577644145 + "CenteredDataForPCA".impute_3 * 0.0869851244435 + "CenteredDataForPCA".impute_4 * 0.0373568123907 + "CenteredDataForPCA".impute_5 * -0.0962292309181 + "CenteredDataForPCA".impute_6 * 0.654550616345 + "CenteredDataForPCA".impute_7 * 0.103268253572 + "CenteredDataForPCA".impute_8 * 0.0809558914468 + "CenteredDataForPCA".impute_9 * -0.0361753191651 + "CenteredDataForPCA".impute_10 * 0.133862627607 + "CenteredDataForPCA".impute_11 * 0.0483129469912 + "CenteredDataForPCA".impute_12 * -0.242201089611 + "CenteredDataForPCA".impute_13 * -0.0258231355471 + "CenteredDataForPCA".impute_14 * 0.561296976081 + "CenteredDataForPCA".impute_15 * 0.141447462584 + "CenteredDataForPCA".impute_16 * 0.00676979867467 + "CenteredDataForPCA".impute_17 * 0.00652009174189 + "CenteredDataForPCA".impute_18 * -0.130693479293 + "CenteredDataForPCA".impute_19 * -0.305118095487 + "CenteredDataForPCA".impute_20 * 0.0830633345682 + "CenteredDataForPCA".impute_21 * -0.0544250013315 AS anoova_3, "CenteredDataForPCA".impute_2 * -0.0479164294318 + "CenteredDataForPCA".impute_3 * -0.00127386506602 + "CenteredDataForPCA".impute_4 * -0.152298465664 + "CenteredDataForPCA".impute_5 * 0.13252106931 + "CenteredDataForPCA".impute_6 * 0.428406080514 + "CenteredDataForPCA".impute_7 * 0.0574744999194 + "CenteredDataForPCA".impute_8 * 0.0545925039844 + "CenteredDataForPCA".impute_9 * 0.121202696058 + "CenteredDataForPCA".impute_10 * 0.215695359693 + "CenteredDataForPCA".impute_11 * -0.090845605628 + "CenteredDataForPCA".impute_12 * 0.35914229818 + "CenteredDataForPCA".impute_13 * 0.0835643657394 + "CenteredDataForPCA".impute_14 * -0.540557757675 + "CenteredDataForPCA".impute_15 * -0.162168252313 + "CenteredDataForPCA".impute_16 * 0.0442588261377 + "CenteredDataForPCA".impute_17 * -0.0356329463263 + "CenteredDataForPCA".impute_18 * 0.103383592659 + "CenteredDataForPCA".impute_19 * -0.421082331282 + "CenteredDataForPCA".impute_20 * 0.18315548382 + "CenteredDataForPCA".impute_21 * 0.135729133208 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.243506936451 + "CenteredDataForPCA".impute_3 * 0.122060224804 + "CenteredDataForPCA".impute_4 * -0.15298753506 + "CenteredDataForPCA".impute_5 * -0.344988081897 + "CenteredDataForPCA".impute_6 * 0.304466200364 + "CenteredDataForPCA".impute_7 * 0.0998661737561 + "CenteredDataForPCA".impute_8 * -0.178802104914 + "CenteredDataForPCA".impute_9 * -0.29030149082 + "CenteredDataForPCA".impute_10 * -0.148167150553 + "CenteredDataForPCA".impute_11 * 0.0162457384769 + "CenteredDataForPCA".impute_12 * 0.256765064013 + "CenteredDataForPCA".impute_13 * 0.0574760243056 + "CenteredDataForPCA".impute_14 * -0.0943070559121 + "CenteredDataForPCA".impute_15 * 0.142894532597 + "CenteredDataForPCA".impute_16 * 0.282665255904 + "CenteredDataForPCA".impute_17 * 0.0690720073839 + "CenteredDataForPCA".impute_18 * -0.219115679086 + "CenteredDataForPCA".impute_19 * 0.460762580921 + "CenteredDataForPCA".impute_20 * -0.0403031144521 + "CenteredDataForPCA".impute_21 * 0.311600686145 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.0537543085928 + "CenteredDataForPCA".impute_3 * 0.439893433191 + "CenteredDataForPCA".impute_4 * -0.191090274109 + "CenteredDataForPCA".impute_5 * 0.274280625739 + "CenteredDataForPCA".impute_6 * -0.144421090346 + "CenteredDataForPCA".impute_7 * -0.0632736362802 + "CenteredDataForPCA".impute_8 * -0.348090776825 + "CenteredDataForPCA".impute_9 * -0.198997934309 + "CenteredDataForPCA".impute_10 * -0.30518115276 + "CenteredDataForPCA".impute_11 * 0.176915264824 + "CenteredDataForPCA".impute_12 * -0.148043739489 + "CenteredDataForPCA".impute_13 * 0.317623801517 + "CenteredDataForPCA".impute_14 * 0.0107717523472 + "CenteredDataForPCA".impute_15 * 0.10824219454 + "CenteredDataForPCA".impute_16 * 0.165029991212 + "CenteredDataForPCA".impute_17 * -0.0114747180036 + "CenteredDataForPCA".impute_18 * 0.0538507754541 + "CenteredDataForPCA".impute_19 * -0.416213050325 + "CenteredDataForPCA".impute_20 * -0.172202553169 + "CenteredDataForPCA".impute_21 * 0.118356419252 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.242121564852 + "CenteredDataForPCA".impute_3 * 0.105103230069 + "CenteredDataForPCA".impute_4 * 0.436573842198 + "CenteredDataForPCA".impute_5 * 0.0344962831042 + "CenteredDataForPCA".impute_6 * -0.0288745882437 + "CenteredDataForPCA".impute_7 * 0.00902185858667 + "CenteredDataForPCA".impute_8 * -0.213676317393 + "CenteredDataForPCA".impute_9 * -0.140159054828 + "CenteredDataForPCA".impute_10 * -0.169666990326 + "CenteredDataForPCA".impute_11 * -0.24080033 + "CenteredDataForPCA".impute_12 * -0.042498920671 + "CenteredDataForPCA".impute_13 * -0.137643011777 + "CenteredDataForPCA".impute_14 * 0.0184740317338 + "CenteredDataForPCA".impute_15 * -0.16076606403 + "CenteredDataForPCA".impute_16 * 0.385688716565 + "CenteredDataForPCA".impute_17 * 0.210383499284 + "CenteredDataForPCA".impute_18 * 0.108730718192 + "CenteredDataForPCA".impute_19 * -0.021402654354 + "CenteredDataForPCA".impute_20 * 0.576532334958 + "CenteredDataForPCA".impute_21 * 0.0304801755823 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.0273248912682 + "CenteredDataForPCA".impute_3 * -0.0640110844614 + "CenteredDataForPCA".impute_4 * 0.324876025261 + "CenteredDataForPCA".impute_5 * 0.0359040174786 + "CenteredDataForPCA".impute_6 * 0.118265944376 + "CenteredDataForPCA".impute_7 * 0.0447744911728 + "CenteredDataForPCA".impute_8 * -0.0181440203288 + "CenteredDataForPCA".impute_9 * 0.488343742585 + "CenteredDataForPCA".impute_10 * -0.477459840336 + "CenteredDataForPCA".impute_11 * -0.00513897150129 + "CenteredDataForPCA".impute_12 * 0.0975184910983 + "CenteredDataForPCA".impute_13 * -0.00813264848371 + "CenteredDataForPCA".impute_14 * -0.171098195003 + "CenteredDataForPCA".impute_15 * 0.328218821531 + "CenteredDataForPCA".impute_16 * 0.153406041962 + "CenteredDataForPCA".impute_17 * -0.224120997914 + "CenteredDataForPCA".impute_18 * -0.34463687292 + "CenteredDataForPCA".impute_19 * -0.0713559287886 + "CenteredDataForPCA".impute_20 * -0.0945941646143 + "CenteredDataForPCA".impute_21 * -0.228848357092 AS anoova_8, "CenteredDataForPCA".impute_2 * 0.06566408957 + "CenteredDataForPCA".impute_3 * 0.358162848542 + "CenteredDataForPCA".impute_4 * -0.443301177674 + "CenteredDataForPCA".impute_5 * -0.0915861384614 + "CenteredDataForPCA".impute_6 * 0.00231141049968 + "CenteredDataForPCA".impute_7 * 0.01331363644 + "CenteredDataForPCA".impute_8 * 0.454815600093 + "CenteredDataForPCA".impute_9 * 0.234340983377 + "CenteredDataForPCA".impute_10 * -0.38188162077 + "CenteredDataForPCA".impute_11 * 0.115703791496 + "CenteredDataForPCA".impute_12 * -0.0165673415583 + "CenteredDataForPCA".impute_13 * 0.000242708196009 + "CenteredDataForPCA".impute_14 * 0.0852752717583 + "CenteredDataForPCA".impute_15 * -0.241287325521 + "CenteredDataForPCA".impute_16 * 0.0450349820458 + "CenteredDataForPCA".impute_17 * -0.11035482073 + "CenteredDataForPCA".impute_18 * 0.0979523254672 + "CenteredDataForPCA".impute_19 * 0.155027225726 + "CenteredDataForPCA".impute_20 * 0.3414974328 + "CenteredDataForPCA".impute_21 * -0.10538629901 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.0564869231582 + "CenteredDataForPCA".impute_3 * -0.0189993794316 + "CenteredDataForPCA".impute_4 * 0.256812735088 + "CenteredDataForPCA".impute_5 * -0.0714958620693 + "CenteredDataForPCA".impute_6 * 0.264101014873 + "CenteredDataForPCA".impute_7 * 0.0906904317387 + "CenteredDataForPCA".impute_8 * 0.0950606305631 + "CenteredDataForPCA".impute_9 * -0.198493352489 + "CenteredDataForPCA".impute_10 * -0.37428813419 + "CenteredDataForPCA".impute_11 * -0.138129687182 + "CenteredDataForPCA".impute_12 * 0.0645324119723 + "CenteredDataForPCA".impute_13 * 0.251028274173 + "CenteredDataForPCA".impute_14 * -0.0295666960496 + "CenteredDataForPCA".impute_15 * -0.420323895432 + "CenteredDataForPCA".impute_16 * -0.188999655452 + "CenteredDataForPCA".impute_17 * 0.251974845403 + "CenteredDataForPCA".impute_18 * 0.252025756748 + "CenteredDataForPCA".impute_19 * 0.0304453867091 + "CenteredDataForPCA".impute_20 * -0.379946653838 + "CenteredDataForPCA".impute_21 * -0.295060349755 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.0285787084767 + "CenteredDataForPCA".impute_3 * 0.0498465836895 + "CenteredDataForPCA".impute_4 * -0.168666976993 + "CenteredDataForPCA".impute_5 * 0.101975750288 + "CenteredDataForPCA".impute_6 * -0.146520969331 + "CenteredDataForPCA".impute_7 * -0.0724408394382 + "CenteredDataForPCA".impute_8 * 0.403648230948 + "CenteredDataForPCA".impute_9 * -0.0566908439023 + "CenteredDataForPCA".impute_10 * 0.0571346752977 + "CenteredDataForPCA".impute_11 * -0.543869103023 + "CenteredDataForPCA".impute_12 * -0.0551718730107 + "CenteredDataForPCA".impute_13 * -0.0344487403634 + "CenteredDataForPCA".impute_14 * 0.0153453217426 + "CenteredDataForPCA".impute_15 * -0.0156631687519 + "CenteredDataForPCA".impute_16 * 0.331784312063 + "CenteredDataForPCA".impute_17 * 0.311153131371 + "CenteredDataForPCA".impute_18 * -0.401552150485 + "CenteredDataForPCA".impute_19 * -0.14913455423 + "CenteredDataForPCA".impute_20 * -0.264308900548 + "CenteredDataForPCA".impute_21 * 0.0312758521861 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.524387885094 + "CenteredDataForPCA".impute_3 * -0.346512272324 + "CenteredDataForPCA".impute_4 * -0.242103670294 + "CenteredDataForPCA".impute_5 * -0.0346426553061 + "CenteredDataForPCA".impute_6 * 0.0804385048227 + "CenteredDataForPCA".impute_7 * -0.00839571628327 + "CenteredDataForPCA".impute_8 * -0.270627084767 + "CenteredDataForPCA".impute_9 * 0.0442584367943 + "CenteredDataForPCA".impute_10 * -0.255171294421 + "CenteredDataForPCA".impute_11 * -0.151287485995 + "CenteredDataForPCA".impute_12 * -0.0316051578281 + "CenteredDataForPCA".impute_13 * 0.120131620287 + "CenteredDataForPCA".impute_14 * 0.107594735186 + "CenteredDataForPCA".impute_15 * -0.284019762577 + "CenteredDataForPCA".impute_16 * -0.220890010339 + "CenteredDataForPCA".impute_17 * -0.150847866795 + "CenteredDataForPCA".impute_18 * -0.293792523196 + "CenteredDataForPCA".impute_19 * -0.0352315725724 + "CenteredDataForPCA".impute_20 * -0.0121036090822 + "CenteredDataForPCA".impute_21 * 0.32934738499 AS anoova_12, "CenteredDataForPCA".impute_2 * 0.163475912621 + "CenteredDataForPCA".impute_3 * -0.397591932977 + "CenteredDataForPCA".impute_4 * -0.223758560413 + "CenteredDataForPCA".impute_5 * 0.0491849642494 + "CenteredDataForPCA".impute_6 * -0.0126816692417 + "CenteredDataForPCA".impute_7 * -0.022837117583 + "CenteredDataForPCA".impute_8 * 0.114611179406 + "CenteredDataForPCA".impute_9 * -0.413485220061 + "CenteredDataForPCA".impute_10 * -0.115093333188 + "CenteredDataForPCA".impute_11 * 0.30071395134 + "CenteredDataForPCA".impute_12 * 0.0754077823115 + "CenteredDataForPCA".impute_13 * 0.147588152063 + "CenteredDataForPCA".impute_14 * -0.134298572745 + "CenteredDataForPCA".impute_15 * 0.264404338699 + "CenteredDataForPCA".impute_16 * 0.0255587489692 + "CenteredDataForPCA".impute_17 * 0.250902142719 + "CenteredDataForPCA".impute_18 * -0.172672358264 + "CenteredDataForPCA".impute_19 * -0.0854677818333 + "CenteredDataForPCA".impute_20 * 0.266173034714 + "CenteredDataForPCA".impute_21 * -0.432732828671 AS anoova_13, "CenteredDataForPCA".impute_2 * -0.486547195917 + "CenteredDataForPCA".impute_3 * 0.104785115864 + "CenteredDataForPCA".impute_4 * 0.136827210367 + "CenteredDataForPCA".impute_5 * 0.0618451053328 + "CenteredDataForPCA".impute_6 * -0.120585845978 + "CenteredDataForPCA".impute_7 * -0.0439412884993 + "CenteredDataForPCA".impute_8 * 0.0283518935737 + "CenteredDataForPCA".impute_9 * -0.129119612984 + "CenteredDataForPCA".impute_10 * -0.0934296802251 + "CenteredDataForPCA".impute_11 * -0.197595798548 + "CenteredDataForPCA".impute_12 * -0.0297660017262 + "CenteredDataForPCA".impute_13 * 0.16385702238 + "CenteredDataForPCA".impute_14 * -0.00667233190854 + "CenteredDataForPCA".impute_15 * -0.0540562024099 + "CenteredDataForPCA".impute_16 * -0.542317039822 + "CenteredDataForPCA".impute_17 * 0.000514811614019 + "CenteredDataForPCA".impute_18 * -0.396332969991 + "CenteredDataForPCA".impute_19 * -0.0623468573112 + "CenteredDataForPCA".impute_20 * 0.394454648463 + "CenteredDataForPCA".impute_21 * 0.0815691064506 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.077415258353 + "CenteredDataForPCA".impute_3 * 0.225978423098 + "CenteredDataForPCA".impute_4 * -0.180920023802 + "CenteredDataForPCA".impute_5 * -0.0196202681759 + "CenteredDataForPCA".impute_6 * 0.054021799254 + "CenteredDataForPCA".impute_7 * -0.00384758374737 + "CenteredDataForPCA".impute_8 * -0.226860145721 + "CenteredDataForPCA".impute_9 * -0.341505436096 + "CenteredDataForPCA".impute_10 * 0.0163370608201 + "CenteredDataForPCA".impute_11 * -0.340194197698 + "CenteredDataForPCA".impute_12 * 0.0791527932932 + "CenteredDataForPCA".impute_13 * -0.414514438364 + "CenteredDataForPCA".impute_14 * -0.0802717865724 + "CenteredDataForPCA".impute_15 * -0.00148826344431 + "CenteredDataForPCA".impute_16 * -0.101718732108 + "CenteredDataForPCA".impute_17 * -0.461875249369 + "CenteredDataForPCA".impute_18 * -0.0448836930614 + "CenteredDataForPCA".impute_19 * -0.00861432158137 + "CenteredDataForPCA".impute_20 * -0.0592158817476 + "CenteredDataForPCA".impute_21 * -0.457160915494 AS anoova_15, "CenteredDataForPCA".impute_2 * -0.237251156553 + "CenteredDataForPCA".impute_3 * -0.0790886462114 + "CenteredDataForPCA".impute_4 * -0.071801634019 + "CenteredDataForPCA".impute_5 * -0.0504927408359 + "CenteredDataForPCA".impute_6 * -0.0634854567728 + "CenteredDataForPCA".impute_7 * -0.0482945266855 + "CenteredDataForPCA".impute_8 * -0.293338230291 + "CenteredDataForPCA".impute_9 * 0.1854253198 + "CenteredDataForPCA".impute_10 * 0.28201620843 + "CenteredDataForPCA".impute_11 * 0.137334567898 + "CenteredDataForPCA".impute_12 * -0.031144712697 + "CenteredDataForPCA".impute_13 * 0.270557684349 + "CenteredDataForPCA".impute_14 * 0.105731082575 + "CenteredDataForPCA".impute_15 * -0.509110438524 + "CenteredDataForPCA".impute_16 * 0.348864384033 + "CenteredDataForPCA".impute_17 * -0.0898379796724 + "CenteredDataForPCA".impute_18 * -0.295318612853 + "CenteredDataForPCA".impute_19 * 0.0526382033668 + "CenteredDataForPCA".impute_20 * 0.0394213044278 + "CenteredDataForPCA".impute_21 * -0.372432878265 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.0403782477398 + "CenteredDataForPCA".impute_3 * 0.144184502734 + "CenteredDataForPCA".impute_4 * -0.156724001507 + "CenteredDataForPCA".impute_5 * 0.0103349487548 + "CenteredDataForPCA".impute_6 * 0.0440267257405 + "CenteredDataForPCA".impute_7 * -0.0164725912783 + "CenteredDataForPCA".impute_8 * -0.291939333241 + "CenteredDataForPCA".impute_9 * 0.229583874457 + "CenteredDataForPCA".impute_10 * -0.077786207445 + "CenteredDataForPCA".impute_11 * 0.227075263758 + "CenteredDataForPCA".impute_12 * 0.0497019922792 + "CenteredDataForPCA".impute_13 * -0.552603615512 + "CenteredDataForPCA".impute_14 * -0.0526702846179 + "CenteredDataForPCA".impute_15 * -0.13103191481 + "CenteredDataForPCA".impute_16 * -0.203930526261 + "CenteredDataForPCA".impute_17 * 0.583128735045 + "CenteredDataForPCA".impute_18 * -0.176806787565 + "CenteredDataForPCA".impute_19 * -0.0701609223235 + "CenteredDataForPCA".impute_20 * -0.0746458026192 + "CenteredDataForPCA".impute_21 * -0.0631170877946 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.508807327579 + "CenteredDataForPCA".impute_3 * -0.514792556503 + "CenteredDataForPCA".impute_4 * -0.180169949885 + "CenteredDataForPCA".impute_5 * 0.0896564112315 + "CenteredDataForPCA".impute_6 * -0.013425281353 + "CenteredDataForPCA".impute_7 * -0.0188169823917 + "CenteredDataForPCA".impute_8 * -0.00655477441764 + "CenteredDataForPCA".impute_9 * -0.0669638183507 + "CenteredDataForPCA".impute_10 * -0.314857896082 + "CenteredDataForPCA".impute_11 * -0.0612132894995 + "CenteredDataForPCA".impute_12 * -0.123754664745 + "CenteredDataForPCA".impute_13 * -0.338193976595 + "CenteredDataForPCA".impute_14 * 0.124365261735 + "CenteredDataForPCA".impute_15 * -0.106965779414 + "CenteredDataForPCA".impute_16 * 0.21462453618 + "CenteredDataForPCA".impute_17 * -0.130926286847 + "CenteredDataForPCA".impute_18 * 0.239472684207 + "CenteredDataForPCA".impute_19 * -0.175852846636 + "CenteredDataForPCA".impute_20 * 0.0228118216391 + "CenteredDataForPCA".impute_21 * 0.138073585659 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.0806343669355 + "CenteredDataForPCA".impute_3 * 0.0731693574295 + "CenteredDataForPCA".impute_4 * 0.317116903104 + "CenteredDataForPCA".impute_5 * 0.08614890484 + "CenteredDataForPCA".impute_6 * -0.0248603913441 + "CenteredDataForPCA".impute_7 * 0.00136852537862 + "CenteredDataForPCA".impute_8 * 0.319280655789 + "CenteredDataForPCA".impute_9 * -0.326602749807 + "CenteredDataForPCA".impute_10 * -0.0138742463292 + "CenteredDataForPCA".impute_11 * 0.478553351741 + "CenteredDataForPCA".impute_12 * 0.0180544805876 + "CenteredDataForPCA".impute_13 * -0.277651642831 + "CenteredDataForPCA".impute_14 * -0.103310640047 + "CenteredDataForPCA".impute_15 * -0.333471623664 + "CenteredDataForPCA".impute_16 * 0.0864946482729 + "CenteredDataForPCA".impute_17 * -0.249711511047 + "CenteredDataForPCA".impute_18 * -0.318788504727 + "CenteredDataForPCA".impute_19 * -0.104540353263 + "CenteredDataForPCA".impute_20 * -0.13497545671 + "CenteredDataForPCA".impute_21 * 0.204502384595 AS anoova_19, "CenteredDataForPCA".impute_2 * 1.30884987254e-17 + "CenteredDataForPCA".impute_3 * -3.07558759541e-17 + "CenteredDataForPCA".impute_4 * 1.77213025371e-16 + "CenteredDataForPCA".impute_5 * 0.436423613149 + "CenteredDataForPCA".impute_6 * -0.115059829321 + "CenteredDataForPCA".impute_7 * 0.330394335606 + "CenteredDataForPCA".impute_8 * -1.96379127952e-16 + "CenteredDataForPCA".impute_9 * 2.62035027884e-18 + "CenteredDataForPCA".impute_10 * 2.29158567979e-17 + "CenteredDataForPCA".impute_11 * 8.77531091151e-17 + "CenteredDataForPCA".impute_12 * 0.68254084577 + "CenteredDataForPCA".impute_13 * 1.90294912394e-17 + "CenteredDataForPCA".impute_14 * 0.468079405813 + "CenteredDataForPCA".impute_15 * -2.11081281611e-16 + "CenteredDataForPCA".impute_16 * 1.53698210559e-16 + "CenteredDataForPCA".impute_17 * -9.3727576438e-17 + "CenteredDataForPCA".impute_18 * -1.38573152335e-16 + "CenteredDataForPCA".impute_19 * 0.046635954707 + "CenteredDataForPCA".impute_20 * -6.66135178352e-17 + "CenteredDataForPCA".impute_21 * -7.82999213389e-17 AS anoova_20, "CenteredDataForPCA".impute_2 * -5.75108770994e-17 + "CenteredDataForPCA".impute_3 * -9.67843323417e-17 + "CenteredDataForPCA".impute_4 * 4.9419640889e-17 + "CenteredDataForPCA".impute_5 * 0.60331216974 + "CenteredDataForPCA".impute_6 * 0.340464879895 + "CenteredDataForPCA".impute_7 * -0.600093933778 + "CenteredDataForPCA".impute_8 * 7.60004131906e-17 + "CenteredDataForPCA".impute_9 * 1.37097235632e-16 + "CenteredDataForPCA".impute_10 * 1.09499060978e-16 + "CenteredDataForPCA".impute_11 * -1.25791145265e-16 + "CenteredDataForPCA".impute_12 * -0.0665410956572 + "CenteredDataForPCA".impute_13 * -4.61804710862e-18 + "CenteredDataForPCA".impute_14 * 0.0024901346802 + "CenteredDataForPCA".impute_15 * -2.81028530644e-17 + "CenteredDataForPCA".impute_16 * -2.1806816762e-16 + "CenteredDataForPCA".impute_17 * -7.86799070533e-18 + "CenteredDataForPCA".impute_18 * 1.63171627099e-16 + "CenteredDataForPCA".impute_19 * 0.394400106316 + "CenteredDataForPCA".impute_20 * 6.29092003338e-18 + "CenteredDataForPCA".impute_21 * -1.05365449404e-16 AS anoova_21 
FROM "CenteredDataForPCA"), 
"IL" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", "ADS_ano_2_OUT".anoova_2 AS anoova_2, "ADS_ano_2_OUT".anoova_3 AS anoova_3, "ADS_ano_2_OUT".anoova_4 AS anoova_4, "ADS_ano_2_OUT".anoova_5 AS anoova_5, "ADS_ano_2_OUT".anoova_6 AS anoova_6, "ADS_ano_2_OUT".anoova_7 AS anoova_7, "ADS_ano_2_OUT".anoova_8 AS anoova_8, "ADS_ano_2_OUT".anoova_9 AS anoova_9, "ADS_ano_2_OUT".anoova_10 AS anoova_10, "ADS_ano_2_OUT".anoova_11 AS anoova_11, "ADS_ano_2_OUT".anoova_12 AS anoova_12, "ADS_ano_2_OUT".anoova_13 AS anoova_13, "ADS_ano_2_OUT".anoova_14 AS anoova_14, "ADS_ano_2_OUT".anoova_15 AS anoova_15, "ADS_ano_2_OUT".anoova_16 AS anoova_16, "ADS_ano_2_OUT".anoova_17 AS anoova_17, "ADS_ano_2_OUT".anoova_18 AS anoova_18, "ADS_ano_2_OUT".anoova_19 AS anoova_19, "ADS_ano_2_OUT".anoova_20 AS anoova_20, "ADS_ano_2_OUT".anoova_21 AS anoova_21 
FROM "ADS_ano_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.0338530707228 * "IL".anoova_2 + 0.215743740235 * "IL".anoova_3 + -0.623666999099 * "IL".anoova_4 + -0.539948133261 * "IL".anoova_5 + -0.0124645644457 * "IL".anoova_6 + -0.113972737343 * "IL".anoova_7 + -0.245299189226 * "IL".anoova_8 + 0.286351413408 * "IL".anoova_9 + -0.273685167125 * "IL".anoova_10 + 0.424398966148 * "IL".anoova_11 + -0.215989957551 * "IL".anoova_12 + -0.141418193311 * "IL".anoova_13 + 0.259830769987 * "IL".anoova_14 + -0.446921109709 * "IL".anoova_15 + -0.039178672424 * "IL".anoova_16 + 0.265704151866 * "IL".anoova_17 + 0.0273322280015 * "IL".anoova_18 + -0.00802446320663 * "IL".anoova_19 + 0.136246965824 * "IL".anoova_20 + -0.160924321201 * "IL".anoova_21 + 0.367248584836 AS "NEUR_1_1", 0.434020431857 * "IL".anoova_2 + 0.0834613860945 * "IL".anoova_3 + 0.233068473739 * "IL".anoova_4 + 0.235511032183 * "IL".anoova_5 + 0.207940819245 * "IL".anoova_6 + 0.0606609416784 * "IL".anoova_7 + -0.221788188629 * "IL".anoova_8 + -0.244448493477 * "IL".anoova_9 + -0.0955850114469 * "IL".anoova_10 + -0.132451430655 * "IL".anoova_11 + -0.0576708461784 * "IL".anoova_12 + 0.419474193788 * "IL".anoova_13 + -0.350177127195 * "IL".anoova_14 + -0.17563422499 * "IL".anoova_15 + -0.0690953130253 * "IL".anoova_16 + 0.176873690793 * "IL".anoova_17 + -0.45465755264 * "IL".anoova_18 + 0.0735058955681 * "IL".anoova_19 + 0.0625982105598 * "IL".anoova_20 + 0.0159254541638 * "IL".anoova_21 + 0.054497462633 AS "NEUR_1_2", 0.227707911126 * "IL".anoova_2 + 0.105634828758 * "IL".anoova_3 + 0.397343362122 * "IL".anoova_4 + -0.53061450834 * "IL".anoova_5 + -0.300502480197 * "IL".anoova_6 + 0.0672653814624 * "IL".anoova_7 + 0.210882071215 * "IL".anoova_8 + -0.204509484954 * "IL".anoova_9 + 0.12327553053 * "IL".anoova_10 + 0.0992264832436 * "IL".anoova_11 + -0.318757409799 * "IL".anoova_12 + -0.153277013167 * "IL".anoova_13 + 0.315919582887 * "IL".anoova_14 + 0.058298353876 * "IL".anoova_15 + 0.150875317877 * "IL".anoova_16 + 0.607720140696 * "IL".anoova_17 + 0.239152672038 * "IL".anoova_18 + 0.226007500529 * "IL".anoova_19 + -0.211756355937 * "IL".anoova_20 + -0.192263245547 * "IL".anoova_21 + 0.103358577172 AS "NEUR_1_3", -0.102669551537 * "IL".anoova_2 + -0.13112349059 * "IL".anoova_3 + 0.180288042546 * "IL".anoova_4 + 0.65431174017 * "IL".anoova_5 + -0.0457051022178 * "IL".anoova_6 + -0.15842926187 * "IL".anoova_7 + 0.0268275973394 * "IL".anoova_8 + -0.343430671909 * "IL".anoova_9 + -0.412489343716 * "IL".anoova_10 + -0.415159440077 * "IL".anoova_11 + 0.0223568062484 * "IL".anoova_12 + 0.285907060624 * "IL".anoova_13 + -0.681228737312 * "IL".anoova_14 + 0.0920290267265 * "IL".anoova_15 + 0.107241798344 * "IL".anoova_16 + -0.0600818980342 * "IL".anoova_17 + 0.151592187105 * "IL".anoova_18 + -0.262972507699 * "IL".anoova_19 + 0.228221402986 * "IL".anoova_20 + 0.169349259609 * "IL".anoova_21 + 0.551012662121 AS "NEUR_1_4", -0.283372658407 * "IL".anoova_2 + 0.211914794809 * "IL".anoova_3 + 0.633726258137 * "IL".anoova_4 + -0.0222446321698 * "IL".anoova_5 + 0.216724112911 * "IL".anoova_6 + 0.00139649492694 * "IL".anoova_7 + 0.27998264527 * "IL".anoova_8 + -0.144989612324 * "IL".anoova_9 + 0.19661384288 * "IL".anoova_10 + -0.0198812712915 * "IL".anoova_11 + 0.260100428502 * "IL".anoova_12 + -0.255944583098 * "IL".anoova_13 + 0.397978450219 * "IL".anoova_14 + -0.467020959327 * "IL".anoova_15 + 0.258518456502 * "IL".anoova_16 + -0.00426510474894 * "IL".anoova_17 + -0.175045701941 * "IL".anoova_18 + 0.108779430943 * "IL".anoova_19 + 0.0693704591062 * "IL".anoova_20 + 0.137120773584 * "IL".anoova_21 + 0.661550467784 AS "NEUR_1_5", 0.068647834954 * "IL".anoova_2 + 0.605865391002 * "IL".anoova_3 + 0.122414991908 * "IL".anoova_4 + 0.137030744064 * "IL".anoova_5 + 0.161377299843 * "IL".anoova_6 + 0.103540369823 * "IL".anoova_7 + -0.34089059894 * "IL".anoova_8 + -0.204490112347 * "IL".anoova_9 + -0.136707026698 * "IL".anoova_10 + -0.554608219387 * "IL".anoova_11 + -0.0493304541437 * "IL".anoova_12 + 0.400416147032 * "IL".anoova_13 + -0.278571552263 * "IL".anoova_14 + 0.513929438736 * "IL".anoova_15 + 0.251147360473 * "IL".anoova_16 + 0.121476349027 * "IL".anoova_17 + -0.205751525125 * "IL".anoova_18 + 0.0446918980651 * "IL".anoova_19 + 0.295820530043 * "IL".anoova_20 + 0.00331626229528 * "IL".anoova_21 + 0.485821442006 AS "NEUR_1_6", -0.0943830757444 * "IL".anoova_2 + -0.570935095019 * "IL".anoova_3 + 0.163713220992 * "IL".anoova_4 + -0.0507242400816 * "IL".anoova_5 + 0.265824819102 * "IL".anoova_6 + -0.387710741702 * "IL".anoova_7 + -0.442611357425 * "IL".anoova_8 + 0.00312949518631 * "IL".anoova_9 + 0.295057357811 * "IL".anoova_10 + -0.012533182232 * "IL".anoova_11 + -0.124091216801 * "IL".anoova_12 + -0.199813355942 * "IL".anoova_13 + 0.341569132096 * "IL".anoova_14 + 0.0790756397743 * "IL".anoova_15 + 0.255601525666 * "IL".anoova_16 + -0.615360106877 * "IL".anoova_17 + 0.170428881641 * "IL".anoova_18 + -0.253440533157 * "IL".anoova_19 + -0.171399933625 * "IL".anoova_20 + -0.00847783339496 * "IL".anoova_21 + -0.298430538798 AS "NEUR_1_7", 0.445680555937 * "IL".anoova_2 + -0.542698829533 * "IL".anoova_3 + 0.128675738796 * "IL".anoova_4 + 0.0678218572802 * "IL".anoova_5 + 0.00982724036678 * "IL".anoova_6 + -0.375575900617 * "IL".anoova_7 + -0.163712739911 * "IL".anoova_8 + -0.578986118292 * "IL".anoova_9 + -0.239673793655 * "IL".anoova_10 + -0.275451893969 * "IL".anoova_11 + -0.588081371759 * "IL".anoova_12 + -0.400899124246 * "IL".anoova_13 + 0.387094813263 * "IL".anoova_14 + 0.396817538512 * "IL".anoova_15 + -0.00344884666592 * "IL".anoova_16 + -0.384749345662 * "IL".anoova_17 + -0.00638757517774 * "IL".anoova_18 + 0.608684098799 * "IL".anoova_19 + 0.185669257614 * "IL".anoova_20 + -0.237769705675 * "IL".anoova_21 + -0.0717570740416 AS "NEUR_1_8" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3", CASE WHEN ("HL_BA_1"."NEUR_1_4" >= 0.0) THEN "HL_BA_1"."NEUR_1_4" ELSE 0.0 END AS "NEUR_1_4", CASE WHEN ("HL_BA_1"."NEUR_1_5" >= 0.0) THEN "HL_BA_1"."NEUR_1_5" ELSE 0.0 END AS "NEUR_1_5", CASE WHEN ("HL_BA_1"."NEUR_1_6" >= 0.0) THEN "HL_BA_1"."NEUR_1_6" ELSE 0.0 END AS "NEUR_1_6", CASE WHEN ("HL_BA_1"."NEUR_1_7" >= 0.0) THEN "HL_BA_1"."NEUR_1_7" ELSE 0.0 END AS "NEUR_1_7", CASE WHEN ("HL_BA_1"."NEUR_1_8" >= 0.0) THEN "HL_BA_1"."NEUR_1_8" ELSE 0.0 END AS "NEUR_1_8" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.430481124792 * "HL_1_relu"."NEUR_1_1" + -0.601220988066 * "HL_1_relu"."NEUR_1_2" + -0.205999390971 * "HL_1_relu"."NEUR_1_3" + -0.688092345231 * "HL_1_relu"."NEUR_1_4" + -0.300554971326 * "HL_1_relu"."NEUR_1_5" + 0.640862713892 * "HL_1_relu"."NEUR_1_6" + 0.212072097727 * "HL_1_relu"."NEUR_1_7" + 0.336163627524 * "HL_1_relu"."NEUR_1_8" + 0.344773028083 AS "NEUR_2_1", -0.138621604429 * "HL_1_relu"."NEUR_1_1" + 0.356078294955 * "HL_1_relu"."NEUR_1_2" + 0.395723721886 * "HL_1_relu"."NEUR_1_3" + -0.585253699891 * "HL_1_relu"."NEUR_1_4" + -0.214540386131 * "HL_1_relu"."NEUR_1_5" + 0.28298855411 * "HL_1_relu"."NEUR_1_6" + -0.556498365168 * "HL_1_relu"."NEUR_1_7" + 0.221985594514 * "HL_1_relu"."NEUR_1_8" + 0.356361988499 AS "NEUR_2_2", 0.00388451861086 * "HL_1_relu"."NEUR_1_1" + 0.192017392753 * "HL_1_relu"."NEUR_1_2" + 0.310146673892 * "HL_1_relu"."NEUR_1_3" + 0.102801269383 * "HL_1_relu"."NEUR_1_4" + 0.0339829554564 * "HL_1_relu"."NEUR_1_5" + -0.288802203457 * "HL_1_relu"."NEUR_1_6" + -0.233583571922 * "HL_1_relu"."NEUR_1_7" + 0.657549819301 * "HL_1_relu"."NEUR_1_8" + -0.37514623291 AS "NEUR_2_3", -0.705763148615 * "HL_1_relu"."NEUR_1_1" + -0.337347741609 * "HL_1_relu"."NEUR_1_2" + 0.160784372747 * "HL_1_relu"."NEUR_1_3" + -0.174813641785 * "HL_1_relu"."NEUR_1_4" + 0.32925671356 * "HL_1_relu"."NEUR_1_5" + -0.300596775052 * "HL_1_relu"."NEUR_1_6" + -0.580857131118 * "HL_1_relu"."NEUR_1_7" + -0.237157434776 * "HL_1_relu"."NEUR_1_8" + 0.0574263043562 AS "NEUR_2_4", -0.429634822657 * "HL_1_relu"."NEUR_1_1" + 0.373035273375 * "HL_1_relu"."NEUR_1_2" + -0.151298651797 * "HL_1_relu"."NEUR_1_3" + -0.0286498936583 * "HL_1_relu"."NEUR_1_4" + 0.0524183731171 * "HL_1_relu"."NEUR_1_5" + -0.0751535740698 * "HL_1_relu"."NEUR_1_6" + 0.122644426757 * "HL_1_relu"."NEUR_1_7" + 0.0156922207038 * "HL_1_relu"."NEUR_1_8" + -0.559130451511 AS "NEUR_2_5", -0.369473783612 * "HL_1_relu"."NEUR_1_1" + 0.345021541783 * "HL_1_relu"."NEUR_1_2" + -0.440334682193 * "HL_1_relu"."NEUR_1_3" + 0.626577324871 * "HL_1_relu"."NEUR_1_4" + 0.531052857813 * "HL_1_relu"."NEUR_1_5" + -0.293312114747 * "HL_1_relu"."NEUR_1_6" + 0.131307382519 * "HL_1_relu"."NEUR_1_7" + -0.0456149059248 * "HL_1_relu"."NEUR_1_8" + 0.204477195599 AS "NEUR_2_6", 0.49442003986 * "HL_1_relu"."NEUR_1_1" + -0.166601787826 * "HL_1_relu"."NEUR_1_2" + -0.358954791886 * "HL_1_relu"."NEUR_1_3" + 0.389962348069 * "HL_1_relu"."NEUR_1_4" + -0.443107182665 * "HL_1_relu"."NEUR_1_5" + -0.498115008706 * "HL_1_relu"."NEUR_1_6" + 0.0973631907115 * "HL_1_relu"."NEUR_1_7" + 0.472624822368 * "HL_1_relu"."NEUR_1_8" + 0.724120355472 AS "NEUR_2_7", -0.0820265525635 * "HL_1_relu"."NEUR_1_1" + -0.164285975553 * "HL_1_relu"."NEUR_1_2" + 0.159279381384 * "HL_1_relu"."NEUR_1_3" + -0.449420896828 * "HL_1_relu"."NEUR_1_4" + 0.474862415706 * "HL_1_relu"."NEUR_1_5" + -0.280613316919 * "HL_1_relu"."NEUR_1_6" + -0.602607762513 * "HL_1_relu"."NEUR_1_7" + 0.0258443917912 * "HL_1_relu"."NEUR_1_8" + 0.624662508279 AS "NEUR_2_8", -0.188638977595 * "HL_1_relu"."NEUR_1_1" + 0.194367978501 * "HL_1_relu"."NEUR_1_2" + -0.223193946496 * "HL_1_relu"."NEUR_1_3" + 0.0861149347194 * "HL_1_relu"."NEUR_1_4" + -0.336569042179 * "HL_1_relu"."NEUR_1_5" + -0.187022368667 * "HL_1_relu"."NEUR_1_6" + -0.389374628393 * "HL_1_relu"."NEUR_1_7" + -0.316037739064 * "HL_1_relu"."NEUR_1_8" + -0.256084669132 AS "NEUR_2_9", 0.38925714846 * "HL_1_relu"."NEUR_1_1" + -0.0983226988698 * "HL_1_relu"."NEUR_1_2" + 0.111371241243 * "HL_1_relu"."NEUR_1_3" + -0.122846440793 * "HL_1_relu"."NEUR_1_4" + 0.55547909847 * "HL_1_relu"."NEUR_1_5" + -0.199491910036 * "HL_1_relu"."NEUR_1_6" + 0.188368119614 * "HL_1_relu"."NEUR_1_7" + -0.605631432981 * "HL_1_relu"."NEUR_1_8" + 0.431958651555 AS "NEUR_2_10", 0.194526908031 * "HL_1_relu"."NEUR_1_1" + 0.149177467643 * "HL_1_relu"."NEUR_1_2" + -0.119165877758 * "HL_1_relu"."NEUR_1_3" + -0.279554439176 * "HL_1_relu"."NEUR_1_4" + 0.481381475016 * "HL_1_relu"."NEUR_1_5" + -0.330497197236 * "HL_1_relu"."NEUR_1_6" + -0.0597897318661 * "HL_1_relu"."NEUR_1_7" + -0.698183210183 * "HL_1_relu"."NEUR_1_8" + -0.205224138923 AS "NEUR_2_11", -0.71276682892 * "HL_1_relu"."NEUR_1_1" + -0.40657438389 * "HL_1_relu"."NEUR_1_2" + -0.516778295768 * "HL_1_relu"."NEUR_1_3" + 0.511879442091 * "HL_1_relu"."NEUR_1_4" + -0.133664255978 * "HL_1_relu"."NEUR_1_5" + 0.380374274496 * "HL_1_relu"."NEUR_1_6" + 0.462446675783 * "HL_1_relu"."NEUR_1_7" + 0.44594144902 * "HL_1_relu"."NEUR_1_8" + 0.670747593251 AS "NEUR_2_12" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5", CASE WHEN ("HL_BA_2"."NEUR_2_6" >= 0.0) THEN "HL_BA_2"."NEUR_2_6" ELSE 0.0 END AS "NEUR_2_6", CASE WHEN ("HL_BA_2"."NEUR_2_7" >= 0.0) THEN "HL_BA_2"."NEUR_2_7" ELSE 0.0 END AS "NEUR_2_7", CASE WHEN ("HL_BA_2"."NEUR_2_8" >= 0.0) THEN "HL_BA_2"."NEUR_2_8" ELSE 0.0 END AS "NEUR_2_8", CASE WHEN ("HL_BA_2"."NEUR_2_9" >= 0.0) THEN "HL_BA_2"."NEUR_2_9" ELSE 0.0 END AS "NEUR_2_9", CASE WHEN ("HL_BA_2"."NEUR_2_10" >= 0.0) THEN "HL_BA_2"."NEUR_2_10" ELSE 0.0 END AS "NEUR_2_10", CASE WHEN ("HL_BA_2"."NEUR_2_11" >= 0.0) THEN "HL_BA_2"."NEUR_2_11" ELSE 0.0 END AS "NEUR_2_11", CASE WHEN ("HL_BA_2"."NEUR_2_12" >= 0.0) THEN "HL_BA_2"."NEUR_2_12" ELSE 0.0 END AS "NEUR_2_12" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.741129086352 * "HL_2_relu"."NEUR_2_1" + -0.136471408266 * "HL_2_relu"."NEUR_2_2" + 0.0626737191762 * "HL_2_relu"."NEUR_2_3" + 0.216049377681 * "HL_2_relu"."NEUR_2_4" + 0.328962812731 * "HL_2_relu"."NEUR_2_5" + -0.703936851153 * "HL_2_relu"."NEUR_2_6" + 0.743955976259 * "HL_2_relu"."NEUR_2_7" + 0.121639629275 * "HL_2_relu"."NEUR_2_8" + 0.214857534987 * "HL_2_relu"."NEUR_2_9" + -0.385437619626 * "HL_2_relu"."NEUR_2_10" + -0.220176454835 * "HL_2_relu"."NEUR_2_11" + -0.444450371182 * "HL_2_relu"."NEUR_2_12" + -0.164934304396 AS "NEUR_3_1", 0.38949979606 * "HL_2_relu"."NEUR_2_1" + 0.402199575145 * "HL_2_relu"."NEUR_2_2" + -0.640016134327 * "HL_2_relu"."NEUR_2_3" + 0.00563569602086 * "HL_2_relu"."NEUR_2_4" + -0.251433357439 * "HL_2_relu"."NEUR_2_5" + 0.616021707375 * "HL_2_relu"."NEUR_2_6" + 0.448091097713 * "HL_2_relu"."NEUR_2_7" + -0.594172765597 * "HL_2_relu"."NEUR_2_8" + -0.518502151413 * "HL_2_relu"."NEUR_2_9" + -0.745243201804 * "HL_2_relu"."NEUR_2_10" + -0.21882823366 * "HL_2_relu"."NEUR_2_11" + -0.247007595496 * "HL_2_relu"."NEUR_2_12" + 0.0833282778435 AS "NEUR_3_2", -0.0568463185446 * "HL_2_relu"."NEUR_2_1" + 0.156395064473 * "HL_2_relu"."NEUR_2_2" + 0.630649694746 * "HL_2_relu"."NEUR_2_3" + -0.22596704194 * "HL_2_relu"."NEUR_2_4" + -0.152546479922 * "HL_2_relu"."NEUR_2_5" + 0.442235278387 * "HL_2_relu"."NEUR_2_6" + -0.310883617762 * "HL_2_relu"."NEUR_2_7" + -0.543363247452 * "HL_2_relu"."NEUR_2_8" + 0.260904267517 * "HL_2_relu"."NEUR_2_9" + 0.145595561218 * "HL_2_relu"."NEUR_2_10" + 0.716822402398 * "HL_2_relu"."NEUR_2_11" + -0.771611501112 * "HL_2_relu"."NEUR_2_12" + 0.117751866966 AS "NEUR_3_3", 0.425876619811 * "HL_2_relu"."NEUR_2_1" + -0.677350677081 * "HL_2_relu"."NEUR_2_2" + 0.0138561725887 * "HL_2_relu"."NEUR_2_3" + -0.475987658604 * "HL_2_relu"."NEUR_2_4" + -0.22040595977 * "HL_2_relu"."NEUR_2_5" + 0.723064993573 * "HL_2_relu"."NEUR_2_6" + -0.651467569303 * "HL_2_relu"."NEUR_2_7" + -0.496806152444 * "HL_2_relu"."NEUR_2_8" + -0.548441873354 * "HL_2_relu"."NEUR_2_9" + -0.215170369775 * "HL_2_relu"."NEUR_2_10" + 0.0368753696199 * "HL_2_relu"."NEUR_2_11" + -0.0504396242384 * "HL_2_relu"."NEUR_2_12" + 0.324909032232 AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "Score_0", "OL_softmax"."NEUR_3_2" AS "Score_1", "OL_softmax"."NEUR_3_3" AS "Score_2", "OL_softmax"."NEUR_3_4" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OL_softmax"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte