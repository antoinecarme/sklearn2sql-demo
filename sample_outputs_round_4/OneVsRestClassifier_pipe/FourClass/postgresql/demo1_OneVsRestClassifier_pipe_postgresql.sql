-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.475138388233 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.00562037811379 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.00452397806551 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.509163799877 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.158350769015 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.159003966122 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.178607218247 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0380091841416 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0510124332951 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.0718669376152 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN -0.023088319916 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.00493057602595 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.0566215439325 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.0352001352729 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0217030760365 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.0205138967028 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.100124903443 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.448642797834 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.0941276986974 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.0608706194909 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" AS "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - -0.475138388233 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.00562037811379 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.00452397806551 AS impute_4, "ADS_imp_1_OUT".impute_5 - 0.509163799877 AS impute_5, "ADS_imp_1_OUT".impute_6 - -0.158350769015 AS impute_6, "ADS_imp_1_OUT".impute_7 - -0.159003966122 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.178607218247 AS impute_8, "ADS_imp_1_OUT".impute_9 - 0.0380091841416 AS impute_9, "ADS_imp_1_OUT".impute_10 - 0.0510124332951 AS impute_10, "ADS_imp_1_OUT".impute_11 - -0.0718669376152 AS impute_11, "ADS_imp_1_OUT".impute_12 - -0.023088319916 AS impute_12, "ADS_imp_1_OUT".impute_13 - 0.00493057602595 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.0566215439325 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.0352001352729 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0217030760365 AS impute_16, "ADS_imp_1_OUT".impute_17 - -0.0205138967028 AS impute_17, "ADS_imp_1_OUT".impute_18 - -0.100124903443 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.448642797834 AS impute_19, "ADS_imp_1_OUT".impute_20 - -0.0941276986974 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.0608706194909 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * -0.252902990982 + "CenteredDataForPCA".impute_3 * -0.0112099183981 + "CenteredDataForPCA".impute_4 * -0.0269624666005 + "CenteredDataForPCA".impute_5 * -0.361963012095 + "CenteredDataForPCA".impute_6 * -0.0221810579956 + "CenteredDataForPCA".impute_7 * 0.365429585831 + "CenteredDataForPCA".impute_8 * -0.00152858563898 + "CenteredDataForPCA".impute_9 * 0.0233789128994 + "CenteredDataForPCA".impute_10 * 0.0144781170941 + "CenteredDataForPCA".impute_11 * 0.0276181555131 + "CenteredDataForPCA".impute_12 * -0.00268680442108 + "CenteredDataForPCA".impute_13 * -0.109931950049 + "CenteredDataForPCA".impute_14 * 0.0642089724134 + "CenteredDataForPCA".impute_15 * -0.0342453016109 + "CenteredDataForPCA".impute_16 * -0.0262129710431 + "CenteredDataForPCA".impute_17 * 0.00347936255173 + "CenteredDataForPCA".impute_18 * 0.667483252449 + "CenteredDataForPCA".impute_19 * -0.451741266791 + "CenteredDataForPCA".impute_20 * -0.00926012235863 + "CenteredDataForPCA".impute_21 * -0.0290055615931 AS anoova_2, "CenteredDataForPCA".impute_2 * 0.385907418062 + "CenteredDataForPCA".impute_3 * 0.0363995010342 + "CenteredDataForPCA".impute_4 * 0.140303040004 + "CenteredDataForPCA".impute_5 * 0.155485506066 + "CenteredDataForPCA".impute_6 * -0.038530390005 + "CenteredDataForPCA".impute_7 * 0.225628186545 + "CenteredDataForPCA".impute_8 * -0.0248380613489 + "CenteredDataForPCA".impute_9 * 0.023507935849 + "CenteredDataForPCA".impute_10 * 0.0817334410604 + "CenteredDataForPCA".impute_11 * 0.00328819427562 + "CenteredDataForPCA".impute_12 * -0.0512725363532 + "CenteredDataForPCA".impute_13 * -0.510570370635 + "CenteredDataForPCA".impute_14 * -0.018993364129 + "CenteredDataForPCA".impute_15 * 0.041761142409 + "CenteredDataForPCA".impute_16 * -0.0990713294037 + "CenteredDataForPCA".impute_17 * 0.0859229394272 + "CenteredDataForPCA".impute_18 * -0.362909341133 + "CenteredDataForPCA".impute_19 * -0.574414987041 + "CenteredDataForPCA".impute_20 * -0.0140207772773 + "CenteredDataForPCA".impute_21 * 0.0342128545606 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.04469587628 + "CenteredDataForPCA".impute_3 * 0.0218380970745 + "CenteredDataForPCA".impute_4 * 0.180279352176 + "CenteredDataForPCA".impute_5 * -0.369003809256 + "CenteredDataForPCA".impute_6 * 0.0894557898929 + "CenteredDataForPCA".impute_7 * -0.611370798366 + "CenteredDataForPCA".impute_8 * 0.157656193899 + "CenteredDataForPCA".impute_9 * -0.224261576188 + "CenteredDataForPCA".impute_10 * 0.0737270140516 + "CenteredDataForPCA".impute_11 * 0.166129872618 + "CenteredDataForPCA".impute_12 * 0.012020449714 + "CenteredDataForPCA".impute_13 * -0.393018469007 + "CenteredDataForPCA".impute_14 * 0.0839570873025 + "CenteredDataForPCA".impute_15 * -0.23478277129 + "CenteredDataForPCA".impute_16 * 0.318905530301 + "CenteredDataForPCA".impute_17 * 0.0400038304185 + "CenteredDataForPCA".impute_18 * 0.0623278172217 + "CenteredDataForPCA".impute_19 * -0.0399505656408 + "CenteredDataForPCA".impute_20 * 0.109666204018 + "CenteredDataForPCA".impute_21 * -0.0362286702772 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.559634763327 + "CenteredDataForPCA".impute_3 * -0.142541689238 + "CenteredDataForPCA".impute_4 * 0.0403466243477 + "CenteredDataForPCA".impute_5 * 0.500864392695 + "CenteredDataForPCA".impute_6 * -0.131327504273 + "CenteredDataForPCA".impute_7 * 0.00428678605277 + "CenteredDataForPCA".impute_8 * 0.179112979042 + "CenteredDataForPCA".impute_9 * -0.0779498081086 + "CenteredDataForPCA".impute_10 * 0.0114191114185 + "CenteredDataForPCA".impute_11 * -0.0149760319467 + "CenteredDataForPCA".impute_12 * -0.0576744315212 + "CenteredDataForPCA".impute_13 * -0.372243457403 + "CenteredDataForPCA".impute_14 * -0.0279873904628 + "CenteredDataForPCA".impute_15 * -0.107814237861 + "CenteredDataForPCA".impute_16 * 0.0401051155641 + "CenteredDataForPCA".impute_17 * -0.131527139819 + "CenteredDataForPCA".impute_18 * 0.0493412158606 + "CenteredDataForPCA".impute_19 * 0.0539598009859 + "CenteredDataForPCA".impute_20 * 0.124319402377 + "CenteredDataForPCA".impute_21 * 0.405230965358 AS anoova_5, "CenteredDataForPCA".impute_2 * -0.250614059088 + "CenteredDataForPCA".impute_3 * -0.0110952625858 + "CenteredDataForPCA".impute_4 * 0.439096997547 + "CenteredDataForPCA".impute_5 * 0.0432555223872 + "CenteredDataForPCA".impute_6 * -0.0159776821033 + "CenteredDataForPCA".impute_7 * -0.251249811666 + "CenteredDataForPCA".impute_8 * -0.40127285519 + "CenteredDataForPCA".impute_9 * 0.419345388881 + "CenteredDataForPCA".impute_10 * 0.0813826616841 + "CenteredDataForPCA".impute_11 * -0.0219066500772 + "CenteredDataForPCA".impute_12 * 0.0663567659555 + "CenteredDataForPCA".impute_13 * -0.202345087485 + "CenteredDataForPCA".impute_14 * -0.134716217808 + "CenteredDataForPCA".impute_15 * 0.0248883447477 + "CenteredDataForPCA".impute_16 * -0.378212894837 + "CenteredDataForPCA".impute_17 * 0.151194158169 + "CenteredDataForPCA".impute_18 * 0.0847942250737 + "CenteredDataForPCA".impute_19 * 0.0978135775443 + "CenteredDataForPCA".impute_20 * -0.084661480449 + "CenteredDataForPCA".impute_21 * -0.284767604319 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.15574343283 + "CenteredDataForPCA".impute_3 * -0.540524114153 + "CenteredDataForPCA".impute_4 * 0.190067639642 + "CenteredDataForPCA".impute_5 * -0.129931225973 + "CenteredDataForPCA".impute_6 * 0.0956479647152 + "CenteredDataForPCA".impute_7 * 0.0347813590729 + "CenteredDataForPCA".impute_8 * -0.110404189146 + "CenteredDataForPCA".impute_9 * 0.149428229543 + "CenteredDataForPCA".impute_10 * 0.0856041462902 + "CenteredDataForPCA".impute_11 * -0.358990692291 + "CenteredDataForPCA".impute_12 * -0.400504345857 + "CenteredDataForPCA".impute_13 * 0.130987327072 + "CenteredDataForPCA".impute_14 * -0.123458102575 + "CenteredDataForPCA".impute_15 * -0.411888609118 + "CenteredDataForPCA".impute_16 * 0.114885428148 + "CenteredDataForPCA".impute_17 * -0.130913603593 + "CenteredDataForPCA".impute_18 * -0.00910200153095 + "CenteredDataForPCA".impute_19 * -0.0153682905144 + "CenteredDataForPCA".impute_20 * -0.135294359756 + "CenteredDataForPCA".impute_21 * 0.195128475794 AS anoova_7, "CenteredDataForPCA".impute_2 * 0.035742183986 + "CenteredDataForPCA".impute_3 * -0.00329125058295 + "CenteredDataForPCA".impute_4 * -0.32287714435 + "CenteredDataForPCA".impute_5 * -0.233502979452 + "CenteredDataForPCA".impute_6 * 0.17783516491 + "CenteredDataForPCA".impute_7 * -0.306886216874 + "CenteredDataForPCA".impute_8 * -0.14622384277 + "CenteredDataForPCA".impute_9 * -0.0373060088928 + "CenteredDataForPCA".impute_10 * -0.0234701368819 + "CenteredDataForPCA".impute_11 * -0.185590263778 + "CenteredDataForPCA".impute_12 * -0.101828325974 + "CenteredDataForPCA".impute_13 * -0.179786934331 + "CenteredDataForPCA".impute_14 * -0.244374503818 + "CenteredDataForPCA".impute_15 * 0.490830913643 + "CenteredDataForPCA".impute_16 * -0.267033495433 + "CenteredDataForPCA".impute_17 * -0.194266014633 + "CenteredDataForPCA".impute_18 * 0.061461394063 + "CenteredDataForPCA".impute_19 * -0.0308201271428 + "CenteredDataForPCA".impute_20 * -0.148882535412 + "CenteredDataForPCA".impute_21 * 0.420832905177 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.0200432502307 + "CenteredDataForPCA".impute_3 * 0.261408004915 + "CenteredDataForPCA".impute_4 * 0.128675498898 + "CenteredDataForPCA".impute_5 * 0.0256935133972 + "CenteredDataForPCA".impute_6 * 0.145557269035 + "CenteredDataForPCA".impute_7 * 0.0348368471896 + "CenteredDataForPCA".impute_8 * -0.427126897576 + "CenteredDataForPCA".impute_9 * -0.552311231445 + "CenteredDataForPCA".impute_10 * -0.18338798078 + "CenteredDataForPCA".impute_11 * -0.276288561457 + "CenteredDataForPCA".impute_12 * 0.0258396404349 + "CenteredDataForPCA".impute_13 * 0.0352669101858 + "CenteredDataForPCA".impute_14 * 0.293482201899 + "CenteredDataForPCA".impute_15 * -0.292528278716 + "CenteredDataForPCA".impute_16 * -0.279484278654 + "CenteredDataForPCA".impute_17 * 0.107901459502 + "CenteredDataForPCA".impute_18 * 0.0068496018559 + "CenteredDataForPCA".impute_19 * 0.0182039397965 + "CenteredDataForPCA".impute_20 * 0.0379166907864 + "CenteredDataForPCA".impute_21 * 0.170318092723 AS anoova_9, "CenteredDataForPCA".impute_2 * -0.0914912387083 + "CenteredDataForPCA".impute_3 * 0.327594124732 + "CenteredDataForPCA".impute_4 * -0.457008139227 + "CenteredDataForPCA".impute_5 * 0.110213493592 + "CenteredDataForPCA".impute_6 * 0.35528892703 + "CenteredDataForPCA".impute_7 * -0.019869572263 + "CenteredDataForPCA".impute_8 * 0.073191040377 + "CenteredDataForPCA".impute_9 * 0.154094045997 + "CenteredDataForPCA".impute_10 * 0.31467942396 + "CenteredDataForPCA".impute_11 * -0.314144721007 + "CenteredDataForPCA".impute_12 * -0.0322793702935 + "CenteredDataForPCA".impute_13 * -0.139138946217 + "CenteredDataForPCA".impute_14 * -0.145705457714 + "CenteredDataForPCA".impute_15 * -0.366510329889 + "CenteredDataForPCA".impute_16 * -0.0472098964854 + "CenteredDataForPCA".impute_17 * -0.150314121514 + "CenteredDataForPCA".impute_18 * -0.0222442071509 + "CenteredDataForPCA".impute_19 * -0.0246081756611 + "CenteredDataForPCA".impute_20 * 0.091093900099 + "CenteredDataForPCA".impute_21 * -0.315733965613 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.0512781634179 + "CenteredDataForPCA".impute_3 * 0.168378287442 + "CenteredDataForPCA".impute_4 * -0.134122763389 + "CenteredDataForPCA".impute_5 * -0.0491758731437 + "CenteredDataForPCA".impute_6 * -0.207469890211 + "CenteredDataForPCA".impute_7 * -0.0501596092748 + "CenteredDataForPCA".impute_8 * -0.369599235285 + "CenteredDataForPCA".impute_9 * 0.390540119204 + "CenteredDataForPCA".impute_10 * -0.424866171896 + "CenteredDataForPCA".impute_11 * -0.11303316681 + "CenteredDataForPCA".impute_12 * -0.082080009961 + "CenteredDataForPCA".impute_13 * -0.0642924296686 + "CenteredDataForPCA".impute_14 * 0.0901315778711 + "CenteredDataForPCA".impute_15 * -0.0123431990268 + "CenteredDataForPCA".impute_16 * 0.313609676958 + "CenteredDataForPCA".impute_17 * -0.143140233038 + "CenteredDataForPCA".impute_18 * -0.0178892777756 + "CenteredDataForPCA".impute_19 * -0.0470554653836 + "CenteredDataForPCA".impute_20 * 0.522107963018 + "CenteredDataForPCA".impute_21 * 0.0867272376705 AS anoova_11, "CenteredDataForPCA".impute_2 * 0.15296998318 + "CenteredDataForPCA".impute_3 * 0.131675278606 + "CenteredDataForPCA".impute_4 * 0.213672676365 + "CenteredDataForPCA".impute_5 * -0.132841332658 + "CenteredDataForPCA".impute_6 * -0.0101365924637 + "CenteredDataForPCA".impute_7 * -0.0153936601013 + "CenteredDataForPCA".impute_8 * 0.230352965738 + "CenteredDataForPCA".impute_9 * 0.272131954014 + "CenteredDataForPCA".impute_10 * 0.113507324846 + "CenteredDataForPCA".impute_11 * 0.0838631781515 + "CenteredDataForPCA".impute_12 * 0.364799676145 + "CenteredDataForPCA".impute_13 * 0.105588091694 + "CenteredDataForPCA".impute_14 * 0.25614801951 + "CenteredDataForPCA".impute_15 * -0.198814016015 + "CenteredDataForPCA".impute_16 * -0.34388467671 + "CenteredDataForPCA".impute_17 * -0.532496721637 + "CenteredDataForPCA".impute_18 * -0.0224533151935 + "CenteredDataForPCA".impute_19 * 0.000228308625349 + "CenteredDataForPCA".impute_20 * 0.0807286239035 + "CenteredDataForPCA".impute_21 * 0.300643991625 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.0215270655163 + "CenteredDataForPCA".impute_3 * 0.132451304785 + "CenteredDataForPCA".impute_4 * -0.0322506080413 + "CenteredDataForPCA".impute_5 * 0.0355689228429 + "CenteredDataForPCA".impute_6 * 0.0449253628641 + "CenteredDataForPCA".impute_7 * 0.0513791653446 + "CenteredDataForPCA".impute_8 * -0.381500982233 + "CenteredDataForPCA".impute_9 * 0.136845378902 + "CenteredDataForPCA".impute_10 * 0.654583504991 + "CenteredDataForPCA".impute_11 * 0.103014670969 + "CenteredDataForPCA".impute_12 * 0.0759156209086 + "CenteredDataForPCA".impute_13 * 0.0700177295195 + "CenteredDataForPCA".impute_14 * 0.271334018216 + "CenteredDataForPCA".impute_15 * 0.108525593929 + "CenteredDataForPCA".impute_16 * 0.363913260671 + "CenteredDataForPCA".impute_17 * 0.156372800179 + "CenteredDataForPCA".impute_18 * 0.00487874937237 + "CenteredDataForPCA".impute_19 * 0.0380076563723 + "CenteredDataForPCA".impute_20 * -0.0908838550203 + "CenteredDataForPCA".impute_21 * 0.330135494536 AS anoova_13, "CenteredDataForPCA".impute_2 * 0.00310159475644 + "CenteredDataForPCA".impute_3 * -0.203133175801 + "CenteredDataForPCA".impute_4 * -0.0269986620533 + "CenteredDataForPCA".impute_5 * -0.0352018796534 + "CenteredDataForPCA".impute_6 * -0.332917049065 + "CenteredDataForPCA".impute_7 * -0.0764607141827 + "CenteredDataForPCA".impute_8 * 0.108232053889 + "CenteredDataForPCA".impute_9 * -0.0493408061403 + "CenteredDataForPCA".impute_10 * 0.0800963899217 + "CenteredDataForPCA".impute_11 * -0.683463812134 + "CenteredDataForPCA".impute_12 * 0.499839066395 + "CenteredDataForPCA".impute_13 * -0.0796018690357 + "CenteredDataForPCA".impute_14 * 0.162197127017 + "CenteredDataForPCA".impute_15 * 0.161502336881 + "CenteredDataForPCA".impute_16 * 0.135960873235 + "CenteredDataForPCA".impute_17 * 0.0602366532944 + "CenteredDataForPCA".impute_18 * 0.00117607776632 + "CenteredDataForPCA".impute_19 * -0.023217649895 + "CenteredDataForPCA".impute_20 * -0.054118950914 + "CenteredDataForPCA".impute_21 * -0.135065555657 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.0612735857455 + "CenteredDataForPCA".impute_3 * 0.0828783766763 + "CenteredDataForPCA".impute_4 * -0.323989199494 + "CenteredDataForPCA".impute_5 * -0.0746507659777 + "CenteredDataForPCA".impute_6 * -0.510421456431 + "CenteredDataForPCA".impute_7 * -0.0716295485428 + "CenteredDataForPCA".impute_8 * -0.153234652219 + "CenteredDataForPCA".impute_9 * 0.022375171632 + "CenteredDataForPCA".impute_10 * -0.0572895814405 + "CenteredDataForPCA".impute_11 * 0.18790250341 + "CenteredDataForPCA".impute_12 * 0.228149479337 + "CenteredDataForPCA".impute_13 * -0.019367931444 + "CenteredDataForPCA".impute_14 * -0.345084992769 + "CenteredDataForPCA".impute_15 * -0.453083490728 + "CenteredDataForPCA".impute_16 * -0.0609049534586 + "CenteredDataForPCA".impute_17 * 0.150304779187 + "CenteredDataForPCA".impute_18 * -0.0134507139772 + "CenteredDataForPCA".impute_19 * -0.0103085702426 + "CenteredDataForPCA".impute_20 * -0.335919590171 + "CenteredDataForPCA".impute_21 * 0.185411628408 AS anoova_15, "CenteredDataForPCA".impute_2 * 0.0640448101162 + "CenteredDataForPCA".impute_3 * -0.303240507324 + "CenteredDataForPCA".impute_4 * -0.189284196011 + "CenteredDataForPCA".impute_5 * -0.0735335442215 + "CenteredDataForPCA".impute_6 * 0.180450746031 + "CenteredDataForPCA".impute_7 * -0.0216506622149 + "CenteredDataForPCA".impute_8 * 0.138321624407 + "CenteredDataForPCA".impute_9 * 0.126574931013 + "CenteredDataForPCA".impute_10 * 0.0711789619109 + "CenteredDataForPCA".impute_11 * 0.0401169773091 + "CenteredDataForPCA".impute_12 * 0.174024110974 + "CenteredDataForPCA".impute_13 * 0.057589066445 + "CenteredDataForPCA".impute_14 * -0.0118281843703 + "CenteredDataForPCA".impute_15 * -0.0917389498425 + "CenteredDataForPCA".impute_16 * -0.297643694348 + "CenteredDataForPCA".impute_17 * 0.585643506596 + "CenteredDataForPCA".impute_18 * 7.76678385482e-05 + "CenteredDataForPCA".impute_19 * 0.013441293537 + "CenteredDataForPCA".impute_20 * 0.512799900025 + "CenteredDataForPCA".impute_21 * 0.225777132534 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.0149821581236 + "CenteredDataForPCA".impute_3 * -0.550297998946 + "CenteredDataForPCA".impute_4 * -0.300567677313 + "CenteredDataForPCA".impute_5 * 0.0881250368783 + "CenteredDataForPCA".impute_6 * 0.159678922165 + "CenteredDataForPCA".impute_7 * -0.000603360757117 + "CenteredDataForPCA".impute_8 * -0.381998106048 + "CenteredDataForPCA".impute_9 * -0.148496055394 + "CenteredDataForPCA".impute_10 * -0.0201194540785 + "CenteredDataForPCA".impute_11 * 0.31224295613 + "CenteredDataForPCA".impute_12 * 0.287075211396 + "CenteredDataForPCA".impute_13 * -0.116999598273 + "CenteredDataForPCA".impute_14 * 0.17492660299 + "CenteredDataForPCA".impute_15 * -0.0370737256929 + "CenteredDataForPCA".impute_16 * -0.0265801891421 + "CenteredDataForPCA".impute_17 * -0.329384246428 + "CenteredDataForPCA".impute_18 * -0.0610145872277 + "CenteredDataForPCA".impute_19 * -0.0479700306494 + "CenteredDataForPCA".impute_20 * 0.0260624363453 + "CenteredDataForPCA".impute_21 * -0.251972981926 AS anoova_17, "CenteredDataForPCA".impute_2 * 0.00499421295213 + "CenteredDataForPCA".impute_3 * 0.0600765965393 + "CenteredDataForPCA".impute_4 * 0.282897943627 + "CenteredDataForPCA".impute_5 * 0.03617424635 + "CenteredDataForPCA".impute_6 * 0.383123421069 + "CenteredDataForPCA".impute_7 * 0.159914877469 + "CenteredDataForPCA".impute_8 * -0.0986928715623 + "CenteredDataForPCA".impute_9 * -0.0812522147283 + "CenteredDataForPCA".impute_10 * -0.10781236515 + "CenteredDataForPCA".impute_11 * -0.022044895636 + "CenteredDataForPCA".impute_12 * 0.486829800688 + "CenteredDataForPCA".impute_13 * 0.0685070339748 + "CenteredDataForPCA".impute_14 * -0.588504127484 + "CenteredDataForPCA".impute_15 * 0.00356328508375 + "CenteredDataForPCA".impute_16 * 0.311203693342 + "CenteredDataForPCA".impute_17 * -0.05531491756 + "CenteredDataForPCA".impute_18 * 0.022793763186 + "CenteredDataForPCA".impute_19 * -0.0465913936371 + "CenteredDataForPCA".impute_20 * 0.0817787823285 + "CenteredDataForPCA".impute_21 * 0.129946873256 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.0586647235089 + "CenteredDataForPCA".impute_3 * -0.00672978588716 + "CenteredDataForPCA".impute_4 * 0.101393252791 + "CenteredDataForPCA".impute_5 * -0.0764567400407 + "CenteredDataForPCA".impute_6 * -0.40367790114 + "CenteredDataForPCA".impute_7 * 0.0269413976588 + "CenteredDataForPCA".impute_8 * -0.121898548244 + "CenteredDataForPCA".impute_9 * -0.348215730948 + "CenteredDataForPCA".impute_10 * 0.437859111005 + "CenteredDataForPCA".impute_11 * 0.0118351863162 + "CenteredDataForPCA".impute_12 * -0.140844805232 + "CenteredDataForPCA".impute_13 * 0.111682812448 + "CenteredDataForPCA".impute_14 * -0.342618855724 + "CenteredDataForPCA".impute_15 * 0.0813580336322 + "CenteredDataForPCA".impute_16 * -0.144625263342 + "CenteredDataForPCA".impute_17 * -0.229095396485 + "CenteredDataForPCA".impute_18 * 0.0240491765095 + "CenteredDataForPCA".impute_19 * 0.0204614261887 + "CenteredDataForPCA".impute_20 * 0.491310964949 + "CenteredDataForPCA".impute_21 * -0.128954799188 AS anoova_19, "CenteredDataForPCA".impute_2 * 0.480464376235 + "CenteredDataForPCA".impute_3 * 5.55111512313e-17 + "CenteredDataForPCA".impute_4 * -2.77555756156e-17 + "CenteredDataForPCA".impute_5 * 0.10883248156 + "CenteredDataForPCA".impute_6 * 1.07552855511e-16 + "CenteredDataForPCA".impute_7 * 0.253861430601 + "CenteredDataForPCA".impute_8 * -9.62771529167e-17 + "CenteredDataForPCA".impute_9 * -9.71445146547e-17 + "CenteredDataForPCA".impute_10 * 3.98986399475e-17 + "CenteredDataForPCA".impute_11 * -3.29597460436e-17 + "CenteredDataForPCA".impute_12 * 1.38777878078e-16 + "CenteredDataForPCA".impute_13 * -0.43434235417 + "CenteredDataForPCA".impute_14 * -2.08166817117e-17 + "CenteredDataForPCA".impute_15 * -1.80411241502e-16 + "CenteredDataForPCA".impute_16 * 7.1991024253e-17 + "CenteredDataForPCA".impute_17 * 6.24500451352e-17 + "CenteredDataForPCA".impute_18 * 0.418685429789 + "CenteredDataForPCA".impute_19 * 0.573509440582 + "CenteredDataForPCA".impute_20 * 9.19403442268e-17 + "CenteredDataForPCA".impute_21 * 7.42678488153e-18 AS anoova_20, "CenteredDataForPCA".impute_2 * -0.325450429755 + "CenteredDataForPCA".impute_3 * -5.55111512313e-17 + "CenteredDataForPCA".impute_4 * 2.671474153e-16 + "CenteredDataForPCA".impute_5 * -0.558014374487 + "CenteredDataForPCA".impute_6 * -8.23993651089e-17 + "CenteredDataForPCA".impute_7 * 0.417197305747 + "CenteredDataForPCA".impute_8 * 1.04083408559e-17 + "CenteredDataForPCA".impute_9 * 1.82145964978e-17 + "CenteredDataForPCA".impute_10 * -1.21430643318e-17 + "CenteredDataForPCA".impute_11 * -1.2923689896e-16 + "CenteredDataForPCA".impute_12 * -7.6327832943e-17 + "CenteredDataForPCA".impute_13 * -0.271025510229 + "CenteredDataForPCA".impute_14 * 1.30104260698e-16 + "CenteredDataForPCA".impute_15 * 3.46944695195e-18 + "CenteredDataForPCA".impute_16 * 6.02816407902e-17 + "CenteredDataForPCA".impute_17 * -1.73472347598e-17 + "CenteredDataForPCA".impute_18 * -0.472972510218 + "CenteredDataForPCA".impute_19 * 0.333902023202 + "CenteredDataForPCA".impute_20 * 6.76542155631e-17 + "CenteredDataForPCA".impute_21 * 7.77372957672e-17 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.5372458696365356) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.5849509239196777) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= 0.15063431859016418) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_15 <= 0.20141270756721497) THEN 7 ELSE 8 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.5372458696365356 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -0.5849509239196777 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5416666666666666 AS "Proba_0", -0.613104472886 AS "LogProba_0", 0.4583333333333333 AS "Proba_1", -0.78015855755 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1875 AS "Proba_0", -1.67397643357 AS "LogProba_0", 0.8125 AS "Proba_1", -0.207639364778 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 3 AS node_id, 'anoova_17' AS feature, 0.15063431859016418 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.71875 AS "Proba_0", -0.330241686871 AS "LogProba_0", 0.28125 AS "Proba_1", -1.26851132546 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9411764705882353 AS "Proba_0", -0.0606246218164 AS "LogProba_0", 0.058823529411764705 AS "Proba_1", -2.83321334406 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4666666666666667 AS "Proba_0", -0.762140052047 AS "LogProba_0", 0.5333333333333333 AS "Proba_1", -0.628608659422 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_15' AS feature, 0.20141270756721497 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9423076923076923 AS "Proba_0", -0.0594234204708 AS "LogProba_0", 0.057692307692307696 AS "Proba_1", -2.85263142991 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8571428571428571 AS "Proba_0", -0.154150679827 AS "LogProba_0", 0.14285714285714285 AS "Proba_1", -1.94591014906 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Decision" AS "Decision" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"OVR_Score_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, CAST(NULL AS FLOAT) AS "Score_0", "DT_Output"."Proba_1" AS "Proba_0", "DT_Output"."LogProba_1" AS "LogProba_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.3380436897277832) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.38078221678733826) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 1.4389996528625488) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.3479630947113037) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.3380436897277832 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_5' AS feature, -0.38078221678733826 AS threshold, 51 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9411764705882353 AS "Proba_0", -0.0606246218164 AS "LogProba_0", 0.058823529411764705 AS "Proba_1", -2.83321334406 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.85 AS "Proba_0", -0.162518929498 AS "LogProba_0", 0.15 AS "Proba_1", -1.89711998489 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_3' AS feature, 1.4389996528625488 AS threshold, 49 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5510204081632653 AS "Proba_0", -0.595983432106 AS "LogProba_0", 0.4489795918367347 AS "Proba_1", -0.800777844752 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2222222222222222 AS "Proba_0", -1.50407739678 AS "LogProba_0", 0.7777777777777778 AS "Proba_1", -0.251314428281 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_2' AS feature, 0.3479630947113037 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7419354838709677 AS "Proba_0", -0.298492988556 AS "LogProba_0", 0.25806451612903225 AS "Proba_1", -1.35454566281 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9375 AS "Proba_0", -0.0645385211376 AS "LogProba_0", 0.0625 AS "Proba_1", -2.77258872224 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5333333333333333 AS "Proba_0", -0.628608659422 AS "LogProba_0", 0.4666666666666667 AS "Proba_1", -0.762140052047 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Decision" AS "Decision" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"OVR_Score_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, CAST(NULL AS FLOAT) AS "Score_1", "DT_Output_1"."Proba_1" AS "Proba_1", "DT_Output_1"."LogProba_1" AS "LogProba_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 2.7582764625549316) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.7774726152420044) THEN 2 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -1.9576005935668945) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, 2.7582764625549316 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -1.7774726152420044 AS threshold, 84 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8214285714285714 AS "Proba_0", -0.196710294246 AS "LogProba_0", 0.17857142857142858 AS "Proba_1", -1.72276659774 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.56 AS "Proba_0", -0.579818495253 AS "LogProba_0", 0.44 AS "Proba_1", -0.82098055207 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, 'anoova_3' AS feature, -1.9576005935668945 AS threshold, 59 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9322033898305084 AS "Proba_0", -0.0702042586732 AS "LogProba_0", 0.06779661016949153 AS "Proba_1", -2.69124308279 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7894736842105263 AS "Proba_0", -0.236388778064 AS "LogProba_0", 0.21052631578947367 AS "Proba_1", -1.55814461805 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 40 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.375 AS "Proba_0", -0.980829253012 AS "LogProba_0", 0.625 AS "Proba_1", -0.470003629246 AS "LogProba_1", 1 AS "Decision") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Decision" AS "Decision" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"OVR_Score_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, CAST(NULL AS FLOAT) AS "Score_2", "DT_Output_2"."Proba_1" AS "Proba_2", "DT_Output_2"."LogProba_1" AS "LogProba_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.3402177691459656) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= -0.1982869654893875) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.420804738998413) THEN 5 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= 0.8806648850440979) THEN 7 ELSE 8 END END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.3402177691459656 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 1 AS node_id, 'anoova_12' AS feature, -0.1982869654893875 AS threshold, 41 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9512195121951219 AS "Proba_0", -0.0500104205747 AS "LogProba_0", 0.04878048780487805 AS "Proba_1", -3.02042488614 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8666666666666667 AS "Proba_0", -0.143100843641 AS "LogProba_0", 0.13333333333333333 AS "Proba_1", -2.01490302054 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 4 AS node_id, 'anoova_2' AS feature, -1.420804738998413 AS threshold, 59 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6101694915254238 AS "Proba_0", -0.49401850545 AS "LogProba_0", 0.3898305084745763 AS "Proba_1", -0.942043227977 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9333333333333333 AS "Proba_0", -0.068992871487 AS "LogProba_0", 0.06666666666666667 AS "Proba_1", -2.7080502011 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 6 AS node_id, 'anoova_4' AS feature, 0.8806648850440979 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0 AS "Decision" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2962962962962963 AS "Proba_0", -1.21639532432 AS "LogProba_0", 0.7037037037037037 AS "Proba_1", -0.351397886838 AS "LogProba_1", 1 AS "Decision" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.8235294117647058 AS "Proba_0", -0.194156014441 AS "LogProba_0", 0.17647058823529413 AS "Proba_1", -1.73460105539 AS "LogProba_1", 0 AS "Decision") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Decision" AS "Decision" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"OVR_Score_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_3"."Proba_1" AS "Proba_3", "DT_Output_3"."LogProba_1" AS "LogProba_3" 
FROM "DT_Output_3"), 
"OVR_Join_CTE" AS 
(SELECT "OVR_Score_0".join_key_0 AS join_key_0, "OVR_Score_0"."Score_0" AS "Score_0", "OVR_Score_0"."Proba_0" AS "Proba_0", "OVR_Score_0"."LogProba_0" AS "LogProba_0", "OVR_Score_1".join_key_1 AS join_key_1, "OVR_Score_1"."Score_1" AS "Score_1", "OVR_Score_1"."Proba_1" AS "Proba_1", "OVR_Score_1"."LogProba_1" AS "LogProba_1", "OVR_Score_2".join_key_2 AS join_key_2, "OVR_Score_2"."Score_2" AS "Score_2", "OVR_Score_2"."Proba_2" AS "Proba_2", "OVR_Score_2"."LogProba_2" AS "LogProba_2", "OVR_Score_3".join_key_3 AS join_key_3, "OVR_Score_3"."Score_3" AS "Score_3", "OVR_Score_3"."Proba_3" AS "Proba_3", "OVR_Score_3"."LogProba_3" AS "LogProba_3" 
FROM "OVR_Score_0" LEFT OUTER JOIN "OVR_Score_1" ON "OVR_Score_0".join_key_0 = "OVR_Score_1".join_key_1 LEFT OUTER JOIN "OVR_Score_2" ON "OVR_Score_2".join_key_2 = "OVR_Score_1".join_key_1 LEFT OUTER JOIN "OVR_Score_3" ON "OVR_Score_3".join_key_3 = "OVR_Score_2".join_key_2), 
"OVR_Scores" AS 
(SELECT "OVR_Join_CTE".join_key_0 AS "KEY", "OVR_Join_CTE"."Score_0" AS "Score_0", "OVR_Join_CTE"."Proba_0" AS "Proba_0", "OVR_Join_CTE"."LogProba_0" AS "LogProba_0", "OVR_Join_CTE"."Score_1" AS "Score_1", "OVR_Join_CTE"."Proba_1" AS "Proba_1", "OVR_Join_CTE"."LogProba_1" AS "LogProba_1", "OVR_Join_CTE"."Score_2" AS "Score_2", "OVR_Join_CTE"."Proba_2" AS "Proba_2", "OVR_Join_CTE"."LogProba_2" AS "LogProba_2", "OVR_Join_CTE"."Score_3" AS "Score_3", "OVR_Join_CTE"."Proba_3" AS "Proba_3", "OVR_Join_CTE"."LogProba_3" AS "LogProba_3" 
FROM "OVR_Join_CTE"), 
orig_cte AS 
(SELECT "OVR_Scores"."KEY" AS "KEY", "OVR_Scores"."Score_0" AS "Score_0", "OVR_Scores"."Score_1" AS "Score_1", "OVR_Scores"."Score_2" AS "Score_2", "OVR_Scores"."Score_3" AS "Score_3", "OVR_Scores"."Proba_0" AS "Proba_0", "OVR_Scores"."Proba_1" AS "Proba_1", "OVR_Scores"."Proba_2" AS "Proba_2", "OVR_Scores"."Proba_3" AS "Proba_3", "OVR_Scores"."LogProba_0" AS "LogProba_0", "OVR_Scores"."LogProba_1" AS "LogProba_1", "OVR_Scores"."LogProba_2" AS "LogProba_2", "OVR_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "OVR_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte