-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT [ADS].[KEY] AS [KEY], 0.18162965960662025 * [ADS].[Feature_0] + 0.20577789060437124 * [ADS].[Feature_1] + 0.07656631255626449 * [ADS].[Feature_2] + -0.0390558942058091 * [ADS].[Feature_3] + 0.2662165853736786 * [ADS].[Feature_4] + -0.4915292503610436 * [ADS].[Feature_5] + 0.5245794967919145 * [ADS].[Feature_6] + -0.04860838575729317 * [ADS].[Feature_7] + 0.1286594790723538 * [ADS].[Feature_8] + 0.9069413718996909 * [ADS].[Feature_9] + -0.24227882786121258 * [ADS].[Feature_10] + -0.8123830771529534 * [ADS].[Feature_11] + -0.4229956304314842 * [ADS].[Feature_12] + -0.4831500647132918 * [ADS].[Feature_13] + 0.03733640844601124 * [ADS].[Feature_14] + -0.01762073380501822 * [ADS].[Feature_15] + -0.36711238357829484 * [ADS].[Feature_16] + 0.3850361563063025 * [ADS].[Feature_17] + 0.27940390152665323 * [ADS].[Feature_18] + -0.021614176303373873 * [ADS].[Feature_19] + -1.6777883733 AS [Score_0], 0.22795539419961458 * [ADS].[Feature_0] + 0.2923202752048776 * [ADS].[Feature_1] + 0.14472672454730334 * [ADS].[Feature_2] + 0.2252893034661554 * [ADS].[Feature_3] + 0.40371094364894317 * [ADS].[Feature_4] + 0.2917323237626471 * [ADS].[Feature_5] + -0.4650257486454576 * [ADS].[Feature_6] + -0.1225107980902152 * [ADS].[Feature_7] + -0.28592919140405537 * [ADS].[Feature_8] + -0.779038081025246 * [ADS].[Feature_9] + 0.44832867508591695 * [ADS].[Feature_10] + 0.05337064700433745 * [ADS].[Feature_11] + 0.05268280617217911 * [ADS].[Feature_12] + -0.7059736267417809 * [ADS].[Feature_13] + -0.24781018284874876 * [ADS].[Feature_14] + -0.14126375044506392 * [ADS].[Feature_15] + 0.478742621881673 * [ADS].[Feature_16] + 0.4365908647677196 * [ADS].[Feature_17] + 0.04031843386498818 * [ADS].[Feature_18] + 0.4966906233457904 * [ADS].[Feature_19] + -0.819692769755 AS [Score_1], -0.15138143593460257 * [ADS].[Feature_0] + -0.2435482324482394 * [ADS].[Feature_1] + -0.3757883727337471 * [ADS].[Feature_2] + 0.08691389361462534 * [ADS].[Feature_3] + 0.13650126634689602 * [ADS].[Feature_4] + 0.1538517354551672 * [ADS].[Feature_5] + 0.1538818049916515 * [ADS].[Feature_6] + 0.06201387968082369 * [ADS].[Feature_7] + 0.1381380185917566 * [ADS].[Feature_8] + -0.03913162732741347 * [ADS].[Feature_9] + -0.490285641222296 * [ADS].[Feature_10] + 0.5042948875284836 * [ADS].[Feature_11] + 0.2908740759650388 * [ADS].[Feature_12] + 0.9119877342002027 * [ADS].[Feature_13] + -0.10621204706043544 * [ADS].[Feature_14] + -0.2792004581023156 * [ADS].[Feature_15] + -0.23395163653637324 * [ADS].[Feature_16] + -0.22567379890930253 * [ADS].[Feature_17] + -0.2863513231226701 * [ADS].[Feature_18] + -0.19481897334344686 * [ADS].[Feature_19] + -0.843727868205 AS [Score_2], -0.10162276649546448 * [ADS].[Feature_0] + -0.2909388724373714 * [ADS].[Feature_1] + 0.13447356730459847 * [ADS].[Feature_2] + -0.1261011772266609 * [ADS].[Feature_3] + -0.6815725759462907 * [ADS].[Feature_4] + -0.3868901074574089 * [ADS].[Feature_5] + -0.09741011666286026 * [ADS].[Feature_6] + 0.04045137213293964 * [ADS].[Feature_7] + 0.03307537800372363 * [ADS].[Feature_8] + 0.0985832196570221 * [ADS].[Feature_9] + 0.26433485169518134 * [ADS].[Feature_10] + 0.07470432526115114 * [ADS].[Feature_11] + 0.19794986668486603 * [ADS].[Feature_12] + -0.047305603730298434 * [ADS].[Feature_13] + 0.0967057992959372 * [ADS].[Feature_14] + 0.4502373597392504 * [ADS].[Feature_15] + -0.07886284789817523 * [ADS].[Feature_16] + -0.07597595591546098 * [ADS].[Feature_17] + 0.28865546861750085 * [ADS].[Feature_18] + -0.14800706133078328 * [ADS].[Feature_19] + -0.763082023358 AS [Score_3] 
FROM [INPUT_DATA] AS [ADS]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], linear_model_cte.[Score_3] AS [Score_3], CAST(NULL AS FLOAT(53)) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max.[max_LogProba] = score_class_union.[LogProba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max.[max_Proba] = score_class_union.[Proba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max.[max_Score] = score_class_union.[Score] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score] 
FROM score_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte