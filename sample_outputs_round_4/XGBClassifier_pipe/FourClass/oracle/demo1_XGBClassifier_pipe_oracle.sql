-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.0390364992233 ELSE "ADS"."Feature_0" END AS impute_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.0287453568429 ELSE "ADS"."Feature_1" END AS impute_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.243076437494 ELSE "ADS"."Feature_2" END AS impute_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.0541052736484 ELSE "ADS"."Feature_3" END AS impute_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.176898424117 ELSE "ADS"."Feature_4" END AS impute_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.041713545568 ELSE "ADS"."Feature_5" END AS impute_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.0734497209576 ELSE "ADS"."Feature_6" END AS impute_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0572731787155 ELSE "ADS"."Feature_7" END AS impute_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.120515311044 ELSE "ADS"."Feature_8" END AS impute_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.0134795874564 ELSE "ADS"."Feature_9" END AS impute_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.109304594506 ELSE "ADS"."Feature_10" END AS impute_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.0370679396189 ELSE "ADS"."Feature_11" END AS impute_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 0.0606916005379 ELSE "ADS"."Feature_12" END AS impute_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN -0.0150829469641 ELSE "ADS"."Feature_13" END AS impute_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.0188027265084 ELSE "ADS"."Feature_14" END AS impute_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.169688763205 ELSE "ADS"."Feature_15" END AS impute_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0604252068113 ELSE "ADS"."Feature_16" END AS impute_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.324933923833 ELSE "ADS"."Feature_17" END AS impute_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.000276861940715 ELSE "ADS"."Feature_18" END AS impute_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.0995089902702 ELSE "ADS"."Feature_19" END AS impute_21 
FROM "INPUT_DATA" "ADS"), 
"CenteredDataForPCA" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".impute_2 - -0.0390364992233 AS impute_2, "ADS_imp_1_OUT".impute_3 - -0.0287453568429 AS impute_3, "ADS_imp_1_OUT".impute_4 - -0.243076437494 AS impute_4, "ADS_imp_1_OUT".impute_5 - -0.0541052736484 AS impute_5, "ADS_imp_1_OUT".impute_6 - 0.176898424117 AS impute_6, "ADS_imp_1_OUT".impute_7 - 0.041713545568 AS impute_7, "ADS_imp_1_OUT".impute_8 - -0.0734497209576 AS impute_8, "ADS_imp_1_OUT".impute_9 - -0.0572731787155 AS impute_9, "ADS_imp_1_OUT".impute_10 - -0.120515311044 AS impute_10, "ADS_imp_1_OUT".impute_11 - -0.0134795874564 AS impute_11, "ADS_imp_1_OUT".impute_12 - 0.109304594506 AS impute_12, "ADS_imp_1_OUT".impute_13 - -0.0370679396189 AS impute_13, "ADS_imp_1_OUT".impute_14 - 0.0606916005379 AS impute_14, "ADS_imp_1_OUT".impute_15 - -0.0150829469641 AS impute_15, "ADS_imp_1_OUT".impute_16 - -0.0188027265084 AS impute_16, "ADS_imp_1_OUT".impute_17 - 0.169688763205 AS impute_17, "ADS_imp_1_OUT".impute_18 - 0.0604252068113 AS impute_18, "ADS_imp_1_OUT".impute_19 - 0.324933923833 AS impute_19, "ADS_imp_1_OUT".impute_20 - -0.000276861940715 AS impute_20, "ADS_imp_1_OUT".impute_21 - -0.0995089902702 AS impute_21 
FROM "ADS_imp_1_OUT"), 
"ADS_ano_2_OUT" AS 
(SELECT "CenteredDataForPCA"."KEY" AS "KEY", "CenteredDataForPCA".impute_2 * -0.475026739555 + "CenteredDataForPCA".impute_3 * 0.226297544302 + "CenteredDataForPCA".impute_4 * -0.0263580507816 + "CenteredDataForPCA".impute_5 * -0.0698486498278 + "CenteredDataForPCA".impute_6 * -0.603779902615 + "CenteredDataForPCA".impute_7 * -0.0110302272582 + "CenteredDataForPCA".impute_8 * 0.0840110274903 + "CenteredDataForPCA".impute_9 * 0.0104659553205 + "CenteredDataForPCA".impute_10 * -0.0168159787062 + "CenteredDataForPCA".impute_11 * 0.0169994030148 + "CenteredDataForPCA".impute_12 * 0.0923339024679 + "CenteredDataForPCA".impute_13 * 0.0198327653785 + "CenteredDataForPCA".impute_14 * 0.308149284416 + "CenteredDataForPCA".impute_15 * 0.37885670528 + "CenteredDataForPCA".impute_16 * 0.0501282937209 + "CenteredDataForPCA".impute_17 * -0.0906425501402 + "CenteredDataForPCA".impute_18 * 0.00870054198328 + "CenteredDataForPCA".impute_19 * -0.278232661856 + "CenteredDataForPCA".impute_20 * -0.0967084452132 + "CenteredDataForPCA".impute_21 * 0.0132901279771 AS anoova_2, "CenteredDataForPCA".impute_2 * -0.433547019514 + "CenteredDataForPCA".impute_3 * -0.0542232708459 + "CenteredDataForPCA".impute_4 * -0.0468883613722 + "CenteredDataForPCA".impute_5 * -0.0568755182578 + "CenteredDataForPCA".impute_6 * 0.3750614844 + "CenteredDataForPCA".impute_7 * -0.0458161532602 + "CenteredDataForPCA".impute_8 * -0.0109363210928 + "CenteredDataForPCA".impute_9 * -0.0616628758959 + "CenteredDataForPCA".impute_10 * -0.0229468639633 + "CenteredDataForPCA".impute_11 * 0.000136361966412 + "CenteredDataForPCA".impute_12 * -0.0326743927278 + "CenteredDataForPCA".impute_13 * 0.00649121330973 + "CenteredDataForPCA".impute_14 * 0.64589735876 + "CenteredDataForPCA".impute_15 * -0.0814386527868 + "CenteredDataForPCA".impute_16 * 0.00233760991071 + "CenteredDataForPCA".impute_17 * 0.113346916873 + "CenteredDataForPCA".impute_18 * -0.055533524552 + "CenteredDataForPCA".impute_19 * 0.426725384799 + "CenteredDataForPCA".impute_20 * 0.0554615291707 + "CenteredDataForPCA".impute_21 * -0.174389932744 AS anoova_3, "CenteredDataForPCA".impute_2 * 0.0261102540508 + "CenteredDataForPCA".impute_3 * 0.658038453335 + "CenteredDataForPCA".impute_4 * 0.110138020858 + "CenteredDataForPCA".impute_5 * -0.00800842500567 + "CenteredDataForPCA".impute_6 * 0.0342357710642 + "CenteredDataForPCA".impute_7 * -0.0617047871996 + "CenteredDataForPCA".impute_8 * -0.0301596372405 + "CenteredDataForPCA".impute_9 * 0.109091602432 + "CenteredDataForPCA".impute_10 * 0.03643785315 + "CenteredDataForPCA".impute_11 * 0.0778947895459 + "CenteredDataForPCA".impute_12 * 0.264362331863 + "CenteredDataForPCA".impute_13 * 0.22696549706 + "CenteredDataForPCA".impute_14 * 0.110557695511 + "CenteredDataForPCA".impute_15 * -0.592801562571 + "CenteredDataForPCA".impute_16 * 0.0453238089942 + "CenteredDataForPCA".impute_17 * 0.00448355941743 + "CenteredDataForPCA".impute_18 * 0.0126036625009 + "CenteredDataForPCA".impute_19 * -0.189143931937 + "CenteredDataForPCA".impute_20 * 0.0606501681079 + "CenteredDataForPCA".impute_21 * -0.0468947364854 AS anoova_4, "CenteredDataForPCA".impute_2 * -0.0039759679919 + "CenteredDataForPCA".impute_3 * -0.47231910359 + "CenteredDataForPCA".impute_4 * 0.144106670827 + "CenteredDataForPCA".impute_5 * -0.162706158633 + "CenteredDataForPCA".impute_6 * 0.206549457732 + "CenteredDataForPCA".impute_7 * -0.000104505332398 + "CenteredDataForPCA".impute_8 * -0.286728618857 + "CenteredDataForPCA".impute_9 * 0.0152194339772 + "CenteredDataForPCA".impute_10 * 0.0103099435532 + "CenteredDataForPCA".impute_11 * -0.0361090006051 + "CenteredDataForPCA".impute_12 * 0.213187269889 + "CenteredDataForPCA".impute_13 * 0.0433634659511 + "CenteredDataForPCA".impute_14 * 0.288986179135 + "CenteredDataForPCA".impute_15 * -0.098715464976 + "CenteredDataForPCA".impute_16 * 0.0961890285917 + "CenteredDataForPCA".impute_17 * 0.0544725516698 + "CenteredDataForPCA".impute_18 * 0.0384408738908 + "CenteredDataForPCA".impute_19 * -0.641773081224 + "CenteredDataForPCA".impute_20 * 0.0673781587915 + "CenteredDataForPCA".impute_21 * 0.180123022342 AS anoova_5, "CenteredDataForPCA".impute_2 * 0.0130163893814 + "CenteredDataForPCA".impute_3 * 0.100067850809 + "CenteredDataForPCA".impute_4 * 0.0366724552035 + "CenteredDataForPCA".impute_5 * -0.0905393379597 + "CenteredDataForPCA".impute_6 * 0.0589609850342 + "CenteredDataForPCA".impute_7 * 0.445715379514 + "CenteredDataForPCA".impute_8 * 0.193885610155 + "CenteredDataForPCA".impute_9 * -0.299337550825 + "CenteredDataForPCA".impute_10 * -0.412153979486 + "CenteredDataForPCA".impute_11 * -0.358238997317 + "CenteredDataForPCA".impute_12 * -0.183407500552 + "CenteredDataForPCA".impute_13 * -0.199096512867 + "CenteredDataForPCA".impute_14 * 0.0759074521769 + "CenteredDataForPCA".impute_15 * -0.188111813701 + "CenteredDataForPCA".impute_16 * 0.0184540320353 + "CenteredDataForPCA".impute_17 * -0.218676844654 + "CenteredDataForPCA".impute_18 * -0.374044695355 + "CenteredDataForPCA".impute_19 * -0.145479742059 + "CenteredDataForPCA".impute_20 * -0.148710960476 + "CenteredDataForPCA".impute_21 * 0.0834319982257 AS anoova_6, "CenteredDataForPCA".impute_2 * 0.0157577275443 + "CenteredDataForPCA".impute_3 * 0.0248626655057 + "CenteredDataForPCA".impute_4 * -0.0662433940121 + "CenteredDataForPCA".impute_5 * -0.0570005807273 + "CenteredDataForPCA".impute_6 * 0.0365432480967 + "CenteredDataForPCA".impute_7 * -0.415294437795 + "CenteredDataForPCA".impute_8 * -0.0240756614709 + "CenteredDataForPCA".impute_9 * -0.174969512359 + "CenteredDataForPCA".impute_10 * -0.354484836964 + "CenteredDataForPCA".impute_11 * 0.627949023398 + "CenteredDataForPCA".impute_12 * 0.0437891692516 + "CenteredDataForPCA".impute_13 * -0.353728969327 + "CenteredDataForPCA".impute_14 * 0.0118066020829 + "CenteredDataForPCA".impute_15 * -0.0625322636934 + "CenteredDataForPCA".impute_16 * -0.106567908028 + "CenteredDataForPCA".impute_17 * -0.101487534883 + "CenteredDataForPCA".impute_18 * -0.186676915538 + "CenteredDataForPCA".impute_19 * -0.0178193287268 + "CenteredDataForPCA".impute_20 * -0.138871263764 + "CenteredDataForPCA".impute_21 * 0.24355521995 AS anoova_7, "CenteredDataForPCA".impute_2 * -0.0728611358577 + "CenteredDataForPCA".impute_3 * 0.113605213061 + "CenteredDataForPCA".impute_4 * 0.32139510704 + "CenteredDataForPCA".impute_5 * 0.538965453606 + "CenteredDataForPCA".impute_6 * -0.0496964700437 + "CenteredDataForPCA".impute_7 * -0.0379086759799 + "CenteredDataForPCA".impute_8 * -0.35105398962 + "CenteredDataForPCA".impute_9 * 0.220370336235 + "CenteredDataForPCA".impute_10 * -0.187830693221 + "CenteredDataForPCA".impute_11 * -0.191573175356 + "CenteredDataForPCA".impute_12 * -0.0410157122477 + "CenteredDataForPCA".impute_13 * -0.380293274832 + "CenteredDataForPCA".impute_14 * 0.0363625264504 + "CenteredDataForPCA".impute_15 * 0.017973915048 + "CenteredDataForPCA".impute_16 * 0.329691963027 + "CenteredDataForPCA".impute_17 * 0.139878814869 + "CenteredDataForPCA".impute_18 * 0.0651902166331 + "CenteredDataForPCA".impute_19 * 0.108431184967 + "CenteredDataForPCA".impute_20 * 0.0122360598867 + "CenteredDataForPCA".impute_21 * 0.218967691309 AS anoova_8, "CenteredDataForPCA".impute_2 * -0.00266774489977 + "CenteredDataForPCA".impute_3 * -0.0157480362954 + "CenteredDataForPCA".impute_4 * -0.163371869885 + "CenteredDataForPCA".impute_5 * -0.0273227263336 + "CenteredDataForPCA".impute_6 * 0.0484137202515 + "CenteredDataForPCA".impute_7 * 0.131817499514 + "CenteredDataForPCA".impute_8 * -0.115778493067 + "CenteredDataForPCA".impute_9 * -0.074803238806 + "CenteredDataForPCA".impute_10 * 0.362766863881 + "CenteredDataForPCA".impute_11 * 7.13047894445e-05 + "CenteredDataForPCA".impute_12 * 0.493793383485 + "CenteredDataForPCA".impute_13 * 0.0325656829885 + "CenteredDataForPCA".impute_14 * -0.0504304883463 + "CenteredDataForPCA".impute_15 * 0.0718298032743 + "CenteredDataForPCA".impute_16 * 0.364438889614 + "CenteredDataForPCA".impute_17 * -0.331321120949 + "CenteredDataForPCA".impute_18 * -0.327460248174 + "CenteredDataForPCA".impute_19 * 0.273230470903 + "CenteredDataForPCA".impute_20 * -0.120107586607 + "CenteredDataForPCA".impute_21 * 0.332404489895 AS anoova_9, "CenteredDataForPCA".impute_2 * 0.0493104046702 + "CenteredDataForPCA".impute_3 * 0.0849406962143 + "CenteredDataForPCA".impute_4 * 0.189522990025 + "CenteredDataForPCA".impute_5 * -0.582198850395 + "CenteredDataForPCA".impute_6 * -0.0079725450685 + "CenteredDataForPCA".impute_7 * -0.173794468621 + "CenteredDataForPCA".impute_8 * 0.162367740535 + "CenteredDataForPCA".impute_9 * -0.136310987092 + "CenteredDataForPCA".impute_10 * 0.125225531714 + "CenteredDataForPCA".impute_11 * -0.153218658642 + "CenteredDataForPCA".impute_12 * 0.0327811919157 + "CenteredDataForPCA".impute_13 * -0.399798715766 + "CenteredDataForPCA".impute_14 * -0.0803895435296 + "CenteredDataForPCA".impute_15 * -0.034746846916 + "CenteredDataForPCA".impute_16 * 0.414587340678 + "CenteredDataForPCA".impute_17 * 0.214593344325 + "CenteredDataForPCA".impute_18 * 0.28420799024 + "CenteredDataForPCA".impute_19 * 0.0721460843572 + "CenteredDataForPCA".impute_20 * -0.149490873223 + "CenteredDataForPCA".impute_21 * -0.0791611649817 AS anoova_10, "CenteredDataForPCA".impute_2 * 0.00828776111243 + "CenteredDataForPCA".impute_3 * -0.061480026397 + "CenteredDataForPCA".impute_4 * -0.0519316711642 + "CenteredDataForPCA".impute_5 * 0.314189310772 + "CenteredDataForPCA".impute_6 * 0.0430434017959 + "CenteredDataForPCA".impute_7 * -0.258820072858 + "CenteredDataForPCA".impute_8 * 0.384368195678 + "CenteredDataForPCA".impute_9 * -0.0227090033826 + "CenteredDataForPCA".impute_10 * 0.314966310529 + "CenteredDataForPCA".impute_11 * -0.249983647377 + "CenteredDataForPCA".impute_12 * 0.289332226451 + "CenteredDataForPCA".impute_13 * -0.478380382384 + "CenteredDataForPCA".impute_14 * 0.0660664224374 + "CenteredDataForPCA".impute_15 * -0.0664685786494 + "CenteredDataForPCA".impute_16 * -0.269402807583 + "CenteredDataForPCA".impute_17 * -0.102624112316 + "CenteredDataForPCA".impute_18 * -0.120461088745 + "CenteredDataForPCA".impute_19 * -0.178385309406 + "CenteredDataForPCA".impute_20 * 0.155547493571 + "CenteredDataForPCA".impute_21 * -0.202406412621 AS anoova_11, "CenteredDataForPCA".impute_2 * -0.00874968102765 + "CenteredDataForPCA".impute_3 * -0.148372211734 + "CenteredDataForPCA".impute_4 * 0.16829740015 + "CenteredDataForPCA".impute_5 * 0.179636011888 + "CenteredDataForPCA".impute_6 * 0.159109624281 + "CenteredDataForPCA".impute_7 * 0.0865190404039 + "CenteredDataForPCA".impute_8 * 0.520100720993 + "CenteredDataForPCA".impute_9 * 0.233372432891 + "CenteredDataForPCA".impute_10 * -0.140425485484 + "CenteredDataForPCA".impute_11 * 0.168800746991 + "CenteredDataForPCA".impute_12 * 0.036965178141 + "CenteredDataForPCA".impute_13 * 0.111148262785 + "CenteredDataForPCA".impute_14 * 0.0963769304344 + "CenteredDataForPCA".impute_15 * -0.0376337241574 + "CenteredDataForPCA".impute_16 * 0.201482134493 + "CenteredDataForPCA".impute_17 * -0.435737522496 + "CenteredDataForPCA".impute_18 * 0.45771350118 + "CenteredDataForPCA".impute_19 * 0.00964255066066 + "CenteredDataForPCA".impute_20 * -0.194948127472 + "CenteredDataForPCA".impute_21 * 0.0940602452273 AS anoova_12, "CenteredDataForPCA".impute_2 * -0.0235055216436 + "CenteredDataForPCA".impute_3 * -0.000832027734976 + "CenteredDataForPCA".impute_4 * 0.17022936154 + "CenteredDataForPCA".impute_5 * -0.224043738481 + "CenteredDataForPCA".impute_6 * -0.0134715901862 + "CenteredDataForPCA".impute_7 * 0.100203607549 + "CenteredDataForPCA".impute_8 * 0.233418374685 + "CenteredDataForPCA".impute_9 * 0.274491412819 + "CenteredDataForPCA".impute_10 * -0.267758240761 + "CenteredDataForPCA".impute_11 * -0.145839202802 + "CenteredDataForPCA".impute_12 * 0.412712989294 + "CenteredDataForPCA".impute_13 * 0.0248631136938 + "CenteredDataForPCA".impute_14 * -0.0436394414783 + "CenteredDataForPCA".impute_15 * 0.0986670283071 + "CenteredDataForPCA".impute_16 * -0.383286442239 + "CenteredDataForPCA".impute_17 * 0.311303727031 + "CenteredDataForPCA".impute_18 * -0.00282011989828 + "CenteredDataForPCA".impute_19 * 0.209839264091 + "CenteredDataForPCA".impute_20 * 0.166947839429 + "CenteredDataForPCA".impute_21 * 0.434669264845 AS anoova_13, "CenteredDataForPCA".impute_2 * -0.0476664531546 + "CenteredDataForPCA".impute_3 * 0.0702223292703 + "CenteredDataForPCA".impute_4 * 0.143369379971 + "CenteredDataForPCA".impute_5 * 0.153310304506 + "CenteredDataForPCA".impute_6 * 0.0359698603928 + "CenteredDataForPCA".impute_7 * -0.0704299028 + "CenteredDataForPCA".impute_8 * 0.0405347304036 + "CenteredDataForPCA".impute_9 * -0.322528817803 + "CenteredDataForPCA".impute_10 * 0.394394218627 + "CenteredDataForPCA".impute_11 * -0.0901693225825 + "CenteredDataForPCA".impute_12 * -0.227968170576 + "CenteredDataForPCA".impute_13 * 0.104858178273 + "CenteredDataForPCA".impute_14 * 0.0936398032606 + "CenteredDataForPCA".impute_15 * -0.083558969195 + "CenteredDataForPCA".impute_16 * -0.303173213538 + "CenteredDataForPCA".impute_17 * 0.173931466268 + "CenteredDataForPCA".impute_18 * 0.147737610613 + "CenteredDataForPCA".impute_19 * -0.0143285700543 + "CenteredDataForPCA".impute_20 * -0.478087074663 + "CenteredDataForPCA".impute_21 * 0.470805843949 AS anoova_14, "CenteredDataForPCA".impute_2 * 0.0348163498512 + "CenteredDataForPCA".impute_3 * -0.082047675378 + "CenteredDataForPCA".impute_4 * -0.192893710272 + "CenteredDataForPCA".impute_5 * 0.248674122848 + "CenteredDataForPCA".impute_6 * 0.0114317623354 + "CenteredDataForPCA".impute_7 * 0.220597148866 + "CenteredDataForPCA".impute_8 * 0.345594058755 + "CenteredDataForPCA".impute_9 * 0.0399360655217 + "CenteredDataForPCA".impute_10 * -0.00250909961877 + "CenteredDataForPCA".impute_11 * 0.258455836318 + "CenteredDataForPCA".impute_12 * 0.106963855133 + "CenteredDataForPCA".impute_13 * 0.0494852010049 + "CenteredDataForPCA".impute_14 * -0.0013056595241 + "CenteredDataForPCA".impute_15 * -0.0103677531744 + "CenteredDataForPCA".impute_16 * 0.304468193718 + "CenteredDataForPCA".impute_17 * 0.636769302846 + "CenteredDataForPCA".impute_18 * -0.235973880317 + "CenteredDataForPCA".impute_19 * -0.139143523048 + "CenteredDataForPCA".impute_20 * -0.242553190131 + "CenteredDataForPCA".impute_21 * -0.101624988071 AS anoova_15, "CenteredDataForPCA".impute_2 * 0.0210758189509 + "CenteredDataForPCA".impute_3 * -0.0294521029758 + "CenteredDataForPCA".impute_4 * 0.0211771118972 + "CenteredDataForPCA".impute_5 * 0.237822139138 + "CenteredDataForPCA".impute_6 * -0.0371026469638 + "CenteredDataForPCA".impute_7 * -0.0969479356298 + "CenteredDataForPCA".impute_8 * -0.0201033284337 + "CenteredDataForPCA".impute_9 * -0.694772692636 + "CenteredDataForPCA".impute_10 * -0.30316203193 + "CenteredDataForPCA".impute_11 * -0.108316982979 + "CenteredDataForPCA".impute_12 * 0.389843787864 + "CenteredDataForPCA".impute_13 * 0.228938999962 + "CenteredDataForPCA".impute_14 * -0.072555748961 + "CenteredDataForPCA".impute_15 * 0.0783493398492 + "CenteredDataForPCA".impute_16 * 0.0712606386053 + "CenteredDataForPCA".impute_17 * 0.0751528739698 + "CenteredDataForPCA".impute_18 * 0.293418813929 + "CenteredDataForPCA".impute_19 * 0.0640247635931 + "CenteredDataForPCA".impute_20 * 0.121931973263 + "CenteredDataForPCA".impute_21 * -0.112118686932 AS anoova_16, "CenteredDataForPCA".impute_2 * -0.0451452053349 + "CenteredDataForPCA".impute_3 * 0.0902978596445 + "CenteredDataForPCA".impute_4 * -0.058109417976 + "CenteredDataForPCA".impute_5 * 0.0223686803787 + "CenteredDataForPCA".impute_6 * -0.0329165736262 + "CenteredDataForPCA".impute_7 * 0.396956083348 + "CenteredDataForPCA".impute_8 * 0.107403878617 + "CenteredDataForPCA".impute_9 * -0.23453177014 + "CenteredDataForPCA".impute_10 * 0.235334773361 + "CenteredDataForPCA".impute_11 * 0.317282798283 + "CenteredDataForPCA".impute_12 * -0.179734949188 + "CenteredDataForPCA".impute_13 * -0.221827861127 + "CenteredDataForPCA".impute_14 * 0.0544366901921 + "CenteredDataForPCA".impute_15 * -0.0412566145853 + "CenteredDataForPCA".impute_16 * 0.0667057339824 + "CenteredDataForPCA".impute_17 * 0.0450473019114 + "CenteredDataForPCA".impute_18 * 0.204405116676 + "CenteredDataForPCA".impute_19 * -0.0354762748547 + "CenteredDataForPCA".impute_20 * 0.622505679446 + "CenteredDataForPCA".impute_21 * 0.285432954001 AS anoova_17, "CenteredDataForPCA".impute_2 * -0.00676451411246 + "CenteredDataForPCA".impute_3 * -0.0344612862569 + "CenteredDataForPCA".impute_4 * 0.620258123336 + "CenteredDataForPCA".impute_5 * -0.00886971552572 + "CenteredDataForPCA".impute_6 * -0.0262465146704 + "CenteredDataForPCA".impute_7 * 0.390559559743 + "CenteredDataForPCA".impute_8 * -0.147292942335 + "CenteredDataForPCA".impute_9 * -0.0866652359732 + "CenteredDataForPCA".impute_10 * 0.143341347917 + "CenteredDataForPCA".impute_11 * 0.331470394532 + "CenteredDataForPCA".impute_12 * 0.20616919168 + "CenteredDataForPCA".impute_13 * -0.135419662955 + "CenteredDataForPCA".impute_14 * -0.0342040011464 + "CenteredDataForPCA".impute_15 * 0.0797878677333 + "CenteredDataForPCA".impute_16 * -0.238435369574 + "CenteredDataForPCA".impute_17 * -0.0405767808539 + "CenteredDataForPCA".impute_18 * -0.0720587945054 + "CenteredDataForPCA".impute_19 * 0.0732338697871 + "CenteredDataForPCA".impute_20 * -0.174947021992 + "CenteredDataForPCA".impute_21 * -0.364796509129 AS anoova_18, "CenteredDataForPCA".impute_2 * 0.000690292443313 + "CenteredDataForPCA".impute_3 * 0.0652724505923 + "CenteredDataForPCA".impute_4 * -0.535037746594 + "CenteredDataForPCA".impute_5 * -0.00746972490856 + "CenteredDataForPCA".impute_6 * 0.0303933207613 + "CenteredDataForPCA".impute_7 * 0.340844832618 + "CenteredDataForPCA".impute_8 * -0.284746295672 + "CenteredDataForPCA".impute_9 * 0.0991472985903 + "CenteredDataForPCA".impute_10 * -0.0752168162718 + "CenteredDataForPCA".impute_11 * -0.00707557644338 + "CenteredDataForPCA".impute_12 * 0.217520306659 + "CenteredDataForPCA".impute_13 * -0.317272134269 + "CenteredDataForPCA".impute_14 * 0.028461371899 + "CenteredDataForPCA".impute_15 * -0.081307786657 + "CenteredDataForPCA".impute_16 * -0.223622957837 + "CenteredDataForPCA".impute_17 * 0.00893271135383 + "CenteredDataForPCA".impute_18 * 0.439991861442 + "CenteredDataForPCA".impute_19 * -0.0112635079595 + "CenteredDataForPCA".impute_20 * -0.300952021199 + "CenteredDataForPCA".impute_21 * -0.0769680162988 AS anoova_19, "CenteredDataForPCA".impute_2 * -0.320380842337 + "CenteredDataForPCA".impute_3 * 0.358088202006 + "CenteredDataForPCA".impute_4 * -1.3791051634e-16 + "CenteredDataForPCA".impute_5 * 1.45716771982e-16 + "CenteredDataForPCA".impute_6 * 0.629802257341 + "CenteredDataForPCA".impute_7 * 1.75207071074e-16 + "CenteredDataForPCA".impute_8 * 8.32667268469e-17 + "CenteredDataForPCA".impute_9 * -8.41340885849e-17 + "CenteredDataForPCA".impute_10 * -1.20129600711e-16 + "CenteredDataForPCA".impute_11 * -1.09504419421e-16 + "CenteredDataForPCA".impute_12 * 2.51534904017e-16 + "CenteredDataForPCA".impute_13 * 9.10729824888e-17 + "CenteredDataForPCA".impute_14 * -0.316029992843 + "CenteredDataForPCA".impute_15 * 0.446936276929 + "CenteredDataForPCA".impute_16 * 2.25514051877e-17 + "CenteredDataForPCA".impute_17 * 3.46944695195e-18 + "CenteredDataForPCA".impute_18 * 1.0364972769e-16 + "CenteredDataForPCA".impute_19 * -0.269909392361 + "CenteredDataForPCA".impute_20 * -1.15359111152e-16 + "CenteredDataForPCA".impute_21 * -1.11889664201e-16 AS anoova_20, "CenteredDataForPCA".impute_2 * -0.684229123252 + "CenteredDataForPCA".impute_3 * -0.280346863384 + "CenteredDataForPCA".impute_4 * 6.93889390391e-17 + "CenteredDataForPCA".impute_5 * -1.66533453694e-16 + "CenteredDataForPCA".impute_6 * -0.108428405526 + "CenteredDataForPCA".impute_7 * -8.32667268469e-17 + "CenteredDataForPCA".impute_8 * -3.46944695195e-17 + "CenteredDataForPCA".impute_9 * 5.81132364452e-17 + "CenteredDataForPCA".impute_10 * 8.67361737988e-17 + "CenteredDataForPCA".impute_11 * 1.35308431126e-16 + "CenteredDataForPCA".impute_12 * -5.55111512313e-17 + "CenteredDataForPCA".impute_13 * -6.93889390391e-17 + "CenteredDataForPCA".impute_14 * -0.491411139877 + "CenteredDataForPCA".impute_15 * -0.446611326318 + "CenteredDataForPCA".impute_16 * -1.38777878078e-17 + "CenteredDataForPCA".impute_17 * -6.24500451352e-17 + "CenteredDataForPCA".impute_18 * -2.08166817117e-17 + "CenteredDataForPCA".impute_19 * 0.0230833006457 + "CenteredDataForPCA".impute_20 * 7.6327832943e-17 + "CenteredDataForPCA".impute_21 * 6.24500451352e-17 AS anoova_21 
FROM "CenteredDataForPCA"), 
"DT_node_lookup" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.202508) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.72912) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.202508 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -1.72912 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0375 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0217822 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0736842 AS "Score" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Score" AS "Score" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"XGB_Tree_0_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0_0, "DT_Output"."Score" AS "Score_0_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.439914) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= 0.0362312) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_10' AS feature, 0.439914 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_3' AS feature, 0.0362312 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0379651 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0476935 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0103491 AS "Score" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Score" AS "Score" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"XGB_Tree_0_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_0_1, "DT_Output_1"."Score" AS "Score_0_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.202508) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.72912) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.202508 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -1.72912 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0362697 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0207652 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.067184 AS "Score" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Score" AS "Score" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"XGB_Tree_0_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_0_2, "DT_Output_2"."Score" AS "Score_0_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= -0.379555) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_12 <= 0.196555) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_19' AS feature, -0.379555 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0455666 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_12' AS feature, 0.196555 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00707411 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.046665 AS "Score" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Score" AS "Score" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"XGB_Tree_0_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_0_3, "DT_Output_3"."Score" AS "Score_0_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.202508) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.72912) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.202508 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_2' AS feature, -1.72912 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0350225 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0191824 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0603727 AS "Score" FROM DUAL) "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Score" AS "Score" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"XGB_Tree_0_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_0_4, "DT_Output_4"."Score" AS "Score_0_4" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.439914) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.0501938) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_10' AS feature, 0.439914 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_8' AS feature, 0.0501938 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0348677 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0475123 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0118285 AS "Score" FROM DUAL) "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Score" AS "Score" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"XGB_Tree_0_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_0_5, "DT_Output_5"."Score" AS "Score_0_5" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.202508) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= -0.159893) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.202508 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_8' AS feature, -0.159893 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0341276 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0198714 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0561255 AS "Score" FROM DUAL) "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Score" AS "Score" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"XGB_Tree_0_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_0_6, "DT_Output_6"."Score" AS "Score_0_6" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= -0.379555) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_6 <= 0.0609502) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_19' AS feature, -0.379555 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0411831 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_6' AS feature, 0.0609502 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00850473 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0461 AS "Score" FROM DUAL) "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Score" AS "Score" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"XGB_Tree_0_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_0_7, "DT_Output_7"."Score" AS "Score_0_7" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.202508) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= -0.159893) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, 0.202508 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_8' AS feature, -0.159893 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0329759 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0196376 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0525171 AS "Score" FROM DUAL) "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Score" AS "Score" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"XGB_Tree_0_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_0_8, "DT_Output_8"."Score" AS "Score_0_8" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.439914) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.0501938) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_10' AS feature, 0.439914 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_8' AS feature, 0.0501938 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0314447 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0455949 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0104815 AS "Score" FROM DUAL) "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Score" AS "Score" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"XGB_Tree_0_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_0_9, "DT_Output_9"."Score" AS "Score_0_9" 
FROM "DT_Output_9"), 
"DT_node_lookup_10" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.150239) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.0432863) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_10" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.150239 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_10' AS feature, 0.0432863 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0630137 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.101124 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00224719 AS "Score" FROM DUAL) "Values"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", "DT_node_lookup_10".node_id_2 AS node_id_2, "DT_node_data_10".node_id AS node_id, "DT_node_data_10".feature AS feature, "DT_node_data_10".threshold AS threshold, "DT_node_data_10".depth AS depth, "DT_node_data_10".parent_id AS parent_id, "DT_node_data_10"."Score" AS "Score" 
FROM "DT_node_lookup_10" LEFT OUTER JOIN "DT_node_data_10" ON "DT_node_lookup_10".node_id_2 = "DT_node_data_10".node_id), 
"XGB_Tree_1_0" AS 
(SELECT "DT_Output_10"."KEY" AS join_key_1_0, "DT_Output_10"."Score" AS "Score_1_0" 
FROM "DT_Output_10"), 
"DT_node_lookup_11" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.462775) THEN 1 ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_11" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.462775 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0586101 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0530447 AS "Score" FROM DUAL) "Values"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", "DT_node_lookup_11".node_id_2 AS node_id_2, "DT_node_data_11".node_id AS node_id, "DT_node_data_11".feature AS feature, "DT_node_data_11".threshold AS threshold, "DT_node_data_11".depth AS depth, "DT_node_data_11".parent_id AS parent_id, "DT_node_data_11"."Score" AS "Score" 
FROM "DT_node_lookup_11" LEFT OUTER JOIN "DT_node_data_11" ON "DT_node_lookup_11".node_id_2 = "DT_node_data_11".node_id), 
"XGB_Tree_1_1" AS 
(SELECT "DT_Output_11"."KEY" AS join_key_1_1, "DT_Output_11"."Score" AS "Score_1_1" 
FROM "DT_Output_11"), 
"DT_node_lookup_12" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.150239) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.0432863) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_12" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.150239 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_10' AS feature, 0.0432863 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0606842 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0863791 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.000403893 AS "Score" FROM DUAL) "Values"), 
"DT_Output_12" AS 
(SELECT "DT_node_lookup_12"."KEY" AS "KEY", "DT_node_lookup_12".node_id_2 AS node_id_2, "DT_node_data_12".node_id AS node_id, "DT_node_data_12".feature AS feature, "DT_node_data_12".threshold AS threshold, "DT_node_data_12".depth AS depth, "DT_node_data_12".parent_id AS parent_id, "DT_node_data_12"."Score" AS "Score" 
FROM "DT_node_lookup_12" LEFT OUTER JOIN "DT_node_data_12" ON "DT_node_lookup_12".node_id_2 = "DT_node_data_12".node_id), 
"XGB_Tree_1_2" AS 
(SELECT "DT_Output_12"."KEY" AS join_key_1_2, "DT_Output_12"."Score" AS "Score_1_2" 
FROM "DT_Output_12"), 
"DT_node_lookup_13" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.462775) THEN 1 ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_13" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.462775 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0501447 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0508143 AS "Score" FROM DUAL) "Values"), 
"DT_Output_13" AS 
(SELECT "DT_node_lookup_13"."KEY" AS "KEY", "DT_node_lookup_13".node_id_2 AS node_id_2, "DT_node_data_13".node_id AS node_id, "DT_node_data_13".feature AS feature, "DT_node_data_13".threshold AS threshold, "DT_node_data_13".depth AS depth, "DT_node_data_13".parent_id AS parent_id, "DT_node_data_13"."Score" AS "Score" 
FROM "DT_node_lookup_13" LEFT OUTER JOIN "DT_node_data_13" ON "DT_node_lookup_13".node_id_2 = "DT_node_data_13".node_id), 
"XGB_Tree_1_3" AS 
(SELECT "DT_Output_13"."KEY" AS join_key_1_3, "DT_Output_13"."Score" AS "Score_1_3" 
FROM "DT_Output_13"), 
"DT_node_lookup_14" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.150239) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.0432863) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_14" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.150239 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_10' AS feature, 0.0432863 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0588299 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0766644 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00258928 AS "Score" FROM DUAL) "Values"), 
"DT_Output_14" AS 
(SELECT "DT_node_lookup_14"."KEY" AS "KEY", "DT_node_lookup_14".node_id_2 AS node_id_2, "DT_node_data_14".node_id AS node_id, "DT_node_data_14".feature AS feature, "DT_node_data_14".threshold AS threshold, "DT_node_data_14".depth AS depth, "DT_node_data_14".parent_id AS parent_id, "DT_node_data_14"."Score" AS "Score" 
FROM "DT_node_lookup_14" LEFT OUTER JOIN "DT_node_data_14" ON "DT_node_lookup_14".node_id_2 = "DT_node_data_14".node_id), 
"XGB_Tree_1_4" AS 
(SELECT "DT_Output_14"."KEY" AS join_key_1_4, "DT_Output_14"."Score" AS "Score_1_4" 
FROM "DT_Output_14"), 
"DT_node_lookup_15" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.150239) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_20 <= -7.06459e-18) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_15" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.150239 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_20' AS feature, -7.06459e-18 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0579029 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0703705 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00396437 AS "Score" FROM DUAL) "Values"), 
"DT_Output_15" AS 
(SELECT "DT_node_lookup_15"."KEY" AS "KEY", "DT_node_lookup_15".node_id_2 AS node_id_2, "DT_node_data_15".node_id AS node_id, "DT_node_data_15".feature AS feature, "DT_node_data_15".threshold AS threshold, "DT_node_data_15".depth AS depth, "DT_node_data_15".parent_id AS parent_id, "DT_node_data_15"."Score" AS "Score" 
FROM "DT_node_lookup_15" LEFT OUTER JOIN "DT_node_data_15" ON "DT_node_lookup_15".node_id_2 = "DT_node_data_15".node_id), 
"XGB_Tree_1_5" AS 
(SELECT "DT_Output_15"."KEY" AS join_key_1_5, "DT_Output_15"."Score" AS "Score_1_5" 
FROM "DT_Output_15"), 
"DT_node_lookup_16" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.802598) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_20 <= -1.02272e-16) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_16" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.802598 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0521426 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_20' AS feature, -1.02272e-16 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0144752 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0584141 AS "Score" FROM DUAL) "Values"), 
"DT_Output_16" AS 
(SELECT "DT_node_lookup_16"."KEY" AS "KEY", "DT_node_lookup_16".node_id_2 AS node_id_2, "DT_node_data_16".node_id AS node_id, "DT_node_data_16".feature AS feature, "DT_node_data_16".threshold AS threshold, "DT_node_data_16".depth AS depth, "DT_node_data_16".parent_id AS parent_id, "DT_node_data_16"."Score" AS "Score" 
FROM "DT_node_lookup_16" LEFT OUTER JOIN "DT_node_data_16" ON "DT_node_lookup_16".node_id_2 = "DT_node_data_16".node_id), 
"XGB_Tree_1_6" AS 
(SELECT "DT_Output_16"."KEY" AS join_key_1_6, "DT_Output_16"."Score" AS "Score_1_6" 
FROM "DT_Output_16"), 
"DT_node_lookup_17" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.150239) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.0432863) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_17" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.150239 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_10' AS feature, 0.0432863 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0567206 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0659468 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00439166 AS "Score" FROM DUAL) "Values"), 
"DT_Output_17" AS 
(SELECT "DT_node_lookup_17"."KEY" AS "KEY", "DT_node_lookup_17".node_id_2 AS node_id_2, "DT_node_data_17".node_id AS node_id, "DT_node_data_17".feature AS feature, "DT_node_data_17".threshold AS threshold, "DT_node_data_17".depth AS depth, "DT_node_data_17".parent_id AS parent_id, "DT_node_data_17"."Score" AS "Score" 
FROM "DT_node_lookup_17" LEFT OUTER JOIN "DT_node_data_17" ON "DT_node_lookup_17".node_id_2 = "DT_node_data_17".node_id), 
"XGB_Tree_1_7" AS 
(SELECT "DT_Output_17"."KEY" AS join_key_1_7, "DT_Output_17"."Score" AS "Score_1_7" 
FROM "DT_Output_17"), 
"DT_node_lookup_18" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.150239) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_20 <= -7.06459e-18) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_18" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.150239 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_20' AS feature, -7.06459e-18 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0560231 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0611841 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00520432 AS "Score" FROM DUAL) "Values"), 
"DT_Output_18" AS 
(SELECT "DT_node_lookup_18"."KEY" AS "KEY", "DT_node_lookup_18".node_id_2 AS node_id_2, "DT_node_data_18".node_id AS node_id, "DT_node_data_18".feature AS feature, "DT_node_data_18".threshold AS threshold, "DT_node_data_18".depth AS depth, "DT_node_data_18".parent_id AS parent_id, "DT_node_data_18"."Score" AS "Score" 
FROM "DT_node_lookup_18" LEFT OUTER JOIN "DT_node_data_18" ON "DT_node_lookup_18".node_id_2 = "DT_node_data_18".node_id), 
"XGB_Tree_1_8" AS 
(SELECT "DT_Output_18"."KEY" AS join_key_1_8, "DT_Output_18"."Score" AS "Score_1_8" 
FROM "DT_Output_18"), 
"DT_node_lookup_19" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.150239) THEN CASE WHEN ("ADS_ano_2_OUT".anoova_10 <= 0.0432863) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_19" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.150239 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, 'anoova_10' AS feature, 0.0432863 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0554078 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.060115 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00516287 AS "Score" FROM DUAL) "Values"), 
"DT_Output_19" AS 
(SELECT "DT_node_lookup_19"."KEY" AS "KEY", "DT_node_lookup_19".node_id_2 AS node_id_2, "DT_node_data_19".node_id AS node_id, "DT_node_data_19".feature AS feature, "DT_node_data_19".threshold AS threshold, "DT_node_data_19".depth AS depth, "DT_node_data_19".parent_id AS parent_id, "DT_node_data_19"."Score" AS "Score" 
FROM "DT_node_lookup_19" LEFT OUTER JOIN "DT_node_data_19" ON "DT_node_lookup_19".node_id_2 = "DT_node_data_19".node_id), 
"XGB_Tree_1_9" AS 
(SELECT "DT_Output_19"."KEY" AS join_key_1_9, "DT_Output_19"."Score" AS "Score_1_9" 
FROM "DT_Output_19"), 
"DT_node_lookup_20" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.857813) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.2382) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_20" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.857813 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0561798 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_8' AS feature, 0.2382 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0457143 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0231579 AS "Score" FROM DUAL) "Values"), 
"DT_Output_20" AS 
(SELECT "DT_node_lookup_20"."KEY" AS "KEY", "DT_node_lookup_20".node_id_2 AS node_id_2, "DT_node_data_20".node_id AS node_id, "DT_node_data_20".feature AS feature, "DT_node_data_20".threshold AS threshold, "DT_node_data_20".depth AS depth, "DT_node_data_20".parent_id AS parent_id, "DT_node_data_20"."Score" AS "Score" 
FROM "DT_node_lookup_20" LEFT OUTER JOIN "DT_node_data_20" ON "DT_node_lookup_20".node_id_2 = "DT_node_data_20".node_id), 
"XGB_Tree_2_0" AS 
(SELECT "DT_Output_20"."KEY" AS join_key_2_0, "DT_Output_20"."Score" AS "Score_2_0" 
FROM "DT_Output_20"), 
"DT_node_lookup_21" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.92307) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.2382) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_21" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.92307 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0552531 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_8' AS feature, 0.2382 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0449241 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0221888 AS "Score" FROM DUAL) "Values"), 
"DT_Output_21" AS 
(SELECT "DT_node_lookup_21"."KEY" AS "KEY", "DT_node_lookup_21".node_id_2 AS node_id_2, "DT_node_data_21".node_id AS node_id, "DT_node_data_21".feature AS feature, "DT_node_data_21".threshold AS threshold, "DT_node_data_21".depth AS depth, "DT_node_data_21".parent_id AS parent_id, "DT_node_data_21"."Score" AS "Score" 
FROM "DT_node_lookup_21" LEFT OUTER JOIN "DT_node_data_21" ON "DT_node_lookup_21".node_id_2 = "DT_node_data_21".node_id), 
"XGB_Tree_2_1" AS 
(SELECT "DT_Output_21"."KEY" AS join_key_2_1, "DT_Output_21"."Score" AS "Score_2_1" 
FROM "DT_Output_21"), 
"DT_node_lookup_22" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.978524) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.2382) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_22" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.978524 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0549638 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_8' AS feature, 0.2382 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0442879 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0213624 AS "Score" FROM DUAL) "Values"), 
"DT_Output_22" AS 
(SELECT "DT_node_lookup_22"."KEY" AS "KEY", "DT_node_lookup_22".node_id_2 AS node_id_2, "DT_node_data_22".node_id AS node_id, "DT_node_data_22".feature AS feature, "DT_node_data_22".threshold AS threshold, "DT_node_data_22".depth AS depth, "DT_node_data_22".parent_id AS parent_id, "DT_node_data_22"."Score" AS "Score" 
FROM "DT_node_lookup_22" LEFT OUTER JOIN "DT_node_data_22" ON "DT_node_lookup_22".node_id_2 = "DT_node_data_22".node_id), 
"XGB_Tree_2_2" AS 
(SELECT "DT_Output_22"."KEY" AS join_key_2_2, "DT_Output_22"."Score" AS "Score_2_2" 
FROM "DT_Output_22"), 
"DT_node_lookup_23" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.87658) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.304028) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_23" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -1.87658 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0500522 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 0.304028 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0465961 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00864618 AS "Score" FROM DUAL) "Values"), 
"DT_Output_23" AS 
(SELECT "DT_node_lookup_23"."KEY" AS "KEY", "DT_node_lookup_23".node_id_2 AS node_id_2, "DT_node_data_23".node_id AS node_id, "DT_node_data_23".feature AS feature, "DT_node_data_23".threshold AS threshold, "DT_node_data_23".depth AS depth, "DT_node_data_23".parent_id AS parent_id, "DT_node_data_23"."Score" AS "Score" 
FROM "DT_node_lookup_23" LEFT OUTER JOIN "DT_node_data_23" ON "DT_node_lookup_23".node_id_2 = "DT_node_data_23".node_id), 
"XGB_Tree_2_3" AS 
(SELECT "DT_Output_23"."KEY" AS join_key_2_3, "DT_Output_23"."Score" AS "Score_2_3" 
FROM "DT_Output_23"), 
"DT_node_lookup_24" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.978524) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.2382) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_24" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.978524 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.048789 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_8' AS feature, 0.2382 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.042916 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0208365 AS "Score" FROM DUAL) "Values"), 
"DT_Output_24" AS 
(SELECT "DT_node_lookup_24"."KEY" AS "KEY", "DT_node_lookup_24".node_id_2 AS node_id_2, "DT_node_data_24".node_id AS node_id, "DT_node_data_24".feature AS feature, "DT_node_data_24".threshold AS threshold, "DT_node_data_24".depth AS depth, "DT_node_data_24".parent_id AS parent_id, "DT_node_data_24"."Score" AS "Score" 
FROM "DT_node_lookup_24" LEFT OUTER JOIN "DT_node_data_24" ON "DT_node_lookup_24".node_id_2 = "DT_node_data_24".node_id), 
"XGB_Tree_2_4" AS 
(SELECT "DT_Output_24"."KEY" AS join_key_2_4, "DT_Output_24"."Score" AS "Score_2_4" 
FROM "DT_Output_24"), 
"DT_node_lookup_25" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.87658) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.572804) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_25" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -1.87658 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0460539 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, -0.572804 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0171625 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0379833 AS "Score" FROM DUAL) "Values"), 
"DT_Output_25" AS 
(SELECT "DT_node_lookup_25"."KEY" AS "KEY", "DT_node_lookup_25".node_id_2 AS node_id_2, "DT_node_data_25".node_id AS node_id, "DT_node_data_25".feature AS feature, "DT_node_data_25".threshold AS threshold, "DT_node_data_25".depth AS depth, "DT_node_data_25".parent_id AS parent_id, "DT_node_data_25"."Score" AS "Score" 
FROM "DT_node_lookup_25" LEFT OUTER JOIN "DT_node_data_25" ON "DT_node_lookup_25".node_id_2 = "DT_node_data_25".node_id), 
"XGB_Tree_2_5" AS 
(SELECT "DT_Output_25"."KEY" AS join_key_2_5, "DT_Output_25"."Score" AS "Score_2_5" 
FROM "DT_Output_25"), 
"DT_node_lookup_26" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.87658) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 1.60161) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_26" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -1.87658 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0431753 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 1.60161 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.038114 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0164489 AS "Score" FROM DUAL) "Values"), 
"DT_Output_26" AS 
(SELECT "DT_node_lookup_26"."KEY" AS "KEY", "DT_node_lookup_26".node_id_2 AS node_id_2, "DT_node_data_26".node_id AS node_id, "DT_node_data_26".feature AS feature, "DT_node_data_26".threshold AS threshold, "DT_node_data_26".depth AS depth, "DT_node_data_26".parent_id AS parent_id, "DT_node_data_26"."Score" AS "Score" 
FROM "DT_node_lookup_26" LEFT OUTER JOIN "DT_node_data_26" ON "DT_node_lookup_26".node_id_2 = "DT_node_data_26".node_id), 
"XGB_Tree_2_6" AS 
(SELECT "DT_Output_26"."KEY" AS join_key_2_6, "DT_Output_26"."Score" AS "Score_2_6" 
FROM "DT_Output_26"), 
"DT_node_lookup_27" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.978524) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_8 <= 0.2382) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_27" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.978524 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0426853 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_8' AS feature, 0.2382 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0416751 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0213923 AS "Score" FROM DUAL) "Values"), 
"DT_Output_27" AS 
(SELECT "DT_node_lookup_27"."KEY" AS "KEY", "DT_node_lookup_27".node_id_2 AS node_id_2, "DT_node_data_27".node_id AS node_id, "DT_node_data_27".feature AS feature, "DT_node_data_27".threshold AS threshold, "DT_node_data_27".depth AS depth, "DT_node_data_27".parent_id AS parent_id, "DT_node_data_27"."Score" AS "Score" 
FROM "DT_node_lookup_27" LEFT OUTER JOIN "DT_node_data_27" ON "DT_node_lookup_27".node_id_2 = "DT_node_data_27".node_id), 
"XGB_Tree_2_7" AS 
(SELECT "DT_Output_27"."KEY" AS join_key_2_7, "DT_Output_27"."Score" AS "Score_2_7" 
FROM "DT_Output_27"), 
"DT_node_lookup_28" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= -1.87658) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_2 <= 0.304028) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_28" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_2' AS feature, -1.87658 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0408807 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_2' AS feature, 0.304028 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0439805 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00825848 AS "Score" FROM DUAL) "Values"), 
"DT_Output_28" AS 
(SELECT "DT_node_lookup_28"."KEY" AS "KEY", "DT_node_lookup_28".node_id_2 AS node_id_2, "DT_node_data_28".node_id AS node_id, "DT_node_data_28".feature AS feature, "DT_node_data_28".threshold AS threshold, "DT_node_data_28".depth AS depth, "DT_node_data_28".parent_id AS parent_id, "DT_node_data_28"."Score" AS "Score" 
FROM "DT_node_lookup_28" LEFT OUTER JOIN "DT_node_data_28" ON "DT_node_lookup_28".node_id_2 = "DT_node_data_28".node_id), 
"XGB_Tree_2_8" AS 
(SELECT "DT_Output_28"."KEY" AS join_key_2_8, "DT_Output_28"."Score" AS "Score_2_8" 
FROM "DT_Output_28"), 
"DT_node_lookup_29" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.79216) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_20 <= -7.20279e-17) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_29" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_3' AS feature, -0.79216 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0326561 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_20' AS feature, -7.20279e-17 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00884315 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0570049 AS "Score" FROM DUAL) "Values"), 
"DT_Output_29" AS 
(SELECT "DT_node_lookup_29"."KEY" AS "KEY", "DT_node_lookup_29".node_id_2 AS node_id_2, "DT_node_data_29".node_id AS node_id, "DT_node_data_29".feature AS feature, "DT_node_data_29".threshold AS threshold, "DT_node_data_29".depth AS depth, "DT_node_data_29".parent_id AS parent_id, "DT_node_data_29"."Score" AS "Score" 
FROM "DT_node_lookup_29" LEFT OUTER JOIN "DT_node_data_29" ON "DT_node_lookup_29".node_id_2 = "DT_node_data_29".node_id), 
"XGB_Tree_2_9" AS 
(SELECT "DT_Output_29"."KEY" AS join_key_2_9, "DT_Output_29"."Score" AS "Score_2_9" 
FROM "DT_Output_29"), 
"DT_node_lookup_30" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.515675) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.138902) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_30" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.515675 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0487395 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -0.138902 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0123894 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0695652 AS "Score" FROM DUAL) "Values"), 
"DT_Output_30" AS 
(SELECT "DT_node_lookup_30"."KEY" AS "KEY", "DT_node_lookup_30".node_id_2 AS node_id_2, "DT_node_data_30".node_id AS node_id, "DT_node_data_30".feature AS feature, "DT_node_data_30".threshold AS threshold, "DT_node_data_30".depth AS depth, "DT_node_data_30".parent_id AS parent_id, "DT_node_data_30"."Score" AS "Score" 
FROM "DT_node_lookup_30" LEFT OUTER JOIN "DT_node_data_30" ON "DT_node_lookup_30".node_id_2 = "DT_node_data_30".node_id), 
"XGB_Tree_3_0" AS 
(SELECT "DT_Output_30"."KEY" AS join_key_3_0, "DT_Output_30"."Score" AS "Score_3_0" 
FROM "DT_Output_30"), 
"DT_node_lookup_31" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.515675) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.138902) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_31" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.515675 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0473051 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -0.138902 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0114181 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0623689 AS "Score" FROM DUAL) "Values"), 
"DT_Output_31" AS 
(SELECT "DT_node_lookup_31"."KEY" AS "KEY", "DT_node_lookup_31".node_id_2 AS node_id_2, "DT_node_data_31".node_id AS node_id, "DT_node_data_31".feature AS feature, "DT_node_data_31".threshold AS threshold, "DT_node_data_31".depth AS depth, "DT_node_data_31".parent_id AS parent_id, "DT_node_data_31"."Score" AS "Score" 
FROM "DT_node_lookup_31" LEFT OUTER JOIN "DT_node_data_31" ON "DT_node_lookup_31".node_id_2 = "DT_node_data_31".node_id), 
"XGB_Tree_3_1" AS 
(SELECT "DT_Output_31"."KEY" AS join_key_3_1, "DT_Output_31"."Score" AS "Score_3_1" 
FROM "DT_Output_31"), 
"DT_node_lookup_32" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.515675) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.138902) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_32" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.515675 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0459303 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -0.138902 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0107038 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0567294 AS "Score" FROM DUAL) "Values"), 
"DT_Output_32" AS 
(SELECT "DT_node_lookup_32"."KEY" AS "KEY", "DT_node_lookup_32".node_id_2 AS node_id_2, "DT_node_data_32".node_id AS node_id, "DT_node_data_32".feature AS feature, "DT_node_data_32".threshold AS threshold, "DT_node_data_32".depth AS depth, "DT_node_data_32".parent_id AS parent_id, "DT_node_data_32"."Score" AS "Score" 
FROM "DT_node_lookup_32" LEFT OUTER JOIN "DT_node_data_32" ON "DT_node_lookup_32".node_id_2 = "DT_node_data_32".node_id), 
"XGB_Tree_3_2" AS 
(SELECT "DT_Output_32"."KEY" AS join_key_3_2, "DT_Output_32"."Score" AS "Score_3_2" 
FROM "DT_Output_32"), 
"DT_node_lookup_33" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.515675) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.138902) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_33" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.515675 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0446199 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -0.138902 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0098144 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0513499 AS "Score" FROM DUAL) "Values"), 
"DT_Output_33" AS 
(SELECT "DT_node_lookup_33"."KEY" AS "KEY", "DT_node_lookup_33".node_id_2 AS node_id_2, "DT_node_data_33".node_id AS node_id, "DT_node_data_33".feature AS feature, "DT_node_data_33".threshold AS threshold, "DT_node_data_33".depth AS depth, "DT_node_data_33".parent_id AS parent_id, "DT_node_data_33"."Score" AS "Score" 
FROM "DT_node_lookup_33" LEFT OUTER JOIN "DT_node_data_33" ON "DT_node_lookup_33".node_id_2 = "DT_node_data_33".node_id), 
"XGB_Tree_3_3" AS 
(SELECT "DT_Output_33"."KEY" AS join_key_3_3, "DT_Output_33"."Score" AS "Score_3_3" 
FROM "DT_Output_33"), 
"DT_node_lookup_34" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.515675) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_3 <= -0.138902) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_34" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.515675 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0435981 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_3' AS feature, -0.138902 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00855625 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0467834 AS "Score" FROM DUAL) "Values"), 
"DT_Output_34" AS 
(SELECT "DT_node_lookup_34"."KEY" AS "KEY", "DT_node_lookup_34".node_id_2 AS node_id_2, "DT_node_data_34".node_id AS node_id, "DT_node_data_34".feature AS feature, "DT_node_data_34".threshold AS threshold, "DT_node_data_34".depth AS depth, "DT_node_data_34".parent_id AS parent_id, "DT_node_data_34"."Score" AS "Score" 
FROM "DT_node_lookup_34" LEFT OUTER JOIN "DT_node_data_34" ON "DT_node_lookup_34".node_id_2 = "DT_node_data_34".node_id), 
"XGB_Tree_3_4" AS 
(SELECT "DT_Output_34"."KEY" AS join_key_3_4, "DT_Output_34"."Score" AS "Score_3_4" 
FROM "DT_Output_34"), 
"DT_node_lookup_35" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.23066) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.0325438) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_35" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -1.23066 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0452979 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_5' AS feature, -0.0325438 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0184384 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0458649 AS "Score" FROM DUAL) "Values"), 
"DT_Output_35" AS 
(SELECT "DT_node_lookup_35"."KEY" AS "KEY", "DT_node_lookup_35".node_id_2 AS node_id_2, "DT_node_data_35".node_id AS node_id, "DT_node_data_35".feature AS feature, "DT_node_data_35".threshold AS threshold, "DT_node_data_35".depth AS depth, "DT_node_data_35".parent_id AS parent_id, "DT_node_data_35"."Score" AS "Score" 
FROM "DT_node_lookup_35" LEFT OUTER JOIN "DT_node_data_35" ON "DT_node_lookup_35".node_id_2 = "DT_node_data_35".node_id), 
"XGB_Tree_3_5" AS 
(SELECT "DT_Output_35"."KEY" AS join_key_3_5, "DT_Output_35"."Score" AS "Score_3_5" 
FROM "DT_Output_35"), 
"DT_node_lookup_36" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.23066) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.233947) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_36" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -1.23066 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0442258 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_9' AS feature, -0.233947 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0530822 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00873105 AS "Score" FROM DUAL) "Values"), 
"DT_Output_36" AS 
(SELECT "DT_node_lookup_36"."KEY" AS "KEY", "DT_node_lookup_36".node_id_2 AS node_id_2, "DT_node_data_36".node_id AS node_id, "DT_node_data_36".feature AS feature, "DT_node_data_36".threshold AS threshold, "DT_node_data_36".depth AS depth, "DT_node_data_36".parent_id AS parent_id, "DT_node_data_36"."Score" AS "Score" 
FROM "DT_node_lookup_36" LEFT OUTER JOIN "DT_node_data_36" ON "DT_node_lookup_36".node_id_2 = "DT_node_data_36".node_id), 
"XGB_Tree_3_6" AS 
(SELECT "DT_Output_36"."KEY" AS join_key_3_6, "DT_Output_36"."Score" AS "Score_3_6" 
FROM "DT_Output_36"), 
"DT_node_lookup_37" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_5 <= -0.515675) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_19 <= 0.115939) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_37" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_5' AS feature, -0.515675 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0414522 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_19' AS feature, 0.115939 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0368046 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0110899 AS "Score" FROM DUAL) "Values"), 
"DT_Output_37" AS 
(SELECT "DT_node_lookup_37"."KEY" AS "KEY", "DT_node_lookup_37".node_id_2 AS node_id_2, "DT_node_data_37".node_id AS node_id, "DT_node_data_37".feature AS feature, "DT_node_data_37".threshold AS threshold, "DT_node_data_37".depth AS depth, "DT_node_data_37".parent_id AS parent_id, "DT_node_data_37"."Score" AS "Score" 
FROM "DT_node_lookup_37" LEFT OUTER JOIN "DT_node_data_37" ON "DT_node_lookup_37".node_id_2 = "DT_node_data_37".node_id), 
"XGB_Tree_3_7" AS 
(SELECT "DT_Output_37"."KEY" AS join_key_3_7, "DT_Output_37"."Score" AS "Score_3_7" 
FROM "DT_Output_37"), 
"DT_node_lookup_38" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.23066) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_17 <= -0.158361) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_38" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -1.23066 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0431825 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_17' AS feature, -0.158361 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0496094 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00864075 AS "Score" FROM DUAL) "Values"), 
"DT_Output_38" AS 
(SELECT "DT_node_lookup_38"."KEY" AS "KEY", "DT_node_lookup_38".node_id_2 AS node_id_2, "DT_node_data_38".node_id AS node_id, "DT_node_data_38".feature AS feature, "DT_node_data_38".threshold AS threshold, "DT_node_data_38".depth AS depth, "DT_node_data_38".parent_id AS parent_id, "DT_node_data_38"."Score" AS "Score" 
FROM "DT_node_lookup_38" LEFT OUTER JOIN "DT_node_data_38" ON "DT_node_lookup_38".node_id_2 = "DT_node_data_38".node_id), 
"XGB_Tree_3_8" AS 
(SELECT "DT_Output_38"."KEY" AS join_key_3_8, "DT_Output_38"."Score" AS "Score_3_8" 
FROM "DT_Output_38"), 
"DT_node_lookup_39" AS 
(SELECT "ADS_ano_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_ano_2_OUT".anoova_4 <= -1.23066) THEN 1 ELSE CASE WHEN ("ADS_ano_2_OUT".anoova_9 <= -0.260669) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_ano_2_OUT"), 
"DT_node_data_39" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Score" AS "Score" 
FROM (SELECT 0 AS node_id, 'anoova_4' AS feature, -1.23066 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0422033 AS "Score" FROM DUAL UNION ALL SELECT 2 AS node_id, 'anoova_9' AS feature, -0.260669 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Score" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0531538 AS "Score" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0105825 AS "Score" FROM DUAL) "Values"), 
"DT_Output_39" AS 
(SELECT "DT_node_lookup_39"."KEY" AS "KEY", "DT_node_lookup_39".node_id_2 AS node_id_2, "DT_node_data_39".node_id AS node_id, "DT_node_data_39".feature AS feature, "DT_node_data_39".threshold AS threshold, "DT_node_data_39".depth AS depth, "DT_node_data_39".parent_id AS parent_id, "DT_node_data_39"."Score" AS "Score" 
FROM "DT_node_lookup_39" LEFT OUTER JOIN "DT_node_data_39" ON "DT_node_lookup_39".node_id_2 = "DT_node_data_39".node_id), 
"XGB_Tree_3_9" AS 
(SELECT "DT_Output_39"."KEY" AS join_key_3_9, "DT_Output_39"."Score" AS "Score_3_9" 
FROM "DT_Output_39"), 
"XGB_Join_CTE" AS 
(SELECT "XGB_Tree_0_0".join_key_0_0 AS join_key_0_0, "XGB_Tree_0_0"."Score_0_0" AS "Score_0_0", "XGB_Tree_0_1".join_key_0_1 AS join_key_0_1, "XGB_Tree_0_1"."Score_0_1" AS "Score_0_1", "XGB_Tree_0_2".join_key_0_2 AS join_key_0_2, "XGB_Tree_0_2"."Score_0_2" AS "Score_0_2", "XGB_Tree_0_3".join_key_0_3 AS join_key_0_3, "XGB_Tree_0_3"."Score_0_3" AS "Score_0_3", "XGB_Tree_0_4".join_key_0_4 AS join_key_0_4, "XGB_Tree_0_4"."Score_0_4" AS "Score_0_4", "XGB_Tree_0_5".join_key_0_5 AS join_key_0_5, "XGB_Tree_0_5"."Score_0_5" AS "Score_0_5", "XGB_Tree_0_6".join_key_0_6 AS join_key_0_6, "XGB_Tree_0_6"."Score_0_6" AS "Score_0_6", "XGB_Tree_0_7".join_key_0_7 AS join_key_0_7, "XGB_Tree_0_7"."Score_0_7" AS "Score_0_7", "XGB_Tree_0_8".join_key_0_8 AS join_key_0_8, "XGB_Tree_0_8"."Score_0_8" AS "Score_0_8", "XGB_Tree_0_9".join_key_0_9 AS join_key_0_9, "XGB_Tree_0_9"."Score_0_9" AS "Score_0_9", "XGB_Tree_1_0".join_key_1_0 AS join_key_1_0, "XGB_Tree_1_0"."Score_1_0" AS "Score_1_0", "XGB_Tree_1_1".join_key_1_1 AS join_key_1_1, "XGB_Tree_1_1"."Score_1_1" AS "Score_1_1", "XGB_Tree_1_2".join_key_1_2 AS join_key_1_2, "XGB_Tree_1_2"."Score_1_2" AS "Score_1_2", "XGB_Tree_1_3".join_key_1_3 AS join_key_1_3, "XGB_Tree_1_3"."Score_1_3" AS "Score_1_3", "XGB_Tree_1_4".join_key_1_4 AS join_key_1_4, "XGB_Tree_1_4"."Score_1_4" AS "Score_1_4", "XGB_Tree_1_5".join_key_1_5 AS join_key_1_5, "XGB_Tree_1_5"."Score_1_5" AS "Score_1_5", "XGB_Tree_1_6".join_key_1_6 AS join_key_1_6, "XGB_Tree_1_6"."Score_1_6" AS "Score_1_6", "XGB_Tree_1_7".join_key_1_7 AS join_key_1_7, "XGB_Tree_1_7"."Score_1_7" AS "Score_1_7", "XGB_Tree_1_8".join_key_1_8 AS join_key_1_8, "XGB_Tree_1_8"."Score_1_8" AS "Score_1_8", "XGB_Tree_1_9".join_key_1_9 AS join_key_1_9, "XGB_Tree_1_9"."Score_1_9" AS "Score_1_9", "XGB_Tree_2_0".join_key_2_0 AS join_key_2_0, "XGB_Tree_2_0"."Score_2_0" AS "Score_2_0", "XGB_Tree_2_1".join_key_2_1 AS join_key_2_1, "XGB_Tree_2_1"."Score_2_1" AS "Score_2_1", "XGB_Tree_2_2".join_key_2_2 AS join_key_2_2, "XGB_Tree_2_2"."Score_2_2" AS "Score_2_2", "XGB_Tree_2_3".join_key_2_3 AS join_key_2_3, "XGB_Tree_2_3"."Score_2_3" AS "Score_2_3", "XGB_Tree_2_4".join_key_2_4 AS join_key_2_4, "XGB_Tree_2_4"."Score_2_4" AS "Score_2_4", "XGB_Tree_2_5".join_key_2_5 AS join_key_2_5, "XGB_Tree_2_5"."Score_2_5" AS "Score_2_5", "XGB_Tree_2_6".join_key_2_6 AS join_key_2_6, "XGB_Tree_2_6"."Score_2_6" AS "Score_2_6", "XGB_Tree_2_7".join_key_2_7 AS join_key_2_7, "XGB_Tree_2_7"."Score_2_7" AS "Score_2_7", "XGB_Tree_2_8".join_key_2_8 AS join_key_2_8, "XGB_Tree_2_8"."Score_2_8" AS "Score_2_8", "XGB_Tree_2_9".join_key_2_9 AS join_key_2_9, "XGB_Tree_2_9"."Score_2_9" AS "Score_2_9", "XGB_Tree_3_0".join_key_3_0 AS join_key_3_0, "XGB_Tree_3_0"."Score_3_0" AS "Score_3_0", "XGB_Tree_3_1".join_key_3_1 AS join_key_3_1, "XGB_Tree_3_1"."Score_3_1" AS "Score_3_1", "XGB_Tree_3_2".join_key_3_2 AS join_key_3_2, "XGB_Tree_3_2"."Score_3_2" AS "Score_3_2", "XGB_Tree_3_3".join_key_3_3 AS join_key_3_3, "XGB_Tree_3_3"."Score_3_3" AS "Score_3_3", "XGB_Tree_3_4".join_key_3_4 AS join_key_3_4, "XGB_Tree_3_4"."Score_3_4" AS "Score_3_4", "XGB_Tree_3_5".join_key_3_5 AS join_key_3_5, "XGB_Tree_3_5"."Score_3_5" AS "Score_3_5", "XGB_Tree_3_6".join_key_3_6 AS join_key_3_6, "XGB_Tree_3_6"."Score_3_6" AS "Score_3_6", "XGB_Tree_3_7".join_key_3_7 AS join_key_3_7, "XGB_Tree_3_7"."Score_3_7" AS "Score_3_7", "XGB_Tree_3_8".join_key_3_8 AS join_key_3_8, "XGB_Tree_3_8"."Score_3_8" AS "Score_3_8", "XGB_Tree_3_9".join_key_3_9 AS join_key_3_9, "XGB_Tree_3_9"."Score_3_9" AS "Score_3_9" 
FROM "XGB_Tree_0_0" LEFT OUTER JOIN "XGB_Tree_0_1" ON "XGB_Tree_0_0".join_key_0_0 = "XGB_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "XGB_Tree_0_2" ON "XGB_Tree_0_2".join_key_0_2 = "XGB_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "XGB_Tree_0_3" ON "XGB_Tree_0_3".join_key_0_3 = "XGB_Tree_0_2".join_key_0_2 LEFT OUTER JOIN "XGB_Tree_0_4" ON "XGB_Tree_0_4".join_key_0_4 = "XGB_Tree_0_3".join_key_0_3 LEFT OUTER JOIN "XGB_Tree_0_5" ON "XGB_Tree_0_5".join_key_0_5 = "XGB_Tree_0_4".join_key_0_4 LEFT OUTER JOIN "XGB_Tree_0_6" ON "XGB_Tree_0_6".join_key_0_6 = "XGB_Tree_0_5".join_key_0_5 LEFT OUTER JOIN "XGB_Tree_0_7" ON "XGB_Tree_0_7".join_key_0_7 = "XGB_Tree_0_6".join_key_0_6 LEFT OUTER JOIN "XGB_Tree_0_8" ON "XGB_Tree_0_8".join_key_0_8 = "XGB_Tree_0_7".join_key_0_7 LEFT OUTER JOIN "XGB_Tree_0_9" ON "XGB_Tree_0_9".join_key_0_9 = "XGB_Tree_0_8".join_key_0_8 LEFT OUTER JOIN "XGB_Tree_1_0" ON "XGB_Tree_1_0".join_key_1_0 = "XGB_Tree_0_9".join_key_0_9 LEFT OUTER JOIN "XGB_Tree_1_1" ON "XGB_Tree_1_1".join_key_1_1 = "XGB_Tree_1_0".join_key_1_0 LEFT OUTER JOIN "XGB_Tree_1_2" ON "XGB_Tree_1_2".join_key_1_2 = "XGB_Tree_1_1".join_key_1_1 LEFT OUTER JOIN "XGB_Tree_1_3" ON "XGB_Tree_1_3".join_key_1_3 = "XGB_Tree_1_2".join_key_1_2 LEFT OUTER JOIN "XGB_Tree_1_4" ON "XGB_Tree_1_4".join_key_1_4 = "XGB_Tree_1_3".join_key_1_3 LEFT OUTER JOIN "XGB_Tree_1_5" ON "XGB_Tree_1_5".join_key_1_5 = "XGB_Tree_1_4".join_key_1_4 LEFT OUTER JOIN "XGB_Tree_1_6" ON "XGB_Tree_1_6".join_key_1_6 = "XGB_Tree_1_5".join_key_1_5 LEFT OUTER JOIN "XGB_Tree_1_7" ON "XGB_Tree_1_7".join_key_1_7 = "XGB_Tree_1_6".join_key_1_6 LEFT OUTER JOIN "XGB_Tree_1_8" ON "XGB_Tree_1_8".join_key_1_8 = "XGB_Tree_1_7".join_key_1_7 LEFT OUTER JOIN "XGB_Tree_1_9" ON "XGB_Tree_1_9".join_key_1_9 = "XGB_Tree_1_8".join_key_1_8 LEFT OUTER JOIN "XGB_Tree_2_0" ON "XGB_Tree_2_0".join_key_2_0 = "XGB_Tree_1_9".join_key_1_9 LEFT OUTER JOIN "XGB_Tree_2_1" ON "XGB_Tree_2_1".join_key_2_1 = "XGB_Tree_2_0".join_key_2_0 LEFT OUTER JOIN "XGB_Tree_2_2" ON "XGB_Tree_2_2".join_key_2_2 = "XGB_Tree_2_1".join_key_2_1 LEFT OUTER JOIN "XGB_Tree_2_3" ON "XGB_Tree_2_3".join_key_2_3 = "XGB_Tree_2_2".join_key_2_2 LEFT OUTER JOIN "XGB_Tree_2_4" ON "XGB_Tree_2_4".join_key_2_4 = "XGB_Tree_2_3".join_key_2_3 LEFT OUTER JOIN "XGB_Tree_2_5" ON "XGB_Tree_2_5".join_key_2_5 = "XGB_Tree_2_4".join_key_2_4 LEFT OUTER JOIN "XGB_Tree_2_6" ON "XGB_Tree_2_6".join_key_2_6 = "XGB_Tree_2_5".join_key_2_5 LEFT OUTER JOIN "XGB_Tree_2_7" ON "XGB_Tree_2_7".join_key_2_7 = "XGB_Tree_2_6".join_key_2_6 LEFT OUTER JOIN "XGB_Tree_2_8" ON "XGB_Tree_2_8".join_key_2_8 = "XGB_Tree_2_7".join_key_2_7 LEFT OUTER JOIN "XGB_Tree_2_9" ON "XGB_Tree_2_9".join_key_2_9 = "XGB_Tree_2_8".join_key_2_8 LEFT OUTER JOIN "XGB_Tree_3_0" ON "XGB_Tree_3_0".join_key_3_0 = "XGB_Tree_2_9".join_key_2_9 LEFT OUTER JOIN "XGB_Tree_3_1" ON "XGB_Tree_3_1".join_key_3_1 = "XGB_Tree_3_0".join_key_3_0 LEFT OUTER JOIN "XGB_Tree_3_2" ON "XGB_Tree_3_2".join_key_3_2 = "XGB_Tree_3_1".join_key_3_1 LEFT OUTER JOIN "XGB_Tree_3_3" ON "XGB_Tree_3_3".join_key_3_3 = "XGB_Tree_3_2".join_key_3_2 LEFT OUTER JOIN "XGB_Tree_3_4" ON "XGB_Tree_3_4".join_key_3_4 = "XGB_Tree_3_3".join_key_3_3 LEFT OUTER JOIN "XGB_Tree_3_5" ON "XGB_Tree_3_5".join_key_3_5 = "XGB_Tree_3_4".join_key_3_4 LEFT OUTER JOIN "XGB_Tree_3_6" ON "XGB_Tree_3_6".join_key_3_6 = "XGB_Tree_3_5".join_key_3_5 LEFT OUTER JOIN "XGB_Tree_3_7" ON "XGB_Tree_3_7".join_key_3_7 = "XGB_Tree_3_6".join_key_3_6 LEFT OUTER JOIN "XGB_Tree_3_8" ON "XGB_Tree_3_8".join_key_3_8 = "XGB_Tree_3_7".join_key_3_7 LEFT OUTER JOIN "XGB_Tree_3_9" ON "XGB_Tree_3_9".join_key_3_9 = "XGB_Tree_3_8".join_key_3_8), 
"XGB_AVG_Scores" AS 
(SELECT "XGB_Join_CTE".join_key_0_0 AS "KEY", "XGB_Join_CTE"."Score_0_0" + "XGB_Join_CTE"."Score_0_1" + "XGB_Join_CTE"."Score_0_2" + "XGB_Join_CTE"."Score_0_3" + "XGB_Join_CTE"."Score_0_4" + "XGB_Join_CTE"."Score_0_5" + "XGB_Join_CTE"."Score_0_6" + "XGB_Join_CTE"."Score_0_7" + "XGB_Join_CTE"."Score_0_8" + "XGB_Join_CTE"."Score_0_9" AS "Score_0", "XGB_Join_CTE"."Score_1_0" + "XGB_Join_CTE"."Score_1_1" + "XGB_Join_CTE"."Score_1_2" + "XGB_Join_CTE"."Score_1_3" + "XGB_Join_CTE"."Score_1_4" + "XGB_Join_CTE"."Score_1_5" + "XGB_Join_CTE"."Score_1_6" + "XGB_Join_CTE"."Score_1_7" + "XGB_Join_CTE"."Score_1_8" + "XGB_Join_CTE"."Score_1_9" AS "Score_1", "XGB_Join_CTE"."Score_2_0" + "XGB_Join_CTE"."Score_2_1" + "XGB_Join_CTE"."Score_2_2" + "XGB_Join_CTE"."Score_2_3" + "XGB_Join_CTE"."Score_2_4" + "XGB_Join_CTE"."Score_2_5" + "XGB_Join_CTE"."Score_2_6" + "XGB_Join_CTE"."Score_2_7" + "XGB_Join_CTE"."Score_2_8" + "XGB_Join_CTE"."Score_2_9" AS "Score_2", "XGB_Join_CTE"."Score_3_0" + "XGB_Join_CTE"."Score_3_1" + "XGB_Join_CTE"."Score_3_2" + "XGB_Join_CTE"."Score_3_3" + "XGB_Join_CTE"."Score_3_4" + "XGB_Join_CTE"."Score_3_5" + "XGB_Join_CTE"."Score_3_6" + "XGB_Join_CTE"."Score_3_7" + "XGB_Join_CTE"."Score_3_8" + "XGB_Join_CTE"."Score_3_9" AS "Score_3" 
FROM "XGB_Join_CTE"), 
orig_cte AS 
(SELECT "XGB_AVG_Scores"."KEY" AS "KEY", "XGB_AVG_Scores"."Score_0" AS "Score_0", "XGB_AVG_Scores"."Score_1" AS "Score_1", "XGB_AVG_Scores"."Score_2" AS "Score_2", "XGB_AVG_Scores"."Score_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "XGB_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte