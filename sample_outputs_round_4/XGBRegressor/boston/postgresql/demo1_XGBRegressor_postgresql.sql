-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "DT_node_lookup" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_12" <= 9.725) THEN CASE WHEN ("ADS"."Feature_5" <= 6.941) THEN CASE WHEN ("ADS"."Feature_6" <= 88.65) THEN 7 ELSE 8 END ELSE CASE WHEN ("ADS"."Feature_5" <= 7.437) THEN 9 ELSE 10 END END ELSE CASE WHEN ("ADS"."Feature_12" <= 16.085) THEN 5 ELSE CASE WHEN ("ADS"."Feature_4" <= 0.603) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.725 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 6.941 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 16.085 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'Feature_6' AS feature, 88.65 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.96709 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.603 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.39248 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.22 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.22561 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.31581 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6868 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.18573 AS "Estimator") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"XGB_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, "DT_Output"."Estimator" AS "Estimator_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_5" <= 6.8375) THEN CASE WHEN ("ADS"."Feature_12" <= 14.4) THEN CASE WHEN ("ADS"."Feature_12" <= 9.545) THEN 7 ELSE 8 END ELSE CASE WHEN ("ADS"."Feature_0" <= 6.99237) THEN 9 ELSE 10 END END ELSE CASE WHEN ("ADS"."Feature_5" <= 7.437) THEN CASE WHEN ("ADS"."Feature_12" <= 9.65) THEN 11 ELSE 12 END ELSE 6 END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_5' AS feature, 6.8375 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 14.4 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'Feature_12' AS feature, 9.545 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 6.99237 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'Feature_12' AS feature, 9.65 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.89815 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.21745 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.81695 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.48631 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.980477 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.87049 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.94831 AS "Estimator") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"XGB_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, "DT_Output_1"."Estimator" AS "Estimator_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_5" <= 6.8375) THEN CASE WHEN ("ADS"."Feature_12" <= 14.4) THEN CASE WHEN ("ADS"."Feature_12" <= 5.41) THEN 7 ELSE 8 END ELSE CASE WHEN ("ADS"."Feature_0" <= 6.99237) THEN 9 ELSE 10 END END ELSE CASE WHEN ("ADS"."Feature_5" <= 7.437) THEN 5 ELSE 6 END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_5' AS feature, 6.8375 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 14.4 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'Feature_12' AS feature, 5.41 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 6.99237 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.47888 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.52091 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3781 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.75728 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.33912 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.883773 AS "Estimator") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"XGB_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, "DT_Output_2"."Estimator" AS "Estimator_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_12" <= 9.725) THEN CASE WHEN ("ADS"."Feature_5" <= 6.941) THEN CASE WHEN ("ADS"."Feature_6" <= 88.65) THEN 7 ELSE 8 END ELSE CASE WHEN ("ADS"."Feature_5" <= 7.437) THEN 9 ELSE 10 END END ELSE CASE WHEN ("ADS"."Feature_12" <= 19.83) THEN CASE WHEN ("ADS"."Feature_11" <= 116.025) THEN 11 ELSE 12 END ELSE CASE WHEN ("ADS"."Feature_4" <= 0.603) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.725 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 6.941 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 19.83 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'Feature_6' AS feature, 88.65 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'Feature_11' AS feature, 116.025 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.603 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.74392 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.54215 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.39128 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.18017 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.883597 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.39809 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.13813 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.677421 AS "Estimator") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"XGB_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, "DT_Output_3"."Estimator" AS "Estimator_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_12" <= 5.155) THEN CASE WHEN ("ADS"."Feature_5" <= 7.406) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_12" <= 15) THEN CASE WHEN ("ADS"."Feature_5" <= 6.543) THEN 7 ELSE 8 END ELSE CASE WHEN ("ADS"."Feature_7" <= 2.0037) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 5.155 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.406 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 15 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.19037 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.97656 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'Feature_5' AS feature, 6.543 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'Feature_7' AS feature, 2.0037 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.37128 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.86906 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.726481 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.09704 AS "Estimator") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"XGB_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, "DT_Output_4"."Estimator" AS "Estimator_4" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_12" <= 5.155) THEN CASE WHEN ("ADS"."Feature_7" <= 3.20745) THEN 3 ELSE CASE WHEN ("ADS"."Feature_5" <= 6.6815) THEN 7 ELSE 8 END END ELSE CASE WHEN ("ADS"."Feature_12" <= 15) THEN CASE WHEN ("ADS"."Feature_5" <= 6.543) THEN 9 ELSE 10 END ELSE CASE WHEN ("ADS"."Feature_4" <= 0.603) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 5.155 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_7' AS feature, 3.20745 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 15 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.86533 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'Feature_5' AS feature, 6.6815 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'Feature_5' AS feature, 6.543 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.603 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.38045 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.18612 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.23481 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.68486 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.04821 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.688066 AS "Estimator") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"XGB_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, "DT_Output_5"."Estimator" AS "Estimator_5" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_12" <= 7.685) THEN CASE WHEN ("ADS"."Feature_5" <= 7.141) THEN CASE WHEN ("ADS"."Feature_12" <= 4.64) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_12" <= 19.23) THEN CASE WHEN ("ADS"."Feature_12" <= 11.675) THEN 9 ELSE 10 END ELSE CASE WHEN ("ADS"."Feature_4" <= 0.603) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 7.685 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.141 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 19.23 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'Feature_12' AS feature, 4.64 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.21131 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'Feature_12' AS feature, 11.675 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.603 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.85765 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.32371 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.20601 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.952249 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.868307 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.478222 AS "Estimator") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"XGB_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, "DT_Output_6"."Estimator" AS "Estimator_6" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_12" <= 5.155) THEN CASE WHEN ("ADS"."Feature_7" <= 3.20745) THEN 3 ELSE CASE WHEN ("ADS"."Feature_5" <= 7.406) THEN 7 ELSE 8 END END ELSE CASE WHEN ("ADS"."Feature_12" <= 14.795) THEN CASE WHEN ("ADS"."Feature_5" <= 6.611) THEN 9 ELSE 10 END ELSE CASE WHEN ("ADS"."Feature_10" <= 19.65) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 5.155 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_7' AS feature, 3.20745 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 14.795 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.40379 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'Feature_5' AS feature, 7.406 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'Feature_5' AS feature, 6.611 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'Feature_10' AS feature, 19.65 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4406 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.08728 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.00938 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.40161 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.926805 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.57084 AS "Estimator") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"XGB_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, "DT_Output_7"."Estimator" AS "Estimator_7" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_5" <= 6.978) THEN CASE WHEN ("ADS"."Feature_12" <= 14.4) THEN CASE WHEN ("ADS"."Feature_12" <= 5.41) THEN 7 ELSE 8 END ELSE CASE WHEN ("ADS"."Feature_4" <= 0.6695) THEN 9 ELSE 10 END END ELSE CASE WHEN ("ADS"."Feature_5" <= 7.437) THEN 5 ELSE 6 END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_5' AS feature, 6.978 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 14.4 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'Feature_12' AS feature, 5.41 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'Feature_4' AS feature, 0.6695 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.41221 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.97231 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.35901 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.937695 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.749617 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.452051 AS "Estimator") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"XGB_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, "DT_Output_8"."Estimator" AS "Estimator_8" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_12" <= 9.63) THEN CASE WHEN ("ADS"."Feature_5" <= 7.141) THEN CASE WHEN ("ADS"."Feature_7" <= 1.944) THEN 7 ELSE 8 END ELSE CASE WHEN ("ADS"."Feature_10" <= 15.05) THEN 9 ELSE 10 END END ELSE CASE WHEN ("ADS"."Feature_0" <= 5.84803) THEN CASE WHEN ("ADS"."Feature_10" <= 20.95) THEN 11 ELSE 12 END ELSE CASE WHEN ("ADS"."Feature_0" <= 15.718) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "INPUT_DATA" AS "ADS"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.63 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.141 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 5.84803 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'Feature_7' AS feature, 1.944 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'Feature_10' AS feature, 15.05 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'Feature_10' AS feature, 20.95 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 15.718 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.91975 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.949105 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.88663 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.40675 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.774897 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.532874 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.517491 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19254 AS "Estimator") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"XGB_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, "DT_Output_9"."Estimator" AS "Estimator_9" 
FROM "DT_Output_9"), 
"XGB_Join_CTE" AS 
(SELECT "XGB_Tree_0".join_key_0 AS join_key_0, "XGB_Tree_0"."Estimator_0" AS "Estimator_0", "XGB_Tree_1".join_key_1 AS join_key_1, "XGB_Tree_1"."Estimator_1" AS "Estimator_1", "XGB_Tree_2".join_key_2 AS join_key_2, "XGB_Tree_2"."Estimator_2" AS "Estimator_2", "XGB_Tree_3".join_key_3 AS join_key_3, "XGB_Tree_3"."Estimator_3" AS "Estimator_3", "XGB_Tree_4".join_key_4 AS join_key_4, "XGB_Tree_4"."Estimator_4" AS "Estimator_4", "XGB_Tree_5".join_key_5 AS join_key_5, "XGB_Tree_5"."Estimator_5" AS "Estimator_5", "XGB_Tree_6".join_key_6 AS join_key_6, "XGB_Tree_6"."Estimator_6" AS "Estimator_6", "XGB_Tree_7".join_key_7 AS join_key_7, "XGB_Tree_7"."Estimator_7" AS "Estimator_7", "XGB_Tree_8".join_key_8 AS join_key_8, "XGB_Tree_8"."Estimator_8" AS "Estimator_8", "XGB_Tree_9".join_key_9 AS join_key_9, "XGB_Tree_9"."Estimator_9" AS "Estimator_9" 
FROM "XGB_Tree_0" LEFT OUTER JOIN "XGB_Tree_1" ON "XGB_Tree_0".join_key_0 = "XGB_Tree_1".join_key_1 LEFT OUTER JOIN "XGB_Tree_2" ON "XGB_Tree_2".join_key_2 = "XGB_Tree_1".join_key_1 LEFT OUTER JOIN "XGB_Tree_3" ON "XGB_Tree_3".join_key_3 = "XGB_Tree_2".join_key_2 LEFT OUTER JOIN "XGB_Tree_4" ON "XGB_Tree_4".join_key_4 = "XGB_Tree_3".join_key_3 LEFT OUTER JOIN "XGB_Tree_5" ON "XGB_Tree_5".join_key_5 = "XGB_Tree_4".join_key_4 LEFT OUTER JOIN "XGB_Tree_6" ON "XGB_Tree_6".join_key_6 = "XGB_Tree_5".join_key_5 LEFT OUTER JOIN "XGB_Tree_7" ON "XGB_Tree_7".join_key_7 = "XGB_Tree_6".join_key_6 LEFT OUTER JOIN "XGB_Tree_8" ON "XGB_Tree_8".join_key_8 = "XGB_Tree_7".join_key_7 LEFT OUTER JOIN "XGB_Tree_9" ON "XGB_Tree_9".join_key_9 = "XGB_Tree_8".join_key_8), 
"XGB_AVG_Scores" AS 
(SELECT "XGB_Join_CTE".join_key_0 AS "KEY", "XGB_Join_CTE"."Estimator_0" + "XGB_Join_CTE"."Estimator_1" + "XGB_Join_CTE"."Estimator_2" + "XGB_Join_CTE"."Estimator_3" + "XGB_Join_CTE"."Estimator_4" + "XGB_Join_CTE"."Estimator_5" + "XGB_Join_CTE"."Estimator_6" + "XGB_Join_CTE"."Estimator_7" + "XGB_Join_CTE"."Estimator_8" + "XGB_Join_CTE"."Estimator_9" AS "Estimator" 
FROM "XGB_Join_CTE")
 SELECT "XGB_AVG_Scores"."KEY" AS "KEY", "XGB_AVG_Scores"."Estimator" AS "XGB_AVG_Scores_Estimator" 
FROM "XGB_AVG_Scores"