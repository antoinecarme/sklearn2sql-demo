-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

SELECT `XGB_AVG_Scores`.`KEY` AS `KEY`, `XGB_AVG_Scores`.`Estimator` AS `XGB_AVG_Scores_Estimator` 
FROM (SELECT `XGB_Join_CTE`.join_key_0 AS `KEY`, `XGB_Join_CTE`.`Estimator_0` + `XGB_Join_CTE`.`Estimator_1` + `XGB_Join_CTE`.`Estimator_2` + `XGB_Join_CTE`.`Estimator_3` + `XGB_Join_CTE`.`Estimator_4` + `XGB_Join_CTE`.`Estimator_5` + `XGB_Join_CTE`.`Estimator_6` + `XGB_Join_CTE`.`Estimator_7` + `XGB_Join_CTE`.`Estimator_8` + `XGB_Join_CTE`.`Estimator_9` AS `Estimator` 
FROM (SELECT `XGB_Tree_0`.join_key_0 AS join_key_0, `XGB_Tree_0`.`Estimator_0` AS `Estimator_0`, `XGB_Tree_1`.join_key_1 AS join_key_1, `XGB_Tree_1`.`Estimator_1` AS `Estimator_1`, `XGB_Tree_2`.join_key_2 AS join_key_2, `XGB_Tree_2`.`Estimator_2` AS `Estimator_2`, `XGB_Tree_3`.join_key_3 AS join_key_3, `XGB_Tree_3`.`Estimator_3` AS `Estimator_3`, `XGB_Tree_4`.join_key_4 AS join_key_4, `XGB_Tree_4`.`Estimator_4` AS `Estimator_4`, `XGB_Tree_5`.join_key_5 AS join_key_5, `XGB_Tree_5`.`Estimator_5` AS `Estimator_5`, `XGB_Tree_6`.join_key_6 AS join_key_6, `XGB_Tree_6`.`Estimator_6` AS `Estimator_6`, `XGB_Tree_7`.join_key_7 AS join_key_7, `XGB_Tree_7`.`Estimator_7` AS `Estimator_7`, `XGB_Tree_8`.join_key_8 AS join_key_8, `XGB_Tree_8`.`Estimator_8` AS `Estimator_8`, `XGB_Tree_9`.join_key_9 AS join_key_9, `XGB_Tree_9`.`Estimator_9` AS `Estimator_9` 
FROM (SELECT `DT_Output`.`KEY` AS join_key_0, `DT_Output`.`Estimator` AS `Estimator_0` 
FROM (SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_1` <= 0.268635) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.284204) THEN 3 ELSE 4 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, 0.268635 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.02229 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.284204 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.10489 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.67253 AS `Estimator`) AS `Values`) AS `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id) AS `DT_Output`) AS `XGB_Tree_0` LEFT OUTER JOIN (SELECT `DT_Output_1`.`KEY` AS join_key_1, `DT_Output_1`.`Estimator` AS `Estimator_1` 
FROM (SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_1` <= 0.268635) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.554685) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.284204) THEN 5 ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.299407) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_1` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, 0.268635 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.554685 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.284204 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.667781 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.05054 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.00054 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 0.299407 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.14754 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.60274 AS `Estimator`) AS `Values`) AS `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id) AS `DT_Output_1`) AS `XGB_Tree_1` ON `XGB_Tree_0`.join_key_0 = `XGB_Tree_1`.join_key_1 LEFT OUTER JOIN (SELECT `DT_Output_2`.`KEY` AS join_key_2, `DT_Output_2`.`Estimator` AS `Estimator_2` 
FROM (SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_1` <= 0.268635) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.554685) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_4` <= 0.50115) THEN 5 ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_2` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, 0.268635 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.554685 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_4' AS feature, 0.50115 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.607074 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.952489 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.0599 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.45342 AS `Estimator`) AS `Values`) AS `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id) AS `DT_Output_2`) AS `XGB_Tree_2` ON `XGB_Tree_2`.join_key_2 = `XGB_Tree_1`.join_key_1 LEFT OUTER JOIN (SELECT `DT_Output_3`.`KEY` AS join_key_3, `DT_Output_3`.`Estimator` AS `Estimator_3` 
FROM (SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.372506) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.407503) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.496984) THEN 5 ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_3` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.372506 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.407503 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 0.496984 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.530039 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.886818 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.96216 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.33824 AS `Estimator`) AS `Values`) AS `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id) AS `DT_Output_3`) AS `XGB_Tree_3` ON `XGB_Tree_3`.join_key_3 = `XGB_Tree_2`.join_key_2 LEFT OUTER JOIN (SELECT `DT_Output_4`.`KEY` AS join_key_4, `DT_Output_4`.`Estimator` AS `Estimator_4` 
FROM (SELECT `DT_node_lookup_4`.`KEY` AS `KEY`, `DT_node_lookup_4`.node_id_2 AS node_id_2, `DT_node_data_4`.node_id AS node_id, `DT_node_data_4`.feature AS feature, `DT_node_data_4`.threshold AS threshold, `DT_node_data_4`.depth AS depth, `DT_node_data_4`.parent_id AS parent_id, `DT_node_data_4`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.372506) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.407503) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_4` <= 0.502148) THEN 5 ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_4` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.372506 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.407503 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_4' AS feature, 0.502148 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.481854 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.801992 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.857624 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.21805 AS `Estimator`) AS `Values`) AS `DT_node_data_4` ON `DT_node_lookup_4`.node_id_2 = `DT_node_data_4`.node_id) AS `DT_Output_4`) AS `XGB_Tree_4` ON `XGB_Tree_4`.join_key_4 = `XGB_Tree_3`.join_key_3 LEFT OUTER JOIN (SELECT `DT_Output_5`.`KEY` AS join_key_5, `DT_Output_5`.`Estimator` AS `Estimator_5` 
FROM (SELECT `DT_node_lookup_5`.`KEY` AS `KEY`, `DT_node_lookup_5`.node_id_2 AS node_id_2, `DT_node_data_5`.node_id AS node_id, `DT_node_data_5`.feature AS feature, `DT_node_data_5`.threshold AS threshold, `DT_node_data_5`.depth AS depth, `DT_node_data_5`.parent_id AS parent_id, `DT_node_data_5`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` <= 0.390149) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.392302) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.778998) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.258247) THEN 7 ELSE 8 END ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_5` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.390149 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.392302 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.778998 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.495723 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.781026 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 0.258247 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.34317 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.577797 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.935652 AS `Estimator`) AS `Values`) AS `DT_node_data_5` ON `DT_node_lookup_5`.node_id_2 = `DT_node_data_5`.node_id) AS `DT_Output_5`) AS `XGB_Tree_5` ON `XGB_Tree_5`.join_key_5 = `XGB_Tree_4`.join_key_4 LEFT OUTER JOIN (SELECT `DT_Output_6`.`KEY` AS join_key_6, `DT_Output_6`.`Estimator` AS `Estimator_6` 
FROM (SELECT `DT_node_lookup_6`.`KEY` AS `KEY`, `DT_node_lookup_6`.node_id_2 AS node_id_2, `DT_node_data_6`.node_id AS node_id, `DT_node_data_6`.feature AS feature, `DT_node_data_6`.threshold AS threshold, `DT_node_data_6`.depth AS depth, `DT_node_data_6`.parent_id AS parent_id, `DT_node_data_6`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` <= 0.390149) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.392302) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_3` <= 0.778998) THEN CASE WHEN (`ADS`.`Feature_1` <= 0.258247) THEN 7 ELSE 8 END ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_6` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.390149 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.392302 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.778998 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.449066 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.705443 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 0.258247 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.21845 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.52527 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.845011 AS `Estimator`) AS `Values`) AS `DT_node_data_6` ON `DT_node_lookup_6`.node_id_2 = `DT_node_data_6`.node_id) AS `DT_Output_6`) AS `XGB_Tree_6` ON `XGB_Tree_6`.join_key_6 = `XGB_Tree_5`.join_key_5 LEFT OUTER JOIN (SELECT `DT_Output_7`.`KEY` AS join_key_7, `DT_Output_7`.`Estimator` AS `Estimator_7` 
FROM (SELECT `DT_node_lookup_7`.`KEY` AS `KEY`, `DT_node_lookup_7`.node_id_2 AS node_id_2, `DT_node_data_7`.node_id AS node_id, `DT_node_data_7`.feature AS feature, `DT_node_data_7`.threshold AS threshold, `DT_node_data_7`.depth AS depth, `DT_node_data_7`.parent_id AS parent_id, `DT_node_data_7`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_1` <= 0.268635) THEN CASE WHEN (`ADS`.`Feature_3` <= 0.554685) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_4` <= 0.50115) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.282536) THEN 7 ELSE 8 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.405907) THEN 9 ELSE 10 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_7` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, 0.268635 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.554685 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_4' AS feature, 0.50115 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.348845 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.546202 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, 0.282536 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 0.405907 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.429153 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.689458 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.694735 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.01981 AS `Estimator`) AS `Values`) AS `DT_node_data_7` ON `DT_node_lookup_7`.node_id_2 = `DT_node_data_7`.node_id) AS `DT_Output_7`) AS `XGB_Tree_7` ON `XGB_Tree_7`.join_key_7 = `XGB_Tree_6`.join_key_6 LEFT OUTER JOIN (SELECT `DT_Output_8`.`KEY` AS join_key_8, `DT_Output_8`.`Estimator` AS `Estimator_8` 
FROM (SELECT `DT_node_lookup_8`.`KEY` AS `KEY`, `DT_node_lookup_8`.node_id_2 AS node_id_2, `DT_node_data_8`.node_id AS node_id, `DT_node_data_8`.feature AS feature, `DT_node_data_8`.threshold AS threshold, `DT_node_data_8`.depth AS depth, `DT_node_data_8`.parent_id AS parent_id, `DT_node_data_8`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.808724) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.390149) THEN CASE WHEN (`ADS`.`Feature_8` <= 0.39912) THEN 7 ELSE 8 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.258247) THEN 9 ELSE 10 END END ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.322863) THEN 5 ELSE 6 END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_8` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.808724 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 0.390149 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 0.322863 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_8' AS feature, 0.39912 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_1' AS feature, 0.258247 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.599441 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.00465 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.31178 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.485926 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.436835 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.706643 AS `Estimator`) AS `Values`) AS `DT_node_data_8` ON `DT_node_lookup_8`.node_id_2 = `DT_node_data_8`.node_id) AS `DT_Output_8`) AS `XGB_Tree_8` ON `XGB_Tree_8`.join_key_8 = `XGB_Tree_7`.join_key_7 LEFT OUTER JOIN (SELECT `DT_Output_9`.`KEY` AS join_key_9, `DT_Output_9`.`Estimator` AS `Estimator_9` 
FROM (SELECT `DT_node_lookup_9`.`KEY` AS `KEY`, `DT_node_lookup_9`.node_id_2 AS node_id_2, `DT_node_data_9`.node_id AS node_id, `DT_node_data_9`.feature AS feature, `DT_node_data_9`.threshold AS threshold, `DT_node_data_9`.depth AS depth, `DT_node_data_9`.parent_id AS parent_id, `DT_node_data_9`.`Estimator` AS `Estimator` 
FROM (SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_3` <= 0.222843) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_1` <= 0.496984) THEN CASE WHEN (`ADS`.`Feature_6` <= 0.316197) THEN 5 ELSE 6 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 0.249648) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `INPUT_DATA` AS `ADS`) AS `DT_node_lookup_9` LEFT OUTER JOIN (SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.222843 AS threshold, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.321111 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 0.496984 AS threshold, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_6' AS feature, 0.316197 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 0.249648 AS threshold, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.334037 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.523383 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.434706 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.80965 AS `Estimator`) AS `Values`) AS `DT_node_data_9` ON `DT_node_lookup_9`.node_id_2 = `DT_node_data_9`.node_id) AS `DT_Output_9`) AS `XGB_Tree_9` ON `XGB_Tree_9`.join_key_9 = `XGB_Tree_8`.join_key_8) AS `XGB_Join_CTE`) AS `XGB_AVG_Scores`