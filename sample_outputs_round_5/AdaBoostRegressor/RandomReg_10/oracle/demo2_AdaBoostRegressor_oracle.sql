-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "DT_node_lookup" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_9" <= 0.20109981298446655) THEN CASE WHEN ("ADS"."Feature_1" <= 1.1606087684631348) THEN CASE WHEN ("ADS"."Feature_8" <= -1.8810601234436035) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_1" <= 1.3024110794067383) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS"."Feature_1" <= 0.1458326280117035) THEN CASE WHEN ("ADS"."Feature_2" <= -0.2765495777130127) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS"."Feature_2" <= 1.7590608596801758) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "RandomReg_10" "ADS"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_9' AS feature, 0.20109981298446655 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -59.50174730551826 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 1.1606087684631348 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -117.57321531405074 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_8' AS feature, -1.8810601234436035 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -135.20231250312287 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -263.8942098623927 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -120.49466709063495 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 1.3024110794067383 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 54.31048227940364 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.312306500561137 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 73.5180785393919 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 0.1458326280117035 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 44.54296620976907 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, 'Feature_2' AS feature, -0.2765495777130127 AS threshold, 13 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -39.810722408760235 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -104.8313544168248 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.921247883866528 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 1.7590608596801758 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 144.23368912257644 AS "Estimator" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 162.71399133115747 AS "Estimator" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -40.56933296323411 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"AdaBoost_Estim_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, "DT_Output"."Estimator" AS "Estimator_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.5486536026000977) THEN CASE WHEN ("ADS"."Feature_9" <= 0.6899493932723999) THEN CASE WHEN ("ADS"."Feature_0" <= -0.2614559531211853) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_9" <= 1.1987677812576294) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS"."Feature_8" <= 0.5935204029083252) THEN CASE WHEN ("ADS"."Feature_9" <= 0.7256730198860168) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS"."Feature_4" <= 1.0816019773483276) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "RandomReg_10" "ADS"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.5486536026000977 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -19.628386185244093 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_9' AS feature, 0.6899493932723999 AS threshold, 51 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -81.71496051455203 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, -0.2614559531211853 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -112.31519332477652 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -177.2681587231121 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -41.17623122183752 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'Feature_9' AS feature, 1.1987677812576294 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 110.62936000685939 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 151.1591537336087 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -132.5494023536364 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'Feature_8' AS feature, 0.5935204029083252 AS threshold, 16 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 178.2725694894248 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, 'Feature_9' AS feature, 0.7256730198860168 AS threshold, 10 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 99.93658170766527 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 44.581297085617784 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 182.96950864073648 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, 'Feature_4' AS feature, 1.0816019773483276 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 308.8325491256906 AS "Estimator" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 254.6925035767427 AS "Estimator" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 417.1126402235866 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"AdaBoost_Estim_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, "DT_Output_1"."Estimator" AS "Estimator_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" <= 0.17890681326389313) THEN CASE WHEN ("ADS"."Feature_9" <= -0.7990255951881409) THEN CASE WHEN ("ADS"."Feature_1" <= -0.4011431336402893) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_1" <= 1.4072980880737305) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS"."Feature_6" <= 0.33883509039878845) THEN CASE WHEN ("ADS"."Feature_3" <= -0.6089868545532227) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS"."Feature_9" <= 0.23335979878902435) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "RandomReg_10" "ADS"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_0' AS feature, 0.17890681326389313 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -19.364149069835513 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_9' AS feature, -0.7990255951881409 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -114.15828306716531 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, -0.4011431336402893 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -304.329203094187 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -350.3098130088289 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -223.8631357435636 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 1.4072980880737305 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -50.76797639149151 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -76.94488111013 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 139.01458281863776 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'Feature_6' AS feature, 0.33883509039878845 AS threshold, 23 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 161.9811507511434 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, 'Feature_3' AS feature, -0.6089868545532227 AS threshold, 10 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.827252663547988 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -47.39724192405749 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 81.05174725115346 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, 'Feature_9' AS feature, 0.23335979878902435 AS threshold, 13 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 273.637995433909 AS "Estimator" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 219.3402639678551 AS "Estimator" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 395.8078912325302 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"AdaBoost_Estim_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, "DT_Output_2"."Estimator" AS "Estimator_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_8" <= 0.8064030408859253) THEN CASE WHEN ("ADS"."Feature_9" <= -0.8411620855331421) THEN CASE WHEN ("ADS"."Feature_0" <= 0.2276880443096161) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS"."Feature_0" <= 0.6640489101409912) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS"."Feature_0" <= 0.043546490371227264) THEN CASE WHEN ("ADS"."Feature_0" <= -0.8629744052886963) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS"."Feature_0" <= 0.5011504888534546) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "RandomReg_10" "ADS"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, 0.8064030408859253 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -22.8760057036422 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_9' AS feature, -0.8411620855331421 AS threshold, 49 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -90.58612183843353 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 0.2276880443096161 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -258.2883709058352 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -315.6372353280651 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2184810058008253 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, 0.6640489101409912 AS threshold, 38 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -42.040733950501455 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -70.64049335674179 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 110.49131621611362 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, 'Feature_0' AS feature, 0.043546490371227264 AS threshold, 18 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 161.4459771077342 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, 'Feature_0' AS feature, -0.8629744052886963 AS threshold, 10 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 40.111865227181724 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -106.26717025884653 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 76.70662409868878 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, 'Feature_0' AS feature, 0.5011504888534546 AS threshold, 8 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 313.1136169584248 AS "Estimator" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 251.7240916753757 AS "Estimator" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 374.5031422414738 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"AdaBoost_Estim_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, "DT_Output_3"."Estimator" AS "Estimator_3" 
FROM "DT_Output_3"), 
"AdaBoost_Join_CTE" AS 
(SELECT "AdaBoost_Estim_0".join_key_0 AS join_key_0, "AdaBoost_Estim_0"."Estimator_0" AS "Estimator_0", "AdaBoost_Estim_1".join_key_1 AS join_key_1, "AdaBoost_Estim_1"."Estimator_1" AS "Estimator_1", "AdaBoost_Estim_2".join_key_2 AS join_key_2, "AdaBoost_Estim_2"."Estimator_2" AS "Estimator_2", "AdaBoost_Estim_3".join_key_3 AS join_key_3, "AdaBoost_Estim_3"."Estimator_3" AS "Estimator_3" 
FROM "AdaBoost_Estim_0" LEFT OUTER JOIN "AdaBoost_Estim_1" ON "AdaBoost_Estim_0".join_key_0 = "AdaBoost_Estim_1".join_key_1 LEFT OUTER JOIN "AdaBoost_Estim_2" ON "AdaBoost_Estim_2".join_key_2 = "AdaBoost_Estim_1".join_key_1 LEFT OUTER JOIN "AdaBoost_Estim_3" ON "AdaBoost_Estim_3".join_key_3 = "AdaBoost_Estim_2".join_key_2), 
"WeightedEstimators" AS 
(SELECT "Values"."Key" AS "Key", "Values".sub_estimator AS sub_estimator, "Values"."Weight" AS "Weight", "Values"."Value" AS "Value" 
FROM (SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 0 AS sub_estimator, 0.294463102664 AS "Weight", "AdaBoost_Join_CTE"."Estimator_0" AS "Value" 
FROM "AdaBoost_Join_CTE" UNION ALL SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 1 AS sub_estimator, 0.204906800504 AS "Weight", "AdaBoost_Join_CTE"."Estimator_1" AS "Value" 
FROM "AdaBoost_Join_CTE" UNION ALL SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 2 AS sub_estimator, 0.265364146624 AS "Weight", "AdaBoost_Join_CTE"."Estimator_2" AS "Value" 
FROM "AdaBoost_Join_CTE" UNION ALL SELECT "AdaBoost_Join_CTE".join_key_0 AS "Key", 3 AS sub_estimator, 0.235265950208 AS "Weight", "AdaBoost_Join_CTE"."Estimator_3" AS "Value" 
FROM "AdaBoost_Join_CTE") "Values"), 
"Cumulative_Frequencies" AS 
(SELECT u1."Key" AS "Key", u1.sub_estimator AS sub_estimator, u1."Weight" AS "Weight", u1."Value" AS "Value", (SELECT sum(u2."Weight") AS sum_1 
FROM "WeightedEstimators" u2 
WHERE u1."Key" = u2."Key" AND u1."Value" >= u2."Value") AS cum_weight 
FROM "WeightedEstimators" u1), 
"Quantiles" AS 
(SELECT "AdaBoost_Join_CTE".join_key_0 AS join_key_0, "AdaBoost_Join_CTE"."Estimator_0" AS "Estimator_0", "AdaBoost_Join_CTE".join_key_1 AS join_key_1, "AdaBoost_Join_CTE"."Estimator_1" AS "Estimator_1", "AdaBoost_Join_CTE".join_key_2 AS join_key_2, "AdaBoost_Join_CTE"."Estimator_2" AS "Estimator_2", "AdaBoost_Join_CTE".join_key_3 AS join_key_3, "AdaBoost_Join_CTE"."Estimator_3" AS "Estimator_3", (SELECT min("Cumulative_Frequencies"."Value") AS min_1 
FROM "Cumulative_Frequencies" 
WHERE "AdaBoost_Join_CTE".join_key_0 = "Cumulative_Frequencies"."Key" AND "Cumulative_Frequencies".cum_weight >= 0.5) AS "Median" 
FROM "AdaBoost_Join_CTE")
 SELECT "Quantiles".join_key_0 AS "KEY", "Quantiles"."Median" AS "Estimator" 
FROM "Quantiles"