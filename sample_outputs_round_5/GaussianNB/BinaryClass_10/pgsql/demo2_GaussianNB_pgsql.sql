-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "RawScores" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "Proba_0", -0.593774706747 + (-0.5 * 2.07914140437 - (0.5 * ("ADS"."Feature_0" - 0.0248749231071) * ("ADS"."Feature_0" - 0.0248749231071)) / 1.27285745539) + (-0.5 * 1.37096807983 - (0.5 * ("ADS"."Feature_1" - -0.0748116127298) * ("ADS"."Feature_1" - -0.0748116127298)) / 0.626937147508) + (-0.5 * 1.60756473369 - (0.5 * ("ADS"."Feature_2" - 0.197366245997) * ("ADS"."Feature_2" - 0.197366245997)) / 0.794285482412) + (-0.5 * 2.46021007664 - (0.5 * ("ADS"."Feature_3" - 0.26768268929) * ("ADS"."Feature_3" - 0.26768268929)) / 1.86327000294) + (-0.5 * 2.56659055651 - (0.5 * ("ADS"."Feature_4" - 0.353735272105) * ("ADS"."Feature_4" - 0.353735272105)) / 2.07241271244) + (-0.5 * 2.10409810683 - (0.5 * ("ADS"."Feature_5" - -0.049122046887) * ("ADS"."Feature_5" - -0.049122046887)) / 1.30502348975) + (-0.5 * 0.796700286146 - (0.5 * ("ADS"."Feature_6" - -0.976954666454) * ("ADS"."Feature_6" - -0.976954666454)) / 0.353038988103) + (-0.5 * 1.48573670677 - (0.5 * ("ADS"."Feature_7" - -0.57352432421) * ("ADS"."Feature_7" - -0.57352432421)) / 0.70318141676) + (-0.5 * 1.84618208613 - (0.5 * ("ADS"."Feature_8" - 0.0191511652953) * ("ADS"."Feature_8" - 0.0191511652953)) / 1.00833960207) + (-0.5 * 2.01038680527 - (0.5 * ("ADS"."Feature_9" - -0.0831327456626) * ("ADS"."Feature_9" - -0.0831327456626)) / 1.18828339308) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Proba_1", -0.803495237729 + (-0.5 * 1.84086826459 - (0.5 * ("ADS"."Feature_0" - -0.0507936665742) * ("ADS"."Feature_0" - -0.0507936665742)) / 1.00299567627) + (-0.5 * 2.07243419983 - (0.5 * ("ADS"."Feature_1" - 0.206461211318) * ("ADS"."Feature_1" - 0.206461211318)) / 1.26434870693) + (-0.5 * 1.89430779305 - (0.5 * ("ADS"."Feature_2" - -0.142874364699) * ("ADS"."Feature_2" - -0.142874364699)) / 1.05805331735) + (-0.5 * 2.18845496954 - (0.5 * ("ADS"."Feature_3" - -0.0269293464651) * ("ADS"."Feature_3" - -0.0269293464651)) / 1.41988786918) + (-0.5 * 2.25457913244 - (0.5 * ("ADS"."Feature_4" - -0.556753732069) * ("ADS"."Feature_4" - -0.556753732069)) / 1.51695049453) + (-0.5 * 1.74467684197 - (0.5 * ("ADS"."Feature_5" - -0.0886655562136) * ("ADS"."Feature_5" - -0.0886655562136)) / 0.911011075354) + (-0.5 * 1.22656358136 - (0.5 * ("ADS"."Feature_6" - 0.940493416633) * ("ADS"."Feature_6" - 0.940493416633)) / 0.542637654333) + (-0.5 * 1.29813923235 - (0.5 * ("ADS"."Feature_7" - 0.65405544685) * ("ADS"."Feature_7" - 0.65405544685)) / 0.582901049144) + (-0.5 * 1.56243094359 - (0.5 * ("ADS"."Feature_8" - 0.0422415898653) * ("ADS"."Feature_8" - 0.0422415898653)) / 0.759233336344) + (-0.5 * 1.59703679294 - (0.5 * ("ADS"."Feature_9" - -0.076166395875) * ("ADS"."Feature_9" - -0.076166395875)) / 0.78596715617) AS "Score_1" 
FROM "BinaryClass_10" AS "ADS"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "Score_1", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte