-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [RawScores] AS 
(SELECT [ADS].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Proba_0], -1.43210389715 + (-0.5 * 2.1685505154 - (0.5 * ([ADS].[Feature_0] - 0.123880922536) * ([ADS].[Feature_0] - 0.123880922536)) / 1.39190519005) + (-0.5 * 1.8052543276 - (0.5 * ([ADS].[Feature_1] - 0.279208146098) * ([ADS].[Feature_1] - 0.279208146098)) / 0.967903643202) + (-0.5 * 0.209020641831 - (0.5 * ([ADS].[Feature_2] - -0.599134034951) * ([ADS].[Feature_2] - -0.599134034951)) / 0.196153762536) + (-0.5 * 2.18836722941 - (0.5 * ([ADS].[Feature_3] - 0.191296329457) * ([ADS].[Feature_3] - 0.191296329457)) / 1.41976329351) + (-0.5 * 1.41445847909 - (0.5 * ([ADS].[Feature_4] - -0.958211250827) * ([ADS].[Feature_4] - -0.958211250827)) / 0.654804482888) + (-0.5 * 1.14868034712 - (0.5 * ([ADS].[Feature_5] - -0.237114976894) * ([ADS].[Feature_5] - -0.237114976894)) / 0.501979137315) + (-0.5 * 2.04124099377 - (0.5 * ([ADS].[Feature_6] - -0.935427952664) * ([ADS].[Feature_6] - -0.935427952664)) / 1.22551838678) + (-0.5 * 1.61721657772 - (0.5 * ([ADS].[Feature_7] - 0.0269275273391) * ([ADS].[Feature_7] - 0.0269275273391)) / 0.801988918382) + (-0.5 * 1.77980809896 - (0.5 * ([ADS].[Feature_8] - -0.177642434418) * ([ADS].[Feature_8] - -0.177642434418)) / 0.943584868555) + (-0.5 * 1.97334615332 - (0.5 * ([ADS].[Feature_9] - -1.09068441855) * ([ADS].[Feature_9] - -1.09068441855)) / 1.14507379751) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Proba_1], -1.31432086149 + (-0.5 * 1.80023261023 - (0.5 * ([ADS].[Feature_0] - -0.0770511894585) * ([ADS].[Feature_0] - -0.0770511894585)) / 0.963055288384) + (-0.5 * 1.69295300583 - (0.5 * ([ADS].[Feature_1] - 0.432968525109) * ([ADS].[Feature_1] - 0.432968525109)) / 0.865087984893) + (-0.5 * 2.1399289699 - (0.5 * ([ADS].[Feature_2] - -0.383093557249) * ([ADS].[Feature_2] - -0.383093557249)) / 1.35263143118) + (-0.5 * 2.62637724984 - (0.5 * ([ADS].[Feature_3] - -0.680505626981) * ([ADS].[Feature_3] - -0.680505626981)) / 2.20009421276) + (-0.5 * 1.92942104555 - (0.5 * ([ADS].[Feature_4] - 0.842314547197) * ([ADS].[Feature_4] - 0.842314547197)) / 1.09586497083) + (-0.5 * 1.61671303331 - (0.5 * ([ADS].[Feature_5] - 0.047405956709) * ([ADS].[Feature_5] - 0.047405956709)) / 0.801585183001) + (-0.5 * 2.37140867128 - (0.5 * ([ADS].[Feature_6] - -0.914312886352) * ([ADS].[Feature_6] - -0.914312886352)) / 1.70494287345) + (-0.5 * 2.0183995887 - (0.5 * ([ADS].[Feature_7] - 0.160287370988) * ([ADS].[Feature_7] - 0.160287370988)) / 1.19784309934) + (-0.5 * 2.08950729832 - (0.5 * ([ADS].[Feature_8] - -0.267738666657) * ([ADS].[Feature_8] - -0.267738666657)) / 1.28612038307) + (-0.5 * 3.26759059068 - (0.5 * ([ADS].[Feature_9] - 0.306133130257) * ([ADS].[Feature_9] - 0.306133130257)) / 4.17750226747) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Proba_2], -1.43210389715 + (-0.5 * 1.41984388032 - (0.5 * ([ADS].[Feature_0] - -0.219723706785) * ([ADS].[Feature_0] - -0.219723706785)) / 0.658340380322) + (-0.5 * 0.634269640082 - (0.5 * ([ADS].[Feature_1] - 0.164055738904) * ([ADS].[Feature_1] - 0.164055738904)) / 0.300109633427) + (-0.5 * 1.44148173298 - (0.5 * ([ADS].[Feature_2] - -0.104938408453) * ([ADS].[Feature_2] - -0.104938408453)) / 0.672740686475) + (-0.5 * 1.97504886644 - (0.5 * ([ADS].[Feature_3] - -0.148713780691) * ([ADS].[Feature_3] - -0.148713780691)) / 1.14702519056) + (-0.5 * 1.60264458386 - (0.5 * ([ADS].[Feature_4] - -0.464770096409) * ([ADS].[Feature_4] - -0.464770096409)) / 0.790387077066) + (-0.5 * 1.82801948178 - (0.5 * ([ADS].[Feature_5] - 0.112250892925) * ([ADS].[Feature_5] - 0.112250892925)) / 0.9901908421) + (-0.5 * 2.46411584091 - (0.5 * ([ADS].[Feature_6] - -1.48194716761) * ([ADS].[Feature_6] - -1.48194716761)) / 1.87056172695) + (-0.5 * 1.86415601086 - (0.5 * ([ADS].[Feature_7] - 0.472214411344) * ([ADS].[Feature_7] - 0.472214411344)) / 1.02662728052) + (-0.5 * 2.06702229565 - (0.5 * ([ADS].[Feature_8] - 1.30509933586) * ([ADS].[Feature_8] - 1.30509933586)) / 1.2575246551) + (-0.5 * 2.4376808552 - (0.5 * ([ADS].[Feature_9] - 1.58977746023) * ([ADS].[Feature_9] - 1.58977746023)) / 1.82176131534) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Proba_3], -1.37147927533 + (-0.5 * 1.09805653432 - (0.5 * ([ADS].[Feature_0] - -0.122703443275) * ([ADS].[Feature_0] - -0.122703443275)) / 0.477199549843) + (-0.5 * 1.32404338468 - (0.5 * ([ADS].[Feature_1] - -0.150530784518) * ([ADS].[Feature_1] - -0.150530784518)) / 0.598197877024) + (-0.5 * 0.48067596663 - (0.5 * ([ADS].[Feature_2] - 0.75818569948) * ([ADS].[Feature_2] - 0.75818569948)) / 0.257380151118) + (-0.5 * 1.51768460139 - (0.5 * ([ADS].[Feature_3] - 1.34263174024) * ([ADS].[Feature_3] - 1.34263174024)) / 0.726009292235) + (-0.5 * 2.40464517922 - (0.5 * ([ADS].[Feature_4] - -0.186906670508) * ([ADS].[Feature_4] - -0.186906670508)) / 1.76256143672) + (-0.5 * 1.83949595616 - (0.5 * ([ADS].[Feature_5] - -0.187494477434) * ([ADS].[Feature_5] - -0.187494477434)) / 1.00162020086) + (-0.5 * 1.95160514836 - (0.5 * ([ADS].[Feature_6] - 1.1691733716) * ([ADS].[Feature_6] - 1.1691733716)) / 1.12044741359) + (-0.5 * 1.77776869466 - (0.5 * ([ADS].[Feature_7] - 0.131691725334) * ([ADS].[Feature_7] - 0.131691725334)) / 0.941662478448) + (-0.5 * 2.37322477947 - (0.5 * ([ADS].[Feature_8] - 0.010809061841) * ([ADS].[Feature_8] - 0.010809061841)) / 1.70804204754) + (-0.5 * 2.8824647129 - (0.5 * ([ADS].[Feature_9] - -0.655810545071) * ([ADS].[Feature_9] - -0.655810545071)) / 2.84222628) AS [Score_3] 
FROM [FourClass_10] AS [ADS]), 
orig_cte AS 
(SELECT [RawScores].[KEY] AS [KEY], [RawScores].[Score_0] AS [Score_0], [RawScores].[Score_1] AS [Score_1], [RawScores].[Score_2] AS [Score_2], [RawScores].[Score_3] AS [Score_3], [RawScores].[Proba_0] AS [Proba_0], [RawScores].[Proba_1] AS [Proba_1], [RawScores].[Proba_2] AS [Proba_2], [RawScores].[Proba_3] AS [Proba_3], [RawScores].[LogProba_0] AS [LogProba_0], [RawScores].[LogProba_1] AS [LogProba_1], [RawScores].[LogProba_2] AS [LogProba_2], [RawScores].[LogProba_3] AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RawScores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte