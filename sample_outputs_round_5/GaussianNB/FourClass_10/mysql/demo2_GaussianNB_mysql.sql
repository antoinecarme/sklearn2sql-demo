-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `RawScores` AS 
(SELECT `ADS`.`KEY` AS `KEY`, NULL AS `LogProba_0`, NULL AS `Proba_0`, -1.43210389715 + (-0.5 * 2.58853601904 - (0.5 * (`ADS`.`Feature_0` - 0.219496954269) * (`ADS`.`Feature_0` - 0.219496954269)) / 2.11839547906) + (-0.5 * 1.74582771018 - (0.5 * (`ADS`.`Feature_1` - -0.0952070182806) * (`ADS`.`Feature_1` - -0.0952070182806)) / 0.912060132584) + (-0.5 * 2.87594476679 - (0.5 * (`ADS`.`Feature_2` - 0.0777410366183) * (`ADS`.`Feature_2` - 0.0777410366183)) / 2.82375539784) + (-0.5 * 2.71866284205 - (0.5 * (`ADS`.`Feature_3` - -0.568044715006) * (`ADS`.`Feature_3` - -0.568044715006)) / 2.41279487717) + (-0.5 * 2.07446595615 - (0.5 * (`ADS`.`Feature_4` - -0.319974993982) * (`ADS`.`Feature_4` - -0.319974993982)) / 1.26692016683) + (-0.5 * 1.7779216284 - (0.5 * (`ADS`.`Feature_5` - 0.261527156499) * (`ADS`.`Feature_5` - 0.261527156499)) / 0.941806501423) + (-0.5 * 1.99063681339 - (0.5 * (`ADS`.`Feature_6` - 0.491343236471) * (`ADS`.`Feature_6` - 0.491343236471)) / 1.16504503972) + (-0.5 * 2.20827043239 - (0.5 * (`ADS`.`Feature_7` - -0.674314309191) * (`ADS`.`Feature_7` - -0.674314309191)) / 1.44830421624) + (-0.5 * 2.31570379429 - (0.5 * (`ADS`.`Feature_8` - 0.293389045345) * (`ADS`.`Feature_8` - 0.293389045345)) / 1.61256604644) + (-0.5 * 2.00150035885 - (0.5 * (`ADS`.`Feature_9` - 0.955914536189) * (`ADS`.`Feature_9` - 0.955914536189)) / 1.17777055644) AS `Score_0`, NULL AS `LogProba_1`, NULL AS `Proba_1`, -1.37147927533 + (-0.5 * 1.86695435271 - (0.5 * (`ADS`.`Feature_0` - -0.211593724524) * (`ADS`.`Feature_0` - -0.211593724524)) / 1.02950415796) + (-0.5 * 1.41769358778 - (0.5 * (`ADS`.`Feature_1` - -0.0511040050594) * (`ADS`.`Feature_1` - -0.0511040050594)) / 0.656926276824) + (-0.5 * 2.58391102861 - (0.5 * (`ADS`.`Feature_2` - 0.752514531714) * (`ADS`.`Feature_2` - 0.752514531714)) / 2.10862054217) + (-0.5 * 2.08197956102 - (0.5 * (`ADS`.`Feature_3` - -0.211128834086) * (`ADS`.`Feature_3` - -0.211128834086)) / 1.2764751556) + (-0.5 * 1.97991604263 - (0.5 * (`ADS`.`Feature_4` - 0.266388583479) * (`ADS`.`Feature_4` - 0.266388583479)) / 1.15262157249) + (-0.5 * 1.71337356213 - (0.5 * (`ADS`.`Feature_5` - -0.054054331714) * (`ADS`.`Feature_5` - -0.054054331714)) / 0.882935167308) + (-0.5 * 2.28954328939 - (0.5 * (`ADS`.`Feature_6` - -0.055762455663) * (`ADS`.`Feature_6` - -0.055762455663)) / 1.57092752155) + (-0.5 * 2.35977757156 - (0.5 * (`ADS`.`Feature_7` - 0.0349381328179) * (`ADS`.`Feature_7` - 0.0349381328179)) / 1.68522739151) + (-0.5 * 2.38039810301 - (0.5 * (`ADS`.`Feature_8` - -0.572232406488) * (`ADS`.`Feature_8` - -0.572232406488)) / 1.72033843603) + (-0.5 * 2.28328435295 - (0.5 * (`ADS`.`Feature_9` - -0.449818539638) * (`ADS`.`Feature_9` - -0.449818539638)) / 1.56112589193) AS `Score_1`, NULL AS `LogProba_2`, NULL AS `Proba_2`, -1.49664241829 + (-0.5 * 1.84887194987 - (0.5 * (`ADS`.`Feature_0` - 0.781663238257) * (`ADS`.`Feature_0` - 0.781663238257)) / 1.01105554933) + (-0.5 * 1.63480020755 - (0.5 * (`ADS`.`Feature_1` - -0.0961569205784) * (`ADS`.`Feature_1` - -0.0961569205784)) / 0.816215505622) + (-0.5 * 2.33128681746 - (0.5 * (`ADS`.`Feature_2` - -1.20332726196) * (`ADS`.`Feature_2` - -1.20332726196)) / 1.63789151167) + (-0.5 * 1.9496310119 - (0.5 * (`ADS`.`Feature_3` - 0.325089157039) * (`ADS`.`Feature_3` - 0.325089157039)) / 1.11823767937) + (-0.5 * 2.05041429643 - (0.5 * (`ADS`.`Feature_4` - -0.14097204208) * (`ADS`.`Feature_4` - -0.14097204208)) / 1.23681215925) + (-0.5 * 1.59451994451 - (0.5 * (`ADS`.`Feature_5` - 0.281473808709) * (`ADS`.`Feature_5` - 0.281473808709)) / 0.783991483246) + (-0.5 * 1.82192273322 - (0.5 * (`ADS`.`Feature_6` - 0.107582700947) * (`ADS`.`Feature_6` - 0.107582700947)) / 0.984172263033) + (-0.5 * 1.36361778974 - (0.5 * (`ADS`.`Feature_7` - 0.705779526759) * (`ADS`.`Feature_7` - 0.705779526759)) / 0.622345871884) + (-0.5 * 2.50130274981 - (0.5 * (`ADS`.`Feature_8` - 0.687670119419) * (`ADS`.`Feature_8` - 0.687670119419)) / 1.94143168605) + (-0.5 * 1.83537098292 - (0.5 * (`ADS`.`Feature_9` - 0.525512568185) * (`ADS`.`Feature_9` - 0.525512568185)) / 0.997497054114) AS `Score_2`, NULL AS `LogProba_3`, NULL AS `Proba_3`, -1.26025364022 + (-0.5 * 3.30184171805 - (0.5 * (`ADS`.`Feature_0` - -0.396709585844) * (`ADS`.`Feature_0` - -0.396709585844)) / 4.32306504413) + (-0.5 * 1.29954831448 - (0.5 * (`ADS`.`Feature_1` - -0.0845409811483) * (`ADS`.`Feature_1` - -0.0845409811483)) / 0.583722983548) + (-0.5 * 2.36425410464 - (0.5 * (`ADS`.`Feature_2` - -0.108546755677) * (`ADS`.`Feature_2` - -0.108546755677)) / 1.69278827833) + (-0.5 * 1.87249447854 - (0.5 * (`ADS`.`Feature_3` - 0.388177379164) * (`ADS`.`Feature_3` - 0.388177379164)) / 1.03522356905) + (-0.5 * 1.62848448866 - (0.5 * (`ADS`.`Feature_4` - -0.16647275967) * (`ADS`.`Feature_4` - -0.16647275967)) / 0.811076762444) + (-0.5 * 1.84211291644 - (0.5 * (`ADS`.`Feature_5` - -0.0589311522773) * (`ADS`.`Feature_5` - -0.0589311522773)) / 1.00424483393) + (-0.5 * 1.77842137888 - (0.5 * (`ADS`.`Feature_6` - -0.12719121135) * (`ADS`.`Feature_6` - -0.12719121135)) / 0.942277287305) + (-0.5 * 2.94404339506 - (0.5 * (`ADS`.`Feature_7` - -0.08710192175) * (`ADS`.`Feature_7` - -0.08710192175)) / 3.02274793116) + (-0.5 * 2.99980487702 - (0.5 * (`ADS`.`Feature_8` - 0.17392811142) * (`ADS`.`Feature_8` - 0.17392811142)) / 3.19608879476) + (-0.5 * 2.59577751604 - (0.5 * (`ADS`.`Feature_9` - -0.412272910508) * (`ADS`.`Feature_9` - -0.412272910508)) / 2.13379151144) AS `Score_3` 
FROM `FourClass_10` AS `ADS`), 
orig_cte AS 
(SELECT `RawScores`.`KEY` AS `KEY`, `RawScores`.`Score_0` AS `Score_0`, `RawScores`.`Score_1` AS `Score_1`, `RawScores`.`Score_2` AS `Score_2`, `RawScores`.`Score_3` AS `Score_3`, `RawScores`.`Proba_0` AS `Proba_0`, `RawScores`.`Proba_1` AS `Proba_1`, `RawScores`.`Proba_2` AS `Proba_2`, `RawScores`.`Proba_3` AS `Proba_3`, `RawScores`.`LogProba_0` AS `LogProba_0`, `RawScores`.`LogProba_1` AS `LogProba_1`, `RawScores`.`LogProba_2` AS `LogProba_2`, `RawScores`.`LogProba_3` AS `LogProba_3`, NULL AS `Decision` 
FROM `RawScores`), 
score_class_union AS 
(SELECT scu.`KEY` AS `KEY`, scu.class AS class, scu.`LogProba` AS `LogProba`, scu.`Proba` AS `Proba`, scu.`Score` AS `Score` 
FROM (SELECT orig_cte.`KEY` AS `KEY`, 0 AS class, orig_cte.`LogProba_0` AS `LogProba`, orig_cte.`Proba_0` AS `Proba`, orig_cte.`Score_0` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 1 AS class, orig_cte.`LogProba_1` AS `LogProba`, orig_cte.`Proba_1` AS `Proba`, orig_cte.`Score_1` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 2 AS class, orig_cte.`LogProba_2` AS `LogProba`, orig_cte.`Proba_2` AS `Proba`, orig_cte.`Score_2` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 3 AS class, orig_cte.`LogProba_3` AS `LogProba`, orig_cte.`Proba_3` AS `Proba`, orig_cte.`Score_3` AS `Score` 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.`KEY` AS `KEY`, orig_cte.`Score_0` AS `Score_0`, orig_cte.`Score_1` AS `Score_1`, orig_cte.`Score_2` AS `Score_2`, orig_cte.`Score_3` AS `Score_3`, orig_cte.`Proba_0` AS `Proba_0`, orig_cte.`Proba_1` AS `Proba_1`, orig_cte.`Proba_2` AS `Proba_2`, orig_cte.`Proba_3` AS `Proba_3`, orig_cte.`LogProba_0` AS `LogProba_0`, orig_cte.`LogProba_1` AS `LogProba_1`, orig_cte.`LogProba_2` AS `LogProba_2`, orig_cte.`LogProba_3` AS `LogProba_3`, orig_cte.`Decision` AS `Decision`, (SELECT max(score_class_union.`LogProba`) AS max_1 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_LogProba`, (SELECT max(score_class_union.`Proba`) AS max_2 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_Proba`, (SELECT max(score_class_union.`Score`) AS max_3 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_Score` 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Score_2` AS `Score_2`, score_max.`Score_3` AS `Score_3`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`Proba_2` AS `Proba_2`, score_max.`Proba_3` AS `Proba_3`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`LogProba_2` AS `LogProba_2`, score_max.`LogProba_3` AS `LogProba_3`, score_max.`Decision` AS `Decision`, score_max.`max_LogProba` AS `max_LogProba`, score_max.`max_Proba` AS `max_Proba`, score_max.`max_Score` AS `max_Score`, exp(score_max.`Score_0` - score_max.`max_Score`) AS `exp_delta_Score_0`, exp(score_max.`Score_1` - score_max.`max_Score`) AS `exp_delta_Score_1`, exp(score_max.`Score_2` - score_max.`max_Score`) AS `exp_delta_Score_2`, exp(score_max.`Score_3` - score_max.`max_Score`) AS `exp_delta_Score_3` 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.`KEY` AS `KEY`, soft_scu.class AS class, soft_scu.`LogProba` AS `LogProba`, soft_scu.`Proba` AS `Proba`, soft_scu.`Score` AS `Score`, soft_scu.`exp_delta_Score` AS `exp_delta_Score` 
FROM (SELECT score_soft_max_comp.`KEY` AS `KEY`, 0 AS class, score_soft_max_comp.`LogProba_0` AS `LogProba`, score_soft_max_comp.`Proba_0` AS `Proba`, score_soft_max_comp.`Score_0` AS `Score`, score_soft_max_comp.`exp_delta_Score_0` AS `exp_delta_Score` 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.`KEY` AS `KEY`, 1 AS class, score_soft_max_comp.`LogProba_1` AS `LogProba`, score_soft_max_comp.`Proba_1` AS `Proba`, score_soft_max_comp.`Score_1` AS `Score`, score_soft_max_comp.`exp_delta_Score_1` AS `exp_delta_Score` 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.`KEY` AS `KEY`, 2 AS class, score_soft_max_comp.`LogProba_2` AS `LogProba`, score_soft_max_comp.`Proba_2` AS `Proba`, score_soft_max_comp.`Score_2` AS `Score`, score_soft_max_comp.`exp_delta_Score_2` AS `exp_delta_Score` 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.`KEY` AS `KEY`, 3 AS class, score_soft_max_comp.`LogProba_3` AS `LogProba`, score_soft_max_comp.`Proba_3` AS `Proba`, score_soft_max_comp.`Score_3` AS `Score`, score_soft_max_comp.`exp_delta_Score_3` AS `exp_delta_Score` 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.`KEY` AS `KEY`, score_soft_max_comp.`Score_0` AS `Score_0`, score_soft_max_comp.`Score_1` AS `Score_1`, score_soft_max_comp.`Score_2` AS `Score_2`, score_soft_max_comp.`Score_3` AS `Score_3`, score_soft_max_comp.`Proba_0` AS `Proba_0`, score_soft_max_comp.`Proba_1` AS `Proba_1`, score_soft_max_comp.`Proba_2` AS `Proba_2`, score_soft_max_comp.`Proba_3` AS `Proba_3`, score_soft_max_comp.`LogProba_0` AS `LogProba_0`, score_soft_max_comp.`LogProba_1` AS `LogProba_1`, score_soft_max_comp.`LogProba_2` AS `LogProba_2`, score_soft_max_comp.`LogProba_3` AS `LogProba_3`, score_soft_max_comp.`Decision` AS `Decision`, score_soft_max_comp.`max_LogProba` AS `max_LogProba`, score_soft_max_comp.`max_Proba` AS `max_Proba`, score_soft_max_comp.`max_Score` AS `max_Score`, score_soft_max_comp.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max_comp.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max_comp.`exp_delta_Score_2` AS `exp_delta_Score_2`, score_soft_max_comp.`exp_delta_Score_3` AS `exp_delta_Score_3`, (SELECT sum(score_class_union_soft.`exp_delta_Score`) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.`KEY` = score_class_union_soft.`KEY`) AS `sum_ExpDeltaScore` 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.`KEY` AS `KEY`, score_soft_max.`Score_0` AS `Score_0`, score_soft_max.`Score_1` AS `Score_1`, score_soft_max.`Score_2` AS `Score_2`, score_soft_max.`Score_3` AS `Score_3`, score_soft_max.`Proba_0` AS `Proba_0`, score_soft_max.`Proba_1` AS `Proba_1`, score_soft_max.`Proba_2` AS `Proba_2`, score_soft_max.`Proba_3` AS `Proba_3`, score_soft_max.`LogProba_0` AS `LogProba_0`, score_soft_max.`LogProba_1` AS `LogProba_1`, score_soft_max.`LogProba_2` AS `LogProba_2`, score_soft_max.`LogProba_3` AS `LogProba_3`, score_soft_max.`Decision` AS `Decision`, score_soft_max.`max_LogProba` AS `max_LogProba`, score_soft_max.`max_Proba` AS `max_Proba`, score_soft_max.`max_Score` AS `max_Score`, score_soft_max.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max.`exp_delta_Score_2` AS `exp_delta_Score_2`, score_soft_max.`exp_delta_Score_3` AS `exp_delta_Score_3`, score_soft_max.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore`, (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.`max_LogProba` = score_class_union.`LogProba` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_LogProba`, (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.`max_Proba` = score_class_union.`Proba` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_Proba`, (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.`max_Score` = score_class_union.`Score` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_Score`, score_soft_max.`exp_delta_Score_0` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_0`, score_soft_max.`exp_delta_Score_1` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_1`, score_soft_max.`exp_delta_Score_2` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_2`, score_soft_max.`exp_delta_Score_3` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_3` 
FROM score_soft_max)
 SELECT arg_max_cte.`KEY` AS `KEY`, NULL AS `Score_0`, NULL AS `Score_1`, NULL AS `Score_2`, NULL AS `Score_3`, arg_max_cte.`SoftProba_0` AS `Proba_0`, arg_max_cte.`SoftProba_1` AS `Proba_1`, arg_max_cte.`SoftProba_2` AS `Proba_2`, arg_max_cte.`SoftProba_3` AS `Proba_3`, CASE WHEN (arg_max_cte.`SoftProba_0` IS NULL OR arg_max_cte.`SoftProba_0` > 0.0) THEN ln(arg_max_cte.`SoftProba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (arg_max_cte.`SoftProba_1` IS NULL OR arg_max_cte.`SoftProba_1` > 0.0) THEN ln(arg_max_cte.`SoftProba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, CASE WHEN (arg_max_cte.`SoftProba_2` IS NULL OR arg_max_cte.`SoftProba_2` > 0.0) THEN ln(arg_max_cte.`SoftProba_2`) ELSE -1.79769313486231e+308 END AS `LogProba_2`, CASE WHEN (arg_max_cte.`SoftProba_3` IS NULL OR arg_max_cte.`SoftProba_3` > 0.0) THEN ln(arg_max_cte.`SoftProba_3`) ELSE -1.79769313486231e+308 END AS `LogProba_3`, arg_max_cte.`arg_max_Score` AS `Decision` 
FROM arg_max_cte