-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.173520957211 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0218962905824 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.164736358798 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.173440874886 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0133218478263 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.00245819577145 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.0897267584483 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.102257185347 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.116133478245 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.071942183228 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.173520957211) / 1.22994961503 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.0218962905824) / 0.954712484391 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.164736358798) / 1.01047001729 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - -0.173440874886) / 1.10204677216 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.0133218478263) / 0.952850244227 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.00245819577145) / 0.192856476725 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.0897267584483) / 0.968113556046 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.102257185347) / 1.02309186697 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.116133478245) / 1.49573451496 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - -0.071942183228) / 1.14545476681 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"RawScores" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -0.738956716591 + (-0.5 * 1.53000780566 - (0.5 * ("ADS_sca_2_OUT".scaler_2 - -0.311748449522) * ("ADS_sca_2_OUT".scaler_2 - -0.311748449522)) / 0.735011406566) + (-0.5 * 1.86662207874 - (0.5 * ("ADS_sca_2_OUT".scaler_3 - -0.0996485160924) * ("ADS_sca_2_OUT".scaler_3 - -0.0996485160924)) / 1.02916213736) + (-0.5 * 1.89258178402 - (0.5 * ("ADS_sca_2_OUT".scaler_4 - 0.00567320930751) * ("ADS_sca_2_OUT".scaler_4 - 0.00567320930751)) / 1.0562286829) + (-0.5 * 1.26608537533 - (0.5 * ("ADS_sca_2_OUT".scaler_5 - -0.633423308051) * ("ADS_sca_2_OUT".scaler_5 - -0.633423308051)) / 0.564513098988) + (-0.5 * 2.00632103615 - (0.5 * ("ADS_sca_2_OUT".scaler_6 - -0.0243872093934) * ("ADS_sca_2_OUT".scaler_6 - -0.0243872093934)) / 1.18346191531) + (-0.5 * 1.84004314579 - (0.5 * ("ADS_sca_2_OUT".scaler_7 - 0.304620548782) * ("ADS_sca_2_OUT".scaler_7 - 0.304620548782)) / 1.00216842703) + (-0.5 * 1.98043788025 - (0.5 * ("ADS_sca_2_OUT".scaler_8 - 0.0699428268713) * ("ADS_sca_2_OUT".scaler_8 - 0.0699428268713)) / 1.15322321075) + (-0.5 * 2.0743154219 - (0.5 * ("ADS_sca_2_OUT".scaler_9 - 0.0532769690573) * ("ADS_sca_2_OUT".scaler_9 - 0.0532769690573)) / 1.2667294663) + (-0.5 * 1.79197762699 - (0.5 * ("ADS_sca_2_OUT".scaler_10 - 0.0210105771685) * ("ADS_sca_2_OUT".scaler_10 - 0.0210105771685)) / 0.95513800659) + (-0.5 * 1.48048076508 - (0.5 * ("ADS_sca_2_OUT".scaler_11 - 0.0765705515896) * ("ADS_sca_2_OUT".scaler_11 - 0.0765705515896)) / 0.699495231904) AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -0.649344557902 + (-0.5 * 1.90756919328 - (0.5 * ("ADS_sca_2_OUT".scaler_2 - 0.285027153849) * ("ADS_sca_2_OUT".scaler_2 - 0.285027153849)) / 1.07217803562) + (-0.5 * 1.79283603111 - (0.5 * ("ADS_sca_2_OUT".scaler_3 - 0.091107214713) * ("ADS_sca_2_OUT".scaler_3 - 0.091107214713)) / 0.955958253) + (-0.5 * 1.78504004378 - (0.5 * ("ADS_sca_2_OUT".scaler_4 - -0.00518693422401) * ("ADS_sca_2_OUT".scaler_4 - -0.00518693422401)) / 0.948534589556) + (-0.5 * 1.4753761401 - (0.5 * ("ADS_sca_2_OUT".scaler_5 - 0.579129881646) * ("ADS_sca_2_OUT".scaler_5 - 0.579129881646)) / 0.695933669029) + (-0.5 * 1.65301927724 - (0.5 * ("ADS_sca_2_OUT".scaler_6 - 0.0222968771597) * ("ADS_sca_2_OUT".scaler_6 - 0.0222968771597)) / 0.831222484287) + (-0.5 * 1.65828326365 - (0.5 * ("ADS_sca_2_OUT".scaler_7 - -0.278510216029) * ("ADS_sca_2_OUT".scaler_7 - -0.278510216029)) / 0.835609564782) + (-0.5 * 1.67694301275 - (0.5 * ("ADS_sca_2_OUT".scaler_8 - -0.0639477274252) * ("ADS_sca_2_OUT".scaler_8 - -0.0639477274252)) / 0.851348212555) + (-0.5 * 1.55174741502 - (0.5 * ("ADS_sca_2_OUT".scaler_9 - -0.0487103717095) * ("ADS_sca_2_OUT".scaler_9 - -0.0487103717095)) / 0.75116522002) + (-0.5 * 1.87733242885 - (0.5 * ("ADS_sca_2_OUT".scaler_10 - -0.0192096705541) * ("ADS_sca_2_OUT".scaler_10 - -0.0192096705541)) / 1.0402440639) + (-0.5 * 2.0725425332 - (0.5 * ("ADS_sca_2_OUT".scaler_11 - -0.0700073614533) * ("ADS_sca_2_OUT".scaler_11 - -0.0700073614533)) / 1.26448568552) AS "Score_1" 
FROM "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte