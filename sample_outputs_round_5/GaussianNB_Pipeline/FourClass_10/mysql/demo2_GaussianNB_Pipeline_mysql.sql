-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `ADS_imp_1_OUT` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` IS NULL) THEN -0.434465862464 ELSE `ADS`.`Feature_0` END AS impter_2, CASE WHEN (`ADS`.`Feature_1` IS NULL) THEN -0.255734543251 ELSE `ADS`.`Feature_1` END AS impter_3, CASE WHEN (`ADS`.`Feature_2` IS NULL) THEN -0.169441190466 ELSE `ADS`.`Feature_2` END AS impter_4, CASE WHEN (`ADS`.`Feature_3` IS NULL) THEN -0.0653871982611 ELSE `ADS`.`Feature_3` END AS impter_5, CASE WHEN (`ADS`.`Feature_4` IS NULL) THEN -0.0447504605846 ELSE `ADS`.`Feature_4` END AS impter_6, CASE WHEN (`ADS`.`Feature_5` IS NULL) THEN -0.410904532031 ELSE `ADS`.`Feature_5` END AS impter_7, CASE WHEN (`ADS`.`Feature_6` IS NULL) THEN 0.111019238112 ELSE `ADS`.`Feature_6` END AS impter_8, CASE WHEN (`ADS`.`Feature_7` IS NULL) THEN 0.454930367829 ELSE `ADS`.`Feature_7` END AS impter_9, CASE WHEN (`ADS`.`Feature_8` IS NULL) THEN -0.212887219416 ELSE `ADS`.`Feature_8` END AS impter_10, CASE WHEN (`ADS`.`Feature_9` IS NULL) THEN 0.035156701887 ELSE `ADS`.`Feature_9` END AS impter_11 
FROM `FourClass_10` AS `ADS`), 
`ADS_sca_2_OUT` AS 
(SELECT `ADS_imp_1_OUT`.`KEY` AS `KEY`, (CAST(`ADS_imp_1_OUT`.impter_2 AS DOUBLE) - -0.434465862464) / 1.41618227107 AS scaler_2, (CAST(`ADS_imp_1_OUT`.impter_3 AS DOUBLE) - -0.255734543251) / 1.58830875076 AS scaler_3, (CAST(`ADS_imp_1_OUT`.impter_4 AS DOUBLE) - -0.169441190466) / 1.56850535656 AS scaler_4, (CAST(`ADS_imp_1_OUT`.impter_5 AS DOUBLE) - -0.0653871982611) / 0.929779872978 AS scaler_5, (CAST(`ADS_imp_1_OUT`.impter_6 AS DOUBLE) - -0.0447504605846) / 0.970160337016 AS scaler_6, (CAST(`ADS_imp_1_OUT`.impter_7 AS DOUBLE) - -0.410904532031) / 1.46337776907 AS scaler_7, (CAST(`ADS_imp_1_OUT`.impter_8 AS DOUBLE) - 0.111019238112) / 0.981570887596 AS scaler_8, (CAST(`ADS_imp_1_OUT`.impter_9 AS DOUBLE) - 0.454930367829) / 1.13162157719 AS scaler_9, (CAST(`ADS_imp_1_OUT`.impter_10 AS DOUBLE) - -0.212887219416) / 0.998394068528 AS scaler_10, (CAST(`ADS_imp_1_OUT`.impter_11 AS DOUBLE) - 0.035156701887) / 1.76557923651 AS scaler_11 
FROM `ADS_imp_1_OUT`), 
`RawScores` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, NULL AS `LogProba_0`, NULL AS `Proba_0`, -1.31432086149 + (-0.5 * 1.44307450388 - (0.5 * (`ADS_sca_2_OUT`.scaler_2 - 0.183090328276) * (`ADS_sca_2_OUT`.scaler_2 - 0.183090328276)) / 0.67381306206) + (-0.5 * 1.73409086027 - (0.5 * (`ADS_sca_2_OUT`.scaler_3 - -0.613543435841) * (`ADS_sca_2_OUT`.scaler_3 - -0.613543435841)) / 0.901417994457) + (-0.5 * 1.76083519742 - (0.5 * (`ADS_sca_2_OUT`.scaler_4 - 0.223631811666) * (`ADS_sca_2_OUT`.scaler_4 - 0.223631811666)) / 0.925851088341) + (-0.5 * 1.71342459579 - (0.5 * (`ADS_sca_2_OUT`.scaler_5 - 0.120954590564) * (`ADS_sca_2_OUT`.scaler_5 - 0.120954590564)) / 0.882980227875) + (-0.5 * 1.61801344683 - (0.5 * (`ADS_sca_2_OUT`.scaler_6 - 0.14767067148) * (`ADS_sca_2_OUT`.scaler_6 - 0.14767067148)) / 0.802628253281) + (-0.5 * 2.25070313506 - (0.5 * (`ADS_sca_2_OUT`.scaler_7 - 0.302860077756) * (`ADS_sca_2_OUT`.scaler_7 - 0.302860077756)) / 1.51108217852) + (-0.5 * 1.32219738548 - (0.5 * (`ADS_sca_2_OUT`.scaler_8 - -0.0752041222431) * (`ADS_sca_2_OUT`.scaler_8 - -0.0752041222431)) / 0.597094622841) + (-0.5 * 2.31661147637 - (0.5 * (`ADS_sca_2_OUT`.scaler_9 - -0.0629714526702) * (`ADS_sca_2_OUT`.scaler_9 - -0.0629714526702)) / 1.61403040823) + (-0.5 * 1.76480451501 - (0.5 * (`ADS_sca_2_OUT`.scaler_10 - 0.220164414234) * (`ADS_sca_2_OUT`.scaler_10 - 0.220164414234)) / 0.929533388632) + (-0.5 * 1.97788043131 - (0.5 * (`ADS_sca_2_OUT`.scaler_11 - 0.173218909225) * (`ADS_sca_2_OUT`.scaler_11 - 0.173218909225)) / 1.15027766942) AS `Score_0`, NULL AS `LogProba_1`, NULL AS `Proba_1`, -1.26025364022 + (-0.5 * 1.73116558565 - (0.5 * (`ADS_sca_2_OUT`.scaler_2 - -0.273625900739) * (`ADS_sca_2_OUT`.scaler_2 - -0.273625900739)) / 0.898784952333) + (-0.5 * 1.63507599338 - (0.5 * (`ADS_sca_2_OUT`.scaler_3 - 0.373409026486) * (`ADS_sca_2_OUT`.scaler_3 - 0.373409026486)) / 0.816440637338) + (-0.5 * 1.59652166934 - (0.5 * (`ADS_sca_2_OUT`.scaler_4 - 0.0802292262934) * (`ADS_sca_2_OUT`.scaler_4 - 0.0802292262934)) / 0.785562390198) + (-0.5 * 1.83791303869 - (0.5 * (`ADS_sca_2_OUT`.scaler_5 - 0.0990271777768) * (`ADS_sca_2_OUT`.scaler_5 - 0.0990271777768)) / 1.00003597292) + (-0.5 * 2.07136285852 - (0.5 * (`ADS_sca_2_OUT`.scaler_6 - -0.212860209548) * (`ADS_sca_2_OUT`.scaler_6 - -0.212860209548)) / 1.26299488327) + (-0.5 * 1.63988281679 - (0.5 * (`ADS_sca_2_OUT`.scaler_7 - 0.308129232419) * (`ADS_sca_2_OUT`.scaler_7 - 0.308129232419)) / 0.820374570591) + (-0.5 * 1.78187592827 - (0.5 * (`ADS_sca_2_OUT`.scaler_8 - -0.130736034174) * (`ADS_sca_2_OUT`.scaler_8 - -0.130736034174)) / 0.945538059738) + (-0.5 * 1.35343557049 - (0.5 * (`ADS_sca_2_OUT`.scaler_9 - -0.430592184556) * (`ADS_sca_2_OUT`.scaler_9 - -0.430592184556)) / 0.616041162204) + (-0.5 * 1.60369336908 - (0.5 * (`ADS_sca_2_OUT`.scaler_10 - -0.184382029638) * (`ADS_sca_2_OUT`.scaler_10 - -0.184382029638)) / 0.791216458194) + (-0.5 * 1.11493513111 - (0.5 * (`ADS_sca_2_OUT`.scaler_11 - -0.429400330168) * (`ADS_sca_2_OUT`.scaler_11 - -0.429400330168)) / 0.485322366667) AS `Score_1`, NULL AS `LogProba_2`, NULL AS `Proba_2`, -1.26025364022 + (-0.5 * 2.08741225597 - (0.5 * (`ADS_sca_2_OUT`.scaler_2 - 0.18610313419) * (`ADS_sca_2_OUT`.scaler_2 - 0.18610313419)) / 1.28342872696) + (-0.5 * 1.59287062034 - (0.5 * (`ADS_sca_2_OUT`.scaler_3 - 0.0608758326008) * (`ADS_sca_2_OUT`.scaler_3 - 0.0608758326008)) / 0.782699492894) + (-0.5 * 2.09804653429 - (0.5 * (`ADS_sca_2_OUT`.scaler_4 - -0.241160462399) * (`ADS_sca_2_OUT`.scaler_4 - -0.241160462399)) / 1.29714989329) + (-0.5 * 1.8396122982 - (0.5 * (`ADS_sca_2_OUT`.scaler_5 - -0.0773934254795) * (`ADS_sca_2_OUT`.scaler_5 - -0.0773934254795)) / 1.00173673817) + (-0.5 * 1.29166115082 - (0.5 * (`ADS_sca_2_OUT`.scaler_6 - 0.0583873811923) * (`ADS_sca_2_OUT`.scaler_6 - 0.0583873811923)) / 0.579137173138) + (-0.5 * 1.31138041892 - (0.5 * (`ADS_sca_2_OUT`.scaler_7 - -0.398137180267) * (`ADS_sca_2_OUT`.scaler_7 - -0.398137180267)) / 0.590670676716) + (-0.5 * 1.77190852599 - (0.5 * (`ADS_sca_2_OUT`.scaler_8 - 0.0635334200755) * (`ADS_sca_2_OUT`.scaler_8 - 0.0635334200755)) / 0.936160315043) + (-0.5 * 1.40761757086 - (0.5 * (`ADS_sca_2_OUT`.scaler_9 - 0.351279806297) * (`ADS_sca_2_OUT`.scaler_9 - 0.351279806297)) / 0.650340312409) + (-0.5 * 2.00785381645 - (0.5 * (`ADS_sca_2_OUT`.scaler_10 - 0.105272593629) * (`ADS_sca_2_OUT`.scaler_10 - 0.105272593629)) / 1.18527729335) + (-0.5 * 2.20750812725 - (0.5 * (`ADS_sca_2_OUT`.scaler_11 - 0.292028729415) * (`ADS_sca_2_OUT`.scaler_11 - 0.292028729415)) / 1.44720058719) AS `Score_2`, NULL AS `LogProba_3`, NULL AS `Proba_3`, -1.80679734659 + (-0.5 * 1.78973362795 - (0.5 * (`ADS_sca_2_OUT`.scaler_2 - -0.148426667684) * (`ADS_sca_2_OUT`.scaler_2 - -0.148426667684)) / 0.952997080842) + (-0.5 * 1.76104144439 - (0.5 * (`ADS_sca_2_OUT`.scaler_3 - 0.253851774773) * (`ADS_sca_2_OUT`.scaler_3 - 0.253851774773)) / 0.926042062022) + (-0.5 * 1.58597288014 - (0.5 * (`ADS_sca_2_OUT`.scaler_4 - -0.0879708294523) * (`ADS_sca_2_OUT`.scaler_4 - -0.0879708294523)) / 0.777319212358) + (-0.5 * 1.91653840122 - (0.5 * (`ADS_sca_2_OUT`.scaler_5 - -0.235293083982) * (`ADS_sca_2_OUT`.scaler_5 - -0.235293083982)) / 1.08183787919) + (-0.5 * 2.22666076077 - (0.5 * (`ADS_sca_2_OUT`.scaler_6 - 0.0251737865556) * (`ADS_sca_2_OUT`.scaler_6 - 0.0251737865556)) / 1.47518542589) + (-0.5 * 1.0984841797 - (0.5 * (`ADS_sca_2_OUT`.scaler_7 - -0.34012094459) * (`ADS_sca_2_OUT`.scaler_7 - -0.34012094459)) / 0.477403665667) + (-0.5 * 2.4035898929 - (0.5 * (`ADS_sca_2_OUT`.scaler_8 - 0.239138533476) * (`ADS_sca_2_OUT`.scaler_8 - 0.239138533476)) / 1.76070241082) + (-0.5 * 1.42972968317 - (0.5 * (`ADS_sca_2_OUT`.scaler_9 - 0.24003830318) * (`ADS_sca_2_OUT`.scaler_9 - 0.24003830318)) / 0.664880879306) + (-0.5 * 1.78523561967 - (0.5 * (`ADS_sca_2_OUT`.scaler_10 - -0.223625470185) * (`ADS_sca_2_OUT`.scaler_10 - -0.223625470185)) / 0.948720118199) + (-0.5 * 0.798361995356 - (0.5 * (`ADS_sca_2_OUT`.scaler_11 - -0.046170904704) * (`ADS_sca_2_OUT`.scaler_11 - -0.046170904704)) / 0.35362612393) AS `Score_3` 
FROM `ADS_sca_2_OUT`), 
orig_cte AS 
(SELECT `RawScores`.`KEY` AS `KEY`, `RawScores`.`Score_0` AS `Score_0`, `RawScores`.`Score_1` AS `Score_1`, `RawScores`.`Score_2` AS `Score_2`, `RawScores`.`Score_3` AS `Score_3`, `RawScores`.`Proba_0` AS `Proba_0`, `RawScores`.`Proba_1` AS `Proba_1`, `RawScores`.`Proba_2` AS `Proba_2`, `RawScores`.`Proba_3` AS `Proba_3`, `RawScores`.`LogProba_0` AS `LogProba_0`, `RawScores`.`LogProba_1` AS `LogProba_1`, `RawScores`.`LogProba_2` AS `LogProba_2`, `RawScores`.`LogProba_3` AS `LogProba_3`, NULL AS `Decision` 
FROM `RawScores`), 
score_class_union AS 
(SELECT scu.`KEY` AS `KEY`, scu.class AS class, scu.`LogProba` AS `LogProba`, scu.`Proba` AS `Proba`, scu.`Score` AS `Score` 
FROM (SELECT orig_cte.`KEY` AS `KEY`, 0 AS class, orig_cte.`LogProba_0` AS `LogProba`, orig_cte.`Proba_0` AS `Proba`, orig_cte.`Score_0` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 1 AS class, orig_cte.`LogProba_1` AS `LogProba`, orig_cte.`Proba_1` AS `Proba`, orig_cte.`Score_1` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 2 AS class, orig_cte.`LogProba_2` AS `LogProba`, orig_cte.`Proba_2` AS `Proba`, orig_cte.`Score_2` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 3 AS class, orig_cte.`LogProba_3` AS `LogProba`, orig_cte.`Proba_3` AS `Proba`, orig_cte.`Score_3` AS `Score` 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.`KEY` AS `KEY`, orig_cte.`Score_0` AS `Score_0`, orig_cte.`Score_1` AS `Score_1`, orig_cte.`Score_2` AS `Score_2`, orig_cte.`Score_3` AS `Score_3`, orig_cte.`Proba_0` AS `Proba_0`, orig_cte.`Proba_1` AS `Proba_1`, orig_cte.`Proba_2` AS `Proba_2`, orig_cte.`Proba_3` AS `Proba_3`, orig_cte.`LogProba_0` AS `LogProba_0`, orig_cte.`LogProba_1` AS `LogProba_1`, orig_cte.`LogProba_2` AS `LogProba_2`, orig_cte.`LogProba_3` AS `LogProba_3`, orig_cte.`Decision` AS `Decision`, (SELECT max(score_class_union.`LogProba`) AS max_1 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_LogProba`, (SELECT max(score_class_union.`Proba`) AS max_2 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_Proba`, (SELECT max(score_class_union.`Score`) AS max_3 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_Score` 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Score_2` AS `Score_2`, score_max.`Score_3` AS `Score_3`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`Proba_2` AS `Proba_2`, score_max.`Proba_3` AS `Proba_3`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`LogProba_2` AS `LogProba_2`, score_max.`LogProba_3` AS `LogProba_3`, score_max.`Decision` AS `Decision`, score_max.`max_LogProba` AS `max_LogProba`, score_max.`max_Proba` AS `max_Proba`, score_max.`max_Score` AS `max_Score`, exp(score_max.`Score_0` - score_max.`max_Score`) AS `exp_delta_Score_0`, exp(score_max.`Score_1` - score_max.`max_Score`) AS `exp_delta_Score_1`, exp(score_max.`Score_2` - score_max.`max_Score`) AS `exp_delta_Score_2`, exp(score_max.`Score_3` - score_max.`max_Score`) AS `exp_delta_Score_3` 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.`KEY` AS `KEY`, soft_scu.class AS class, soft_scu.`LogProba` AS `LogProba`, soft_scu.`Proba` AS `Proba`, soft_scu.`Score` AS `Score`, soft_scu.`exp_delta_Score` AS `exp_delta_Score` 
FROM (SELECT score_soft_max_comp.`KEY` AS `KEY`, 0 AS class, score_soft_max_comp.`LogProba_0` AS `LogProba`, score_soft_max_comp.`Proba_0` AS `Proba`, score_soft_max_comp.`Score_0` AS `Score`, score_soft_max_comp.`exp_delta_Score_0` AS `exp_delta_Score` 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.`KEY` AS `KEY`, 1 AS class, score_soft_max_comp.`LogProba_1` AS `LogProba`, score_soft_max_comp.`Proba_1` AS `Proba`, score_soft_max_comp.`Score_1` AS `Score`, score_soft_max_comp.`exp_delta_Score_1` AS `exp_delta_Score` 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.`KEY` AS `KEY`, 2 AS class, score_soft_max_comp.`LogProba_2` AS `LogProba`, score_soft_max_comp.`Proba_2` AS `Proba`, score_soft_max_comp.`Score_2` AS `Score`, score_soft_max_comp.`exp_delta_Score_2` AS `exp_delta_Score` 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.`KEY` AS `KEY`, 3 AS class, score_soft_max_comp.`LogProba_3` AS `LogProba`, score_soft_max_comp.`Proba_3` AS `Proba`, score_soft_max_comp.`Score_3` AS `Score`, score_soft_max_comp.`exp_delta_Score_3` AS `exp_delta_Score` 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.`KEY` AS `KEY`, score_soft_max_comp.`Score_0` AS `Score_0`, score_soft_max_comp.`Score_1` AS `Score_1`, score_soft_max_comp.`Score_2` AS `Score_2`, score_soft_max_comp.`Score_3` AS `Score_3`, score_soft_max_comp.`Proba_0` AS `Proba_0`, score_soft_max_comp.`Proba_1` AS `Proba_1`, score_soft_max_comp.`Proba_2` AS `Proba_2`, score_soft_max_comp.`Proba_3` AS `Proba_3`, score_soft_max_comp.`LogProba_0` AS `LogProba_0`, score_soft_max_comp.`LogProba_1` AS `LogProba_1`, score_soft_max_comp.`LogProba_2` AS `LogProba_2`, score_soft_max_comp.`LogProba_3` AS `LogProba_3`, score_soft_max_comp.`Decision` AS `Decision`, score_soft_max_comp.`max_LogProba` AS `max_LogProba`, score_soft_max_comp.`max_Proba` AS `max_Proba`, score_soft_max_comp.`max_Score` AS `max_Score`, score_soft_max_comp.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max_comp.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max_comp.`exp_delta_Score_2` AS `exp_delta_Score_2`, score_soft_max_comp.`exp_delta_Score_3` AS `exp_delta_Score_3`, (SELECT sum(score_class_union_soft.`exp_delta_Score`) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.`KEY` = score_class_union_soft.`KEY`) AS `sum_ExpDeltaScore` 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.`KEY` AS `KEY`, score_soft_max.`Score_0` AS `Score_0`, score_soft_max.`Score_1` AS `Score_1`, score_soft_max.`Score_2` AS `Score_2`, score_soft_max.`Score_3` AS `Score_3`, score_soft_max.`Proba_0` AS `Proba_0`, score_soft_max.`Proba_1` AS `Proba_1`, score_soft_max.`Proba_2` AS `Proba_2`, score_soft_max.`Proba_3` AS `Proba_3`, score_soft_max.`LogProba_0` AS `LogProba_0`, score_soft_max.`LogProba_1` AS `LogProba_1`, score_soft_max.`LogProba_2` AS `LogProba_2`, score_soft_max.`LogProba_3` AS `LogProba_3`, score_soft_max.`Decision` AS `Decision`, score_soft_max.`max_LogProba` AS `max_LogProba`, score_soft_max.`max_Proba` AS `max_Proba`, score_soft_max.`max_Score` AS `max_Score`, score_soft_max.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max.`exp_delta_Score_2` AS `exp_delta_Score_2`, score_soft_max.`exp_delta_Score_3` AS `exp_delta_Score_3`, score_soft_max.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore`, (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.`max_LogProba` = score_class_union.`LogProba` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_LogProba`, (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.`max_Proba` = score_class_union.`Proba` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_Proba`, (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.`max_Score` = score_class_union.`Score` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_Score`, score_soft_max.`exp_delta_Score_0` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_0`, score_soft_max.`exp_delta_Score_1` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_1`, score_soft_max.`exp_delta_Score_2` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_2`, score_soft_max.`exp_delta_Score_3` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_3` 
FROM score_soft_max)
 SELECT arg_max_cte.`KEY` AS `KEY`, NULL AS `Score_0`, NULL AS `Score_1`, NULL AS `Score_2`, NULL AS `Score_3`, arg_max_cte.`SoftProba_0` AS `Proba_0`, arg_max_cte.`SoftProba_1` AS `Proba_1`, arg_max_cte.`SoftProba_2` AS `Proba_2`, arg_max_cte.`SoftProba_3` AS `Proba_3`, CASE WHEN (arg_max_cte.`SoftProba_0` IS NULL OR arg_max_cte.`SoftProba_0` > 0.0) THEN ln(arg_max_cte.`SoftProba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (arg_max_cte.`SoftProba_1` IS NULL OR arg_max_cte.`SoftProba_1` > 0.0) THEN ln(arg_max_cte.`SoftProba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, CASE WHEN (arg_max_cte.`SoftProba_2` IS NULL OR arg_max_cte.`SoftProba_2` > 0.0) THEN ln(arg_max_cte.`SoftProba_2`) ELSE -1.79769313486231e+308 END AS `LogProba_2`, CASE WHEN (arg_max_cte.`SoftProba_3` IS NULL OR arg_max_cte.`SoftProba_3` > 0.0) THEN ln(arg_max_cte.`SoftProba_3`) ELSE -1.79769313486231e+308 END AS `LogProba_3`, arg_max_cte.`arg_max_Score` AS `Decision` 
FROM arg_max_cte