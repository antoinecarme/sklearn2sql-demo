-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.00396189980258 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.23404178501 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.439357985081 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.035940304502 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.168480078288 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.0264732430411 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.26144724174 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.120892676584 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.244291825722 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.560571607337 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.00396189980258) / 1.18236077986 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.23404178501) / 1.36981378033 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.439357985081) / 1.43262701079 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - -0.035940304502) / 1.125673021 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.168480078288) / 1.40876293011 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.0264732430411) / 1.64044242799 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.26144724174) / 1.30407067021 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.120892676584) / 1.08987932007 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.244291825722) / 0.961309713987 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.560571607337) / 1.56274371623 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"RawScores" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "Proba_0", -1.31432086149 + (-0.5 * 1.56905618216 - (0.5 * ("ADS_sca_2_OUT".scaler_2 - -0.033821562366) * ("ADS_sca_2_OUT".scaler_2 - -0.033821562366)) / 0.764280138003) + (-0.5 * 0.994516445223 - (0.5 * ("ADS_sca_2_OUT".scaler_3 - -0.631220285878) * ("ADS_sca_2_OUT".scaler_3 - -0.631220285878)) / 0.43026214299) + (-0.5 * 1.96117301104 - (0.5 * ("ADS_sca_2_OUT".scaler_4 - 0.181567820025) * ("ADS_sca_2_OUT".scaler_4 - 0.181567820025)) / 1.13121914964) + (-0.5 * 2.01423301862 - (0.5 * ("ADS_sca_2_OUT".scaler_5 - -0.0167547546894) * ("ADS_sca_2_OUT".scaler_5 - -0.0167547546894)) / 1.19286258517) + (-0.5 * 0.637823063723 - (0.5 * ("ADS_sca_2_OUT".scaler_6 - -0.69830400003) * ("ADS_sca_2_OUT".scaler_6 - -0.69830400003)) / 0.301177947055) + (-0.5 * 1.01149152993 - (0.5 * ("ADS_sca_2_OUT".scaler_7 - -0.0417703291888) * ("ADS_sca_2_OUT".scaler_7 - -0.0417703291888)) / 0.437628222343) + (-0.5 * 1.03096503908 - (0.5 * ("ADS_sca_2_OUT".scaler_8 - -0.0799622363651) * ("ADS_sca_2_OUT".scaler_8 - -0.0799622363651)) / 0.446233898946) + (-0.5 * 2.13365830789 - (0.5 * ("ADS_sca_2_OUT".scaler_9 - -0.159159310091) * ("ADS_sca_2_OUT".scaler_9 - -0.159159310091)) / 1.3441760747) + (-0.5 * 1.83577591178 - (0.5 * ("ADS_sca_2_OUT".scaler_10 - -0.328325865746) * ("ADS_sca_2_OUT".scaler_10 - -0.328325865746)) / 0.997901051255) + (-0.5 * 2.09439384969 - (0.5 * ("ADS_sca_2_OUT".scaler_11 - -0.217213805863) * ("ADS_sca_2_OUT".scaler_11 - -0.217213805863)) / 1.29242045668) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Proba_1", -1.37147927533 + (-0.5 * 1.94135552718 - (0.5 * ("ADS_sca_2_OUT".scaler_2 - 0.0918478957225) * ("ADS_sca_2_OUT".scaler_2 - 0.0918478957225)) / 1.10902190563) + (-0.5 * 1.98935149272 - (0.5 * ("ADS_sca_2_OUT".scaler_3 - -0.43025342743) * ("ADS_sca_2_OUT".scaler_3 - -0.43025342743)) / 1.1635485452) + (-0.5 * 0.643030772945 - (0.5 * ("ADS_sca_2_OUT".scaler_4 - -0.524191442086) * ("ADS_sca_2_OUT".scaler_4 - -0.524191442086)) / 0.302750485334) + (-0.5 * 1.68097239355 - (0.5 * ("ADS_sca_2_OUT".scaler_5 - -0.0991517251273) * ("ADS_sca_2_OUT".scaler_5 - -0.0991517251273)) / 0.854785539199) + (-0.5 * 0.547860837384 - (0.5 * ("ADS_sca_2_OUT".scaler_6 - 0.89164196267) * ("ADS_sca_2_OUT".scaler_6 - 0.89164196267)) / 0.27526631575) + (-0.5 * 2.13622175752 - (0.5 * ("ADS_sca_2_OUT".scaler_7 - 0.158852827021) * ("ADS_sca_2_OUT".scaler_7 - 0.158852827021)) / 1.34762622261) + (-0.5 * 1.50046025102 - (0.5 * ("ADS_sca_2_OUT".scaler_8 - 0.565747757638) * ("ADS_sca_2_OUT".scaler_8 - 0.565747757638)) / 0.713611333716) + (-0.5 * 1.64579035505 - (0.5 * ("ADS_sca_2_OUT".scaler_9 - -0.268248621769) * ("ADS_sca_2_OUT".scaler_9 - -0.268248621769)) / 0.825235308112) + (-0.5 * 2.02375001741 - (0.5 * ("ADS_sca_2_OUT".scaler_10 - 0.0616868974429) * ("ADS_sca_2_OUT".scaler_10 - 0.0616868974429)) / 1.20426924945) + (-0.5 * 1.04156064823 - (0.5 * ("ADS_sca_2_OUT".scaler_11 - 0.00234519216932) * ("ADS_sca_2_OUT".scaler_11 - 0.00234519216932)) / 0.450987156287) AS "Score_1", CAST(NULL AS FLOAT(53)) AS "LogProba_2", CAST(NULL AS FLOAT(53)) AS "Proba_2", -1.56563528978 + (-0.5 * 1.96196149024 - (0.5 * ("ADS_sca_2_OUT".scaler_2 - -0.0712878968481) * ("ADS_sca_2_OUT".scaler_2 - -0.0712878968481)) / 1.13211144415) + (-0.5 * -0.0465744838728 - (0.5 * ("ADS_sca_2_OUT".scaler_3 - 0.662282707327) * ("ADS_sca_2_OUT".scaler_3 - 0.662282707327)) / 0.151912352873) + (-0.5 * 1.6615725141 - (0.5 * ("ADS_sca_2_OUT".scaler_4 - -0.296548731341) * ("ADS_sca_2_OUT".scaler_4 - -0.296548731341)) / 0.838362619185) + (-0.5 * 1.76576942 - (0.5 * ("ADS_sca_2_OUT".scaler_5 - 0.412826506969) * ("ADS_sca_2_OUT".scaler_5 - 0.412826506969)) / 0.930430732896) + (-0.5 * 0.851124538529 - (0.5 * ("ADS_sca_2_OUT".scaler_6 - -0.788998898748) * ("ADS_sca_2_OUT".scaler_6 - -0.788998898748)) / 0.372785337427) + (-0.5 * 2.00082419014 - (0.5 * ("ADS_sca_2_OUT".scaler_7 - -0.167209386129) * ("ADS_sca_2_OUT".scaler_7 - -0.167209386129)) / 1.17697445402) + (-0.5 * 1.21174998102 - (0.5 * ("ADS_sca_2_OUT".scaler_8 - 0.103816915252) * ("ADS_sca_2_OUT".scaler_8 - 0.103816915252)) / 0.534658483035) + (-0.5 * 1.53613159706 - (0.5 * ("ADS_sca_2_OUT".scaler_9 - 0.168133169789) * ("ADS_sca_2_OUT".scaler_9 - 0.168133169789)) / 0.73952627304) + (-0.5 * 1.45469370167 - (0.5 * ("ADS_sca_2_OUT".scaler_10 - -0.0724387163453) * ("ADS_sca_2_OUT".scaler_10 - -0.0724387163453)) / 0.6816878903) + (-0.5 * 1.59035184549 - (0.5 * ("ADS_sca_2_OUT".scaler_11 - 0.720721745879) * ("ADS_sca_2_OUT".scaler_11 - 0.720721745879)) / 0.780730529819) AS "Score_2", CAST(NULL AS FLOAT(53)) AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Proba_3", -1.31432086149 + (-0.5 * 1.85466645268 - (0.5 * ("ADS_sca_2_OUT".scaler_2 - 0.00252246950997) * ("ADS_sca_2_OUT".scaler_2 - 0.00252246950997)) / 1.01693112011) + (-0.5 * 1.71854405396 - (0.5 * ("ADS_sca_2_OUT".scaler_3 - 0.522461972752) * ("ADS_sca_2_OUT".scaler_3 - 0.522461972752)) / 0.88751219893) + (-0.5 * 1.83390440071 - (0.5 * ("ADS_sca_2_OUT".scaler_4 - 0.544150888543) * ("ADS_sca_2_OUT".scaler_4 - 0.544150888543)) / 0.996035214897) + (-0.5 * 1.62948040432 - (0.5 * ("ADS_sca_2_OUT".scaler_5 - -0.210689232555) * ("ADS_sca_2_OUT".scaler_5 - -0.210689232555)) / 0.811884928863) + (-0.5 * 1.76281642424 - (0.5 * ("ADS_sca_2_OUT".scaler_6 - 0.46986351209) * ("ADS_sca_2_OUT".scaler_6 - 0.46986351209)) / 0.927687227661) + (-0.5 * 1.88534576808 - (0.5 * ("ADS_sca_2_OUT".scaler_7 - 0.0217944039911) * ("ADS_sca_2_OUT".scaler_7 - 0.0217944039911)) / 1.04861338076) + (-0.5 * 2.29705811699 - (0.5 * ("ADS_sca_2_OUT".scaler_8 - -0.535101579934) * ("ADS_sca_2_OUT".scaler_8 - -0.535101579934)) / 1.58277723958) + (-0.5 * 1.65012159164 - (0.5 * ("ADS_sca_2_OUT".scaler_9 - 0.281734987482) * ("ADS_sca_2_OUT".scaler_9 - 0.281734987482)) / 0.828817349205) + (-0.5 * 1.6572413235 - (0.5 * ("ADS_sca_2_OUT".scaler_10 - 0.326407241986) * ("ADS_sca_2_OUT".scaler_10 - 0.326407241986)) / 0.83473936306) + (-0.5 * 1.64674730535 - (0.5 * ("ADS_sca_2_OUT".scaler_11 - -0.345562455758) * ("ADS_sca_2_OUT".scaler_11 - -0.345562455758)) / 0.826025395266) AS "Score_3" 
FROM "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1", exp(CASE WHEN (score_max."Score_2" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_2" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_2", exp(CASE WHEN (score_max."Score_3" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_3" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "Score_1", CAST(NULL AS FLOAT(53)) AS "Score_2", CAST(NULL AS FLOAT(53)) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte