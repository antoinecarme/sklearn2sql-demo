-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `DT_node_lookup` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_7` <= 0.17164382338523865) THEN CASE WHEN (`ADS`.`Feature_6` <= 1.705315351486206) THEN CASE WHEN (`ADS`.`Feature_8` <= -0.011259161867201328) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_1` <= -0.29313790798187256) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_5` <= 1.821784496307373) THEN 9 ELSE CASE WHEN (`ADS`.`Feature_4` <= -1.4291858673095703) THEN 11 ELSE 12 END END END AS node_id_2 
FROM `BinaryClass_10` AS `ADS`), 
`DT_node_data` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.17164382338523865 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.193075489149422e-16 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, 1.705315351486206 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.4748134328358211 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_8' AS feature, -0.011259161867201328 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.5039800995024878 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.356810035842294 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -2.161290322580645 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, -0.29313790798187256 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.03731343283582089 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.8611111111111112 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -2.161290322580645 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_5' AS feature, 1.821784496307373 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.43411513859275025 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.8611111111111112 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_4' AS feature, -1.4291858673095703 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.03731343283582089 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.8611111111111112 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -2.161290322580645 AS `Estimator`) AS `Values`), 
`DT_Output` AS 
(SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup` LEFT OUTER JOIN `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id), 
`RF_Tree_0_0` AS 
(SELECT `DT_Output`.`KEY` AS join_key_0_0, `DT_Output`.`Estimator` AS `Estimator_0_0` 
FROM `DT_Output`), 
`DT_node_lookup_1` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_7` <= 0.17164382338523865) THEN CASE WHEN (`ADS`.`Feature_6` <= 1.705315351486206) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.9620994329452515) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_4` <= 0.20572125911712646) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_5` <= 1.821784496307373) THEN 9 ELSE CASE WHEN (`ADS`.`Feature_7` <= 1.0659085512161255) THEN 11 ELSE 12 END END END AS node_id_2 
FROM `BinaryClass_10` AS `ADS`), 
`DT_node_data_1` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.17164382338523865 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.00033495466135470493 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, 1.705315351486206 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.4271163234672034 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 0.9620994329452515 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.45337445978233687 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.9481230925320219 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.1505428053183722 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_4' AS feature, 0.20572125911712646 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.03324427874020458 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.7148783825567202 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.9355718818861107 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_5' AS feature, 1.821784496307373 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.3911475518074653 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.7148783825567204 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_7' AS feature, 1.0659085512161255 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.03324427874020458 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.9355718818861107 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.7148783825567202 AS `Estimator`) AS `Values`), 
`DT_Output_1` AS 
(SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_1` LEFT OUTER JOIN `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id), 
`RF_Tree_1_0` AS 
(SELECT `DT_Output_1`.`KEY` AS join_key_1_0, `DT_Output_1`.`Estimator` AS `Estimator_1_0` 
FROM `DT_Output_1`), 
`DT_node_lookup_2` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_7` <= 0.17164382338523865) THEN CASE WHEN (`ADS`.`Feature_6` <= 1.705315351486206) THEN CASE WHEN (`ADS`.`Feature_2` <= -1.1074399948120117) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_2` <= -0.8454597592353821) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_5` <= 1.821784496307373) THEN 9 ELSE CASE WHEN (`ADS`.`Feature_4` <= -1.4291858673095703) THEN 11 ELSE 12 END END END AS node_id_2 
FROM `BinaryClass_10` AS `ADS`), 
`DT_node_data_2` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.17164382338523865 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0005404954038416292 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, 1.705315351486206 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.38462245950343577 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, -1.1074399948120117 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.40828197908569513 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.0285339157055915 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.7828642780467385 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, -0.8454597592353821 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.02972966576954561 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.770932477961996 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.6022210650815887 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_5' AS feature, 1.821784496307373 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.3526894827476377 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.6022210650815887 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_4' AS feature, -1.4291858673095703 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.02972966576954561 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.6022210650815887 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.770932477961996 AS `Estimator`) AS `Values`), 
`DT_Output_2` AS 
(SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_2` LEFT OUTER JOIN `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id), 
`RF_Tree_2_0` AS 
(SELECT `DT_Output_2`.`KEY` AS join_key_2_0, `DT_Output_2`.`Estimator` AS `Estimator_2_0` 
FROM `DT_Output_2`), 
`DT_node_lookup_3` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_7` <= 0.17164382338523865) THEN CASE WHEN (`ADS`.`Feature_6` <= 1.705315351486206) THEN CASE WHEN (`ADS`.`Feature_0` <= 0.9620994329452515) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_5` <= 0.6362682580947876) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_5` <= 1.821784496307373) THEN 9 ELSE CASE WHEN (`ADS`.`Feature_5` <= 2.0518107414245605) THEN 11 ELSE 12 END END END AS node_id_2 
FROM `BinaryClass_10` AS `ADS`), 
`DT_node_data_3` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.17164382338523865 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.0006626355768282321 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, 1.705315351486206 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.3466331654795075 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 0.9620994329452515 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.36796513899451866 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.661803039131498 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.8991102195544015 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_5' AS feature, 0.6362682580947876 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.026653562754340138 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.5130649724683805 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.645811421969118 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_5' AS feature, 1.821784496307373 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.3181902251140493 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.5130649724683805 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_5' AS feature, 2.0518107414245605 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.026653562754340138 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -1.645811421969118 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.5130649724683805 AS `Estimator`) AS `Values`), 
`DT_Output_3` AS 
(SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_3` LEFT OUTER JOIN `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id), 
`RF_Tree_3_0` AS 
(SELECT `DT_Output_3`.`KEY` AS join_key_3_0, `DT_Output_3`.`Estimator` AS `Estimator_3_0` 
FROM `DT_Output_3`), 
`RF_Join_CTE` AS 
(SELECT `RF_Tree_0_0`.join_key_0_0 AS join_key_0_0, `RF_Tree_0_0`.`Estimator_0_0` AS `Estimator_0_0`, `RF_Tree_1_0`.join_key_1_0 AS join_key_1_0, `RF_Tree_1_0`.`Estimator_1_0` AS `Estimator_1_0`, `RF_Tree_2_0`.join_key_2_0 AS join_key_2_0, `RF_Tree_2_0`.`Estimator_2_0` AS `Estimator_2_0`, `RF_Tree_3_0`.join_key_3_0 AS join_key_3_0, `RF_Tree_3_0`.`Estimator_3_0` AS `Estimator_3_0` 
FROM `RF_Tree_0_0` LEFT OUTER JOIN `RF_Tree_1_0` ON `RF_Tree_0_0`.join_key_0_0 = `RF_Tree_1_0`.join_key_1_0 LEFT OUTER JOIN `RF_Tree_2_0` ON `RF_Tree_2_0`.join_key_2_0 = `RF_Tree_1_0`.join_key_1_0 LEFT OUTER JOIN `RF_Tree_3_0` ON `RF_Tree_3_0`.join_key_3_0 = `RF_Tree_2_0`.join_key_2_0), 
`RF_AVG_Scores` AS 
(SELECT `RF_Join_CTE`.join_key_0_0 AS `KEY`, 0.850468266029 + 0.1 * `RF_Join_CTE`.`Estimator_0_0` + 0.1 * `RF_Join_CTE`.`Estimator_1_0` + 0.1 * `RF_Join_CTE`.`Estimator_2_0` + 0.1 * `RF_Join_CTE`.`Estimator_3_0` AS `Score_0`, NULL AS `Proba_0`, NULL AS `LogProba_0`, 0.149531733971 AS `Score_1`, NULL AS `Proba_1`, NULL AS `LogProba_1` 
FROM `RF_Join_CTE`), 
orig_cte AS 
(SELECT `RF_AVG_Scores`.`KEY` AS `KEY`, `RF_AVG_Scores`.`Score_0` AS `Score_0`, `RF_AVG_Scores`.`Score_1` AS `Score_1`, `RF_AVG_Scores`.`Proba_0` AS `Proba_0`, `RF_AVG_Scores`.`Proba_1` AS `Proba_1`, `RF_AVG_Scores`.`LogProba_0` AS `LogProba_0`, `RF_AVG_Scores`.`LogProba_1` AS `LogProba_1`, NULL AS `Decision` 
FROM `RF_AVG_Scores`), 
score_class_union AS 
(SELECT scu.`KEY` AS `KEY`, scu.class AS class, scu.`LogProba` AS `LogProba`, scu.`Proba` AS `Proba`, scu.`Score` AS `Score` 
FROM (SELECT orig_cte.`KEY` AS `KEY`, 0 AS class, orig_cte.`LogProba_0` AS `LogProba`, orig_cte.`Proba_0` AS `Proba`, orig_cte.`Score_0` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 1 AS class, orig_cte.`LogProba_1` AS `LogProba`, orig_cte.`Proba_1` AS `Proba`, orig_cte.`Score_1` AS `Score` 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.`KEY` AS `KEY`, orig_cte.`Score_0` AS `Score_0`, orig_cte.`Score_1` AS `Score_1`, orig_cte.`Proba_0` AS `Proba_0`, orig_cte.`Proba_1` AS `Proba_1`, orig_cte.`LogProba_0` AS `LogProba_0`, orig_cte.`LogProba_1` AS `LogProba_1`, orig_cte.`Decision` AS `Decision`, (SELECT max(score_class_union.`LogProba`) AS max_1 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_LogProba`, (SELECT max(score_class_union.`Proba`) AS max_2 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_Proba`, (SELECT max(score_class_union.`Score`) AS max_3 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_Score` 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`Decision` AS `Decision`, score_max.`max_LogProba` AS `max_LogProba`, score_max.`max_Proba` AS `max_Proba`, score_max.`max_Score` AS `max_Score`, exp(score_max.`Score_0` - score_max.`max_Score`) AS `exp_delta_Score_0`, exp(score_max.`Score_1` - score_max.`max_Score`) AS `exp_delta_Score_1` 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.`KEY` AS `KEY`, soft_scu.class AS class, soft_scu.`LogProba` AS `LogProba`, soft_scu.`Proba` AS `Proba`, soft_scu.`Score` AS `Score`, soft_scu.`exp_delta_Score` AS `exp_delta_Score` 
FROM (SELECT score_soft_max_comp.`KEY` AS `KEY`, 0 AS class, score_soft_max_comp.`LogProba_0` AS `LogProba`, score_soft_max_comp.`Proba_0` AS `Proba`, score_soft_max_comp.`Score_0` AS `Score`, score_soft_max_comp.`exp_delta_Score_0` AS `exp_delta_Score` 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.`KEY` AS `KEY`, 1 AS class, score_soft_max_comp.`LogProba_1` AS `LogProba`, score_soft_max_comp.`Proba_1` AS `Proba`, score_soft_max_comp.`Score_1` AS `Score`, score_soft_max_comp.`exp_delta_Score_1` AS `exp_delta_Score` 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.`KEY` AS `KEY`, score_soft_max_comp.`Score_0` AS `Score_0`, score_soft_max_comp.`Score_1` AS `Score_1`, score_soft_max_comp.`Proba_0` AS `Proba_0`, score_soft_max_comp.`Proba_1` AS `Proba_1`, score_soft_max_comp.`LogProba_0` AS `LogProba_0`, score_soft_max_comp.`LogProba_1` AS `LogProba_1`, score_soft_max_comp.`Decision` AS `Decision`, score_soft_max_comp.`max_LogProba` AS `max_LogProba`, score_soft_max_comp.`max_Proba` AS `max_Proba`, score_soft_max_comp.`max_Score` AS `max_Score`, score_soft_max_comp.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max_comp.`exp_delta_Score_1` AS `exp_delta_Score_1`, (SELECT sum(score_class_union_soft.`exp_delta_Score`) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.`KEY` = score_class_union_soft.`KEY`) AS `sum_ExpDeltaScore` 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.`KEY` AS `KEY`, score_soft_max.`Score_0` AS `Score_0`, score_soft_max.`Score_1` AS `Score_1`, score_soft_max.`Proba_0` AS `Proba_0`, score_soft_max.`Proba_1` AS `Proba_1`, score_soft_max.`LogProba_0` AS `LogProba_0`, score_soft_max.`LogProba_1` AS `LogProba_1`, score_soft_max.`Decision` AS `Decision`, score_soft_max.`max_LogProba` AS `max_LogProba`, score_soft_max.`max_Proba` AS `max_Proba`, score_soft_max.`max_Score` AS `max_Score`, score_soft_max.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore`, (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.`max_LogProba` = score_class_union.`LogProba` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_LogProba`, (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.`max_Proba` = score_class_union.`Proba` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_Proba`, (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.`max_Score` = score_class_union.`Score` AND score_soft_max.`KEY` = score_class_union.`KEY`) AS `arg_max_Score`, score_soft_max.`exp_delta_Score_0` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_0`, score_soft_max.`exp_delta_Score_1` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_1` 
FROM score_soft_max)
 SELECT arg_max_cte.`KEY` AS `KEY`, arg_max_cte.`Score_0` AS `Score_0`, arg_max_cte.`Score_1` AS `Score_1`, arg_max_cte.`SoftProba_0` AS `Proba_0`, arg_max_cte.`SoftProba_1` AS `Proba_1`, CASE WHEN (arg_max_cte.`SoftProba_0` IS NULL OR arg_max_cte.`SoftProba_0` > 0.0) THEN ln(arg_max_cte.`SoftProba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (arg_max_cte.`SoftProba_1` IS NULL OR arg_max_cte.`SoftProba_1` > 0.0) THEN ln(arg_max_cte.`SoftProba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, arg_max_cte.`arg_max_Score` AS `Decision` 
FROM arg_max_cte