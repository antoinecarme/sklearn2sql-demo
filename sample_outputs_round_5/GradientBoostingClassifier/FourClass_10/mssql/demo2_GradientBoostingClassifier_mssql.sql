-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_8] <= -1.6340707540512085) THEN CASE WHEN ([ADS].[Feature_6] <= -4.289246082305908) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_6] <= -1.057225227355957) THEN CASE WHEN ([ADS].[Feature_1] <= 2.317844867706299) THEN 6 ELSE 7 END ELSE CASE WHEN ([ADS].[Feature_8] <= -0.44963812828063965) THEN 9 ELSE 10 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, -1.6340707540512085 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.025135863803845318 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, -4.289246082305908 AS threshold, 7 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5986966313944636 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0113899032567364 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.901957642554825 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_6' AS feature, -1.057225227355957 AS threshold, 60 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.04177955908172682 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 2.317844867706299 AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21299168029384805 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0113899032567362 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9452838696490442 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_8' AS feature, -0.44963812828063965 AS threshold, 38 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05734324793581704 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5975084606176377 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4093364346703424 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[RF_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0_0, [DT_Output].[Estimator] AS [Estimator_0_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_1] <= -0.12445542216300964) THEN CASE WHEN ([ADS].[Feature_5] <= -0.959380030632019) THEN CASE WHEN ([ADS].[Feature_6] <= -1.1915963888168335) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_8] <= -1.4612030982971191) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_7] <= -1.8883426189422607) THEN CASE WHEN ([ADS].[Feature_8] <= -0.4541645646095276) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_9] <= -0.6345788836479187) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, -0.12445542216300964 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.014938964296056059 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, -0.959380030632019 AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18538051414053167 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, -1.1915963888168335 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.07734087506204156 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0066069572980378 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.8936118861504054 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_8' AS feature, -1.4612030982971191 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.253916528715116 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9794130522543696 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0079775689020438 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_7' AS feature, -1.8883426189422607 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16781435573450457 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_8' AS feature, -0.4541645646095276 AS threshold, 12 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24778571235085511 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9882424723807203 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0098077331152413 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_9' AS feature, -0.6345788836479187 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35962977177390126 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0053972629456331 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8554672556960332 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[RF_Tree_0_1] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_0_1, [DT_Output_1].[Estimator] AS [Estimator_0_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_6] <= 0.38818931579589844) THEN CASE WHEN ([ADS].[Feature_1] <= -0.12445542216300964) THEN CASE WHEN ([ADS].[Feature_7] <= 0.19549036026000977) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_2] <= 1.572682499885559) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 1.2865740060806274) THEN CASE WHEN ([ADS].[Feature_0] <= -0.4082495868206024) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_9] <= 0.2527373433113098) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_6' AS feature, 0.38818931579589844 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.017968744222140457 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, -0.12445542216300964 AS threshold, 42 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23989454184160708 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_7' AS feature, 0.19549036026000977 AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24827440360269387 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9779221706188748 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.005117675370075 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, 1.572682499885559 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23297204734331792 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9790977946058711 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9664882777795031 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_2' AS feature, 1.2865740060806274 AS threshold, 25 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35486659577856344 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_0' AS feature, -0.4082495868206024 AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4361947750794164 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.36849805873141966 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.2853432246265286 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_9' AS feature, 0.2527373433113098 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24154005242769205 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.981944089237605 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0030116209792268 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[RF_Tree_0_2] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_0_2, [DT_Output_2].[Estimator] AS [Estimator_0_2] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= 0.37952351570129395) THEN CASE WHEN ([ADS].[Feature_8] <= -1.5993292331695557) THEN CASE WHEN ([ADS].[Feature_3] <= 0.2992396354675293) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_4] <= 1.4905799627304077) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_1] <= 0.6661700010299683) THEN CASE WHEN ([ADS].[Feature_5] <= 1.4735735654830933) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= -0.99370276927948) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.37952351570129395 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.017993852521811664 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_8' AS feature, -1.5993292331695557 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2362291902441685 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.2992396354675293 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2269024581419354 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.963566233338196 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9791609402425404 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_4' AS feature, 1.4905799627304077 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23804272148626934 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9833866466143811 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9983099413526024 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 0.6661700010299683 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.37301112756407756 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_5' AS feature, 1.4735735654830933 AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6257396889180393 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.9100652268761484 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9975484848065549 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, -0.99370276927948 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24075823572411517 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9750565217780426 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9899887560328888 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[RF_Tree_0_3] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_0_3, [DT_Output_3].[Estimator] AS [Estimator_0_3] 
FROM [DT_Output_3]), 
[RF_Join_CTE_0] AS 
(SELECT [RF_Tree_0_0].join_key_0_0 AS join_key_0_0, [RF_Tree_0_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Tree_0_1].join_key_0_1 AS join_key_0_1, [RF_Tree_0_1].[Estimator_0_1] AS [Estimator_0_1], [RF_Tree_0_2].join_key_0_2 AS join_key_0_2, [RF_Tree_0_2].[Estimator_0_2] AS [Estimator_0_2], [RF_Tree_0_3].join_key_0_3 AS join_key_0_3, [RF_Tree_0_3].[Estimator_0_3] AS [Estimator_0_3] 
FROM [RF_Tree_0_0] LEFT OUTER JOIN [RF_Tree_0_1] ON [RF_Tree_0_0].join_key_0_0 = [RF_Tree_0_1].join_key_0_1 LEFT OUTER JOIN [RF_Tree_0_2] ON [RF_Tree_0_2].join_key_0_2 = [RF_Tree_0_1].join_key_0_1 LEFT OUTER JOIN [RF_Tree_0_3] ON [RF_Tree_0_3].join_key_0_3 = [RF_Tree_0_2].join_key_0_2), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_8] <= -1.6340707540512085) THEN CASE WHEN ([ADS].[Feature_6] <= -4.289246082305908) THEN 2 ELSE CASE WHEN ([ADS].[Feature_3] <= 0.2992396354675293) THEN 4 ELSE 5 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 1.4268872737884521) THEN CASE WHEN ([ADS].[Feature_1] <= -3.703618049621582) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_5] <= -2.1659653186798096) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, -1.6340707540512085 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.023040883489310555 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, -4.289246082305908 AS threshold, 7 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5407906882567154 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9842703768576244 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 0.2992396354675293 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6705915115217707 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3492364652308955 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.2091780675350083 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 1.4268872737884521 AS threshold, 60 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.037363260400220005 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_1' AS feature, -3.703618049621582 AS threshold, 53 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.08126580301946779 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.7777975403253286 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 52 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3878807213217099 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'Feature_5' AS feature, -2.1659653186798096 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.29504170514551314 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.5918903561081446 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.06308297575005893 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].count AS count, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[RF_Tree_1_0] AS 
(SELECT [DT_Output_4].[KEY] AS join_key_1_0, [DT_Output_4].[Estimator] AS [Estimator_1_0] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_1] <= -0.12445542216300964) THEN CASE WHEN ([ADS].[Feature_5] <= -0.959380030632019) THEN CASE WHEN ([ADS].[Feature_6] <= -1.1915963888168335) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_8] <= -1.4612030982971191) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_7] <= -1.8883426189422607) THEN CASE WHEN ([ADS].[Feature_8] <= -0.6259065866470337) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_9] <= -0.6345788836479187) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, -0.12445542216300964 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.013218301739663022 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, -0.959380030632019 AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16499279942062484 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, -1.1915963888168335 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.07632059612339585 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9678806141518429 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3343864831553827 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_8' AS feature, -1.4612030982971191 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2279441199973258 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9393194673953164 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9747613985496817 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_7' AS feature, -1.8883426189422607 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14922151051988267 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_8' AS feature, -0.6259065866470337 AS threshold, 12 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2257064536924495 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9577574610754616 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.980391812375169 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_9' AS feature, -0.6345788836479187 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.32226518631018986 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9809008905245595 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.504117392038827 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].count AS count, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[RF_Tree_1_1] AS 
(SELECT [DT_Output_5].[KEY] AS join_key_1_1, [DT_Output_5].[Estimator] AS [Estimator_1_1] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_6] <= 0.8647788763046265) THEN CASE WHEN ([ADS].[Feature_7] <= -2.083280563354492) THEN CASE WHEN ([ADS].[Feature_0] <= 0.734040379524231) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_9] <= -0.8977250456809998) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_3] <= -0.9164518117904663) THEN CASE WHEN ([ADS].[Feature_6] <= 2.368652820587158) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_0] <= -0.4082495868206024) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_6' AS feature, 0.8647788763046265 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.016396409393201323 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_7' AS feature, -2.083280563354492 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18144972369543133 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 0.734040379524231 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3791259108498127 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.387300118721504 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9794925765953361 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_9' AS feature, -0.8977250456809998 AS threshold, 45 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21882143266511428 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0561037240381916 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9572027700596201 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_3' AS feature, -0.9164518117904663 AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4005803846334851 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_6' AS feature, 2.368652820587158 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23248145344699575 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0124271911605665 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.960791715482653 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_0' AS feature, -0.4082495868206024 AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5192794792735753 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5627960635650865 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.422584485351186 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].count AS count, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[RF_Tree_1_2] AS 
(SELECT [DT_Output_6].[KEY] AS join_key_1_2, [DT_Output_6].[Estimator] AS [Estimator_1_2] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= 0.37952351570129395) THEN CASE WHEN ([ADS].[Feature_8] <= -1.5993292331695557) THEN CASE WHEN ([ADS].[Feature_3] <= 0.2992396354675293) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_8] <= -0.7965303659439087) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_1] <= 0.6661700010299683) THEN CASE WHEN ([ADS].[Feature_5] <= 1.4735735654830933) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= -0.99370276927948) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.37952351570129395 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.016788943096065094 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_8' AS feature, -1.5993292331695557 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2136687023957299 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.2992396354675293 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1989525715546627 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9287264930445397 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9468538695250025 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_8' AS feature, -0.7965303659439087 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.216530172281493 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9723918396755519 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9554848113459052 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 0.6661700010299683 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.33595395898250097 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_5' AS feature, 1.4735735654830933 AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5644856634570059 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.268269090681313 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9613812391211345 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, -0.99370276927948 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2190516090270108 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9495262639652309 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.962208817394332 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].count AS count, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[RF_Tree_1_3] AS 
(SELECT [DT_Output_7].[KEY] AS join_key_1_3, [DT_Output_7].[Estimator] AS [Estimator_1_3] 
FROM [DT_Output_7]), 
[RF_Join_CTE_1] AS 
(SELECT [RF_Tree_1_0].join_key_1_0 AS join_key_1_0, [RF_Tree_1_0].[Estimator_1_0] AS [Estimator_1_0], [RF_Tree_1_1].join_key_1_1 AS join_key_1_1, [RF_Tree_1_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Tree_1_2].join_key_1_2 AS join_key_1_2, [RF_Tree_1_2].[Estimator_1_2] AS [Estimator_1_2], [RF_Tree_1_3].join_key_1_3 AS join_key_1_3, [RF_Tree_1_3].[Estimator_1_3] AS [Estimator_1_3] 
FROM [RF_Tree_1_0] LEFT OUTER JOIN [RF_Tree_1_1] ON [RF_Tree_1_0].join_key_1_0 = [RF_Tree_1_1].join_key_1_1 LEFT OUTER JOIN [RF_Tree_1_2] ON [RF_Tree_1_2].join_key_1_2 = [RF_Tree_1_1].join_key_1_1 LEFT OUTER JOIN [RF_Tree_1_3] ON [RF_Tree_1_3].join_key_1_3 = [RF_Tree_1_2].join_key_1_2), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_8] <= -1.6340707540512085) THEN CASE WHEN ([ADS].[Feature_1] <= 1.9446179866790771) THEN CASE WHEN ([ADS].[Feature_3] <= 0.2992396354675293) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_8] <= -0.35687577724456787) THEN CASE WHEN ([ADS].[Feature_7] <= 0.21899190545082092) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_7] <= -3.494076728820801) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, -1.6340707540512085 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.021641744805688 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 1.9446179866790771 AS threshold, 7 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4849679809236654 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.2992396354675293 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6022112127608578 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.964322080588682 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8135920451410759 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9596823498708799 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_8' AS feature, -0.35687577724456787 AS threshold, 60 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.032412982741409316 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_7' AS feature, 0.21899190545082092 AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.08516455420780224 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2591765584090178 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6835045292859651 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'Feature_7' AS feature, -3.494076728820801 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1424048721455105 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.170722718571594 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7064190666803137 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].count AS count, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[RF_Tree_2_0] AS 
(SELECT [DT_Output_8].[KEY] AS join_key_2_0, [DT_Output_8].[Estimator] AS [Estimator_2_0] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_1] <= -0.12445542216300964) THEN CASE WHEN ([ADS].[Feature_5] <= -0.959380030632019) THEN CASE WHEN ([ADS].[Feature_6] <= -1.1915963888168335) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_8] <= -1.4612030982971191) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_7] <= -1.8883426189422607) THEN CASE WHEN ([ADS].[Feature_5] <= -0.12174220383167267) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_9] <= -0.6345788836479187) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, -0.12445542216300964 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.011413679084973177 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, -0.959380030632019 AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14811716582568266 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, -1.1915963888168335 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.06901137694006167 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9366287047923562 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9002451071689446 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_8' AS feature, -1.4612030982971191 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2047593943732681 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9142251053282114 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9464476331870708 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_7' AS feature, -1.8883426189422607 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.13316090283257892 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_5' AS feature, -0.12174220383167267 AS threshold, 12 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20006326046056713 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9329710031842119 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9671384040719595 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_9' AS feature, -0.6345788836479187 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.28695667050633855 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9557747715403627 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2514084628076334 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].count AS count, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[RF_Tree_2_1] AS 
(SELECT [DT_Output_9].[KEY] AS join_key_2_1, [DT_Output_9].[Estimator] AS [Estimator_2_1] 
FROM [DT_Output_9]), 
[DT_node_lookup_10] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_6] <= 0.8647788763046265) THEN CASE WHEN ([ADS].[Feature_7] <= -2.083280563354492) THEN CASE WHEN ([ADS].[Feature_6] <= 0.06611804664134979) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_9] <= -1.1529297828674316) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_3] <= -0.9164518117904663) THEN CASE WHEN ([ADS].[Feature_8] <= -0.5417325496673584) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_0] <= -0.4082495868206024) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_6' AS feature, 0.8647788763046265 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.01478623450505918 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_7' AS feature, -2.083280563354492 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16274972470430424 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, 0.06611804664134979 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.34759724742186054 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.95796330327438 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0267004279083216 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_9' AS feature, -1.1529297828674316 AS threshold, 45 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19677285617938184 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0622938822549857 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9326944284335748 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_3' AS feature, -0.9164518117904663 AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35901626705092804 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_8' AS feature, -0.5417325496673584 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21210295572627394 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9873655981375121 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9352093324569278 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_0' AS feature, -0.4082495868206024 AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4661011213216535 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.468287906797045 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.984449336664651 AS [Estimator]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].count AS count, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[RF_Tree_2_2] AS 
(SELECT [DT_Output_10].[KEY] AS join_key_2_2, [DT_Output_10].[Estimator] AS [Estimator_2_2] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= 0.37952351570129395) THEN CASE WHEN ([ADS].[Feature_8] <= -1.5993292331695557) THEN CASE WHEN ([ADS].[Feature_3] <= 0.2992396354675293) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_0] <= -0.4078739285469055) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_1] <= 0.6661700010299683) THEN CASE WHEN ([ADS].[Feature_5] <= 1.4735735654830933) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= -0.99370276927948) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.37952351570129395 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.015777061246668524 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_8' AS feature, -1.5993292331695557 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19168393491522603 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.2992396354675293 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1730819797790399 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8983921260793004 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9191667337613292 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, -0.4078739285469055 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19530098174726226 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.944597438811128 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9284708735558529 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 0.6661700010299683 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2993894207428303 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_5' AS feature, 1.4735735654830933 AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5051382340592477 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8795691741256397 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9474358095258041 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, -0.99370276927948 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20028626873989733 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9289566980822629 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9393424345858197 AS [Estimator]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].count AS count, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[RF_Tree_2_3] AS 
(SELECT [DT_Output_11].[KEY] AS join_key_2_3, [DT_Output_11].[Estimator] AS [Estimator_2_3] 
FROM [DT_Output_11]), 
[RF_Join_CTE_2] AS 
(SELECT [RF_Tree_2_0].join_key_2_0 AS join_key_2_0, [RF_Tree_2_0].[Estimator_2_0] AS [Estimator_2_0], [RF_Tree_2_1].join_key_2_1 AS join_key_2_1, [RF_Tree_2_1].[Estimator_2_1] AS [Estimator_2_1], [RF_Tree_2_2].join_key_2_2 AS join_key_2_2, [RF_Tree_2_2].[Estimator_2_2] AS [Estimator_2_2], [RF_Tree_2_3].join_key_2_3 AS join_key_2_3, [RF_Tree_2_3].[Estimator_2_3] AS [Estimator_2_3] 
FROM [RF_Tree_2_0] LEFT OUTER JOIN [RF_Tree_2_1] ON [RF_Tree_2_0].join_key_2_0 = [RF_Tree_2_1].join_key_2_1 LEFT OUTER JOIN [RF_Tree_2_2] ON [RF_Tree_2_2].join_key_2_2 = [RF_Tree_2_1].join_key_2_1 LEFT OUTER JOIN [RF_Tree_2_3] ON [RF_Tree_2_3].join_key_2_3 = [RF_Tree_2_2].join_key_2_2), 
[DT_node_lookup_12] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_8] <= -0.7453334331512451) THEN CASE WHEN ([ADS].[Feature_4] <= 0.66396164894104) THEN CASE WHEN ([ADS].[Feature_9] <= 0.7439520955085754) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_9] <= -0.957434356212616) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_1] <= 2.7153282165527344) THEN CASE WHEN ([ADS].[Feature_1] <= -2.3707988262176514) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_4] <= 0.21574142575263977) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_8' AS feature, -0.7453334331512451 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.020430689347935717 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_4' AS feature, 0.66396164894104 AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.222895767974898 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_9' AS feature, 0.7439520955085754 AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3797068542710071 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9461208308685152 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4569414392559723 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_9' AS feature, -0.957434356212616 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.11312798837390727 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6339749983680507 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9750589155655082 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 2.7153282165527344 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.07855223798080137 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_1' AS feature, -2.3707988262176514 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.11150488970349208 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4049199658400635 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 40 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.6472625884053139 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_4' AS feature, 0.21574142575263977 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6299297740570486 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0085663219656085 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.045046723847789 AS [Estimator]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].count AS count, [DT_node_data_12].depth AS depth, [DT_node_data_12].parent_id AS parent_id, [DT_node_data_12].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[RF_Tree_3_0] AS 
(SELECT [DT_Output_12].[KEY] AS join_key_3_0, [DT_Output_12].[Estimator] AS [Estimator_3_0] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_1] <= -0.12445542216300964) THEN CASE WHEN ([ADS].[Feature_5] <= -0.959380030632019) THEN CASE WHEN ([ADS].[Feature_6] <= -1.1915963888168335) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_8] <= -1.4612030982971191) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_7] <= -1.8883426189422607) THEN CASE WHEN ([ADS].[Feature_4] <= -0.5128843188285828) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_9] <= -0.6345788836479187) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_1' AS feature, -0.12445542216300964 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00994938438332882 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, -0.959380030632019 AS threshold, 29 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1304029878641078 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, -1.1915963888168335 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.06296869883196154 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9090255492011978 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.625195964344565 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_8' AS feature, -1.4612030982971191 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18084777569786506 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8902842227713421 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9187939161579611 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_7' AS feature, -1.8883426189422607 AS threshold, 38 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.11706040530900419 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_4' AS feature, -0.5128843188285828 AS threshold, 12 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18178945069984406 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9617495395192874 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9143309992399422 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_9' AS feature, -0.6345788836479187 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2549911080823188 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9366581420712397 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0693810729342184 AS [Estimator]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].count AS count, [DT_node_data_13].depth AS depth, [DT_node_data_13].parent_id AS parent_id, [DT_node_data_13].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[RF_Tree_3_1] AS 
(SELECT [DT_Output_13].[KEY] AS join_key_3_1, [DT_Output_13].[Estimator] AS [Estimator_3_1] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_6] <= 0.8647788763046265) THEN CASE WHEN ([ADS].[Feature_7] <= -2.083280563354492) THEN CASE WHEN ([ADS].[Feature_8] <= -0.4541645646095276) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_9] <= -1.1529297828674316) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_6] <= 2.272359848022461) THEN CASE WHEN ([ADS].[Feature_0] <= -0.6027570962905884) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_1] <= -0.227467879652977) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_6' AS feature, 0.8647788763046265 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.013777844274791104 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_7' AS feature, -2.083280563354492 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14528616520771273 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_8' AS feature, -0.4541645646095276 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3102334919808432 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9292414039988142 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7115287012632519 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_9' AS feature, -1.1529297828674316 AS threshold, 45 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1756541423536165 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0281414837259988 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.909079831295214 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_6' AS feature, 2.272359848022461 AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3184537033452215 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_0' AS feature, -0.6027570962905884 AS threshold, 8 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5885541857002525 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.2592220411456974 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.715183613636467 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_1' AS feature, -0.227467879652977 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.12201698890519888 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6588175795678484 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.48888455328479397 AS [Estimator]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].count AS count, [DT_node_data_14].depth AS depth, [DT_node_data_14].parent_id AS parent_id, [DT_node_data_14].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[RF_Tree_3_2] AS 
(SELECT [DT_Output_14].[KEY] AS join_key_3_2, [DT_Output_14].[Estimator] AS [Estimator_3_2] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= 0.37952351570129395) THEN CASE WHEN ([ADS].[Feature_8] <= -1.5993292331695557) THEN CASE WHEN ([ADS].[Feature_3] <= 0.2992396354675293) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_2] <= 1.756762981414795) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_1] <= 0.6661700010299683) THEN CASE WHEN ([ADS].[Feature_9] <= -0.3508666455745697) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= -0.99370276927948) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [FourClass_10] AS [ADS]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.37952351570129395 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.014479785460872056 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_8' AS feature, -1.5993292331695557 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17233622785836997 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.2992396354675293 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15325814260126486 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8782024692265973 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8966504361756551 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, 1.756762981414795 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17604585554725147 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9136288457484062 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8678473972272798 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 0.6661700010299683 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2683463405013116 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_9' AS feature, -0.3508666455745697 AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4532801145125503 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9238022578401164 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6320911600434476 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, -0.99370276927948 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18077853924026774 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8981999073429409 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.918488835195238 AS [Estimator]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].count AS count, [DT_node_data_15].depth AS depth, [DT_node_data_15].parent_id AS parent_id, [DT_node_data_15].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[RF_Tree_3_3] AS 
(SELECT [DT_Output_15].[KEY] AS join_key_3_3, [DT_Output_15].[Estimator] AS [Estimator_3_3] 
FROM [DT_Output_15]), 
[RF_Join_CTE_3] AS 
(SELECT [RF_Tree_3_0].join_key_3_0 AS join_key_3_0, [RF_Tree_3_0].[Estimator_3_0] AS [Estimator_3_0], [RF_Tree_3_1].join_key_3_1 AS join_key_3_1, [RF_Tree_3_1].[Estimator_3_1] AS [Estimator_3_1], [RF_Tree_3_2].join_key_3_2 AS join_key_3_2, [RF_Tree_3_2].[Estimator_3_2] AS [Estimator_3_2], [RF_Tree_3_3].join_key_3_3 AS join_key_3_3, [RF_Tree_3_3].[Estimator_3_3] AS [Estimator_3_3] 
FROM [RF_Tree_3_0] LEFT OUTER JOIN [RF_Tree_3_1] ON [RF_Tree_3_0].join_key_3_0 = [RF_Tree_3_1].join_key_3_1 LEFT OUTER JOIN [RF_Tree_3_2] ON [RF_Tree_3_2].join_key_3_2 = [RF_Tree_3_1].join_key_3_1 LEFT OUTER JOIN [RF_Tree_3_3] ON [RF_Tree_3_3].join_key_3_3 = [RF_Tree_3_2].join_key_3_2), 
[RF_Join_CTE] AS 
(SELECT [RF_Join_CTE_0].join_key_0_0 AS join_key_0_0, [RF_Join_CTE_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Join_CTE_0].join_key_0_1 AS join_key_0_1, [RF_Join_CTE_0].[Estimator_0_1] AS [Estimator_0_1], [RF_Join_CTE_0].join_key_0_2 AS join_key_0_2, [RF_Join_CTE_0].[Estimator_0_2] AS [Estimator_0_2], [RF_Join_CTE_0].join_key_0_3 AS join_key_0_3, [RF_Join_CTE_0].[Estimator_0_3] AS [Estimator_0_3], [RF_Join_CTE_1].join_key_1_0 AS join_key_1_0, [RF_Join_CTE_1].[Estimator_1_0] AS [Estimator_1_0], [RF_Join_CTE_1].join_key_1_1 AS join_key_1_1, [RF_Join_CTE_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Join_CTE_1].join_key_1_2 AS join_key_1_2, [RF_Join_CTE_1].[Estimator_1_2] AS [Estimator_1_2], [RF_Join_CTE_1].join_key_1_3 AS join_key_1_3, [RF_Join_CTE_1].[Estimator_1_3] AS [Estimator_1_3], [RF_Join_CTE_2].join_key_2_0 AS join_key_2_0, [RF_Join_CTE_2].[Estimator_2_0] AS [Estimator_2_0], [RF_Join_CTE_2].join_key_2_1 AS join_key_2_1, [RF_Join_CTE_2].[Estimator_2_1] AS [Estimator_2_1], [RF_Join_CTE_2].join_key_2_2 AS join_key_2_2, [RF_Join_CTE_2].[Estimator_2_2] AS [Estimator_2_2], [RF_Join_CTE_2].join_key_2_3 AS join_key_2_3, [RF_Join_CTE_2].[Estimator_2_3] AS [Estimator_2_3], [RF_Join_CTE_3].join_key_3_0 AS join_key_3_0, [RF_Join_CTE_3].[Estimator_3_0] AS [Estimator_3_0], [RF_Join_CTE_3].join_key_3_1 AS join_key_3_1, [RF_Join_CTE_3].[Estimator_3_1] AS [Estimator_3_1], [RF_Join_CTE_3].join_key_3_2 AS join_key_3_2, [RF_Join_CTE_3].[Estimator_3_2] AS [Estimator_3_2], [RF_Join_CTE_3].join_key_3_3 AS join_key_3_3, [RF_Join_CTE_3].[Estimator_3_3] AS [Estimator_3_3] 
FROM [RF_Join_CTE_0] LEFT OUTER JOIN [RF_Join_CTE_1] ON [RF_Join_CTE_0].join_key_0_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_2] ON [RF_Join_CTE_2].join_key_2_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_3] ON [RF_Join_CTE_3].join_key_3_0 = [RF_Join_CTE_2].join_key_2_0), 
[RF_AVG_Scores] AS 
(SELECT [RF_Join_CTE].join_key_0_0 AS [KEY], 0.283582089552 + 0.1 * [RF_Join_CTE].[Estimator_0_0] + 0.1 * [RF_Join_CTE].[Estimator_1_0] + 0.1 * [RF_Join_CTE].[Estimator_2_0] + 0.1 * [RF_Join_CTE].[Estimator_3_0] AS [Score_0], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [LogProba_0], 0.268656716418 + 0.1 * [RF_Join_CTE].[Estimator_0_1] + 0.1 * [RF_Join_CTE].[Estimator_1_1] + 0.1 * [RF_Join_CTE].[Estimator_2_1] + 0.1 * [RF_Join_CTE].[Estimator_3_1] AS [Score_1], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_1], 0.223880597015 + 0.1 * [RF_Join_CTE].[Estimator_0_2] + 0.1 * [RF_Join_CTE].[Estimator_1_2] + 0.1 * [RF_Join_CTE].[Estimator_2_2] + 0.1 * [RF_Join_CTE].[Estimator_3_2] AS [Score_2], CAST(NULL AS FLOAT) AS [Proba_2], CAST(NULL AS FLOAT) AS [LogProba_2], 0.223880597015 + 0.1 * [RF_Join_CTE].[Estimator_0_3] + 0.1 * [RF_Join_CTE].[Estimator_1_3] + 0.1 * [RF_Join_CTE].[Estimator_2_3] + 0.1 * [RF_Join_CTE].[Estimator_3_3] AS [Score_3], CAST(NULL AS FLOAT) AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_3] 
FROM [RF_Join_CTE]), 
orig_cte AS 
(SELECT [RF_AVG_Scores].[KEY] AS [KEY], [RF_AVG_Scores].[Score_0] AS [Score_0], [RF_AVG_Scores].[Score_1] AS [Score_1], [RF_AVG_Scores].[Score_2] AS [Score_2], [RF_AVG_Scores].[Score_3] AS [Score_3], [RF_AVG_Scores].[Proba_0] AS [Proba_0], [RF_AVG_Scores].[Proba_1] AS [Proba_1], [RF_AVG_Scores].[Proba_2] AS [Proba_2], [RF_AVG_Scores].[Proba_3] AS [Proba_3], [RF_AVG_Scores].[LogProba_0] AS [LogProba_0], [RF_AVG_Scores].[LogProba_1] AS [LogProba_1], [RF_AVG_Scores].[LogProba_2] AS [LogProba_2], [RF_AVG_Scores].[LogProba_3] AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RF_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte