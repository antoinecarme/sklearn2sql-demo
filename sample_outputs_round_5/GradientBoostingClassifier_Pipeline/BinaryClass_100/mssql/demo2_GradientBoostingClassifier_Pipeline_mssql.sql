-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.110270932138 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN -0.13969813933 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.0259007156772 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN -0.0398913719503 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.0848622578895 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.0269473790722 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.204407949334 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN -0.0355973243882 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN -0.162891245149 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.0579719045878 ELSE [ADS].[Feature_9] END AS impter_11, CASE WHEN ([ADS].[Feature_10] IS NULL) THEN -0.107042830978 ELSE [ADS].[Feature_10] END AS impter_12, CASE WHEN ([ADS].[Feature_11] IS NULL) THEN 0.087037550793 ELSE [ADS].[Feature_11] END AS impter_13, CASE WHEN ([ADS].[Feature_12] IS NULL) THEN -0.0827884919927 ELSE [ADS].[Feature_12] END AS impter_14, CASE WHEN ([ADS].[Feature_13] IS NULL) THEN 0.0649617038636 ELSE [ADS].[Feature_13] END AS impter_15, CASE WHEN ([ADS].[Feature_14] IS NULL) THEN -0.0509792972425 ELSE [ADS].[Feature_14] END AS impter_16, CASE WHEN ([ADS].[Feature_15] IS NULL) THEN -0.165893729243 ELSE [ADS].[Feature_15] END AS impter_17, CASE WHEN ([ADS].[Feature_16] IS NULL) THEN 0.0163478867288 ELSE [ADS].[Feature_16] END AS impter_18, CASE WHEN ([ADS].[Feature_17] IS NULL) THEN 0.226926405439 ELSE [ADS].[Feature_17] END AS impter_19, CASE WHEN ([ADS].[Feature_18] IS NULL) THEN 0.248440255401 ELSE [ADS].[Feature_18] END AS impter_20, CASE WHEN ([ADS].[Feature_19] IS NULL) THEN -0.221026074426 ELSE [ADS].[Feature_19] END AS impter_21, CASE WHEN ([ADS].[Feature_20] IS NULL) THEN -0.014609726647 ELSE [ADS].[Feature_20] END AS impter_22, CASE WHEN ([ADS].[Feature_21] IS NULL) THEN -0.00852070556839 ELSE [ADS].[Feature_21] END AS impter_23, CASE WHEN ([ADS].[Feature_22] IS NULL) THEN -0.230548813704 ELSE [ADS].[Feature_22] END AS impter_24, CASE WHEN ([ADS].[Feature_23] IS NULL) THEN 0.136729154751 ELSE [ADS].[Feature_23] END AS impter_25, CASE WHEN ([ADS].[Feature_24] IS NULL) THEN 0.0145112318386 ELSE [ADS].[Feature_24] END AS impter_26, CASE WHEN ([ADS].[Feature_25] IS NULL) THEN 0.0847898650667 ELSE [ADS].[Feature_25] END AS impter_27, CASE WHEN ([ADS].[Feature_26] IS NULL) THEN 0.21673833509 ELSE [ADS].[Feature_26] END AS impter_28, CASE WHEN ([ADS].[Feature_27] IS NULL) THEN -0.150475392817 ELSE [ADS].[Feature_27] END AS impter_29, CASE WHEN ([ADS].[Feature_28] IS NULL) THEN -0.12977616601 ELSE [ADS].[Feature_28] END AS impter_30, CASE WHEN ([ADS].[Feature_29] IS NULL) THEN 0.15035209987 ELSE [ADS].[Feature_29] END AS impter_31, CASE WHEN ([ADS].[Feature_30] IS NULL) THEN -0.182031366172 ELSE [ADS].[Feature_30] END AS impter_32, CASE WHEN ([ADS].[Feature_31] IS NULL) THEN -0.0945499812264 ELSE [ADS].[Feature_31] END AS impter_33, CASE WHEN ([ADS].[Feature_32] IS NULL) THEN 0.0324055051984 ELSE [ADS].[Feature_32] END AS impter_34, CASE WHEN ([ADS].[Feature_33] IS NULL) THEN -0.119163927171 ELSE [ADS].[Feature_33] END AS impter_35, CASE WHEN ([ADS].[Feature_34] IS NULL) THEN -0.04417233911 ELSE [ADS].[Feature_34] END AS impter_36, CASE WHEN ([ADS].[Feature_35] IS NULL) THEN 0.0551624335424 ELSE [ADS].[Feature_35] END AS impter_37, CASE WHEN ([ADS].[Feature_36] IS NULL) THEN -0.0425437418656 ELSE [ADS].[Feature_36] END AS impter_38, CASE WHEN ([ADS].[Feature_37] IS NULL) THEN 0.208833802555 ELSE [ADS].[Feature_37] END AS impter_39, CASE WHEN ([ADS].[Feature_38] IS NULL) THEN 0.0282809943746 ELSE [ADS].[Feature_38] END AS impter_40, CASE WHEN ([ADS].[Feature_39] IS NULL) THEN -0.236420707726 ELSE [ADS].[Feature_39] END AS impter_41, CASE WHEN ([ADS].[Feature_40] IS NULL) THEN 0.0244088612391 ELSE [ADS].[Feature_40] END AS impter_42, CASE WHEN ([ADS].[Feature_41] IS NULL) THEN 0.0703998925583 ELSE [ADS].[Feature_41] END AS impter_43, CASE WHEN ([ADS].[Feature_42] IS NULL) THEN -0.231895914345 ELSE [ADS].[Feature_42] END AS impter_44, CASE WHEN ([ADS].[Feature_43] IS NULL) THEN 0.0934159387948 ELSE [ADS].[Feature_43] END AS impter_45, CASE WHEN ([ADS].[Feature_44] IS NULL) THEN -0.0353028371461 ELSE [ADS].[Feature_44] END AS impter_46, CASE WHEN ([ADS].[Feature_45] IS NULL) THEN -0.0212446699903 ELSE [ADS].[Feature_45] END AS impter_47, CASE WHEN ([ADS].[Feature_46] IS NULL) THEN 0.0591700583515 ELSE [ADS].[Feature_46] END AS impter_48, CASE WHEN ([ADS].[Feature_47] IS NULL) THEN -0.0448201844816 ELSE [ADS].[Feature_47] END AS impter_49, CASE WHEN ([ADS].[Feature_48] IS NULL) THEN 0.089686699906 ELSE [ADS].[Feature_48] END AS impter_50, CASE WHEN ([ADS].[Feature_49] IS NULL) THEN 0.117266139897 ELSE [ADS].[Feature_49] END AS impter_51, CASE WHEN ([ADS].[Feature_50] IS NULL) THEN -0.00660065345156 ELSE [ADS].[Feature_50] END AS impter_52, CASE WHEN ([ADS].[Feature_51] IS NULL) THEN 0.0529707854122 ELSE [ADS].[Feature_51] END AS impter_53, CASE WHEN ([ADS].[Feature_52] IS NULL) THEN -0.0404274763987 ELSE [ADS].[Feature_52] END AS impter_54, CASE WHEN ([ADS].[Feature_53] IS NULL) THEN -0.0609562104788 ELSE [ADS].[Feature_53] END AS impter_55, CASE WHEN ([ADS].[Feature_54] IS NULL) THEN 0.161917024968 ELSE [ADS].[Feature_54] END AS impter_56, CASE WHEN ([ADS].[Feature_55] IS NULL) THEN 0.123810428903 ELSE [ADS].[Feature_55] END AS impter_57, CASE WHEN ([ADS].[Feature_56] IS NULL) THEN 0.0430460094255 ELSE [ADS].[Feature_56] END AS impter_58, CASE WHEN ([ADS].[Feature_57] IS NULL) THEN 0.0636416333231 ELSE [ADS].[Feature_57] END AS impter_59, CASE WHEN ([ADS].[Feature_58] IS NULL) THEN 0.0527484912773 ELSE [ADS].[Feature_58] END AS impter_60, CASE WHEN ([ADS].[Feature_59] IS NULL) THEN 0.106182694384 ELSE [ADS].[Feature_59] END AS impter_61, CASE WHEN ([ADS].[Feature_60] IS NULL) THEN 0.213789410331 ELSE [ADS].[Feature_60] END AS impter_62, CASE WHEN ([ADS].[Feature_61] IS NULL) THEN -0.104969032022 ELSE [ADS].[Feature_61] END AS impter_63, CASE WHEN ([ADS].[Feature_62] IS NULL) THEN 0.149640436869 ELSE [ADS].[Feature_62] END AS impter_64, CASE WHEN ([ADS].[Feature_63] IS NULL) THEN 0.0307331027809 ELSE [ADS].[Feature_63] END AS impter_65, CASE WHEN ([ADS].[Feature_64] IS NULL) THEN 0.031404408496 ELSE [ADS].[Feature_64] END AS impter_66, CASE WHEN ([ADS].[Feature_65] IS NULL) THEN 0.0610458187476 ELSE [ADS].[Feature_65] END AS impter_67, CASE WHEN ([ADS].[Feature_66] IS NULL) THEN 0.216220924085 ELSE [ADS].[Feature_66] END AS impter_68, CASE WHEN ([ADS].[Feature_67] IS NULL) THEN 0.0582456737026 ELSE [ADS].[Feature_67] END AS impter_69, CASE WHEN ([ADS].[Feature_68] IS NULL) THEN -0.033096364249 ELSE [ADS].[Feature_68] END AS impter_70, CASE WHEN ([ADS].[Feature_69] IS NULL) THEN 0.051907212156 ELSE [ADS].[Feature_69] END AS impter_71, CASE WHEN ([ADS].[Feature_70] IS NULL) THEN -0.111703766477 ELSE [ADS].[Feature_70] END AS impter_72, CASE WHEN ([ADS].[Feature_71] IS NULL) THEN 0.0924957707948 ELSE [ADS].[Feature_71] END AS impter_73, CASE WHEN ([ADS].[Feature_72] IS NULL) THEN -0.0789458797811 ELSE [ADS].[Feature_72] END AS impter_74, CASE WHEN ([ADS].[Feature_73] IS NULL) THEN 0.0314526001428 ELSE [ADS].[Feature_73] END AS impter_75, CASE WHEN ([ADS].[Feature_74] IS NULL) THEN -0.105436189986 ELSE [ADS].[Feature_74] END AS impter_76, CASE WHEN ([ADS].[Feature_75] IS NULL) THEN 0.312853208981 ELSE [ADS].[Feature_75] END AS impter_77, CASE WHEN ([ADS].[Feature_76] IS NULL) THEN 0.070878148908 ELSE [ADS].[Feature_76] END AS impter_78, CASE WHEN ([ADS].[Feature_77] IS NULL) THEN -0.0496251899775 ELSE [ADS].[Feature_77] END AS impter_79, CASE WHEN ([ADS].[Feature_78] IS NULL) THEN -0.191899741432 ELSE [ADS].[Feature_78] END AS impter_80, CASE WHEN ([ADS].[Feature_79] IS NULL) THEN 0.109665114311 ELSE [ADS].[Feature_79] END AS impter_81, CASE WHEN ([ADS].[Feature_80] IS NULL) THEN -0.00685172937593 ELSE [ADS].[Feature_80] END AS impter_82, CASE WHEN ([ADS].[Feature_81] IS NULL) THEN 0.170320288707 ELSE [ADS].[Feature_81] END AS impter_83, CASE WHEN ([ADS].[Feature_82] IS NULL) THEN 0.0559306924962 ELSE [ADS].[Feature_82] END AS impter_84, CASE WHEN ([ADS].[Feature_83] IS NULL) THEN 0.093294281383 ELSE [ADS].[Feature_83] END AS impter_85, CASE WHEN ([ADS].[Feature_84] IS NULL) THEN -0.0689501895114 ELSE [ADS].[Feature_84] END AS impter_86, CASE WHEN ([ADS].[Feature_85] IS NULL) THEN -0.260792492717 ELSE [ADS].[Feature_85] END AS impter_87, CASE WHEN ([ADS].[Feature_86] IS NULL) THEN 0.215200875191 ELSE [ADS].[Feature_86] END AS impter_88, CASE WHEN ([ADS].[Feature_87] IS NULL) THEN -0.0601968371047 ELSE [ADS].[Feature_87] END AS impter_89, CASE WHEN ([ADS].[Feature_88] IS NULL) THEN -0.127643131778 ELSE [ADS].[Feature_88] END AS impter_90, CASE WHEN ([ADS].[Feature_89] IS NULL) THEN -0.0218224721407 ELSE [ADS].[Feature_89] END AS impter_91, CASE WHEN ([ADS].[Feature_90] IS NULL) THEN -0.26136727385 ELSE [ADS].[Feature_90] END AS impter_92, CASE WHEN ([ADS].[Feature_91] IS NULL) THEN 0.185993166701 ELSE [ADS].[Feature_91] END AS impter_93, CASE WHEN ([ADS].[Feature_92] IS NULL) THEN 0.0225468576615 ELSE [ADS].[Feature_92] END AS impter_94, CASE WHEN ([ADS].[Feature_93] IS NULL) THEN 0.212796657064 ELSE [ADS].[Feature_93] END AS impter_95, CASE WHEN ([ADS].[Feature_94] IS NULL) THEN 0.0263994551354 ELSE [ADS].[Feature_94] END AS impter_96, CASE WHEN ([ADS].[Feature_95] IS NULL) THEN -0.0898834256559 ELSE [ADS].[Feature_95] END AS impter_97, CASE WHEN ([ADS].[Feature_96] IS NULL) THEN 0.0653244213397 ELSE [ADS].[Feature_96] END AS impter_98, CASE WHEN ([ADS].[Feature_97] IS NULL) THEN 0.0317908155281 ELSE [ADS].[Feature_97] END AS impter_99, CASE WHEN ([ADS].[Feature_98] IS NULL) THEN 0.0898810892448 ELSE [ADS].[Feature_98] END AS impter_100, CASE WHEN ([ADS].[Feature_99] IS NULL) THEN -0.11693699491 ELSE [ADS].[Feature_99] END AS impter_101 
FROM [BinaryClass_100] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.110270932138) / 0.884565687249 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - -0.13969813933) / 0.953514932398 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.0259007156772) / 0.979636681902 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - -0.0398913719503) / 1.11743246865 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.0848622578895) / 0.998461485955 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.0269473790722) / 0.928880461126 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.204407949334) / 1.01208730184 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - -0.0355973243882) / 1.03645805418 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - -0.162891245149) / 0.907586286525 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.0579719045878) / 0.912564448828 AS scaler_11, (CAST([ADS_imp_1_OUT].impter_12 AS FLOAT) - -0.107042830978) / 1.04093461198 AS scaler_12, (CAST([ADS_imp_1_OUT].impter_13 AS FLOAT) - 0.087037550793) / 0.997480363373 AS scaler_13, (CAST([ADS_imp_1_OUT].impter_14 AS FLOAT) - -0.0827884919927) / 0.95280914211 AS scaler_14, (CAST([ADS_imp_1_OUT].impter_15 AS FLOAT) - 0.0649617038636) / 1.00718289478 AS scaler_15, (CAST([ADS_imp_1_OUT].impter_16 AS FLOAT) - -0.0509792972425) / 0.94335939774 AS scaler_16, (CAST([ADS_imp_1_OUT].impter_17 AS FLOAT) - -0.165893729243) / 1.08135936278 AS scaler_17, (CAST([ADS_imp_1_OUT].impter_18 AS FLOAT) - 0.0163478867288) / 1.03891657816 AS scaler_18, (CAST([ADS_imp_1_OUT].impter_19 AS FLOAT) - 0.226926405439) / 1.1099113538 AS scaler_19, (CAST([ADS_imp_1_OUT].impter_20 AS FLOAT) - 0.248440255401) / 0.918230042657 AS scaler_20, (CAST([ADS_imp_1_OUT].impter_21 AS FLOAT) - -0.221026074426) / 0.934080718115 AS scaler_21, (CAST([ADS_imp_1_OUT].impter_22 AS FLOAT) - -0.014609726647) / 0.99033459972 AS scaler_22, (CAST([ADS_imp_1_OUT].impter_23 AS FLOAT) - -0.00852070556839) / 0.97331542988 AS scaler_23, (CAST([ADS_imp_1_OUT].impter_24 AS FLOAT) - -0.230548813704) / 0.927422817256 AS scaler_24, (CAST([ADS_imp_1_OUT].impter_25 AS FLOAT) - 0.136729154751) / 1.02850635577 AS scaler_25, (CAST([ADS_imp_1_OUT].impter_26 AS FLOAT) - 0.0145112318386) / 0.960206484352 AS scaler_26, (CAST([ADS_imp_1_OUT].impter_27 AS FLOAT) - 0.0847898650667) / 1.11220909608 AS scaler_27, (CAST([ADS_imp_1_OUT].impter_28 AS FLOAT) - 0.21673833509) / 0.946973553632 AS scaler_28, (CAST([ADS_imp_1_OUT].impter_29 AS FLOAT) - -0.150475392817) / 1.16016353805 AS scaler_29, (CAST([ADS_imp_1_OUT].impter_30 AS FLOAT) - -0.12977616601) / 1.12395714448 AS scaler_30, (CAST([ADS_imp_1_OUT].impter_31 AS FLOAT) - 0.15035209987) / 0.902213045835 AS scaler_31, (CAST([ADS_imp_1_OUT].impter_32 AS FLOAT) - -0.182031366172) / 1.09742238631 AS scaler_32, (CAST([ADS_imp_1_OUT].impter_33 AS FLOAT) - -0.0945499812264) / 0.892045682532 AS scaler_33, (CAST([ADS_imp_1_OUT].impter_34 AS FLOAT) - 0.0324055051984) / 1.01237891927 AS scaler_34, (CAST([ADS_imp_1_OUT].impter_35 AS FLOAT) - -0.119163927171) / 0.928870235195 AS scaler_35, (CAST([ADS_imp_1_OUT].impter_36 AS FLOAT) - -0.04417233911) / 1.01454524035 AS scaler_36, (CAST([ADS_imp_1_OUT].impter_37 AS FLOAT) - 0.0551624335424) / 0.962067203225 AS scaler_37, (CAST([ADS_imp_1_OUT].impter_38 AS FLOAT) - -0.0425437418656) / 0.982360562379 AS scaler_38, (CAST([ADS_imp_1_OUT].impter_39 AS FLOAT) - 0.208833802555) / 1.0025602933 AS scaler_39, (CAST([ADS_imp_1_OUT].impter_40 AS FLOAT) - 0.0282809943746) / 0.989569060836 AS scaler_40, (CAST([ADS_imp_1_OUT].impter_41 AS FLOAT) - -0.236420707726) / 0.932970121534 AS scaler_41, (CAST([ADS_imp_1_OUT].impter_42 AS FLOAT) - 0.0244088612391) / 1.00703787507 AS scaler_42, (CAST([ADS_imp_1_OUT].impter_43 AS FLOAT) - 0.0703998925583) / 0.982421287796 AS scaler_43, (CAST([ADS_imp_1_OUT].impter_44 AS FLOAT) - -0.231895914345) / 1.02292861723 AS scaler_44, (CAST([ADS_imp_1_OUT].impter_45 AS FLOAT) - 0.0934159387948) / 1.0199359184 AS scaler_45, (CAST([ADS_imp_1_OUT].impter_46 AS FLOAT) - -0.0353028371461) / 1.0451675141 AS scaler_46, (CAST([ADS_imp_1_OUT].impter_47 AS FLOAT) - -0.0212446699903) / 0.923434780484 AS scaler_47, (CAST([ADS_imp_1_OUT].impter_48 AS FLOAT) - 0.0591700583515) / 0.964319698293 AS scaler_48, (CAST([ADS_imp_1_OUT].impter_49 AS FLOAT) - -0.0448201844816) / 0.874531227479 AS scaler_49, (CAST([ADS_imp_1_OUT].impter_50 AS FLOAT) - 0.089686699906) / 0.952723403612 AS scaler_50, (CAST([ADS_imp_1_OUT].impter_51 AS FLOAT) - 0.117266139897) / 1.05668207814 AS scaler_51, (CAST([ADS_imp_1_OUT].impter_52 AS FLOAT) - -0.00660065345156) / 1.66424223617 AS scaler_52, (CAST([ADS_imp_1_OUT].impter_53 AS FLOAT) - 0.0529707854122) / 0.889952234433 AS scaler_53, (CAST([ADS_imp_1_OUT].impter_54 AS FLOAT) - -0.0404274763987) / 1.03763098651 AS scaler_54, (CAST([ADS_imp_1_OUT].impter_55 AS FLOAT) - -0.0609562104788) / 0.885000442536 AS scaler_55, (CAST([ADS_imp_1_OUT].impter_56 AS FLOAT) - 0.161917024968) / 0.960079725078 AS scaler_56, (CAST([ADS_imp_1_OUT].impter_57 AS FLOAT) - 0.123810428903) / 1.02412688866 AS scaler_57, (CAST([ADS_imp_1_OUT].impter_58 AS FLOAT) - 0.0430460094255) / 1.04107670187 AS scaler_58, (CAST([ADS_imp_1_OUT].impter_59 AS FLOAT) - 0.0636416333231) / 1.02326891119 AS scaler_59, (CAST([ADS_imp_1_OUT].impter_60 AS FLOAT) - 0.0527484912773) / 1.01531298839 AS scaler_60, (CAST([ADS_imp_1_OUT].impter_61 AS FLOAT) - 0.106182694384) / 0.99252366444 AS scaler_61, (CAST([ADS_imp_1_OUT].impter_62 AS FLOAT) - 0.213789410331) / 1.14679517572 AS scaler_62, (CAST([ADS_imp_1_OUT].impter_63 AS FLOAT) - -0.104969032022) / 0.995214045191 AS scaler_63, (CAST([ADS_imp_1_OUT].impter_64 AS FLOAT) - 0.149640436869) / 1.3114437019 AS scaler_64, (CAST([ADS_imp_1_OUT].impter_65 AS FLOAT) - 0.0307331027809) / 0.928582331806 AS scaler_65, (CAST([ADS_imp_1_OUT].impter_66 AS FLOAT) - 0.031404408496) / 0.98812784866 AS scaler_66, (CAST([ADS_imp_1_OUT].impter_67 AS FLOAT) - 0.0610458187476) / 0.937982588783 AS scaler_67, (CAST([ADS_imp_1_OUT].impter_68 AS FLOAT) - 0.216220924085) / 1.0859061837 AS scaler_68, (CAST([ADS_imp_1_OUT].impter_69 AS FLOAT) - 0.0582456737026) / 1.27469785783 AS scaler_69, (CAST([ADS_imp_1_OUT].impter_70 AS FLOAT) - -0.033096364249) / 0.817490477267 AS scaler_70, (CAST([ADS_imp_1_OUT].impter_71 AS FLOAT) - 0.051907212156) / 0.897428735952 AS scaler_71, (CAST([ADS_imp_1_OUT].impter_72 AS FLOAT) - -0.111703766477) / 0.982043435036 AS scaler_72, (CAST([ADS_imp_1_OUT].impter_73 AS FLOAT) - 0.0924957707948) / 0.89740232488 AS scaler_73, (CAST([ADS_imp_1_OUT].impter_74 AS FLOAT) - -0.0789458797811) / 1.4355619306 AS scaler_74, (CAST([ADS_imp_1_OUT].impter_75 AS FLOAT) - 0.0314526001428) / 1.0418297308 AS scaler_75, (CAST([ADS_imp_1_OUT].impter_76 AS FLOAT) - -0.105436189986) / 0.902303385732 AS scaler_76, (CAST([ADS_imp_1_OUT].impter_77 AS FLOAT) - 0.312853208981) / 1.08533107158 AS scaler_77, (CAST([ADS_imp_1_OUT].impter_78 AS FLOAT) - 0.070878148908) / 0.771886334594 AS scaler_78, (CAST([ADS_imp_1_OUT].impter_79 AS FLOAT) - -0.0496251899775) / 1.09265843178 AS scaler_79, (CAST([ADS_imp_1_OUT].impter_80 AS FLOAT) - -0.191899741432) / 1.03928511891 AS scaler_80, (CAST([ADS_imp_1_OUT].impter_81 AS FLOAT) - 0.109665114311) / 0.896553531051 AS scaler_81, (CAST([ADS_imp_1_OUT].impter_82 AS FLOAT) - -0.00685172937593) / 0.966673674892 AS scaler_82, (CAST([ADS_imp_1_OUT].impter_83 AS FLOAT) - 0.170320288707) / 0.952442940443 AS scaler_83, (CAST([ADS_imp_1_OUT].impter_84 AS FLOAT) - 0.0559306924962) / 1.07101422021 AS scaler_84, (CAST([ADS_imp_1_OUT].impter_85 AS FLOAT) - 0.093294281383) / 0.995873758377 AS scaler_85, (CAST([ADS_imp_1_OUT].impter_86 AS FLOAT) - -0.0689501895114) / 0.975090469347 AS scaler_86, (CAST([ADS_imp_1_OUT].impter_87 AS FLOAT) - -0.260792492717) / 1.16749002797 AS scaler_87, (CAST([ADS_imp_1_OUT].impter_88 AS FLOAT) - 0.215200875191) / 1.06551795176 AS scaler_88, (CAST([ADS_imp_1_OUT].impter_89 AS FLOAT) - -0.0601968371047) / 0.916226429416 AS scaler_89, (CAST([ADS_imp_1_OUT].impter_90 AS FLOAT) - -0.127643131778) / 0.977754211728 AS scaler_90, (CAST([ADS_imp_1_OUT].impter_91 AS FLOAT) - -0.0218224721407) / 0.845900347788 AS scaler_91, (CAST([ADS_imp_1_OUT].impter_92 AS FLOAT) - -0.26136727385) / 0.890851831426 AS scaler_92, (CAST([ADS_imp_1_OUT].impter_93 AS FLOAT) - 0.185993166701) / 1.12940706818 AS scaler_93, (CAST([ADS_imp_1_OUT].impter_94 AS FLOAT) - 0.0225468576615) / 1.06908857105 AS scaler_94, (CAST([ADS_imp_1_OUT].impter_95 AS FLOAT) - 0.212796657064) / 1.0573800924 AS scaler_95, (CAST([ADS_imp_1_OUT].impter_96 AS FLOAT) - 0.0263994551354) / 0.977272574827 AS scaler_96, (CAST([ADS_imp_1_OUT].impter_97 AS FLOAT) - -0.0898834256559) / 0.97652153246 AS scaler_97, (CAST([ADS_imp_1_OUT].impter_98 AS FLOAT) - 0.0653244213397) / 1.10189018759 AS scaler_98, (CAST([ADS_imp_1_OUT].impter_99 AS FLOAT) - 0.0317908155281) / 0.934068243994 AS scaler_99, (CAST([ADS_imp_1_OUT].impter_100 AS FLOAT) - 0.0898810892448) / 1.04589748648 AS scaler_100, (CAST([ADS_imp_1_OUT].impter_101 AS FLOAT) - -0.11693699491) / 0.890688006281 AS scaler_101 
FROM [ADS_imp_1_OUT]), 
[DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_64 <= 0.2314203679561615) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_73 <= 1.140124797821045) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.460309386253357) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_43 <= 0.781227171421051) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_74 <= 1.2439684867858887) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -1.9615044593811035) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_76 <= -1.3325002193450928) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_64' AS feature, 0.2314203679561615 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.94229574291185e-17 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_73' AS feature, 1.140124797821045 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.26704316256555066 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_9' AS feature, 1.460309386253357 AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.4301705756929639 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.0065825751309623 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8611111111111112 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_43' AS feature, 0.781227171421051 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24046434494195687 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8611111111111118 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.161290322580645 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_74' AS feature, 1.2439684867858887 AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3293532338308458 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_5' AS feature, -1.9615044593811035 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4242250287026406 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.161290322580645 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.861111111111111 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_76' AS feature, -1.3325002193450928 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2873134328358209 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8611111111111112 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.161290322580645 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[RF_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0_0, [DT_Output].[Estimator] AS [Estimator_0_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_64 <= 0.2314203679561615) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_73 <= 1.140124797821045) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.460309386253357) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_43 <= 0.781227171421051) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_74 <= 1.2439684867858887) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -2.016674041748047) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_14 <= 1.4864033460617065) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_64' AS feature, 0.2314203679561615 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.00033579826624138874 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_73' AS feature, 1.140124797821045 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24007160000183728 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_9' AS feature, 1.460309386253357 AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3869290510413906 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.7962117343286261 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7148783825567202 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_43' AS feature, 0.781227171421051 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2168182476767725 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7148783825567204 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.9355718818861107 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_74' AS feature, 1.2439684867858887 AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.29683825613020537 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_9' AS feature, -2.016674041748047 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.38224422669108066 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.9355718818861107 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7148783825567204 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_14' AS feature, 1.4864033460617065 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.25830055251548395 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.9355718818861107 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7148783825567202 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[RF_Tree_1_0] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_1_0, [DT_Output_1].[Estimator] AS [Estimator_1_0] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_64 <= 0.2314203679561615) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_73 <= 1.140124797821045) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.460309386253357) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_54 <= -0.829127311706543) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_74 <= 1.2439684867858887) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -2.016674041748047) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_78 <= -1.7341034412384033) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_64' AS feature, 0.2314203679561615 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0005464174337244474 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_73' AS feature, 1.140124797821045 AS threshold, 37 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21607063579067692 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_9' AS feature, 1.460309386253357 AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.34839381662052876 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.638036632345441 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6022210650815887 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_54' AS feature, -0.829127311706543 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19560148234664 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.770932477961996 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.602221065081589 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_74' AS feature, 1.2439684867858887 AS threshold, 30 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2677074497438194 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_9' AS feature, -2.016674041748047 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.34466670340811656 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.770932477961996 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6022210650815885 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_78' AS feature, -1.7341034412384033 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23252769907411264 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6022210650815887 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.770932477961996 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[RF_Tree_2_0] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_2_0, [DT_Output_2].[Estimator] AS [Estimator_2_0] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_64 <= -0.13471630215644836) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_69 <= -0.9004705548286438) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_79 <= 0.892469048500061) THEN 4 ELSE 5 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_74 <= 1.2439684867858887) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= -1.2567498683929443) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -1.5954468250274658) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_64' AS feature, -0.13471630215644836 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0006804080855858648 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_69' AS feature, -0.9004705548286438 AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2645106447843012 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5130649724683805 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'scaler_79' AS feature, 0.892469048500061 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.36948464363743605 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.6714416582740743 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5130649724683805 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'scaler_74' AS feature, 1.2439684867858887 AS threshold, 40 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.17968436877275953 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'scaler_10' AS feature, -1.2567498683929443 AS threshold, 34 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25972706162003284 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.909902069611574 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4341607182702738 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'scaler_7' AS feature, -1.5954468250274658 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2738908906951224 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5130649724683805 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.6571390197040434 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[RF_Tree_3_0] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_3_0, [DT_Output_3].[Estimator] AS [Estimator_3_0] 
FROM [DT_Output_3]), 
[RF_Join_CTE] AS 
(SELECT [RF_Tree_0_0].join_key_0_0 AS join_key_0_0, [RF_Tree_0_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Tree_1_0].join_key_1_0 AS join_key_1_0, [RF_Tree_1_0].[Estimator_1_0] AS [Estimator_1_0], [RF_Tree_2_0].join_key_2_0 AS join_key_2_0, [RF_Tree_2_0].[Estimator_2_0] AS [Estimator_2_0], [RF_Tree_3_0].join_key_3_0 AS join_key_3_0, [RF_Tree_3_0].[Estimator_3_0] AS [Estimator_3_0] 
FROM [RF_Tree_0_0] LEFT OUTER JOIN [RF_Tree_1_0] ON [RF_Tree_0_0].join_key_0_0 = [RF_Tree_1_0].join_key_1_0 LEFT OUTER JOIN [RF_Tree_2_0] ON [RF_Tree_2_0].join_key_2_0 = [RF_Tree_1_0].join_key_1_0 LEFT OUTER JOIN [RF_Tree_3_0] ON [RF_Tree_3_0].join_key_3_0 = [RF_Tree_2_0].join_key_2_0), 
[RF_AVG_Scores] AS 
(SELECT [RF_Join_CTE].join_key_0_0 AS [KEY], 0.850468266029 + 0.1 * [RF_Join_CTE].[Estimator_0_0] + 0.1 * [RF_Join_CTE].[Estimator_1_0] + 0.1 * [RF_Join_CTE].[Estimator_2_0] + 0.1 * [RF_Join_CTE].[Estimator_3_0] AS [Score_0], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [LogProba_0], 0.149531733971 AS [Score_1], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_1] 
FROM [RF_Join_CTE]), 
orig_cte AS 
(SELECT [RF_AVG_Scores].[KEY] AS [KEY], [RF_AVG_Scores].[Score_0] AS [Score_0], [RF_AVG_Scores].[Score_1] AS [Score_1], [RF_AVG_Scores].[Proba_0] AS [Proba_0], [RF_AVG_Scores].[Proba_1] AS [Proba_1], [RF_AVG_Scores].[LogProba_0] AS [LogProba_0], [RF_AVG_Scores].[LogProba_1] AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RF_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte