-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.564086974569 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.00408251045931 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.184625056268 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.110334890188 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.323086758008 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.3184509942 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN 0.0139137514044 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.0725092561288 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.283776844419 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN -0.110414418384 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - 0.564086974569) / 1.19148626652 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.00408251045931) / 0.947285053287 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.184625056268) / 1.00319470536 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.110334890188) / 1.09031953825 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.323086758008) / 1.38808424875 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.3184509942) / 1.0821225395 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - 0.0139137514044) / 1.1134446699 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.0725092561288) / 1.41314452968 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.283776844419) / 1.23371330045 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - -0.110414418384) / 1.50782848914 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.6293820142745972) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -0.06834151595830917) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= -2.0552611351013184) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= 1.0277626514434814) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.9491333961486816) THEN 9 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 1.0931161642074585) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -0.6293820142745972 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.05337803418018339 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_7' AS feature, -0.06834151595830917 AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5008508215412097 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_11' AS feature, -2.0552611351013184 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6766083972987856 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9771764311862404 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.2260491088921968 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_5' AS feature, 1.0277626514434814 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.017517488207876346 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9771764311862404 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.226049108892196 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_11' AS feature, 0.9491333961486816 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21325174256135454 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9771764311862405 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'scaler_11' AS feature, 1.0931161642074585 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1415734208830328 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.226049108892196 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9771764311862406 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[RF_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0_0, [DT_Output].[Estimator] AS [Estimator_0_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.19086170196533203) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= -1.3851957321166992) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= 0.19791020452976227) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.7995316982269287) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.45942509174346924) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.9981169700622559) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= 1.1988379955291748) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_9' AS feature, 0.19086170196533203 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.03143302649678465 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_4' AS feature, -1.3851957321166992 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21085399766613505 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_3' AS feature, 0.19791020452976227 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0885076725977146 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.0634043741432264 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9931481526909116 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_2' AS feature, -0.7995316982269287 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23806869496284866 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9682938219485 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9918708819823264 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_3' AS feature, -0.45942509174346924 AS threshold, 31 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1769268109902029 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_9' AS feature, 1.9981169700622559 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6440632281532701 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.0634043741432264 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9931481526909116 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_7' AS feature, 1.1988379955291748 AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.01417445057650641 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3736084435938405 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.0634043741432264 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[RF_Tree_0_1] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_0_1, [DT_Output_1].[Estimator] AS [Estimator_0_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.5231382250785828) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.4351358115673065) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.8904340267181396) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.04155059903860092) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.6489991545677185) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.7868311405181885) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 1.383734941482544) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -0.5231382250785828 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.05709353549379792 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.4351358115673065 AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2603831825573564 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_9' AS feature, 0.8904340267181396 AS threshold, 13 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2524973015963787 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0043578929961674 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9999665746747125 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_9' AS feature, -0.04155059903860092 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.27746925797280797 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0450683464005193 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0041474047228995 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_10' AS feature, 0.6489991545677185 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18276140305571317 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_11' AS feature, 0.7868311405181885 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35855923790628724 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.756134928499818 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0295924313624736 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_6' AS feature, 1.383734941482544 AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20399383361554985 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0279118167010979 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.655692277570579 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[RF_Tree_0_2] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_0_2, [DT_Output_2].[Estimator] AS [Estimator_0_2] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.44526612758636475) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.8351261615753174) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.583308219909668) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.14016485214233398) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.8543402552604675) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.39302968978881836) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.9736158847808838) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_11' AS feature, 0.44526612758636475 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.026370737498559022 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_2' AS feature, 0.8351261615753174 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1375150788819781 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_10' AS feature, 1.583308219909668 AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19881724217888658 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8929906392510988 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.740969785734198 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_3' AS feature, -0.14016485214233398 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24051492811562403 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0016276680489165 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.8015589425492906 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_9' AS feature, 0.8543402552604675 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3199994918470215 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_5' AS feature, -0.39302968978881836 AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.46986183500868894 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5373007187774658 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.245844635842065 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_11' AS feature, 0.9736158847808838 AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24947741216731528 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0035880203761054 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9982383312013109 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[RF_Tree_0_3] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_0_3, [DT_Output_3].[Estimator] AS [Estimator_0_3] 
FROM [DT_Output_3]), 
[RF_Join_CTE_0] AS 
(SELECT [RF_Tree_0_0].join_key_0_0 AS join_key_0_0, [RF_Tree_0_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Tree_0_1].join_key_0_1 AS join_key_0_1, [RF_Tree_0_1].[Estimator_0_1] AS [Estimator_0_1], [RF_Tree_0_2].join_key_0_2 AS join_key_0_2, [RF_Tree_0_2].[Estimator_0_2] AS [Estimator_0_2], [RF_Tree_0_3].join_key_0_3 AS join_key_0_3, [RF_Tree_0_3].[Estimator_0_3] AS [Estimator_0_3] 
FROM [RF_Tree_0_0] LEFT OUTER JOIN [RF_Tree_0_1] ON [RF_Tree_0_0].join_key_0_0 = [RF_Tree_0_1].join_key_0_1 LEFT OUTER JOIN [RF_Tree_0_2] ON [RF_Tree_0_2].join_key_0_2 = [RF_Tree_0_1].join_key_0_1 LEFT OUTER JOIN [RF_Tree_0_3] ON [RF_Tree_0_3].join_key_0_3 = [RF_Tree_0_2].join_key_0_2), 
[DT_node_lookup_4] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.6293820142745972) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -0.06834151595830917) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -1.6882476806640625) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.605938732624054) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.9491333961486816) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.7063358426094055) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 1.0931161642074585) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -0.6293820142745972 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.04899512258980045 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_7' AS feature, -0.06834151595830917 AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4484633380993935 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_7' AS feature, -1.6882476806640625 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6048579343497064 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.946303731679295 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.389243723477404 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_3' AS feature, -0.605938732624054 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.018378198411033407 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.583245270541474 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9518389646456723 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_11' AS feature, 0.9491333961486816 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19249275548091413 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_3' AS feature, -0.7063358426094055 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20984251512481433 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9410631051452802 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9519427717212685 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_11' AS feature, 1.0931161642074585 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1278254695354675 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.4620446282022876 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9497144995073232 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].count AS count, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[RF_Tree_1_0] AS 
(SELECT [DT_Output_4].[KEY] AS join_key_1_0, [DT_Output_4].[Estimator] AS [Estimator_1_0] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.19086170196533203) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= -1.3851957321166992) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.43963244557380676) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -1.2838743925094604) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.45942509174346924) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 1.34856379032135) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_8 <= -1.3426132202148438) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_9' AS feature, 0.19086170196533203 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.028365165923441224 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_4' AS feature, -1.3851957321166992 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18926181421483013 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_2' AS feature, -0.43963244557380676 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.07155624476841273 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.2985841507533133 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9735636673251413 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_2' AS feature, -1.2838743925094604 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21297254684967037 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9308721276217726 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9587536290629781 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_3' AS feature, -0.45942509174346924 AS threshold, 31 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1584825546730104 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_2' AS feature, 1.34856379032135 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5794295160297718 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3385834654018685 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.959295281886052 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_8' AS feature, -1.3426132202148438 AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.013723020427482923 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.0553778651591754 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3735130148564216 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].count AS count, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[RF_Tree_1_1] AS 
(SELECT [DT_Output_5].[KEY] AS join_key_1_1, [DT_Output_5].[Estimator] AS [Estimator_1_1] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.5231382250785828) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.4351358115673065) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.6957806944847107) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.04155059903860092) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.6489991545677185) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.7868311405181885) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 1.4298112392425537) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -0.5231382250785828 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0514958789220726 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.4351358115673065 AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23103930386725738 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_10' AS feature, 0.6957806944847107 AS threshold, 13 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22387757946033074 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9677989006904502 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9615208396708218 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_9' AS feature, -0.04155059903860092 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24655637341559836 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0060672660934962 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9454455954637017 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_10' AS feature, 0.6489991545677185 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16333272210951572 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_11' AS feature, 0.7868311405181885 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3224285591947974 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 28 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4501271410567513 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9987590214661259 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_2' AS feature, 1.4298112392425537 AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.186678119478104 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9952976594846178 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0757549564722724 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].count AS count, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[RF_Tree_1_2] AS 
(SELECT [DT_Output_6].[KEY] AS join_key_1_2, [DT_Output_6].[Estimator] AS [Estimator_1_2] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.44526612758636475) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.6841748952865601) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 1.5881190299987793) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.1097767353057861) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.8543402552604675) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.39302968978881836) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= -1.2908680438995361) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_11' AS feature, 0.44526612758636475 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.02398851119212783 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_10' AS feature, 0.6841748952865601 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12286113023046268 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_2' AS feature, 1.5881190299987793 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19922896193184692 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9709099135780511 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.4204741627579196 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_9' AS feature, 1.1097767353057861 AS threshold, 10 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.12915271438410536 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5525634434310416 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3203923527497902 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_9' AS feature, 0.8543402552604675 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.28709411874093566 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_5' AS feature, -0.39302968978881836 AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4224093524778064 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4458989244162968 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8143664238747075 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_4' AS feature, -1.2908680438995361 AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2271037694591731 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9914015952013429 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9653252687911824 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].count AS count, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[RF_Tree_1_3] AS 
(SELECT [DT_Output_7].[KEY] AS join_key_1_3, [DT_Output_7].[Estimator] AS [Estimator_1_3] 
FROM [DT_Output_7]), 
[RF_Join_CTE_1] AS 
(SELECT [RF_Tree_1_0].join_key_1_0 AS join_key_1_0, [RF_Tree_1_0].[Estimator_1_0] AS [Estimator_1_0], [RF_Tree_1_1].join_key_1_1 AS join_key_1_1, [RF_Tree_1_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Tree_1_2].join_key_1_2 AS join_key_1_2, [RF_Tree_1_2].[Estimator_1_2] AS [Estimator_1_2], [RF_Tree_1_3].join_key_1_3 AS join_key_1_3, [RF_Tree_1_3].[Estimator_1_3] AS [Estimator_1_3] 
FROM [RF_Tree_1_0] LEFT OUTER JOIN [RF_Tree_1_1] ON [RF_Tree_1_0].join_key_1_0 = [RF_Tree_1_1].join_key_1_1 LEFT OUTER JOIN [RF_Tree_1_2] ON [RF_Tree_1_2].join_key_1_2 = [RF_Tree_1_1].join_key_1_1 LEFT OUTER JOIN [RF_Tree_1_3] ON [RF_Tree_1_3].join_key_1_3 = [RF_Tree_1_2].join_key_1_2), 
[DT_node_lookup_8] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.6293820142745972) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.5492061376571655) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= -2.0552611351013184) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -1.6331151723861694) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.9491333961486816) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.5232767462730408) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 1.0931161642074585) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -0.6293820142745972 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.04484836034410453 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.5492061376571655 AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.40175564155009164 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_11' AS feature, -2.0552611351013184 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5403052459960543 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9198560559680276 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9373319114672838 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_2' AS feature, -1.6331151723861694 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.02074422932369411 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.207263934951102 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9286913337677154 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_11' AS feature, 0.9491333961486816 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17367643781358416 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_3' AS feature, -0.5232767462730408 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18860390412827857 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9140947643847566 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9292904485073777 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_11' AS feature, 1.0931161642074585 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.11803769973154163 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.032597177154116 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9297933838462397 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].count AS count, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[RF_Tree_2_0] AS 
(SELECT [DT_Output_8].[KEY] AS join_key_2_0, [DT_Output_8].[Estimator] AS [Estimator_2_0] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.19086170196533203) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= -1.3851957321166992) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.43963244557380676) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -1.2838743925094604) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.45942509174346924) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 1.34856379032135) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_8 <= -1.3426132202148438) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_9' AS feature, 0.19086170196533203 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.025475214182485457 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_4' AS feature, -1.3851957321166992 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16999530552753978 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_2' AS feature, -0.43963244557380676 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.056197150147555885 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8681704750403723 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9558917037863681 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_2' AS feature, -1.2838743925094604 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19055825604345752 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9054888455906902 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.932984085345643 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_3' AS feature, -0.45942509174346924 AS threshold, 31 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.14235456931499701 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_2' AS feature, 1.34856379032135 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5209145672697977 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.926837218121652 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9271372669583222 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_8' AS feature, -1.3426132202148438 AS threshold, 22 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.01251088439378505 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.401646097622834 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3491284014203257 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].count AS count, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[RF_Tree_2_1] AS 
(SELECT [DT_Output_9].[KEY] AS join_key_2_1, [DT_Output_9].[Estimator] AS [Estimator_2_1] 
FROM [DT_Output_9]), 
[DT_node_lookup_10] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.5231382250785828) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= 1.1653594970703125) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 1.108283281326294) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.6489991545677185) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.44526612758636475) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.9981169700622559) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -0.5231382250785828 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.046312711945611366 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_7' AS feature, 1.1653594970703125 AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2043548813856117 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_11' AS feature, 1.108283281326294 AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.19980161552037157 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9403296942181716 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9033039152051164 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9723073594023637 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'scaler_10' AS feature, 0.6489991545677185 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1455353009725538 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'scaler_11' AS feature, 0.44526612758636475 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.28893836464284767 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.424200488644671 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.071635299072163 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'scaler_9' AS feature, 1.9981169700622559 AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16995143910209265 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9667117825476709 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.75530116815057 AS [Estimator]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].count AS count, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[RF_Tree_2_2] AS 
(SELECT [DT_Output_10].[KEY] AS join_key_2_2, [DT_Output_10].[Estimator] AS [Estimator_2_2] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.44526612758636475) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.8351261615753174) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.583308219909668) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.14016485214233398) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.8543402552604675) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.0281826239079237) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.1849256157875061) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_11' AS feature, 0.44526612758636475 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.02162337943665826 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_2' AS feature, 0.8351261615753174 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.10860707232113585 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_10' AS feature, 1.583308219909668 AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16042625215037176 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8270188506750933 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8650877283272953 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_3' AS feature, -0.14016485214233398 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2109445366258185 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9433732439858005 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.012551584676727 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_9' AS feature, 0.8543402552604675 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25495293883603937 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_2' AS feature, 0.0281826239079237 AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3767383207371599 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6249333765216474 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.799233175830964 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_3' AS feature, -0.1849256157875061 AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20783151238821845 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.930866905193414 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9722152350065452 AS [Estimator]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].count AS count, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[RF_Tree_2_3] AS 
(SELECT [DT_Output_11].[KEY] AS join_key_2_3, [DT_Output_11].[Estimator] AS [Estimator_2_3] 
FROM [DT_Output_11]), 
[RF_Join_CTE_2] AS 
(SELECT [RF_Tree_2_0].join_key_2_0 AS join_key_2_0, [RF_Tree_2_0].[Estimator_2_0] AS [Estimator_2_0], [RF_Tree_2_1].join_key_2_1 AS join_key_2_1, [RF_Tree_2_1].[Estimator_2_1] AS [Estimator_2_1], [RF_Tree_2_2].join_key_2_2 AS join_key_2_2, [RF_Tree_2_2].[Estimator_2_2] AS [Estimator_2_2], [RF_Tree_2_3].join_key_2_3 AS join_key_2_3, [RF_Tree_2_3].[Estimator_2_3] AS [Estimator_2_3] 
FROM [RF_Tree_2_0] LEFT OUTER JOIN [RF_Tree_2_1] ON [RF_Tree_2_0].join_key_2_0 = [RF_Tree_2_1].join_key_2_1 LEFT OUTER JOIN [RF_Tree_2_2] ON [RF_Tree_2_2].join_key_2_2 = [RF_Tree_2_1].join_key_2_1 LEFT OUTER JOIN [RF_Tree_2_3] ON [RF_Tree_2_3].join_key_2_3 = [RF_Tree_2_2].join_key_2_2), 
[DT_node_lookup_12] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.6293820142745972) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.5492061376571655) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= -2.0552611351013184) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.04155059903860092) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.9491333961486816) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.5232767462730408) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 1.0931161642074585) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -0.6293820142745972 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0409970078275986 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.5492061376571655 AS threshold, 15 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3569058554703137 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_11' AS feature, -2.0552611351013184 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4809081123707788 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8962151037430378 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6500195595438498 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_9' AS feature, -0.04155059903860092 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.015899648994035002 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9154237385641746 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.902202956360216 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_11' AS feature, 0.9491333961486816 AS threshold, 52 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15577667993276562 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_3' AS feature, -0.5232767462730408 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1694995165211366 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8927986255694129 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9088627149153438 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_11' AS feature, 1.0931161642074585 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.10462792537611033 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8518418893112185 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9096275182838385 AS [Estimator]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].count AS count, [DT_node_data_12].depth AS depth, [DT_node_data_12].parent_id AS parent_id, [DT_node_data_12].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[RF_Tree_3_0] AS 
(SELECT [DT_Output_12].[KEY] AS join_key_3_0, [DT_Output_12].[Estimator] AS [Estimator_3_0] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.19086170196533203) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= -1.3851957321166992) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_8 <= -0.7244102954864502) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -1.2838743925094604) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.21244141459465027) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.0509192943572998) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.591594934463501) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_9' AS feature, 0.19086170196533203 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.02252505772961776 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_4' AS feature, -1.3851957321166992 AS threshold, 36 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1526799297094043 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_8' AS feature, -0.7244102954864502 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.04875023013320107 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9288225667740554 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5985146203822165 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_2' AS feature, -1.2838743925094604 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17099176242236838 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8839627741442205 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9115726111231985 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_3' AS feature, -0.21244141459465027 AS threshold, 31 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.12862253553723113 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_9' AS feature, 1.0509192943572998 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4268843822565836 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7640579765884743 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19086680694584873 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_2' AS feature, 0.591594934463501 AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.0354214801584127 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9488170751331211 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.0685321791323168 AS [Estimator]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].count AS count, [DT_node_data_13].depth AS depth, [DT_node_data_13].parent_id AS parent_id, [DT_node_data_13].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[RF_Tree_3_1] AS 
(SELECT [DT_Output_13].[KEY] AS join_key_3_1, [DT_Output_13].[Estimator] AS [Estimator_3_1] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -0.5231382250785828) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= 1.1653594970703125) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= 1.7653436660766602) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.6489991545677185) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.7854844331741333) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 1.383734941482544) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -0.5231382250785828 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.04162233025137399 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_7' AS feature, 1.1653594970703125 AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1830194038096237 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_4' AS feature, 1.7653436660766602 AS threshold, 16 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1773492409284479 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9100777475121206 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9539261031377546 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9533013275667547 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'scaler_10' AS feature, 0.6489991545677185 AS threshold, 48 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1305430166505189 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'scaler_2' AS feature, 0.7854844331741333 AS threshold, 33 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25946179676713504 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.162744025196023 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5816502415236248 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'scaler_6' AS feature, 1.383734941482544 AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1530782996060366 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9409221386427458 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5472125378297408 AS [Estimator]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].count AS count, [DT_node_data_14].depth AS depth, [DT_node_data_14].parent_id AS parent_id, [DT_node_data_14].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[RF_Tree_3_2] AS 
(SELECT [DT_Output_14].[KEY] AS join_key_3_2, [DT_Output_14].[Estimator] AS [Estimator_3_2] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.44526612758636475) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.8351261615753174) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.583308219909668) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.14016485214233398) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.04012996703386307) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= 0.7479563355445862) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= 0.8353748321533203) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_11' AS feature, 0.44526612758636475 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.019798388809029673 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_2' AS feature, 0.8351261615753174 AS threshold, 43 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.09710816856287566 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_10' AS feature, 1.583308219909668 AS threshold, 37 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14398858543841 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.7970943300423485 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5928182352128806 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_3' AS feature, -0.14016485214233398 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19198773550291925 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9232778853224696 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.747586867456472 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'scaler_9' AS feature, -0.04012996703386307 AS threshold, 24 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2292559707670266 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'scaler_7' AS feature, 0.7479563355445862 AS threshold, 15 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3971297098388783 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.7802309678631735 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7769285456734671 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'scaler_7' AS feature, 0.8353748321533203 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.05053359435272617 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.618426765203682 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9759826808653578 AS [Estimator]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].count AS count, [DT_node_data_15].depth AS depth, [DT_node_data_15].parent_id AS parent_id, [DT_node_data_15].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[RF_Tree_3_3] AS 
(SELECT [DT_Output_15].[KEY] AS join_key_3_3, [DT_Output_15].[Estimator] AS [Estimator_3_3] 
FROM [DT_Output_15]), 
[RF_Join_CTE_3] AS 
(SELECT [RF_Tree_3_0].join_key_3_0 AS join_key_3_0, [RF_Tree_3_0].[Estimator_3_0] AS [Estimator_3_0], [RF_Tree_3_1].join_key_3_1 AS join_key_3_1, [RF_Tree_3_1].[Estimator_3_1] AS [Estimator_3_1], [RF_Tree_3_2].join_key_3_2 AS join_key_3_2, [RF_Tree_3_2].[Estimator_3_2] AS [Estimator_3_2], [RF_Tree_3_3].join_key_3_3 AS join_key_3_3, [RF_Tree_3_3].[Estimator_3_3] AS [Estimator_3_3] 
FROM [RF_Tree_3_0] LEFT OUTER JOIN [RF_Tree_3_1] ON [RF_Tree_3_0].join_key_3_0 = [RF_Tree_3_1].join_key_3_1 LEFT OUTER JOIN [RF_Tree_3_2] ON [RF_Tree_3_2].join_key_3_2 = [RF_Tree_3_1].join_key_3_1 LEFT OUTER JOIN [RF_Tree_3_3] ON [RF_Tree_3_3].join_key_3_3 = [RF_Tree_3_2].join_key_3_2), 
[RF_Join_CTE] AS 
(SELECT [RF_Join_CTE_0].join_key_0_0 AS join_key_0_0, [RF_Join_CTE_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Join_CTE_0].join_key_0_1 AS join_key_0_1, [RF_Join_CTE_0].[Estimator_0_1] AS [Estimator_0_1], [RF_Join_CTE_0].join_key_0_2 AS join_key_0_2, [RF_Join_CTE_0].[Estimator_0_2] AS [Estimator_0_2], [RF_Join_CTE_0].join_key_0_3 AS join_key_0_3, [RF_Join_CTE_0].[Estimator_0_3] AS [Estimator_0_3], [RF_Join_CTE_1].join_key_1_0 AS join_key_1_0, [RF_Join_CTE_1].[Estimator_1_0] AS [Estimator_1_0], [RF_Join_CTE_1].join_key_1_1 AS join_key_1_1, [RF_Join_CTE_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Join_CTE_1].join_key_1_2 AS join_key_1_2, [RF_Join_CTE_1].[Estimator_1_2] AS [Estimator_1_2], [RF_Join_CTE_1].join_key_1_3 AS join_key_1_3, [RF_Join_CTE_1].[Estimator_1_3] AS [Estimator_1_3], [RF_Join_CTE_2].join_key_2_0 AS join_key_2_0, [RF_Join_CTE_2].[Estimator_2_0] AS [Estimator_2_0], [RF_Join_CTE_2].join_key_2_1 AS join_key_2_1, [RF_Join_CTE_2].[Estimator_2_1] AS [Estimator_2_1], [RF_Join_CTE_2].join_key_2_2 AS join_key_2_2, [RF_Join_CTE_2].[Estimator_2_2] AS [Estimator_2_2], [RF_Join_CTE_2].join_key_2_3 AS join_key_2_3, [RF_Join_CTE_2].[Estimator_2_3] AS [Estimator_2_3], [RF_Join_CTE_3].join_key_3_0 AS join_key_3_0, [RF_Join_CTE_3].[Estimator_3_0] AS [Estimator_3_0], [RF_Join_CTE_3].join_key_3_1 AS join_key_3_1, [RF_Join_CTE_3].[Estimator_3_1] AS [Estimator_3_1], [RF_Join_CTE_3].join_key_3_2 AS join_key_3_2, [RF_Join_CTE_3].[Estimator_3_2] AS [Estimator_3_2], [RF_Join_CTE_3].join_key_3_3 AS join_key_3_3, [RF_Join_CTE_3].[Estimator_3_3] AS [Estimator_3_3] 
FROM [RF_Join_CTE_0] LEFT OUTER JOIN [RF_Join_CTE_1] ON [RF_Join_CTE_0].join_key_0_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_2] ON [RF_Join_CTE_2].join_key_2_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_3] ON [RF_Join_CTE_3].join_key_3_0 = [RF_Join_CTE_2].join_key_2_0), 
[RF_AVG_Scores] AS 
(SELECT [RF_Join_CTE].join_key_0_0 AS [KEY], 0.179104477612 + 0.1 * [RF_Join_CTE].[Estimator_0_0] + 0.1 * [RF_Join_CTE].[Estimator_1_0] + 0.1 * [RF_Join_CTE].[Estimator_2_0] + 0.1 * [RF_Join_CTE].[Estimator_3_0] AS [Score_0], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [LogProba_0], 0.208955223881 + 0.1 * [RF_Join_CTE].[Estimator_0_1] + 0.1 * [RF_Join_CTE].[Estimator_1_1] + 0.1 * [RF_Join_CTE].[Estimator_2_1] + 0.1 * [RF_Join_CTE].[Estimator_3_1] AS [Score_1], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_1], 0.328358208955 + 0.1 * [RF_Join_CTE].[Estimator_0_2] + 0.1 * [RF_Join_CTE].[Estimator_1_2] + 0.1 * [RF_Join_CTE].[Estimator_2_2] + 0.1 * [RF_Join_CTE].[Estimator_3_2] AS [Score_2], CAST(NULL AS FLOAT) AS [Proba_2], CAST(NULL AS FLOAT) AS [LogProba_2], 0.283582089552 + 0.1 * [RF_Join_CTE].[Estimator_0_3] + 0.1 * [RF_Join_CTE].[Estimator_1_3] + 0.1 * [RF_Join_CTE].[Estimator_2_3] + 0.1 * [RF_Join_CTE].[Estimator_3_3] AS [Score_3], CAST(NULL AS FLOAT) AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_3] 
FROM [RF_Join_CTE]), 
orig_cte AS 
(SELECT [RF_AVG_Scores].[KEY] AS [KEY], [RF_AVG_Scores].[Score_0] AS [Score_0], [RF_AVG_Scores].[Score_1] AS [Score_1], [RF_AVG_Scores].[Score_2] AS [Score_2], [RF_AVG_Scores].[Score_3] AS [Score_3], [RF_AVG_Scores].[Proba_0] AS [Proba_0], [RF_AVG_Scores].[Proba_1] AS [Proba_1], [RF_AVG_Scores].[Proba_2] AS [Proba_2], [RF_AVG_Scores].[Proba_3] AS [Proba_3], [RF_AVG_Scores].[LogProba_0] AS [LogProba_0], [RF_AVG_Scores].[LogProba_1] AS [LogProba_1], [RF_AVG_Scores].[LogProba_2] AS [LogProba_2], [RF_AVG_Scores].[LogProba_3] AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RF_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte