-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.307889418147 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0510640581227 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.104780190721 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.233080775639 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.3296105672 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.00840502854043 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.015091669222 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0888685127827 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.268976661584 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0793906637964 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.307889418147) / 1.29132941363 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.0510640581227) / 0.948338385737 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.104780190721) / 1.7228056883 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - -0.233080775639) / 1.01266488269 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.3296105672) / 1.46325106983 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.00840502854043) / 1.03729235389 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.015091669222) / 1.06238601485 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.0888685127827) / 0.931597245794 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.268976661584) / 1.33959984818 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.0793906637964) / 1.7249761077 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.244552344083786) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.8805816173553467) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= -1.5032625198364258) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.1661360263824463) THEN 7 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 2.138411521911621) THEN 9 ELSE 10 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_11' AS feature, -0.244552344083786 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.014039253093572578 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_6' AS feature, 0.8805816173553467 AS threshold, 28 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3168111081042335 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_7' AS feature, -1.5032625198364258 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4410347105887055 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0061947565137912 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0046928958186614 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0061947565137912 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_8' AS feature, 1.1661360263824463 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20333541204228645 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0061947565137919 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_8' AS feature, 2.138411521911621 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4120492033423288 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.945595287172553 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0061947565137912 AS "Estimator") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"RF_Tree_0_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0_0, "DT_Output"."Estimator" AS "Estimator_0_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.06848493963479996) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.1339387893676758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.244552344083786) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 0.2184484750032425) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= 1.0489745140075684) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= 0.8929256796836853) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.06848493963479996 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.018916557762502822 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_8' AS feature, 1.1339387893676758 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21413628072305793 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_11' AS feature, -0.244552344083786 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24461962622117928 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9745875773124162 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9994008652985025 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_9' AS feature, 0.2184484750032425 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.10085828942419595 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.0054051660035577 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9664168546094892 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_7' AS feature, 1.0489745140075684 AS threshold, 33 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1822189143786752 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_3' AS feature, 0.8929256796836853 AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.08074914544463273 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.00155821663233223 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.085476371895761 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.0054051660035577 AS "Estimator") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"RF_Tree_0_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_0_1, "DT_Output_1"."Estimator" AS "Estimator_0_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.5896774530410767) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 0.011073504574596882) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= 0.8898674249649048) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.0443495512008667) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= 1.5206665992736816) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -1.645698070526123) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.5896774530410767 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.02568908662941308 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.011073504574596882 AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.460435410267122 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_3' AS feature, 0.8898674249649048 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24784341384579847 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9999595173091349 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9915270287674108 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_6' AS feature, 1.0443495512008667 AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5722689088112674 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.557865990985707 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0292905409667594 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_2' AS feature, 1.5206665992736816 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18685356048235574 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_3' AS feature, -1.645698070526123 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20814637693075763 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.28469521233670947 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9080293565809325 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.000364403225879 AS "Estimator") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"RF_Tree_0_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_0_2, "DT_Output_2"."Estimator" AS "Estimator_0_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.38964778184890747) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.2273095846176147) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.6195164918899536) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.5185772180557251) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.2777612805366516) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.3038649559020996) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_4' AS feature, 0.38964778184890747 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.017746805928798837 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_6' AS feature, 1.2273095846176147 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17062539440591903 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_2' AS feature, -0.6195164918899536 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1917425834947734 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.04008623049885957 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9843664519452607 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.8562042422173843 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_11' AS feature, -0.5185772180557251 AS threshold, 23 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2747165807230834 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'scaler_10' AS feature, 0.2777612805366516 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2349129351164405 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9789020342502865 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9809713261779629 AS "Estimator" UNION ALL SELECT 10 AS node_id, 'scaler_6' AS feature, 1.3038649559020996 AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4545858216076213 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3779542834200953 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9792992879839734 AS "Estimator") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"RF_Tree_0_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_0_3, "DT_Output_3"."Estimator" AS "Estimator_0_3" 
FROM "DT_Output_3"), 
"RF_Join_CTE_0" AS 
(SELECT "RF_Tree_0_0".join_key_0_0 AS join_key_0_0, "RF_Tree_0_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Tree_0_1".join_key_0_1 AS join_key_0_1, "RF_Tree_0_1"."Estimator_0_1" AS "Estimator_0_1", "RF_Tree_0_2".join_key_0_2 AS join_key_0_2, "RF_Tree_0_2"."Estimator_0_2" AS "Estimator_0_2", "RF_Tree_0_3".join_key_0_3 AS join_key_0_3, "RF_Tree_0_3"."Estimator_0_3" AS "Estimator_0_3" 
FROM "RF_Tree_0_0" LEFT OUTER JOIN "RF_Tree_0_1" ON "RF_Tree_0_0".join_key_0_0 = "RF_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "RF_Tree_0_2" ON "RF_Tree_0_2".join_key_0_2 = "RF_Tree_0_1".join_key_0_1 LEFT OUTER JOIN "RF_Tree_0_3" ON "RF_Tree_0_3".join_key_0_3 = "RF_Tree_0_2".join_key_0_2), 
"DT_node_lookup_4" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.244552344083786) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.8805816173553467) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= -1.5032625198364258) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.27193737030029297) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.1661360263824463) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.8211919069290161) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.04608309268951416) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_11' AS feature, -0.244552344083786 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.012324380731168127 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_6' AS feature, 0.8805816173553467 AS threshold, 28 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.284106960985271 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_7' AS feature, -1.5032625198364258 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3959987363502137 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9832943283169775 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6131614023028122 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_4' AS feature, 0.27193737030029297 AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23059520569346542 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9966603123281124 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9694590849631877 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_8' AS feature, 1.1661360263824463 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18280157432305952 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_2' AS feature, -0.8211919069290161 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2295001899374903 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9660460392720661 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9765401327910561 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'scaler_3' AS feature, -0.04608309268951416 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.37758181305010957 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3416887075187343 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9690665523009034 AS "Estimator") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".count AS count, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"RF_Tree_1_0" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_1_0, "DT_Output_4"."Estimator" AS "Estimator_1_0" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.06848493963479996) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.1339387893676758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.244552344083786) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= 0.10396683216094971) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= 1.0489745140075684) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= 0.8929256796836853) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.12752878665924072) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.06848493963479996 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.01679364708402599 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_8' AS feature, 1.1339387893676758 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1934123909048134 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_11' AS feature, -0.244552344083786 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22136891183276844 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9480350359356534 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9690215072874891 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_3' AS feature, 0.10396683216094971 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.09547165868405484 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9275870227738341 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.2633806824501193 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_7' AS feature, 1.0489745140075684 AS threshold, 33 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1651771798828459 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_3' AS feature, 0.8929256796836853 AS threshold, 28 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.07486681524275117 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.007040372839031012 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3840812080765312 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'scaler_4' AS feature, 0.12752878665924072 AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6709152218673763 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.322646226159201 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.268402981479781 AS "Estimator") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".count AS count, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"RF_Tree_1_1" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_1_1, "DT_Output_5"."Estimator" AS "Estimator_1_1" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.5896774530410767) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 0.011073504574596882) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= 0.8898674249649048) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.0443495512008667) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= 1.5206665992736816) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= -0.7697042226791382) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.5896774530410767 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.022472010652965585 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.011073504574596882 AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.41097542615853055 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_3' AS feature, 0.8898674249649048 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22521320994103608 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9728216361829146 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9585229551240906 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_6' AS feature, 1.0443495512008667 AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5114262634374095 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0057807064813176 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9911879464387668 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_2' AS feature, 1.5206665992736816 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16746299248308844 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_8' AS feature, -0.7697042226791382 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18701648861048586 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.33685983080462595 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9779797919940633 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.4421283721153975 AS "Estimator") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".count AS count, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"RF_Tree_1_2" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_1_2, "DT_Output_6"."Estimator" AS "Estimator_1_2" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.38964778184890747) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.2273095846176147) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.6195164918899536) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.5185772180557251) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= -0.20308876037597656) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.6699337959289551) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_4' AS feature, 0.38964778184890747 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.015949592768846103 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_6' AS feature, 1.2273095846176147 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15381924621210627 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_2' AS feature, -0.6195164918899536 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17267070979642968 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.04926859740338784 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9564921922115445 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.1852744940531004 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_11' AS feature, -0.5185772180557251 AS threshold, 23 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24780104860086907 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'scaler_8' AS feature, -0.20308876037597656 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20961081644325574 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9467259080111252 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9510852094211381 AS "Estimator" UNION ALL SELECT 10 AS node_id, 'scaler_3' AS feature, -0.6699337959289551 AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4092405303811485 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17117227907060806 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0593271503917645 AS "Estimator") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".count AS count, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"RF_Tree_1_3" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_1_3, "DT_Output_7"."Estimator" AS "Estimator_1_3" 
FROM "DT_Output_7"), 
"RF_Join_CTE_1" AS 
(SELECT "RF_Tree_1_0".join_key_1_0 AS join_key_1_0, "RF_Tree_1_0"."Estimator_1_0" AS "Estimator_1_0", "RF_Tree_1_1".join_key_1_1 AS join_key_1_1, "RF_Tree_1_1"."Estimator_1_1" AS "Estimator_1_1", "RF_Tree_1_2".join_key_1_2 AS join_key_1_2, "RF_Tree_1_2"."Estimator_1_2" AS "Estimator_1_2", "RF_Tree_1_3".join_key_1_3 AS join_key_1_3, "RF_Tree_1_3"."Estimator_1_3" AS "Estimator_1_3" 
FROM "RF_Tree_1_0" LEFT OUTER JOIN "RF_Tree_1_1" ON "RF_Tree_1_0".join_key_1_0 = "RF_Tree_1_1".join_key_1_1 LEFT OUTER JOIN "RF_Tree_1_2" ON "RF_Tree_1_2".join_key_1_2 = "RF_Tree_1_1".join_key_1_1 LEFT OUTER JOIN "RF_Tree_1_3" ON "RF_Tree_1_3".join_key_1_3 = "RF_Tree_1_2".join_key_1_2), 
"DT_node_lookup_8" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.244552344083786) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.8805816173553467) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= -1.5032625198364258) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.9467086791992188) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.1661360263824463) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.923111081123352) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.3588298559188843) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_11' AS feature, -0.244552344083786 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.010953441922157093 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_6' AS feature, 0.8805816173553467 AS threshold, 28 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2549764856597626 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_7' AS feature, -1.5032625198364258 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.35556163421762593 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9627870116919804 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3520440222720358 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_6' AS feature, 0.9467086791992188 AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2077151977064084 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9874906679986948 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9369386468683053 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_8' AS feature, 1.1661360263824463 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.16424258947920073 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_2' AS feature, -0.923111081123352 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20699906692041267 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9341222575300516 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9506497149095943 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'scaler_2' AS feature, -0.3588298559188843 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3488351398153431 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9372414794984961 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9972871256691025 AS "Estimator") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".count AS count, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"RF_Tree_2_0" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_2_0, "DT_Output_8"."Estimator" AS "Estimator_2_0" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.06848493963479996) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.1339387893676758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.19472065567970276) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= -1.285407543182373) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.8855091333389282) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.10036088526248932) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.5882518887519836) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.06848493963479996 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.01452748510775654 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_8' AS feature, 1.1339387893676758 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.17453207506464322 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_5' AS feature, -0.19472065567970276 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20011940268634199 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9340167300264816 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.962192648624793 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_4' AS feature, -1.285407543182373 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.08987031035957697 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8468813536880067 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8960227261110943 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_10' AS feature, 0.8855091333389282 AS threshold, 33 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15032572878721762 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_2' AS feature, -0.10036088526248932 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25251443717457167 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2635581912151907 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.3324458491101168 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'scaler_11' AS feature, -0.5882518887519836 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22923233093724002 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.966646011700705 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9817874701666394 AS "Estimator") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".count AS count, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"RF_Tree_2_1" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_2_1, "DT_Output_9"."Estimator" AS "Estimator_2_1" 
FROM "DT_Output_9"), 
"DT_node_lookup_10" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.5896774530410767) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 0.011073504574596882) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -1.1039810180664062) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.0443495512008667) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= 1.5206665992736816) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -1.645698070526123) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_10" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.5896774530410767 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.019395582118870703 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.011073504574596882 AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3649389259860337 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_5' AS feature, -1.1039810180664062 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20396758479858887 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9299351999504336 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9484130107647843 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_6' AS feature, 1.0443495512008667 AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.454766269794132 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6629302741041287 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9575681052085298 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_2' AS feature, 1.5206665992736816 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14953671932729784 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_3' AS feature, -1.645698070526123 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1675478015290053 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.29115180279177066 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8404308969663294 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.100551422336841 AS "Estimator") AS "Values"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", "DT_node_lookup_10".node_id_2 AS node_id_2, "DT_node_data_10".node_id AS node_id, "DT_node_data_10".feature AS feature, "DT_node_data_10".threshold AS threshold, "DT_node_data_10".count AS count, "DT_node_data_10".depth AS depth, "DT_node_data_10".parent_id AS parent_id, "DT_node_data_10"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_10" LEFT OUTER JOIN "DT_node_data_10" ON "DT_node_lookup_10".node_id_2 = "DT_node_data_10".node_id), 
"RF_Tree_2_2" AS 
(SELECT "DT_Output_10"."KEY" AS join_key_2_2, "DT_Output_10"."Estimator" AS "Estimator_2_2" 
FROM "DT_Output_10"), 
"DT_node_lookup_11" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.38964778184890747) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.2273095846176147) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.6195164918899536) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.9161176681518555) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.5065394043922424) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 2.17861270904541) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_11" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_4' AS feature, 0.38964778184890747 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.014273077175468168 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_6' AS feature, 1.2273095846176147 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1377728840034474 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_2' AS feature, -0.6195164918899536 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1545386969556994 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.042082099644117625 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9304515234636738 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7992388770894112 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_4' AS feature, 0.9161176681518555 AS threshold, 23 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22198742284327486 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'scaler_11' AS feature, -0.5065394043922424 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.535944431045129 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9140212706427636 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0092749605666875 AS "Estimator" UNION ALL SELECT 10 AS node_id, 'scaler_10' AS feature, 2.17861270904541 AS threshold, 14 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.02015791757065425 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.33222265845544235 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9637218291593317 AS "Estimator") AS "Values"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", "DT_node_lookup_11".node_id_2 AS node_id_2, "DT_node_data_11".node_id AS node_id, "DT_node_data_11".feature AS feature, "DT_node_data_11".threshold AS threshold, "DT_node_data_11".count AS count, "DT_node_data_11".depth AS depth, "DT_node_data_11".parent_id AS parent_id, "DT_node_data_11"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_11" LEFT OUTER JOIN "DT_node_data_11" ON "DT_node_lookup_11".node_id_2 = "DT_node_data_11".node_id), 
"RF_Tree_2_3" AS 
(SELECT "DT_Output_11"."KEY" AS join_key_2_3, "DT_Output_11"."Estimator" AS "Estimator_2_3" 
FROM "DT_Output_11"), 
"RF_Join_CTE_2" AS 
(SELECT "RF_Tree_2_0".join_key_2_0 AS join_key_2_0, "RF_Tree_2_0"."Estimator_2_0" AS "Estimator_2_0", "RF_Tree_2_1".join_key_2_1 AS join_key_2_1, "RF_Tree_2_1"."Estimator_2_1" AS "Estimator_2_1", "RF_Tree_2_2".join_key_2_2 AS join_key_2_2, "RF_Tree_2_2"."Estimator_2_2" AS "Estimator_2_2", "RF_Tree_2_3".join_key_2_3 AS join_key_2_3, "RF_Tree_2_3"."Estimator_2_3" AS "Estimator_2_3" 
FROM "RF_Tree_2_0" LEFT OUTER JOIN "RF_Tree_2_1" ON "RF_Tree_2_0".join_key_2_0 = "RF_Tree_2_1".join_key_2_1 LEFT OUTER JOIN "RF_Tree_2_2" ON "RF_Tree_2_2".join_key_2_2 = "RF_Tree_2_1".join_key_2_1 LEFT OUTER JOIN "RF_Tree_2_3" ON "RF_Tree_2_3".join_key_2_3 = "RF_Tree_2_2".join_key_2_2), 
"DT_node_lookup_12" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.244552344083786) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.8805816173553467) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= -0.7128908634185791) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 0.5134130716323853) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.1661360263824463) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.12705066800117493) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.3588298559188843) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_12" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_11' AS feature, -0.244552344083786 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.009978376433486733 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_6' AS feature, 0.8805816173553467 AS threshold, 28 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23034247190559579 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_9' AS feature, -0.7128908634185791 AS threshold, 23 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3197272912101717 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8616087221890192 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.732737323744953 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_8' AS feature, 0.5134130716323853 AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18082769689545317 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.905956823684698 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9561016226077892 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_8' AS feature, 1.1661360263824463 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.14823174339264286 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_11' AS feature, -0.12705066800117493 AS threshold, 36 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18712575434779316 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9764067932082918 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9225626359609711 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'scaler_2' AS feature, -0.3588298559188843 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.31849638806916086 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9253378822051826 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7684293069459187 AS "Estimator") AS "Values"), 
"DT_Output_12" AS 
(SELECT "DT_node_lookup_12"."KEY" AS "KEY", "DT_node_lookup_12".node_id_2 AS node_id_2, "DT_node_data_12".node_id AS node_id, "DT_node_data_12".feature AS feature, "DT_node_data_12".threshold AS threshold, "DT_node_data_12".count AS count, "DT_node_data_12".depth AS depth, "DT_node_data_12".parent_id AS parent_id, "DT_node_data_12"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_12" LEFT OUTER JOIN "DT_node_data_12" ON "DT_node_lookup_12".node_id_2 = "DT_node_data_12".node_id), 
"RF_Tree_3_0" AS 
(SELECT "DT_Output_12"."KEY" AS join_key_3_0, "DT_Output_12"."Estimator" AS "Estimator_3_0" 
FROM "DT_Output_12"), 
"DT_node_lookup_13" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.06848493963479996) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.1339387893676758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.19472065567970276) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -1.0749619007110596) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.8855091333389282) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.10036088526248932) THEN 10 ELSE 11 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 0.31293585896492004) THEN 13 ELSE 14 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_13" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.06848493963479996 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.012613915277971708 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_8' AS feature, 1.1339387893676758 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.15709560874838935 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_5' AS feature, -0.19472065567970276 AS threshold, 31 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18036687329552417 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9101295044593197 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9487540785333346 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_5' AS feature, -1.0749619007110596 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0833741249053373 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5811079409447686 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8711001785856067 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_10' AS feature, 0.8855091333389282 AS threshold, 33 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.13624601132791317 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_2' AS feature, -0.10036088526248932 AS threshold, 26 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.22885396392909857 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24344355352742797 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9587982762377796 AS "Estimator" UNION ALL SELECT 12 AS node_id, 'scaler_11' AS feature, 0.31293585896492004 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.20772638404791838 AS "Estimator" UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.942242783731707 AS "Estimator" UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9745828724431832 AS "Estimator") AS "Values"), 
"DT_Output_13" AS 
(SELECT "DT_node_lookup_13"."KEY" AS "KEY", "DT_node_lookup_13".node_id_2 AS node_id_2, "DT_node_data_13".node_id AS node_id, "DT_node_data_13".feature AS feature, "DT_node_data_13".threshold AS threshold, "DT_node_data_13".count AS count, "DT_node_data_13".depth AS depth, "DT_node_data_13".parent_id AS parent_id, "DT_node_data_13"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_13" LEFT OUTER JOIN "DT_node_data_13" ON "DT_node_lookup_13".node_id_2 = "DT_node_data_13".node_id), 
"RF_Tree_3_1" AS 
(SELECT "DT_Output_13"."KEY" AS join_key_3_1, "DT_Output_13"."Estimator" AS "Estimator_3_1" 
FROM "DT_Output_13"), 
"DT_node_lookup_14" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.5896774530410767) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 0.011073504574596882) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= -1.5492777824401855) THEN 3 ELSE 4 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.0443495512008667) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= 1.5206665992736816) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= -0.7697042226791382) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_14" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.5896774530410767 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.016371944773244797 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.011073504574596882 AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.32267047838945256 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_4' AS feature, -1.5492777824401855 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.18667842777660293 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9051340461785979 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9308917357760766 AS "Estimator" UNION ALL SELECT 5 AS node_id, 'scaler_6' AS feature, 1.0443495512008667 AS threshold, 19 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4030939898893561 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4324066835565508 AS "Estimator" UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.927126606454706 AS "Estimator" UNION ALL SELECT 8 AS node_id, 'scaler_2' AS feature, 1.5206665992736816 AS threshold, 45 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.13337400499467894 AS "Estimator" UNION ALL SELECT 9 AS node_id, 'scaler_8' AS feature, -0.7697042226791382 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1498790461775722 AS "Estimator" UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23877959393434195 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9310747787143719 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8420630245676595 AS "Estimator") AS "Values"), 
"DT_Output_14" AS 
(SELECT "DT_node_lookup_14"."KEY" AS "KEY", "DT_node_lookup_14".node_id_2 AS node_id_2, "DT_node_data_14".node_id AS node_id, "DT_node_data_14".feature AS feature, "DT_node_data_14".threshold AS threshold, "DT_node_data_14".count AS count, "DT_node_data_14".depth AS depth, "DT_node_data_14".parent_id AS parent_id, "DT_node_data_14"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_14" LEFT OUTER JOIN "DT_node_data_14" ON "DT_node_lookup_14".node_id_2 = "DT_node_data_14".node_id), 
"RF_Tree_3_2" AS 
(SELECT "DT_Output_14"."KEY" AS join_key_3_2, "DT_Output_14"."Estimator" AS "Estimator_3_2" 
FROM "DT_Output_14"), 
"DT_node_lookup_15" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.38964778184890747) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 1.2273095846176147) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.6195164918899536) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.9161176681518555) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= -0.5065394043922424) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= -0.7353757619857788) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_15" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_4' AS feature, 0.38964778184890747 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.012752662230137027 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_6' AS feature, 1.2273095846176147 AS threshold, 44 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.12322833670784082 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_2' AS feature, -0.6195164918899536 AS threshold, 43 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.1380929016717701 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.03677628494376328 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9082770916439488 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5494201717456342 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_4' AS feature, 0.9161176681518555 AS threshold, 23 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.19859210633590507 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'scaler_11' AS feature, -0.5065394043922424 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4828501979211535 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8875639572546045 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7232151119772245 AS "Estimator" UNION ALL SELECT 10 AS node_id, 'scaler_7' AS feature, -0.7353757619857788 AS threshold, 14 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.01585476174538817 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6946946017656315 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 12 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3174437839351533 AS "Estimator") AS "Values"), 
"DT_Output_15" AS 
(SELECT "DT_node_lookup_15"."KEY" AS "KEY", "DT_node_lookup_15".node_id_2 AS node_id_2, "DT_node_data_15".node_id AS node_id, "DT_node_data_15".feature AS feature, "DT_node_data_15".threshold AS threshold, "DT_node_data_15".count AS count, "DT_node_data_15".depth AS depth, "DT_node_data_15".parent_id AS parent_id, "DT_node_data_15"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_15" LEFT OUTER JOIN "DT_node_data_15" ON "DT_node_lookup_15".node_id_2 = "DT_node_data_15".node_id), 
"RF_Tree_3_3" AS 
(SELECT "DT_Output_15"."KEY" AS join_key_3_3, "DT_Output_15"."Estimator" AS "Estimator_3_3" 
FROM "DT_Output_15"), 
"RF_Join_CTE_3" AS 
(SELECT "RF_Tree_3_0".join_key_3_0 AS join_key_3_0, "RF_Tree_3_0"."Estimator_3_0" AS "Estimator_3_0", "RF_Tree_3_1".join_key_3_1 AS join_key_3_1, "RF_Tree_3_1"."Estimator_3_1" AS "Estimator_3_1", "RF_Tree_3_2".join_key_3_2 AS join_key_3_2, "RF_Tree_3_2"."Estimator_3_2" AS "Estimator_3_2", "RF_Tree_3_3".join_key_3_3 AS join_key_3_3, "RF_Tree_3_3"."Estimator_3_3" AS "Estimator_3_3" 
FROM "RF_Tree_3_0" LEFT OUTER JOIN "RF_Tree_3_1" ON "RF_Tree_3_0".join_key_3_0 = "RF_Tree_3_1".join_key_3_1 LEFT OUTER JOIN "RF_Tree_3_2" ON "RF_Tree_3_2".join_key_3_2 = "RF_Tree_3_1".join_key_3_1 LEFT OUTER JOIN "RF_Tree_3_3" ON "RF_Tree_3_3".join_key_3_3 = "RF_Tree_3_2".join_key_3_2), 
"RF_Join_CTE" AS 
(SELECT "RF_Join_CTE_0".join_key_0_0 AS join_key_0_0, "RF_Join_CTE_0"."Estimator_0_0" AS "Estimator_0_0", "RF_Join_CTE_0".join_key_0_1 AS join_key_0_1, "RF_Join_CTE_0"."Estimator_0_1" AS "Estimator_0_1", "RF_Join_CTE_0".join_key_0_2 AS join_key_0_2, "RF_Join_CTE_0"."Estimator_0_2" AS "Estimator_0_2", "RF_Join_CTE_0".join_key_0_3 AS join_key_0_3, "RF_Join_CTE_0"."Estimator_0_3" AS "Estimator_0_3", "RF_Join_CTE_1".join_key_1_0 AS join_key_1_0, "RF_Join_CTE_1"."Estimator_1_0" AS "Estimator_1_0", "RF_Join_CTE_1".join_key_1_1 AS join_key_1_1, "RF_Join_CTE_1"."Estimator_1_1" AS "Estimator_1_1", "RF_Join_CTE_1".join_key_1_2 AS join_key_1_2, "RF_Join_CTE_1"."Estimator_1_2" AS "Estimator_1_2", "RF_Join_CTE_1".join_key_1_3 AS join_key_1_3, "RF_Join_CTE_1"."Estimator_1_3" AS "Estimator_1_3", "RF_Join_CTE_2".join_key_2_0 AS join_key_2_0, "RF_Join_CTE_2"."Estimator_2_0" AS "Estimator_2_0", "RF_Join_CTE_2".join_key_2_1 AS join_key_2_1, "RF_Join_CTE_2"."Estimator_2_1" AS "Estimator_2_1", "RF_Join_CTE_2".join_key_2_2 AS join_key_2_2, "RF_Join_CTE_2"."Estimator_2_2" AS "Estimator_2_2", "RF_Join_CTE_2".join_key_2_3 AS join_key_2_3, "RF_Join_CTE_2"."Estimator_2_3" AS "Estimator_2_3", "RF_Join_CTE_3".join_key_3_0 AS join_key_3_0, "RF_Join_CTE_3"."Estimator_3_0" AS "Estimator_3_0", "RF_Join_CTE_3".join_key_3_1 AS join_key_3_1, "RF_Join_CTE_3"."Estimator_3_1" AS "Estimator_3_1", "RF_Join_CTE_3".join_key_3_2 AS join_key_3_2, "RF_Join_CTE_3"."Estimator_3_2" AS "Estimator_3_2", "RF_Join_CTE_3".join_key_3_3 AS join_key_3_3, "RF_Join_CTE_3"."Estimator_3_3" AS "Estimator_3_3" 
FROM "RF_Join_CTE_0" LEFT OUTER JOIN "RF_Join_CTE_1" ON "RF_Join_CTE_0".join_key_0_0 = "RF_Join_CTE_1".join_key_1_0 LEFT OUTER JOIN "RF_Join_CTE_2" ON "RF_Join_CTE_2".join_key_2_0 = "RF_Join_CTE_1".join_key_1_0 LEFT OUTER JOIN "RF_Join_CTE_3" ON "RF_Join_CTE_3".join_key_3_0 = "RF_Join_CTE_2".join_key_2_0), 
"RF_AVG_Scores" AS 
(SELECT "RF_Join_CTE".join_key_0_0 AS "KEY", 0.268656716418 + 0.1 * "RF_Join_CTE"."Estimator_0_0" + 0.1 * "RF_Join_CTE"."Estimator_1_0" + 0.1 * "RF_Join_CTE"."Estimator_2_0" + 0.1 * "RF_Join_CTE"."Estimator_3_0" AS "Score_0", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "LogProba_0", 0.223880597015 + 0.1 * "RF_Join_CTE"."Estimator_0_1" + 0.1 * "RF_Join_CTE"."Estimator_1_1" + 0.1 * "RF_Join_CTE"."Estimator_2_1" + 0.1 * "RF_Join_CTE"."Estimator_3_1" AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_1", 0.283582089552 + 0.1 * "RF_Join_CTE"."Estimator_0_2" + 0.1 * "RF_Join_CTE"."Estimator_1_2" + 0.1 * "RF_Join_CTE"."Estimator_2_2" + 0.1 * "RF_Join_CTE"."Estimator_3_2" AS "Score_2", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "LogProba_2", 0.223880597015 + 0.1 * "RF_Join_CTE"."Estimator_0_3" + 0.1 * "RF_Join_CTE"."Estimator_1_3" + 0.1 * "RF_Join_CTE"."Estimator_2_3" + 0.1 * "RF_Join_CTE"."Estimator_3_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_3" 
FROM "RF_Join_CTE"), 
orig_cte AS 
(SELECT "RF_AVG_Scores"."KEY" AS "KEY", "RF_AVG_Scores"."Score_0" AS "Score_0", "RF_AVG_Scores"."Score_1" AS "Score_1", "RF_AVG_Scores"."Score_2" AS "Score_2", "RF_AVG_Scores"."Score_3" AS "Score_3", "RF_AVG_Scores"."Proba_0" AS "Proba_0", "RF_AVG_Scores"."Proba_1" AS "Proba_1", "RF_AVG_Scores"."Proba_2" AS "Proba_2", "RF_AVG_Scores"."Proba_3" AS "Proba_3", "RF_AVG_Scores"."LogProba_0" AS "LogProba_0", "RF_AVG_Scores"."LogProba_1" AS "LogProba_1", "RF_AVG_Scores"."LogProba_2" AS "LogProba_2", "RF_AVG_Scores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RF_AVG_Scores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte