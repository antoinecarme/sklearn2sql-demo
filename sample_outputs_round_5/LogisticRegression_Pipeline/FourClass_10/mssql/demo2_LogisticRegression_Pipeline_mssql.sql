-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.380193360068 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.23040863734 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.00364195238186 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.00912989549586 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.115604979427 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.102274597225 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.727819004004 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN -0.0313365283484 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN -0.0687310198318 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.329698105629 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.380193360068) / 1.72475135246 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.23040863734) / 0.938567516882 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.00364195238186) / 1.51654962799 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.00912989549586) / 0.930497289394 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.115604979427) / 1.45630155787 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.102274597225) / 0.924161819665 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.727819004004) / 1.87162856644 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - -0.0313365283484) / 1.11691599948 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - -0.0687310198318) / 1.4606372718 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.329698105629) / 1.48720922758 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
linear_model_cte AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], -0.5633274434514887 * [ADS_sca_2_OUT].scaler_2 + 0.3869498688362936 * [ADS_sca_2_OUT].scaler_3 + -0.11195347472928424 * [ADS_sca_2_OUT].scaler_4 + 0.187038029022313 * [ADS_sca_2_OUT].scaler_5 + -0.8180425417526744 * [ADS_sca_2_OUT].scaler_6 + -0.5460911256427847 * [ADS_sca_2_OUT].scaler_7 + -0.4584470494490974 * [ADS_sca_2_OUT].scaler_8 + -0.14696236867809026 * [ADS_sca_2_OUT].scaler_9 + -0.6686381707092751 * [ADS_sca_2_OUT].scaler_10 + 0.18105464452588416 * [ADS_sca_2_OUT].scaler_11 + -1.68497594263 AS [Score_0], 0.3626539890625315 * [ADS_sca_2_OUT].scaler_2 + 0.3901572306385231 * [ADS_sca_2_OUT].scaler_3 + -1.7527398129098277 * [ADS_sca_2_OUT].scaler_4 + -0.02020843956629359 * [ADS_sca_2_OUT].scaler_5 + -0.16319916211716312 * [ADS_sca_2_OUT].scaler_6 + 0.30862007426465327 * [ADS_sca_2_OUT].scaler_7 + 0.4841963164303675 * [ADS_sca_2_OUT].scaler_8 + 0.463473980488873 * [ADS_sca_2_OUT].scaler_9 + -0.5218369148673464 * [ADS_sca_2_OUT].scaler_10 + -0.32089315410771596 * [ADS_sca_2_OUT].scaler_11 + -1.57345565321 AS [Score_1], -0.011826245541696655 * [ADS_sca_2_OUT].scaler_2 + -0.5834103753575043 * [ADS_sca_2_OUT].scaler_3 + 0.33148713515135886 * [ADS_sca_2_OUT].scaler_4 + -0.3140690041203475 * [ADS_sca_2_OUT].scaler_5 + 0.9069050591367684 * [ADS_sca_2_OUT].scaler_6 + 0.5900761792334803 * [ADS_sca_2_OUT].scaler_7 + -0.46284917765915873 * [ADS_sca_2_OUT].scaler_8 + -0.47147780146368257 * [ADS_sca_2_OUT].scaler_9 + 0.6479544226531719 * [ADS_sca_2_OUT].scaler_10 + 0.4972241234438372 * [ADS_sca_2_OUT].scaler_11 + -1.66585117974 AS [Score_2], 0.07126168920977147 * [ADS_sca_2_OUT].scaler_2 + -0.17064475094977508 * [ADS_sca_2_OUT].scaler_3 + 1.0850788166806007 * [ADS_sca_2_OUT].scaler_4 + 0.19557522044197315 * [ADS_sca_2_OUT].scaler_5 + -0.08303138981482461 * [ADS_sca_2_OUT].scaler_6 + -0.19011176225395554 * [ADS_sca_2_OUT].scaler_7 + 0.34857521270465747 * [ADS_sca_2_OUT].scaler_8 + 0.22384370542816964 * [ADS_sca_2_OUT].scaler_9 + 0.22565307436222679 * [ADS_sca_2_OUT].scaler_10 + -0.2598114211388746 * [ADS_sca_2_OUT].scaler_11 + -1.04509933446 AS [Score_3] 
FROM [ADS_sca_2_OUT]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], linear_model_cte.[Score_3] AS [Score_3], (1.0 / (1.0 + exp(-linear_model_cte.[Score_0]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_0], (1.0 / (1.0 + exp(-linear_model_cte.[Score_1]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_1], (1.0 / (1.0 + exp(-linear_model_cte.[Score_2]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_2], (1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max.[max_LogProba] = score_class_union.[LogProba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max.[max_Proba] = score_class_union.[Proba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max.[max_Score] = score_class_union.[Score] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score] 
FROM score_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte