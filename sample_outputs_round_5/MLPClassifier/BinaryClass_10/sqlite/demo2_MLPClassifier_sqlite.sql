-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", "ADS"."Feature_0" AS "Feature_0", "ADS"."Feature_1" AS "Feature_1", "ADS"."Feature_2" AS "Feature_2", "ADS"."Feature_3" AS "Feature_3", "ADS"."Feature_4" AS "Feature_4", "ADS"."Feature_5" AS "Feature_5", "ADS"."Feature_6" AS "Feature_6", "ADS"."Feature_7" AS "Feature_7", "ADS"."Feature_8" AS "Feature_8", "ADS"."Feature_9" AS "Feature_9" 
FROM "BinaryClass_10" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.587948824026 * "IL"."Feature_0" + 0.876343926774 * "IL"."Feature_1" + -0.294904943257 * "IL"."Feature_2" + -0.0181322433484 * "IL"."Feature_3" + -2.49297500847 * "IL"."Feature_4" + 0.451602983954 * "IL"."Feature_5" + -2.70662913788 * "IL"."Feature_6" + 1.75393866294 * "IL"."Feature_7" + 0.61648756152 * "IL"."Feature_8" + -0.773239098106 * "IL"."Feature_9" + -0.295687213036 AS "NEUR_1_1", 2.62930649891 * "IL"."Feature_0" + -5.16478691556 * "IL"."Feature_1" + -0.162183678696 * "IL"."Feature_2" + -1.81954661665 * "IL"."Feature_3" + 0.912933405582 * "IL"."Feature_4" + -0.524079714734 * "IL"."Feature_5" + -0.642240603134 * "IL"."Feature_6" + 1.08778277619 * "IL"."Feature_7" + -0.0818611105842 * "IL"."Feature_8" + -0.560997191421 * "IL"."Feature_9" + -1.13572745045 AS "NEUR_1_2", 2.15675891761 * "IL"."Feature_0" + -4.23679297493 * "IL"."Feature_1" + 1.31731920921 * "IL"."Feature_2" + -1.54026545688 * "IL"."Feature_3" + -2.54599869191 * "IL"."Feature_4" + 1.03036420878 * "IL"."Feature_5" + 1.113705996 * "IL"."Feature_6" + 1.91560768118 * "IL"."Feature_7" + -1.53637746804 * "IL"."Feature_8" + 2.95877580162 * "IL"."Feature_9" + -1.63523824501 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.680174166992 * "HL_1_relu"."NEUR_1_1" + -0.843043478342 * "HL_1_relu"."NEUR_1_2" + 0.046326190738 * "HL_1_relu"."NEUR_1_3" + -0.826195484795 AS "NEUR_2_1", 0.114865780901 * "HL_1_relu"."NEUR_1_1" + 0.454334301024 * "HL_1_relu"."NEUR_1_2" + -0.683109659388 * "HL_1_relu"."NEUR_1_3" + -0.728137418025 AS "NEUR_2_2", -2.79877653752 * "HL_1_relu"."NEUR_1_1" + 3.21089292683 * "HL_1_relu"."NEUR_1_2" + 5.24614464234 * "HL_1_relu"."NEUR_1_3" + -1.80368965096 AS "NEUR_2_3", 3.52418301155 * "HL_1_relu"."NEUR_1_1" + 0.00166701080945 * "HL_1_relu"."NEUR_1_2" + -0.454123807146 * "HL_1_relu"."NEUR_1_3" + 0.426285633717 AS "NEUR_2_4", 0.0994785549826 * "HL_1_relu"."NEUR_1_1" + -0.384325793616 * "HL_1_relu"."NEUR_1_2" + -0.366467770393 * "HL_1_relu"."NEUR_1_3" + -0.846264130631 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -0.344746844414 * "HL_2_relu"."NEUR_2_1" + 0.0110501640761 * "HL_2_relu"."NEUR_2_2" + -5.36362361671 * "HL_2_relu"."NEUR_2_3" + 1.8094881159 * "HL_2_relu"."NEUR_2_4" + -0.576697918072 * "HL_2_relu"."NEUR_2_5" + 1.09921732016 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", 1.0 / (1.0 + exp(-"OL_BA"."NEUR_3_1")) AS "NEUR_3_1" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_logistic"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", 1.0 - "OL_logistic"."NEUR_3_1" AS "Proba_0", "OL_logistic"."NEUR_3_1" AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OL_logistic"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte