-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.10693636682 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0424095030283 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.0657299237327 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.0248879422994 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.144342541531 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.159456275719 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.264576294123 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.232878219876 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.00183228613267 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.154461566189 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.10693636682) / 0.97419676126 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.0424095030283) / 1.45588816189 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.0657299237327) / 0.931217209111 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - -0.0248879422994) / 0.920732302122 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.144342541531) / 1.08660224935 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.159456275719) / 1.39687728991 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.264576294123) / 0.984792074815 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.232878219876) / 1.03478641757 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.00183228613267) / 0.880404095707 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.154461566189) / 1.04958060178 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_2 AS scaler_2, "ADS_sca_2_OUT".scaler_3 AS scaler_3, "ADS_sca_2_OUT".scaler_4 AS scaler_4, "ADS_sca_2_OUT".scaler_5 AS scaler_5, "ADS_sca_2_OUT".scaler_6 AS scaler_6, "ADS_sca_2_OUT".scaler_7 AS scaler_7, "ADS_sca_2_OUT".scaler_8 AS scaler_8, "ADS_sca_2_OUT".scaler_9 AS scaler_9, "ADS_sca_2_OUT".scaler_10 AS scaler_10, "ADS_sca_2_OUT".scaler_11 AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.195625558167 * "IL".scaler_2 + -1.69085340578 * "IL".scaler_3 + 1.01363698137 * "IL".scaler_4 + 0.563709632946 * "IL".scaler_5 + -0.733664402137 * "IL".scaler_6 + 1.69639258471 * "IL".scaler_7 + -1.44032537335 * "IL".scaler_8 + 0.0652217979289 * "IL".scaler_9 + 0.665202657049 * "IL".scaler_10 + -1.94044142665 * "IL".scaler_11 + -0.0962794338801 AS "NEUR_1_1", 1.19151242378 * "IL".scaler_2 + -1.91653360377 * "IL".scaler_3 + 0.0799213102769 * "IL".scaler_4 + -0.720367235454 * "IL".scaler_5 + -1.41257503963 * "IL".scaler_6 + 0.408428088924 * "IL".scaler_7 + -0.790368015223 * "IL".scaler_8 + 0.273449068078 * "IL".scaler_9 + 0.211696173279 * "IL".scaler_10 + -0.405996354654 * "IL".scaler_11 + -0.792830615505 AS "NEUR_1_2", 0.416000277861 * "IL".scaler_2 + -0.984022034626 * "IL".scaler_3 + 0.65543732408 * "IL".scaler_4 + 0.347641868322 * "IL".scaler_5 + -2.60782669634 * "IL".scaler_6 + -0.601338157403 * "IL".scaler_7 + 0.233699559264 * "IL".scaler_8 + -1.69216775559 * "IL".scaler_9 + 0.547308238473 * "IL".scaler_10 + 1.72259427027 * "IL".scaler_11 + 0.887346566441 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -1.18032947495 * "HL_1_relu"."NEUR_1_1" + -1.23931091338 * "HL_1_relu"."NEUR_1_2" + 2.24118386355 * "HL_1_relu"."NEUR_1_3" + 0.926637596138 AS "NEUR_2_1", 0.580423328495 * "HL_1_relu"."NEUR_1_1" + 0.596667818841 * "HL_1_relu"."NEUR_1_2" + -0.6680821564 * "HL_1_relu"."NEUR_1_3" + -0.472014365578 AS "NEUR_2_2", -1.13347106788 * "HL_1_relu"."NEUR_1_1" + -1.26058514339 * "HL_1_relu"."NEUR_1_2" + -0.114796802228 * "HL_1_relu"."NEUR_1_3" + -1.66293372204 AS "NEUR_2_3", 2.09552654203 * "HL_1_relu"."NEUR_1_1" + 1.27646877058 * "HL_1_relu"."NEUR_1_2" + 0.29874126624 * "HL_1_relu"."NEUR_1_3" + 0.297333476576 AS "NEUR_2_4", -0.049647271181 * "HL_1_relu"."NEUR_1_1" + -0.900381866056 * "HL_1_relu"."NEUR_1_2" + -0.504206234851 * "HL_1_relu"."NEUR_1_3" + -0.709088356913 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -1.86151704024 * "HL_2_relu"."NEUR_2_1" + 1.17682136688 * "HL_2_relu"."NEUR_2_2" + -0.0614198478618 * "HL_2_relu"."NEUR_2_3" + 3.38348802355 * "HL_2_relu"."NEUR_2_4" + -0.692726831571 * "HL_2_relu"."NEUR_2_5" + -0.188877022852 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", 1.0 / (1.0 + exp(-"OL_BA"."NEUR_3_1")) AS "NEUR_3_1" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_logistic"."KEY" AS "KEY", CAST(NULL AS FLOAT(53)) AS "Score_0", CAST(NULL AS FLOAT(53)) AS "Score_1", 1.0 - "OL_logistic"."NEUR_3_1" AS "Proba_0", "OL_logistic"."NEUR_3_1" AS "Proba_1", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CAST(NULL AS FLOAT(53)) AS "Decision" 
FROM "OL_logistic"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte