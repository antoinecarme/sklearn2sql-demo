-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.304168577702 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.0298588487655 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN -0.0888726459794 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.0145913931306 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.082868604007 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.0735611416173 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN 0.16823790836 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN -0.0175546959632 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.140095095508 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.0485288194626 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [RandomReg_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - 0.304168577702) / 0.851502852245 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.0298588487655) / 0.912502246638 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - -0.0888726459794) / 1.02227792761 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.0145913931306) / 1.05046980664 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.082868604007) / 0.958118887455 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.0735611416173) / 0.980436153647 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - 0.16823790836) / 0.882549539349 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - -0.0175546959632) / 1.02023923191 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.140095095508) / 0.939110054816 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.0485288194626) / 0.885923016699 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[IL] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], [ADS_sca_2_OUT].scaler_2 AS scaler_2, [ADS_sca_2_OUT].scaler_3 AS scaler_3, [ADS_sca_2_OUT].scaler_4 AS scaler_4, [ADS_sca_2_OUT].scaler_5 AS scaler_5, [ADS_sca_2_OUT].scaler_6 AS scaler_6, [ADS_sca_2_OUT].scaler_7 AS scaler_7, [ADS_sca_2_OUT].scaler_8 AS scaler_8, [ADS_sca_2_OUT].scaler_9 AS scaler_9, [ADS_sca_2_OUT].scaler_10 AS scaler_10, [ADS_sca_2_OUT].scaler_11 AS scaler_11 
FROM [ADS_sca_2_OUT]), 
[HL_BA_1] AS 
(SELECT [IL].[KEY] AS [KEY], -17.6365491276 * [IL].scaler_2 + 0.529484086315 * [IL].scaler_3 + -36.8160077386 * [IL].scaler_4 + -37.9685507535 * [IL].scaler_5 + -6.08962301665 * [IL].scaler_6 + -19.0756655366 * [IL].scaler_7 + -22.9464718069 * [IL].scaler_8 + -13.7060094888 * [IL].scaler_9 + 8.93654589056 * [IL].scaler_10 + -5.66955336977 * [IL].scaler_11 + -25.1034554753 AS [NEUR_1_1], 9.74943612528 * [IL].scaler_2 + 9.23109871618 * [IL].scaler_3 + -6.71947291092 * [IL].scaler_4 + -6.04945926283 * [IL].scaler_5 + -5.51193443556 * [IL].scaler_6 + 11.0656265479 * [IL].scaler_7 + 6.21144647168 * [IL].scaler_8 + 22.0016045483 * [IL].scaler_9 + 6.93734642115 * [IL].scaler_10 + -5.67669991901 * [IL].scaler_11 + -21.5310428504 AS [NEUR_1_2], 19.9817751601 * [IL].scaler_2 + 8.14653850178 * [IL].scaler_3 + 18.8420979703 * [IL].scaler_4 + 16.4926234057 * [IL].scaler_5 + 20.0640992726 * [IL].scaler_6 + 0.278636423837 * [IL].scaler_7 + 2.44429817766 * [IL].scaler_8 + 16.3959315523 * [IL].scaler_9 + -3.95430922616 * [IL].scaler_10 + 5.01910493972 * [IL].scaler_11 + 14.6417801128 AS [NEUR_1_3] 
FROM [IL]), 
[HL_1_relu] AS 
(SELECT [HL_BA_1].[KEY] AS [KEY], CASE WHEN ([HL_BA_1].[NEUR_1_1] >= 0.0) THEN [HL_BA_1].[NEUR_1_1] ELSE 0.0 END AS [NEUR_1_1], CASE WHEN ([HL_BA_1].[NEUR_1_2] >= 0.0) THEN [HL_BA_1].[NEUR_1_2] ELSE 0.0 END AS [NEUR_1_2], CASE WHEN ([HL_BA_1].[NEUR_1_3] >= 0.0) THEN [HL_BA_1].[NEUR_1_3] ELSE 0.0 END AS [NEUR_1_3] 
FROM [HL_BA_1]), 
[HL_BA_2] AS 
(SELECT [HL_1_relu].[KEY] AS [KEY], -7.59312935858 * [HL_1_relu].[NEUR_1_1] + -35.0130491406 * [HL_1_relu].[NEUR_1_2] + -10.2391411177 * [HL_1_relu].[NEUR_1_3] + -18.0596823146 AS [NEUR_2_1], -2.44229966549 * [HL_1_relu].[NEUR_1_1] + -20.4203195002 * [HL_1_relu].[NEUR_1_2] + -18.3694283921 * [HL_1_relu].[NEUR_1_3] + -14.9821402056 AS [NEUR_2_2], 12.7745624209 * [HL_1_relu].[NEUR_1_1] + -11.0741431346 * [HL_1_relu].[NEUR_1_2] + -86.0788860372 * [HL_1_relu].[NEUR_1_3] + 53.7719227984 AS [NEUR_2_3], -10.2660424389 * [HL_1_relu].[NEUR_1_1] + -0.895606853682 * [HL_1_relu].[NEUR_1_2] + -0.501631824756 * [HL_1_relu].[NEUR_1_3] + -5.23286759661 AS [NEUR_2_4], -0.0192911798761 * [HL_1_relu].[NEUR_1_1] + -47.185391079 * [HL_1_relu].[NEUR_1_2] + -3.35911628405 * [HL_1_relu].[NEUR_1_3] + 3.46374451958 AS [NEUR_2_5] 
FROM [HL_1_relu]), 
[HL_2_relu] AS 
(SELECT [HL_BA_2].[KEY] AS [KEY], CASE WHEN ([HL_BA_2].[NEUR_2_1] >= 0.0) THEN [HL_BA_2].[NEUR_2_1] ELSE 0.0 END AS [NEUR_2_1], CASE WHEN ([HL_BA_2].[NEUR_2_2] >= 0.0) THEN [HL_BA_2].[NEUR_2_2] ELSE 0.0 END AS [NEUR_2_2], CASE WHEN ([HL_BA_2].[NEUR_2_3] >= 0.0) THEN [HL_BA_2].[NEUR_2_3] ELSE 0.0 END AS [NEUR_2_3], CASE WHEN ([HL_BA_2].[NEUR_2_4] >= 0.0) THEN [HL_BA_2].[NEUR_2_4] ELSE 0.0 END AS [NEUR_2_4], CASE WHEN ([HL_BA_2].[NEUR_2_5] >= 0.0) THEN [HL_BA_2].[NEUR_2_5] ELSE 0.0 END AS [NEUR_2_5] 
FROM [HL_BA_2]), 
[OL_BA] AS 
(SELECT [HL_2_relu].[KEY] AS [KEY], 16.016869706 * [HL_2_relu].[NEUR_2_1] + 11.6076425266 * [HL_2_relu].[NEUR_2_2] + -0.383120569633 * [HL_2_relu].[NEUR_2_3] + -3.85214996024 * [HL_2_relu].[NEUR_2_4] + -57.9299881994 * [HL_2_relu].[NEUR_2_5] + 143.98716772 AS [NEUR_3_1] 
FROM [HL_2_relu]), 
[OL_identity] AS 
(SELECT [OL_BA].[KEY] AS [KEY], [OL_BA].[NEUR_3_1] AS [NEUR_3_1] 
FROM [OL_BA])
 SELECT [OL_identity].[KEY] AS [KEY], [OL_identity].[NEUR_3_1] AS [Estimator] 
FROM [OL_identity]