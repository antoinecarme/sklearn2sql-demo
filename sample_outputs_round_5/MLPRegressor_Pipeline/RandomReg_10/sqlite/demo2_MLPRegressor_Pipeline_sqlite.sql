-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.129348666773 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0275384988645 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.160232995947 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0340499768038 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0263557641119 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.124536337876 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.0296145492275 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.18229669924 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.139141276616 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.0460145692303 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "RandomReg_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.129348666773) / 1.16176355904 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.0275384988645) / 0.997758584782 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.160232995947) / 0.974606577807 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.0340499768038) / 0.985080236881 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.0263557641119) / 1.08331256689 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.124536337876) / 0.915305588388 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.0296145492275) / 1.02386264473 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.18229669924) / 1.06137110219 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.139141276616) / 1.07043080434 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - -0.0460145692303) / 1.06202678291 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_2 AS scaler_2, "ADS_sca_2_OUT".scaler_3 AS scaler_3, "ADS_sca_2_OUT".scaler_4 AS scaler_4, "ADS_sca_2_OUT".scaler_5 AS scaler_5, "ADS_sca_2_OUT".scaler_6 AS scaler_6, "ADS_sca_2_OUT".scaler_7 AS scaler_7, "ADS_sca_2_OUT".scaler_8 AS scaler_8, "ADS_sca_2_OUT".scaler_9 AS scaler_9, "ADS_sca_2_OUT".scaler_10 AS scaler_10, "ADS_sca_2_OUT".scaler_11 AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.357933329406 * "IL".scaler_2 + 0.753505135565 * "IL".scaler_3 + 3.26508415388 * "IL".scaler_4 + 3.72484715483 * "IL".scaler_5 + 2.9821238587 * "IL".scaler_6 + 1.62995313096 * "IL".scaler_7 + 0.629947157121 * "IL".scaler_8 + 2.59683819589 * "IL".scaler_9 + 0.50793484599 * "IL".scaler_10 + 2.43622296055 * "IL".scaler_11 + -0.624761989032 AS "NEUR_1_1", -1.03998327377 * "IL".scaler_2 + -13.7493146961 * "IL".scaler_3 + -5.90825280257 * "IL".scaler_4 + -19.9067178398 * "IL".scaler_5 + -16.8450283005 * "IL".scaler_6 + -11.9655416501 * "IL".scaler_7 + -3.92576955855 * "IL".scaler_8 + -17.7629123383 * "IL".scaler_9 + -6.36347373867 * "IL".scaler_10 + -19.8913887674 * "IL".scaler_11 + 1.61164775912 AS "NEUR_1_2", 0.47252012696 * "IL".scaler_2 + 6.6104334053 * "IL".scaler_3 + 1.57213831396 * "IL".scaler_4 + 8.35778655502 * "IL".scaler_5 + 7.11940662272 * "IL".scaler_6 + 5.2860473462 * "IL".scaler_7 + 1.58490880971 * "IL".scaler_8 + 7.69102739444 * "IL".scaler_9 + 2.9393777706 * "IL".scaler_10 + 8.82119078985 * "IL".scaler_11 + -1.54513715177 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -6.33001762356 * "HL_1_relu"."NEUR_1_1" + 5.07834697477 * "HL_1_relu"."NEUR_1_2" + -2.54558973007 * "HL_1_relu"."NEUR_1_3" + 2.03508357715 AS "NEUR_2_1", -0.679809735467 * "HL_1_relu"."NEUR_1_1" + 9.88308418539 * "HL_1_relu"."NEUR_1_2" + -9.40736436525 * "HL_1_relu"."NEUR_1_3" + 1.00388701829 AS "NEUR_2_2", -4.18195924551 * "HL_1_relu"."NEUR_1_1" + -2.48610945434 * "HL_1_relu"."NEUR_1_2" + -11.4710123517 * "HL_1_relu"."NEUR_1_3" + -0.95180784233 AS "NEUR_2_3", 1.90195820569 * "HL_1_relu"."NEUR_1_1" + -1.18837659521 * "HL_1_relu"."NEUR_1_2" + 4.31311218879 * "HL_1_relu"."NEUR_1_3" + 0.479465243846 AS "NEUR_2_4", -4.0421236842 * "HL_1_relu"."NEUR_1_1" + 0.193640780224 * "HL_1_relu"."NEUR_1_2" + -4.84510215973 * "HL_1_relu"."NEUR_1_3" + 1.23816633859 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 1.46938596087 * "HL_2_relu"."NEUR_2_1" + -1.09824323269 * "HL_2_relu"."NEUR_2_2" + 5.75631368026 * "HL_2_relu"."NEUR_2_3" + 2.2565800688 * "HL_2_relu"."NEUR_2_4" + -7.23190531532 * "HL_2_relu"."NEUR_2_5" + 1.35135817695 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"