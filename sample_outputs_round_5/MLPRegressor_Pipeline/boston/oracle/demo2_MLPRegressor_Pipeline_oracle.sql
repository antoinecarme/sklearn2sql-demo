-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 3.26981218289 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 11.814159292 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 10.9415929204 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0796460176991 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.552612684366 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 6.31431563422 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 67.1421828909 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 3.83938820059 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 9.43362831858 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 404.619469027 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 18.3663716814 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 359.759587021 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 12.3942772861 ELSE "ADS"."Feature_12" END AS impter_14 
FROM boston "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 3.26981218289) / 8.06435679573 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 11.814159292) / 23.6845226609 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 10.9415929204) / 6.91219450398 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.0796460176991) / 0.270744398952 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.552612684366) / 0.116521457827 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 6.31431563422) / 0.713158124818 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 67.1421828909) / 28.1589507917 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 3.83938820059) / 2.09968835038 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 9.43362831858) / 8.61076650564 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 404.619469027) / 168.750972129 AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS FLOAT) - 18.3663716814) / 2.15547367794 AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS FLOAT) - 359.759587021) / 89.5754249699 AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS FLOAT) - 12.3942772861) / 6.97945748877 AS scaler_14 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_2 AS scaler_2, "ADS_sca_2_OUT".scaler_3 AS scaler_3, "ADS_sca_2_OUT".scaler_4 AS scaler_4, "ADS_sca_2_OUT".scaler_5 AS scaler_5, "ADS_sca_2_OUT".scaler_6 AS scaler_6, "ADS_sca_2_OUT".scaler_7 AS scaler_7, "ADS_sca_2_OUT".scaler_8 AS scaler_8, "ADS_sca_2_OUT".scaler_9 AS scaler_9, "ADS_sca_2_OUT".scaler_10 AS scaler_10, "ADS_sca_2_OUT".scaler_11 AS scaler_11, "ADS_sca_2_OUT".scaler_12 AS scaler_12, "ADS_sca_2_OUT".scaler_13 AS scaler_13, "ADS_sca_2_OUT".scaler_14 AS scaler_14 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -5.15044511205 * "IL".scaler_2 + 1.18292710005 * "IL".scaler_3 + 0.52728168691 * "IL".scaler_4 + 0.161703728557 * "IL".scaler_5 + 2.27281322659 * "IL".scaler_6 + -1.13942246278 * "IL".scaler_7 + -0.706149115763 * "IL".scaler_8 + -0.664702394646 * "IL".scaler_9 + -0.841856511567 * "IL".scaler_10 + -1.22163211314 * "IL".scaler_11 + 1.07147195217 * "IL".scaler_12 + -2.39224326767 * "IL".scaler_13 + -1.41737801482 * "IL".scaler_14 + 0.0671862871907 AS "NEUR_1_1", 2.2570630877 * "IL".scaler_2 + -0.339761447615 * "IL".scaler_3 + -0.781000703978 * "IL".scaler_4 + 0.0878610074475 * "IL".scaler_5 + 1.5014344973 * "IL".scaler_6 + 1.64561773505 * "IL".scaler_7 + 1.84052708347 * "IL".scaler_8 + 2.17060601329 * "IL".scaler_9 + -1.38159109118 * "IL".scaler_10 + 1.55416476892 * "IL".scaler_11 + 1.96744625825 * "IL".scaler_12 + -2.68607933461 * "IL".scaler_13 + 3.5512874503 * "IL".scaler_14 + -2.08863643157 AS "NEUR_1_2", 3.91465995717 * "IL".scaler_2 + 1.56639254267 * "IL".scaler_3 + 0.436623357265 * "IL".scaler_4 + 0.207828601787 * "IL".scaler_5 + 2.27501548729 * "IL".scaler_6 + 0.766233214847 * "IL".scaler_7 + -1.01586751062 * "IL".scaler_8 + -1.30852925763 * "IL".scaler_9 + -0.918145509642 * "IL".scaler_10 + -2.08973968241 * "IL".scaler_11 + 1.18616109048 * "IL".scaler_12 + -4.21704219135 * "IL".scaler_13 + -3.43568633631 * "IL".scaler_14 + 5.13373673868 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.537712575497 * "HL_1_relu"."NEUR_1_1" + -1.46349834775 * "HL_1_relu"."NEUR_1_2" + 0.516225565963 * "HL_1_relu"."NEUR_1_3" + 5.32949570722 AS "NEUR_2_1", -0.761708186384 * "HL_1_relu"."NEUR_1_1" + -0.319685945878 * "HL_1_relu"."NEUR_1_2" + -0.689275312488 * "HL_1_relu"."NEUR_1_3" + -0.0583514530806 AS "NEUR_2_2", -0.106377461433 * "HL_1_relu"."NEUR_1_1" + -0.238616654422 * "HL_1_relu"."NEUR_1_2" + -0.504125506054 * "HL_1_relu"."NEUR_1_3" + -0.583377515841 AS "NEUR_2_3", 0.0121662346067 * "HL_1_relu"."NEUR_1_1" + -0.743366304774 * "HL_1_relu"."NEUR_1_2" + -0.601184880852 * "HL_1_relu"."NEUR_1_3" + -0.812105231419 AS "NEUR_2_4", -1.62932047721 * "HL_1_relu"."NEUR_1_1" + -3.86559058614 * "HL_1_relu"."NEUR_1_2" + 1.12108886274 * "HL_1_relu"."NEUR_1_3" + -2.95487405712 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 1.45642853363 * "HL_2_relu"."NEUR_2_1" + -0.723630638668 * "HL_2_relu"."NEUR_2_2" + -0.596251927899 * "HL_2_relu"."NEUR_2_3" + -0.0736716947825 * "HL_2_relu"."NEUR_2_4" + 3.04598070298 * "HL_2_relu"."NEUR_2_5" + 12.9008688426 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"