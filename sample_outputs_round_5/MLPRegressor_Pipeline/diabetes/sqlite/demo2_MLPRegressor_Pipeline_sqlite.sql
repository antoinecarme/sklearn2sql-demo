-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.000388320004096 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.000523121409649 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.00059113583201 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.000699475650077 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.000639072638051 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.00167055436671 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.000775937697276 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.000954484248167 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.000573767437608 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.000881407121415 ELSE "ADS"."Feature_9" END AS impter_11 
FROM diabetes AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.000388320004096) / 0.0479877658692 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - -0.000523121409649) / 0.047529053468 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.00059113583201) / 0.0456995777439 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.000699475650077) / 0.0478758790487 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.000639072638051) / 0.0480272670816 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.00167055436671) / 0.0485647246577 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.000775937697276) / 0.0462775749119 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.000954484248167) / 0.0482818984956 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.000573767437608) / 0.045893243625 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.000881407121415) / 0.047439004286 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_2 AS scaler_2, "ADS_sca_2_OUT".scaler_3 AS scaler_3, "ADS_sca_2_OUT".scaler_4 AS scaler_4, "ADS_sca_2_OUT".scaler_5 AS scaler_5, "ADS_sca_2_OUT".scaler_6 AS scaler_6, "ADS_sca_2_OUT".scaler_7 AS scaler_7, "ADS_sca_2_OUT".scaler_8 AS scaler_8, "ADS_sca_2_OUT".scaler_9 AS scaler_9, "ADS_sca_2_OUT".scaler_10 AS scaler_10, "ADS_sca_2_OUT".scaler_11 AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 1.77944779043 * "IL".scaler_2 + 0.928019187271 * "IL".scaler_3 + 4.26586730974 * "IL".scaler_4 + 1.50480168554 * "IL".scaler_5 + -3.63169672665 * "IL".scaler_6 + 0.238759442433 * "IL".scaler_7 + 2.54849736859 * "IL".scaler_8 + 3.53377838102 * "IL".scaler_9 + 2.46647004204 * "IL".scaler_10 + 2.10778952898 * "IL".scaler_11 + 2.11372648713 AS "NEUR_1_1", -0.0919938776231 * "IL".scaler_2 + 7.89332087416 * "IL".scaler_3 + -4.21818319137 * "IL".scaler_4 + -4.6108243718 * "IL".scaler_5 + -0.263053731022 * "IL".scaler_6 + 1.56921794069 * "IL".scaler_7 + -2.05668649962 * "IL".scaler_8 + 0.241067314675 * "IL".scaler_9 + -3.10159965594 * "IL".scaler_10 + -1.53795272271 * "IL".scaler_11 + -0.270279967771 AS "NEUR_1_2", 1.3554676654 * "IL".scaler_2 + 0.416335640817 * "IL".scaler_3 + -0.168656395419 * "IL".scaler_4 + -1.22643040024 * "IL".scaler_5 + -0.256190781327 * "IL".scaler_6 + 1.93945058763 * "IL".scaler_7 + 4.79896476165 * "IL".scaler_8 + -2.31059814383 * "IL".scaler_9 + -5.22413037956 * "IL".scaler_10 + 0.429011082912 * "IL".scaler_11 + 0.358788673212 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.557399923172 * "HL_1_relu"."NEUR_1_1" + -6.87042269505 * "HL_1_relu"."NEUR_1_2" + -1.72579936332 * "HL_1_relu"."NEUR_1_3" + -5.10178552384 AS "NEUR_2_1", -0.915560843634 * "HL_1_relu"."NEUR_1_1" + -4.36335887456 * "HL_1_relu"."NEUR_1_2" + -2.39481048096 * "HL_1_relu"."NEUR_1_3" + -3.65609430414 AS "NEUR_2_2", -1.20235749834 * "HL_1_relu"."NEUR_1_1" + -1.77688493984 * "HL_1_relu"."NEUR_1_2" + -3.22765864876 * "HL_1_relu"."NEUR_1_3" + -7.345602467 AS "NEUR_2_3", 0.87524161472 * "HL_1_relu"."NEUR_1_1" + -0.98037316328 * "HL_1_relu"."NEUR_1_2" + -1.63070444863 * "HL_1_relu"."NEUR_1_3" + 1.51325844009 AS "NEUR_2_4", 0.130258073797 * "HL_1_relu"."NEUR_1_1" + -0.0872010026327 * "HL_1_relu"."NEUR_1_2" + -0.140463934869 * "HL_1_relu"."NEUR_1_3" + 3.48977593064 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 2.69384360561 * "HL_2_relu"."NEUR_2_1" + 1.01732005274 * "HL_2_relu"."NEUR_2_2" + 0.697510138657 * "HL_2_relu"."NEUR_2_3" + 2.40741113978 * "HL_2_relu"."NEUR_2_4" + 28.1979381109 * "HL_2_relu"."NEUR_2_5" + 53.5278939372 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"