-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.521380219946 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.549590611139 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.524179615335 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.504794154204 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.477297795009 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.416789375015 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.489479131994 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.495496229188 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.504482776494 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.530747390476 ELSE "ADS"."Feature_9" END AS impter_11 
FROM freidman1 AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.521380219946) / 0.269965714386 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.549590611139) / 0.278950559351 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.524179615335) / 0.258443497056 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.504794154204) / 0.312675795927 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.477297795009) / 0.288948565751 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.416789375015) / 0.25065203483 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.489479131994) / 0.272321501027 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.495496229188) / 0.275466343079 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.504482776494) / 0.269131179492 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.530747390476) / 0.301348834236 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_2 AS scaler_2, "ADS_sca_2_OUT".scaler_3 AS scaler_3, "ADS_sca_2_OUT".scaler_4 AS scaler_4, "ADS_sca_2_OUT".scaler_5 AS scaler_5, "ADS_sca_2_OUT".scaler_6 AS scaler_6, "ADS_sca_2_OUT".scaler_7 AS scaler_7, "ADS_sca_2_OUT".scaler_8 AS scaler_8, "ADS_sca_2_OUT".scaler_9 AS scaler_9, "ADS_sca_2_OUT".scaler_10 AS scaler_10, "ADS_sca_2_OUT".scaler_11 AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.150893001529 * "IL".scaler_2 + 0.317367078605 * "IL".scaler_3 + -1.23641320377 * "IL".scaler_4 + 0.611912520701 * "IL".scaler_5 + 0.440605743678 * "IL".scaler_6 + 0.0486944812936 * "IL".scaler_7 + -0.0941767188454 * "IL".scaler_8 + 0.0737765641386 * "IL".scaler_9 + 0.206583049235 * "IL".scaler_10 + -0.0979163116526 * "IL".scaler_11 + -0.629120401276 AS "NEUR_1_1", 0.534141363265 * "IL".scaler_2 + -0.101052256643 * "IL".scaler_3 + 0.722823277615 * "IL".scaler_4 + 0.128099118175 * "IL".scaler_5 + 0.105604317657 * "IL".scaler_6 + 0.0148860800429 * "IL".scaler_7 + 0.321483168525 * "IL".scaler_8 + 0.687340182637 * "IL".scaler_9 + -0.397179020346 * "IL".scaler_10 + 0.564815662415 * "IL".scaler_11 + -0.870561828077 AS "NEUR_1_2", -1.22996523402 * "IL".scaler_2 + -1.03760598765 * "IL".scaler_3 + -0.31789009758 * "IL".scaler_4 + -1.66048970566 * "IL".scaler_5 + -0.75069492336 * "IL".scaler_6 + -0.480543366627 * "IL".scaler_7 + 0.394721393334 * "IL".scaler_8 + 0.354041456597 * "IL".scaler_9 + -0.245501564317 * "IL".scaler_10 + -0.0759159449808 * "IL".scaler_11 + 1.12603478459 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.107979274359 * "HL_1_relu"."NEUR_1_1" + -0.646442676146 * "HL_1_relu"."NEUR_1_2" + -0.83717419756 * "HL_1_relu"."NEUR_1_3" + -1.27260921636 AS "NEUR_2_1", -0.858930686845 * "HL_1_relu"."NEUR_1_1" + -0.45808411963 * "HL_1_relu"."NEUR_1_2" + -0.177562319414 * "HL_1_relu"."NEUR_1_3" + -0.887368346305 AS "NEUR_2_2", -0.0984054923142 * "HL_1_relu"."NEUR_1_1" + -0.561882876607 * "HL_1_relu"."NEUR_1_2" + -0.52051911221 * "HL_1_relu"."NEUR_1_3" + -0.964151435883 AS "NEUR_2_3", 0.308241706235 * "HL_1_relu"."NEUR_1_1" + -0.0929864776564 * "HL_1_relu"."NEUR_1_2" + -0.502239444121 * "HL_1_relu"."NEUR_1_3" + 0.32461637053 AS "NEUR_2_4", 0.837927155708 * "HL_1_relu"."NEUR_1_1" + 0.724150725413 * "HL_1_relu"."NEUR_1_2" + -0.546370793502 * "HL_1_relu"."NEUR_1_3" + 2.20372337321 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -0.00297555511992 * "HL_2_relu"."NEUR_2_1" + -0.265571841393 * "HL_2_relu"."NEUR_2_2" + -0.302187268436 * "HL_2_relu"."NEUR_2_3" + 0.450340390396 * "HL_2_relu"."NEUR_2_4" + 3.87912060308 * "HL_2_relu"."NEUR_2_5" + 7.4016385549 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"