-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.121588427086 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0278636555214 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.0128010466743 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.170238823349 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0428511756916 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.00925141774585 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.0540302083625 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0388283619911 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0460695888113 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.136933711496 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.121588427086) / 0.926371354347 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.0278636555214) / 1.08476633889 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.0128010466743) / 0.944573277097 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.170238823349) / 1.00963194459 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.0428511756916) / 1.18949518993 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.00925141774585) / 1.07324271769 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.0540302083625) / 1.31065629011 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.0388283619911) / 0.974804404486 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.0460695888113) / 1.02163090736 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.136933711496) / 1.14465359169 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
linear_model_cte AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", -0.02453089458560335 * "ADS_sca_2_OUT".scaler_2 + 0.7894971711368776 * "ADS_sca_2_OUT".scaler_3 + 0.062245709070282956 * "ADS_sca_2_OUT".scaler_4 + 0.06947497803508067 * "ADS_sca_2_OUT".scaler_5 + 0.10462459251068035 * "ADS_sca_2_OUT".scaler_6 + -0.031184259558766227 * "ADS_sca_2_OUT".scaler_7 + 0.056753292482601754 * "ADS_sca_2_OUT".scaler_8 + -0.008138558389021512 * "ADS_sca_2_OUT".scaler_9 + -0.06416894398076124 * "ADS_sca_2_OUT".scaler_10 + 0.13518528461497495 * "ADS_sca_2_OUT".scaler_11 + -0.0149253731343 AS linear_combination 
FROM "ADS_sca_2_OUT")
 SELECT linear_model_cte."KEY" AS "KEY", -linear_model_cte.linear_combination AS "Score_0", linear_model_cte.linear_combination AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CASE WHEN (linear_model_cte.linear_combination >= 0.0) THEN 1 ELSE 0 END AS "Decision" 
FROM linear_model_cte