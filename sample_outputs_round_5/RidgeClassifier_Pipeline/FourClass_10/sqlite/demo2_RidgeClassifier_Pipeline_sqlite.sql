-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.428526727781 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.711199137974 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.0134804295556 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.251704022074 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.728099861439 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.065618279514 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.019794686745 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0725647060417 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.088976247273 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.323890295791 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.428526727781) / 1.60668302731 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - -0.711199137974) / 1.4921936612 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.0134804295556) / 1.00569624842 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.251704022074) / 1.17162217259 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.728099861439) / 1.80758075947 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.065618279514) / 0.860457332208 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.019794686745) / 0.879189021246 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.0725647060417) / 1.00298110484 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.088976247273) / 2.2659294866 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.323890295791) / 1.43563072285 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
linear_model_cte AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", -0.31409184162892095 * "ADS_sca_2_OUT".scaler_2 + -0.1589915163127472 * "ADS_sca_2_OUT".scaler_3 + -0.13784049989995695 * "ADS_sca_2_OUT".scaler_4 + -0.018656937818080293 * "ADS_sca_2_OUT".scaler_5 + -0.00410442629996597 * "ADS_sca_2_OUT".scaler_6 + 0.012321368697872929 * "ADS_sca_2_OUT".scaler_7 + -0.004873940723430081 * "ADS_sca_2_OUT".scaler_8 + -0.007965369367644044 * "ADS_sca_2_OUT".scaler_9 + 0.05463935204192574 * "ADS_sca_2_OUT".scaler_10 + -0.3881721023655828 * "ADS_sca_2_OUT".scaler_11 + -0.462686567164 AS "Score_0", -0.22413406887575832 * "ADS_sca_2_OUT".scaler_2 + -0.00936037223607093 * "ADS_sca_2_OUT".scaler_3 + -0.0030876901243244324 * "ADS_sca_2_OUT".scaler_4 + -0.09943334637124164 * "ADS_sca_2_OUT".scaler_5 + 0.22867873673679542 * "ADS_sca_2_OUT".scaler_6 + -0.007916450751555936 * "ADS_sca_2_OUT".scaler_7 + 0.15583326904172978 * "ADS_sca_2_OUT".scaler_8 + -0.09686310659074014 * "ADS_sca_2_OUT".scaler_9 + -0.060992555818098766 * "ADS_sca_2_OUT".scaler_10 + 0.08811351509662171 * "ADS_sca_2_OUT".scaler_11 + -0.55223880597 AS "Score_1", 0.02734013041394565 * "ADS_sca_2_OUT".scaler_2 + 0.07806948234254542 * "ADS_sca_2_OUT".scaler_3 + 0.08884203344208486 * "ADS_sca_2_OUT".scaler_4 + 0.13526263181297593 * "ADS_sca_2_OUT".scaler_5 + -0.14592151073411685 * "ADS_sca_2_OUT".scaler_6 + 0.009780779653162621 * "ADS_sca_2_OUT".scaler_7 + -0.07400840795130736 * "ADS_sca_2_OUT".scaler_8 + 0.09842027156322034 * "ADS_sca_2_OUT".scaler_9 + -0.07803662110128642 * "ADS_sca_2_OUT".scaler_10 + -0.05628400721452246 * "ADS_sca_2_OUT".scaler_11 + -0.55223880597 AS "Score_2", 0.5108857800907284 * "ADS_sca_2_OUT".scaler_2 + 0.09028240620627037 * "ADS_sca_2_OUT".scaler_3 + 0.05208615658219664 * "ADS_sca_2_OUT".scaler_4 + -0.017172347623656325 * "ADS_sca_2_OUT".scaler_5 + -0.07865279970272065 * "ADS_sca_2_OUT".scaler_6 + -0.014185697599479652 * "ADS_sca_2_OUT".scaler_7 + -0.07695092036699254 * "ADS_sca_2_OUT".scaler_8 + 0.006408204395163823 * "ADS_sca_2_OUT".scaler_9 + 0.08438982487746197 * "ADS_sca_2_OUT".scaler_10 + 0.35634259448348954 * "ADS_sca_2_OUT".scaler_11 + -0.432835820896 AS "Score_3" 
FROM "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte