-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.107210024333 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.148330656545 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.0997205188328 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.170492733928 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0720553338949 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.128752590969 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.308813263982 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0485240595117 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.135059750481 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.073198994722 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.107210024333) / 1.51671215652 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.148330656545) / 1.19097297239 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.0997205188328) / 0.938311481077 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.170492733928) / 1.36757743043 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.0720553338949) / 1.11927379301 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.128752590969) / 1.47777584653 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.308813263982) / 1.07264259711 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.0485240595117) / 0.837379690545 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.135059750481) / 0.914414075989 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - -0.073198994722) / 1.02093364153 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
linear_model_cte AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", 41.156986426337035 * "ADS_sca_2_OUT".scaler_2 + 22.039862801670278 * "ADS_sca_2_OUT".scaler_3 + 59.345842991082776 * "ADS_sca_2_OUT".scaler_4 + -16.52067642471889 * "ADS_sca_2_OUT".scaler_5 + 1.687439685950542 * "ADS_sca_2_OUT".scaler_6 + 36.38547809581132 * "ADS_sca_2_OUT".scaler_7 + 5.996324599707496 * "ADS_sca_2_OUT".scaler_8 + -11.448203735753912 * "ADS_sca_2_OUT".scaler_9 + 3.7987419994347946 * "ADS_sca_2_OUT".scaler_10 + -1.05692454643284 * "ADS_sca_2_OUT".scaler_11 + -0.100360700578 AS linear_combination 
FROM "ADS_sca_2_OUT")
 SELECT linear_model_cte."KEY" AS "KEY", -linear_model_cte.linear_combination AS "Score_0", linear_model_cte.linear_combination AS "Score_1", CAST(NULL AS FLOAT(53)) AS "Proba_0", CAST(NULL AS FLOAT(53)) AS "Proba_1", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CASE WHEN (linear_model_cte.linear_combination >= 0.0) THEN 1 ELSE 0 END AS "Decision" 
FROM linear_model_cte