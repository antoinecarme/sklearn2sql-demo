-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.412014997426 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.155265018648 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.112275099618 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.0684047051759 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.608948300044 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.832778933346 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.323850242816 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.200880339434 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.259646364227 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.0408135798559 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.412014997426) / 0.84524625311 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.155265018648) / 1.01685759153 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.112275099618) / 0.981693654514 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - -0.0684047051759) / 0.935077103832 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.608948300044) / 0.958783121449 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.832778933346) / 1.0592750181 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.323850242816) / 1.53056536044 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.200880339434) / 1.52181193645 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.259646364227) / 1.36373098377 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - -0.0408135798559) / 0.805760914936 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
linear_model_cte AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", -12.662621898302719 * "ADS_sca_2_OUT".scaler_2 + 2.3472318177402864 * "ADS_sca_2_OUT".scaler_3 + 13.322994254017747 * "ADS_sca_2_OUT".scaler_4 + 12.16366457657327 * "ADS_sca_2_OUT".scaler_5 + 16.813060881974238 * "ADS_sca_2_OUT".scaler_6 + 22.14722258662623 * "ADS_sca_2_OUT".scaler_7 + -5.302599150494542 * "ADS_sca_2_OUT".scaler_8 + 3.9538144187802136 * "ADS_sca_2_OUT".scaler_9 + -36.47361869044726 * "ADS_sca_2_OUT".scaler_10 + -25.30765120282656 * "ADS_sca_2_OUT".scaler_11 + -33.7349464332 AS "Score_0", -3.047337802594723 * "ADS_sca_2_OUT".scaler_2 + 20.075140894215426 * "ADS_sca_2_OUT".scaler_3 + 14.526060905274349 * "ADS_sca_2_OUT".scaler_4 + 37.99598259772232 * "ADS_sca_2_OUT".scaler_5 + 5.112258945975279 * "ADS_sca_2_OUT".scaler_6 + 0.484866157216933 * "ADS_sca_2_OUT".scaler_7 + 20.361097638496734 * "ADS_sca_2_OUT".scaler_8 + -30.5364426657018 * "ADS_sca_2_OUT".scaler_9 + 31.077519359315822 * "ADS_sca_2_OUT".scaler_10 + -2.5674477373812503 * "ADS_sca_2_OUT".scaler_11 + -35.874167098 AS "Score_1", 8.093349153660686 * "ADS_sca_2_OUT".scaler_2 + -13.680949194606585 * "ADS_sca_2_OUT".scaler_3 + 10.31102582911022 * "ADS_sca_2_OUT".scaler_4 + -45.14514916138086 * "ADS_sca_2_OUT".scaler_5 + -12.434483233371397 * "ADS_sca_2_OUT".scaler_6 + -16.742122658891667 * "ADS_sca_2_OUT".scaler_7 + -1.122965166228783 * "ADS_sca_2_OUT".scaler_8 + 9.369094861715725 * "ADS_sca_2_OUT".scaler_9 + 18.735055534998892 * "ADS_sca_2_OUT".scaler_10 + 9.06895653267617 * "ADS_sca_2_OUT".scaler_11 + -48.4923937329 AS "Score_2", 3.151111390605807 * "ADS_sca_2_OUT".scaler_2 + 5.13172772765939 * "ADS_sca_2_OUT".scaler_3 + -2.239442330183102 * "ADS_sca_2_OUT".scaler_4 + -4.5928893312792765 * "ADS_sca_2_OUT".scaler_5 + -1.4661196779410217 * "ADS_sca_2_OUT".scaler_6 + 5.331485574082338 * "ADS_sca_2_OUT".scaler_7 + -14.35323320345702 * "ADS_sca_2_OUT".scaler_8 + -1.4349786286986292 * "ADS_sca_2_OUT".scaler_9 + 8.805396292075745 * "ADS_sca_2_OUT".scaler_10 + -2.2462371336607463 * "ADS_sca_2_OUT".scaler_11 + -38.0181730222 AS "Score_3" 
FROM "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte