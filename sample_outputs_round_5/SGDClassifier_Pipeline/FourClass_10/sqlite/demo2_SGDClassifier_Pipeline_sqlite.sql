-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0289684959162 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.105619565933 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.00294540778776 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0144927815752 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0366759079926 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0135694451273 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.187217666213 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0893614042147 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.412203522575 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.0333956497756 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.0289684959162) / 1.41671766225 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.105619565933) / 0.836455990508 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.00294540778776) / 2.76968546181 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.0144927815752) / 1.39268546823 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.0366759079926) / 0.98689576101 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.0135694451273) / 1.04392531307 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.187217666213) / 1.69463147424 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.0893614042147) / 1.02902197924 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.412203522575) / 1.5007105465 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - -0.0333956497756) / 1.6913203257 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
linear_model_cte AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", -23.4689078321701 * "ADS_sca_2_OUT".scaler_2 + 7.892490245391632 * "ADS_sca_2_OUT".scaler_3 + 37.44660866229232 * "ADS_sca_2_OUT".scaler_4 + 11.37126522651213 * "ADS_sca_2_OUT".scaler_5 + 26.391869442873197 * "ADS_sca_2_OUT".scaler_6 + -3.730585376562766 * "ADS_sca_2_OUT".scaler_7 + -44.79354256600076 * "ADS_sca_2_OUT".scaler_8 + 36.18939805490146 * "ADS_sca_2_OUT".scaler_9 + -25.9585124357913 * "ADS_sca_2_OUT".scaler_10 + 1.6533931173343932 * "ADS_sca_2_OUT".scaler_11 + -65.5598744441 AS "Score_0", -23.466471255204542 * "ADS_sca_2_OUT".scaler_2 + 2.828052937078379 * "ADS_sca_2_OUT".scaler_3 + 4.6920508453209635 * "ADS_sca_2_OUT".scaler_4 + 15.82993790610313 * "ADS_sca_2_OUT".scaler_5 + -1.3251429834352266 * "ADS_sca_2_OUT".scaler_6 + 21.220989607713864 * "ADS_sca_2_OUT".scaler_7 + 4.908799950908608 * "ADS_sca_2_OUT".scaler_8 + -1.3974963350559602 * "ADS_sca_2_OUT".scaler_9 + 22.202189268896966 * "ADS_sca_2_OUT".scaler_10 + -0.4200734130020695 * "ADS_sca_2_OUT".scaler_11 + -47.6923085641 AS "Score_1", 15.870758899527493 * "ADS_sca_2_OUT".scaler_2 + -9.703965400403165 * "ADS_sca_2_OUT".scaler_3 + 3.637497875260396 * "ADS_sca_2_OUT".scaler_4 + -11.883108324189525 * "ADS_sca_2_OUT".scaler_5 + -8.563287804357639 * "ADS_sca_2_OUT".scaler_6 + -6.530657866140613 * "ADS_sca_2_OUT".scaler_7 + -13.046204240062545 * "ADS_sca_2_OUT".scaler_8 + 3.905735026787411 * "ADS_sca_2_OUT".scaler_9 + -25.724072169787767 * "ADS_sca_2_OUT".scaler_10 + 1.0320749755579202 * "ADS_sca_2_OUT".scaler_11 + -52.4625331352 AS "Score_2", -15.480525033839527 * "ADS_sca_2_OUT".scaler_2 + 2.945885751258329 * "ADS_sca_2_OUT".scaler_3 + -20.84766682714177 * "ADS_sca_2_OUT".scaler_4 + 7.055446336884895 * "ADS_sca_2_OUT".scaler_5 + -5.759368575953117 * "ADS_sca_2_OUT".scaler_6 + -1.3748030486078193 * "ADS_sca_2_OUT".scaler_7 + 47.26231722977898 * "ADS_sca_2_OUT".scaler_8 + 4.510951230609741 * "ADS_sca_2_OUT".scaler_9 + 46.553393452105354 * "ADS_sca_2_OUT".scaler_10 + 6.1255909636633685 * "ADS_sca_2_OUT".scaler_11 + -62.8586342822 AS "Score_3" 
FROM "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max."max_LogProba" = score_class_union."LogProba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max."max_Proba" = score_class_union."Proba" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max."max_Score" = score_class_union."Score" AND score_max."KEY" = score_class_union."KEY") AS "arg_max_Score" 
FROM score_max)
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte