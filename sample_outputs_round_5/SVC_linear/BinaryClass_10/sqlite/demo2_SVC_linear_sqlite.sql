-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "SV_data" AS 
(SELECT "Values".sv_idx AS sv_idx, "Values".dual_coeff AS dual_coeff, "Values".sv_0 AS sv_0, "Values".sv_1 AS sv_1, "Values".sv_2 AS sv_2, "Values".sv_3 AS sv_3, "Values".sv_4 AS sv_4, "Values".sv_5 AS sv_5, "Values".sv_6 AS sv_6, "Values".sv_7 AS sv_7, "Values".sv_8 AS sv_8, "Values".sv_9 AS sv_9 
FROM (SELECT 0 AS sv_idx, -0.194837560709 AS dual_coeff, 2.23502585283 AS sv_0, 0.640808634029 AS sv_1, 0.565986671777 AS sv_2, -0.461450362027 AS sv_3, 0.119210812783 AS sv_4, -1.11833963244 AS sv_5, 1.31378200214 AS sv_6, -0.79457739715 AS sv_7, -1.46703249148 AS sv_8, -0.794418788637 AS sv_9 UNION ALL SELECT 1 AS sv_idx, -0.0355812934415 AS dual_coeff, 0.0447620592421 AS sv_0, -1.97358504659 AS sv_1, 0.489215112559 AS sv_2, -0.952608667102 AS sv_3, 0.432971516492 AS sv_4, -1.09949854254 AS sv_5, 0.755837400933 AS sv_6, -0.711126839676 AS sv_7, -0.706901283685 AS sv_8, -0.940791207221 AS sv_9 UNION ALL SELECT 2 AS sv_idx, -0.193580644304 AS dual_coeff, -0.736845497714 AS sv_0, -0.333865146441 AS sv_1, -0.162642497714 AS sv_2, -2.11558825271 AS sv_3, -0.38237742381 AS sv_4, 2.65520885422 AS sv_5, -1.33246784846 AS sv_6, 0.198350442518 AS sv_7, 1.11309150727 AS sv_8, -0.0848920732481 AS sv_9 UNION ALL SELECT 3 AS sv_idx, -0.336586756757 AS dual_coeff, -0.508229170859 AS sv_0, 0.0700769429543 AS sv_1, 0.157730087373 AS sv_2, -0.478210434622 AS sv_3, 0.25594747777 AS sv_4, 0.046348129478 AS sv_5, 2.0166716556 AS sv_6, -0.285712404413 AS sv_7, 1.07381263628 AS sv_8, -0.892851073426 AS sv_9 UNION ALL SELECT 4 AS sv_idx, -0.0425848724435 AS dual_coeff, 0.301569217341 AS sv_0, 0.234968341292 AS sv_1, 0.111143318436 AS sv_2, 0.979864600103 AS sv_3, 1.55373894453 AS sv_4, -0.8902725643 AS sv_5, -1.41280487229 AS sv_6, -0.203534694942 AS sv_7, 0.807620797847 AS sv_8, -0.652222623897 AS sv_9 UNION ALL SELECT 5 AS sv_idx, 0.255899535765 AS dual_coeff, 0.399208444785 AS sv_0, 0.947376560907 AS sv_1, -0.592474665925 AS sv_2, -1.09225045347 AS sv_3, 0.747508033518 AS sv_4, 0.542300437547 AS sv_5, 1.51816669082 AS sv_6, 0.81683385337 AS sv_7, 1.88005434036 AS sv_8, 0.675641292813 AS sv_9 UNION ALL SELECT 6 AS sv_idx, 0.376800750546 AS dual_coeff, 0.296231014396 AS sv_0, -0.741813736905 AS sv_1, -0.109015919864 AS sv_2, -0.919952467508 AS sv_3, -0.732644070038 AS sv_4, -0.196709131986 AS sv_5, 1.55922691844 AS sv_6, 0.184950861886 AS sv_7, -0.453368340199 AS sv_8, 0.486305560015 AS sv_9 UNION ALL SELECT 7 AS sv_idx, 0.0210686310151 AS dual_coeff, 1.09899972368 AS sv_0, -0.76621207535 AS sv_1, -0.0742458654769 AS sv_2, 2.28102938691 AS sv_3, 0.643727335897 AS sv_4, -0.286748922403 AS sv_5, -0.617105984494 AS sv_6, 0.155218724397 AS sv_7, -0.983612286019 AS sv_8, 0.636823893326 AS sv_9 UNION ALL SELECT 8 AS sv_idx, 0.149402210328 AS dual_coeff, -0.992821824974 AS sv_0, -0.0465807023822 AS sv_1, -0.139757304323 AS sv_2, -0.0121345399975 AS sv_3, 1.00254326239 AS sv_4, -0.359941091563 AS sv_5, -1.0257106785 AS sv_6, 0.250310817967 AS sv_7, -0.885816993733 AS sv_8, 0.761387512217 AS sv_9) AS "Values"), 
kernel_cte AS 
(SELECT t."KEY" AS "KEY", t.dot_product AS dot_product 
FROM (SELECT full_join_data_sv."KEY" AS "KEY", sum(full_join_data_sv.dot_prod1) + -0.0180950167489 AS dot_product 
FROM (SELECT "ADS"."KEY" AS "KEY", "SV_data".dual_coeff * ("ADS"."Feature_0" * "SV_data".sv_0 + "ADS"."Feature_1" * "SV_data".sv_1 + "ADS"."Feature_2" * "SV_data".sv_2 + "ADS"."Feature_3" * "SV_data".sv_3 + "ADS"."Feature_4" * "SV_data".sv_4 + "ADS"."Feature_5" * "SV_data".sv_5 + "ADS"."Feature_6" * "SV_data".sv_6 + "ADS"."Feature_7" * "SV_data".sv_7 + "ADS"."Feature_8" * "SV_data".sv_8 + "ADS"."Feature_9" * "SV_data".sv_9) AS dot_prod1 
FROM "BinaryClass_10" AS "ADS", "SV_data") AS full_join_data_sv GROUP BY full_join_data_sv."KEY") AS t)
 SELECT kernel_cte."KEY" AS "KEY", -kernel_cte.dot_product AS "Score_0", kernel_cte.dot_product AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CASE WHEN (kernel_cte.dot_product >= 0.0) THEN 1 ELSE 0 END AS "Decision" 
FROM kernel_cte