-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `DT_node_lookup` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.07206400483846664) THEN CASE WHEN (`ADS`.`Feature_1` <= 751.956787109375) THEN CASE WHEN (`ADS`.`Feature_3` <= 6.0884294509887695) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.26337993144989014) THEN CASE WHEN (`ADS`.`Feature_1` <= 289.2763671875) THEN 8 ELSE 9 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 37.746158599853516) THEN 11 ELSE 12 END END END AS node_id_2 
FROM freidman3 AS `ADS`), 
`DT_node_data` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.07206400483846664 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.341584695992394 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 751.956787109375 AS threshold, 6 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.47479947849027804 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 6.0884294509887695 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.385237864660201 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.36980569916165795 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.416102195657287 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.5643610923203553 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 0.26337993144989014 AS threshold, 61 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.426842258369651 AS `Estimator` UNION ALL SELECT 7 AS node_id, 'Feature_1' AS feature, 289.2763671875 AS threshold, 17 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.2523609917353462 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.6499907517537618 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.2900091317341955 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_0' AS feature, 37.746158599853516 AS threshold, 44 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.4942554750238144 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 25 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.5334736045966553 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.4426526729542866 AS `Estimator`) AS `Values`), 
`DT_Output` AS 
(SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup` LEFT OUTER JOIN `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id), 
`AdaBoost_Estim_0` AS 
(SELECT `DT_Output`.`KEY` AS join_key_0, `DT_Output`.`Estimator` AS `Estimator_0` 
FROM `DT_Output`), 
`DT_node_lookup_1` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.14237841963768005) THEN CASE WHEN (`ADS`.`Feature_1` <= 425.2525634765625) THEN CASE WHEN (`ADS`.`Feature_0` <= 61.33948516845703) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 48.17298889160156) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_0` <= 72.720947265625) THEN CASE WHEN (`ADS`.`Feature_1` <= 323.3580322265625) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_3` <= 10.432172775268555) THEN 13 ELSE 14 END END END AS node_id_2 
FROM freidman3 AS `ADS`), 
`DT_node_data_1` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.14237841963768005 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.2497800246003476 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 425.2525634765625 AS threshold, 18 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.6472201222669518 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 61.33948516845703 AS threshold, 12 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.46301957926642134 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.36980569916165795 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.4714935683668544 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_0' AS feature, 48.17298889160156 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.0156212082680127 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.2616420159626414 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.8926108044206982 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_0' AS feature, 72.720947265625 AS threshold, 49 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.471128560151392 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_1' AS feature, 323.3580322265625 AS threshold, 40 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.5055909361552893 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.3748698016332879 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 37 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.5161899470624791 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_3' AS feature, 10.432172775268555 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.3179624445785103 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.368911424330596 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.2160644850743398 AS `Estimator`) AS `Values`), 
`DT_Output_1` AS 
(SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_1` LEFT OUTER JOIN `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id), 
`AdaBoost_Estim_1` AS 
(SELECT `DT_Output_1`.`KEY` AS join_key_1, `DT_Output_1`.`Estimator` AS `Estimator_1` 
FROM `DT_Output_1`), 
`DT_node_lookup_2` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.2981571555137634) THEN CASE WHEN (`ADS`.`Feature_0` <= 9.650169372558594) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_0` <= 77.12982177734375) THEN 4 ELSE 5 END END ELSE CASE WHEN (`ADS`.`Feature_0` <= 49.8038330078125) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.9838632941246033) THEN 8 ELSE 9 END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.47292375564575195) THEN 11 ELSE 12 END END END AS node_id_2 
FROM freidman3 AS `ADS`), 
`DT_node_data_2` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.2981571555137634 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.1801746265676547 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_0' AS feature, 9.650169372558594 AS threshold, 35 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.9038447848595869 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.5159503036176265 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_0' AS feature, 77.12982177734375 AS threshold, 29 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.7772022637372339 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 22 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.8935265052437787 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.4116117904309506 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 49.8038330078125 AS threshold, 32 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.4824103909358535 AS `Estimator` UNION ALL SELECT 7 AS node_id, 'Feature_2' AS feature, 0.9838632941246033 AS threshold, 20 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.515917433661807 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 19 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.5216795075881087 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.4064380290620686 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_2' AS feature, 0.47292375564575195 AS threshold, 12 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.4265653197259305 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.3667616125221909 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.4564671733278003 AS `Estimator`) AS `Values`), 
`DT_Output_2` AS 
(SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_2` LEFT OUTER JOIN `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id), 
`AdaBoost_Estim_2` AS 
(SELECT `DT_Output_2`.`KEY` AS join_key_2, `DT_Output_2`.`Estimator` AS `Estimator_2` 
FROM `DT_Output_2`), 
`DT_node_lookup_3` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.07206400483846664) THEN CASE WHEN (`ADS`.`Feature_3` <= 9.079948425292969) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.06573006510734558) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 429.5220947265625) THEN CASE WHEN (`ADS`.`Feature_0` <= 51.63371276855469) THEN 8 ELSE 9 END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.0744650661945343) THEN 11 ELSE 12 END END END AS node_id_2 
FROM freidman3 AS `ADS`), 
`DT_node_data_3` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.07206400483846664 AS threshold, 67 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.1304666861835784 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 9.079948425292969 AS threshold, 14 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.4476735998999362 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 0.06573006510734558 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.38284721522192555 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.3412784896777237 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.41610219565728707 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.5643610923203553 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 429.5220947265625 AS threshold, 53 AS count, 1 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.3108271240698235 AS `Estimator` UNION ALL SELECT 7 AS node_id, 'Feature_0' AS feature, 51.63371276855469 AS threshold, 12 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.8990811385085878 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.207670586392383 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.5904916906247927 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_2' AS feature, 0.0744650661945343 AS threshold, 41 AS count, 2 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.4313381442340878 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.0672291468751336 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 39 AS count, 3 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 1.4500104005089058 AS `Estimator`) AS `Values`), 
`DT_Output_3` AS 
(SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_3` LEFT OUTER JOIN `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id), 
`AdaBoost_Estim_3` AS 
(SELECT `DT_Output_3`.`KEY` AS join_key_3, `DT_Output_3`.`Estimator` AS `Estimator_3` 
FROM `DT_Output_3`), 
`AdaBoost_Join_CTE` AS 
(SELECT `AdaBoost_Estim_0`.join_key_0 AS join_key_0, `AdaBoost_Estim_0`.`Estimator_0` AS `Estimator_0`, `AdaBoost_Estim_1`.join_key_1 AS join_key_1, `AdaBoost_Estim_1`.`Estimator_1` AS `Estimator_1`, `AdaBoost_Estim_2`.join_key_2 AS join_key_2, `AdaBoost_Estim_2`.`Estimator_2` AS `Estimator_2`, `AdaBoost_Estim_3`.join_key_3 AS join_key_3, `AdaBoost_Estim_3`.`Estimator_3` AS `Estimator_3` 
FROM `AdaBoost_Estim_0` LEFT OUTER JOIN `AdaBoost_Estim_1` ON `AdaBoost_Estim_0`.join_key_0 = `AdaBoost_Estim_1`.join_key_1 LEFT OUTER JOIN `AdaBoost_Estim_2` ON `AdaBoost_Estim_2`.join_key_2 = `AdaBoost_Estim_1`.join_key_1 LEFT OUTER JOIN `AdaBoost_Estim_3` ON `AdaBoost_Estim_3`.join_key_3 = `AdaBoost_Estim_2`.join_key_2), 
`WeightedEstimators` AS 
(SELECT `Values`.`Key` AS `Key`, `Values`.sub_estimator AS sub_estimator, `Values`.`Weight` AS `Weight`, `Values`.`Value` AS `Value` 
FROM (SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 0 AS sub_estimator, 0.308154937209 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_0` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 1 AS sub_estimator, 0.259876737123 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_1` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 2 AS sub_estimator, 0.233457331329 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_2` AS `Value` 
FROM `AdaBoost_Join_CTE` UNION ALL SELECT `AdaBoost_Join_CTE`.join_key_0 AS `Key`, 3 AS sub_estimator, 0.198510994338 AS `Weight`, `AdaBoost_Join_CTE`.`Estimator_3` AS `Value` 
FROM `AdaBoost_Join_CTE`) AS `Values`), 
`Cumulative_Frequencies` AS 
(SELECT u1.`Key` AS `Key`, u1.sub_estimator AS sub_estimator, u1.`Weight` AS `Weight`, u1.`Value` AS `Value`, (SELECT sum(u2.`Weight`) AS sum_1 
FROM `WeightedEstimators` AS u2 
WHERE u1.`Key` = u2.`Key` AND u1.`Value` >= u2.`Value`) AS cum_weight 
FROM `WeightedEstimators` AS u1), 
`Quantiles` AS 
(SELECT `AdaBoost_Join_CTE`.join_key_0 AS join_key_0, `AdaBoost_Join_CTE`.`Estimator_0` AS `Estimator_0`, `AdaBoost_Join_CTE`.join_key_1 AS join_key_1, `AdaBoost_Join_CTE`.`Estimator_1` AS `Estimator_1`, `AdaBoost_Join_CTE`.join_key_2 AS join_key_2, `AdaBoost_Join_CTE`.`Estimator_2` AS `Estimator_2`, `AdaBoost_Join_CTE`.join_key_3 AS join_key_3, `AdaBoost_Join_CTE`.`Estimator_3` AS `Estimator_3`, (SELECT min(`Cumulative_Frequencies`.`Value`) AS min_1 
FROM `Cumulative_Frequencies` 
WHERE `AdaBoost_Join_CTE`.join_key_0 = `Cumulative_Frequencies`.`Key` AND `Cumulative_Frequencies`.cum_weight >= 0.5) AS `Median` 
FROM `AdaBoost_Join_CTE`)
 SELECT `Quantiles`.join_key_0 AS `KEY`, `Quantiles`.`Median` AS `Estimator` 
FROM `Quantiles`