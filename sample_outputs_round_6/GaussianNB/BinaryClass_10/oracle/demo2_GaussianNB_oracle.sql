-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "RawScores" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -0.678332094775 + (-0.5 * 1.67697717494 - (0.5 * ("ADS"."Feature_0" - -0.089165111733) * ("ADS"."Feature_0" - -0.089165111733)) / 0.851377296969) + (-0.5 * 2.03143342405 - (0.5 * ("ADS"."Feature_1" - 0.0561688606874) * ("ADS"."Feature_1" - 0.0561688606874)) / 1.21355777788) + (-0.5 * 1.65392377334 - (0.5 * ("ADS"."Feature_2" - 0.209262999341) * ("ADS"."Feature_2" - 0.209262999341)) / 0.831974661906) + (-0.5 * 1.25499176668 - (0.5 * ("ADS"."Feature_3" - 0.806538601227) * ("ADS"."Feature_3" - 0.806538601227)) / 0.558285220283) + (-0.5 * 1.47066338476 - (0.5 * ("ADS"."Feature_4" - -0.582831987392) * ("ADS"."Feature_4" - -0.582831987392)) / 0.692661620155) + (-0.5 * 1.5171217551 - (0.5 * ("ADS"."Feature_5" - 0.194654434269) * ("ADS"."Feature_5" - 0.194654434269)) / 0.725600775573) + (-0.5 * 1.90186906429 - (0.5 * ("ADS"."Feature_6" - -0.132006529858) * ("ADS"."Feature_6" - -0.132006529858)) / 1.0660838678) + (-0.5 * 1.24318226122 - (0.5 * ("ADS"."Feature_7" - -0.81949274682) * ("ADS"."Feature_7" - -0.81949274682)) / 0.551730925593) + (-0.5 * 1.56569359566 - (0.5 * ("ADS"."Feature_8" - 0.215442996919) * ("ADS"."Feature_8" - 0.215442996919)) / 0.761714495939) + (-0.5 * 2.09280752562 - (0.5 * ("ADS"."Feature_9" - -0.00462039229569) * ("ADS"."Feature_9" - -0.00462039229569)) / 1.29037188427) AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -0.708185057924 + (-0.5 * 1.92792254962 - (0.5 * ("ADS"."Feature_0" - 0.277958779612) * ("ADS"."Feature_0" - 0.277958779612)) / 1.0942240514) + (-0.5 * 1.24981695357 - (0.5 * ("ADS"."Feature_1" - -0.0620436106436) * ("ADS"."Feature_1" - -0.0620436106436)) / 0.555403660802) + (-0.5 * 2.1406920231 - (0.5 * ("ADS"."Feature_2" - 0.0546831280549) * ("ADS"."Feature_2" - 0.0546831280549)) / 1.35366395481) + (-0.5 * 2.21955778565 - (0.5 * ("ADS"."Feature_3" - -0.726889059479) * ("ADS"."Feature_3" - -0.726889059479)) / 1.46474434578) + (-0.5 * 2.09637652735 - (0.5 * ("ADS"."Feature_4" - 0.446007471763) * ("ADS"."Feature_4" - 0.446007471763)) / 1.29498545178) + (-0.5 * 1.50850904332 - (0.5 * ("ADS"."Feature_5" - 0.106382824192) * ("ADS"."Feature_5" - 0.106382824192)) / 0.719378220231) + (-0.5 * 1.50987607265 - (0.5 * ("ADS"."Feature_6" - -0.41104543613) * ("ADS"."Feature_6" - -0.41104543613)) / 0.720362303839) + (-0.5 * 2.04935147329 - (0.5 * ("ADS"."Feature_7" - 0.824177990644) * ("ADS"."Feature_7" - 0.824177990644)) / 1.23549834497) + (-0.5 * 1.96388729367 - (0.5 * ("ADS"."Feature_8" - -0.317083986772) * ("ADS"."Feature_8" - -0.317083986772)) / 1.13429376894) + (-0.5 * 1.99454480302 - (0.5 * ("ADS"."Feature_9" - -0.188559457549) * ("ADS"."Feature_9" - -0.188559457549)) / 1.16960693177) AS "Score_1" 
FROM "BinaryClass_10" "ADS"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte