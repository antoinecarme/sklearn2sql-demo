-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "RawScores" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -1.56563528978 + (-0.5 * 3.01468856167 - (0.5 * ("ADS"."Feature_0" - -0.0944830424835) * ("ADS"."Feature_0" - -0.0944830424835)) / 3.24401414066) + (-0.5 * 2.55060551139 - (0.5 * ("ADS"."Feature_1" - -0.35977235679) * ("ADS"."Feature_1" - -0.35977235679)) / 2.03954846971) + (-0.5 * 2.64810751876 - (0.5 * ("ADS"."Feature_2" - -0.535059438344) * ("ADS"."Feature_2" - -0.535059438344)) / 2.24842608204) + (-0.5 * 1.36873052912 - (0.5 * ("ADS"."Feature_3" - 0.307502671421) * ("ADS"."Feature_3" - 0.307502671421)) / 0.625535912105) + (-0.5 * 3.21111705772 - (0.5 * ("ADS"."Feature_4" - -0.0118955798799) * ("ADS"."Feature_4" - -0.0118955798799)) / 3.94812187561) + (-0.5 * 3.33045896255 - (0.5 * ("ADS"."Feature_5" - 0.313879606443) * ("ADS"."Feature_5" - 0.313879606443)) / 4.4485664408) + (-0.5 * 0.930614603898 - (0.5 * ("ADS"."Feature_6" - -0.462998094968) * ("ADS"."Feature_6" - -0.462998094968)) / 0.403627658845) + (-0.5 * 3.37746569913 - (0.5 * ("ADS"."Feature_7" - -0.121490626596) * ("ADS"."Feature_7" - -0.121490626596)) / 4.66267180582) + (-0.5 * 1.76974353441 - (0.5 * ("ADS"."Feature_8" - -0.283004719964) * ("ADS"."Feature_8" - -0.283004719964)) / 0.934135728234) + (-0.5 * 1.41469015725 - (0.5 * ("ADS"."Feature_9" - -0.0694098749881) * ("ADS"."Feature_9" - -0.0694098749881)) / 0.654956204355) AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -1.31432086149 + (-0.5 * 2.33650291305 - (0.5 * ("ADS"."Feature_0" - -0.167192563193) * ("ADS"."Feature_0" - -0.167192563193)) / 1.64645723076) + (-0.5 * 3.29593817181 - (0.5 * ("ADS"."Feature_1" - -0.517582361757) * ("ADS"."Feature_1" - -0.517582361757)) / 4.29761881517) + (-0.5 * 2.46596172881 - (0.5 * ("ADS"."Feature_2" - 0.202580371794) * ("ADS"."Feature_2" - 0.202580371794)) / 1.87401776295) + (-0.5 * 2.3004644562 - (0.5 * ("ADS"."Feature_3" - -0.0939589431806) * ("ADS"."Feature_3" - -0.0939589431806)) / 1.58817790879) + (-0.5 * 2.16923535609 - (0.5 * ("ADS"."Feature_4" - 0.0123448870649) * ("ADS"."Feature_4" - 0.0123448870649)) / 1.39285874984) + (-0.5 * 2.04721882444 - (0.5 * ("ADS"."Feature_5" - 1.45741835174) * ("ADS"."Feature_5" - 1.45741835174)) / 1.23286626849) + (-0.5 * 1.94702254658 - (0.5 * ("ADS"."Feature_6" - 0.437272439976) * ("ADS"."Feature_6" - 0.437272439976)) / 1.11532459615) + (-0.5 * 2.89953414731 - (0.5 * ("ADS"."Feature_7" - -1.50184229893) * ("ADS"."Feature_7" - -1.50184229893)) / 2.89115790456) + (-0.5 * 1.18923307403 - (0.5 * ("ADS"."Feature_8" - -0.00415560629986) * ("ADS"."Feature_8" - -0.00415560629986)) / 0.522754154985) + (-0.5 * 1.47484771961 - (0.5 * ("ADS"."Feature_9" - -0.215678165671) * ("ADS"."Feature_9" - -0.215678165671)) / 0.695566020565) AS "Score_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "Proba_2", -1.26025364022 + (-0.5 * 2.31852934185 - (0.5 * ("ADS"."Feature_0" - 0.136686553912) * ("ADS"."Feature_0" - 0.136686553912)) / 1.6171288717) + (-0.5 * 2.24629789857 - (0.5 * ("ADS"."Feature_1" - 0.18954266658) * ("ADS"."Feature_1" - 0.18954266658)) / 1.50444014476) + (-0.5 * 2.41825725666 - (0.5 * ("ADS"."Feature_2" - 0.0782917584469) * ("ADS"."Feature_2" - 0.0782917584469)) / 1.78671759424) + (-0.5 * 1.55236962532 - (0.5 * ("ADS"."Feature_3" - -0.133238987005) * ("ADS"."Feature_3" - -0.133238987005)) / 0.75163274819) + (-0.5 * 2.6784675072 - (0.5 * ("ADS"."Feature_4" - 0.381896063322) * ("ADS"."Feature_4" - 0.381896063322)) / 2.31773505817) + (-0.5 * 2.13814248124 - (0.5 * ("ADS"."Feature_5" - -1.05157372571) * ("ADS"."Feature_5" - -1.05157372571)) / 1.35021712767) + (-0.5 * 1.57781225862 - (0.5 * ("ADS"."Feature_6" - -0.252443055229) * ("ADS"."Feature_6" - -0.252443055229)) / 0.771001617274) + (-0.5 * 3.54792770226 - (0.5 * ("ADS"."Feature_7" - 0.859653249422) * ("ADS"."Feature_7" - 0.859653249422)) / 5.52924144835) + (-0.5 * 1.06871065402 - (0.5 * ("ADS"."Feature_8" - 0.037493510892) * ("ADS"."Feature_8" - 0.037493510892)) / 0.463399191178) + (-0.5 * 1.02831478732 - (0.5 * ("ADS"."Feature_9" - 0.0973417639242) * ("ADS"."Feature_9" - 0.0973417639242)) / 0.445052832525) AS "Score_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Proba_3", -1.43210389715 + (-0.5 * 1.85864312761 - (0.5 * ("ADS"."Feature_0" - 0.829204557116) * ("ADS"."Feature_0" - 0.829204557116)) / 1.02098317612) + (-0.5 * 2.60049750236 - (0.5 * ("ADS"."Feature_1" - -0.441554609962) * ("ADS"."Feature_1" - -0.441554609962)) / 2.14388678422) + (-0.5 * 2.27401192597 - (0.5 * ("ADS"."Feature_2" - -1.38438485549) * ("ADS"."Feature_2" - -1.38438485549)) / 1.54671737031) + (-0.5 * 1.31465375609 - (0.5 * ("ADS"."Feature_3" - 0.462154094385) * ("ADS"."Feature_3" - 0.462154094385)) / 0.592607308891) + (-0.5 * 1.68846383254 - (0.5 * ("ADS"."Feature_4" - 0.782121070306) * ("ADS"."Feature_4" - 0.782121070306)) / 0.861213158908) + (-0.5 * 2.77246730094 - (0.5 * ("ADS"."Feature_5" - -0.502574777962) * ("ADS"."Feature_5" - -0.502574777962)) / 2.54616991145) + (-0.5 * 1.91990410918 - (0.5 * ("ADS"."Feature_6" - -0.0324884159671) * ("ADS"."Feature_6" - -0.0324884159671)) / 1.08548516396) + (-0.5 * 2.83599105171 - (0.5 * ("ADS"."Feature_7" - 1.38994180552) * ("ADS"."Feature_7" - 1.38994180552)) / 2.71315994046) + (-0.5 * 1.48273667694 - (0.5 * ("ADS"."Feature_8" - 0.0438876899088) * ("ADS"."Feature_8" - 0.0438876899088)) / 0.701075012753) + (-0.5 * 2.22546572171 - (0.5 * ("ADS"."Feature_9" - 0.0383470918537) * ("ADS"."Feature_9" - 0.0383470918537)) / 1.47342357464) AS "Score_3" 
FROM "FourClass_10" "ADS"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte