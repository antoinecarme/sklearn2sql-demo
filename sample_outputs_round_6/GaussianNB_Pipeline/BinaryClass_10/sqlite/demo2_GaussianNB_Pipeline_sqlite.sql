-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0845512540657 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0265890243133 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.0856348007252 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.214346204087 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.105344252157 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.179037693941 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.0789207844714 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.116610525509 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0101318244414 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0180709566286 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.0845512540657) / 0.958592350124 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.0265890243133) / 1.02264923399 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.0856348007252) / 1.08331676968 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.214346204087) / 1.30039142565 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.105344252157) / 0.893544644855 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.179037693941) / 1.37231918232 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.0789207844714) / 0.842900748697 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.116610525509) / 1.16662773122 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.0101318244414) / 1.25731626533 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.0180709566286) / 0.878763693572 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"RawScores" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -0.770705414906 + (-0.5 * 1.84266806954 - (0.5 * ("ADS_sca_2_OUT".scaler_2 - 0.0106450659356) * ("ADS_sca_2_OUT".scaler_2 - 0.0106450659356)) / 1.00480249834) + (-0.5 * 1.66727963276 - (0.5 * ("ADS_sca_2_OUT".scaler_3 - -0.137290901362) * ("ADS_sca_2_OUT".scaler_3 - -0.137290901362)) / 0.843160933377) + (-0.5 * 1.72810259231 - (0.5 * ("ADS_sca_2_OUT".scaler_4 - 0.145837160297) * ("ADS_sca_2_OUT".scaler_4 - 0.145837160297)) / 0.896036191877) + (-0.5 * 1.83954126888 - (0.5 * ("ADS_sca_2_OUT".scaler_5 - -0.123498223025) * ("ADS_sca_2_OUT".scaler_5 - -0.123498223025)) / 1.00166558803) + (-0.5 * 1.70176469215 - (0.5 * ("ADS_sca_2_OUT".scaler_6 - 0.0517293359654) * ("ADS_sca_2_OUT".scaler_6 - 0.0517293359654)) / 0.872744552959) + (-0.5 * 1.80940485905 - (0.5 * ("ADS_sca_2_OUT".scaler_7 - -0.361815470762) * ("ADS_sca_2_OUT".scaler_7 - -0.361815470762)) / 0.971929306253) + (-0.5 * 1.60339774988 - (0.5 * ("ADS_sca_2_OUT".scaler_8 - -0.582466175139) * ("ADS_sca_2_OUT".scaler_8 - -0.582466175139)) / 0.790982593988) + (-0.5 * 1.98402709886 - (0.5 * ("ADS_sca_2_OUT".scaler_9 - -0.0446272221112) * ("ADS_sca_2_OUT".scaler_9 - -0.0446272221112)) / 1.15736981806) + (-0.5 * 0.850736561359 - (0.5 * ("ADS_sca_2_OUT".scaler_10 - -0.851377657166) * ("ADS_sca_2_OUT".scaler_10 - -0.851377657166)) / 0.37264073328) + (-0.5 * 1.71982228246 - (0.5 * ("ADS_sca_2_OUT".scaler_11 - 0.253382903195) * ("ADS_sca_2_OUT".scaler_11 - 0.253382903195)) / 0.888647367671) AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -0.621173680935 + (-0.5 * 1.83355063289 - (0.5 * ("ADS_sca_2_OUT".scaler_2 - -0.00916658455565) * ("ADS_sca_2_OUT".scaler_2 - -0.00916658455565)) / 0.995682912014) + (-0.5 * 1.93758515145 - (0.5 * ("ADS_sca_2_OUT".scaler_3 - 0.118222720618) * ("ADS_sca_2_OUT".scaler_3 - 0.118222720618)) / 1.10484834924) + (-0.5 * 1.89183389041 - (0.5 * ("ADS_sca_2_OUT".scaler_4 - -0.125581999144) * ("ADS_sca_2_OUT".scaler_4 - -0.125581999144)) / 1.05543903154) + (-0.5 * 1.81165919738 - (0.5 * ("ADS_sca_2_OUT".scaler_5 - 0.106345692049) * ("ADS_sca_2_OUT".scaler_5 - 0.106345692049)) / 0.974122835291) + (-0.5 * 1.93798714675 - (0.5 * ("ADS_sca_2_OUT".scaler_6 - -0.0445447059702) * ("ADS_sca_2_OUT".scaler_6 - -0.0445447059702)) / 1.10529258237) + (-0.5 * 1.63253887278 - (0.5 * ("ADS_sca_2_OUT".scaler_7 - 0.311563322045) * ("ADS_sca_2_OUT".scaler_7 - 0.311563322045)) / 0.814371854461) + (-0.5 * 1.38574511651 - (0.5 * ("ADS_sca_2_OUT".scaler_8 - 0.501568095259) * ("ADS_sca_2_OUT".scaler_8 - 0.501568095259)) / 0.636270208395) + (-0.5 * 1.68855924791 - (0.5 * ("ADS_sca_2_OUT".scaler_9 - 0.038428996818) * ("ADS_sca_2_OUT".scaler_9 - 0.038428996818)) / 0.861295335803) + (-0.5 * 0.866533815231 - (0.5 * ("ADS_sca_2_OUT".scaler_10 - 0.733130760337) * ("ADS_sca_2_OUT".scaler_10 - 0.733130760337)) / 0.378574176207) + (-0.5 * 1.8308463329 - (0.5 * ("ADS_sca_2_OUT".scaler_11 - -0.218190833307) * ("ADS_sca_2_OUT".scaler_11 - -0.218190833307)) / 0.992993924278) AS "Score_1" 
FROM "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", CAST(NULL AS FLOAT) AS "Decision" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte