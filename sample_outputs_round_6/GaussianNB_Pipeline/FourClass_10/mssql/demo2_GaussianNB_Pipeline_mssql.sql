-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.515453824909 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.328867442663 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.124074039581 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.343347213633 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.087729168843 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.366257861756 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.0531736140246 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.207216080108 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.259632795458 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.169886586188 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.515453824909) / 1.6795237254 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.328867442663) / 1.35573147785 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.124074039581) / 1.08819171728 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.343347213633) / 2.32957715008 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.087729168843) / 0.981564418507 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.366257861756) / 1.34692574363 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.0531736140246) / 0.968525059724 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.207216080108) / 0.912521448239 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.259632795458) / 0.549964573109 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.169886586188) / 1.71970263193 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[RawScores] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Proba_0], -1.31432086149 + (-0.5 * 1.94581761765 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - 0.218363642828) * ([ADS_sca_2_OUT].scaler_2 - 0.218363642828)) / 1.1139815186) + (-0.5 * 1.32472024019 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - 0.503625113997) * ([ADS_sca_2_OUT].scaler_3 - 0.503625113997)) / 0.598602907613) + (-0.5 * 1.89530040508 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - -0.432567151988) * ([ADS_sca_2_OUT].scaler_4 - -0.432567151988)) / 1.05910407521) + (-0.5 * 1.23370124075 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - -0.200858304083) * ([ADS_sca_2_OUT].scaler_5 - -0.200858304083)) / 0.546524672685) + (-0.5 * 1.9908156733 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - -0.25159290393) * ([ADS_sca_2_OUT].scaler_6 - -0.25159290393)) / 1.16525343822) + (-0.5 * 1.13810251872 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - -0.162754430772) * ([ADS_sca_2_OUT].scaler_7 - -0.162754430772)) / 0.496697272719) + (-0.5 * 1.74445951727 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - -0.140221266404) * ([ADS_sca_2_OUT].scaler_8 - -0.140221266404)) / 0.910813111652) + (-0.5 * 1.84432024394 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - -0.355514160879) * ([ADS_sca_2_OUT].scaler_9 - -0.355514160879)) / 1.00646397945) + (-0.5 * 2.36441414707 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - -0.173009320445) * ([ADS_sca_2_OUT].scaler_10 - -0.173009320445)) / 1.69305921797) + (-0.5 * 2.02234887713 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - 0.112157387172) * ([ADS_sca_2_OUT].scaler_11 - 0.112157387172)) / 1.20258308086) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Proba_1], -1.26025364022 + (-0.5 * 1.29436589072 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - 0.452696296874) * ([ADS_sca_2_OUT].scaler_2 - 0.452696296874)) / 0.58070570884) + (-0.5 * 0.756166211445 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - -0.838415738938) * ([ADS_sca_2_OUT].scaler_3 - -0.838415738938)) / 0.339015023673) + (-0.5 * 1.87476049558 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - 0.477146602044) * ([ADS_sca_2_OUT].scaler_4 - 0.477146602044)) / 1.03757206315) + (-0.5 * 1.36446360566 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - -0.781934235466) * ([ADS_sca_2_OUT].scaler_5 - -0.781934235466)) / 0.622872484609) + (-0.5 * 1.64883259903 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - -0.0910044891218) * ([ADS_sca_2_OUT].scaler_6 - -0.0910044891218)) / 0.827749698019) + (-0.5 * 1.34523876052 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - -0.790369518996) * ([ADS_sca_2_OUT].scaler_7 - -0.790369518996)) / 0.611012228628) + (-0.5 * 2.00007367658 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - 0.153487292909) * ([ADS_sca_2_OUT].scaler_8 - 0.153487292909)) / 1.17609145013) + (-0.5 * 1.39689321876 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - 0.0909519554609) * ([ADS_sca_2_OUT].scaler_9 - 0.0909519554609)) / 0.643403098964) + (-0.5 * 1.3293676215 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - 0.0761045951015) * ([ADS_sca_2_OUT].scaler_10 - 0.0761045951015)) / 0.601391317964) + (-0.5 * 1.52306734629 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - 0.639311539561) * ([ADS_sca_2_OUT].scaler_11 - 0.639311539561)) / 0.729927751622) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Proba_2], -1.80679734659 + (-0.5 * 1.27372490743 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - -0.505053789791) * ([ADS_sca_2_OUT].scaler_2 - -0.505053789791)) / 0.56884223014) + (-0.5 * 1.79529859769 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - -0.535123021693) * ([ADS_sca_2_OUT].scaler_3 - -0.535123021693)) / 0.958315264797) + (-0.5 * 1.9022236475 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - -0.169456849886) * ([ADS_sca_2_OUT].scaler_4 - -0.169456849886)) / 1.06646195026) + (-0.5 * 1.48527084044 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - 0.551514142946) * ([ADS_sca_2_OUT].scaler_5 - 0.551514142946)) / 0.702853904511) + (-0.5 * 1.51977811541 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - 0.556421994574) * ([ADS_sca_2_OUT].scaler_6 - 0.556421994574)) / 0.727530794954) + (-0.5 * 0.270777539447 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - 1.13360351983) * ([ADS_sca_2_OUT].scaler_7 - 1.13360351983)) / 0.208649487761) + (-0.5 * 1.99543624957 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - 0.440945713255) * ([ADS_sca_2_OUT].scaler_8 - 0.440945713255)) / 1.17065003871) + (-0.5 * 1.86789157083 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - 0.0799219669449) * ([ADS_sca_2_OUT].scaler_9 - 0.0799219669449)) / 1.0304694802) + (-0.5 * 1.50731234827 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - -0.0383584942945) * ([ADS_sca_2_OUT].scaler_10 - -0.0383584942945)) / 0.71851785877) + (-0.5 * 1.72980292266 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - -0.34569909677) * ([ADS_sca_2_OUT].scaler_11 - -0.34569909677)) / 0.897561045426) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Proba_3], -1.26025364022 + (-0.5 * 1.86581604956 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - -0.367167553884) * ([ADS_sca_2_OUT].scaler_2 - -0.367167553884)) / 1.02833293687) + (-0.5 * 1.15664192322 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - 0.671105275079) * ([ADS_sca_2_OUT].scaler_3 - 0.671105275079)) / 0.505991634123) + (-0.5 * 1.02920790947 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - 0.030760455037) * ([ADS_sca_2_OUT].scaler_4 - 0.030760455037)) / 0.445450496622) + (-0.5 * 1.51866264908 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - 0.652923388154) * ([ADS_sca_2_OUT].scaler_5 - 0.652923388154)) / 0.726719711301) + (-0.5 * 1.76088060869 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - 0.00721661177595) * ([ADS_sca_2_OUT].scaler_6 - 0.00721661177595)) / 0.925893133376) + (-0.5 * 1.67193762605 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - 0.288261152455) * ([ADS_sca_2_OUT].scaler_7 - 0.288261152455)) / 0.847097532561) + (-0.5 * 1.29093076558 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - -0.275930453464) * ([ADS_sca_2_OUT].scaler_8 - -0.275930453464)) / 0.57871433433) + (-0.5 * 1.98741034074 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - 0.199580321351) * ([ADS_sca_2_OUT].scaler_9 - 0.199580321351)) / 1.16129211139) + (-0.5 * 1.68459484868 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - 0.110006520965) * ([ADS_sca_2_OUT].scaler_10 - 0.110006520965)) / 0.857887576559) + (-0.5 * 0.788469962622 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - -0.545424324016) * ([ADS_sca_2_OUT].scaler_11 - -0.545424324016)) / 0.350145287395) AS [Score_3] 
FROM [ADS_sca_2_OUT]), 
orig_cte AS 
(SELECT [RawScores].[KEY] AS [KEY], [RawScores].[Score_0] AS [Score_0], [RawScores].[Score_1] AS [Score_1], [RawScores].[Score_2] AS [Score_2], [RawScores].[Score_3] AS [Score_3], [RawScores].[Proba_0] AS [Proba_0], [RawScores].[Proba_1] AS [Proba_1], [RawScores].[Proba_2] AS [Proba_2], [RawScores].[Proba_3] AS [Proba_3], [RawScores].[LogProba_0] AS [LogProba_0], [RawScores].[LogProba_1] AS [LogProba_1], [RawScores].[LogProba_2] AS [LogProba_2], [RawScores].[LogProba_3] AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RawScores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte