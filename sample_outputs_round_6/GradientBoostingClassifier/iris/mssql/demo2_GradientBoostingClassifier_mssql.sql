-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.75) THEN 1 ELSE 2 END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.75 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.04254247275092429 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.133043425422554 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9697568798677559 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[RF_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0_0, [DT_Output].[Estimator] AS [Estimator_0_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 2 ELSE CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN 4 ELSE 5 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN CASE WHEN ([ADS].[Feature_1] <= 3.0999999046325684) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.010398254264375444 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 66 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18020793864955995 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9734548148714427 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5231507975468295 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8258263870219005 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.43637080309595644 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3192323095421595 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_1' AS feature, 3.0999999046325684 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.15135592575195833 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0235059516761635 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9121697912248723 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0235059516761635 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[RF_Tree_0_1] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_0_1, [DT_Output_1].[Estimator] AS [Estimator_0_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 4.75) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN CASE WHEN ([ADS].[Feature_3] <= 0.75) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_2] <= 5.050000190734863) THEN CASE WHEN ([ADS].[Feature_0] <= 6.5) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.7000000476837158) THEN 11 ELSE 12 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 4.75 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.031201185866561603 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 59 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.3182753811468297 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.75 AS threshold, 58 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.33521444671794254 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0017999557389818 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0037282149923084 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.9852520901664092 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 41 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5341064896175389 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_0' AS feature, 6.5 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.27573388430053924 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.1972884972049251 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0269770684249486 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'Feature_3' AS feature, 1.7000000476837158 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6288431115671055 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.82803213641509 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7927154829239622 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[RF_Tree_0_2] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_0_2, [DT_Output_2].[Estimator] AS [Estimator_0_2] 
FROM [DT_Output_2]), 
[RF_Join_CTE_0] AS 
(SELECT [RF_Tree_0_0].join_key_0_0 AS join_key_0_0, [RF_Tree_0_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Tree_0_1].join_key_0_1 AS join_key_0_1, [RF_Tree_0_1].[Estimator_0_1] AS [Estimator_0_1], [RF_Tree_0_2].join_key_0_2 AS join_key_0_2, [RF_Tree_0_2].[Estimator_0_2] AS [Estimator_0_2] 
FROM [RF_Tree_0_0] LEFT OUTER JOIN [RF_Tree_0_1] ON [RF_Tree_0_0].join_key_0_0 = [RF_Tree_0_1].join_key_0_1 LEFT OUTER JOIN [RF_Tree_0_2] ON [RF_Tree_0_2].join_key_0_2 = [RF_Tree_0_1].join_key_0_1), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.75) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_3] <= 1.350000023841858) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN 7 ELSE 8 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.75 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.03908659344865889 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.7399336304542656 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2816909199525228 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 1.350000023841858 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2681737037919217 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9285987691649653 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8939845856226522 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 71 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.28207168660493437 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9273655835634588 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9301037249131069 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[RF_Tree_1_0] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_1_0, [DT_Output_3].[Estimator] AS [Estimator_1_0] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_3] <= 0.75) THEN 2 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN 4 ELSE 5 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 5.050000190734863) THEN CASE WHEN ([ADS].[Feature_1] <= 2.75) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.7000000476837158) THEN 11 ELSE 12 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.009495949425954562 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.75 AS threshold, 66 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.16151612725716147 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.930556634879562 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.46966162186057697 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6121754170715568 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.5151531065127365 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2856020428346233 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_1' AS feature, 2.75 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.08294525977606505 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9856852180800475 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.8458648900519945 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'Feature_3' AS feature, 1.7000000476837158 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.31262294724243095 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9856490241376321 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9681483635038426 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].count AS count, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[RF_Tree_1_1] AS 
(SELECT [DT_Output_4].[KEY] AS join_key_1_1, [DT_Output_4].[Estimator] AS [Estimator_1_1] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_1] <= 3.0999999046325684) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 5.050000190734863) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= 5.050000190734863) THEN 13 ELSE 14 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.028281333342055705 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 61 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.27157632210326194 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 58 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.299544898095202 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9509200643502693 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9524968300642993 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 3.0999999046325684 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.26914948040757697 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.637076400646928 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0713798543355322 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4972894610898608 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.18790652843027575 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2894492492847402 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5455990817716199 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5649669776091449 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.587860588085132 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.522620867792718 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].count AS count, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[RF_Tree_1_2] AS 
(SELECT [DT_Output_5].[KEY] AS join_key_1_2, [DT_Output_5].[Estimator] AS [Estimator_1_2] 
FROM [DT_Output_5]), 
[RF_Join_CTE_1] AS 
(SELECT [RF_Tree_1_0].join_key_1_0 AS join_key_1_0, [RF_Tree_1_0].[Estimator_1_0] AS [Estimator_1_0], [RF_Tree_1_1].join_key_1_1 AS join_key_1_1, [RF_Tree_1_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Tree_1_2].join_key_1_2 AS join_key_1_2, [RF_Tree_1_2].[Estimator_1_2] AS [Estimator_1_2] 
FROM [RF_Tree_1_0] LEFT OUTER JOIN [RF_Tree_1_1] ON [RF_Tree_1_0].join_key_1_0 = [RF_Tree_1_1].join_key_1_1 LEFT OUTER JOIN [RF_Tree_1_2] ON [RF_Tree_1_2].join_key_1_2 = [RF_Tree_1_1].join_key_1_1), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_1] <= 2.450000047683716) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_1] <= 2.25) THEN 7 ELSE 8 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.035627519345075825 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4875508276783365 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.252908562580265 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_1' AS feature, 2.450000047683716 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23947856469203604 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8921225416770463 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8615920717612254 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 2.25 AS threshold, 71 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.25328687237993336 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9023961127697337 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 68 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8924801109288075 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].count AS count, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[RF_Tree_2_0] AS 
(SELECT [DT_Output_6].[KEY] AS join_key_2_0, [DT_Output_6].[Estimator] AS [Estimator_2_0] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 2 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN 4 ELSE 5 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 5.050000190734863) THEN CASE WHEN ([ADS].[Feature_1] <= 2.75) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.7000000476837158) THEN 11 ELSE 12 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.008624363139751156 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 66 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1443572023892097 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8938716638057423 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.42026811359394417 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4021217195867004 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.47152351117814584 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.25485703069743315 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_1' AS feature, 2.75 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.07719892715513862 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9495636577280065 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5940072757327477 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'Feature_3' AS feature, 1.7000000476837158 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2785447778364058 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9366058940931566 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9226848150746549 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].count AS count, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[RF_Tree_2_1] AS 
(SELECT [DT_Output_7].[KEY] AS join_key_2_1, [DT_Output_7].[Estimator] AS [Estimator_2_1] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN CASE WHEN ([ADS].[Feature_3] <= 0.75) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_1] <= 3.0999999046325684) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= 5.050000190734863) THEN 13 ELSE 14 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.02554135026346151 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 61 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24228563132027175 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_3' AS feature, 0.75 AS threshold, 58 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2669808602763509 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9088100441287313 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9100653882640176 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 3.0999999046325684 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.235155461830592 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4391243953690016 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0541902764630975 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.444450218894429 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1682665936592942 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9598729259051281 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.9855877318001006 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5048653869146148 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.39457555403201 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3379183957444716 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].count AS count, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[RF_Tree_2_2] AS 
(SELECT [DT_Output_8].[KEY] AS join_key_2_2, [DT_Output_8].[Estimator] AS [Estimator_2_2] 
FROM [DT_Output_8]), 
[RF_Join_CTE_2] AS 
(SELECT [RF_Tree_2_0].join_key_2_0 AS join_key_2_0, [RF_Tree_2_0].[Estimator_2_0] AS [Estimator_2_0], [RF_Tree_2_1].join_key_2_1 AS join_key_2_1, [RF_Tree_2_1].[Estimator_2_1] AS [Estimator_2_1], [RF_Tree_2_2].join_key_2_2 AS join_key_2_2, [RF_Tree_2_2].[Estimator_2_2] AS [Estimator_2_2] 
FROM [RF_Tree_2_0] LEFT OUTER JOIN [RF_Tree_2_1] ON [RF_Tree_2_0].join_key_2_0 = [RF_Tree_2_1].join_key_2_1 LEFT OUTER JOIN [RF_Tree_2_2] ON [RF_Tree_2_2].join_key_2_2 = [RF_Tree_2_1].join_key_2_1), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_3] <= 0.75) THEN 1 ELSE CASE WHEN ([ADS].[Feature_0] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_1] <= 2.450000047683716) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS].[Feature_1] <= 2.25) THEN 7 ELSE 8 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.75 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.03233057943192042 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.3131088287139825 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 4.949999809265137 AS threshold, 73 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2263716564124892 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_1' AS feature, 2.450000047683716 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2132527825618958 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8609557171375697 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8342080502897524 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 2.25 AS threshold, 71 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.22674120215475954 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8729611377047292 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 68 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8618138885107594 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].count AS count, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[RF_Tree_3_0] AS 
(SELECT [DT_Output_9].[KEY] AS join_key_3_0, [DT_Output_9].[Estimator] AS [Estimator_3_0] 
FROM [DT_Output_9]), 
[DT_node_lookup_10] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN CASE WHEN ([ADS].[Feature_3] <= 0.75) THEN 2 ELSE CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN 4 ELSE 5 END END ELSE CASE WHEN ([ADS].[Feature_2] <= 5.050000190734863) THEN CASE WHEN ([ADS].[Feature_1] <= 2.75) THEN 8 ELSE 9 END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.7000000476837158) THEN 11 ELSE 12 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.007845384267887159 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 0.75 AS threshold, 66 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.12849034419955047 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8625124221421522 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 39 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.37464354023133367 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2514943215218877 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.43120466353668524 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 34 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.226347773246518 AS [Estimator] UNION ALL SELECT 7 AS node_id, 'Feature_1' AS feature, 2.75 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.06285303384968396 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9107727268486028 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.4750997344883614 AS [Estimator] UNION ALL SELECT 10 AS node_id, 'Feature_3' AS feature, 1.7000000476837158 AS threshold, 30 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.24814707183276247 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.9023613361260947 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8849913944367394 AS [Estimator]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].count AS count, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[RF_Tree_3_1] AS 
(SELECT [DT_Output_10].[KEY] AS join_key_3_1, [DT_Output_10].[Estimator] AS [Estimator_3_1] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_2] <= 4.850000381469727) THEN CASE WHEN ([ADS].[Feature_3] <= 1.6500000953674316) THEN CASE WHEN ([ADS].[Feature_2] <= 2.450000047683716) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_1] <= 3.0999999046325684) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_3] <= 1.75) THEN CASE WHEN ([ADS].[Feature_2] <= 5.050000190734863) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_2] <= 4.949999809265137) THEN 13 ELSE 14 END END END AS node_id_2 
FROM iris AS [ADS]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 4.850000381469727 AS threshold, 100 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.022994492391607318 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_3' AS feature, 1.6500000953674316 AS threshold, 61 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.21566783723084185 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 2.450000047683716 AS threshold, 58 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.23740765360156096 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8736762379105624 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 31 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.8746774172004314 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 3.0999999046325684 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2046352792697231 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.296351461195847 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.0368530307630048 AS [Estimator] UNION ALL SELECT 8 AS node_id, 'Feature_3' AS feature, 1.75 AS threshold, 39 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.39628685410877174 AS [Estimator] UNION ALL SELECT 9 AS node_id, 'Feature_2' AS feature, 5.050000190734863 AS threshold, 7 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.1503221559331904 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.2569061204512745 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2366833549909484 AS [Estimator] UNION ALL SELECT 12 AS node_id, 'Feature_2' AS feature, 4.949999809265137 AS threshold, 32 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4500916318346802 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.273190067539241 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2063939046629508 AS [Estimator]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].count AS count, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[RF_Tree_3_2] AS 
(SELECT [DT_Output_11].[KEY] AS join_key_3_2, [DT_Output_11].[Estimator] AS [Estimator_3_2] 
FROM [DT_Output_11]), 
[RF_Join_CTE_3] AS 
(SELECT [RF_Tree_3_0].join_key_3_0 AS join_key_3_0, [RF_Tree_3_0].[Estimator_3_0] AS [Estimator_3_0], [RF_Tree_3_1].join_key_3_1 AS join_key_3_1, [RF_Tree_3_1].[Estimator_3_1] AS [Estimator_3_1], [RF_Tree_3_2].join_key_3_2 AS join_key_3_2, [RF_Tree_3_2].[Estimator_3_2] AS [Estimator_3_2] 
FROM [RF_Tree_3_0] LEFT OUTER JOIN [RF_Tree_3_1] ON [RF_Tree_3_0].join_key_3_0 = [RF_Tree_3_1].join_key_3_1 LEFT OUTER JOIN [RF_Tree_3_2] ON [RF_Tree_3_2].join_key_3_2 = [RF_Tree_3_1].join_key_3_1), 
[RF_Join_CTE] AS 
(SELECT [RF_Join_CTE_0].join_key_0_0 AS join_key_0_0, [RF_Join_CTE_0].[Estimator_0_0] AS [Estimator_0_0], [RF_Join_CTE_0].join_key_0_1 AS join_key_0_1, [RF_Join_CTE_0].[Estimator_0_1] AS [Estimator_0_1], [RF_Join_CTE_0].join_key_0_2 AS join_key_0_2, [RF_Join_CTE_0].[Estimator_0_2] AS [Estimator_0_2], [RF_Join_CTE_1].join_key_1_0 AS join_key_1_0, [RF_Join_CTE_1].[Estimator_1_0] AS [Estimator_1_0], [RF_Join_CTE_1].join_key_1_1 AS join_key_1_1, [RF_Join_CTE_1].[Estimator_1_1] AS [Estimator_1_1], [RF_Join_CTE_1].join_key_1_2 AS join_key_1_2, [RF_Join_CTE_1].[Estimator_1_2] AS [Estimator_1_2], [RF_Join_CTE_2].join_key_2_0 AS join_key_2_0, [RF_Join_CTE_2].[Estimator_2_0] AS [Estimator_2_0], [RF_Join_CTE_2].join_key_2_1 AS join_key_2_1, [RF_Join_CTE_2].[Estimator_2_1] AS [Estimator_2_1], [RF_Join_CTE_2].join_key_2_2 AS join_key_2_2, [RF_Join_CTE_2].[Estimator_2_2] AS [Estimator_2_2], [RF_Join_CTE_3].join_key_3_0 AS join_key_3_0, [RF_Join_CTE_3].[Estimator_3_0] AS [Estimator_3_0], [RF_Join_CTE_3].join_key_3_1 AS join_key_3_1, [RF_Join_CTE_3].[Estimator_3_1] AS [Estimator_3_1], [RF_Join_CTE_3].join_key_3_2 AS join_key_3_2, [RF_Join_CTE_3].[Estimator_3_2] AS [Estimator_3_2] 
FROM [RF_Join_CTE_0] LEFT OUTER JOIN [RF_Join_CTE_1] ON [RF_Join_CTE_0].join_key_0_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_2] ON [RF_Join_CTE_2].join_key_2_0 = [RF_Join_CTE_1].join_key_1_0 LEFT OUTER JOIN [RF_Join_CTE_3] ON [RF_Join_CTE_3].join_key_3_0 = [RF_Join_CTE_2].join_key_2_0), 
[RF_AVG_Scores] AS 
(SELECT [RF_Join_CTE].join_key_0_0 AS [KEY], 0.27 + 0.1 * [RF_Join_CTE].[Estimator_0_0] + 0.1 * [RF_Join_CTE].[Estimator_1_0] + 0.1 * [RF_Join_CTE].[Estimator_2_0] + 0.1 * [RF_Join_CTE].[Estimator_3_0] AS [Score_0], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [LogProba_0], 0.35 + 0.1 * [RF_Join_CTE].[Estimator_0_1] + 0.1 * [RF_Join_CTE].[Estimator_1_1] + 0.1 * [RF_Join_CTE].[Estimator_2_1] + 0.1 * [RF_Join_CTE].[Estimator_3_1] AS [Score_1], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_1], 0.38 + 0.1 * [RF_Join_CTE].[Estimator_0_2] + 0.1 * [RF_Join_CTE].[Estimator_1_2] + 0.1 * [RF_Join_CTE].[Estimator_2_2] + 0.1 * [RF_Join_CTE].[Estimator_3_2] AS [Score_2], CAST(NULL AS FLOAT) AS [Proba_2], CAST(NULL AS FLOAT) AS [LogProba_2] 
FROM [RF_Join_CTE]), 
orig_cte AS 
(SELECT [RF_AVG_Scores].[KEY] AS [KEY], [RF_AVG_Scores].[Score_0] AS [Score_0], [RF_AVG_Scores].[Score_1] AS [Score_1], [RF_AVG_Scores].[Score_2] AS [Score_2], [RF_AVG_Scores].[Proba_0] AS [Proba_0], [RF_AVG_Scores].[Proba_1] AS [Proba_1], [RF_AVG_Scores].[Proba_2] AS [Proba_2], [RF_AVG_Scores].[LogProba_0] AS [LogProba_0], [RF_AVG_Scores].[LogProba_1] AS [LogProba_1], [RF_AVG_Scores].[LogProba_2] AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RF_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte