-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `ADS_imp_1_OUT` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` IS NULL) THEN -0.904903101665 ELSE `ADS`.`Feature_0` END AS impter_2, CASE WHEN (`ADS`.`Feature_1` IS NULL) THEN 0.615602816394 ELSE `ADS`.`Feature_1` END AS impter_3, CASE WHEN (`ADS`.`Feature_2` IS NULL) THEN 0.140848767965 ELSE `ADS`.`Feature_2` END AS impter_4, CASE WHEN (`ADS`.`Feature_3` IS NULL) THEN 0.241433330969 ELSE `ADS`.`Feature_3` END AS impter_5, CASE WHEN (`ADS`.`Feature_4` IS NULL) THEN -0.749898021818 ELSE `ADS`.`Feature_4` END AS impter_6, CASE WHEN (`ADS`.`Feature_5` IS NULL) THEN 0.140554326378 ELSE `ADS`.`Feature_5` END AS impter_7, CASE WHEN (`ADS`.`Feature_6` IS NULL) THEN -0.0238204045439 ELSE `ADS`.`Feature_6` END AS impter_8, CASE WHEN (`ADS`.`Feature_7` IS NULL) THEN 0.104659912008 ELSE `ADS`.`Feature_7` END AS impter_9, CASE WHEN (`ADS`.`Feature_8` IS NULL) THEN -0.160298004411 ELSE `ADS`.`Feature_8` END AS impter_10, CASE WHEN (`ADS`.`Feature_9` IS NULL) THEN -0.250947327166 ELSE `ADS`.`Feature_9` END AS impter_11 
FROM `FourClass_10` AS `ADS`), 
`ADS_sca_2_OUT` AS 
(SELECT `ADS_imp_1_OUT`.`KEY` AS `KEY`, (CAST(`ADS_imp_1_OUT`.impter_2 AS DOUBLE) - -0.904903101665) / 1.67563560508 AS scaler_2, (CAST(`ADS_imp_1_OUT`.impter_3 AS DOUBLE) - 0.615602816394) / 1.42940891982 AS scaler_3, (CAST(`ADS_imp_1_OUT`.impter_4 AS DOUBLE) - 0.140848767965) / 1.07685115347 AS scaler_4, (CAST(`ADS_imp_1_OUT`.impter_5 AS DOUBLE) - 0.241433330969) / 1.39065187756 AS scaler_5, (CAST(`ADS_imp_1_OUT`.impter_6 AS DOUBLE) - -0.749898021818) / 1.17779640239 AS scaler_6, (CAST(`ADS_imp_1_OUT`.impter_7 AS DOUBLE) - 0.140554326378) / 1.12742309699 AS scaler_7, (CAST(`ADS_imp_1_OUT`.impter_8 AS DOUBLE) - -0.0238204045439) / 1.57217328959 AS scaler_8, (CAST(`ADS_imp_1_OUT`.impter_9 AS DOUBLE) - 0.104659912008) / 1.10860746418 AS scaler_9, (CAST(`ADS_imp_1_OUT`.impter_10 AS DOUBLE) - -0.160298004411) / 1.36419712314 AS scaler_10, (CAST(`ADS_imp_1_OUT`.impter_11 AS DOUBLE) - -0.250947327166) / 1.0335960391 AS scaler_11 
FROM `ADS_imp_1_OUT`), 
linear_model_cte AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, 0.38390198397510816 * `ADS_sca_2_OUT`.scaler_2 + -0.6897551262327728 * `ADS_sca_2_OUT`.scaler_3 + -0.3192339443672735 * `ADS_sca_2_OUT`.scaler_4 + -0.8629225463890657 * `ADS_sca_2_OUT`.scaler_5 + 0.10272445851513505 * `ADS_sca_2_OUT`.scaler_6 + 0.07720424992744934 * `ADS_sca_2_OUT`.scaler_7 + 0.9236763417418756 * `ADS_sca_2_OUT`.scaler_8 + 0.3692270827867246 * `ADS_sca_2_OUT`.scaler_9 + -0.7390598195464786 * `ADS_sca_2_OUT`.scaler_10 + -0.22397521426103137 * `ADS_sca_2_OUT`.scaler_11 + -1.38549544597 AS `Score_0`, -1.2482663526376443 * `ADS_sca_2_OUT`.scaler_2 + 0.1281118201101414 * `ADS_sca_2_OUT`.scaler_3 + 0.444220880049029 * `ADS_sca_2_OUT`.scaler_4 + 1.027746321976741 * `ADS_sca_2_OUT`.scaler_5 + -0.3184257173656196 * `ADS_sca_2_OUT`.scaler_6 + 0.23809958792703625 * `ADS_sca_2_OUT`.scaler_7 + 0.17342188735069802 * `ADS_sca_2_OUT`.scaler_8 + -0.024041940322651344 * `ADS_sca_2_OUT`.scaler_9 + -1.0503090062886509 * `ADS_sca_2_OUT`.scaler_10 + 0.24527506894979892 * `ADS_sca_2_OUT`.scaler_11 + -1.33588628007 AS `Score_1`, 0.8213963418438012 * `ADS_sca_2_OUT`.scaler_2 + 0.058613200151744246 * `ADS_sca_2_OUT`.scaler_3 + -0.03783296707980575 * `ADS_sca_2_OUT`.scaler_4 + -0.5723469642855942 * `ADS_sca_2_OUT`.scaler_5 + 0.20191026662161207 * `ADS_sca_2_OUT`.scaler_6 + -0.1728985549205877 * `ADS_sca_2_OUT`.scaler_7 + -0.3987529597291331 * `ADS_sca_2_OUT`.scaler_8 + -0.19554583666270048 * `ADS_sca_2_OUT`.scaler_9 + 0.9601841843494385 * `ADS_sca_2_OUT`.scaler_10 + 0.2572692374261345 * `ADS_sca_2_OUT`.scaler_11 + -2.03382656356 AS `Score_2`, 0.07488538733348453 * `ADS_sca_2_OUT`.scaler_2 + 0.6687108784240811 * `ADS_sca_2_OUT`.scaler_3 + -0.011043747755505515 * `ADS_sca_2_OUT`.scaler_4 + 0.6555746881384801 * `ADS_sca_2_OUT`.scaler_5 + 0.12624418633429754 * `ADS_sca_2_OUT`.scaler_6 + -0.1670254988817658 * `ADS_sca_2_OUT`.scaler_7 + -0.9899290845761983 * `ADS_sca_2_OUT`.scaler_8 + -0.24437709115477557 * `ADS_sca_2_OUT`.scaler_9 + 1.1558839338628806 * `ADS_sca_2_OUT`.scaler_10 + -0.3981489235860977 * `ADS_sca_2_OUT`.scaler_11 + -1.60115040357 AS `Score_3` 
FROM `ADS_sca_2_OUT`), 
orig_cte AS 
(SELECT linear_model_cte.`KEY` AS `KEY`, linear_model_cte.`Score_0` AS `Score_0`, linear_model_cte.`Score_1` AS `Score_1`, linear_model_cte.`Score_2` AS `Score_2`, linear_model_cte.`Score_3` AS `Score_3`, (1.0 / (1.0 + exp(-linear_model_cte.`Score_0`))) / (1.0 / (1.0 + exp(-linear_model_cte.`Score_0`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_1`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_2`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_3`))) AS `Proba_0`, (1.0 / (1.0 + exp(-linear_model_cte.`Score_1`))) / (1.0 / (1.0 + exp(-linear_model_cte.`Score_0`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_1`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_2`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_3`))) AS `Proba_1`, (1.0 / (1.0 + exp(-linear_model_cte.`Score_2`))) / (1.0 / (1.0 + exp(-linear_model_cte.`Score_0`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_1`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_2`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_3`))) AS `Proba_2`, (1.0 / (1.0 + exp(-linear_model_cte.`Score_3`))) / (1.0 / (1.0 + exp(-linear_model_cte.`Score_0`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_1`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_2`)) + 1.0 / (1.0 + exp(-linear_model_cte.`Score_3`))) AS `Proba_3`, NULL AS `LogProba_0`, NULL AS `LogProba_1`, NULL AS `LogProba_2`, NULL AS `LogProba_3`, NULL AS `Decision` 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.`KEY` AS `KEY`, scu.class AS class, scu.`LogProba` AS `LogProba`, scu.`Proba` AS `Proba`, scu.`Score` AS `Score` 
FROM (SELECT orig_cte.`KEY` AS `KEY`, 0 AS class, orig_cte.`LogProba_0` AS `LogProba`, orig_cte.`Proba_0` AS `Proba`, orig_cte.`Score_0` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 1 AS class, orig_cte.`LogProba_1` AS `LogProba`, orig_cte.`Proba_1` AS `Proba`, orig_cte.`Score_1` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 2 AS class, orig_cte.`LogProba_2` AS `LogProba`, orig_cte.`Proba_2` AS `Proba`, orig_cte.`Score_2` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY`, 3 AS class, orig_cte.`LogProba_3` AS `LogProba`, orig_cte.`Proba_3` AS `Proba`, orig_cte.`Score_3` AS `Score` 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.`KEY` AS `KEY`, orig_cte.`Score_0` AS `Score_0`, orig_cte.`Score_1` AS `Score_1`, orig_cte.`Score_2` AS `Score_2`, orig_cte.`Score_3` AS `Score_3`, orig_cte.`Proba_0` AS `Proba_0`, orig_cte.`Proba_1` AS `Proba_1`, orig_cte.`Proba_2` AS `Proba_2`, orig_cte.`Proba_3` AS `Proba_3`, orig_cte.`LogProba_0` AS `LogProba_0`, orig_cte.`LogProba_1` AS `LogProba_1`, orig_cte.`LogProba_2` AS `LogProba_2`, orig_cte.`LogProba_3` AS `LogProba_3`, orig_cte.`Decision` AS `Decision`, (SELECT max(score_class_union.`LogProba`) AS max_1 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_LogProba`, (SELECT max(score_class_union.`Proba`) AS max_2 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_Proba`, (SELECT max(score_class_union.`Score`) AS max_3 
FROM score_class_union 
WHERE orig_cte.`KEY` = score_class_union.`KEY`) AS `max_Score` 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Score_2` AS `Score_2`, score_max.`Score_3` AS `Score_3`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`Proba_2` AS `Proba_2`, score_max.`Proba_3` AS `Proba_3`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`LogProba_2` AS `LogProba_2`, score_max.`LogProba_3` AS `LogProba_3`, score_max.`Decision` AS `Decision`, score_max.`max_LogProba` AS `max_LogProba`, score_max.`max_Proba` AS `max_Proba`, score_max.`max_Score` AS `max_Score`, (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max.`max_LogProba` = score_class_union.`LogProba` AND score_max.`KEY` = score_class_union.`KEY`) AS `arg_max_LogProba`, (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max.`max_Proba` = score_class_union.`Proba` AND score_max.`KEY` = score_class_union.`KEY`) AS `arg_max_Proba`, (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max.`max_Score` = score_class_union.`Score` AND score_max.`KEY` = score_class_union.`KEY`) AS `arg_max_Score` 
FROM score_max)
 SELECT arg_max_cte.`KEY` AS `KEY`, arg_max_cte.`Score_0` AS `Score_0`, arg_max_cte.`Score_1` AS `Score_1`, arg_max_cte.`Score_2` AS `Score_2`, arg_max_cte.`Score_3` AS `Score_3`, arg_max_cte.`Proba_0` AS `Proba_0`, arg_max_cte.`Proba_1` AS `Proba_1`, arg_max_cte.`Proba_2` AS `Proba_2`, arg_max_cte.`Proba_3` AS `Proba_3`, CASE WHEN (arg_max_cte.`Proba_0` IS NULL OR arg_max_cte.`Proba_0` > 0.0) THEN ln(arg_max_cte.`Proba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (arg_max_cte.`Proba_1` IS NULL OR arg_max_cte.`Proba_1` > 0.0) THEN ln(arg_max_cte.`Proba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, CASE WHEN (arg_max_cte.`Proba_2` IS NULL OR arg_max_cte.`Proba_2` > 0.0) THEN ln(arg_max_cte.`Proba_2`) ELSE -1.79769313486231e+308 END AS `LogProba_2`, CASE WHEN (arg_max_cte.`Proba_3` IS NULL OR arg_max_cte.`Proba_3` > 0.0) THEN ln(arg_max_cte.`Proba_3`) ELSE -1.79769313486231e+308 END AS `LogProba_3`, arg_max_cte.`arg_max_Score` AS `Decision` 
FROM arg_max_cte