-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", "ADS"."Feature_0" AS "Feature_0", "ADS"."Feature_1" AS "Feature_1", "ADS"."Feature_2" AS "Feature_2", "ADS"."Feature_3" AS "Feature_3", "ADS"."Feature_4" AS "Feature_4", "ADS"."Feature_5" AS "Feature_5", "ADS"."Feature_6" AS "Feature_6", "ADS"."Feature_7" AS "Feature_7", "ADS"."Feature_8" AS "Feature_8", "ADS"."Feature_9" AS "Feature_9", "ADS"."Feature_10" AS "Feature_10", "ADS"."Feature_11" AS "Feature_11", "ADS"."Feature_12" AS "Feature_12", "ADS"."Feature_13" AS "Feature_13", "ADS"."Feature_14" AS "Feature_14", "ADS"."Feature_15" AS "Feature_15", "ADS"."Feature_16" AS "Feature_16", "ADS"."Feature_17" AS "Feature_17", "ADS"."Feature_18" AS "Feature_18", "ADS"."Feature_19" AS "Feature_19", "ADS"."Feature_20" AS "Feature_20", "ADS"."Feature_21" AS "Feature_21", "ADS"."Feature_22" AS "Feature_22", "ADS"."Feature_23" AS "Feature_23", "ADS"."Feature_24" AS "Feature_24", "ADS"."Feature_25" AS "Feature_25", "ADS"."Feature_26" AS "Feature_26", "ADS"."Feature_27" AS "Feature_27", "ADS"."Feature_28" AS "Feature_28", "ADS"."Feature_29" AS "Feature_29", "ADS"."Feature_30" AS "Feature_30", "ADS"."Feature_31" AS "Feature_31", "ADS"."Feature_32" AS "Feature_32", "ADS"."Feature_33" AS "Feature_33", "ADS"."Feature_34" AS "Feature_34", "ADS"."Feature_35" AS "Feature_35", "ADS"."Feature_36" AS "Feature_36", "ADS"."Feature_37" AS "Feature_37", "ADS"."Feature_38" AS "Feature_38", "ADS"."Feature_39" AS "Feature_39", "ADS"."Feature_40" AS "Feature_40", "ADS"."Feature_41" AS "Feature_41", "ADS"."Feature_42" AS "Feature_42", "ADS"."Feature_43" AS "Feature_43", "ADS"."Feature_44" AS "Feature_44", "ADS"."Feature_45" AS "Feature_45", "ADS"."Feature_46" AS "Feature_46", "ADS"."Feature_47" AS "Feature_47", "ADS"."Feature_48" AS "Feature_48", "ADS"."Feature_49" AS "Feature_49", "ADS"."Feature_50" AS "Feature_50", "ADS"."Feature_51" AS "Feature_51", "ADS"."Feature_52" AS "Feature_52", "ADS"."Feature_53" AS "Feature_53", "ADS"."Feature_54" AS "Feature_54", "ADS"."Feature_55" AS "Feature_55", "ADS"."Feature_56" AS "Feature_56", "ADS"."Feature_57" AS "Feature_57", "ADS"."Feature_58" AS "Feature_58", "ADS"."Feature_59" AS "Feature_59", "ADS"."Feature_60" AS "Feature_60", "ADS"."Feature_61" AS "Feature_61", "ADS"."Feature_62" AS "Feature_62", "ADS"."Feature_63" AS "Feature_63", "ADS"."Feature_64" AS "Feature_64", "ADS"."Feature_65" AS "Feature_65", "ADS"."Feature_66" AS "Feature_66", "ADS"."Feature_67" AS "Feature_67", "ADS"."Feature_68" AS "Feature_68", "ADS"."Feature_69" AS "Feature_69", "ADS"."Feature_70" AS "Feature_70", "ADS"."Feature_71" AS "Feature_71", "ADS"."Feature_72" AS "Feature_72", "ADS"."Feature_73" AS "Feature_73", "ADS"."Feature_74" AS "Feature_74", "ADS"."Feature_75" AS "Feature_75", "ADS"."Feature_76" AS "Feature_76", "ADS"."Feature_77" AS "Feature_77", "ADS"."Feature_78" AS "Feature_78", "ADS"."Feature_79" AS "Feature_79", "ADS"."Feature_80" AS "Feature_80", "ADS"."Feature_81" AS "Feature_81", "ADS"."Feature_82" AS "Feature_82", "ADS"."Feature_83" AS "Feature_83", "ADS"."Feature_84" AS "Feature_84", "ADS"."Feature_85" AS "Feature_85", "ADS"."Feature_86" AS "Feature_86", "ADS"."Feature_87" AS "Feature_87", "ADS"."Feature_88" AS "Feature_88", "ADS"."Feature_89" AS "Feature_89", "ADS"."Feature_90" AS "Feature_90", "ADS"."Feature_91" AS "Feature_91", "ADS"."Feature_92" AS "Feature_92", "ADS"."Feature_93" AS "Feature_93", "ADS"."Feature_94" AS "Feature_94", "ADS"."Feature_95" AS "Feature_95", "ADS"."Feature_96" AS "Feature_96", "ADS"."Feature_97" AS "Feature_97", "ADS"."Feature_98" AS "Feature_98", "ADS"."Feature_99" AS "Feature_99" 
FROM "FourClass_100" "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.0941260209583 * "IL"."Feature_0" + -0.147421722623 * "IL"."Feature_1" + -0.2054769963 * "IL"."Feature_2" + -0.460062690919 * "IL"."Feature_3" + 0.207573786164 * "IL"."Feature_4" + 0.254067212857 * "IL"."Feature_5" + 0.0655206714215 * "IL"."Feature_6" + 0.0238545627365 * "IL"."Feature_7" + 0.017218012054 * "IL"."Feature_8" + -0.19240883654 * "IL"."Feature_9" + -0.519848559076 * "IL"."Feature_10" + -0.567896356946 * "IL"."Feature_11" + 0.205919598399 * "IL"."Feature_12" + 0.226550979087 * "IL"."Feature_13" + 0.322130922871 * "IL"."Feature_14" + 0.157418211148 * "IL"."Feature_15" + -0.140798458286 * "IL"."Feature_16" + -0.230744538009 * "IL"."Feature_17" + -0.289187804257 * "IL"."Feature_18" + -0.104159545617 * "IL"."Feature_19" + -0.134804306981 * "IL"."Feature_20" + -0.0266535791268 * "IL"."Feature_21" + -0.203326861089 * "IL"."Feature_22" + -0.022028662184 * "IL"."Feature_23" + 0.408593120063 * "IL"."Feature_24" + 0.190630446926 * "IL"."Feature_25" + 0.376502673403 * "IL"."Feature_26" + 0.123632990766 * "IL"."Feature_27" + -0.245379655865 * "IL"."Feature_28" + -0.064604410048 * "IL"."Feature_29" + -0.0171385080311 * "IL"."Feature_30" + 0.0927396958654 * "IL"."Feature_31" + -0.45286907494 * "IL"."Feature_32" + -0.347763016749 * "IL"."Feature_33" + 0.176378376901 * "IL"."Feature_34" + -0.240105049217 * "IL"."Feature_35" + -0.0284515402693 * "IL"."Feature_36" + 0.385614282188 * "IL"."Feature_37" + -0.193739068716 * "IL"."Feature_38" + 0.156891039113 * "IL"."Feature_39" + 0.158162281665 * "IL"."Feature_40" + -0.220478288677 * "IL"."Feature_41" + -0.0323005641034 * "IL"."Feature_42" + 0.0887649824316 * "IL"."Feature_43" + 0.0907086346412 * "IL"."Feature_44" + 0.157407499356 * "IL"."Feature_45" + 0.253032390316 * "IL"."Feature_46" + 0.202229388328 * "IL"."Feature_47" + -0.112158606755 * "IL"."Feature_48" + 0.21061978618 * "IL"."Feature_49" + -0.107476023401 * "IL"."Feature_50" + 0.049218466331 * "IL"."Feature_51" + -0.0972854436164 * "IL"."Feature_52" + -0.0861032778797 * "IL"."Feature_53" + 0.313874302713 * "IL"."Feature_54" + 0.164292134256 * "IL"."Feature_55" + -0.236710100097 * "IL"."Feature_56" + 0.00234857902278 * "IL"."Feature_57" + -0.242230867367 * "IL"."Feature_58" + 0.213478172368 * "IL"."Feature_59" + -0.205555611879 * "IL"."Feature_60" + 0.121458945245 * "IL"."Feature_61" + 0.258884142862 * "IL"."Feature_62" + 0.0610178872583 * "IL"."Feature_63" + -0.151367874419 * "IL"."Feature_64" + 0.177980360593 * "IL"."Feature_65" + 0.586890991275 * "IL"."Feature_66" + 0.134218613334 * "IL"."Feature_67" + 0.213719457414 * "IL"."Feature_68" + 0.295475668209 * "IL"."Feature_69" + 0.204322315278 * "IL"."Feature_70" + 0.439916905998 * "IL"."Feature_71" + 0.126014970172 * "IL"."Feature_72" + -0.0528943271402 * "IL"."Feature_73" + -0.00223451167537 * "IL"."Feature_74" + 0.106911883481 * "IL"."Feature_75" + -0.147547996245 * "IL"."Feature_76" + -0.333087009722 * "IL"."Feature_77" + -0.615941321982 * "IL"."Feature_78" + -0.259764018178 * "IL"."Feature_79" + -0.0295460443435 * "IL"."Feature_80" + 0.350407537237 * "IL"."Feature_81" + -0.114468563136 * "IL"."Feature_82" + -0.0107777520474 * "IL"."Feature_83" + 0.711716229269 * "IL"."Feature_84" + 0.155973132141 * "IL"."Feature_85" + -0.0633657362054 * "IL"."Feature_86" + 0.130848697467 * "IL"."Feature_87" + -0.122559422933 * "IL"."Feature_88" + -0.338421502905 * "IL"."Feature_89" + -0.0630593990789 * "IL"."Feature_90" + -0.0834632051514 * "IL"."Feature_91" + 0.120630602192 * "IL"."Feature_92" + -0.202963295524 * "IL"."Feature_93" + 0.0712344154353 * "IL"."Feature_94" + -0.101302351921 * "IL"."Feature_95" + 0.512005666248 * "IL"."Feature_96" + -0.0652005942306 * "IL"."Feature_97" + 0.636625082534 * "IL"."Feature_98" + 0.146437191862 * "IL"."Feature_99" + 0.138315658393 AS "NEUR_1_1", 0.159794059332 * "IL"."Feature_0" + 0.322733399508 * "IL"."Feature_1" + -0.214762349478 * "IL"."Feature_2" + 0.112227527523 * "IL"."Feature_3" + 0.152586050467 * "IL"."Feature_4" + -0.0227679571001 * "IL"."Feature_5" + 0.624212427367 * "IL"."Feature_6" + -0.397270281763 * "IL"."Feature_7" + 0.251584724713 * "IL"."Feature_8" + 0.44242124269 * "IL"."Feature_9" + -0.319644686709 * "IL"."Feature_10" + -0.0650595281237 * "IL"."Feature_11" + -0.15033249529 * "IL"."Feature_12" + 0.340859115114 * "IL"."Feature_13" + -0.366766981045 * "IL"."Feature_14" + -0.269195329286 * "IL"."Feature_15" + 0.260629116268 * "IL"."Feature_16" + 0.0588710351829 * "IL"."Feature_17" + -0.368332103976 * "IL"."Feature_18" + 0.135467254763 * "IL"."Feature_19" + -0.395630081992 * "IL"."Feature_20" + -0.271618092393 * "IL"."Feature_21" + -0.216818674463 * "IL"."Feature_22" + 0.30086177466 * "IL"."Feature_23" + 0.575175719872 * "IL"."Feature_24" + 0.127568217263 * "IL"."Feature_25" + -0.434030253367 * "IL"."Feature_26" + -0.250054213493 * "IL"."Feature_27" + -0.0571577082264 * "IL"."Feature_28" + -0.267999262367 * "IL"."Feature_29" + -0.194054817717 * "IL"."Feature_30" + -0.149037537638 * "IL"."Feature_31" + -0.3194954096 * "IL"."Feature_32" + -0.0927349740655 * "IL"."Feature_33" + 0.310206572954 * "IL"."Feature_34" + 0.0831619132991 * "IL"."Feature_35" + 0.381358028725 * "IL"."Feature_36" + -0.231026900166 * "IL"."Feature_37" + 0.148708181932 * "IL"."Feature_38" + 0.839835475835 * "IL"."Feature_39" + 0.63435566403 * "IL"."Feature_40" + 0.365498094191 * "IL"."Feature_41" + 0.109246469823 * "IL"."Feature_42" + -0.0719935434784 * "IL"."Feature_43" + 0.26006202688 * "IL"."Feature_44" + 0.021445927763 * "IL"."Feature_45" + 0.065611898216 * "IL"."Feature_46" + -0.00608801392538 * "IL"."Feature_47" + -0.0486582406469 * "IL"."Feature_48" + -0.815727571853 * "IL"."Feature_49" + -0.368546906203 * "IL"."Feature_50" + -0.314215988035 * "IL"."Feature_51" + -0.199409597122 * "IL"."Feature_52" + -0.153450053569 * "IL"."Feature_53" + 0.453419613408 * "IL"."Feature_54" + 0.135511687923 * "IL"."Feature_55" + 0.983707240272 * "IL"."Feature_56" + 0.326655081265 * "IL"."Feature_57" + 0.340620993103 * "IL"."Feature_58" + -0.218859695171 * "IL"."Feature_59" + -0.230770508618 * "IL"."Feature_60" + -0.101307297162 * "IL"."Feature_61" + 0.169769394764 * "IL"."Feature_62" + -0.100171170166 * "IL"."Feature_63" + 0.0765113998317 * "IL"."Feature_64" + -0.387948479504 * "IL"."Feature_65" + 0.0289235528762 * "IL"."Feature_66" + 0.333588374421 * "IL"."Feature_67" + 0.298292168531 * "IL"."Feature_68" + -0.026908678937 * "IL"."Feature_69" + -0.375475844568 * "IL"."Feature_70" + 0.338206685319 * "IL"."Feature_71" + 0.175119037758 * "IL"."Feature_72" + 0.079896232872 * "IL"."Feature_73" + -0.11346547036 * "IL"."Feature_74" + 0.106091794972 * "IL"."Feature_75" + 0.54146857288 * "IL"."Feature_76" + 0.175674482914 * "IL"."Feature_77" + 0.428417926059 * "IL"."Feature_78" + 0.0439304522687 * "IL"."Feature_79" + 0.200516409333 * "IL"."Feature_80" + 0.727777996914 * "IL"."Feature_81" + 0.128951634087 * "IL"."Feature_82" + 0.0445967964465 * "IL"."Feature_83" + -0.336212282957 * "IL"."Feature_84" + 0.249507630083 * "IL"."Feature_85" + -0.268635005905 * "IL"."Feature_86" + -0.342138816669 * "IL"."Feature_87" + -0.0699492697507 * "IL"."Feature_88" + 0.0453284524195 * "IL"."Feature_89" + -0.655943983192 * "IL"."Feature_90" + -0.29140457164 * "IL"."Feature_91" + -0.4595891825 * "IL"."Feature_92" + 0.488524063374 * "IL"."Feature_93" + -0.188642389588 * "IL"."Feature_94" + -0.0801740041906 * "IL"."Feature_95" + 0.227700311766 * "IL"."Feature_96" + -0.44362847868 * "IL"."Feature_97" + -0.264089074933 * "IL"."Feature_98" + -0.512354490667 * "IL"."Feature_99" + -0.22712337864 AS "NEUR_1_2", 0.0337952958875 * "IL"."Feature_0" + 0.168333930117 * "IL"."Feature_1" + 0.151594103472 * "IL"."Feature_2" + 0.00279093630768 * "IL"."Feature_3" + -0.179056138944 * "IL"."Feature_4" + -0.211708465356 * "IL"."Feature_5" + 0.0456725957601 * "IL"."Feature_6" + -0.191457503743 * "IL"."Feature_7" + 0.103882864929 * "IL"."Feature_8" + -0.59343445818 * "IL"."Feature_9" + -0.361646325903 * "IL"."Feature_10" + -0.196537455869 * "IL"."Feature_11" + 0.240420638251 * "IL"."Feature_12" + 0.578192501421 * "IL"."Feature_13" + -0.460611483405 * "IL"."Feature_14" + -0.829390343396 * "IL"."Feature_15" + 0.0958849369475 * "IL"."Feature_16" + 0.0884320643737 * "IL"."Feature_17" + 0.308238040961 * "IL"."Feature_18" + 0.138314300994 * "IL"."Feature_19" + -0.145361593481 * "IL"."Feature_20" + 0.155347162573 * "IL"."Feature_21" + 0.438130143287 * "IL"."Feature_22" + 0.639814535321 * "IL"."Feature_23" + 0.73369096155 * "IL"."Feature_24" + 0.0414538730095 * "IL"."Feature_25" + 0.556478467122 * "IL"."Feature_26" + 0.0638201956742 * "IL"."Feature_27" + -0.0429818434452 * "IL"."Feature_28" + 0.129191894295 * "IL"."Feature_29" + -0.35459151258 * "IL"."Feature_30" + 0.0700122454529 * "IL"."Feature_31" + 0.214354583119 * "IL"."Feature_32" + -0.0785880313765 * "IL"."Feature_33" + -0.170364244302 * "IL"."Feature_34" + -0.299918355567 * "IL"."Feature_35" + 0.17465019773 * "IL"."Feature_36" + -0.494471338589 * "IL"."Feature_37" + 0.0133472937437 * "IL"."Feature_38" + 0.314101800081 * "IL"."Feature_39" + -0.482646229199 * "IL"."Feature_40" + 0.178482661164 * "IL"."Feature_41" + 0.136702230167 * "IL"."Feature_42" + -0.0990711368711 * "IL"."Feature_43" + -0.238364156764 * "IL"."Feature_44" + -0.0790806066212 * "IL"."Feature_45" + 0.259413529475 * "IL"."Feature_46" + 0.0794199549543 * "IL"."Feature_47" + -0.00322174848405 * "IL"."Feature_48" + -0.314032676033 * "IL"."Feature_49" + -0.204199611314 * "IL"."Feature_50" + -0.105307889882 * "IL"."Feature_51" + 0.29002367808 * "IL"."Feature_52" + -0.606098122439 * "IL"."Feature_53" + 0.115500624548 * "IL"."Feature_54" + -0.225033148602 * "IL"."Feature_55" + 0.0525496727008 * "IL"."Feature_56" + 0.0160080154362 * "IL"."Feature_57" + -0.0471246818854 * "IL"."Feature_58" + -0.0345364789342 * "IL"."Feature_59" + -0.338141719028 * "IL"."Feature_60" + -0.177181295599 * "IL"."Feature_61" + -0.00758965266146 * "IL"."Feature_62" + 0.307862623726 * "IL"."Feature_63" + -0.227757893993 * "IL"."Feature_64" + -0.533510560215 * "IL"."Feature_65" + 0.143207432001 * "IL"."Feature_66" + -0.442766660158 * "IL"."Feature_67" + -0.204439066494 * "IL"."Feature_68" + -0.15932901176 * "IL"."Feature_69" + -0.0301343911725 * "IL"."Feature_70" + -0.496347421442 * "IL"."Feature_71" + -0.138094054464 * "IL"."Feature_72" + -0.239148566261 * "IL"."Feature_73" + 0.0784120764262 * "IL"."Feature_74" + 0.0302158884952 * "IL"."Feature_75" + -0.252176207433 * "IL"."Feature_76" + 0.0967975284067 * "IL"."Feature_77" + -0.220987163959 * "IL"."Feature_78" + 0.215767703116 * "IL"."Feature_79" + -0.478847822929 * "IL"."Feature_80" + 0.174999695796 * "IL"."Feature_81" + 0.135968911896 * "IL"."Feature_82" + -0.297278322821 * "IL"."Feature_83" + -0.595568353683 * "IL"."Feature_84" + -0.127613795923 * "IL"."Feature_85" + -0.183859297052 * "IL"."Feature_86" + -0.186916891111 * "IL"."Feature_87" + 0.0129466038514 * "IL"."Feature_88" + -0.292213435291 * "IL"."Feature_89" + -0.283329452317 * "IL"."Feature_90" + 0.0483371780486 * "IL"."Feature_91" + 0.0996390798877 * "IL"."Feature_92" + -0.147958197345 * "IL"."Feature_93" + -0.0733438108528 * "IL"."Feature_94" + 0.172465501099 * "IL"."Feature_95" + -0.175070770654 * "IL"."Feature_96" + -0.0198879837943 * "IL"."Feature_97" + 0.0268264691005 * "IL"."Feature_98" + 0.397588111636 * "IL"."Feature_99" + 0.0272401189044 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.292510642704 * "HL_1_relu"."NEUR_1_1" + 0.54975178975 * "HL_1_relu"."NEUR_1_2" + 1.05013599452 * "HL_1_relu"."NEUR_1_3" + -0.629277907736 AS "NEUR_2_1", -0.182448346999 * "HL_1_relu"."NEUR_1_1" + -0.586011001932 * "HL_1_relu"."NEUR_1_2" + -0.62772846288 * "HL_1_relu"."NEUR_1_3" + 0.264731803396 AS "NEUR_2_2", -0.506232550924 * "HL_1_relu"."NEUR_1_1" + 1.39202640226 * "HL_1_relu"."NEUR_1_2" + 0.487586964751 * "HL_1_relu"."NEUR_1_3" + -0.981481575365 AS "NEUR_2_3", -1.20427405218 * "HL_1_relu"."NEUR_1_1" + 0.89389712002 * "HL_1_relu"."NEUR_1_2" + -0.605693314274 * "HL_1_relu"."NEUR_1_3" + 1.11861392621 AS "NEUR_2_4", -0.609339257315 * "HL_1_relu"."NEUR_1_1" + -0.377663815005 * "HL_1_relu"."NEUR_1_2" + -0.672993336444 * "HL_1_relu"."NEUR_1_3" + -0.018078316227 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -0.657598832256 * "HL_2_relu"."NEUR_2_1" + -0.175006082524 * "HL_2_relu"."NEUR_2_2" + -1.00549714816 * "HL_2_relu"."NEUR_2_3" + 1.07598806675 * "HL_2_relu"."NEUR_2_4" + 0.589881677126 * "HL_2_relu"."NEUR_2_5" + -0.476778030402 AS "NEUR_3_1", 1.15082544353 * "HL_2_relu"."NEUR_2_1" + -0.166753217773 * "HL_2_relu"."NEUR_2_2" + -1.17083632044 * "HL_2_relu"."NEUR_2_3" + -1.34511214966 * "HL_2_relu"."NEUR_2_4" + 0.396099538966 * "HL_2_relu"."NEUR_2_5" + 0.46791917202 AS "NEUR_3_2", 0.603185697084 * "HL_2_relu"."NEUR_2_1" + 0.334480991319 * "HL_2_relu"."NEUR_2_2" + 0.599635383877 * "HL_2_relu"."NEUR_2_3" + -0.737159342427 * "HL_2_relu"."NEUR_2_4" + 0.663498629208 * "HL_2_relu"."NEUR_2_5" + -0.345191157642 AS "NEUR_3_3", -0.480144372774 * "HL_2_relu"."NEUR_2_1" + 0.371928006813 * "HL_2_relu"."NEUR_2_2" + 0.784683772935 * "HL_2_relu"."NEUR_2_3" + 0.730517087261 * "HL_2_relu"."NEUR_2_4" + -0.485521270771 * "HL_2_relu"."NEUR_2_5" + -0.96340020363 AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "Score_0", "OL_softmax"."NEUR_3_2" AS "Score_1", "OL_softmax"."NEUR_3_3" AS "Score_2", "OL_softmax"."NEUR_3_4" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OL_softmax"), 
score_class_union AS 
(SELECT scu."KEY" AS "KEY", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", (SELECT max(score_class_union."LogProba") AS max_1 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_LogProba", (SELECT max(score_class_union."Proba") AS max_2 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Proba", (SELECT max(score_class_union."Score") AS max_3 
FROM score_class_union 
WHERE orig_cte."KEY" = score_class_union."KEY") AS "max_Score" 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."LogProba" AS "LogProba", soft_scu."Proba" AS "Proba", soft_scu."Score" AS "Score", soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_comp."KEY" AS "KEY", 0 AS class, score_soft_max_comp."LogProba_0" AS "LogProba", score_soft_max_comp."Proba_0" AS "Proba", score_soft_max_comp."Score_0" AS "Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 1 AS class, score_soft_max_comp."LogProba_1" AS "LogProba", score_soft_max_comp."Proba_1" AS "Proba", score_soft_max_comp."Score_1" AS "Score", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 2 AS class, score_soft_max_comp."LogProba_2" AS "LogProba", score_soft_max_comp."Proba_2" AS "Proba", score_soft_max_comp."Score_2" AS "Score", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp."KEY" AS "KEY", 3 AS class, score_soft_max_comp."LogProba_3" AS "LogProba", score_soft_max_comp."Proba_3" AS "Proba", score_soft_max_comp."Score_3" AS "Score", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_comp) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp."KEY" AS "KEY", score_soft_max_comp."Score_0" AS "Score_0", score_soft_max_comp."Score_1" AS "Score_1", score_soft_max_comp."Score_2" AS "Score_2", score_soft_max_comp."Score_3" AS "Score_3", score_soft_max_comp."Proba_0" AS "Proba_0", score_soft_max_comp."Proba_1" AS "Proba_1", score_soft_max_comp."Proba_2" AS "Proba_2", score_soft_max_comp."Proba_3" AS "Proba_3", score_soft_max_comp."LogProba_0" AS "LogProba_0", score_soft_max_comp."LogProba_1" AS "LogProba_1", score_soft_max_comp."LogProba_2" AS "LogProba_2", score_soft_max_comp."LogProba_3" AS "LogProba_3", score_soft_max_comp."Decision" AS "Decision", score_soft_max_comp."max_LogProba" AS "max_LogProba", score_soft_max_comp."max_Proba" AS "max_Proba", score_soft_max_comp."max_Score" AS "max_Score", score_soft_max_comp."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_comp."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_comp."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_comp."exp_delta_Score_3" AS "exp_delta_Score_3", (SELECT sum(score_class_union_soft."exp_delta_Score") AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp."KEY" = score_class_union_soft."KEY") AS "sum_ExpDeltaScore" 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."max_LogProba" AS "max_LogProba", score_soft_max."max_Proba" AS "max_Proba", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max."max_LogProba" = score_class_union."LogProba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_LogProba", (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max."max_Proba" = score_class_union."Proba" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Proba", (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max."max_Score" = score_class_union."Score" AND score_soft_max."KEY" = score_class_union."KEY") AS "arg_max_Score", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max)
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision" 
FROM arg_max_cte