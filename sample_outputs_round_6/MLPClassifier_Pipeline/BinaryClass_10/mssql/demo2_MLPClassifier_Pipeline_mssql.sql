-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.00171576384606 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN -0.051163824569 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN -0.0208388877933 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.116899645935 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN 0.0192338946033 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.127272092497 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.0818270036745 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.0254146520166 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN -0.0609264782274 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.0160367365743 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [BinaryClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - 0.00171576384606) / 1.01143936972 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - -0.051163824569) / 1.34957220814 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - -0.0208388877933) / 1.13059238085 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.116899645935) / 1.16176312166 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - 0.0192338946033) / 0.811844409272 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.127272092497) / 1.05683232012 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.0818270036745) / 1.01812896887 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.0254146520166) / 0.780643870284 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - -0.0609264782274) / 1.01648437914 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.0160367365743) / 1.34580656777 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[IL] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], [ADS_sca_2_OUT].scaler_2 AS scaler_2, [ADS_sca_2_OUT].scaler_3 AS scaler_3, [ADS_sca_2_OUT].scaler_4 AS scaler_4, [ADS_sca_2_OUT].scaler_5 AS scaler_5, [ADS_sca_2_OUT].scaler_6 AS scaler_6, [ADS_sca_2_OUT].scaler_7 AS scaler_7, [ADS_sca_2_OUT].scaler_8 AS scaler_8, [ADS_sca_2_OUT].scaler_9 AS scaler_9, [ADS_sca_2_OUT].scaler_10 AS scaler_10, [ADS_sca_2_OUT].scaler_11 AS scaler_11 
FROM [ADS_sca_2_OUT]), 
[HL_BA_1] AS 
(SELECT [IL].[KEY] AS [KEY], 2.05460107945 * [IL].scaler_2 + -4.646340635 * [IL].scaler_3 + 3.1902332087 * [IL].scaler_4 + 0.862178834533 * [IL].scaler_5 + 0.682954649208 * [IL].scaler_6 + -2.56079371836 * [IL].scaler_7 + -2.27193568226 * [IL].scaler_8 + 1.38457546804 * [IL].scaler_9 + -1.62578236428 * [IL].scaler_10 + -0.988515088632 * [IL].scaler_11 + 1.11792404936 AS [NEUR_1_1], -0.603212714493 * [IL].scaler_2 + -3.52110028988 * [IL].scaler_3 + -5.79938859286 * [IL].scaler_4 + 0.141164911464 * [IL].scaler_5 + -0.309154103283 * [IL].scaler_6 + -2.08681418051 * [IL].scaler_7 + -3.03377175754 * [IL].scaler_8 + -0.290449423355 * [IL].scaler_9 + 3.6401708488 * [IL].scaler_10 + -1.53394679282 * [IL].scaler_11 + -0.797127704739 AS [NEUR_1_2], 2.60404208678 * [IL].scaler_2 + 2.30244671888 * [IL].scaler_3 + 1.07297859919 * [IL].scaler_4 + 2.26342508447 * [IL].scaler_5 + -3.39753799112 * [IL].scaler_6 + 4.665341548 * [IL].scaler_7 + 1.8281150752 * [IL].scaler_8 + -3.99649361873 * [IL].scaler_9 + -1.30839038359 * [IL].scaler_10 + -1.46941830042 * [IL].scaler_11 + -0.102732658483 AS [NEUR_1_3] 
FROM [IL]), 
[HL_1_relu] AS 
(SELECT [HL_BA_1].[KEY] AS [KEY], CASE WHEN ([HL_BA_1].[NEUR_1_1] >= 0.0) THEN [HL_BA_1].[NEUR_1_1] ELSE 0.0 END AS [NEUR_1_1], CASE WHEN ([HL_BA_1].[NEUR_1_2] >= 0.0) THEN [HL_BA_1].[NEUR_1_2] ELSE 0.0 END AS [NEUR_1_2], CASE WHEN ([HL_BA_1].[NEUR_1_3] >= 0.0) THEN [HL_BA_1].[NEUR_1_3] ELSE 0.0 END AS [NEUR_1_3] 
FROM [HL_BA_1]), 
[HL_BA_2] AS 
(SELECT [HL_1_relu].[KEY] AS [KEY], -0.760139212116 * [HL_1_relu].[NEUR_1_1] + 0.427279847642 * [HL_1_relu].[NEUR_1_2] + 0.491640735629 * [HL_1_relu].[NEUR_1_3] + -0.304454974617 AS [NEUR_2_1], 6.33327375831 * [HL_1_relu].[NEUR_1_1] + 2.88387836114 * [HL_1_relu].[NEUR_1_2] + -3.58543926733 * [HL_1_relu].[NEUR_1_3] + -4.15403484381 AS [NEUR_2_2], -4.4984753739 * [HL_1_relu].[NEUR_1_1] + 1.85835625794 * [HL_1_relu].[NEUR_1_2] + 2.76754550484 * [HL_1_relu].[NEUR_1_3] + -0.136541905784 AS [NEUR_2_3], 0.111062362416 * [HL_1_relu].[NEUR_1_1] + -0.50461546379 * [HL_1_relu].[NEUR_1_2] + -0.406529213412 * [HL_1_relu].[NEUR_1_3] + -0.796433042434 AS [NEUR_2_4], -0.587666328033 * [HL_1_relu].[NEUR_1_1] + 0.8278652894 * [HL_1_relu].[NEUR_1_2] + -0.705106909564 * [HL_1_relu].[NEUR_1_3] + -0.407888937585 AS [NEUR_2_5] 
FROM [HL_1_relu]), 
[HL_2_relu] AS 
(SELECT [HL_BA_2].[KEY] AS [KEY], CASE WHEN ([HL_BA_2].[NEUR_2_1] >= 0.0) THEN [HL_BA_2].[NEUR_2_1] ELSE 0.0 END AS [NEUR_2_1], CASE WHEN ([HL_BA_2].[NEUR_2_2] >= 0.0) THEN [HL_BA_2].[NEUR_2_2] ELSE 0.0 END AS [NEUR_2_2], CASE WHEN ([HL_BA_2].[NEUR_2_3] >= 0.0) THEN [HL_BA_2].[NEUR_2_3] ELSE 0.0 END AS [NEUR_2_3], CASE WHEN ([HL_BA_2].[NEUR_2_4] >= 0.0) THEN [HL_BA_2].[NEUR_2_4] ELSE 0.0 END AS [NEUR_2_4], CASE WHEN ([HL_BA_2].[NEUR_2_5] >= 0.0) THEN [HL_BA_2].[NEUR_2_5] ELSE 0.0 END AS [NEUR_2_5] 
FROM [HL_BA_2]), 
[OL_BA] AS 
(SELECT [HL_2_relu].[KEY] AS [KEY], 0.889728182579 * [HL_2_relu].[NEUR_2_1] + -5.63769368003 * [HL_2_relu].[NEUR_2_2] + 2.89561692474 * [HL_2_relu].[NEUR_2_3] + 0.700665263994 * [HL_2_relu].[NEUR_2_4] + -0.518896716576 * [HL_2_relu].[NEUR_2_5] + 1.38758315211 AS [NEUR_3_1] 
FROM [HL_2_relu]), 
[OL_logistic] AS 
(SELECT [OL_BA].[KEY] AS [KEY], 1.0 / (1.0 + exp(-[OL_BA].[NEUR_3_1])) AS [NEUR_3_1] 
FROM [OL_BA]), 
orig_cte AS 
(SELECT [OL_logistic].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], 1.0 - [OL_logistic].[NEUR_3_1] AS [Proba_0], [OL_logistic].[NEUR_3_1] AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [OL_logistic]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max.[max_LogProba] = score_class_union.[LogProba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max.[max_Proba] = score_class_union.[Proba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max.[max_Score] = score_class_union.[Score] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score] 
FROM score_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], arg_max_cte.[arg_max_Proba] AS [Decision] 
FROM arg_max_cte