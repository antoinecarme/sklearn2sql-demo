-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.0 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.293433083957 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 5.07398171239 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 11.8204488778 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN 11.8071487947 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN 5.80881130507 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN 1.38570241064 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.131338320865 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.00581878636741 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 1.96674979219 ELSE [ADS].[Feature_9] END AS impter_11, CASE WHEN ([ADS].[Feature_10] IS NULL) THEN 10.3283458022 ELSE [ADS].[Feature_10] END AS impter_12, CASE WHEN ([ADS].[Feature_11] IS NULL) THEN 12.0656691604 ELSE [ADS].[Feature_11] END AS impter_13, CASE WHEN ([ADS].[Feature_12] IS NULL) THEN 10.1853699086 ELSE [ADS].[Feature_12] END AS impter_14, CASE WHEN ([ADS].[Feature_13] IS NULL) THEN 8.04156275977 ELSE [ADS].[Feature_13] END AS impter_15, CASE WHEN ([ADS].[Feature_14] IS NULL) THEN 1.90191188695 ELSE [ADS].[Feature_14] END AS impter_16, CASE WHEN ([ADS].[Feature_15] IS NULL) THEN 0.106400665004 ELSE [ADS].[Feature_15] END AS impter_17, CASE WHEN ([ADS].[Feature_16] IS NULL) THEN 0.00166251039069 ELSE [ADS].[Feature_16] END AS impter_18, CASE WHEN ([ADS].[Feature_17] IS NULL) THEN 2.5719035744 ELSE [ADS].[Feature_17] END AS impter_19, CASE WHEN ([ADS].[Feature_18] IS NULL) THEN 9.99168744805 ELSE [ADS].[Feature_18] END AS impter_20, CASE WHEN ([ADS].[Feature_19] IS NULL) THEN 7.13549459684 ELSE [ADS].[Feature_19] END AS impter_21, CASE WHEN ([ADS].[Feature_20] IS NULL) THEN 7.04987531172 ELSE [ADS].[Feature_20] END AS impter_22, CASE WHEN ([ADS].[Feature_21] IS NULL) THEN 7.6965918537 ELSE [ADS].[Feature_21] END AS impter_23, CASE WHEN ([ADS].[Feature_22] IS NULL) THEN 1.87364921031 ELSE [ADS].[Feature_22] END AS impter_24, CASE WHEN ([ADS].[Feature_23] IS NULL) THEN 0.0540315876974 ELSE [ADS].[Feature_23] END AS impter_25, CASE WHEN ([ADS].[Feature_24] IS NULL) THEN 0.000831255195345 ELSE [ADS].[Feature_24] END AS impter_26, CASE WHEN ([ADS].[Feature_25] IS NULL) THEN 2.5170407315 ELSE [ADS].[Feature_25] END AS impter_27, CASE WHEN ([ADS].[Feature_26] IS NULL) THEN 9.19950124688 ELSE [ADS].[Feature_26] END AS impter_28, CASE WHEN ([ADS].[Feature_27] IS NULL) THEN 9.02244389027 ELSE [ADS].[Feature_27] END AS impter_29, CASE WHEN ([ADS].[Feature_28] IS NULL) THEN 9.99418121363 ELSE [ADS].[Feature_28] END AS impter_30, CASE WHEN ([ADS].[Feature_29] IS NULL) THEN 7.60432252702 ELSE [ADS].[Feature_29] END AS impter_31, CASE WHEN ([ADS].[Feature_30] IS NULL) THEN 2.35245220283 ELSE [ADS].[Feature_30] END AS impter_32, CASE WHEN ([ADS].[Feature_31] IS NULL) THEN 0.000831255195345 ELSE [ADS].[Feature_31] END AS impter_33, CASE WHEN ([ADS].[Feature_32] IS NULL) THEN 0.0 ELSE [ADS].[Feature_32] END AS impter_34, CASE WHEN ([ADS].[Feature_33] IS NULL) THEN 2.29925187032 ELSE [ADS].[Feature_33] END AS impter_35, CASE WHEN ([ADS].[Feature_34] IS NULL) THEN 7.56691604323 ELSE [ADS].[Feature_34] END AS impter_36, CASE WHEN ([ADS].[Feature_35] IS NULL) THEN 9.1604322527 ELSE [ADS].[Feature_35] END AS impter_37, CASE WHEN ([ADS].[Feature_36] IS NULL) THEN 10.3674147963 ELSE [ADS].[Feature_36] END AS impter_38, CASE WHEN ([ADS].[Feature_37] IS NULL) THEN 8.75727348296 ELSE [ADS].[Feature_37] END AS impter_39, CASE WHEN ([ADS].[Feature_38] IS NULL) THEN 2.79966749792 ELSE [ADS].[Feature_38] END AS impter_40, CASE WHEN ([ADS].[Feature_39] IS NULL) THEN 0.0 ELSE [ADS].[Feature_39] END AS impter_41, CASE WHEN ([ADS].[Feature_40] IS NULL) THEN 0.00997506234414 ELSE [ADS].[Feature_40] END AS impter_42, CASE WHEN ([ADS].[Feature_41] IS NULL) THEN 1.55860349127 ELSE [ADS].[Feature_41] END AS impter_43, CASE WHEN ([ADS].[Feature_42] IS NULL) THEN 6.83790523691 ELSE [ADS].[Feature_42] END AS impter_44, CASE WHEN ([ADS].[Feature_43] IS NULL) THEN 7.30257689111 ELSE [ADS].[Feature_43] END AS impter_45, CASE WHEN ([ADS].[Feature_44] IS NULL) THEN 7.77306733167 ELSE [ADS].[Feature_44] END AS impter_46, CASE WHEN ([ADS].[Feature_45] IS NULL) THEN 8.29592684954 ELSE [ADS].[Feature_45] END AS impter_47, CASE WHEN ([ADS].[Feature_46] IS NULL) THEN 3.38819617623 ELSE [ADS].[Feature_46] END AS impter_48, CASE WHEN ([ADS].[Feature_47] IS NULL) THEN 0.0365752285952 ELSE [ADS].[Feature_47] END AS impter_49, CASE WHEN ([ADS].[Feature_48] IS NULL) THEN 0.00332502078138 ELSE [ADS].[Feature_48] END AS impter_50, CASE WHEN ([ADS].[Feature_49] IS NULL) THEN 0.715710723192 ELSE [ADS].[Feature_49] END AS impter_51, CASE WHEN ([ADS].[Feature_50] IS NULL) THEN 7.47714048213 ELSE [ADS].[Feature_50] END AS impter_52, CASE WHEN ([ADS].[Feature_51] IS NULL) THEN 9.5536159601 ELSE [ADS].[Feature_51] END AS impter_53, CASE WHEN ([ADS].[Feature_52] IS NULL) THEN 9.53948462178 ELSE [ADS].[Feature_52] END AS impter_54, CASE WHEN ([ADS].[Feature_53] IS NULL) THEN 8.83374896093 ELSE [ADS].[Feature_53] END AS impter_55, CASE WHEN ([ADS].[Feature_54] IS NULL) THEN 3.8029925187 ELSE [ADS].[Feature_54] END AS impter_56, CASE WHEN ([ADS].[Feature_55] IS NULL) THEN 0.243557772236 ELSE [ADS].[Feature_55] END AS impter_57, CASE WHEN ([ADS].[Feature_56] IS NULL) THEN 0.000831255195345 ELSE [ADS].[Feature_56] END AS impter_58, CASE WHEN ([ADS].[Feature_57] IS NULL) THEN 0.266832917706 ELSE [ADS].[Feature_57] END AS impter_59, CASE WHEN ([ADS].[Feature_58] IS NULL) THEN 5.43059019119 ELSE [ADS].[Feature_58] END AS impter_60, CASE WHEN ([ADS].[Feature_59] IS NULL) THEN 12.0864505403 ELSE [ADS].[Feature_59] END AS impter_61, CASE WHEN ([ADS].[Feature_60] IS NULL) THEN 11.8719866999 ELSE [ADS].[Feature_60] END AS impter_62, CASE WHEN ([ADS].[Feature_61] IS NULL) THEN 6.74812967581 ELSE [ADS].[Feature_61] END AS impter_63, CASE WHEN ([ADS].[Feature_62] IS NULL) THEN 2.15128844555 ELSE [ADS].[Feature_62] END AS impter_64, CASE WHEN ([ADS].[Feature_63] IS NULL) THEN 0.412302576891 ELSE [ADS].[Feature_63] END AS impter_65 
FROM digits AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - 0.0) / 1.0 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.293433083957) / 0.859845005927 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 5.07398171239) / 4.71696110342 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 11.8204488778) / 4.22115333284 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - 11.8071487947) / 4.33559553334 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - 5.80881130507) / 5.69478817014 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - 1.38570241064) / 3.36514752375 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.131338320865) / 1.03602946954 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.00581878636741) / 0.0954460521656 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 1.96674979219) / 3.17914416142 AS scaler_11, (CAST([ADS_imp_1_OUT].impter_12 AS FLOAT) - 10.3283458022) / 5.41167293882 AS scaler_12, (CAST([ADS_imp_1_OUT].impter_13 AS FLOAT) - 12.0656691604) / 3.94979003791 AS scaler_13, (CAST([ADS_imp_1_OUT].impter_14 AS FLOAT) - 10.1853699086) / 4.76650673546 AS scaler_14, (CAST([ADS_imp_1_OUT].impter_15 AS FLOAT) - 8.04156275977) / 6.0876066041 AS scaler_15, (CAST([ADS_imp_1_OUT].impter_16 AS FLOAT) - 1.90191188695) / 3.64264316294 AS scaler_16, (CAST([ADS_imp_1_OUT].impter_17 AS FLOAT) - 0.106400665004) / 0.822774695912 AS scaler_17, (CAST([ADS_imp_1_OUT].impter_18 AS FLOAT) - 0.00166251039069) / 0.0407399858848 AS scaler_18, (CAST([ADS_imp_1_OUT].impter_19 AS FLOAT) - 2.5719035744) / 3.56305629928 AS scaler_19, (CAST([ADS_imp_1_OUT].impter_20 AS FLOAT) - 9.99168744805) / 5.64964316504 AS scaler_20, (CAST([ADS_imp_1_OUT].impter_21 AS FLOAT) - 7.13549459684) / 5.81502871188 AS scaler_21, (CAST([ADS_imp_1_OUT].impter_22 AS FLOAT) - 7.04987531172) / 6.15922069493 AS scaler_22, (CAST([ADS_imp_1_OUT].impter_23 AS FLOAT) - 7.6965918537) / 6.25532232413 AS scaler_23, (CAST([ADS_imp_1_OUT].impter_24 AS FLOAT) - 1.87364921031) / 3.41099813777 AS scaler_24, (CAST([ADS_imp_1_OUT].impter_25 AS FLOAT) - 0.0540315876974) / 0.421263533813 AS scaler_25, (CAST([ADS_imp_1_OUT].impter_26 AS FLOAT) - 0.000831255195345) / 0.0288195109283 AS scaler_26, (CAST([ADS_imp_1_OUT].impter_27 AS FLOAT) - 2.5170407315) / 3.19163503844 AS scaler_27, (CAST([ADS_imp_1_OUT].impter_28 AS FLOAT) - 9.19950124688) / 6.15403007807 AS scaler_28, (CAST([ADS_imp_1_OUT].impter_29 AS FLOAT) - 9.02244389027) / 5.83981191231 AS scaler_29, (CAST([ADS_imp_1_OUT].impter_30 AS FLOAT) - 9.99418121363) / 6.10390491835 AS scaler_30, (CAST([ADS_imp_1_OUT].impter_31 AS FLOAT) - 7.60432252702) / 5.91977802282 AS scaler_31, (CAST([ADS_imp_1_OUT].impter_32 AS FLOAT) - 2.35245220283) / 3.79378678582 AS scaler_32, (CAST([ADS_imp_1_OUT].impter_33 AS FLOAT) - 0.000831255195345) / 0.0288195109283 AS scaler_33, (CAST([ADS_imp_1_OUT].impter_34 AS FLOAT) - 0.0) / 1.0 AS scaler_34, (CAST([ADS_imp_1_OUT].impter_35 AS FLOAT) - 2.29925187032) / 3.51156139729 AS scaler_35, (CAST([ADS_imp_1_OUT].impter_36 AS FLOAT) - 7.56691604323) / 6.31701730353 AS scaler_36, (CAST([ADS_imp_1_OUT].impter_37 AS FLOAT) - 9.1604322527) / 6.1997798861 AS scaler_37, (CAST([ADS_imp_1_OUT].impter_38 AS FLOAT) - 10.3674147963) / 5.87749718139 AS scaler_38, (CAST([ADS_imp_1_OUT].impter_39 AS FLOAT) - 8.75727348296) / 5.85464866041 AS scaler_39, (CAST([ADS_imp_1_OUT].impter_40 AS FLOAT) - 2.79966749792) / 3.50284528298 AS scaler_40, (CAST([ADS_imp_1_OUT].impter_41 AS FLOAT) - 0.0) / 1.0 AS scaler_41, (CAST([ADS_imp_1_OUT].impter_42 AS FLOAT) - 0.00997506234414) / 0.162790246582 AS scaler_42, (CAST([ADS_imp_1_OUT].impter_43 AS FLOAT) - 1.55860349127) / 2.98466828413 AS scaler_43, (CAST([ADS_imp_1_OUT].impter_44 AS FLOAT) - 6.83790523691) / 6.54553660728 AS scaler_44, (CAST([ADS_imp_1_OUT].impter_45 AS FLOAT) - 7.30257689111) / 6.44510433727 AS scaler_45, (CAST([ADS_imp_1_OUT].impter_46 AS FLOAT) - 7.77306733167) / 6.2858645059 AS scaler_46, (CAST([ADS_imp_1_OUT].impter_47 AS FLOAT) - 8.29592684954) / 5.69877340506 AS scaler_47, (CAST([ADS_imp_1_OUT].impter_48 AS FLOAT) - 3.38819617623) / 4.31911912467 AS scaler_48, (CAST([ADS_imp_1_OUT].impter_49 AS FLOAT) - 0.0365752285952) / 0.362854080738 AS scaler_49, (CAST([ADS_imp_1_OUT].impter_50 AS FLOAT) - 0.00332502078138) / 0.0911125468322 AS scaler_50, (CAST([ADS_imp_1_OUT].impter_51 AS FLOAT) - 0.715710723192) / 1.75156338368 AS scaler_51, (CAST([ADS_imp_1_OUT].impter_52 AS FLOAT) - 7.47714048213) / 5.70412935863 AS scaler_52, (CAST([ADS_imp_1_OUT].impter_53 AS FLOAT) - 9.5536159601) / 5.24014268924 AS scaler_53, (CAST([ADS_imp_1_OUT].impter_54 AS FLOAT) - 9.53948462178) / 5.28717094725 AS scaler_54, (CAST([ADS_imp_1_OUT].impter_55 AS FLOAT) - 8.83374896093) / 6.03665375205 AS scaler_55, (CAST([ADS_imp_1_OUT].impter_56 AS FLOAT) - 3.8029925187) / 4.99145647696 AS scaler_56, (CAST([ADS_imp_1_OUT].impter_57 AS FLOAT) - 0.243557772236) / 1.08937190592 AS scaler_57, (CAST([ADS_imp_1_OUT].impter_58 AS FLOAT) - 0.000831255195345) / 0.0288195109283 AS scaler_58, (CAST([ADS_imp_1_OUT].impter_59 AS FLOAT) - 0.266832917706) / 0.887404536173 AS scaler_59, (CAST([ADS_imp_1_OUT].impter_60 AS FLOAT) - 5.43059019119) / 5.07966086609 AS scaler_60, (CAST([ADS_imp_1_OUT].impter_61 AS FLOAT) - 12.0864505403) / 4.32751151319 AS scaler_61, (CAST([ADS_imp_1_OUT].impter_62 AS FLOAT) - 11.8719866999) / 4.84971877494 AS scaler_62, (CAST([ADS_imp_1_OUT].impter_63 AS FLOAT) - 6.74812967581) / 5.89691744232 AS scaler_63, (CAST([ADS_imp_1_OUT].impter_64 AS FLOAT) - 2.15128844555) / 4.1936167999 AS scaler_64, (CAST([ADS_imp_1_OUT].impter_65 AS FLOAT) - 0.412302576891) / 1.98487588299 AS scaler_65 
FROM [ADS_imp_1_OUT]), 
[IL] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], [ADS_sca_2_OUT].scaler_2 AS scaler_2, [ADS_sca_2_OUT].scaler_3 AS scaler_3, [ADS_sca_2_OUT].scaler_4 AS scaler_4, [ADS_sca_2_OUT].scaler_5 AS scaler_5, [ADS_sca_2_OUT].scaler_6 AS scaler_6, [ADS_sca_2_OUT].scaler_7 AS scaler_7, [ADS_sca_2_OUT].scaler_8 AS scaler_8, [ADS_sca_2_OUT].scaler_9 AS scaler_9, [ADS_sca_2_OUT].scaler_10 AS scaler_10, [ADS_sca_2_OUT].scaler_11 AS scaler_11, [ADS_sca_2_OUT].scaler_12 AS scaler_12, [ADS_sca_2_OUT].scaler_13 AS scaler_13, [ADS_sca_2_OUT].scaler_14 AS scaler_14, [ADS_sca_2_OUT].scaler_15 AS scaler_15, [ADS_sca_2_OUT].scaler_16 AS scaler_16, [ADS_sca_2_OUT].scaler_17 AS scaler_17, [ADS_sca_2_OUT].scaler_18 AS scaler_18, [ADS_sca_2_OUT].scaler_19 AS scaler_19, [ADS_sca_2_OUT].scaler_20 AS scaler_20, [ADS_sca_2_OUT].scaler_21 AS scaler_21, [ADS_sca_2_OUT].scaler_22 AS scaler_22, [ADS_sca_2_OUT].scaler_23 AS scaler_23, [ADS_sca_2_OUT].scaler_24 AS scaler_24, [ADS_sca_2_OUT].scaler_25 AS scaler_25, [ADS_sca_2_OUT].scaler_26 AS scaler_26, [ADS_sca_2_OUT].scaler_27 AS scaler_27, [ADS_sca_2_OUT].scaler_28 AS scaler_28, [ADS_sca_2_OUT].scaler_29 AS scaler_29, [ADS_sca_2_OUT].scaler_30 AS scaler_30, [ADS_sca_2_OUT].scaler_31 AS scaler_31, [ADS_sca_2_OUT].scaler_32 AS scaler_32, [ADS_sca_2_OUT].scaler_33 AS scaler_33, [ADS_sca_2_OUT].scaler_34 AS scaler_34, [ADS_sca_2_OUT].scaler_35 AS scaler_35, [ADS_sca_2_OUT].scaler_36 AS scaler_36, [ADS_sca_2_OUT].scaler_37 AS scaler_37, [ADS_sca_2_OUT].scaler_38 AS scaler_38, [ADS_sca_2_OUT].scaler_39 AS scaler_39, [ADS_sca_2_OUT].scaler_40 AS scaler_40, [ADS_sca_2_OUT].scaler_41 AS scaler_41, [ADS_sca_2_OUT].scaler_42 AS scaler_42, [ADS_sca_2_OUT].scaler_43 AS scaler_43, [ADS_sca_2_OUT].scaler_44 AS scaler_44, [ADS_sca_2_OUT].scaler_45 AS scaler_45, [ADS_sca_2_OUT].scaler_46 AS scaler_46, [ADS_sca_2_OUT].scaler_47 AS scaler_47, [ADS_sca_2_OUT].scaler_48 AS scaler_48, [ADS_sca_2_OUT].scaler_49 AS scaler_49, [ADS_sca_2_OUT].scaler_50 AS scaler_50, [ADS_sca_2_OUT].scaler_51 AS scaler_51, [ADS_sca_2_OUT].scaler_52 AS scaler_52, [ADS_sca_2_OUT].scaler_53 AS scaler_53, [ADS_sca_2_OUT].scaler_54 AS scaler_54, [ADS_sca_2_OUT].scaler_55 AS scaler_55, [ADS_sca_2_OUT].scaler_56 AS scaler_56, [ADS_sca_2_OUT].scaler_57 AS scaler_57, [ADS_sca_2_OUT].scaler_58 AS scaler_58, [ADS_sca_2_OUT].scaler_59 AS scaler_59, [ADS_sca_2_OUT].scaler_60 AS scaler_60, [ADS_sca_2_OUT].scaler_61 AS scaler_61, [ADS_sca_2_OUT].scaler_62 AS scaler_62, [ADS_sca_2_OUT].scaler_63 AS scaler_63, [ADS_sca_2_OUT].scaler_64 AS scaler_64, [ADS_sca_2_OUT].scaler_65 AS scaler_65 
FROM [ADS_sca_2_OUT]), 
[HL_BA_1] AS 
(SELECT [IL].[KEY] AS [KEY], -0.0434997292402 * [IL].scaler_2 + -0.364646213657 * [IL].scaler_3 + -0.138180458869 * [IL].scaler_4 + 1.42478541955 * [IL].scaler_5 + 0.242252738723 * [IL].scaler_6 + -2.17035783495 * [IL].scaler_7 + -2.40951751007 * [IL].scaler_8 + -0.446763742659 * [IL].scaler_9 + -0.0409549775537 * [IL].scaler_10 + 0.303859487019 * [IL].scaler_11 + 1.03874379879 * [IL].scaler_12 + 0.0169225394983 * [IL].scaler_13 + 0.288275776372 * [IL].scaler_14 + 2.17067359504 * [IL].scaler_15 + -0.627409103342 * [IL].scaler_16 + -0.287870110953 * [IL].scaler_17 + 0.105740964752 * [IL].scaler_18 + -0.739760459283 * [IL].scaler_19 + 0.939093370828 * [IL].scaler_20 + -0.48392333587 * [IL].scaler_21 + 0.0154055910554 * [IL].scaler_22 + 2.38996270851 * [IL].scaler_23 + 0.111761588384 * [IL].scaler_24 + -0.451467265609 * [IL].scaler_25 + -0.360185213127 * [IL].scaler_26 + 0.336746521917 * [IL].scaler_27 + -0.298254234587 * [IL].scaler_28 + -1.84525408947 * [IL].scaler_29 + -1.53988894598 * [IL].scaler_30 + 1.058513246 * [IL].scaler_31 + 0.597284248095 * [IL].scaler_32 + -0.00876925769318 * [IL].scaler_33 + -0.291014722294 * [IL].scaler_34 + -0.275334680205 * [IL].scaler_35 + -0.883492924262 * [IL].scaler_36 + -0.817203525649 * [IL].scaler_37 + -1.77180247662 * [IL].scaler_38 + -1.32173781252 * [IL].scaler_39 + -0.822488626383 * [IL].scaler_40 + 0.113528547982 * [IL].scaler_41 + -0.185206753794 * [IL].scaler_42 + -0.629701742202 * [IL].scaler_43 + 1.00687004058 * [IL].scaler_44 + -0.0620518669674 * [IL].scaler_45 + -2.4989482002 * [IL].scaler_46 + 0.955027425161 * [IL].scaler_47 + -0.900955500617 * [IL].scaler_48 + 0.824759183483 * [IL].scaler_49 + -0.0511413865801 * [IL].scaler_50 + -0.00591450589534 * [IL].scaler_51 + 0.367559833517 * [IL].scaler_52 + 0.459435626155 * [IL].scaler_53 + 0.888037597752 * [IL].scaler_54 + 0.810593755304 * [IL].scaler_55 + 1.19436398201 * [IL].scaler_56 + -0.329043532069 * [IL].scaler_57 + -0.14463737668 * [IL].scaler_58 + 0.538754557347 * [IL].scaler_59 + -0.169155457915 * [IL].scaler_60 + 0.993146471688 * [IL].scaler_61 + 0.829830724664 * [IL].scaler_62 + 0.624501038441 * [IL].scaler_63 + 0.783183863502 * [IL].scaler_64 + 0.0840577589094 * [IL].scaler_65 + 0.126790423391 AS [NEUR_1_1], 0.0579590158746 * [IL].scaler_2 + -0.754205775584 * [IL].scaler_3 + -0.831241163884 * [IL].scaler_4 + -0.435696215641 * [IL].scaler_5 + -0.51100442063 * [IL].scaler_6 + -1.58457639353 * [IL].scaler_7 + -1.94107004809 * [IL].scaler_8 + -0.475879202757 * [IL].scaler_9 + 0.288671842996 * [IL].scaler_10 + -1.26537250609 * [IL].scaler_11 + -0.204156764678 * [IL].scaler_12 + -0.264023707644 * [IL].scaler_13 + -1.76656118273 * [IL].scaler_14 + 0.822532746696 * [IL].scaler_15 + 0.175890115764 * [IL].scaler_16 + -0.342344066609 * [IL].scaler_17 + 0.11083447984 * [IL].scaler_18 + 0.0816578543681 * [IL].scaler_19 + 1.07511795617 * [IL].scaler_20 + 1.04282782111 * [IL].scaler_21 + -0.141593816189 * [IL].scaler_22 + 1.17023321459 * [IL].scaler_23 + 0.572123907634 * [IL].scaler_24 + 0.0752041390713 * [IL].scaler_25 + -0.0804220098457 * [IL].scaler_26 + -0.0946440888673 * [IL].scaler_27 + 0.190586591591 * [IL].scaler_28 + 1.04647753063 * [IL].scaler_29 + -1.01138595455 * [IL].scaler_30 + -0.724701067881 * [IL].scaler_31 + -0.303691660112 * [IL].scaler_32 + -0.244783061549 * [IL].scaler_33 + -0.240087644406 * [IL].scaler_34 + 0.562956667494 * [IL].scaler_35 + -0.685298275623 * [IL].scaler_36 + 0.544472637928 * [IL].scaler_37 + 0.714499775209 * [IL].scaler_38 + -0.222243760686 * [IL].scaler_39 + -0.118185875637 * [IL].scaler_40 + 0.147850373363 * [IL].scaler_41 + 0.138508481468 * [IL].scaler_42 + -1.20810286735 * [IL].scaler_43 + 3.11687481173 * [IL].scaler_44 + 0.105985174065 * [IL].scaler_45 + 1.85469271979 * [IL].scaler_46 + 0.387453315961 * [IL].scaler_47 + 0.930151063688 * [IL].scaler_48 + 0.372093521731 * [IL].scaler_49 + 0.0589303488109 * [IL].scaler_50 + -0.459278773227 * [IL].scaler_51 + 1.28459747159 * [IL].scaler_52 + -0.043048682271 * [IL].scaler_53 + -1.70647781368 * [IL].scaler_54 + 1.22967013542 * [IL].scaler_55 + 1.013906604 * [IL].scaler_56 + -0.65939675649 * [IL].scaler_57 + -0.0836781276845 * [IL].scaler_58 + 0.667827903055 * [IL].scaler_59 + -1.82136537736 * [IL].scaler_60 + -0.872522297803 * [IL].scaler_61 + 1.28828701457 * [IL].scaler_62 + -0.657107572715 * [IL].scaler_63 + -0.611772795793 * [IL].scaler_64 + 0.00789152962442 * [IL].scaler_65 + 1.44589402109 AS [NEUR_1_2], 0.283575686104 * [IL].scaler_2 + 0.044641612856 * [IL].scaler_3 + -0.712974401694 * [IL].scaler_4 + -0.165409869165 * [IL].scaler_5 + 0.787288714449 * [IL].scaler_6 + -0.428663741807 * [IL].scaler_7 + -1.07228770037 * [IL].scaler_8 + -0.28080492107 * [IL].scaler_9 + -0.335044463323 * [IL].scaler_10 + -0.412247722731 * [IL].scaler_11 + 0.214931147117 * [IL].scaler_12 + 0.321744513771 * [IL].scaler_13 + -0.236996518155 * [IL].scaler_14 + 2.56540642445 * [IL].scaler_15 + -0.418832536304 * [IL].scaler_16 + -0.0720946216658 * [IL].scaler_17 + 0.0330939265777 * [IL].scaler_18 + 0.110280150573 * [IL].scaler_19 + -0.934158128372 * [IL].scaler_20 + 0.30117509282 * [IL].scaler_21 + 1.52993585027 * [IL].scaler_22 + 2.05060239081 * [IL].scaler_23 + 0.515009609758 * [IL].scaler_24 + 0.275237523758 * [IL].scaler_25 + -0.113700428026 * [IL].scaler_26 + -0.64908799889 * [IL].scaler_27 + -0.993448786015 * [IL].scaler_28 + 0.719270179138 * [IL].scaler_29 + -0.28937212287 * [IL].scaler_30 + -0.0316842200768 * [IL].scaler_31 + -1.64345533058 * [IL].scaler_32 + 0.0735715323584 * [IL].scaler_33 + -0.218333102216 * [IL].scaler_34 + -2.65706452631 * [IL].scaler_35 + -0.857530592485 * [IL].scaler_36 + -0.306036002326 * [IL].scaler_37 + 1.9141380807 * [IL].scaler_38 + -0.718356465626 * [IL].scaler_39 + -0.524682305539 * [IL].scaler_40 + -0.261470609978 * [IL].scaler_41 + -0.0623408988405 * [IL].scaler_42 + -0.73197474907 * [IL].scaler_43 + -0.75369769322 * [IL].scaler_44 + -3.89626040426 * [IL].scaler_45 + -0.752984399163 * [IL].scaler_46 + 1.5372495669 * [IL].scaler_47 + 1.82811403459 * [IL].scaler_48 + -0.107297322343 * [IL].scaler_49 + -0.134110926848 * [IL].scaler_50 + -0.0304185890502 * [IL].scaler_51 + 1.46738517619 * [IL].scaler_52 + -0.873366365963 * [IL].scaler_53 + -0.104599985645 * [IL].scaler_54 + 0.436665375981 * [IL].scaler_55 + 0.0702840035457 * [IL].scaler_56 + -0.230827448195 * [IL].scaler_57 + -0.00418932401089 * [IL].scaler_58 + 0.415873973634 * [IL].scaler_59 + 0.487395609295 * [IL].scaler_60 + 0.460813581738 * [IL].scaler_61 + 2.18182612983 * [IL].scaler_62 + -0.170868400189 * [IL].scaler_63 + 0.551892462124 * [IL].scaler_64 + -0.0255102532468 * [IL].scaler_65 + -0.0667752791816 AS [NEUR_1_3] 
FROM [IL]), 
[HL_1_relu] AS 
(SELECT [HL_BA_1].[KEY] AS [KEY], CASE WHEN ([HL_BA_1].[NEUR_1_1] >= 0.0) THEN [HL_BA_1].[NEUR_1_1] ELSE 0.0 END AS [NEUR_1_1], CASE WHEN ([HL_BA_1].[NEUR_1_2] >= 0.0) THEN [HL_BA_1].[NEUR_1_2] ELSE 0.0 END AS [NEUR_1_2], CASE WHEN ([HL_BA_1].[NEUR_1_3] >= 0.0) THEN [HL_BA_1].[NEUR_1_3] ELSE 0.0 END AS [NEUR_1_3] 
FROM [HL_BA_1]), 
[HL_BA_2] AS 
(SELECT [HL_1_relu].[KEY] AS [KEY], -0.00807876537488 * [HL_1_relu].[NEUR_1_1] + -1.18502295065 * [HL_1_relu].[NEUR_1_2] + 0.966931022598 * [HL_1_relu].[NEUR_1_3] + 1.73466197769 AS [NEUR_2_1], -1.03261779332 * [HL_1_relu].[NEUR_1_1] + -0.580557837569 * [HL_1_relu].[NEUR_1_2] + 1.71660803806 * [HL_1_relu].[NEUR_1_3] + -0.34999544478 AS [NEUR_2_2], -0.737455973907 * [HL_1_relu].[NEUR_1_1] + 0.650830769351 * [HL_1_relu].[NEUR_1_2] + 1.31497411228 * [HL_1_relu].[NEUR_1_3] + -0.947762318661 AS [NEUR_2_3], 2.52313518941 * [HL_1_relu].[NEUR_1_1] + 0.143533419096 * [HL_1_relu].[NEUR_1_2] + -1.89696610536 * [HL_1_relu].[NEUR_1_3] + -1.38924834309 AS [NEUR_2_4], 0.804434956939 * [HL_1_relu].[NEUR_1_1] + -0.239892856969 * [HL_1_relu].[NEUR_1_2] + 2.72020710926 * [HL_1_relu].[NEUR_1_3] + -1.48088895142 AS [NEUR_2_5] 
FROM [HL_1_relu]), 
[HL_2_relu] AS 
(SELECT [HL_BA_2].[KEY] AS [KEY], CASE WHEN ([HL_BA_2].[NEUR_2_1] >= 0.0) THEN [HL_BA_2].[NEUR_2_1] ELSE 0.0 END AS [NEUR_2_1], CASE WHEN ([HL_BA_2].[NEUR_2_2] >= 0.0) THEN [HL_BA_2].[NEUR_2_2] ELSE 0.0 END AS [NEUR_2_2], CASE WHEN ([HL_BA_2].[NEUR_2_3] >= 0.0) THEN [HL_BA_2].[NEUR_2_3] ELSE 0.0 END AS [NEUR_2_3], CASE WHEN ([HL_BA_2].[NEUR_2_4] >= 0.0) THEN [HL_BA_2].[NEUR_2_4] ELSE 0.0 END AS [NEUR_2_4], CASE WHEN ([HL_BA_2].[NEUR_2_5] >= 0.0) THEN [HL_BA_2].[NEUR_2_5] ELSE 0.0 END AS [NEUR_2_5] 
FROM [HL_BA_2]), 
[OL_BA] AS 
(SELECT [HL_2_relu].[KEY] AS [KEY], -2.29669946356 * [HL_2_relu].[NEUR_2_1] + 0.320684733789 * [HL_2_relu].[NEUR_2_2] + -1.73072765941 * [HL_2_relu].[NEUR_2_3] + 2.15543886016 * [HL_2_relu].[NEUR_2_4] + 0.740060791083 * [HL_2_relu].[NEUR_2_5] + -3.95518010549 AS [NEUR_3_1], -0.822493341144 * [HL_2_relu].[NEUR_2_1] + 1.7744943737 * [HL_2_relu].[NEUR_2_2] + 1.11812237007 * [HL_2_relu].[NEUR_2_3] + -0.996053401372 * [HL_2_relu].[NEUR_2_4] + -0.34677383097 * [HL_2_relu].[NEUR_2_5] + 2.93724478378 AS [NEUR_3_2], 0.249238331287 * [HL_2_relu].[NEUR_2_1] + -0.068537107592 * [HL_2_relu].[NEUR_2_2] + -1.69053640528 * [HL_2_relu].[NEUR_2_3] + 1.87165544653 * [HL_2_relu].[NEUR_2_4] + 0.826331791501 * [HL_2_relu].[NEUR_2_5] + -0.454252947564 AS [NEUR_3_3], -0.256249129694 * [HL_2_relu].[NEUR_2_1] + 0.694045674252 * [HL_2_relu].[NEUR_2_2] + -1.66898360752 * [HL_2_relu].[NEUR_2_3] + -1.4741131097 * [HL_2_relu].[NEUR_2_4] + 1.60344279661 * [HL_2_relu].[NEUR_2_5] + -0.673227019174 AS [NEUR_3_4], -0.56685072021 * [HL_2_relu].[NEUR_2_1] + 0.0427045049862 * [HL_2_relu].[NEUR_2_2] + 1.64284053109 * [HL_2_relu].[NEUR_2_3] + -1.96896475088 * [HL_2_relu].[NEUR_2_4] + -2.67710101268 * [HL_2_relu].[NEUR_2_5] + 2.16410302741 AS [NEUR_3_5], 1.91939433738 * [HL_2_relu].[NEUR_2_1] + -0.112086471141 * [HL_2_relu].[NEUR_2_2] + -0.206005907204 * [HL_2_relu].[NEUR_2_3] + -1.04021052052 * [HL_2_relu].[NEUR_2_4] + 0.406301997891 * [HL_2_relu].[NEUR_2_5] + 0.58113278951 AS [NEUR_3_6], -1.10467432628 * [HL_2_relu].[NEUR_2_1] + -0.605930865751 * [HL_2_relu].[NEUR_2_2] + 2.62335753045 * [HL_2_relu].[NEUR_2_3] + 1.4424251648 * [HL_2_relu].[NEUR_2_4] + -2.31120903017 * [HL_2_relu].[NEUR_2_5] + -5.70538355174 AS [NEUR_3_7], 2.18859748877 * [HL_2_relu].[NEUR_2_1] + 0.26507418442 * [HL_2_relu].[NEUR_2_2] + -1.667356125 * [HL_2_relu].[NEUR_2_3] + -0.522508816735 * [HL_2_relu].[NEUR_2_4] + -1.46766164611 * [HL_2_relu].[NEUR_2_5] + 0.577992758214 AS [NEUR_3_8], -0.510623506046 * [HL_2_relu].[NEUR_2_1] + 0.0262022087249 * [HL_2_relu].[NEUR_2_2] + 1.08040836947 * [HL_2_relu].[NEUR_2_3] + 1.20731618502 * [HL_2_relu].[NEUR_2_4] + 0.641921335246 * [HL_2_relu].[NEUR_2_5] + 1.02153465424 AS [NEUR_3_9], 0.878266381392 * [HL_2_relu].[NEUR_2_1] + -0.675324878969 * [HL_2_relu].[NEUR_2_2] + -0.896213598093 * [HL_2_relu].[NEUR_2_3] + -0.707619603338 * [HL_2_relu].[NEUR_2_4] + 1.46306480334 * [HL_2_relu].[NEUR_2_5] + 0.898838928716 AS [NEUR_3_10] 
FROM [HL_2_relu]), 
[OL_softmax] AS 
(SELECT [OL_BA].[KEY] AS [KEY], [OL_BA].[NEUR_3_1] AS [NEUR_3_1], [OL_BA].[NEUR_3_2] AS [NEUR_3_2], [OL_BA].[NEUR_3_3] AS [NEUR_3_3], [OL_BA].[NEUR_3_4] AS [NEUR_3_4], [OL_BA].[NEUR_3_5] AS [NEUR_3_5], [OL_BA].[NEUR_3_6] AS [NEUR_3_6], [OL_BA].[NEUR_3_7] AS [NEUR_3_7], [OL_BA].[NEUR_3_8] AS [NEUR_3_8], [OL_BA].[NEUR_3_9] AS [NEUR_3_9], [OL_BA].[NEUR_3_10] AS [NEUR_3_10] 
FROM [OL_BA]), 
orig_cte AS 
(SELECT [OL_softmax].[KEY] AS [KEY], [OL_softmax].[NEUR_3_1] AS [Score_0], [OL_softmax].[NEUR_3_2] AS [Score_1], [OL_softmax].[NEUR_3_3] AS [Score_2], [OL_softmax].[NEUR_3_4] AS [Score_3], [OL_softmax].[NEUR_3_5] AS [Score_4], [OL_softmax].[NEUR_3_6] AS [Score_5], [OL_softmax].[NEUR_3_7] AS [Score_6], [OL_softmax].[NEUR_3_8] AS [Score_7], [OL_softmax].[NEUR_3_9] AS [Score_8], [OL_softmax].[NEUR_3_10] AS [Score_9], CAST(NULL AS FLOAT(53)) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [Proba_4], CAST(NULL AS FLOAT(53)) AS [Proba_5], CAST(NULL AS FLOAT(53)) AS [Proba_6], CAST(NULL AS FLOAT(53)) AS [Proba_7], CAST(NULL AS FLOAT(53)) AS [Proba_8], CAST(NULL AS FLOAT(53)) AS [Proba_9], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_4], CAST(NULL AS FLOAT(53)) AS [LogProba_5], CAST(NULL AS FLOAT(53)) AS [LogProba_6], CAST(NULL AS FLOAT(53)) AS [LogProba_7], CAST(NULL AS FLOAT(53)) AS [LogProba_8], CAST(NULL AS FLOAT(53)) AS [LogProba_9], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [OL_softmax]), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 4 AS class, orig_cte.[LogProba_4] AS [LogProba], orig_cte.[Proba_4] AS [Proba], orig_cte.[Score_4] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 5 AS class, orig_cte.[LogProba_5] AS [LogProba], orig_cte.[Proba_5] AS [Proba], orig_cte.[Score_5] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 6 AS class, orig_cte.[LogProba_6] AS [LogProba], orig_cte.[Proba_6] AS [Proba], orig_cte.[Score_6] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 7 AS class, orig_cte.[LogProba_7] AS [LogProba], orig_cte.[Proba_7] AS [Proba], orig_cte.[Score_7] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 8 AS class, orig_cte.[LogProba_8] AS [LogProba], orig_cte.[Proba_8] AS [Proba], orig_cte.[Score_8] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 9 AS class, orig_cte.[LogProba_9] AS [LogProba], orig_cte.[Proba_9] AS [Proba], orig_cte.[Score_9] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Score_4] AS [Score_4], orig_cte.[Score_5] AS [Score_5], orig_cte.[Score_6] AS [Score_6], orig_cte.[Score_7] AS [Score_7], orig_cte.[Score_8] AS [Score_8], orig_cte.[Score_9] AS [Score_9], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[Proba_4] AS [Proba_4], orig_cte.[Proba_5] AS [Proba_5], orig_cte.[Proba_6] AS [Proba_6], orig_cte.[Proba_7] AS [Proba_7], orig_cte.[Proba_8] AS [Proba_8], orig_cte.[Proba_9] AS [Proba_9], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[LogProba_4] AS [LogProba_4], orig_cte.[LogProba_5] AS [LogProba_5], orig_cte.[LogProba_6] AS [LogProba_6], orig_cte.[LogProba_7] AS [LogProba_7], orig_cte.[LogProba_8] AS [LogProba_8], orig_cte.[LogProba_9] AS [LogProba_9], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
score_soft_max_comp AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Score_4] AS [Score_4], score_max.[Score_5] AS [Score_5], score_max.[Score_6] AS [Score_6], score_max.[Score_7] AS [Score_7], score_max.[Score_8] AS [Score_8], score_max.[Score_9] AS [Score_9], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[Proba_4] AS [Proba_4], score_max.[Proba_5] AS [Proba_5], score_max.[Proba_6] AS [Proba_6], score_max.[Proba_7] AS [Proba_7], score_max.[Proba_8] AS [Proba_8], score_max.[Proba_9] AS [Proba_9], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[LogProba_4] AS [LogProba_4], score_max.[LogProba_5] AS [LogProba_5], score_max.[LogProba_6] AS [LogProba_6], score_max.[LogProba_7] AS [LogProba_7], score_max.[LogProba_8] AS [LogProba_8], score_max.[LogProba_9] AS [LogProba_9], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3], exp(score_max.[Score_4] - score_max.[max_Score]) AS [exp_delta_Score_4], exp(score_max.[Score_5] - score_max.[max_Score]) AS [exp_delta_Score_5], exp(score_max.[Score_6] - score_max.[max_Score]) AS [exp_delta_Score_6], exp(score_max.[Score_7] - score_max.[max_Score]) AS [exp_delta_Score_7], exp(score_max.[Score_8] - score_max.[max_Score]) AS [exp_delta_Score_8], exp(score_max.[Score_9] - score_max.[max_Score]) AS [exp_delta_Score_9] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[LogProba] AS [LogProba], soft_scu.[Proba] AS [Proba], soft_scu.[Score] AS [Score], soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_comp.[KEY] AS [KEY], 0 AS class, score_soft_max_comp.[LogProba_0] AS [LogProba], score_soft_max_comp.[Proba_0] AS [Proba], score_soft_max_comp.[Score_0] AS [Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 1 AS class, score_soft_max_comp.[LogProba_1] AS [LogProba], score_soft_max_comp.[Proba_1] AS [Proba], score_soft_max_comp.[Score_1] AS [Score], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 2 AS class, score_soft_max_comp.[LogProba_2] AS [LogProba], score_soft_max_comp.[Proba_2] AS [Proba], score_soft_max_comp.[Score_2] AS [Score], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 3 AS class, score_soft_max_comp.[LogProba_3] AS [LogProba], score_soft_max_comp.[Proba_3] AS [Proba], score_soft_max_comp.[Score_3] AS [Score], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 4 AS class, score_soft_max_comp.[LogProba_4] AS [LogProba], score_soft_max_comp.[Proba_4] AS [Proba], score_soft_max_comp.[Score_4] AS [Score], score_soft_max_comp.[exp_delta_Score_4] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 5 AS class, score_soft_max_comp.[LogProba_5] AS [LogProba], score_soft_max_comp.[Proba_5] AS [Proba], score_soft_max_comp.[Score_5] AS [Score], score_soft_max_comp.[exp_delta_Score_5] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 6 AS class, score_soft_max_comp.[LogProba_6] AS [LogProba], score_soft_max_comp.[Proba_6] AS [Proba], score_soft_max_comp.[Score_6] AS [Score], score_soft_max_comp.[exp_delta_Score_6] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 7 AS class, score_soft_max_comp.[LogProba_7] AS [LogProba], score_soft_max_comp.[Proba_7] AS [Proba], score_soft_max_comp.[Score_7] AS [Score], score_soft_max_comp.[exp_delta_Score_7] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 8 AS class, score_soft_max_comp.[LogProba_8] AS [LogProba], score_soft_max_comp.[Proba_8] AS [Proba], score_soft_max_comp.[Score_8] AS [Score], score_soft_max_comp.[exp_delta_Score_8] AS [exp_delta_Score] 
FROM score_soft_max_comp UNION ALL SELECT score_soft_max_comp.[KEY] AS [KEY], 9 AS class, score_soft_max_comp.[LogProba_9] AS [LogProba], score_soft_max_comp.[Proba_9] AS [Proba], score_soft_max_comp.[Score_9] AS [Score], score_soft_max_comp.[exp_delta_Score_9] AS [exp_delta_Score] 
FROM score_soft_max_comp) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_comp.[KEY] AS [KEY], score_soft_max_comp.[Score_0] AS [Score_0], score_soft_max_comp.[Score_1] AS [Score_1], score_soft_max_comp.[Score_2] AS [Score_2], score_soft_max_comp.[Score_3] AS [Score_3], score_soft_max_comp.[Score_4] AS [Score_4], score_soft_max_comp.[Score_5] AS [Score_5], score_soft_max_comp.[Score_6] AS [Score_6], score_soft_max_comp.[Score_7] AS [Score_7], score_soft_max_comp.[Score_8] AS [Score_8], score_soft_max_comp.[Score_9] AS [Score_9], score_soft_max_comp.[Proba_0] AS [Proba_0], score_soft_max_comp.[Proba_1] AS [Proba_1], score_soft_max_comp.[Proba_2] AS [Proba_2], score_soft_max_comp.[Proba_3] AS [Proba_3], score_soft_max_comp.[Proba_4] AS [Proba_4], score_soft_max_comp.[Proba_5] AS [Proba_5], score_soft_max_comp.[Proba_6] AS [Proba_6], score_soft_max_comp.[Proba_7] AS [Proba_7], score_soft_max_comp.[Proba_8] AS [Proba_8], score_soft_max_comp.[Proba_9] AS [Proba_9], score_soft_max_comp.[LogProba_0] AS [LogProba_0], score_soft_max_comp.[LogProba_1] AS [LogProba_1], score_soft_max_comp.[LogProba_2] AS [LogProba_2], score_soft_max_comp.[LogProba_3] AS [LogProba_3], score_soft_max_comp.[LogProba_4] AS [LogProba_4], score_soft_max_comp.[LogProba_5] AS [LogProba_5], score_soft_max_comp.[LogProba_6] AS [LogProba_6], score_soft_max_comp.[LogProba_7] AS [LogProba_7], score_soft_max_comp.[LogProba_8] AS [LogProba_8], score_soft_max_comp.[LogProba_9] AS [LogProba_9], score_soft_max_comp.[Decision] AS [Decision], score_soft_max_comp.[max_LogProba] AS [max_LogProba], score_soft_max_comp.[max_Proba] AS [max_Proba], score_soft_max_comp.[max_Score] AS [max_Score], score_soft_max_comp.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_comp.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_comp.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_comp.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max_comp.[exp_delta_Score_4] AS [exp_delta_Score_4], score_soft_max_comp.[exp_delta_Score_5] AS [exp_delta_Score_5], score_soft_max_comp.[exp_delta_Score_6] AS [exp_delta_Score_6], score_soft_max_comp.[exp_delta_Score_7] AS [exp_delta_Score_7], score_soft_max_comp.[exp_delta_Score_8] AS [exp_delta_Score_8], score_soft_max_comp.[exp_delta_Score_9] AS [exp_delta_Score_9], (SELECT sum(score_class_union_soft.[exp_delta_Score]) AS sum_1 
FROM score_class_union_soft 
WHERE score_soft_max_comp.[KEY] = score_class_union_soft.[KEY]) AS [sum_ExpDeltaScore] 
FROM score_soft_max_comp), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Score_4] AS [Score_4], score_soft_max.[Score_5] AS [Score_5], score_soft_max.[Score_6] AS [Score_6], score_soft_max.[Score_7] AS [Score_7], score_soft_max.[Score_8] AS [Score_8], score_soft_max.[Score_9] AS [Score_9], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[Proba_4] AS [Proba_4], score_soft_max.[Proba_5] AS [Proba_5], score_soft_max.[Proba_6] AS [Proba_6], score_soft_max.[Proba_7] AS [Proba_7], score_soft_max.[Proba_8] AS [Proba_8], score_soft_max.[Proba_9] AS [Proba_9], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[LogProba_4] AS [LogProba_4], score_soft_max.[LogProba_5] AS [LogProba_5], score_soft_max.[LogProba_6] AS [LogProba_6], score_soft_max.[LogProba_7] AS [LogProba_7], score_soft_max.[LogProba_8] AS [LogProba_8], score_soft_max.[LogProba_9] AS [LogProba_9], score_soft_max.[Decision] AS [Decision], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[exp_delta_Score_4] AS [exp_delta_Score_4], score_soft_max.[exp_delta_Score_5] AS [exp_delta_Score_5], score_soft_max.[exp_delta_Score_6] AS [exp_delta_Score_6], score_soft_max.[exp_delta_Score_7] AS [exp_delta_Score_7], score_soft_max.[exp_delta_Score_8] AS [exp_delta_Score_8], score_soft_max.[exp_delta_Score_9] AS [exp_delta_Score_9], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_soft_max.[max_LogProba] = score_class_union.[LogProba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_soft_max.[max_Proba] = score_class_union.[Proba] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_soft_max.[max_Score] = score_class_union.[Score] AND score_soft_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3], score_soft_max.[exp_delta_Score_4] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_4], score_soft_max.[exp_delta_Score_5] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_5], score_soft_max.[exp_delta_Score_6] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_6], score_soft_max.[exp_delta_Score_7] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_7], score_soft_max.[exp_delta_Score_8] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_8], score_soft_max.[exp_delta_Score_9] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_9] 
FROM score_soft_max)
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], CAST(NULL AS FLOAT) AS [Score_4], CAST(NULL AS FLOAT) AS [Score_5], CAST(NULL AS FLOAT) AS [Score_6], CAST(NULL AS FLOAT) AS [Score_7], CAST(NULL AS FLOAT) AS [Score_8], CAST(NULL AS FLOAT) AS [Score_9], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], arg_max_cte.[SoftProba_4] AS [Proba_4], arg_max_cte.[SoftProba_5] AS [Proba_5], arg_max_cte.[SoftProba_6] AS [Proba_6], arg_max_cte.[SoftProba_7] AS [Proba_7], arg_max_cte.[SoftProba_8] AS [Proba_8], arg_max_cte.[SoftProba_9] AS [Proba_9], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], CASE WHEN (arg_max_cte.[SoftProba_4] IS NULL OR arg_max_cte.[SoftProba_4] > 0.0) THEN log(arg_max_cte.[SoftProba_4]) ELSE -1.79769313486231e+308 END AS [LogProba_4], CASE WHEN (arg_max_cte.[SoftProba_5] IS NULL OR arg_max_cte.[SoftProba_5] > 0.0) THEN log(arg_max_cte.[SoftProba_5]) ELSE -1.79769313486231e+308 END AS [LogProba_5], CASE WHEN (arg_max_cte.[SoftProba_6] IS NULL OR arg_max_cte.[SoftProba_6] > 0.0) THEN log(arg_max_cte.[SoftProba_6]) ELSE -1.79769313486231e+308 END AS [LogProba_6], CASE WHEN (arg_max_cte.[SoftProba_7] IS NULL OR arg_max_cte.[SoftProba_7] > 0.0) THEN log(arg_max_cte.[SoftProba_7]) ELSE -1.79769313486231e+308 END AS [LogProba_7], CASE WHEN (arg_max_cte.[SoftProba_8] IS NULL OR arg_max_cte.[SoftProba_8] > 0.0) THEN log(arg_max_cte.[SoftProba_8]) ELSE -1.79769313486231e+308 END AS [LogProba_8], CASE WHEN (arg_max_cte.[SoftProba_9] IS NULL OR arg_max_cte.[SoftProba_9] > 0.0) THEN log(arg_max_cte.[SoftProba_9]) ELSE -1.79769313486231e+308 END AS [LogProba_9], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte