-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `ADS_imp_1_OUT` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` IS NULL) THEN 0.125979920549 ELSE `ADS`.`Feature_0` END AS impter_2, CASE WHEN (`ADS`.`Feature_1` IS NULL) THEN 0.010432834372 ELSE `ADS`.`Feature_1` END AS impter_3, CASE WHEN (`ADS`.`Feature_2` IS NULL) THEN -0.0638443987193 ELSE `ADS`.`Feature_2` END AS impter_4, CASE WHEN (`ADS`.`Feature_3` IS NULL) THEN 0.0572335197161 ELSE `ADS`.`Feature_3` END AS impter_5, CASE WHEN (`ADS`.`Feature_4` IS NULL) THEN 0.15191881742 ELSE `ADS`.`Feature_4` END AS impter_6, CASE WHEN (`ADS`.`Feature_5` IS NULL) THEN 0.00442103774357 ELSE `ADS`.`Feature_5` END AS impter_7, CASE WHEN (`ADS`.`Feature_6` IS NULL) THEN 0.146711319319 ELSE `ADS`.`Feature_6` END AS impter_8, CASE WHEN (`ADS`.`Feature_7` IS NULL) THEN -0.0406840467287 ELSE `ADS`.`Feature_7` END AS impter_9, CASE WHEN (`ADS`.`Feature_8` IS NULL) THEN 0.0266827679184 ELSE `ADS`.`Feature_8` END AS impter_10, CASE WHEN (`ADS`.`Feature_9` IS NULL) THEN -0.0128582338004 ELSE `ADS`.`Feature_9` END AS impter_11 
FROM `RandomReg_10` AS `ADS`), 
`ADS_sca_2_OUT` AS 
(SELECT `ADS_imp_1_OUT`.`KEY` AS `KEY`, (CAST(`ADS_imp_1_OUT`.impter_2 AS DOUBLE) - 0.125979920549) / 0.867636205438 AS scaler_2, (CAST(`ADS_imp_1_OUT`.impter_3 AS DOUBLE) - 0.010432834372) / 0.997787454055 AS scaler_3, (CAST(`ADS_imp_1_OUT`.impter_4 AS DOUBLE) - -0.0638443987193) / 0.931068352722 AS scaler_4, (CAST(`ADS_imp_1_OUT`.impter_5 AS DOUBLE) - 0.0572335197161) / 0.893967294087 AS scaler_5, (CAST(`ADS_imp_1_OUT`.impter_6 AS DOUBLE) - 0.15191881742) / 0.966528132881 AS scaler_6, (CAST(`ADS_imp_1_OUT`.impter_7 AS DOUBLE) - 0.00442103774357) / 0.930210191267 AS scaler_7, (CAST(`ADS_imp_1_OUT`.impter_8 AS DOUBLE) - 0.146711319319) / 0.932495044936 AS scaler_8, (CAST(`ADS_imp_1_OUT`.impter_9 AS DOUBLE) - -0.0406840467287) / 1.00506993354 AS scaler_9, (CAST(`ADS_imp_1_OUT`.impter_10 AS DOUBLE) - 0.0266827679184) / 1.02582451068 AS scaler_10, (CAST(`ADS_imp_1_OUT`.impter_11 AS DOUBLE) - -0.0128582338004) / 0.891533152315 AS scaler_11 
FROM `ADS_imp_1_OUT`), 
`IL` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, `ADS_sca_2_OUT`.scaler_2 AS scaler_2, `ADS_sca_2_OUT`.scaler_3 AS scaler_3, `ADS_sca_2_OUT`.scaler_4 AS scaler_4, `ADS_sca_2_OUT`.scaler_5 AS scaler_5, `ADS_sca_2_OUT`.scaler_6 AS scaler_6, `ADS_sca_2_OUT`.scaler_7 AS scaler_7, `ADS_sca_2_OUT`.scaler_8 AS scaler_8, `ADS_sca_2_OUT`.scaler_9 AS scaler_9, `ADS_sca_2_OUT`.scaler_10 AS scaler_10, `ADS_sca_2_OUT`.scaler_11 AS scaler_11 
FROM `ADS_sca_2_OUT`), 
`HL_BA_1` AS 
(SELECT `IL`.`KEY` AS `KEY`, -0.814609424897 * `IL`.scaler_2 + -0.762456353485 * `IL`.scaler_3 + -0.247293465066 * `IL`.scaler_4 + -1.19457923983 * `IL`.scaler_5 + -0.843233265081 * `IL`.scaler_6 + -1.47891566224 * `IL`.scaler_7 + -0.855559111392 * `IL`.scaler_8 + -1.17199201998 * `IL`.scaler_9 + -1.22012417803 * `IL`.scaler_10 + -1.48706972844 * `IL`.scaler_11 + 0.0841540459839 AS `NEUR_1_1`, -1.59663642096 * `IL`.scaler_2 + -1.98486472209 * `IL`.scaler_3 + -1.97519064809 * `IL`.scaler_4 + -0.761755584963 * `IL`.scaler_5 + -3.14614959456 * `IL`.scaler_6 + -3.09267666496 * `IL`.scaler_7 + -1.41088969453 * `IL`.scaler_8 + -2.17432412566 * `IL`.scaler_9 + -2.93113683854 * `IL`.scaler_10 + -2.94712912439 * `IL`.scaler_11 + -0.754445445043 AS `NEUR_1_2`, 2.72411908537 * `IL`.scaler_2 + 3.16615623797 * `IL`.scaler_3 + 2.69586649549 * `IL`.scaler_4 + 2.01458287343 * `IL`.scaler_5 + 4.69466493757 * `IL`.scaler_6 + 5.19069859602 * `IL`.scaler_7 + 2.52911360167 * `IL`.scaler_8 + 3.76602042934 * `IL`.scaler_9 + 4.75974233437 * `IL`.scaler_10 + 5.01659062744 * `IL`.scaler_11 + 0.270016000555 AS `NEUR_1_3` 
FROM `IL`), 
`HL_1_relu` AS 
(SELECT `HL_BA_1`.`KEY` AS `KEY`, CASE WHEN (`HL_BA_1`.`NEUR_1_1` >= 0.0) THEN `HL_BA_1`.`NEUR_1_1` ELSE 0.0 END AS `NEUR_1_1`, CASE WHEN (`HL_BA_1`.`NEUR_1_2` >= 0.0) THEN `HL_BA_1`.`NEUR_1_2` ELSE 0.0 END AS `NEUR_1_2`, CASE WHEN (`HL_BA_1`.`NEUR_1_3` >= 0.0) THEN `HL_BA_1`.`NEUR_1_3` ELSE 0.0 END AS `NEUR_1_3` 
FROM `HL_BA_1`), 
`HL_BA_2` AS 
(SELECT `HL_1_relu`.`KEY` AS `KEY`, -0.985614591181 * `HL_1_relu`.`NEUR_1_1` + -0.216849334517 * `HL_1_relu`.`NEUR_1_2` + 0.104718940366 * `HL_1_relu`.`NEUR_1_3` + -0.679909065913 AS `NEUR_2_1`, 3.19162622606 * `HL_1_relu`.`NEUR_1_1` + 4.51090709238 * `HL_1_relu`.`NEUR_1_2` + -2.0103005993 * `HL_1_relu`.`NEUR_1_3` + 0.861000458997 AS `NEUR_2_2`, -0.326512129376 * `HL_1_relu`.`NEUR_1_1` + -2.33474281227 * `HL_1_relu`.`NEUR_1_2` + 5.47698529445 * `HL_1_relu`.`NEUR_1_3` + 2.09261590406 AS `NEUR_2_3`, 0.11108952748 * `HL_1_relu`.`NEUR_1_1` + -0.504738889144 * `HL_1_relu`.`NEUR_1_2` + -0.406628647566 * `HL_1_relu`.`NEUR_1_3` + -0.796433042434 AS `NEUR_2_4`, -0.624530425722 * `HL_1_relu`.`NEUR_1_1` + -0.137643896072 * `HL_1_relu`.`NEUR_1_2` + -0.78814321077 * `HL_1_relu`.`NEUR_1_3` + -0.824906771127 AS `NEUR_2_5` 
FROM `HL_1_relu`), 
`HL_2_relu` AS 
(SELECT `HL_BA_2`.`KEY` AS `KEY`, CASE WHEN (`HL_BA_2`.`NEUR_2_1` >= 0.0) THEN `HL_BA_2`.`NEUR_2_1` ELSE 0.0 END AS `NEUR_2_1`, CASE WHEN (`HL_BA_2`.`NEUR_2_2` >= 0.0) THEN `HL_BA_2`.`NEUR_2_2` ELSE 0.0 END AS `NEUR_2_2`, CASE WHEN (`HL_BA_2`.`NEUR_2_3` >= 0.0) THEN `HL_BA_2`.`NEUR_2_3` ELSE 0.0 END AS `NEUR_2_3`, CASE WHEN (`HL_BA_2`.`NEUR_2_4` >= 0.0) THEN `HL_BA_2`.`NEUR_2_4` ELSE 0.0 END AS `NEUR_2_4`, CASE WHEN (`HL_BA_2`.`NEUR_2_5` >= 0.0) THEN `HL_BA_2`.`NEUR_2_5` ELSE 0.0 END AS `NEUR_2_5` 
FROM `HL_BA_2`), 
`OL_BA` AS 
(SELECT `HL_2_relu`.`KEY` AS `KEY`, 0.591939640043 * `HL_2_relu`.`NEUR_2_1` + -4.56550923073 * `HL_2_relu`.`NEUR_2_2` + 2.9875993741 * `HL_2_relu`.`NEUR_2_3` + 0.700836641734 * `HL_2_relu`.`NEUR_2_4` + -0.204196706314 * `HL_2_relu`.`NEUR_2_5` + 13.1434891027 AS `NEUR_3_1` 
FROM `HL_2_relu`), 
`OL_identity` AS 
(SELECT `OL_BA`.`KEY` AS `KEY`, `OL_BA`.`NEUR_3_1` AS `NEUR_3_1` 
FROM `OL_BA`)
 SELECT `OL_identity`.`KEY` AS `KEY`, `OL_identity`.`NEUR_3_1` AS `Estimator` 
FROM `OL_identity`