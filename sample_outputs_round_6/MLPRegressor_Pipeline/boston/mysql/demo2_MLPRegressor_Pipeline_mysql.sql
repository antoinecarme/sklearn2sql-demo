-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `ADS_imp_1_OUT` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` IS NULL) THEN 3.26981218289 ELSE `ADS`.`Feature_0` END AS impter_2, CASE WHEN (`ADS`.`Feature_1` IS NULL) THEN 11.814159292 ELSE `ADS`.`Feature_1` END AS impter_3, CASE WHEN (`ADS`.`Feature_2` IS NULL) THEN 10.9415929204 ELSE `ADS`.`Feature_2` END AS impter_4, CASE WHEN (`ADS`.`Feature_3` IS NULL) THEN 0.0796460176991 ELSE `ADS`.`Feature_3` END AS impter_5, CASE WHEN (`ADS`.`Feature_4` IS NULL) THEN 0.552612684366 ELSE `ADS`.`Feature_4` END AS impter_6, CASE WHEN (`ADS`.`Feature_5` IS NULL) THEN 6.31431563422 ELSE `ADS`.`Feature_5` END AS impter_7, CASE WHEN (`ADS`.`Feature_6` IS NULL) THEN 67.1421828909 ELSE `ADS`.`Feature_6` END AS impter_8, CASE WHEN (`ADS`.`Feature_7` IS NULL) THEN 3.83938820059 ELSE `ADS`.`Feature_7` END AS impter_9, CASE WHEN (`ADS`.`Feature_8` IS NULL) THEN 9.43362831858 ELSE `ADS`.`Feature_8` END AS impter_10, CASE WHEN (`ADS`.`Feature_9` IS NULL) THEN 404.619469027 ELSE `ADS`.`Feature_9` END AS impter_11, CASE WHEN (`ADS`.`Feature_10` IS NULL) THEN 18.3663716814 ELSE `ADS`.`Feature_10` END AS impter_12, CASE WHEN (`ADS`.`Feature_11` IS NULL) THEN 359.759587021 ELSE `ADS`.`Feature_11` END AS impter_13, CASE WHEN (`ADS`.`Feature_12` IS NULL) THEN 12.3942772861 ELSE `ADS`.`Feature_12` END AS impter_14 
FROM boston AS `ADS`), 
`ADS_sca_2_OUT` AS 
(SELECT `ADS_imp_1_OUT`.`KEY` AS `KEY`, (CAST(`ADS_imp_1_OUT`.impter_2 AS DOUBLE) - 3.26981218289) / 8.06435679573 AS scaler_2, (CAST(`ADS_imp_1_OUT`.impter_3 AS DOUBLE) - 11.814159292) / 23.6845226609 AS scaler_3, (CAST(`ADS_imp_1_OUT`.impter_4 AS DOUBLE) - 10.9415929204) / 6.91219450398 AS scaler_4, (CAST(`ADS_imp_1_OUT`.impter_5 AS DOUBLE) - 0.0796460176991) / 0.270744398952 AS scaler_5, (CAST(`ADS_imp_1_OUT`.impter_6 AS DOUBLE) - 0.552612684366) / 0.116521457827 AS scaler_6, (CAST(`ADS_imp_1_OUT`.impter_7 AS DOUBLE) - 6.31431563422) / 0.713158124818 AS scaler_7, (CAST(`ADS_imp_1_OUT`.impter_8 AS DOUBLE) - 67.1421828909) / 28.1589507917 AS scaler_8, (CAST(`ADS_imp_1_OUT`.impter_9 AS DOUBLE) - 3.83938820059) / 2.09968835038 AS scaler_9, (CAST(`ADS_imp_1_OUT`.impter_10 AS DOUBLE) - 9.43362831858) / 8.61076650564 AS scaler_10, (CAST(`ADS_imp_1_OUT`.impter_11 AS DOUBLE) - 404.619469027) / 168.750972129 AS scaler_11, (CAST(`ADS_imp_1_OUT`.impter_12 AS DOUBLE) - 18.3663716814) / 2.15547367794 AS scaler_12, (CAST(`ADS_imp_1_OUT`.impter_13 AS DOUBLE) - 359.759587021) / 89.5754249699 AS scaler_13, (CAST(`ADS_imp_1_OUT`.impter_14 AS DOUBLE) - 12.3942772861) / 6.97945748877 AS scaler_14 
FROM `ADS_imp_1_OUT`), 
`IL` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, `ADS_sca_2_OUT`.scaler_2 AS scaler_2, `ADS_sca_2_OUT`.scaler_3 AS scaler_3, `ADS_sca_2_OUT`.scaler_4 AS scaler_4, `ADS_sca_2_OUT`.scaler_5 AS scaler_5, `ADS_sca_2_OUT`.scaler_6 AS scaler_6, `ADS_sca_2_OUT`.scaler_7 AS scaler_7, `ADS_sca_2_OUT`.scaler_8 AS scaler_8, `ADS_sca_2_OUT`.scaler_9 AS scaler_9, `ADS_sca_2_OUT`.scaler_10 AS scaler_10, `ADS_sca_2_OUT`.scaler_11 AS scaler_11, `ADS_sca_2_OUT`.scaler_12 AS scaler_12, `ADS_sca_2_OUT`.scaler_13 AS scaler_13, `ADS_sca_2_OUT`.scaler_14 AS scaler_14 
FROM `ADS_sca_2_OUT`), 
`HL_BA_1` AS 
(SELECT `IL`.`KEY` AS `KEY`, -2.10355490041 * `IL`.scaler_2 + -0.0233796424732 * `IL`.scaler_3 + -0.160163521366 * `IL`.scaler_4 + -0.268172753302 * `IL`.scaler_5 + 0.563003918993 * `IL`.scaler_6 + 0.916947969524 * `IL`.scaler_7 + -0.571513760434 * `IL`.scaler_8 + 0.197922594418 * `IL`.scaler_9 + -0.781530971557 * `IL`.scaler_10 + -0.899620587179 * `IL`.scaler_11 + -0.152615160982 * `IL`.scaler_12 + 0.00455079724189 * `IL`.scaler_13 + 0.218383979507 * `IL`.scaler_14 + 0.719446999822 AS `NEUR_1_1`, -1.03008871628 * `IL`.scaler_2 + 0.421063807187 * `IL`.scaler_3 + 1.25701372248 * `IL`.scaler_4 + 0.292422642044 * `IL`.scaler_5 + -0.208188662238 * `IL`.scaler_6 + 0.814126319946 * `IL`.scaler_7 + -0.132913745518 * `IL`.scaler_8 + -0.910219823823 * `IL`.scaler_9 + 1.59947779403 * `IL`.scaler_10 + 0.765151880411 * `IL`.scaler_11 + -0.465453045781 * `IL`.scaler_12 + 0.449739674501 * `IL`.scaler_13 + -1.98265234231 * `IL`.scaler_14 + 0.0217510402802 AS `NEUR_1_2`, -0.022949077206 * `IL`.scaler_2 + -1.03326446252 * `IL`.scaler_3 + -0.889291545554 * `IL`.scaler_4 + 0.366456813121 * `IL`.scaler_5 + -2.19621967613 * `IL`.scaler_6 + -0.46990397206 * `IL`.scaler_7 + -0.10307331149 * `IL`.scaler_8 + -3.62458247805 * `IL`.scaler_9 + 0.842062556525 * `IL`.scaler_10 + -0.645173490531 * `IL`.scaler_11 + 0.215353202579 * `IL`.scaler_12 + 0.165994648714 * `IL`.scaler_13 + -0.0362846860108 * `IL`.scaler_14 + -1.720385628 AS `NEUR_1_3` 
FROM `IL`), 
`HL_1_relu` AS 
(SELECT `HL_BA_1`.`KEY` AS `KEY`, CASE WHEN (`HL_BA_1`.`NEUR_1_1` >= 0.0) THEN `HL_BA_1`.`NEUR_1_1` ELSE 0.0 END AS `NEUR_1_1`, CASE WHEN (`HL_BA_1`.`NEUR_1_2` >= 0.0) THEN `HL_BA_1`.`NEUR_1_2` ELSE 0.0 END AS `NEUR_1_2`, CASE WHEN (`HL_BA_1`.`NEUR_1_3` >= 0.0) THEN `HL_BA_1`.`NEUR_1_3` ELSE 0.0 END AS `NEUR_1_3` 
FROM `HL_BA_1`), 
`HL_BA_2` AS 
(SELECT `HL_1_relu`.`KEY` AS `KEY`, 0.0292703353382 * `HL_1_relu`.`NEUR_1_1` + -0.691799574543 * `HL_1_relu`.`NEUR_1_2` + -0.555193518027 * `HL_1_relu`.`NEUR_1_3` + -0.515279288844 AS `NEUR_2_1`, 2.20615507593 * `HL_1_relu`.`NEUR_1_1` + 2.29091982365 * `HL_1_relu`.`NEUR_1_2` + 1.47690126533 * `HL_1_relu`.`NEUR_1_3` + 3.64710454624 AS `NEUR_2_2`, -1.75233242958 * `HL_1_relu`.`NEUR_1_1` + 0.798219254965 * `HL_1_relu`.`NEUR_1_2` + -2.61051894699 * `HL_1_relu`.`NEUR_1_3` + -0.462894915369 AS `NEUR_2_3`, 0.836871536704 * `HL_1_relu`.`NEUR_1_1` + 0.857301846476 * `HL_1_relu`.`NEUR_1_2` + 0.359203866023 * `HL_1_relu`.`NEUR_1_3` + -0.148773343065 AS `NEUR_2_4`, -0.235292467948 * `HL_1_relu`.`NEUR_1_1` + -1.41858322859 * `HL_1_relu`.`NEUR_1_2` + -0.342268373963 * `HL_1_relu`.`NEUR_1_3` + -0.953933444241 AS `NEUR_2_5` 
FROM `HL_1_relu`), 
`HL_2_relu` AS 
(SELECT `HL_BA_2`.`KEY` AS `KEY`, CASE WHEN (`HL_BA_2`.`NEUR_2_1` >= 0.0) THEN `HL_BA_2`.`NEUR_2_1` ELSE 0.0 END AS `NEUR_2_1`, CASE WHEN (`HL_BA_2`.`NEUR_2_2` >= 0.0) THEN `HL_BA_2`.`NEUR_2_2` ELSE 0.0 END AS `NEUR_2_2`, CASE WHEN (`HL_BA_2`.`NEUR_2_3` >= 0.0) THEN `HL_BA_2`.`NEUR_2_3` ELSE 0.0 END AS `NEUR_2_3`, CASE WHEN (`HL_BA_2`.`NEUR_2_4` >= 0.0) THEN `HL_BA_2`.`NEUR_2_4` ELSE 0.0 END AS `NEUR_2_4`, CASE WHEN (`HL_BA_2`.`NEUR_2_5` >= 0.0) THEN `HL_BA_2`.`NEUR_2_5` ELSE 0.0 END AS `NEUR_2_5` 
FROM `HL_BA_2`), 
`OL_BA` AS 
(SELECT `HL_2_relu`.`KEY` AS `KEY`, -0.194744458048 * `HL_2_relu`.`NEUR_2_1` + 1.91009534316 * `HL_2_relu`.`NEUR_2_2` + -3.44325863388 * `HL_2_relu`.`NEUR_2_3` + -0.0649671460308 * `HL_2_relu`.`NEUR_2_4` + 0.279997352638 * `HL_2_relu`.`NEUR_2_5` + 3.57722337414 AS `NEUR_3_1` 
FROM `HL_2_relu`), 
`OL_identity` AS 
(SELECT `OL_BA`.`KEY` AS `KEY`, `OL_BA`.`NEUR_3_1` AS `NEUR_3_1` 
FROM `OL_BA`)
 SELECT `OL_identity`.`KEY` AS `KEY`, `OL_identity`.`NEUR_3_1` AS `Estimator` 
FROM `OL_identity`