-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `ADS_imp_1_OUT` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` IS NULL) THEN 0.000388320004096 ELSE `ADS`.`Feature_0` END AS impter_2, CASE WHEN (`ADS`.`Feature_1` IS NULL) THEN -0.000523121409649 ELSE `ADS`.`Feature_1` END AS impter_3, CASE WHEN (`ADS`.`Feature_2` IS NULL) THEN -0.00059113583201 ELSE `ADS`.`Feature_2` END AS impter_4, CASE WHEN (`ADS`.`Feature_3` IS NULL) THEN 0.000699475650077 ELSE `ADS`.`Feature_3` END AS impter_5, CASE WHEN (`ADS`.`Feature_4` IS NULL) THEN 0.000639072638051 ELSE `ADS`.`Feature_4` END AS impter_6, CASE WHEN (`ADS`.`Feature_5` IS NULL) THEN 0.00167055436671 ELSE `ADS`.`Feature_5` END AS impter_7, CASE WHEN (`ADS`.`Feature_6` IS NULL) THEN -0.000775937697276 ELSE `ADS`.`Feature_6` END AS impter_8, CASE WHEN (`ADS`.`Feature_7` IS NULL) THEN 0.000954484248167 ELSE `ADS`.`Feature_7` END AS impter_9, CASE WHEN (`ADS`.`Feature_8` IS NULL) THEN -0.000573767437608 ELSE `ADS`.`Feature_8` END AS impter_10, CASE WHEN (`ADS`.`Feature_9` IS NULL) THEN 0.000881407121415 ELSE `ADS`.`Feature_9` END AS impter_11 
FROM diabetes AS `ADS`), 
`ADS_sca_2_OUT` AS 
(SELECT `ADS_imp_1_OUT`.`KEY` AS `KEY`, (CAST(`ADS_imp_1_OUT`.impter_2 AS DOUBLE) - 0.000388320004096) / 0.0479877658692 AS scaler_2, (CAST(`ADS_imp_1_OUT`.impter_3 AS DOUBLE) - -0.000523121409649) / 0.047529053468 AS scaler_3, (CAST(`ADS_imp_1_OUT`.impter_4 AS DOUBLE) - -0.00059113583201) / 0.0456995777439 AS scaler_4, (CAST(`ADS_imp_1_OUT`.impter_5 AS DOUBLE) - 0.000699475650077) / 0.0478758790487 AS scaler_5, (CAST(`ADS_imp_1_OUT`.impter_6 AS DOUBLE) - 0.000639072638051) / 0.0480272670816 AS scaler_6, (CAST(`ADS_imp_1_OUT`.impter_7 AS DOUBLE) - 0.00167055436671) / 0.0485647246577 AS scaler_7, (CAST(`ADS_imp_1_OUT`.impter_8 AS DOUBLE) - -0.000775937697276) / 0.0462775749119 AS scaler_8, (CAST(`ADS_imp_1_OUT`.impter_9 AS DOUBLE) - 0.000954484248167) / 0.0482818984956 AS scaler_9, (CAST(`ADS_imp_1_OUT`.impter_10 AS DOUBLE) - -0.000573767437608) / 0.045893243625 AS scaler_10, (CAST(`ADS_imp_1_OUT`.impter_11 AS DOUBLE) - 0.000881407121415) / 0.047439004286 AS scaler_11 
FROM `ADS_imp_1_OUT`), 
`IL` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, `ADS_sca_2_OUT`.scaler_2 AS scaler_2, `ADS_sca_2_OUT`.scaler_3 AS scaler_3, `ADS_sca_2_OUT`.scaler_4 AS scaler_4, `ADS_sca_2_OUT`.scaler_5 AS scaler_5, `ADS_sca_2_OUT`.scaler_6 AS scaler_6, `ADS_sca_2_OUT`.scaler_7 AS scaler_7, `ADS_sca_2_OUT`.scaler_8 AS scaler_8, `ADS_sca_2_OUT`.scaler_9 AS scaler_9, `ADS_sca_2_OUT`.scaler_10 AS scaler_10, `ADS_sca_2_OUT`.scaler_11 AS scaler_11 
FROM `ADS_sca_2_OUT`), 
`HL_BA_1` AS 
(SELECT `IL`.`KEY` AS `KEY`, -1.07253396461 * `IL`.scaler_2 + -2.51371002201 * `IL`.scaler_3 + -2.29767035221 * `IL`.scaler_4 + -0.469732910807 * `IL`.scaler_5 + -0.994083619021 * `IL`.scaler_6 + 2.19783885412 * `IL`.scaler_7 + -0.842080522805 * `IL`.scaler_8 + -0.297356511474 * `IL`.scaler_9 + -0.582015764484 * `IL`.scaler_10 + 0.214202087719 * `IL`.scaler_11 + -0.0139846092811 AS `NEUR_1_1`, -2.12082019743 * `IL`.scaler_2 + -0.168959255459 * `IL`.scaler_3 + 1.80410911569 * `IL`.scaler_4 + 1.8762190186 * `IL`.scaler_5 + -0.512148758105 * `IL`.scaler_6 + 1.42555169105 * `IL`.scaler_7 + -2.28760799516 * `IL`.scaler_8 + -3.39021199271 * `IL`.scaler_9 + -1.75760928739 * `IL`.scaler_10 + -2.45210189232 * `IL`.scaler_11 + -2.92284025176 AS `NEUR_1_2`, 0.499951710422 * `IL`.scaler_2 + 0.0653315229886 * `IL`.scaler_3 + 1.07956553742 * `IL`.scaler_4 + 0.413020899657 * `IL`.scaler_5 + -3.43517693237 * `IL`.scaler_6 + 2.33988564731 * `IL`.scaler_7 + 1.32161439762 * `IL`.scaler_8 + 0.725324332469 * `IL`.scaler_9 + 2.44667137032 * `IL`.scaler_10 + 0.366234652739 * `IL`.scaler_11 + 3.38348035177 AS `NEUR_1_3` 
FROM `IL`), 
`HL_1_relu` AS 
(SELECT `HL_BA_1`.`KEY` AS `KEY`, CASE WHEN (`HL_BA_1`.`NEUR_1_1` >= 0.0) THEN `HL_BA_1`.`NEUR_1_1` ELSE 0.0 END AS `NEUR_1_1`, CASE WHEN (`HL_BA_1`.`NEUR_1_2` >= 0.0) THEN `HL_BA_1`.`NEUR_1_2` ELSE 0.0 END AS `NEUR_1_2`, CASE WHEN (`HL_BA_1`.`NEUR_1_3` >= 0.0) THEN `HL_BA_1`.`NEUR_1_3` ELSE 0.0 END AS `NEUR_1_3` 
FROM `HL_BA_1`), 
`HL_BA_2` AS 
(SELECT `HL_1_relu`.`KEY` AS `KEY`, -0.927499730491 * `HL_1_relu`.`NEUR_1_1` + 1.3132835605 * `HL_1_relu`.`NEUR_1_2` + 0.632718253563 * `HL_1_relu`.`NEUR_1_3` + -1.93307871507 AS `NEUR_2_1`, -1.85674292091 * `HL_1_relu`.`NEUR_1_1` + -1.18715844855 * `HL_1_relu`.`NEUR_1_2` + -1.08250613098 * `HL_1_relu`.`NEUR_1_3` + -6.09204268768 AS `NEUR_2_2`, 1.61605259331 * `HL_1_relu`.`NEUR_1_1` + 1.23951399694 * `HL_1_relu`.`NEUR_1_2` + 3.31163328725 * `HL_1_relu`.`NEUR_1_3` + 2.34350780801 AS `NEUR_2_3`, 0.102837621278 * `HL_1_relu`.`NEUR_1_1` + -0.504740129554 * `HL_1_relu`.`NEUR_1_2` + -0.406629646867 * `HL_1_relu`.`NEUR_1_3` + -0.797537075948 AS `NEUR_2_4`, 1.55299307307 * `HL_1_relu`.`NEUR_1_1` + 1.46712594064 * `HL_1_relu`.`NEUR_1_2` + -1.673706362 * `HL_1_relu`.`NEUR_1_3` + -1.45339639129 AS `NEUR_2_5` 
FROM `HL_1_relu`), 
`HL_2_relu` AS 
(SELECT `HL_BA_2`.`KEY` AS `KEY`, CASE WHEN (`HL_BA_2`.`NEUR_2_1` >= 0.0) THEN `HL_BA_2`.`NEUR_2_1` ELSE 0.0 END AS `NEUR_2_1`, CASE WHEN (`HL_BA_2`.`NEUR_2_2` >= 0.0) THEN `HL_BA_2`.`NEUR_2_2` ELSE 0.0 END AS `NEUR_2_2`, CASE WHEN (`HL_BA_2`.`NEUR_2_3` >= 0.0) THEN `HL_BA_2`.`NEUR_2_3` ELSE 0.0 END AS `NEUR_2_3`, CASE WHEN (`HL_BA_2`.`NEUR_2_4` >= 0.0) THEN `HL_BA_2`.`NEUR_2_4` ELSE 0.0 END AS `NEUR_2_4`, CASE WHEN (`HL_BA_2`.`NEUR_2_5` >= 0.0) THEN `HL_BA_2`.`NEUR_2_5` ELSE 0.0 END AS `NEUR_2_5` 
FROM `HL_BA_2`), 
`OL_BA` AS 
(SELECT `HL_2_relu`.`KEY` AS `KEY`, 2.01107733524 * `HL_2_relu`.`NEUR_2_1` + 2.07700119247 * `HL_2_relu`.`NEUR_2_2` + 7.60541469187 * `HL_2_relu`.`NEUR_2_3` + 0.700808324562 * `HL_2_relu`.`NEUR_2_4` + -2.69738544926 * `HL_2_relu`.`NEUR_2_5` + 18.1426222031 AS `NEUR_3_1` 
FROM `HL_2_relu`), 
`OL_identity` AS 
(SELECT `OL_BA`.`KEY` AS `KEY`, `OL_BA`.`NEUR_3_1` AS `NEUR_3_1` 
FROM `OL_BA`)
 SELECT `OL_identity`.`KEY` AS `KEY`, `OL_identity`.`NEUR_3_1` AS `Estimator` 
FROM `OL_identity`