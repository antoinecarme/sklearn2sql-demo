-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.468513648242 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.563256364568 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.508588072122 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.495500625587 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN 0.431577025613 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN 0.503609104738 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN 0.459633224311 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.461623254075 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.471648246759 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.466824541581 ELSE [ADS].[Feature_9] END AS impter_11 
FROM freidman1 AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - 0.468513648242) / 0.255528451236 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.563256364568) / 0.277373743581 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.508588072122) / 0.311812018321 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.495500625587) / 0.26773484859 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - 0.431577025613) / 0.29225938194 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - 0.503609104738) / 0.28790558755 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - 0.459633224311) / 0.295480819381 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.461623254075) / 0.292136461032 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.471648246759) / 0.300888736183 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.466824541581) / 0.277631808045 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[IL] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], [ADS_sca_2_OUT].scaler_2 AS scaler_2, [ADS_sca_2_OUT].scaler_3 AS scaler_3, [ADS_sca_2_OUT].scaler_4 AS scaler_4, [ADS_sca_2_OUT].scaler_5 AS scaler_5, [ADS_sca_2_OUT].scaler_6 AS scaler_6, [ADS_sca_2_OUT].scaler_7 AS scaler_7, [ADS_sca_2_OUT].scaler_8 AS scaler_8, [ADS_sca_2_OUT].scaler_9 AS scaler_9, [ADS_sca_2_OUT].scaler_10 AS scaler_10, [ADS_sca_2_OUT].scaler_11 AS scaler_11 
FROM [ADS_sca_2_OUT]), 
[HL_BA_1] AS 
(SELECT [IL].[KEY] AS [KEY], -1.10661886024 * [IL].scaler_2 + -0.880890180347 * [IL].scaler_3 + -0.0284293574417 * [IL].scaler_4 + -0.724848285102 * [IL].scaler_5 + 0.839417667243 * [IL].scaler_6 + 0.893059030343 * [IL].scaler_7 + -0.135784253334 * [IL].scaler_8 + -0.464557647943 * [IL].scaler_9 + 0.398826038036 * [IL].scaler_10 + -0.0161317479349 * [IL].scaler_11 + 0.168545632969 AS [NEUR_1_1], 0.121049406609 * [IL].scaler_2 + 0.407131783727 * [IL].scaler_3 + -0.187738769471 * [IL].scaler_4 + 0.020130769788 * [IL].scaler_5 + -0.0730541541836 * [IL].scaler_6 + 0.0771365450256 * [IL].scaler_7 + -0.0365945331663 * [IL].scaler_8 + 0.00512818878732 * [IL].scaler_9 + 0.687969873115 * [IL].scaler_10 + -1.02524777484 * [IL].scaler_11 + -0.89010329401 AS [NEUR_1_2], 0.00509103517871 * [IL].scaler_2 + 0.134102808165 * [IL].scaler_3 + 0.336373771222 * [IL].scaler_4 + 0.463854181918 * [IL].scaler_5 + 1.56209909818 * [IL].scaler_6 + 0.780467784209 * [IL].scaler_7 + 0.0734934639023 * [IL].scaler_8 + -0.434464820502 * [IL].scaler_9 + 0.261541087865 * [IL].scaler_10 + 0.109834368019 * [IL].scaler_11 + 1.43788619832 AS [NEUR_1_3] 
FROM [IL]), 
[HL_1_relu] AS 
(SELECT [HL_BA_1].[KEY] AS [KEY], CASE WHEN ([HL_BA_1].[NEUR_1_1] >= 0.0) THEN [HL_BA_1].[NEUR_1_1] ELSE 0.0 END AS [NEUR_1_1], CASE WHEN ([HL_BA_1].[NEUR_1_2] >= 0.0) THEN [HL_BA_1].[NEUR_1_2] ELSE 0.0 END AS [NEUR_1_2], CASE WHEN ([HL_BA_1].[NEUR_1_3] >= 0.0) THEN [HL_BA_1].[NEUR_1_3] ELSE 0.0 END AS [NEUR_1_3] 
FROM [HL_BA_1]), 
[HL_BA_2] AS 
(SELECT [HL_1_relu].[KEY] AS [KEY], -0.764561283318 * [HL_1_relu].[NEUR_1_1] + 0.0969278238559 * [HL_1_relu].[NEUR_1_2] + -0.090943175533 * [HL_1_relu].[NEUR_1_3] + -0.508125018984 AS [NEUR_2_1], -0.503923704679 * [HL_1_relu].[NEUR_1_1] + -0.570608622953 * [HL_1_relu].[NEUR_1_2] + -0.865139137569 * [HL_1_relu].[NEUR_1_3] + -1.69184358098 AS [NEUR_2_2], -1.01808765769 * [HL_1_relu].[NEUR_1_1] + 0.982474378372 * [HL_1_relu].[NEUR_1_2] + 0.827629592601 * [HL_1_relu].[NEUR_1_3] + 2.26303063452 AS [NEUR_2_3], 0.111088757963 * [HL_1_relu].[NEUR_1_1] + -0.504735392818 * [HL_1_relu].[NEUR_1_2] + -0.406625830849 * [HL_1_relu].[NEUR_1_3] + -0.796433042434 AS [NEUR_2_4], -0.632497153107 * [HL_1_relu].[NEUR_1_1] + 0.250433356389 * [HL_1_relu].[NEUR_1_2] + -0.658869934212 * [HL_1_relu].[NEUR_1_3] + -0.653881531079 AS [NEUR_2_5] 
FROM [HL_1_relu]), 
[HL_2_relu] AS 
(SELECT [HL_BA_2].[KEY] AS [KEY], CASE WHEN ([HL_BA_2].[NEUR_2_1] >= 0.0) THEN [HL_BA_2].[NEUR_2_1] ELSE 0.0 END AS [NEUR_2_1], CASE WHEN ([HL_BA_2].[NEUR_2_2] >= 0.0) THEN [HL_BA_2].[NEUR_2_2] ELSE 0.0 END AS [NEUR_2_2], CASE WHEN ([HL_BA_2].[NEUR_2_3] >= 0.0) THEN [HL_BA_2].[NEUR_2_3] ELSE 0.0 END AS [NEUR_2_3], CASE WHEN ([HL_BA_2].[NEUR_2_4] >= 0.0) THEN [HL_BA_2].[NEUR_2_4] ELSE 0.0 END AS [NEUR_2_4], CASE WHEN ([HL_BA_2].[NEUR_2_5] >= 0.0) THEN [HL_BA_2].[NEUR_2_5] ELSE 0.0 END AS [NEUR_2_5] 
FROM [HL_BA_2]), 
[OL_BA] AS 
(SELECT [HL_2_relu].[KEY] AS [KEY], 0.304498405937 * [HL_2_relu].[NEUR_2_1] + 0.545308170208 * [HL_2_relu].[NEUR_2_2] + 2.99422421269 * [HL_2_relu].[NEUR_2_3] + 0.700831787039 * [HL_2_relu].[NEUR_2_4] + -0.183174638434 * [HL_2_relu].[NEUR_2_5] + 5.7326937762 AS [NEUR_3_1] 
FROM [HL_2_relu]), 
[OL_identity] AS 
(SELECT [OL_BA].[KEY] AS [KEY], [OL_BA].[NEUR_3_1] AS [NEUR_3_1] 
FROM [OL_BA])
 SELECT [OL_identity].[KEY] AS [KEY], [OL_identity].[NEUR_3_1] AS [Estimator] 
FROM [OL_identity]