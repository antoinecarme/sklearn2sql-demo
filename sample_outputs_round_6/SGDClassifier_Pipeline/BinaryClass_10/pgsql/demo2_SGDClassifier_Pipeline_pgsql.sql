-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.000677077733363 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0761845475826 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.0727861425549 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0555731792669 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0567081495271 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.1059979382 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.00942224273336 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0408088303206 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.175982115021 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0216043944882 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.000677077733363) / 0.970856422035 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.0761845475826) / 1.0714378499 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.0727861425549) / 1.10191926863 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.0555731792669) / 1.03798756399 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.0567081495271) / 0.994230779214 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.1059979382) / 0.906926190695 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.00942224273336) / 0.96157478323 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.0408088303206) / 1.24488084885 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.175982115021) / 1.34196813758 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.0216043944882) / 0.855684997805 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
linear_model_cte AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", -7.272847458878227 * "ADS_sca_2_OUT".scaler_2 + -12.969471376295127 * "ADS_sca_2_OUT".scaler_3 + -2.045877647879094 * "ADS_sca_2_OUT".scaler_4 + -34.343680447803415 * "ADS_sca_2_OUT".scaler_5 + 0.44054901667219687 * "ADS_sca_2_OUT".scaler_6 + -3.8155430798144834 * "ADS_sca_2_OUT".scaler_7 + -23.7412552918449 * "ADS_sca_2_OUT".scaler_8 + 44.03003954577148 * "ADS_sca_2_OUT".scaler_9 + 5.915588470077628 * "ADS_sca_2_OUT".scaler_10 + 43.93330368708089 * "ADS_sca_2_OUT".scaler_11 + 6.64571583547 AS linear_combination 
FROM "ADS_sca_2_OUT")
 SELECT linear_model_cte."KEY" AS "KEY", -linear_model_cte.linear_combination AS "Score_0", linear_model_cte.linear_combination AS "Score_1", CAST(NULL AS FLOAT(53)) AS "Proba_0", CAST(NULL AS FLOAT(53)) AS "Proba_1", CAST(NULL AS FLOAT(53)) AS "LogProba_0", CAST(NULL AS FLOAT(53)) AS "LogProba_1", CASE WHEN (linear_model_cte.linear_combination >= 0.0) THEN 1 ELSE 0 END AS "Decision" 
FROM linear_model_cte