-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.134669939334 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.13995060956 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN -0.178496145587 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN -0.0825265976599 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.19192006482 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN 0.00964625546729 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.0346093452434 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN -0.621298266075 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.113647040963 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN -0.0534486615723 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.134669939334) / 1.74652012308 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.13995060956) / 0.983347901967 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - -0.178496145587) / 1.08743220801 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - -0.0825265976599) / 1.52894699833 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.19192006482) / 0.917886677352 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - 0.00964625546729) / 1.55157025707 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.0346093452434) / 1.29436619611 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - -0.621298266075) / 1.3384330631 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.113647040963) / 0.943012272049 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - -0.0534486615723) / 1.15158223371 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
linear_model_cte AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], -25.86526069579114 * [ADS_sca_2_OUT].scaler_2 + 9.510139005441948 * [ADS_sca_2_OUT].scaler_3 + -7.170518793918259 * [ADS_sca_2_OUT].scaler_4 + 13.113548008470325 * [ADS_sca_2_OUT].scaler_5 + -23.508282528844358 * [ADS_sca_2_OUT].scaler_6 + -55.90207130446721 * [ADS_sca_2_OUT].scaler_7 + 21.707171606468627 * [ADS_sca_2_OUT].scaler_8 + -6.9148336348842685 * [ADS_sca_2_OUT].scaler_9 + 6.6657547505999135 * [ADS_sca_2_OUT].scaler_10 + 13.363462759396644 * [ADS_sca_2_OUT].scaler_11 + -40.6786227532 AS [Score_0], -11.751248090146643 * [ADS_sca_2_OUT].scaler_2 + -8.158221340284284 * [ADS_sca_2_OUT].scaler_3 + 5.796635022806113 * [ADS_sca_2_OUT].scaler_4 + 22.37720093894889 * [ADS_sca_2_OUT].scaler_5 + 11.13267086645292 * [ADS_sca_2_OUT].scaler_6 + 54.78316021320172 * [ADS_sca_2_OUT].scaler_7 + 2.5989622571005095 * [ADS_sca_2_OUT].scaler_8 + 32.5307511404114 * [ADS_sca_2_OUT].scaler_9 + -4.66379373512886 * [ADS_sca_2_OUT].scaler_10 + 20.78281316356675 * [ADS_sca_2_OUT].scaler_11 + -59.7345582244 AS [Score_1], 10.927141027743636 * [ADS_sca_2_OUT].scaler_2 + 2.0827575982073627 * [ADS_sca_2_OUT].scaler_3 + 7.847463260736273 * [ADS_sca_2_OUT].scaler_4 + -10.927878397451162 * [ADS_sca_2_OUT].scaler_5 + 27.267220868601417 * [ADS_sca_2_OUT].scaler_6 + -9.323021923991227 * [ADS_sca_2_OUT].scaler_7 + -22.61199657592068 * [ADS_sca_2_OUT].scaler_8 + -17.57996005573126 * [ADS_sca_2_OUT].scaler_9 + 11.295212020668195 * [ADS_sca_2_OUT].scaler_10 + -9.630918096734632 * [ADS_sca_2_OUT].scaler_11 + -49.5901918963 AS [Score_2], 0.911706602789738 * [ADS_sca_2_OUT].scaler_2 + 10.966960511616238 * [ADS_sca_2_OUT].scaler_3 + -7.7718040499466845 * [ADS_sca_2_OUT].scaler_4 + -11.15175989876166 * [ADS_sca_2_OUT].scaler_5 + 2.662995331292951 * [ADS_sca_2_OUT].scaler_6 + 69.28008007675051 * [ADS_sca_2_OUT].scaler_7 + 20.600808697685007 * [ADS_sca_2_OUT].scaler_8 + -41.36455194681872 * [ADS_sca_2_OUT].scaler_9 + -4.292429667803556 * [ADS_sca_2_OUT].scaler_10 + -12.568821811174496 * [ADS_sca_2_OUT].scaler_11 + -48.3319874874 AS [Score_3] 
FROM [ADS_sca_2_OUT]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], linear_model_cte.[Score_3] AS [Score_3], CAST(NULL AS FLOAT(53)) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [Proba_3], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY] AS [KEY], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], (SELECT max(score_class_union.[LogProba]) AS max_1 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_LogProba], (SELECT max(score_class_union.[Proba]) AS max_2 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Proba], (SELECT max(score_class_union.[Score]) AS max_3 
FROM score_class_union 
WHERE orig_cte.[KEY] = score_class_union.[KEY]) AS [max_Score] 
FROM orig_cte), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], (SELECT min(score_class_union.class) AS min_1 
FROM score_class_union 
WHERE score_max.[max_LogProba] = score_class_union.[LogProba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_LogProba], (SELECT min(score_class_union.class) AS min_2 
FROM score_class_union 
WHERE score_max.[max_Proba] = score_class_union.[Proba] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Proba], (SELECT min(score_class_union.class) AS min_3 
FROM score_class_union 
WHERE score_max.[max_Score] = score_class_union.[Score] AND score_max.[KEY] = score_class_union.[KEY]) AS [arg_max_Score] 
FROM score_max)
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte