-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.0509487300781 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.0657051391157 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.131807509325 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0719505942811 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.112911298664 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0283550058123 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.233804743493 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0345275640273 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0617929026273 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0010783792642 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.0509487300781) / 1.0424543187 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.0657051391157) / 1.3565646328 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.131807509325) / 0.933904636732 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.0719505942811) / 0.94695045603 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.112911298664) / 1.07628103651 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.0283550058123) / 1.30514998731 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.233804743493) / 1.13287866186 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.0345275640273) / 0.819141984422 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.0617929026273) / 1.06117144056 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.0010783792642) / 1.27018362667 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"SV_data" AS 
(SELECT "Values".sv_idx AS sv_idx, "Values".dual_coeff AS dual_coeff, "Values".sv_0 AS sv_0, "Values".sv_1 AS sv_1, "Values".sv_2 AS sv_2, "Values".sv_3 AS sv_3, "Values".sv_4 AS sv_4, "Values".sv_5 AS sv_5, "Values".sv_6 AS sv_6, "Values".sv_7 AS sv_7, "Values".sv_8 AS sv_8, "Values".sv_9 AS sv_9 
FROM (SELECT 0 AS sv_idx, -1.0 AS dual_coeff, 0.390855079548 AS sv_0, -1.07230613424 AS sv_1, 0.661159115153 AS sv_2, 1.54467427611 AS sv_3, -0.58994509302 AS sv_4, 0.0685373041327 AS sv_5, 0.169486542638 AS sv_6, 1.16336919372 AS sv_7, 0.655686130488 AS sv_8, -0.481523782561 AS sv_9 UNION ALL SELECT 1 AS sv_idx, -0.267208736943 AS dual_coeff, -0.226289302281 AS sv_0, 1.01856396913 AS sv_1, 0.183714997505 AS sv_2, -0.396724837999 AS sv_3, -0.339989338485 AS sv_4, -0.996387276646 AS sv_5, -0.979444731203 AS sv_6, -0.585311154901 AS sv_7, 0.625288360048 AS sv_8, -0.587430504822 AS sv_9 UNION ALL SELECT 2 AS sv_idx, -0.0643504873314 AS dual_coeff, 0.472934970371 AS sv_0, 1.99118385101 AS sv_1, 0.439483546511 AS sv_2, -0.358083835546 AS sv_3, 1.48336336674 AS sv_4, -1.25785628124 AS sv_5, -0.56686927999 AS sv_6, -1.52929695699 AS sv_7, 0.811399048829 AS sv_8, -0.374272248433 AS sv_9 UNION ALL SELECT 3 AS sv_idx, -0.730505247748 AS dual_coeff, 0.780772209092 AS sv_0, 1.14353134154 AS sv_1, -0.115466979531 AS sv_2, -0.287696968827 AS sv_3, -0.168834623407 AS sv_4, -0.99287252832 AS sv_5, 0.52002031631 AS sv_6, -0.727310451142 AS sv_7, -0.594518982163 AS sv_8, -0.518408953487 AS sv_9 UNION ALL SELECT 4 AS sv_idx, 0.273624718651 AS dual_coeff, 0.956436315684 AS sv_0, -0.367421297431 AS sv_1, -2.06405349024 AS sv_2, 3.48092340121 AS sv_3, 0.160320062275 AS sv_4, 0.453144851614 AS sv_5, 1.38809208541 AS sv_6, 0.15882913508 AS sv_7, 0.676703661599 AS sv_8, 0.317050122281 AS sv_9 UNION ALL SELECT 5 AS sv_idx, 0.145508596141 AS dual_coeff, -0.68554958118 AS sv_0, -0.430388002967 AS sv_1, -0.352056773139 AS sv_2, -1.11960723015 AS sv_3, 0.172839316439 AS sv_4, 0.62096425615 AS sv_5, -1.35140790099 AS sv_6, 0.135728920385 AS sv_7, -1.42452920384 AS sv_8, 0.472538281742 AS sv_9 UNION ALL SELECT 6 AS sv_idx, 0.212060790134 AS dual_coeff, -1.02355236176 AS sv_0, -0.642017271807 AS sv_1, 0.167838592014 AS sv_2, 0.789075535049 AS sv_3, 0.515452602028 AS sv_4, 0.871613974448 AS sv_5, 1.10706818111 AS sv_6, 0.232991346756 AS sv_7, 3.20686900752 AS sv_8, 0.643537014415 AS sv_9 UNION ALL SELECT 7 AS sv_idx, 0.743804175498 AS dual_coeff, 1.3565463578 AS sv_0, 0.305052539951 AS sv_1, -0.582239520311 AS sv_2, 1.14120205249 AS sv_3, -1.86067281097 AS sv_4, -0.43042323174 AS sv_5, -1.14055283571 AS sv_6, -0.101620049811 AS sv_7, 1.04748216093 AS sv_8, -0.324037734072 AS sv_9 UNION ALL SELECT 8 AS sv_idx, 0.687066191597 AS dual_coeff, 0.499354478713 AS sv_0, 0.335010724614 AS sv_1, 2.79010063215 AS sv_2, -0.571897845929 AS sv_3, 0.13514969861 AS sv_4, -0.0339249825474 AS sv_5, 0.589351932086 AS sv_6, -0.35647746416 AS sv_7, -1.44896726933 AS sv_8, 0.136400091268 AS sv_9) AS "Values"), 
kernel_cte AS 
(SELECT t."KEY" AS "KEY", t.dot_product AS dot_product 
FROM (SELECT full_join_data_sv."KEY" AS "KEY", sum(full_join_data_sv.dot_prod1) + 0.126481787857 AS dot_product 
FROM (SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "SV_data".dual_coeff * ("ADS_sca_2_OUT".scaler_2 * "SV_data".sv_0 + "ADS_sca_2_OUT".scaler_3 * "SV_data".sv_1 + "ADS_sca_2_OUT".scaler_4 * "SV_data".sv_2 + "ADS_sca_2_OUT".scaler_5 * "SV_data".sv_3 + "ADS_sca_2_OUT".scaler_6 * "SV_data".sv_4 + "ADS_sca_2_OUT".scaler_7 * "SV_data".sv_5 + "ADS_sca_2_OUT".scaler_8 * "SV_data".sv_6 + "ADS_sca_2_OUT".scaler_9 * "SV_data".sv_7 + "ADS_sca_2_OUT".scaler_10 * "SV_data".sv_8 + "ADS_sca_2_OUT".scaler_11 * "SV_data".sv_9) AS dot_prod1 
FROM "ADS_sca_2_OUT", "SV_data") AS full_join_data_sv GROUP BY full_join_data_sv."KEY") AS t)
 SELECT kernel_cte."KEY" AS "KEY", -kernel_cte.dot_product AS "Score_0", kernel_cte.dot_product AS "Score_1", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CASE WHEN (kernel_cte.dot_product >= 0.0) THEN 1 ELSE 0 END AS "Decision" 
FROM kernel_cte