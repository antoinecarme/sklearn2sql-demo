-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.725) THEN CASE WHEN ([ADS].[Feature_5] < 7.141) THEN CASE WHEN ([ADS].[Feature_5] < 6.542) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_12] < 19.85) THEN CASE WHEN ([ADS].[Feature_11] < 174.315) THEN 9 ELSE 10 END ELSE CASE WHEN ([ADS].[Feature_4] < 0.675) THEN 11 ELSE 12 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.725 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.141 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 19.85 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_5' AS feature, 6.542 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.98714 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_11' AS feature, 174.315 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.675 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.30607 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.8316 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.22692 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.93007 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.42087 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.985556 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[XGB_Tree_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0, [DT_Output].[Estimator] AS [Estimator_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.725) THEN CASE WHEN ([ADS].[Feature_5] < 7.437) THEN CASE WHEN ([ADS].[Feature_5] < 6.6565) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_12] < 14.805) THEN 5 ELSE CASE WHEN ([ADS].[Feature_4] < 0.603) THEN 9 ELSE 10 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.725 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 14.805 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_5' AS feature, 6.6565 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.87498 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.82948 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.603 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.13166 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.70397 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.57123 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.10608 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[XGB_Tree_1] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_1, [DT_Output_1].[Estimator] AS [Estimator_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_5] < 6.825) THEN CASE WHEN ([ADS].[Feature_12] < 14.4) THEN CASE WHEN ([ADS].[Feature_12] < 9.63) THEN 7 ELSE 8 END ELSE CASE WHEN ([ADS].[Feature_0] < 6.91188) THEN 9 ELSE 10 END END ELSE CASE WHEN ([ADS].[Feature_5] < 7.437) THEN 5 ELSE 6 END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_5' AS feature, 6.825 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 14.4 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_12' AS feature, 9.63 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 6.91188 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.37014 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.50363 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.99807 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.62973 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.35194 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.911269 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[XGB_Tree_2] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_2, [DT_Output_2].[Estimator] AS [Estimator_2] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_5] < 6.9715) THEN CASE WHEN ([ADS].[Feature_12] < 14.3) THEN CASE WHEN ([ADS].[Feature_5] < 6.542) THEN 7 ELSE 8 END ELSE CASE WHEN ([ADS].[Feature_4] < 0.607) THEN 9 ELSE 10 END END ELSE CASE WHEN ([ADS].[Feature_5] < 7.437) THEN 5 ELSE 6 END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_5' AS feature, 6.9715 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 14.3 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_5' AS feature, 6.542 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_4' AS feature, 0.607 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.20542 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.16787 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.5718 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.02078 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.31114 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.896827 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[XGB_Tree_3] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_3, [DT_Output_3].[Estimator] AS [Estimator_3] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.605) THEN CASE WHEN ([ADS].[Feature_5] < 6.945) THEN CASE WHEN ([ADS].[Feature_6] < 83.3) THEN 7 ELSE 8 END ELSE CASE WHEN ([ADS].[Feature_5] < 7.437) THEN 9 ELSE 10 END END ELSE CASE WHEN ([ADS].[Feature_12] < 19.85) THEN CASE WHEN ([ADS].[Feature_11] < 134.95) THEN 11 ELSE 12 END ELSE CASE WHEN ([ADS].[Feature_4] < 0.603) THEN 13 ELSE 14 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.605 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 6.945 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 19.85 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_6' AS feature, 83.3 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_11' AS feature, 134.95 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.603 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.56078 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.23579 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.12304 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.86428 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.762762 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.2821 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.02104 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.647067 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[XGB_Tree_4] AS 
(SELECT [DT_Output_4].[KEY] AS join_key_4, [DT_Output_4].[Estimator] AS [Estimator_4] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 5.265) THEN CASE WHEN ([ADS].[Feature_5] < 7.433) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_12] < 14.795) THEN CASE WHEN ([ADS].[Feature_5] < 6.542) THEN 7 ELSE 8 END ELSE CASE WHEN ([ADS].[Feature_0] < 6.20473) THEN 9 ELSE 10 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 5.265 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.433 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 14.795 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.91117 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.67073 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_5' AS feature, 6.542 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 6.20473 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.26173 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.64386 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.989168 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.653388 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[XGB_Tree_5] AS 
(SELECT [DT_Output_5].[KEY] AS join_key_5, [DT_Output_5].[Estimator] AS [Estimator_5] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 5.265) THEN CASE WHEN ([ADS].[Feature_5] < 7.433) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_12] < 14.795) THEN CASE WHEN ([ADS].[Feature_2] < 4.1) THEN 7 ELSE 8 END ELSE CASE WHEN ([ADS].[Feature_4] < 0.603) THEN 9 ELSE 10 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 5.265 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.433 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 14.795 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.72622 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.41771 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, 4.1 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_4' AS feature, 0.603 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.50999 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.13818 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.95985 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.630776 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[XGB_Tree_6] AS 
(SELECT [DT_Output_6].[KEY] AS join_key_6, [DT_Output_6].[Estimator] AS [Estimator_6] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_5] < 6.825) THEN CASE WHEN ([ADS].[Feature_12] < 14.095) THEN CASE WHEN ([ADS].[Feature_7] < 1.8748) THEN 7 ELSE 8 END ELSE CASE WHEN ([ADS].[Feature_7] < 2.0037) THEN 9 ELSE 10 END END ELSE CASE WHEN ([ADS].[Feature_10] < 18.9) THEN CASE WHEN ([ADS].[Feature_5] < 7.437) THEN 11 ELSE 12 END ELSE 6 END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_5' AS feature, 6.825 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 14.095 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_10' AS feature, 18.9 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_7' AS feature, 1.8748 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_7' AS feature, 2.0037 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_5' AS feature, 7.437 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.993655 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.71096 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.04373 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.535514 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.845941 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.54926 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.2433 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[XGB_Tree_7] AS 
(SELECT [DT_Output_7].[KEY] AS join_key_7, [DT_Output_7].[Estimator] AS [Estimator_7] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.63) THEN CASE WHEN ([ADS].[Feature_5] < 6.945) THEN CASE WHEN ([ADS].[Feature_2] < 13.375) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_7] < 2.0037) THEN CASE WHEN ([ADS].[Feature_4] < 0.6695) THEN 9 ELSE 10 END ELSE CASE WHEN ([ADS].[Feature_11] < 366.675) THEN 11 ELSE 12 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.63 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 6.945 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_7' AS feature, 2.0037 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_2' AS feature, 13.375 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.73664 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_4' AS feature, 0.6695 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_11' AS feature, 366.675 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.02347 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.6548 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.6928 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.421439 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.574007 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.864005 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[XGB_Tree_8] AS 
(SELECT [DT_Output_8].[KEY] AS join_key_8, [DT_Output_8].[Estimator] AS [Estimator_8] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 5.185) THEN CASE WHEN ([ADS].[Feature_7] < 3.20745) THEN 3 ELSE CASE WHEN ([ADS].[Feature_5] < 6.791) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS].[Feature_12] < 14.795) THEN CASE WHEN ([ADS].[Feature_5] < 6.527) THEN 9 ELSE 10 END ELSE CASE WHEN ([ADS].[Feature_10] < 19.65) THEN 11 ELSE 12 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 5.185 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_7' AS feature, 3.20745 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 14.795 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.0033 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_5' AS feature, 6.791 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_5' AS feature, 6.527 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_10' AS feature, 19.65 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.948703 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.47289 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.819779 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.10049 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.765156 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.452378 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[XGB_Tree_9] AS 
(SELECT [DT_Output_9].[KEY] AS join_key_9, [DT_Output_9].[Estimator] AS [Estimator_9] 
FROM [DT_Output_9]), 
[XGB_Join_CTE] AS 
(SELECT [XGB_Tree_0].join_key_0 AS join_key_0, [XGB_Tree_0].[Estimator_0] AS [Estimator_0], [XGB_Tree_1].join_key_1 AS join_key_1, [XGB_Tree_1].[Estimator_1] AS [Estimator_1], [XGB_Tree_2].join_key_2 AS join_key_2, [XGB_Tree_2].[Estimator_2] AS [Estimator_2], [XGB_Tree_3].join_key_3 AS join_key_3, [XGB_Tree_3].[Estimator_3] AS [Estimator_3], [XGB_Tree_4].join_key_4 AS join_key_4, [XGB_Tree_4].[Estimator_4] AS [Estimator_4], [XGB_Tree_5].join_key_5 AS join_key_5, [XGB_Tree_5].[Estimator_5] AS [Estimator_5], [XGB_Tree_6].join_key_6 AS join_key_6, [XGB_Tree_6].[Estimator_6] AS [Estimator_6], [XGB_Tree_7].join_key_7 AS join_key_7, [XGB_Tree_7].[Estimator_7] AS [Estimator_7], [XGB_Tree_8].join_key_8 AS join_key_8, [XGB_Tree_8].[Estimator_8] AS [Estimator_8], [XGB_Tree_9].join_key_9 AS join_key_9, [XGB_Tree_9].[Estimator_9] AS [Estimator_9] 
FROM [XGB_Tree_0] LEFT OUTER JOIN [XGB_Tree_1] ON [XGB_Tree_0].join_key_0 = [XGB_Tree_1].join_key_1 LEFT OUTER JOIN [XGB_Tree_2] ON [XGB_Tree_2].join_key_2 = [XGB_Tree_1].join_key_1 LEFT OUTER JOIN [XGB_Tree_3] ON [XGB_Tree_3].join_key_3 = [XGB_Tree_2].join_key_2 LEFT OUTER JOIN [XGB_Tree_4] ON [XGB_Tree_4].join_key_4 = [XGB_Tree_3].join_key_3 LEFT OUTER JOIN [XGB_Tree_5] ON [XGB_Tree_5].join_key_5 = [XGB_Tree_4].join_key_4 LEFT OUTER JOIN [XGB_Tree_6] ON [XGB_Tree_6].join_key_6 = [XGB_Tree_5].join_key_5 LEFT OUTER JOIN [XGB_Tree_7] ON [XGB_Tree_7].join_key_7 = [XGB_Tree_6].join_key_6 LEFT OUTER JOIN [XGB_Tree_8] ON [XGB_Tree_8].join_key_8 = [XGB_Tree_7].join_key_7 LEFT OUTER JOIN [XGB_Tree_9] ON [XGB_Tree_9].join_key_9 = [XGB_Tree_8].join_key_8), 
[XGB_AVG_Scores] AS 
(SELECT [XGB_Join_CTE].join_key_0 AS [KEY], [XGB_Join_CTE].[Estimator_0] + [XGB_Join_CTE].[Estimator_1] + [XGB_Join_CTE].[Estimator_2] + [XGB_Join_CTE].[Estimator_3] + [XGB_Join_CTE].[Estimator_4] + [XGB_Join_CTE].[Estimator_5] + [XGB_Join_CTE].[Estimator_6] + [XGB_Join_CTE].[Estimator_7] + [XGB_Join_CTE].[Estimator_8] + [XGB_Join_CTE].[Estimator_9] + 0.5 AS [Estimator] 
FROM [XGB_Join_CTE])
 SELECT [XGB_AVG_Scores].[KEY] AS [KEY], [XGB_AVG_Scores].[Estimator] AS [Estimator] 
FROM [XGB_AVG_Scores]