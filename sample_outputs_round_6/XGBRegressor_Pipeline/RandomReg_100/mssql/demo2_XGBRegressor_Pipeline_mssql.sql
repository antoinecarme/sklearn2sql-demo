-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.181073130553 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN -0.0948444031434 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN -0.20996174383 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.0676500129637 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.0542006884974 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.191258651046 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.0889078350713 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.170835179726 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.0874152070859 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.0113128421993 ELSE [ADS].[Feature_9] END AS impter_11, CASE WHEN ([ADS].[Feature_10] IS NULL) THEN -0.237513541634 ELSE [ADS].[Feature_10] END AS impter_12, CASE WHEN ([ADS].[Feature_11] IS NULL) THEN 0.0164025276655 ELSE [ADS].[Feature_11] END AS impter_13, CASE WHEN ([ADS].[Feature_12] IS NULL) THEN -0.207183677648 ELSE [ADS].[Feature_12] END AS impter_14, CASE WHEN ([ADS].[Feature_13] IS NULL) THEN -0.0758421969389 ELSE [ADS].[Feature_13] END AS impter_15, CASE WHEN ([ADS].[Feature_14] IS NULL) THEN -0.169838569955 ELSE [ADS].[Feature_14] END AS impter_16, CASE WHEN ([ADS].[Feature_15] IS NULL) THEN 0.0285593305928 ELSE [ADS].[Feature_15] END AS impter_17, CASE WHEN ([ADS].[Feature_16] IS NULL) THEN -0.149912334108 ELSE [ADS].[Feature_16] END AS impter_18, CASE WHEN ([ADS].[Feature_17] IS NULL) THEN 0.00895189221576 ELSE [ADS].[Feature_17] END AS impter_19, CASE WHEN ([ADS].[Feature_18] IS NULL) THEN -0.0894159456916 ELSE [ADS].[Feature_18] END AS impter_20, CASE WHEN ([ADS].[Feature_19] IS NULL) THEN 0.00567115014424 ELSE [ADS].[Feature_19] END AS impter_21, CASE WHEN ([ADS].[Feature_20] IS NULL) THEN 0.0718735131162 ELSE [ADS].[Feature_20] END AS impter_22, CASE WHEN ([ADS].[Feature_21] IS NULL) THEN 0.00282173656277 ELSE [ADS].[Feature_21] END AS impter_23, CASE WHEN ([ADS].[Feature_22] IS NULL) THEN -0.152979886226 ELSE [ADS].[Feature_22] END AS impter_24, CASE WHEN ([ADS].[Feature_23] IS NULL) THEN 0.108037809491 ELSE [ADS].[Feature_23] END AS impter_25, CASE WHEN ([ADS].[Feature_24] IS NULL) THEN -0.138511792426 ELSE [ADS].[Feature_24] END AS impter_26, CASE WHEN ([ADS].[Feature_25] IS NULL) THEN -0.1157792983 ELSE [ADS].[Feature_25] END AS impter_27, CASE WHEN ([ADS].[Feature_26] IS NULL) THEN -0.176539557626 ELSE [ADS].[Feature_26] END AS impter_28, CASE WHEN ([ADS].[Feature_27] IS NULL) THEN 0.271494485415 ELSE [ADS].[Feature_27] END AS impter_29, CASE WHEN ([ADS].[Feature_28] IS NULL) THEN -0.248017376936 ELSE [ADS].[Feature_28] END AS impter_30, CASE WHEN ([ADS].[Feature_29] IS NULL) THEN -0.0896753256726 ELSE [ADS].[Feature_29] END AS impter_31, CASE WHEN ([ADS].[Feature_30] IS NULL) THEN 0.378187092031 ELSE [ADS].[Feature_30] END AS impter_32, CASE WHEN ([ADS].[Feature_31] IS NULL) THEN 0.165943272028 ELSE [ADS].[Feature_31] END AS impter_33, CASE WHEN ([ADS].[Feature_32] IS NULL) THEN -0.054469868119 ELSE [ADS].[Feature_32] END AS impter_34, CASE WHEN ([ADS].[Feature_33] IS NULL) THEN -0.102363191832 ELSE [ADS].[Feature_33] END AS impter_35, CASE WHEN ([ADS].[Feature_34] IS NULL) THEN 0.0343022580608 ELSE [ADS].[Feature_34] END AS impter_36, CASE WHEN ([ADS].[Feature_35] IS NULL) THEN -0.0509485728447 ELSE [ADS].[Feature_35] END AS impter_37, CASE WHEN ([ADS].[Feature_36] IS NULL) THEN -0.0904407102565 ELSE [ADS].[Feature_36] END AS impter_38, CASE WHEN ([ADS].[Feature_37] IS NULL) THEN -0.153523247669 ELSE [ADS].[Feature_37] END AS impter_39, CASE WHEN ([ADS].[Feature_38] IS NULL) THEN 0.0784112178132 ELSE [ADS].[Feature_38] END AS impter_40, CASE WHEN ([ADS].[Feature_39] IS NULL) THEN -0.0504233511808 ELSE [ADS].[Feature_39] END AS impter_41, CASE WHEN ([ADS].[Feature_40] IS NULL) THEN 0.0161949882114 ELSE [ADS].[Feature_40] END AS impter_42, CASE WHEN ([ADS].[Feature_41] IS NULL) THEN 0.108877393831 ELSE [ADS].[Feature_41] END AS impter_43, CASE WHEN ([ADS].[Feature_42] IS NULL) THEN -0.0335656381626 ELSE [ADS].[Feature_42] END AS impter_44, CASE WHEN ([ADS].[Feature_43] IS NULL) THEN -0.128166859548 ELSE [ADS].[Feature_43] END AS impter_45, CASE WHEN ([ADS].[Feature_44] IS NULL) THEN -0.0411766643251 ELSE [ADS].[Feature_44] END AS impter_46, CASE WHEN ([ADS].[Feature_45] IS NULL) THEN 0.0589936756752 ELSE [ADS].[Feature_45] END AS impter_47, CASE WHEN ([ADS].[Feature_46] IS NULL) THEN 0.154065666542 ELSE [ADS].[Feature_46] END AS impter_48, CASE WHEN ([ADS].[Feature_47] IS NULL) THEN 0.0393221492394 ELSE [ADS].[Feature_47] END AS impter_49, CASE WHEN ([ADS].[Feature_48] IS NULL) THEN -0.0600653886359 ELSE [ADS].[Feature_48] END AS impter_50, CASE WHEN ([ADS].[Feature_49] IS NULL) THEN -0.0139059393312 ELSE [ADS].[Feature_49] END AS impter_51, CASE WHEN ([ADS].[Feature_50] IS NULL) THEN -0.00340464290721 ELSE [ADS].[Feature_50] END AS impter_52, CASE WHEN ([ADS].[Feature_51] IS NULL) THEN 0.0323557900614 ELSE [ADS].[Feature_51] END AS impter_53, CASE WHEN ([ADS].[Feature_52] IS NULL) THEN -0.123972762975 ELSE [ADS].[Feature_52] END AS impter_54, CASE WHEN ([ADS].[Feature_53] IS NULL) THEN 0.121261889815 ELSE [ADS].[Feature_53] END AS impter_55, CASE WHEN ([ADS].[Feature_54] IS NULL) THEN -0.120439591006 ELSE [ADS].[Feature_54] END AS impter_56, CASE WHEN ([ADS].[Feature_55] IS NULL) THEN -0.128431759331 ELSE [ADS].[Feature_55] END AS impter_57, CASE WHEN ([ADS].[Feature_56] IS NULL) THEN -0.0837617946031 ELSE [ADS].[Feature_56] END AS impter_58, CASE WHEN ([ADS].[Feature_57] IS NULL) THEN 0.223454769275 ELSE [ADS].[Feature_57] END AS impter_59, CASE WHEN ([ADS].[Feature_58] IS NULL) THEN -0.0400795278945 ELSE [ADS].[Feature_58] END AS impter_60, CASE WHEN ([ADS].[Feature_59] IS NULL) THEN -0.182862516863 ELSE [ADS].[Feature_59] END AS impter_61, CASE WHEN ([ADS].[Feature_60] IS NULL) THEN -0.257826912424 ELSE [ADS].[Feature_60] END AS impter_62, CASE WHEN ([ADS].[Feature_61] IS NULL) THEN 0.100305972265 ELSE [ADS].[Feature_61] END AS impter_63, CASE WHEN ([ADS].[Feature_62] IS NULL) THEN -0.171873382472 ELSE [ADS].[Feature_62] END AS impter_64, CASE WHEN ([ADS].[Feature_63] IS NULL) THEN -0.0905520743324 ELSE [ADS].[Feature_63] END AS impter_65, CASE WHEN ([ADS].[Feature_64] IS NULL) THEN 0.0465018763056 ELSE [ADS].[Feature_64] END AS impter_66, CASE WHEN ([ADS].[Feature_65] IS NULL) THEN -0.0277203027288 ELSE [ADS].[Feature_65] END AS impter_67, CASE WHEN ([ADS].[Feature_66] IS NULL) THEN -0.0156576478371 ELSE [ADS].[Feature_66] END AS impter_68, CASE WHEN ([ADS].[Feature_67] IS NULL) THEN 0.029586271053 ELSE [ADS].[Feature_67] END AS impter_69, CASE WHEN ([ADS].[Feature_68] IS NULL) THEN -0.208041129902 ELSE [ADS].[Feature_68] END AS impter_70, CASE WHEN ([ADS].[Feature_69] IS NULL) THEN -0.38758652419 ELSE [ADS].[Feature_69] END AS impter_71, CASE WHEN ([ADS].[Feature_70] IS NULL) THEN 0.0292188708243 ELSE [ADS].[Feature_70] END AS impter_72, CASE WHEN ([ADS].[Feature_71] IS NULL) THEN 0.11218950122 ELSE [ADS].[Feature_71] END AS impter_73, CASE WHEN ([ADS].[Feature_72] IS NULL) THEN 0.105854111626 ELSE [ADS].[Feature_72] END AS impter_74, CASE WHEN ([ADS].[Feature_73] IS NULL) THEN -0.147390681735 ELSE [ADS].[Feature_73] END AS impter_75, CASE WHEN ([ADS].[Feature_74] IS NULL) THEN 0.0800360348532 ELSE [ADS].[Feature_74] END AS impter_76, CASE WHEN ([ADS].[Feature_75] IS NULL) THEN -0.024625819685 ELSE [ADS].[Feature_75] END AS impter_77, CASE WHEN ([ADS].[Feature_76] IS NULL) THEN 0.0649689439596 ELSE [ADS].[Feature_76] END AS impter_78, CASE WHEN ([ADS].[Feature_77] IS NULL) THEN 0.14773916974 ELSE [ADS].[Feature_77] END AS impter_79, CASE WHEN ([ADS].[Feature_78] IS NULL) THEN 0.199040203613 ELSE [ADS].[Feature_78] END AS impter_80, CASE WHEN ([ADS].[Feature_79] IS NULL) THEN -0.0214516070116 ELSE [ADS].[Feature_79] END AS impter_81, CASE WHEN ([ADS].[Feature_80] IS NULL) THEN 0.0262149286326 ELSE [ADS].[Feature_80] END AS impter_82, CASE WHEN ([ADS].[Feature_81] IS NULL) THEN -0.137534054382 ELSE [ADS].[Feature_81] END AS impter_83, CASE WHEN ([ADS].[Feature_82] IS NULL) THEN -0.147399239192 ELSE [ADS].[Feature_82] END AS impter_84, CASE WHEN ([ADS].[Feature_83] IS NULL) THEN 0.0374404666993 ELSE [ADS].[Feature_83] END AS impter_85, CASE WHEN ([ADS].[Feature_84] IS NULL) THEN -0.234341170858 ELSE [ADS].[Feature_84] END AS impter_86, CASE WHEN ([ADS].[Feature_85] IS NULL) THEN -0.0571528030896 ELSE [ADS].[Feature_85] END AS impter_87, CASE WHEN ([ADS].[Feature_86] IS NULL) THEN 0.0074865479962 ELSE [ADS].[Feature_86] END AS impter_88, CASE WHEN ([ADS].[Feature_87] IS NULL) THEN 0.214600234414 ELSE [ADS].[Feature_87] END AS impter_89, CASE WHEN ([ADS].[Feature_88] IS NULL) THEN 0.0167668473714 ELSE [ADS].[Feature_88] END AS impter_90, CASE WHEN ([ADS].[Feature_89] IS NULL) THEN -0.200032819594 ELSE [ADS].[Feature_89] END AS impter_91, CASE WHEN ([ADS].[Feature_90] IS NULL) THEN -0.160149065596 ELSE [ADS].[Feature_90] END AS impter_92, CASE WHEN ([ADS].[Feature_91] IS NULL) THEN -0.000874678008724 ELSE [ADS].[Feature_91] END AS impter_93, CASE WHEN ([ADS].[Feature_92] IS NULL) THEN 0.0744337047203 ELSE [ADS].[Feature_92] END AS impter_94, CASE WHEN ([ADS].[Feature_93] IS NULL) THEN -0.0605245343056 ELSE [ADS].[Feature_93] END AS impter_95, CASE WHEN ([ADS].[Feature_94] IS NULL) THEN -0.0525402508403 ELSE [ADS].[Feature_94] END AS impter_96, CASE WHEN ([ADS].[Feature_95] IS NULL) THEN 0.0298433021219 ELSE [ADS].[Feature_95] END AS impter_97, CASE WHEN ([ADS].[Feature_96] IS NULL) THEN -0.107649700644 ELSE [ADS].[Feature_96] END AS impter_98, CASE WHEN ([ADS].[Feature_97] IS NULL) THEN 0.098154524636 ELSE [ADS].[Feature_97] END AS impter_99, CASE WHEN ([ADS].[Feature_98] IS NULL) THEN 0.247128400826 ELSE [ADS].[Feature_98] END AS impter_100, CASE WHEN ([ADS].[Feature_99] IS NULL) THEN -0.0640726868226 ELSE [ADS].[Feature_99] END AS impter_101 
FROM [RandomReg_100] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.181073130553) / 0.865591813805 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - -0.0948444031434) / 1.0587343478 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - -0.20996174383) / 0.965463317482 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.0676500129637) / 0.904368836651 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.0542006884974) / 0.874767246522 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.191258651046) / 0.935183126619 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.0889078350713) / 1.03307563256 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.170835179726) / 1.08624367502 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.0874152070859) / 0.966722172781 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.0113128421993) / 1.11146334082 AS scaler_11, (CAST([ADS_imp_1_OUT].impter_12 AS FLOAT) - -0.237513541634) / 1.0335426463 AS scaler_12, (CAST([ADS_imp_1_OUT].impter_13 AS FLOAT) - 0.0164025276655) / 0.987692098421 AS scaler_13, (CAST([ADS_imp_1_OUT].impter_14 AS FLOAT) - -0.207183677648) / 0.987042522207 AS scaler_14, (CAST([ADS_imp_1_OUT].impter_15 AS FLOAT) - -0.0758421969389) / 0.930937116447 AS scaler_15, (CAST([ADS_imp_1_OUT].impter_16 AS FLOAT) - -0.169838569955) / 1.00012612879 AS scaler_16, (CAST([ADS_imp_1_OUT].impter_17 AS FLOAT) - 0.0285593305928) / 1.0859102363 AS scaler_17, (CAST([ADS_imp_1_OUT].impter_18 AS FLOAT) - -0.149912334108) / 0.870585215249 AS scaler_18, (CAST([ADS_imp_1_OUT].impter_19 AS FLOAT) - 0.00895189221576) / 1.01488736671 AS scaler_19, (CAST([ADS_imp_1_OUT].impter_20 AS FLOAT) - -0.0894159456916) / 0.863659141431 AS scaler_20, (CAST([ADS_imp_1_OUT].impter_21 AS FLOAT) - 0.00567115014424) / 0.872677641712 AS scaler_21, (CAST([ADS_imp_1_OUT].impter_22 AS FLOAT) - 0.0718735131162) / 1.02880845333 AS scaler_22, (CAST([ADS_imp_1_OUT].impter_23 AS FLOAT) - 0.00282173656277) / 0.907403248475 AS scaler_23, (CAST([ADS_imp_1_OUT].impter_24 AS FLOAT) - -0.152979886226) / 1.05539885353 AS scaler_24, (CAST([ADS_imp_1_OUT].impter_25 AS FLOAT) - 0.108037809491) / 0.931360380748 AS scaler_25, (CAST([ADS_imp_1_OUT].impter_26 AS FLOAT) - -0.138511792426) / 0.884728160569 AS scaler_26, (CAST([ADS_imp_1_OUT].impter_27 AS FLOAT) - -0.1157792983) / 1.00599004103 AS scaler_27, (CAST([ADS_imp_1_OUT].impter_28 AS FLOAT) - -0.176539557626) / 0.911701033029 AS scaler_28, (CAST([ADS_imp_1_OUT].impter_29 AS FLOAT) - 0.271494485415) / 0.906614007143 AS scaler_29, (CAST([ADS_imp_1_OUT].impter_30 AS FLOAT) - -0.248017376936) / 0.984174726012 AS scaler_30, (CAST([ADS_imp_1_OUT].impter_31 AS FLOAT) - -0.0896753256726) / 1.04501820056 AS scaler_31, (CAST([ADS_imp_1_OUT].impter_32 AS FLOAT) - 0.378187092031) / 0.927798254953 AS scaler_32, (CAST([ADS_imp_1_OUT].impter_33 AS FLOAT) - 0.165943272028) / 0.992388594205 AS scaler_33, (CAST([ADS_imp_1_OUT].impter_34 AS FLOAT) - -0.054469868119) / 0.974615467266 AS scaler_34, (CAST([ADS_imp_1_OUT].impter_35 AS FLOAT) - -0.102363191832) / 0.903063255444 AS scaler_35, (CAST([ADS_imp_1_OUT].impter_36 AS FLOAT) - 0.0343022580608) / 0.97387874172 AS scaler_36, (CAST([ADS_imp_1_OUT].impter_37 AS FLOAT) - -0.0509485728447) / 0.973872103947 AS scaler_37, (CAST([ADS_imp_1_OUT].impter_38 AS FLOAT) - -0.0904407102565) / 1.01575147349 AS scaler_38, (CAST([ADS_imp_1_OUT].impter_39 AS FLOAT) - -0.153523247669) / 0.882319160515 AS scaler_39, (CAST([ADS_imp_1_OUT].impter_40 AS FLOAT) - 0.0784112178132) / 1.1163870341 AS scaler_40, (CAST([ADS_imp_1_OUT].impter_41 AS FLOAT) - -0.0504233511808) / 1.05973532651 AS scaler_41, (CAST([ADS_imp_1_OUT].impter_42 AS FLOAT) - 0.0161949882114) / 0.911109530858 AS scaler_42, (CAST([ADS_imp_1_OUT].impter_43 AS FLOAT) - 0.108877393831) / 0.982019053737 AS scaler_43, (CAST([ADS_imp_1_OUT].impter_44 AS FLOAT) - -0.0335656381626) / 0.973804170604 AS scaler_44, (CAST([ADS_imp_1_OUT].impter_45 AS FLOAT) - -0.128166859548) / 0.896007032017 AS scaler_45, (CAST([ADS_imp_1_OUT].impter_46 AS FLOAT) - -0.0411766643251) / 0.890484372412 AS scaler_46, (CAST([ADS_imp_1_OUT].impter_47 AS FLOAT) - 0.0589936756752) / 0.944055753378 AS scaler_47, (CAST([ADS_imp_1_OUT].impter_48 AS FLOAT) - 0.154065666542) / 0.783945330391 AS scaler_48, (CAST([ADS_imp_1_OUT].impter_49 AS FLOAT) - 0.0393221492394) / 0.995282821291 AS scaler_49, (CAST([ADS_imp_1_OUT].impter_50 AS FLOAT) - -0.0600653886359) / 0.95549061453 AS scaler_50, (CAST([ADS_imp_1_OUT].impter_51 AS FLOAT) - -0.0139059393312) / 1.02750698977 AS scaler_51, (CAST([ADS_imp_1_OUT].impter_52 AS FLOAT) - -0.00340464290721) / 1.14469531441 AS scaler_52, (CAST([ADS_imp_1_OUT].impter_53 AS FLOAT) - 0.0323557900614) / 1.02565362738 AS scaler_53, (CAST([ADS_imp_1_OUT].impter_54 AS FLOAT) - -0.123972762975) / 0.865743714003 AS scaler_54, (CAST([ADS_imp_1_OUT].impter_55 AS FLOAT) - 0.121261889815) / 0.912608956522 AS scaler_55, (CAST([ADS_imp_1_OUT].impter_56 AS FLOAT) - -0.120439591006) / 1.04676171612 AS scaler_56, (CAST([ADS_imp_1_OUT].impter_57 AS FLOAT) - -0.128431759331) / 0.792279380065 AS scaler_57, (CAST([ADS_imp_1_OUT].impter_58 AS FLOAT) - -0.0837617946031) / 0.99070985055 AS scaler_58, (CAST([ADS_imp_1_OUT].impter_59 AS FLOAT) - 0.223454769275) / 1.13169973972 AS scaler_59, (CAST([ADS_imp_1_OUT].impter_60 AS FLOAT) - -0.0400795278945) / 1.0084880126 AS scaler_60, (CAST([ADS_imp_1_OUT].impter_61 AS FLOAT) - -0.182862516863) / 0.801801417088 AS scaler_61, (CAST([ADS_imp_1_OUT].impter_62 AS FLOAT) - -0.257826912424) / 0.967116585028 AS scaler_62, (CAST([ADS_imp_1_OUT].impter_63 AS FLOAT) - 0.100305972265) / 0.920483621031 AS scaler_63, (CAST([ADS_imp_1_OUT].impter_64 AS FLOAT) - -0.171873382472) / 0.7840658538 AS scaler_64, (CAST([ADS_imp_1_OUT].impter_65 AS FLOAT) - -0.0905520743324) / 0.936788964269 AS scaler_65, (CAST([ADS_imp_1_OUT].impter_66 AS FLOAT) - 0.0465018763056) / 1.09889881166 AS scaler_66, (CAST([ADS_imp_1_OUT].impter_67 AS FLOAT) - -0.0277203027288) / 0.942506554884 AS scaler_67, (CAST([ADS_imp_1_OUT].impter_68 AS FLOAT) - -0.0156576478371) / 0.924066665613 AS scaler_68, (CAST([ADS_imp_1_OUT].impter_69 AS FLOAT) - 0.029586271053) / 0.933016505837 AS scaler_69, (CAST([ADS_imp_1_OUT].impter_70 AS FLOAT) - -0.208041129902) / 0.981876801489 AS scaler_70, (CAST([ADS_imp_1_OUT].impter_71 AS FLOAT) - -0.38758652419) / 0.957884953407 AS scaler_71, (CAST([ADS_imp_1_OUT].impter_72 AS FLOAT) - 0.0292188708243) / 0.942796169312 AS scaler_72, (CAST([ADS_imp_1_OUT].impter_73 AS FLOAT) - 0.11218950122) / 0.93861543595 AS scaler_73, (CAST([ADS_imp_1_OUT].impter_74 AS FLOAT) - 0.105854111626) / 1.0212702572 AS scaler_74, (CAST([ADS_imp_1_OUT].impter_75 AS FLOAT) - -0.147390681735) / 1.08597596025 AS scaler_75, (CAST([ADS_imp_1_OUT].impter_76 AS FLOAT) - 0.0800360348532) / 1.00294052561 AS scaler_76, (CAST([ADS_imp_1_OUT].impter_77 AS FLOAT) - -0.024625819685) / 0.885817883652 AS scaler_77, (CAST([ADS_imp_1_OUT].impter_78 AS FLOAT) - 0.0649689439596) / 1.05294183217 AS scaler_78, (CAST([ADS_imp_1_OUT].impter_79 AS FLOAT) - 0.14773916974) / 0.956525131202 AS scaler_79, (CAST([ADS_imp_1_OUT].impter_80 AS FLOAT) - 0.199040203613) / 0.992247796175 AS scaler_80, (CAST([ADS_imp_1_OUT].impter_81 AS FLOAT) - -0.0214516070116) / 0.950363969538 AS scaler_81, (CAST([ADS_imp_1_OUT].impter_82 AS FLOAT) - 0.0262149286326) / 0.974636442012 AS scaler_82, (CAST([ADS_imp_1_OUT].impter_83 AS FLOAT) - -0.137534054382) / 0.945863196856 AS scaler_83, (CAST([ADS_imp_1_OUT].impter_84 AS FLOAT) - -0.147399239192) / 0.988720915736 AS scaler_84, (CAST([ADS_imp_1_OUT].impter_85 AS FLOAT) - 0.0374404666993) / 1.12914921275 AS scaler_85, (CAST([ADS_imp_1_OUT].impter_86 AS FLOAT) - -0.234341170858) / 1.05268249232 AS scaler_86, (CAST([ADS_imp_1_OUT].impter_87 AS FLOAT) - -0.0571528030896) / 0.968033583712 AS scaler_87, (CAST([ADS_imp_1_OUT].impter_88 AS FLOAT) - 0.0074865479962) / 1.02270334361 AS scaler_88, (CAST([ADS_imp_1_OUT].impter_89 AS FLOAT) - 0.214600234414) / 0.912654199952 AS scaler_89, (CAST([ADS_imp_1_OUT].impter_90 AS FLOAT) - 0.0167668473714) / 0.981734064036 AS scaler_90, (CAST([ADS_imp_1_OUT].impter_91 AS FLOAT) - -0.200032819594) / 1.01318378006 AS scaler_91, (CAST([ADS_imp_1_OUT].impter_92 AS FLOAT) - -0.160149065596) / 1.02671694767 AS scaler_92, (CAST([ADS_imp_1_OUT].impter_93 AS FLOAT) - -0.000874678008724) / 0.963644956915 AS scaler_93, (CAST([ADS_imp_1_OUT].impter_94 AS FLOAT) - 0.0744337047203) / 0.842197103528 AS scaler_94, (CAST([ADS_imp_1_OUT].impter_95 AS FLOAT) - -0.0605245343056) / 0.919494948218 AS scaler_95, (CAST([ADS_imp_1_OUT].impter_96 AS FLOAT) - -0.0525402508403) / 1.04747508143 AS scaler_96, (CAST([ADS_imp_1_OUT].impter_97 AS FLOAT) - 0.0298433021219) / 1.03957769469 AS scaler_97, (CAST([ADS_imp_1_OUT].impter_98 AS FLOAT) - -0.107649700644) / 0.957537717579 AS scaler_98, (CAST([ADS_imp_1_OUT].impter_99 AS FLOAT) - 0.098154524636) / 0.940732803774 AS scaler_99, (CAST([ADS_imp_1_OUT].impter_100 AS FLOAT) - 0.247128400826) / 0.875148287189 AS scaler_100, (CAST([ADS_imp_1_OUT].impter_101 AS FLOAT) - -0.0640726868226) / 1.15092681881 AS scaler_101 
FROM [ADS_imp_1_OUT]), 
[DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_6 < -0.319977) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_40 < -0.0503675) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_100 < -0.242006) THEN 5 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 < 0.393555) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_6' AS feature, -0.319977 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_40' AS feature, -0.0503675 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_100' AS feature, -0.242006 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -14.0818 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.48085 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.06058 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'scaler_10' AS feature, 0.393555 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 7.48173 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 19.8594 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[XGB_Tree_0] AS 
(SELECT [DT_Output].[KEY] AS join_key_0, [DT_Output].[Estimator] AS [Estimator_0] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_40 < 0.23645) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_55 < 0.53449) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_68 < 0.480494) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_96 < -0.251863) THEN 5 ELSE 6 END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_40' AS feature, 0.23645 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_55' AS feature, 0.53449 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_96' AS feature, -0.251863 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'scaler_68' AS feature, 0.480494 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.62827 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.4959 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.63124 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -13.8106 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.35594 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[XGB_Tree_1] AS 
(SELECT [DT_Output_1].[KEY] AS join_key_1, [DT_Output_1].[Estimator] AS [Estimator_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_6 < -0.319977) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_78 < -0.100174) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_100 < -0.242006) THEN 5 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 < -0.182379) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_6' AS feature, -0.319977 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_78' AS feature, -0.100174 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_100' AS feature, -0.242006 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -13.5955 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.03579 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.79071 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'scaler_10' AS feature, -0.182379 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.46444 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.4265 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[XGB_Tree_2] AS 
(SELECT [DT_Output_2].[KEY] AS join_key_2, [DT_Output_2].[Estimator] AS [Estimator_2] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_40 < 0.23645) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_30 < -0.00818183) THEN 3 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_100 < 0.106768) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_52 < -0.178081) THEN 5 ELSE 6 END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_40' AS feature, 0.23645 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_30' AS feature, -0.00818183 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_52' AS feature, -0.178081 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -10.4137 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'scaler_100' AS feature, 0.106768 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.33159 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.01 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -4.92844 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 6.38369 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[XGB_Tree_3] AS 
(SELECT [DT_Output_3].[KEY] AS join_key_3, [DT_Output_3].[Estimator] AS [Estimator_3] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_6 < -0.319977) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_45 < -0.0579721) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_100 < -0.242006) THEN 5 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_75 < -0.325388) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_6' AS feature, -0.319977 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_45' AS feature, -0.0579721 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_100' AS feature, -0.242006 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -11.2345 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.814 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.27999 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'scaler_75' AS feature, -0.325388 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.02377 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.1002 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[XGB_Tree_4] AS 
(SELECT [DT_Output_4].[KEY] AS join_key_4, [DT_Output_4].[Estimator] AS [Estimator_4] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_40 < 0.23645) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_55 < 0.470714) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_68 < 0.480494) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_96 < 0.0128935) THEN 5 ELSE 6 END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_40' AS feature, 0.23645 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_55' AS feature, 0.470714 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_96' AS feature, 0.0128935 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'scaler_68' AS feature, 0.480494 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.23758 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 11.7893 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.16578 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -11.6089 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.971097 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[XGB_Tree_5] AS 
(SELECT [DT_Output_5].[KEY] AS join_key_5, [DT_Output_5].[Estimator] AS [Estimator_5] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_6 < -0.319977) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_78 < -0.100174) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_100 < -0.242006) THEN 5 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 < -0.182379) THEN 7 ELSE 8 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_6' AS feature, -0.319977 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_78' AS feature, -0.100174 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_100' AS feature, -0.242006 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -10.6317 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -1.93523 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.07851 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'scaler_10' AS feature, -0.182379 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 2.66819 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 11.8684 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[XGB_Tree_6] AS 
(SELECT [DT_Output_6].[KEY] AS join_key_6, [DT_Output_6].[Estimator] AS [Estimator_6] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_40 < 0.433193) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_55 < 0.53449) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_68 < 0.480494) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_50 < 0.239112) THEN 5 ELSE 6 END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_40' AS feature, 0.433193 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_55' AS feature, 0.53449 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_50' AS feature, 0.239112 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'scaler_68' AS feature, 0.480494 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 4.32769 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 3.34522 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 11.2229 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -9.31379 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.533958 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[XGB_Tree_7] AS 
(SELECT [DT_Output_7].[KEY] AS join_key_7, [DT_Output_7].[Estimator] AS [Estimator_7] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_40 < 0.199649) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 < 0.0652141) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_84 < -0.535624) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_96 < 0.0128935) THEN 5 ELSE 6 END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_40' AS feature, 0.199649 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_10' AS feature, 0.0652141 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_96' AS feature, 0.0128935 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'scaler_84' AS feature, -0.535624 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.13338 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.51276 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.56799 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -2.81083 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, -11.3891 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[XGB_Tree_8] AS 
(SELECT [DT_Output_8].[KEY] AS join_key_8, [DT_Output_8].[Estimator] AS [Estimator_8] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_6 < -0.319977) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_45 < 0.0815707) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_34 < 0.512012) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_46 < 0.0967731) THEN 7 ELSE 8 END ELSE 6 END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'scaler_6' AS feature, -0.319977 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'scaler_45' AS feature, 0.0815707 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'scaler_34' AS feature, 0.512012 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -8.38065 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -0.424768 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'scaler_46' AS feature, 0.0967731 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, -3.10133 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.48534 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.99569 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[XGB_Tree_9] AS 
(SELECT [DT_Output_9].[KEY] AS join_key_9, [DT_Output_9].[Estimator] AS [Estimator_9] 
FROM [DT_Output_9]), 
[XGB_Join_CTE] AS 
(SELECT [XGB_Tree_0].join_key_0 AS join_key_0, [XGB_Tree_0].[Estimator_0] AS [Estimator_0], [XGB_Tree_1].join_key_1 AS join_key_1, [XGB_Tree_1].[Estimator_1] AS [Estimator_1], [XGB_Tree_2].join_key_2 AS join_key_2, [XGB_Tree_2].[Estimator_2] AS [Estimator_2], [XGB_Tree_3].join_key_3 AS join_key_3, [XGB_Tree_3].[Estimator_3] AS [Estimator_3], [XGB_Tree_4].join_key_4 AS join_key_4, [XGB_Tree_4].[Estimator_4] AS [Estimator_4], [XGB_Tree_5].join_key_5 AS join_key_5, [XGB_Tree_5].[Estimator_5] AS [Estimator_5], [XGB_Tree_6].join_key_6 AS join_key_6, [XGB_Tree_6].[Estimator_6] AS [Estimator_6], [XGB_Tree_7].join_key_7 AS join_key_7, [XGB_Tree_7].[Estimator_7] AS [Estimator_7], [XGB_Tree_8].join_key_8 AS join_key_8, [XGB_Tree_8].[Estimator_8] AS [Estimator_8], [XGB_Tree_9].join_key_9 AS join_key_9, [XGB_Tree_9].[Estimator_9] AS [Estimator_9] 
FROM [XGB_Tree_0] LEFT OUTER JOIN [XGB_Tree_1] ON [XGB_Tree_0].join_key_0 = [XGB_Tree_1].join_key_1 LEFT OUTER JOIN [XGB_Tree_2] ON [XGB_Tree_2].join_key_2 = [XGB_Tree_1].join_key_1 LEFT OUTER JOIN [XGB_Tree_3] ON [XGB_Tree_3].join_key_3 = [XGB_Tree_2].join_key_2 LEFT OUTER JOIN [XGB_Tree_4] ON [XGB_Tree_4].join_key_4 = [XGB_Tree_3].join_key_3 LEFT OUTER JOIN [XGB_Tree_5] ON [XGB_Tree_5].join_key_5 = [XGB_Tree_4].join_key_4 LEFT OUTER JOIN [XGB_Tree_6] ON [XGB_Tree_6].join_key_6 = [XGB_Tree_5].join_key_5 LEFT OUTER JOIN [XGB_Tree_7] ON [XGB_Tree_7].join_key_7 = [XGB_Tree_6].join_key_6 LEFT OUTER JOIN [XGB_Tree_8] ON [XGB_Tree_8].join_key_8 = [XGB_Tree_7].join_key_7 LEFT OUTER JOIN [XGB_Tree_9] ON [XGB_Tree_9].join_key_9 = [XGB_Tree_8].join_key_8), 
[XGB_AVG_Scores] AS 
(SELECT [XGB_Join_CTE].join_key_0 AS [KEY], [XGB_Join_CTE].[Estimator_0] + [XGB_Join_CTE].[Estimator_1] + [XGB_Join_CTE].[Estimator_2] + [XGB_Join_CTE].[Estimator_3] + [XGB_Join_CTE].[Estimator_4] + [XGB_Join_CTE].[Estimator_5] + [XGB_Join_CTE].[Estimator_6] + [XGB_Join_CTE].[Estimator_7] + [XGB_Join_CTE].[Estimator_8] + [XGB_Join_CTE].[Estimator_9] + 0.5 AS [Estimator] 
FROM [XGB_Join_CTE])
 SELECT [XGB_AVG_Scores].[KEY] AS [KEY], [XGB_AVG_Scores].[Estimator] AS [Estimator] 
FROM [XGB_AVG_Scores]