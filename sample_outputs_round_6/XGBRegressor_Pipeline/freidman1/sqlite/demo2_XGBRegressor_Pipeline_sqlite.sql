-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.51456520846 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.529769394462 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.462062911835 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.581501084373 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.484590446043 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.52246339222 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.547732422823 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.497030848265 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.501308669571 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.478600307008 ELSE "ADS"."Feature_9" END AS impter_11 
FROM freidman1 AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.51456520846) / 0.287153738935 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.529769394462) / 0.275071977573 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.462062911835) / 0.241829775153 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.581501084373) / 0.294790766414 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.484590446043) / 0.27639276291 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.52246339222) / 0.295883906712 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.547732422823) / 0.314879351948 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.497030848265) / 0.291625913672 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.501308669571) / 0.283098250537 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.478600307008) / 0.280557763529 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_2 < -1.07389) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 < -0.842321) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -1.07389 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.966399 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_5' AS feature, -0.842321 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.11688 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.64724 AS "Estimator") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"XGB_Tree_0" AS 
(SELECT "DT_Output"."KEY" AS join_key_0, "DT_Output"."Estimator" AS "Estimator_0" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 < -0.903872) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 < -1.21962) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.903872 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.891768 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_3' AS feature, -1.21962 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.966726 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.47379 AS "Estimator") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"XGB_Tree_1" AS 
(SELECT "DT_Output_1"."KEY" AS join_key_1, "DT_Output_1"."Estimator" AS "Estimator_1" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_2 < -1.07389) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 < -0.842321) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -1.07389 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.76043 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_5' AS feature, -0.842321 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.926201 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.35141 AS "Estimator") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"XGB_Tree_2" AS 
(SELECT "DT_Output_2"."KEY" AS join_key_2, "DT_Output_2"."Estimator" AS "Estimator_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_2 < -1.07389) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 < -0.842321) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -1.07389 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.689456 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_5' AS feature, -0.842321 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.840197 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.21957 AS "Estimator") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"XGB_Tree_3" AS 
(SELECT "DT_Output_3"."KEY" AS join_key_3, "DT_Output_3"."Estimator" AS "Estimator_3" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 < 0.387758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 < -0.453424) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_4" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, 0.387758 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_2' AS feature, -0.453424 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.1318 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.479789 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.885984 AS "Estimator") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".node_id AS node_id, "DT_node_data_4".feature AS feature, "DT_node_data_4".threshold AS threshold, "DT_node_data_4".depth AS depth, "DT_node_data_4".parent_id AS parent_id, "DT_node_data_4"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".node_id), 
"XGB_Tree_4" AS 
(SELECT "DT_Output_4"."KEY" AS join_key_4, "DT_Output_4"."Estimator" AS "Estimator_4" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_2 < -1.07389) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 < -0.270453) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 < -0.312137) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_5" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -1.07389 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5499 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_3' AS feature, -0.270453 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.739512 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'scaler_5' AS feature, -0.312137 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.774699 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 1.15953 AS "Estimator") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".node_id AS node_id, "DT_node_data_5".feature AS feature, "DT_node_data_5".threshold AS threshold, "DT_node_data_5".depth AS depth, "DT_node_data_5".parent_id AS parent_id, "DT_node_data_5"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".node_id), 
"XGB_Tree_5" AS 
(SELECT "DT_Output_5"."KEY" AS join_key_5, "DT_Output_5"."Estimator" AS "Estimator_5" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 < 0.387758) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 < -0.453424) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 < 0.212492) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_6" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, 0.387758 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_2' AS feature, -0.453424 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.936019 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.376551 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'scaler_6' AS feature, 0.212492 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.576808 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.890408 AS "Estimator") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".node_id AS node_id, "DT_node_data_6".feature AS feature, "DT_node_data_6".threshold AS threshold, "DT_node_data_6".depth AS depth, "DT_node_data_6".parent_id AS parent_id, "DT_node_data_6"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".node_id), 
"XGB_Tree_6" AS 
(SELECT "DT_Output_6"."KEY" AS join_key_6, "DT_Output_6"."Estimator" AS "Estimator_6" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_2 < -1.07389) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 < -0.270453) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 < -0.312137) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_7" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_2' AS feature, -1.07389 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.437322 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_3' AS feature, -0.270453 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.594093 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'scaler_5' AS feature, -0.312137 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.646308 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.966686 AS "Estimator") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".node_id AS node_id, "DT_node_data_7".feature AS feature, "DT_node_data_7".threshold AS threshold, "DT_node_data_7".depth AS depth, "DT_node_data_7".parent_id AS parent_id, "DT_node_data_7"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".node_id), 
"XGB_Tree_7" AS 
(SELECT "DT_Output_7"."KEY" AS join_key_7, "DT_Output_7"."Estimator" AS "Estimator_7" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 < -0.903872) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 < -1.21962) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 < -0.201127) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_8" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.903872 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.394916 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_3' AS feature, -1.21962 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.403432 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'scaler_11' AS feature, -0.201127 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.621128 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.865932 AS "Estimator") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".node_id AS node_id, "DT_node_data_8".feature AS feature, "DT_node_data_8".threshold AS threshold, "DT_node_data_8".depth AS depth, "DT_node_data_8".parent_id AS parent_id, "DT_node_data_8"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".node_id), 
"XGB_Tree_8" AS 
(SELECT "DT_Output_8"."KEY" AS join_key_8, "DT_Output_8"."Estimator" AS "Estimator_8" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_4 < -0.828971) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_5 < -1.0872) THEN 3 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 < -0.871316) THEN 5 ELSE 6 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_9" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_4' AS feature, -0.828971 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.790816 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_5' AS feature, -1.0872 AS threshold, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.298085 AS "Estimator" UNION ALL SELECT 4 AS node_id, 'scaler_6' AS feature, -0.871316 AS threshold, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.356236 AS "Estimator" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.611195 AS "Estimator") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".node_id AS node_id, "DT_node_data_9".feature AS feature, "DT_node_data_9".threshold AS threshold, "DT_node_data_9".depth AS depth, "DT_node_data_9".parent_id AS parent_id, "DT_node_data_9"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".node_id), 
"XGB_Tree_9" AS 
(SELECT "DT_Output_9"."KEY" AS join_key_9, "DT_Output_9"."Estimator" AS "Estimator_9" 
FROM "DT_Output_9"), 
"XGB_Join_CTE" AS 
(SELECT "XGB_Tree_0".join_key_0 AS join_key_0, "XGB_Tree_0"."Estimator_0" AS "Estimator_0", "XGB_Tree_1".join_key_1 AS join_key_1, "XGB_Tree_1"."Estimator_1" AS "Estimator_1", "XGB_Tree_2".join_key_2 AS join_key_2, "XGB_Tree_2"."Estimator_2" AS "Estimator_2", "XGB_Tree_3".join_key_3 AS join_key_3, "XGB_Tree_3"."Estimator_3" AS "Estimator_3", "XGB_Tree_4".join_key_4 AS join_key_4, "XGB_Tree_4"."Estimator_4" AS "Estimator_4", "XGB_Tree_5".join_key_5 AS join_key_5, "XGB_Tree_5"."Estimator_5" AS "Estimator_5", "XGB_Tree_6".join_key_6 AS join_key_6, "XGB_Tree_6"."Estimator_6" AS "Estimator_6", "XGB_Tree_7".join_key_7 AS join_key_7, "XGB_Tree_7"."Estimator_7" AS "Estimator_7", "XGB_Tree_8".join_key_8 AS join_key_8, "XGB_Tree_8"."Estimator_8" AS "Estimator_8", "XGB_Tree_9".join_key_9 AS join_key_9, "XGB_Tree_9"."Estimator_9" AS "Estimator_9" 
FROM "XGB_Tree_0" LEFT OUTER JOIN "XGB_Tree_1" ON "XGB_Tree_0".join_key_0 = "XGB_Tree_1".join_key_1 LEFT OUTER JOIN "XGB_Tree_2" ON "XGB_Tree_2".join_key_2 = "XGB_Tree_1".join_key_1 LEFT OUTER JOIN "XGB_Tree_3" ON "XGB_Tree_3".join_key_3 = "XGB_Tree_2".join_key_2 LEFT OUTER JOIN "XGB_Tree_4" ON "XGB_Tree_4".join_key_4 = "XGB_Tree_3".join_key_3 LEFT OUTER JOIN "XGB_Tree_5" ON "XGB_Tree_5".join_key_5 = "XGB_Tree_4".join_key_4 LEFT OUTER JOIN "XGB_Tree_6" ON "XGB_Tree_6".join_key_6 = "XGB_Tree_5".join_key_5 LEFT OUTER JOIN "XGB_Tree_7" ON "XGB_Tree_7".join_key_7 = "XGB_Tree_6".join_key_6 LEFT OUTER JOIN "XGB_Tree_8" ON "XGB_Tree_8".join_key_8 = "XGB_Tree_7".join_key_7 LEFT OUTER JOIN "XGB_Tree_9" ON "XGB_Tree_9".join_key_9 = "XGB_Tree_8".join_key_8), 
"XGB_AVG_Scores" AS 
(SELECT "XGB_Join_CTE".join_key_0 AS "KEY", "XGB_Join_CTE"."Estimator_0" + "XGB_Join_CTE"."Estimator_1" + "XGB_Join_CTE"."Estimator_2" + "XGB_Join_CTE"."Estimator_3" + "XGB_Join_CTE"."Estimator_4" + "XGB_Join_CTE"."Estimator_5" + "XGB_Join_CTE"."Estimator_6" + "XGB_Join_CTE"."Estimator_7" + "XGB_Join_CTE"."Estimator_8" + "XGB_Join_CTE"."Estimator_9" + 0.5 AS "Estimator" 
FROM "XGB_Join_CTE")
 SELECT "XGB_AVG_Scores"."KEY" AS "KEY", "XGB_AVG_Scores"."Estimator" AS "Estimator" 
FROM "XGB_AVG_Scores"