-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `RawScores` AS 
(SELECT `ADS`.`KEY` AS `KEY`, NULL AS `LogProba_0`, NULL AS `Proba_0`, -1.04380405217 + (-0.5 * 4.00427606935 - (0.5 * (`ADS`.`Feature_0` - 17.4564) * (`ADS`.`Feature_0` - 17.4564)) / 8.72680220266) + (-0.5 * 4.43321748631 - (0.5 * (`ADS`.`Feature_1` - 21.3484) * (`ADS`.`Feature_1` - 21.3484)) / 13.4011486027) + (-0.5 * 7.8308525419 - (0.5 * (`ADS`.`Feature_2` - 115.671) * (`ADS`.`Feature_2` - 115.671)) / 400.604828163) + (-0.5 * 13.583303588 - (0.5 * (`ADS`.`Feature_3` - 975.146) * (`ADS`.`Feature_3` - 975.146)) / 126175.177951) + (-0.5 * -5.93476694233 - (0.5 * (`ADS`.`Feature_4` - 0.1033466) * (`ADS`.`Feature_4` - 0.1033466)) / 0.000421098405744) + (-0.5 * -4.15931174929 - (0.5 * (`ADS`.`Feature_5` - 0.1506476) * (`ADS`.`Feature_5` - 0.1506476)) / 0.00248573020954) + (-0.5 * -3.57281231853 - (0.5 * (`ADS`.`Feature_6` - 0.1647248) * (`ADS`.`Feature_6` - 0.1647248)) / 0.00446855859226) + (-0.5 * -4.94983927053 - (0.5 * (`ADS`.`Feature_7` - 0.0901128) * (`ADS`.`Feature_7` - 0.0901128)) / 0.00112754075946) + (-0.5 * -5.17334750072 - (0.5 * (`ADS`.`Feature_8` - 0.191912) * (`ADS`.`Feature_8` - 0.191912)) / 0.000901703715304) + (-0.5 * -6.23837423536 - (0.5 * (`ADS`.`Feature_9` - 0.0634402) * (`ADS`.`Feature_9` - 0.0634402)) / 0.000310834077264) + (-0.5 * 0.0898145397202 - (0.5 * (`ADS`.`Feature_10` - 0.661792) * (`ADS`.`Feature_10` - 0.661792)) / 0.174110952195) + (-0.5 * 0.347386993026 - (0.5 * (`ADS`.`Feature_11` - 1.2484) * (`ADS`.`Feature_11` - 1.2484)) / 0.225262233459) + (-0.5 * 4.15874508865 - (0.5 * (`ADS`.`Feature_12` - 4.90052) * (`ADS`.`Feature_12` - 4.90052)) / 10.1845108523) + (-0.5 * 10.4575609065 - (0.5 * (`ADS`.`Feature_13` - 79.7336) * (`ADS`.`Feature_13` - 79.7336)) / 5539.6347062) + (-0.5 * -6.37159998489 - (0.5 * (`ADS`.`Feature_14` - 0.00711586) * (`ADS`.`Feature_14` - 0.00711586)) / 0.000272062959065) + (-0.5 * -5.68805143317 - (0.5 * (`ADS`.`Feature_15` - 0.0354665) * (`ADS`.`Feature_15` - 0.0354665)) / 0.000538928041554) + (-0.5 * -5.59260241061 - (0.5 * (`ADS`.`Feature_16` - 0.044337) * (`ADS`.`Feature_16` - 0.044337)) / 0.000592903160304) + (-0.5 * -6.3020237249 - (0.5 * (`ADS`.`Feature_17` - 0.01597364) * (`ADS`.`Feature_17` - 0.01597364)) / 0.000291666132615) + (-0.5 * -6.12687923333 - (0.5 * (`ADS`.`Feature_18` - 0.0219458) * (`ADS`.`Feature_18` - 0.0219458)) / 0.000347496383664) + (-0.5 * -6.37923950354 - (0.5 * (`ADS`.`Feature_19` - 0.00428362) * (`ADS`.`Feature_19` - 0.00428362)) / 0.00026999244794) + (-0.5 * 4.42599760971 - (0.5 * (`ADS`.`Feature_20` - 21.0526) * (`ADS`.`Feature_20` - 21.0526)) / 13.3047424027) + (-0.5 * 5.26901208866 - (0.5 * (`ADS`.`Feature_21` - 28.9478) * (`ADS`.`Feature_21` - 28.9478)) / 30.9117083227) + (-0.5 * 8.34123668197 - (0.5 * (`ADS`.`Feature_22` - 142.516) * (`ADS`.`Feature_22` - 142.516)) / 667.380011163) + (-0.5 * 14.1969353716 - (0.5 * (`ADS`.`Feature_23` - 1397.378) * (`ADS`.`Feature_23` - 1397.378)) / 233061.653583) + (-0.5 * -5.40720108904 - (0.5 * (`ADS`.`Feature_24` - 0.1443884) * (`ADS`.`Feature_24` - 0.1443884)) / 0.000713678372744) + (-0.5 * -1.91630629115 - (0.5 * (`ADS`.`Feature_25` - 0.381038) * (`ADS`.`Feature_25` - 0.381038)) / 0.0234195682153) + (-0.5 * -1.96662864759 - (0.5 * (`ADS`.`Feature_26` - 0.446158) * (`ADS`.`Feature_26` - 0.446158)) / 0.0222702022953) + (-0.5 * -4.35086324423 - (0.5 * (`ADS`.`Feature_27` - 0.1852398) * (`ADS`.`Feature_27` - 0.1852398)) / 0.00205241052526) + (-0.5 * -3.39927341421 - (0.5 * (`ADS`.`Feature_28` - 0.31967) * (`ADS`.`Feature_28` - 0.31967)) / 0.0053153815593) + (-0.5 * -5.68914957993 - (0.5 * (`ADS`.`Feature_29` - 0.090271) * (`ADS`.`Feature_29` - 0.090271)) / 0.000538336544304) AS `Score_0`, NULL AS `LogProba_1`, NULL AS `Proba_1`, -0.434038480552 + (-0.5 * 2.9726822584 - (0.5 * (`ADS`.`Feature_0` - 11.9051086957) * (`ADS`.`Feature_0` - 11.9051086957)) / 3.11056752041) + (-0.5 * 4.84434950067 - (0.5 * (`ADS`.`Feature_1` - 18.5077173913) * (`ADS`.`Feature_1` - 18.5077173913)) / 20.2159608654) + (-0.5 * 6.75264198163 - (0.5 * (`ADS`.`Feature_2` - 76.4104347826) * (`ADS`.`Feature_2` - 76.4104347826)) / 136.287266974) + (-0.5 * 11.5168526824 - (0.5 * (`ADS`.`Feature_3` - 444.798913043) * (`ADS`.`Feature_3` - 444.798913043)) / 15978.1208095) + (-0.5 * -5.9243581531 - (0.5 * (`ADS`.`Feature_4` - 0.090490326087) * (`ADS`.`Feature_4` - 0.090490326087)) / 0.000425504421154) + (-0.5 * -4.82506621033 - (0.5 * (`ADS`.`Feature_5` - 0.0772093478261) * (`ADS`.`Feature_5` - 0.0772093478261)) / 0.00127738114584) + (-0.5 * -4.5156820723 - (0.5 * (`ADS`.`Feature_6` - 0.0439754673913) * (`ADS`.`Feature_6` - 0.0439754673913)) / 0.00174054127123) + (-0.5 * -5.74186612824 - (0.5 * (`ADS`.`Feature_7` - 0.0233674782609) * (`ADS`.`Feature_7` - 0.0233674782609)) / 0.000510692354706) + (-0.5 * -5.06359866282 - (0.5 * (`ADS`.`Feature_8` - 0.175035869565) * (`ADS`.`Feature_8` - 0.175035869565)) / 0.00100629930746) + (-0.5 * -6.24694061282 - (0.5 * (`ADS`.`Feature_9` - 0.063000326087) * (`ADS`.`Feature_9` - 0.063000326087)) / 0.000308182727676) + (-0.5 * -2.54472507847 - (0.5 * (`ADS`.`Feature_10` - 0.27674673913) * (`ADS`.`Feature_10` - 0.27674673913)) / 0.0124928081921) + (-0.5 * 0.773605144424 - (0.5 * (`ADS`.`Feature_11` - 1.28395326087) * (`ADS`.`Feature_11` - 1.28395326087)) / 0.344978934931) + (-0.5 * 1.41003088911 - (0.5 * (`ADS`.`Feature_12` - 1.94130434783) * (`ADS`.`Feature_12` - 1.94130434783)) / 0.651911685901) + (-0.5 * 6.05249380812 - (0.5 * (`ADS`.`Feature_13` - 20.2935869565) * (`ADS`.`Feature_13` - 20.2935869565)) / 67.6682264921) + (-0.5 * -6.35637996395 - (0.5 * (`ADS`.`Feature_14` - 0.0074737826087) * (`ADS`.`Feature_14` - 0.0074737826087)) / 0.00027623543504) + (-0.5 * -5.72443548747 - (0.5 * (`ADS`.`Feature_15` - 0.0216148152174) * (`ADS`.`Feature_15` - 0.0216148152174)) / 0.000519672083542) + (-0.5 * -5.17307052834 - (0.5 * (`ADS`.`Feature_16` - 0.0259210326087) * (`ADS`.`Feature_16` - 0.0259210326087)) / 0.000901953496923) + (-0.5 * -6.25529396195 - (0.5 * (`ADS`.`Feature_17` - 0.00964866304348) * (`ADS`.`Feature_17` - 0.00964866304348)) / 0.000305619092136) + (-0.5 * -6.21684619763 - (0.5 * (`ADS`.`Feature_18` - 0.0210275) * (`ADS`.`Feature_18` - 0.0210275)) / 0.000317598273706) + (-0.5 * -6.37390152849 - (0.5 * (`ADS`.`Feature_19` - 0.00372737282609) * (`ADS`.`Feature_19` - 0.00372737282609)) / 0.000271437514325) + (-0.5 * 3.15910128359 - (0.5 * (`ADS`.`Feature_20` - 13.0716086957) * (`ADS`.`Feature_20` - 13.0716086957)) / 3.74800694432) + (-0.5 * 5.39632518396 - (0.5 * (`ADS`.`Feature_21` - 24.105326087) * (`ADS`.`Feature_21` - 24.105326087)) / 35.1086703172) + (-0.5 * 6.99487438121 - (0.5 * (`ADS`.`Feature_22` - 84.7754347826) * (`ADS`.`Feature_22` - 84.7754347826)) / 173.64227893) + (-0.5 * 11.8881153081 - (0.5 * (`ADS`.`Feature_23` - 533.897826087) * (`ADS`.`Feature_23` - 533.897826087)) / 23161.3041755) + (-0.5 * -5.51767922761 - (0.5 * (`ADS`.`Feature_24` - 0.12240326087) * (`ADS`.`Feature_24` - 0.12240326087)) / 0.000639031829106) + (-0.5 * -2.91677949509 - (0.5 * (`ADS`.`Feature_25` - 0.176279347826) * (`ADS`.`Feature_25` - 0.176279347826)) / 0.0086115017067) + (-0.5 * -2.28641853288 - (0.5 * (`ADS`.`Feature_26` - 0.157454641304) * (`ADS`.`Feature_26` - 0.157454641304)) / 0.0161748841761) + (-0.5 * -4.59425405777 - (0.5 * (`ADS`.`Feature_27` - 0.0683734673913) * (`ADS`.`Feature_27` - 0.0683734673913)) / 0.00160901816055) + (-0.5 * -4.31594011754 - (0.5 * (`ADS`.`Feature_28` - 0.268854347826) * (`ADS`.`Feature_28` - 0.268854347826)) / 0.00212535340127) + (-0.5 * -5.84048860157 - (0.5 * (`ADS`.`Feature_29` - 0.0800898913043) * (`ADS`.`Feature_29` - 0.0800898913043)) / 0.000462730536466) AS `Score_1` 
FROM `BreastCancer` AS `ADS`), 
orig_cte AS 
(SELECT `RawScores`.`KEY` AS `KEY`, `RawScores`.`Score_0` AS `Score_0`, `RawScores`.`Score_1` AS `Score_1`, `RawScores`.`Proba_0` AS `Proba_0`, `RawScores`.`Proba_1` AS `Proba_1`, `RawScores`.`LogProba_0` AS `LogProba_0`, `RawScores`.`LogProba_1` AS `LogProba_1`, NULL AS `Decision` 
FROM `RawScores`), 
score_class_union AS 
(SELECT scu.`KEY_u` AS `KEY_u`, scu.class AS class, scu.`LogProba` AS `LogProba`, scu.`Proba` AS `Proba`, scu.`Score` AS `Score` 
FROM (SELECT orig_cte.`KEY` AS `KEY_u`, 0 AS class, orig_cte.`LogProba_0` AS `LogProba`, orig_cte.`Proba_0` AS `Proba`, orig_cte.`Score_0` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY_u`, 1 AS class, orig_cte.`LogProba_1` AS `LogProba`, orig_cte.`Proba_1` AS `Proba`, orig_cte.`Score_1` AS `Score` 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.`KEY` AS `KEY`, orig_cte.`Score_0` AS `Score_0`, orig_cte.`Score_1` AS `Score_1`, orig_cte.`Proba_0` AS `Proba_0`, orig_cte.`Proba_1` AS `Proba_1`, orig_cte.`LogProba_0` AS `LogProba_0`, orig_cte.`LogProba_1` AS `LogProba_1`, orig_cte.`Decision` AS `Decision`, max_select.`KEY_m` AS `KEY_m`, max_select.`max_LogProba` AS `max_LogProba`, max_select.`max_Proba` AS `max_Proba`, max_select.`max_Score` AS `max_Score` 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.`KEY_u` AS `KEY_m`, max(score_class_union.`LogProba`) AS `max_LogProba`, max(score_class_union.`Proba`) AS `max_Proba`, max(score_class_union.`Score`) AS `max_Score` 
FROM score_class_union GROUP BY score_class_union.`KEY_u`) AS max_select ON orig_cte.`KEY` = max_select.`KEY_m`), 
score_soft_max_deltas AS 
(SELECT score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`Decision` AS `Decision`, score_max.`KEY_m` AS `KEY_m`, score_max.`max_LogProba` AS `max_LogProba`, score_max.`max_Proba` AS `max_Proba`, score_max.`max_Score` AS `max_Score`, exp(score_max.`Score_0` - score_max.`max_Score`) AS `exp_delta_Score_0`, exp(score_max.`Score_1` - score_max.`max_Score`) AS `exp_delta_Score_1` 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.`KEY` AS `KEY`, soft_scu.class AS class, soft_scu.`exp_delta_Score` AS `exp_delta_Score` 
FROM (SELECT score_soft_max_deltas.`KEY` AS `KEY`, 0 AS class, score_soft_max_deltas.`exp_delta_Score_0` AS `exp_delta_Score` 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.`KEY` AS `KEY`, 1 AS class, score_soft_max_deltas.`exp_delta_Score_1` AS `exp_delta_Score` 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas.`KEY` AS `KEY`, score_soft_max_deltas.`Score_0` AS `Score_0`, score_soft_max_deltas.`Score_1` AS `Score_1`, score_soft_max_deltas.`Proba_0` AS `Proba_0`, score_soft_max_deltas.`Proba_1` AS `Proba_1`, score_soft_max_deltas.`LogProba_0` AS `LogProba_0`, score_soft_max_deltas.`LogProba_1` AS `LogProba_1`, score_soft_max_deltas.`Decision` AS `Decision`, score_soft_max_deltas.`KEY_m` AS `KEY_m`, score_soft_max_deltas.`max_LogProba` AS `max_LogProba`, score_soft_max_deltas.`max_Proba` AS `max_Proba`, score_soft_max_deltas.`max_Score` AS `max_Score`, score_soft_max_deltas.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max_deltas.`exp_delta_Score_1` AS `exp_delta_Score_1`, sum_exp_t.`KEY_sum` AS `KEY_sum`, sum_exp_t.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore` 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft.`KEY` AS `KEY_sum`, sum(score_class_union_soft.`exp_delta_Score`) AS `sum_ExpDeltaScore` 
FROM score_class_union_soft GROUP BY score_class_union_soft.`KEY`) AS sum_exp_t ON score_soft_max_deltas.`KEY` = sum_exp_t.`KEY_sum`), 
union_with_max AS 
(SELECT score_class_union.`KEY_u` AS `KEY_u`, score_class_union.class AS class, score_class_union.`LogProba` AS `LogProba`, score_class_union.`Proba` AS `Proba`, score_class_union.`Score` AS `Score`, score_soft_max.`KEY` AS `KEY`, score_soft_max.`Score_0` AS `Score_0`, score_soft_max.`Score_1` AS `Score_1`, score_soft_max.`Proba_0` AS `Proba_0`, score_soft_max.`Proba_1` AS `Proba_1`, score_soft_max.`LogProba_0` AS `LogProba_0`, score_soft_max.`LogProba_1` AS `LogProba_1`, score_soft_max.`Decision` AS `Decision`, score_soft_max.`KEY_m` AS `KEY_m`, score_soft_max.`max_LogProba` AS `max_LogProba`, score_soft_max.`max_Proba` AS `max_Proba`, score_soft_max.`max_Score` AS `max_Score`, score_soft_max.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max.`KEY_sum` AS `KEY_sum`, score_soft_max.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore` 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union.`KEY_u` = score_soft_max.`KEY`), 
arg_max_cte AS 
(SELECT score_soft_max.`KEY` AS `KEY`, score_soft_max.`Score_0` AS `Score_0`, score_soft_max.`Score_1` AS `Score_1`, score_soft_max.`Proba_0` AS `Proba_0`, score_soft_max.`Proba_1` AS `Proba_1`, score_soft_max.`LogProba_0` AS `LogProba_0`, score_soft_max.`LogProba_1` AS `LogProba_1`, score_soft_max.`Decision` AS `Decision`, score_soft_max.`KEY_m` AS `KEY_m`, score_soft_max.`max_LogProba` AS `max_LogProba`, score_soft_max.`max_Proba` AS `max_Proba`, score_soft_max.`max_Score` AS `max_Score`, score_soft_max.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max.`KEY_sum` AS `KEY_sum`, score_soft_max.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore`, `arg_max_t_Score`.`KEY_Score` AS `KEY_Score`, `arg_max_t_Score`.`arg_max_Score` AS `arg_max_Score`, soft_max_comp.`KEY_softmax` AS `KEY_softmax`, soft_max_comp.`SoftProba_0` AS `SoftProba_0`, soft_max_comp.`SoftProba_1` AS `SoftProba_1` 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max.`KEY` AS `KEY_Score`, min(union_with_max.class) AS `arg_max_Score` 
FROM union_with_max 
WHERE union_with_max.`max_Score` = union_with_max.`Score` GROUP BY union_with_max.`KEY`) AS `arg_max_t_Score` ON score_soft_max.`KEY` = `arg_max_t_Score`.`KEY_Score` LEFT OUTER JOIN (SELECT score_soft_max.`KEY` AS `KEY_softmax`, score_soft_max.`exp_delta_Score_0` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_0`, score_soft_max.`exp_delta_Score_1` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_1` 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp.`KEY_softmax` = `arg_max_t_Score`.`KEY_Score`)
 SELECT arg_max_cte.`KEY` AS `KEY`, NULL AS `Score_0`, NULL AS `Score_1`, arg_max_cte.`SoftProba_0` AS `Proba_0`, arg_max_cte.`SoftProba_1` AS `Proba_1`, CASE WHEN (arg_max_cte.`SoftProba_0` IS NULL OR arg_max_cte.`SoftProba_0` > 0.0) THEN ln(arg_max_cte.`SoftProba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (arg_max_cte.`SoftProba_1` IS NULL OR arg_max_cte.`SoftProba_1` > 0.0) THEN ln(arg_max_cte.`SoftProba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, arg_max_cte.`arg_max_Score` AS `Decision` 
FROM arg_max_cte