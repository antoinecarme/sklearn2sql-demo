-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.00587058434841 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.206310474688 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.0555958221574 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.0384701934716 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.429944388318 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN 0.204565353815 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN 0.40838482592 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.0127764293619 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.21646556202 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN -0.052903813543 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [BinaryClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - 0.00587058434841) / 1.36610141231 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.206310474688) / 0.924614068395 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.0555958221574) / 1.27201752306 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.0384701934716) / 1.11679928013 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.429944388318) / 1.02812853106 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - 0.204565353815) / 1.42979903307 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - 0.40838482592) / 1.06633430275 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.0127764293619) / 0.54624498456 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.21646556202) / 1.03979793567 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - -0.052903813543) / 1.44168001857 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[RawScores] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Proba_0], -0.446287102628 + (-0.5 * 0.569130782098 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - 0.551871130075) * ([ADS_sca_2_OUT].scaler_2 - 0.551871130075)) / 0.281183925587) + (-0.5 * 1.65769073073 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - -0.21124214048) * ([ADS_sca_2_OUT].scaler_3 - -0.21124214048)) / 0.835114585273) + (-0.5 * 1.20055444297 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - 0.0672599225526) * ([ADS_sca_2_OUT].scaler_4 - 0.0672599225526)) / 0.528706076012) + (-0.5 * 1.89502206708 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - -0.122585542965) * ([ADS_sca_2_OUT].scaler_5 - -0.122585542965)) / 1.05880932732) + (-0.5 * 1.93242342674 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - -0.0540624111578) * ([ADS_sca_2_OUT].scaler_6 - -0.0540624111578)) / 1.09916011937) + (-0.5 * 1.77704154617 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - -0.0608926963577) * ([ADS_sca_2_OUT].scaler_7 - -0.0608926963577)) / 0.940977998888) + (-0.5 * 1.47650763749 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - 0.274691429666) * ([ADS_sca_2_OUT].scaler_8 - 0.274691429666)) / 0.696721561822) + (-0.5 * 0.205061884373 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - 0.539830735938) * ([ADS_sca_2_OUT].scaler_9 - 0.539830735938)) / 0.195378772377) + (-0.5 * 1.25245878268 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - -0.279063007212) * ([ADS_sca_2_OUT].scaler_10 - -0.279063007212)) / 0.556872882223) + (-0.5 * -0.0458665574315 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - -0.525401284803) * ([ADS_sca_2_OUT].scaler_11 - -0.525401284803)) / 0.15201993372) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Proba_1], -1.02165124753 + (-0.5 * 1.58154718103 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - -0.981104231245) * ([ADS_sca_2_OUT].scaler_2 - -0.981104231245)) / 0.773886632794) + (-0.5 * 1.90811923499 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - 0.375541583076) * ([ADS_sca_2_OUT].scaler_3 - 0.375541583076)) / 1.07276794049) + (-0.5 * 2.43424659 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - -0.119573195649) * ([ADS_sca_2_OUT].scaler_4 - -0.119573195649)) / 1.81551563465) + (-0.5 * 1.6409391492 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - 0.217929854159) * ([ADS_sca_2_OUT].scaler_5 - 0.217929854159)) / 0.821241616699) + (-0.5 * 1.62626927281 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - 0.0961109531694) * ([ADS_sca_2_OUT].scaler_6 - 0.0961109531694)) / 0.809282040926) + (-0.5 * 1.92094653011 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - 0.108253682414) * ([ADS_sca_2_OUT].scaler_7 - 0.108253682414)) / 1.08661728639) + (-0.5 * 1.99192131422 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - -0.488340319406) * ([ADS_sca_2_OUT].scaler_8 - -0.488340319406)) / 1.16654250259) + (-0.5 * 1.82917969464 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - -0.959699086112) * ([ADS_sca_2_OUT].scaler_9 - -0.959699086112)) / 0.991340340956) + (-0.5 * 2.1766380433 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - 0.496112012821) * ([ADS_sca_2_OUT].scaler_10 - 0.496112012821)) / 1.40320790602) + (-0.5 * 1.97269417564 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - 0.934046728539) * ([ADS_sca_2_OUT].scaler_11 - 0.934046728539)) / 1.14432747827) AS [Score_1] 
FROM [ADS_sca_2_OUT]), 
orig_cte AS 
(SELECT [RawScores].[KEY] AS [KEY], [RawScores].[Score_0] AS [Score_0], [RawScores].[Score_1] AS [Score_1], [RawScores].[Proba_0] AS [Proba_0], [RawScores].[Proba_1] AS [Proba_1], [RawScores].[LogProba_0] AS [LogProba_0], [RawScores].[LogProba_1] AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RawScores]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[Decision] AS [Decision], max_select.[KEY_m] AS [KEY_m], max_select.[max_LogProba] AS [max_LogProba], max_select.[max_Proba] AS [max_Proba], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[LogProba]) AS [max_LogProba], max(score_class_union.[Proba]) AS [max_Proba], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
score_soft_max_deltas AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[KEY_m] AS [KEY_m], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_deltas.[KEY] AS [KEY], 0 AS class, score_soft_max_deltas.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 1 AS class, score_soft_max_deltas.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas.[KEY] AS [KEY], score_soft_max_deltas.[Score_0] AS [Score_0], score_soft_max_deltas.[Score_1] AS [Score_1], score_soft_max_deltas.[Proba_0] AS [Proba_0], score_soft_max_deltas.[Proba_1] AS [Proba_1], score_soft_max_deltas.[LogProba_0] AS [LogProba_0], score_soft_max_deltas.[LogProba_1] AS [LogProba_1], score_soft_max_deltas.[Decision] AS [Decision], score_soft_max_deltas.[KEY_m] AS [KEY_m], score_soft_max_deltas.[max_LogProba] AS [max_LogProba], score_soft_max_deltas.[max_Proba] AS [max_Proba], score_soft_max_deltas.[max_Score] AS [max_Score], score_soft_max_deltas.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_deltas.[exp_delta_Score_1] AS [exp_delta_Score_1], sum_exp_t.[KEY_sum] AS [KEY_sum], sum_exp_t.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore] 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft.[KEY] AS [KEY_sum], sum(score_class_union_soft.[exp_delta_Score]) AS [sum_ExpDeltaScore] 
FROM score_class_union_soft GROUP BY score_class_union_soft.[KEY]) AS sum_exp_t ON score_soft_max_deltas.[KEY] = sum_exp_t.[KEY_sum]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[Decision] AS [Decision], score_soft_max.[KEY_m] AS [KEY_m], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[KEY_sum] AS [KEY_sum], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore] 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union.[KEY_u] = score_soft_max.[KEY]), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[Decision] AS [Decision], score_soft_max.[KEY_m] AS [KEY_m], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[KEY_sum] AS [KEY_sum], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score], soft_max_comp.[KEY_softmax] AS [KEY_softmax], soft_max_comp.[SoftProba_0] AS [SoftProba_0], soft_max_comp.[SoftProba_1] AS [SoftProba_1] 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] = union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_soft_max.[KEY] = [arg_max_t_Score].[KEY_Score] LEFT OUTER JOIN (SELECT score_soft_max.[KEY] AS [KEY_softmax], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1] 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp.[KEY_softmax] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte