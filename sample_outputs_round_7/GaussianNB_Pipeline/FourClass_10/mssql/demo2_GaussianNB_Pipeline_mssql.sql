-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.0166601472776 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.516272913818 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.045854831728 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.393876252945 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.480683431081 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.0754525765206 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.116142518808 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN -0.397193027446 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.289223217606 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.0715919221158 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.0166601472776) / 1.04538177897 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.516272913818) / 1.31450310589 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.045854831728) / 1.56219218195 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.393876252945) / 2.3960998534 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.480683431081) / 1.20344059845 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.0754525765206) / 0.838068867257 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.116142518808) / 1.05306709377 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - -0.397193027446) / 1.78314721805 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.289223217606) / 0.92879323246 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.0715919221158) / 0.976280049427 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[RawScores] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [Proba_0], -1.42711635564 + (-0.5 * 2.6677674214 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - 0.472946630326) * ([ADS_sca_2_OUT].scaler_2 - 0.472946630326)) / 2.29306730309) + (-0.5 * 0.690075506659 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - -0.495837950943) * ([ADS_sca_2_OUT].scaler_3 - -0.495837950943)) / 0.317333642133) + (-0.5 * 0.710969855368 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - 0.00314278045377) * ([ADS_sca_2_OUT].scaler_4 - 0.00314278045377)) / 0.324033876667) + (-0.5 * 0.132943654449 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - -0.248549412286) * ([ADS_sca_2_OUT].scaler_5 - -0.248549412286)) / 0.181784490445) + (-0.5 * 0.655867892416 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - 1.02150393813) * ([ADS_sca_2_OUT].scaler_6 - 1.02150393813)) / 0.306661981944) + (-0.5 * 0.118808620002 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - -0.20870658527) * ([ADS_sca_2_OUT].scaler_7 - -0.20870658527)) / 0.179233035345) + (-0.5 * 0.589166884595 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - 0.216246713127) * ([ADS_sca_2_OUT].scaler_8 - 0.216246713127)) / 0.286874574379) + (-0.5 * 1.83534742413 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - 0.296499694635) * ([ADS_sca_2_OUT].scaler_9 - 0.296499694635)) / 0.997473554571) + (-0.5 * 1.81416469664 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - 0.407428921415) * ([ADS_sca_2_OUT].scaler_10 - 0.407428921415)) / 0.976566559432) + (-0.5 * 2.32447242235 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - 0.057636031799) * ([ADS_sca_2_OUT].scaler_11 - 0.057636031799)) / 1.62676821409) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [Proba_1], -1.60943791243 + (-0.5 * 1.69808623002 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - 0.210694371948) * ([ADS_sca_2_OUT].scaler_2 - 0.210694371948)) / 0.869540092521) + (-0.5 * 1.7021450049 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - 0.197296736749) * ([ADS_sca_2_OUT].scaler_3 - 0.197296736749)) / 0.873076531958) + (-0.5 * 1.58266932598 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - 0.918938454537) * ([ADS_sca_2_OUT].scaler_4 - 0.918938454537)) / 0.774755533199) + (-0.5 * 1.0318454795 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - 0.985273557307) * ([ADS_sca_2_OUT].scaler_5 - 0.985273557307)) / 0.446626954314) + (-0.5 * 1.89473467481 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - -0.207720240129) * ([ADS_sca_2_OUT].scaler_6 - -0.207720240129)) / 1.05850507744) + (-0.5 * 2.07568963205 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - -0.0471173018228) * ([ADS_sca_2_OUT].scaler_7 - -0.0471173018228)) / 1.26847141541) + (-0.5 * 1.14179957084 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - -1.05228848419) * ([ADS_sca_2_OUT].scaler_8 - -1.05228848419)) / 0.498536987086) + (-0.5 * 1.14929896092 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - 0.72190248724) * ([ADS_sca_2_OUT].scaler_9 - 0.72190248724)) / 0.502289764607) + (-0.5 * 2.24632030285 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - -0.283196400576) * ([ADS_sca_2_OUT].scaler_10 - -0.283196400576)) / 1.50447385104) + (-0.5 * 2.06730455606 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - -0.220675410774) * ([ADS_sca_2_OUT].scaler_11 - -0.220675410774)) / 1.25787965462) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Proba_2], -1.42711635564 + (-0.5 * 0.991594002629 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - -0.385781218364) * ([ADS_sca_2_OUT].scaler_2 - -0.385781218364)) / 0.429006562152) + (-0.5 * 0.267771564483 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - -0.896995317834) * ([ADS_sca_2_OUT].scaler_3 - -0.896995317834)) / 0.208023234347) + (-0.5 * 1.08025986631 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - -1.04340077412) * ([ADS_sca_2_OUT].scaler_4 - -1.04340077412)) / 0.468782111225) + (-0.5 * -0.466847206485 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - -1.29353292861) * ([ADS_sca_2_OUT].scaler_5 - -1.29353292861)) / 0.0997863106515) + (-0.5 * 1.96843322679 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - -0.168653303342) * ([ADS_sca_2_OUT].scaler_6 - -0.168653303342)) / 1.13946193072) + (-0.5 * 1.85036887286 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - 0.408208882811) * ([ADS_sca_2_OUT].scaler_7 - 0.408208882811)) / 1.01257015496) + (-0.5 * 0.269277902698 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - 1.2139475593) * ([ADS_sca_2_OUT].scaler_8 - 1.2139475593)) / 0.208336823821) + (-0.5 * 1.87958771449 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - -0.616220451124) * ([ADS_sca_2_OUT].scaler_9 - -0.616220451124)) / 1.04259275889) + (-0.5 * 0.0299725537703 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - 0.10803396339) * ([ADS_sca_2_OUT].scaler_10 - 0.10803396339)) / 0.163997431537) + (-0.5 * 0.739964557625 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - 0.401633546084) * ([ADS_sca_2_OUT].scaler_11 - 0.401633546084)) / 0.333566674929) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Proba_3], -1.13943428319 + (-0.5 * 0.198113200526 - (0.5 * ([ADS_sca_2_OUT].scaler_2 - -0.197058041438) * ([ADS_sca_2_OUT].scaler_2 - -0.197058041438)) / 0.194025853005) + (-0.5 * 1.19222104465 - (0.5 * ([ADS_sca_2_OUT].scaler_3 - 0.921314491115) * ([ADS_sca_2_OUT].scaler_3 - 0.921314491115)) / 0.524318464936) + (-0.5 * 1.42158480429 - (0.5 * ([ADS_sca_2_OUT].scaler_4 - 0.205856961163) * ([ADS_sca_2_OUT].scaler_4 - 0.205856961163)) / 0.659487499104) + (-0.5 * 1.00379227645 - (0.5 * ([ADS_sca_2_OUT].scaler_5 - 0.540765782355) * ([ADS_sca_2_OUT].scaler_5 - 0.540765782355)) / 0.434271749478) + (-0.5 * 0.593183970952 - (0.5 * ([ADS_sca_2_OUT].scaler_6 - -0.509812826009) * ([ADS_sca_2_OUT].scaler_6 - -0.509812826009)) / 0.288029292065) + (-0.5 * 2.07285266417 - (0.5 * ([ADS_sca_2_OUT].scaler_7 - -0.120178409516) * ([ADS_sca_2_OUT].scaler_7 - -0.120178409516)) / 1.26487790251) + (-0.5 * 1.01100797441 - (0.5 * ([ADS_sca_2_OUT].scaler_8 - -0.414965401705) * ([ADS_sca_2_OUT].scaler_8 - -0.414965401705)) / 0.437416655958) + (-0.5 * 1.25785419157 - (0.5 * ([ADS_sca_2_OUT].scaler_9 - -0.211398487159) * ([ADS_sca_2_OUT].scaler_9 - -0.211398487159)) / 0.559885559125) + (-0.5 * 1.93497797437 - (0.5 * ([ADS_sca_2_OUT].scaler_10 - -0.209599413244) * ([ADS_sca_2_OUT].scaler_10 - -0.209599413244)) / 1.10197156572) + (-0.5 * 1.44039471679 - (0.5 * ([ADS_sca_2_OUT].scaler_11 - -0.206530051679) * ([ADS_sca_2_OUT].scaler_11 - -0.206530051679)) / 0.672009803774) AS [Score_3] 
FROM [ADS_sca_2_OUT]), 
orig_cte AS 
(SELECT [RawScores].[KEY] AS [KEY], [RawScores].[Score_0] AS [Score_0], [RawScores].[Score_1] AS [Score_1], [RawScores].[Score_2] AS [Score_2], [RawScores].[Score_3] AS [Score_3], [RawScores].[Proba_0] AS [Proba_0], [RawScores].[Proba_1] AS [Proba_1], [RawScores].[Proba_2] AS [Proba_2], [RawScores].[Proba_3] AS [Proba_3], [RawScores].[LogProba_0] AS [LogProba_0], [RawScores].[LogProba_1] AS [LogProba_1], [RawScores].[LogProba_2] AS [LogProba_2], [RawScores].[LogProba_3] AS [LogProba_3], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [RawScores]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], max_select.[KEY_m] AS [KEY_m], max_select.[max_LogProba] AS [max_LogProba], max_select.[max_Proba] AS [max_Proba], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[LogProba]) AS [max_LogProba], max(score_class_union.[Proba]) AS [max_Proba], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
score_soft_max_deltas AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[KEY_m] AS [KEY_m], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_deltas.[KEY] AS [KEY], 0 AS class, score_soft_max_deltas.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 1 AS class, score_soft_max_deltas.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 2 AS class, score_soft_max_deltas.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 3 AS class, score_soft_max_deltas.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas.[KEY] AS [KEY], score_soft_max_deltas.[Score_0] AS [Score_0], score_soft_max_deltas.[Score_1] AS [Score_1], score_soft_max_deltas.[Score_2] AS [Score_2], score_soft_max_deltas.[Score_3] AS [Score_3], score_soft_max_deltas.[Proba_0] AS [Proba_0], score_soft_max_deltas.[Proba_1] AS [Proba_1], score_soft_max_deltas.[Proba_2] AS [Proba_2], score_soft_max_deltas.[Proba_3] AS [Proba_3], score_soft_max_deltas.[LogProba_0] AS [LogProba_0], score_soft_max_deltas.[LogProba_1] AS [LogProba_1], score_soft_max_deltas.[LogProba_2] AS [LogProba_2], score_soft_max_deltas.[LogProba_3] AS [LogProba_3], score_soft_max_deltas.[Decision] AS [Decision], score_soft_max_deltas.[KEY_m] AS [KEY_m], score_soft_max_deltas.[max_LogProba] AS [max_LogProba], score_soft_max_deltas.[max_Proba] AS [max_Proba], score_soft_max_deltas.[max_Score] AS [max_Score], score_soft_max_deltas.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_deltas.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_deltas.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_deltas.[exp_delta_Score_3] AS [exp_delta_Score_3], sum_exp_t.[KEY_sum] AS [KEY_sum], sum_exp_t.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore] 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft.[KEY] AS [KEY_sum], sum(score_class_union_soft.[exp_delta_Score]) AS [sum_ExpDeltaScore] 
FROM score_class_union_soft GROUP BY score_class_union_soft.[KEY]) AS sum_exp_t ON score_soft_max_deltas.[KEY] = sum_exp_t.[KEY_sum]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[KEY_m] AS [KEY_m], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[KEY_sum] AS [KEY_sum], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore] 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union.[KEY_u] = score_soft_max.[KEY]), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[Decision] AS [Decision], score_soft_max.[KEY_m] AS [KEY_m], score_soft_max.[max_LogProba] AS [max_LogProba], score_soft_max.[max_Proba] AS [max_Proba], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[KEY_sum] AS [KEY_sum], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score], soft_max_comp.[KEY_softmax] AS [KEY_softmax], soft_max_comp.[SoftProba_0] AS [SoftProba_0], soft_max_comp.[SoftProba_1] AS [SoftProba_1], soft_max_comp.[SoftProba_2] AS [SoftProba_2], soft_max_comp.[SoftProba_3] AS [SoftProba_3] 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] = union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_soft_max.[KEY] = [arg_max_t_Score].[KEY_Score] LEFT OUTER JOIN (SELECT score_soft_max.[KEY] AS [KEY_softmax], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3] 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp.[KEY_softmax] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT(53)) AS [Score_0], CAST(NULL AS FLOAT(53)) AS [Score_1], CAST(NULL AS FLOAT(53)) AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Score_3], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte