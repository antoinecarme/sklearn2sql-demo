-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", "ADS"."Feature_0" AS "Feature_0", "ADS"."Feature_1" AS "Feature_1", "ADS"."Feature_2" AS "Feature_2", "ADS"."Feature_3" AS "Feature_3", "ADS"."Feature_4" AS "Feature_4", "ADS"."Feature_5" AS "Feature_5", "ADS"."Feature_6" AS "Feature_6", "ADS"."Feature_7" AS "Feature_7", "ADS"."Feature_8" AS "Feature_8", "ADS"."Feature_9" AS "Feature_9", "ADS"."Feature_10" AS "Feature_10", "ADS"."Feature_11" AS "Feature_11", "ADS"."Feature_12" AS "Feature_12", "ADS"."Feature_13" AS "Feature_13", "ADS"."Feature_14" AS "Feature_14", "ADS"."Feature_15" AS "Feature_15", "ADS"."Feature_16" AS "Feature_16", "ADS"."Feature_17" AS "Feature_17", "ADS"."Feature_18" AS "Feature_18", "ADS"."Feature_19" AS "Feature_19", "ADS"."Feature_20" AS "Feature_20", "ADS"."Feature_21" AS "Feature_21", "ADS"."Feature_22" AS "Feature_22", "ADS"."Feature_23" AS "Feature_23", "ADS"."Feature_24" AS "Feature_24", "ADS"."Feature_25" AS "Feature_25", "ADS"."Feature_26" AS "Feature_26", "ADS"."Feature_27" AS "Feature_27", "ADS"."Feature_28" AS "Feature_28", "ADS"."Feature_29" AS "Feature_29" 
FROM "BreastCancer" "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.0619825643189 * "IL"."Feature_0" + -0.272340063608 * "IL"."Feature_1" + -0.337302587744 * "IL"."Feature_2" + -0.377222967767 * "IL"."Feature_3" + 0.160089837845 * "IL"."Feature_4" + 0.331261578375 * "IL"."Feature_5" + -0.168060754309 * "IL"."Feature_6" + -0.0341678541261 * "IL"."Feature_7" + -0.013585543817 * "IL"."Feature_8" + -0.148225617586 * "IL"."Feature_9" + -0.199566582196 * "IL"."Feature_10" + -0.364659857416 * "IL"."Feature_11" + 0.0546967947351 * "IL"."Feature_12" + 0.327512364101 * "IL"."Feature_13" + 0.213299006828 * "IL"."Feature_14" + 0.171956301863 * "IL"."Feature_15" + -0.105823788324 * "IL"."Feature_16" + -0.392136163636 * "IL"."Feature_17" + -0.339278561532 * "IL"."Feature_18" + -0.106163148189 * "IL"."Feature_19" + -0.413590837646 * "IL"."Feature_20" + 0.325176769043 * "IL"."Feature_21" + 0.214457437236 * "IL"."Feature_22" + -0.353817424156 * "IL"."Feature_23" + 0.248174753383 * "IL"."Feature_24" + -0.00754946558945 * "IL"."Feature_25" + 0.226456850099 * "IL"."Feature_26" + 0.00151597477804 * "IL"."Feature_27" + -0.249205563911 * "IL"."Feature_28" + 0.203360539589 * "IL"."Feature_29" + 0.259260350984 AS "NEUR_1_1", 0.0848536709954 * "IL"."Feature_0" + 0.00891669271882 * "IL"."Feature_1" + -0.25114633364 * "IL"."Feature_2" + 0.304206374508 * "IL"."Feature_3" + 0.119101840975 * "IL"."Feature_4" + 0.319479536744 * "IL"."Feature_5" + -0.190426659254 * "IL"."Feature_6" + -0.407355528755 * "IL"."Feature_7" + 0.359472862862 * "IL"."Feature_8" + -0.0602187234632 * "IL"."Feature_9" + -0.260557313567 * "IL"."Feature_10" + -0.073304021571 * "IL"."Feature_11" + -0.306002951176 * "IL"."Feature_12" + 0.228290720457 * "IL"."Feature_13" + 0.0391666831744 * "IL"."Feature_14" + -0.200206616676 * "IL"."Feature_15" + 0.123439089126 * "IL"."Feature_16" + -0.272666186289 * "IL"."Feature_17" + 0.0680982137043 * "IL"."Feature_18" + 0.263594325749 * "IL"."Feature_19" + -0.423421302541 * "IL"."Feature_20" + -0.00324130745883 * "IL"."Feature_21" + -0.298443851127 * "IL"."Feature_22" + 0.0887072682543 * "IL"."Feature_23" + 0.194638931274 * "IL"."Feature_24" + -0.0666474798813 * "IL"."Feature_25" + 0.0916572493072 * "IL"."Feature_26" + 0.250495113359 * "IL"."Feature_27" + -0.0488246290174 * "IL"."Feature_28" + -0.372720367007 * "IL"."Feature_29" + -0.0432375570719 AS "NEUR_1_2", 0.402615153239 * "IL"."Feature_0" + -0.279075519411 * "IL"."Feature_1" + 0.21669276416 * "IL"."Feature_2" + 0.0107388524211 * "IL"."Feature_3" + -0.272902218238 * "IL"."Feature_4" + -0.148073594599 * "IL"."Feature_5" + 0.272651511035 * "IL"."Feature_6" + -0.255491684964 * "IL"."Feature_7" + -0.318058170481 * "IL"."Feature_8" + 0.357095367053 * "IL"."Feature_9" + -0.00514786996012 * "IL"."Feature_10" + 0.00148583043398 * "IL"."Feature_11" + 0.29100959026 * "IL"."Feature_12" + -0.250371939344 * "IL"."Feature_13" + -0.379022996343 * "IL"."Feature_14" + -0.324410373749 * "IL"."Feature_15" + 0.0854066460604 * "IL"."Feature_16" + -0.0423840453416 * "IL"."Feature_17" + 0.298835639987 * "IL"."Feature_18" + -0.04896369471 * "IL"."Feature_19" + -0.137681439268 * "IL"."Feature_20" + 0.193007911121 * "IL"."Feature_21" + -0.435285685187 * "IL"."Feature_22" + 0.176802922185 * "IL"."Feature_23" + 0.414755022681 * "IL"."Feature_24" + 0.0933010176385 * "IL"."Feature_25" + 0.166992663042 * "IL"."Feature_26" + 0.398993430404 * "IL"."Feature_27" + 0.141532250987 * "IL"."Feature_28" + 0.134249298914 * "IL"."Feature_29" + -0.369979079031 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.557001446442 * "HL_1_relu"."NEUR_1_1" + -0.631850812069 * "HL_1_relu"."NEUR_1_2" + -0.602793836737 * "HL_1_relu"."NEUR_1_3" + -0.088584894897 AS "NEUR_2_1", -0.611714366068 * "HL_1_relu"."NEUR_1_1" + -0.780145073636 * "HL_1_relu"."NEUR_1_2" + -0.203528084568 * "HL_1_relu"."NEUR_1_3" + 0.726167810184 AS "NEUR_2_2", 0.318166356065 * "HL_1_relu"."NEUR_1_1" + 0.245207291571 * "HL_1_relu"."NEUR_1_2" + -0.855165671558 * "HL_1_relu"."NEUR_1_3" + 0.56392377333 AS "NEUR_2_3", -0.842189694274 * "HL_1_relu"."NEUR_1_1" + -0.421373473333 * "HL_1_relu"."NEUR_1_2" + 0.200400395829 * "HL_1_relu"."NEUR_1_3" + 0.703310264462 AS "NEUR_2_4", -0.694807940464 * "HL_1_relu"."NEUR_1_1" + -0.269531478313 * "HL_1_relu"."NEUR_1_2" + -0.661736093282 * "HL_1_relu"."NEUR_1_3" + -0.815750113658 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.178018434348 * "HL_2_relu"."NEUR_2_1" + -0.137536142918 * "HL_2_relu"."NEUR_2_2" + 0.811743604111 * "HL_2_relu"."NEUR_2_3" + -0.0154050320456 * "HL_2_relu"."NEUR_2_4" + 0.379375616407 * "HL_2_relu"."NEUR_2_5" + 0.609753147196 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", 1.0 / (1.0 + exp(-"OL_BA"."NEUR_3_1")) AS "NEUR_3_1" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_logistic"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", 1.0 - "OL_logistic"."NEUR_3_1" AS "Proba_0", "OL_logistic"."NEUR_3_1" AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Decision" 
FROM "OL_logistic"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", max_select."KEY_m" AS "KEY_m", max_select."max_LogProba" AS "max_LogProba", max_select."max_Proba" AS "max_Proba", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."LogProba") AS "max_LogProba", max(score_class_union."Proba") AS "max_Proba", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."KEY_m" AS "KEY_m", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."KEY_m" AS "KEY_m", score_max."max_LogProba" AS "max_LogProba", score_max."max_Proba" AS "max_Proba", score_max."max_Score" AS "max_Score", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" = union_with_max."Proba" GROUP BY union_with_max."KEY") "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision" 
FROM arg_max_cte