-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0810083160112 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.269250048034 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.240487763101 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.142604128589 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.183572350866 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.173548954209 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.126298254061 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.360628810671 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.51115301513 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.203356397123 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "RandomReg_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.0810083160112) / 0.90949713658 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - -0.269250048034) / 0.992426738719 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.240487763101) / 0.759956724432 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.142604128589) / 1.0926864622 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.183572350866) / 1.05658801775 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.173548954209) / 0.786365993461 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.126298254061) / 1.3847124245 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.360628810671) / 0.940597350833 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.51115301513) / 1.18193438252 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.203356397123) / 0.6906744839 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_2 AS scaler_2, "ADS_sca_2_OUT".scaler_3 AS scaler_3, "ADS_sca_2_OUT".scaler_4 AS scaler_4, "ADS_sca_2_OUT".scaler_5 AS scaler_5, "ADS_sca_2_OUT".scaler_6 AS scaler_6, "ADS_sca_2_OUT".scaler_7 AS scaler_7, "ADS_sca_2_OUT".scaler_8 AS scaler_8, "ADS_sca_2_OUT".scaler_9 AS scaler_9, "ADS_sca_2_OUT".scaler_10 AS scaler_10, "ADS_sca_2_OUT".scaler_11 AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.263868191385 * "IL".scaler_2 + 23.9587760189 * "IL".scaler_3 + 22.798327114 * "IL".scaler_4 + -10.9989188969 * "IL".scaler_5 + 5.18348170165 * "IL".scaler_6 + 18.8978912048 * "IL".scaler_7 + 9.07937013959 * "IL".scaler_8 + 13.6810121753 * "IL".scaler_9 + 22.2539563557 * "IL".scaler_10 + -9.83239181716 * "IL".scaler_11 + -4.79557736601 AS "NEUR_1_1", -30.4142254352 * "IL".scaler_2 + -55.7286106162 * "IL".scaler_3 + -51.359603269 * "IL".scaler_4 + -29.703434329 * "IL".scaler_5 + -24.1464138114 * "IL".scaler_6 + -82.8417189609 * "IL".scaler_7 + -19.3623470525 * "IL".scaler_8 + -39.6458850521 * "IL".scaler_9 + -113.683078986 * "IL".scaler_10 + -26.8035503733 * "IL".scaler_11 + 45.1451638998 AS "NEUR_1_2", 43.9117476759 * "IL".scaler_2 + 63.6910570955 * "IL".scaler_3 + 50.4633485426 * "IL".scaler_4 + -12.1000395418 * "IL".scaler_5 + 52.3655098488 * "IL".scaler_6 + 55.6384660546 * "IL".scaler_7 + 5.14961624241 * "IL".scaler_8 + 54.2061438782 * "IL".scaler_9 + 71.7795292502 * "IL".scaler_10 + 9.52549686622 * "IL".scaler_11 + 5.80049709276 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.084239918712 * "HL_1_relu"."NEUR_1_1" + -3.35811592704 * "HL_1_relu"."NEUR_1_2" + -4.40970214307 * "HL_1_relu"."NEUR_1_3" + -1.83221200427 AS "NEUR_2_1", 13.9699538305 * "HL_1_relu"."NEUR_1_1" + 60.5575640108 * "HL_1_relu"."NEUR_1_2" + 26.4268988178 * "HL_1_relu"."NEUR_1_3" + -61.2063726394 AS "NEUR_2_2", -12.0832343565 * "HL_1_relu"."NEUR_1_1" + -12.8072128615 * "HL_1_relu"."NEUR_1_2" + -48.7449023006 * "HL_1_relu"."NEUR_1_3" + -10.6416653911 AS "NEUR_2_3", -2.78816541538 * "HL_1_relu"."NEUR_1_1" + -0.504739334474 * "HL_1_relu"."NEUR_1_2" + -0.890157482569 * "HL_1_relu"."NEUR_1_3" + -0.942892015628 AS "NEUR_2_4", 27.3980742691 * "HL_1_relu"."NEUR_1_1" + -21.2074480721 * "HL_1_relu"."NEUR_1_2" + 57.4569752554 * "HL_1_relu"."NEUR_1_3" + 6.00011772036 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -5.41731148449 * "HL_2_relu"."NEUR_2_1" + -0.0183469051132 * "HL_2_relu"."NEUR_2_2" + -12.0446186566 * "HL_2_relu"."NEUR_2_3" + 0.690714057222 * "HL_2_relu"."NEUR_2_4" + 0.0220794633642 * "HL_2_relu"."NEUR_2_5" + 88.1247335502 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"