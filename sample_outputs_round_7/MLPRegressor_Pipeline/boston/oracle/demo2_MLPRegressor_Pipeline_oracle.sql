-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 3.41760984127 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 10.1031746032 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 11.0184920635 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0634920634921 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.559064285714 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 6.29800793651 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 66.1579365079 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 3.82041984127 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 10.5476190476 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 424.571428571 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 18.4182539683 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 351.427301587 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 12.3455555556 ELSE "ADS"."Feature_12" END AS impter_14 
FROM boston "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 3.41760984127) / 6.42585416131 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 10.1031746032) / 21.7677420303 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 11.0184920635) / 6.65396743656 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.0634920634921) / 0.243845896758 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.559064285714) / 0.122487734705 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 6.29800793651) / 0.688204340456 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 66.1579365079) / 28.5095927971 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 3.82041984127) / 1.98176364603 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 10.5476190476) / 8.9598816096 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 424.571428571) / 169.896627234 AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS FLOAT) - 18.4182539683) / 2.05995071576 AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS FLOAT) - 351.427301587) / 103.875515352 AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS FLOAT) - 12.3455555556) / 7.04758818991 AS scaler_14 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_2 AS scaler_2, "ADS_sca_2_OUT".scaler_3 AS scaler_3, "ADS_sca_2_OUT".scaler_4 AS scaler_4, "ADS_sca_2_OUT".scaler_5 AS scaler_5, "ADS_sca_2_OUT".scaler_6 AS scaler_6, "ADS_sca_2_OUT".scaler_7 AS scaler_7, "ADS_sca_2_OUT".scaler_8 AS scaler_8, "ADS_sca_2_OUT".scaler_9 AS scaler_9, "ADS_sca_2_OUT".scaler_10 AS scaler_10, "ADS_sca_2_OUT".scaler_11 AS scaler_11, "ADS_sca_2_OUT".scaler_12 AS scaler_12, "ADS_sca_2_OUT".scaler_13 AS scaler_13, "ADS_sca_2_OUT".scaler_14 AS scaler_14 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -3.21625333348 * "IL".scaler_2 + 0.115757969167 * "IL".scaler_3 + -0.285628142876 * "IL".scaler_4 + -0.0479947113145 * "IL".scaler_5 + 0.0164332879317 * "IL".scaler_6 + 1.1444399204 * "IL".scaler_7 + -0.492957555888 * "IL".scaler_8 + -0.242798383301 * "IL".scaler_9 + -0.0471084005032 * "IL".scaler_10 + -0.348263060848 * "IL".scaler_11 + 0.0666501009069 * "IL".scaler_12 + -0.46323478464 * "IL".scaler_13 + -0.0247130440847 * "IL".scaler_14 + 0.664073123988 AS "NEUR_1_1", -0.89498942433 * "IL".scaler_2 + 0.976309064741 * "IL".scaler_3 + 0.509762547653 * "IL".scaler_4 + -0.465195395373 * "IL".scaler_5 + 0.234420051804 * "IL".scaler_6 + 0.31499214261 * "IL".scaler_7 + -0.697035577942 * "IL".scaler_8 + -2.26193788063 * "IL".scaler_9 + 0.895454027042 * "IL".scaler_10 + 2.27767293558 * "IL".scaler_11 + 0.561319046362 * "IL".scaler_12 + 1.70688149353 * "IL".scaler_13 + -3.63368327946 * "IL".scaler_14 + -3.56787811981 AS "NEUR_1_2", 0.184571906255 * "IL".scaler_2 + -1.34330092594 * "IL".scaler_3 + 1.25589425904 * "IL".scaler_4 + 0.757955429956 * "IL".scaler_5 + -1.62474365503 * "IL".scaler_6 + -0.0812525626539 * "IL".scaler_7 + 0.945636531436 * "IL".scaler_8 + -1.89396644516 * "IL".scaler_9 + 1.63388312001 * "IL".scaler_10 + -2.43533220467 * "IL".scaler_11 + -1.99203249937 * "IL".scaler_12 + -0.191524674705 * "IL".scaler_13 + -0.89311329279 * "IL".scaler_14 + -0.712397528007 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.0231044694767 * "HL_1_relu"."NEUR_1_1" + -0.702800980013 * "HL_1_relu"."NEUR_1_2" + -0.557912565817 * "HL_1_relu"."NEUR_1_3" + -0.522293495068 AS "NEUR_2_1", 1.29826069749 * "HL_1_relu"."NEUR_1_1" + 2.89838459067 * "HL_1_relu"."NEUR_1_2" + 0.0609103298124 * "HL_1_relu"."NEUR_1_3" + 4.20130643175 AS "NEUR_2_2", -1.01572369943 * "HL_1_relu"."NEUR_1_1" + 0.946807609597 * "HL_1_relu"."NEUR_1_2" + -3.30551860082 * "HL_1_relu"."NEUR_1_3" + 0.412269634534 AS "NEUR_2_3", 0.79398692276 * "HL_1_relu"."NEUR_1_1" + 0.385321006272 * "HL_1_relu"."NEUR_1_2" + 0.652424292508 * "HL_1_relu"."NEUR_1_3" + -2.70050260614 AS "NEUR_2_4", -0.450954474247 * "HL_1_relu"."NEUR_1_1" + -0.966818445364 * "HL_1_relu"."NEUR_1_2" + -0.402843701549 * "HL_1_relu"."NEUR_1_3" + -1.01196444366 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -0.220587781522 * "HL_2_relu"."NEUR_2_1" + 2.44136290164 * "HL_2_relu"."NEUR_2_2" + -4.57009756515 * "HL_2_relu"."NEUR_2_3" + 2.14166475824 * "HL_2_relu"."NEUR_2_4" + -0.689662810196 * "HL_2_relu"."NEUR_2_5" + 3.66738442631 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"