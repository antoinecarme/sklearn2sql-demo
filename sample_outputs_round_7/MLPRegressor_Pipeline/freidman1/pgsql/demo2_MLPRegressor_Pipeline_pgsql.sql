-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.571437811354 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.382666238013 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.572691272422 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.49696190088 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.451024542384 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.481756971335 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.500052942379 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.479198857297 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.507387853051 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.628661567941 ELSE "ADS"."Feature_9" END AS impter_11 
FROM freidman1 AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.571437811354) / 0.271926055138 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.382666238013) / 0.24530412971 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.572691272422) / 0.305022968027 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.49696190088) / 0.312889400468 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.451024542384) / 0.24602253009 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.481756971335) / 0.286861434558 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.500052942379) / 0.284593201265 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.479198857297) / 0.318231552426 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.507387853051) / 0.213964399112 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.628661567941) / 0.260134905409 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_2 AS scaler_2, "ADS_sca_2_OUT".scaler_3 AS scaler_3, "ADS_sca_2_OUT".scaler_4 AS scaler_4, "ADS_sca_2_OUT".scaler_5 AS scaler_5, "ADS_sca_2_OUT".scaler_6 AS scaler_6, "ADS_sca_2_OUT".scaler_7 AS scaler_7, "ADS_sca_2_OUT".scaler_8 AS scaler_8, "ADS_sca_2_OUT".scaler_9 AS scaler_9, "ADS_sca_2_OUT".scaler_10 AS scaler_10, "ADS_sca_2_OUT".scaler_11 AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.377214187164 * "IL".scaler_2 + 0.713672047203 * "IL".scaler_3 + -0.58147771397 * "IL".scaler_4 + -0.246534752718 * "IL".scaler_5 + 0.103102209158 * "IL".scaler_6 + 0.935865390819 * "IL".scaler_7 + -1.55264529775 * "IL".scaler_8 + 0.639265577824 * "IL".scaler_9 + 0.947668739047 * "IL".scaler_10 + -0.459921321804 * "IL".scaler_11 + 0.0873722219558 AS "NEUR_1_1", 0.752183037128 * "IL".scaler_2 + 0.235319690473 * "IL".scaler_3 + -0.711750775445 * "IL".scaler_4 + 0.162543684601 * "IL".scaler_5 + -0.751503228627 * "IL".scaler_6 + 0.71637982588 * "IL".scaler_7 + -0.988428581928 * "IL".scaler_8 + -0.855938332105 * "IL".scaler_9 + -0.0119964849844 * "IL".scaler_10 + 0.317152867801 * "IL".scaler_11 + -1.27487166759 AS "NEUR_1_2", 0.368644608853 * "IL".scaler_2 + 1.06158659971 * "IL".scaler_3 + 0.434924707603 * "IL".scaler_4 + 1.57062203217 * "IL".scaler_5 + 0.589580845421 * "IL".scaler_6 + -0.264828849947 * "IL".scaler_7 + 0.720615563906 * "IL".scaler_8 + -0.186960392583 * "IL".scaler_9 + -0.81578771122 * "IL".scaler_10 + -0.103704639589 * "IL".scaler_11 + 2.63767605309 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.765254604414 * "HL_1_relu"."NEUR_1_1" + 0.418648870914 * "HL_1_relu"."NEUR_1_2" + -0.181272843666 * "HL_1_relu"."NEUR_1_3" + -0.294306995968 AS "NEUR_2_1", -0.614456717241 * "HL_1_relu"."NEUR_1_1" + -0.150184728236 * "HL_1_relu"."NEUR_1_2" + -0.876042720732 * "HL_1_relu"."NEUR_1_3" + -1.06207232565 AS "NEUR_2_2", 1.22679182102 * "HL_1_relu"."NEUR_1_1" + 1.2575222533 * "HL_1_relu"."NEUR_1_2" + 1.84503991049 * "HL_1_relu"."NEUR_1_3" + 0.866818199162 AS "NEUR_2_3", 0.111081823811 * "HL_1_relu"."NEUR_1_1" + -0.50470388727 * "HL_1_relu"."NEUR_1_2" + -0.406600449294 * "HL_1_relu"."NEUR_1_3" + -0.796433042434 AS "NEUR_2_4", -0.622107503194 * "HL_1_relu"."NEUR_1_1" + 0.300544933902 * "HL_1_relu"."NEUR_1_2" + -0.658828807597 * "HL_1_relu"."NEUR_1_3" + -0.620601029969 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.190940964037 * "HL_2_relu"."NEUR_2_1" + 0.0771665038869 * "HL_2_relu"."NEUR_2_2" + 1.36939780217 * "HL_2_relu"."NEUR_2_3" + 0.700788041168 * "HL_2_relu"."NEUR_2_4" + -0.169728695727 * "HL_2_relu"."NEUR_2_5" + 3.48741730942 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"