-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 5.72972972973 ELSE [ADS].[Feature_0] END AS imputer_output_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 3.00810810811 ELSE [ADS].[Feature_1] END AS imputer_output_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 3.50540540541 ELSE [ADS].[Feature_2] END AS imputer_output_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 1.04054054054 ELSE [ADS].[Feature_3] END AS imputer_output_5 
FROM iris AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].imputer_output_2 AS FLOAT) - 5.72972972973) / 0.86863199836 AS scaler_output_2, (CAST([ADS_imp_1_OUT].imputer_output_3 AS FLOAT) - 3.00810810811) / 0.481202535534 AS scaler_output_3, (CAST([ADS_imp_1_OUT].imputer_output_4 AS FLOAT) - 3.50540540541) / 1.71068912082 AS scaler_output_4, (CAST([ADS_imp_1_OUT].imputer_output_5 AS FLOAT) - 1.04054054054) / 0.669997765006 AS scaler_output_5 
FROM [ADS_imp_1_OUT]), 
[SV_data_0] AS 
(SELECT [Values].sv_idx AS sv_idx, [Values].dual_coeff AS dual_coeff, [Values].sv_0 AS sv_0, [Values].sv_1 AS sv_1, [Values].sv_2 AS sv_2, [Values].sv_3 AS sv_3 
FROM (SELECT 0 AS sv_idx, 0.584652441098 AS dual_coeff, -1.41570853025 AS sv_0, -1.47153860551 AS sv_1, -1.28919122625 AS sv_2, -1.1052880759 AS sv_3 UNION ALL SELECT 1 AS sv_idx, 0.0 AS dual_coeff, -0.379596572947 AS sv_0, 0.814401136638 AS sv_1, -1.05536732738 AS sv_2, -1.25454230513 AS sv_3) AS [Values]), 
kernel_cte_0 AS 
(SELECT t_1.[KEY] AS [KEY_0], t_1.dot_product AS [Score_0] 
FROM (SELECT full_join_data_sv_1.[KEY] AS [KEY], sum(full_join_data_sv_1.dot_prod1) + -0.83210089605 AS dot_product 
FROM (SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], [SV_data_0].dual_coeff * ([ADS_sca_2_OUT].scaler_output_2 * [SV_data_0].sv_0 + [ADS_sca_2_OUT].scaler_output_3 * [SV_data_0].sv_1 + [ADS_sca_2_OUT].scaler_output_4 * [SV_data_0].sv_2 + [ADS_sca_2_OUT].scaler_output_5 * [SV_data_0].sv_3) AS dot_prod1 
FROM [ADS_sca_2_OUT], [SV_data_0]) AS full_join_data_sv_1 GROUP BY full_join_data_sv_1.[KEY]) AS t_1), 
[SV_data_1] AS 
(SELECT [Values].sv_idx AS sv_idx, [Values].dual_coeff AS dual_coeff, [Values].sv_0 AS sv_0, [Values].sv_1 AS sv_1, [Values].sv_2 AS sv_2, [Values].sv_3 AS sv_3 
FROM (SELECT 0 AS sv_idx, -0.0 AS dual_coeff, 0.196021181112 AS sv_0, 0.398775728974 AS sv_1, 0.756767888941 AS sv_2, 1.13352536251 AS sv_3 UNION ALL SELECT 1 AS sv_idx, -0.0 AS dual_coeff, 1.11700958761 AS sv_0, 0.190963025143 AS sv_1, 0.698311914221 AS sv_2, 0.685762674828 AS sv_3 UNION ALL SELECT 2 AS sv_idx, -0.0 AS dual_coeff, 0.656515384359 AS sv_0, -1.05591319785 AS sv_1, 0.815223863661 AS sv_2, 0.685762674828 AS sv_3 UNION ALL SELECT 3 AS sv_idx, -0.501441920038 AS dual_coeff, -0.840090776194 AS sv_0, -2.09497671701 AS sv_1, -0.00315978241729 AS sv_2, -0.0605084713084 AS sv_3 UNION ALL SELECT 4 AS sv_idx, -0.0 AS dual_coeff, 0.426268282736 AS sv_0, -0.224662382521 AS sv_1, 0.698311914221 AS sv_2, 0.536508445601 AS sv_3 UNION ALL SELECT 5 AS sv_idx, -0.0 AS dual_coeff, 1.11700958761 AS sv_0, -0.0168496786891 AS sv_1, 0.873679838381 AS sv_2, 0.984271133283 AS sv_3 UNION ALL SELECT 6 AS sv_idx, -0.0832105210605 AS dual_coeff, -0.0342259205116 AS sv_0, -0.848100494016 AS sv_1, -0.00315978241729 AS sv_2, -0.0605084713084 AS sv_3 UNION ALL SELECT 7 AS sv_idx, -0.0 AS dual_coeff, 1.34725668923 AS sv_0, 0.190963025143 AS sv_1, 0.815223863661 AS sv_2, 0.685762674828 AS sv_3) AS [Values]), 
kernel_cte_1 AS 
(SELECT t_2.[KEY] AS [KEY_1], t_2.dot_product AS [Score_1] 
FROM (SELECT full_join_data_sv_2.[KEY] AS [KEY], sum(full_join_data_sv_2.dot_prod1) + -0.0817603967618 AS dot_product 
FROM (SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], [SV_data_1].dual_coeff * ([ADS_sca_2_OUT].scaler_output_2 * [SV_data_1].sv_0 + [ADS_sca_2_OUT].scaler_output_3 * [SV_data_1].sv_1 + [ADS_sca_2_OUT].scaler_output_4 * [SV_data_1].sv_2 + [ADS_sca_2_OUT].scaler_output_5 * [SV_data_1].sv_3) AS dot_prod1 
FROM [ADS_sca_2_OUT], [SV_data_1]) AS full_join_data_sv_2 GROUP BY full_join_data_sv_2.[KEY]) AS t_2), 
[SV_data_2] AS 
(SELECT [Values].sv_idx AS sv_idx, [Values].dual_coeff AS dual_coeff, [Values].sv_0 AS sv_0, [Values].sv_1 AS sv_1, [Values].sv_2 AS sv_2, [Values].sv_3 AS sv_3 
FROM (SELECT 0 AS sv_idx, -0.0 AS dual_coeff, 1.69262734167 AS sv_0, -0.0168496786891 AS sv_1, 1.34132763614 AS sv_2, 0.835016904055 AS sv_3 UNION ALL SELECT 1 AS sv_idx, -0.189855036242 AS dual_coeff, 0.311144731924 AS sv_0, -1.67935130934 AS sv_1, 0.873679838381 AS sv_2, 0.685762674828 AS sv_3 UNION ALL SELECT 2 AS sv_idx, -0.0 AS dual_coeff, 1.34725668923 AS sv_0, 0.398775728974 AS sv_1, 1.28287166142 AS sv_2, 1.87979650865 AS sv_3 UNION ALL SELECT 3 AS sv_idx, -0.0 AS dual_coeff, 0.771638935171 AS sv_0, -0.640287790184 AS sv_1, 1.04904776254 AS sv_2, 1.28277959174 AS sv_3) AS [Values]), 
kernel_cte_2 AS 
(SELECT t_3.[KEY] AS [KEY_2], t_3.dot_product AS [Score_2] 
FROM (SELECT full_join_data_sv_3.[KEY] AS [KEY], sum(full_join_data_sv_3.dot_prod1) + 2.90821418955 AS dot_product 
FROM (SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], [SV_data_2].dual_coeff * ([ADS_sca_2_OUT].scaler_output_2 * [SV_data_2].sv_0 + [ADS_sca_2_OUT].scaler_output_3 * [SV_data_2].sv_1 + [ADS_sca_2_OUT].scaler_output_4 * [SV_data_2].sv_2 + [ADS_sca_2_OUT].scaler_output_5 * [SV_data_2].sv_3) AS dot_prod1 
FROM [ADS_sca_2_OUT], [SV_data_2]) AS full_join_data_sv_3 GROUP BY full_join_data_sv_3.[KEY]) AS t_3), 
[OVR_Join_CTE] AS 
(SELECT kernel_cte_0.[KEY_0] AS [KEY_0], kernel_cte_0.[Score_0] AS [Score_0], kernel_cte_1.[KEY_1] AS [KEY_1], kernel_cte_1.[Score_1] AS [Score_1], kernel_cte_2.[KEY_2] AS [KEY_2], kernel_cte_2.[Score_2] AS [Score_2] 
FROM kernel_cte_0 LEFT OUTER JOIN kernel_cte_1 ON kernel_cte_0.[KEY_0] = kernel_cte_1.[KEY_1] LEFT OUTER JOIN kernel_cte_2 ON kernel_cte_2.[KEY_2] = kernel_cte_1.[KEY_1]), 
orig_cte AS 
(SELECT [OVR_Join_CTE].[KEY_0] AS [KEY], [OVR_Join_CTE].[Score_0] AS [Score_0], [OVR_Join_CTE].[Score_1] AS [Score_1], [OVR_Join_CTE].[Score_2] AS [Score_2], CAST(NULL AS FLOAT(53)) AS [Proba_0], CAST(NULL AS FLOAT(53)) AS [Proba_1], CAST(NULL AS FLOAT(53)) AS [Proba_2], CAST(NULL AS FLOAT(53)) AS [LogProba_0], CAST(NULL AS FLOAT(53)) AS [LogProba_1], CAST(NULL AS FLOAT(53)) AS [LogProba_2], CAST(NULL AS FLOAT(53)) AS [Decision] 
FROM [OVR_Join_CTE]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[Decision] AS [Decision], max_select.[KEY_m] AS [KEY_m], max_select.[max_LogProba] AS [max_LogProba], max_select.[max_Proba] AS [max_Proba], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[LogProba]) AS [max_LogProba], max(score_class_union.[Proba]) AS [max_Proba], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[KEY_m] AS [KEY_m], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[Decision] AS [Decision], score_max.[KEY_m] AS [KEY_m], score_max.[max_LogProba] AS [max_LogProba], score_max.[max_Proba] AS [max_Proba], score_max.[max_Score] AS [max_Score], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] = union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_max.[KEY] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], arg_max_cte.[arg_max_Score] AS [Decision] 
FROM arg_max_cte