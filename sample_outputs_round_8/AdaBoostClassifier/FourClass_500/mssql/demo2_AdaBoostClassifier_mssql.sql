-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_195] <= 6.2133636474609375) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision] 
FROM (SELECT 0 AS node_id, 'Feature_195' AS feature, 6.2133636474609375 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.32 AS [Proba_0], -1.13943428319 AS [LogProba_0], 0.32 AS [Proba_1], -1.13943428319 AS [LogProba_1], 0.12 AS [Proba_2], -2.1202635362 AS [LogProba_2], 0.24000000000000002 AS [Proba_3], -1.42711635564 AS [LogProba_3], 0 AS [Decision] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.42105263157894735 AS [Proba_0], -0.864997437487 AS [LogProba_0], 0.10526315789473684 AS [Proba_1], -2.25129179861 AS [LogProba_1], 0.15789473684210525 AS [Proba_2], -1.8458266905 AS [LogProba_2], 0.31578947368421056 AS [Proba_3], -1.15267950994 AS [LogProba_3], 0 AS [Decision] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_0] AS [Proba_0], [DT_node_data].[LogProba_0] AS [LogProba_0], [DT_node_data].[Proba_1] AS [Proba_1], [DT_node_data].[LogProba_1] AS [LogProba_1], [DT_node_data].[Proba_2] AS [Proba_2], [DT_node_data].[LogProba_2] AS [LogProba_2], [DT_node_data].[Proba_3] AS [Proba_3], [DT_node_data].[LogProba_3] AS [LogProba_3], [DT_node_data].[Decision] AS [Decision] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[AdaBoost_Estim_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_2] IS NULL OR [DT_Output].[Proba_2] > 0.0) THEN log([DT_Output].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_3] IS NULL OR [DT_Output].[Proba_3] > 0.0) THEN log([DT_Output].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_7] <= 0.9200525283813477) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision] 
FROM (SELECT 0 AS node_id, 'Feature_7' AS feature, 0.9200525283813477 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24999999999983435 AS [Proba_0], -1.38629436112 AS [LogProba_0], 0.2500000000004968 AS [Proba_1], -1.38629436112 AS [LogProba_1], 0.2499999999998344 AS [Proba_2], -1.38629436112 AS [LogProba_2], 0.24999999999983433 AS [Proba_3], -1.38629436112 AS [LogProba_3], 1 AS [Decision] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.33333333333303894 AS [Proba_0], -1.09861228867 AS [LogProba_0], 0.3333333333339221 AS [Proba_1], -1.09861228867 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.3333333333330389 AS [Proba_3], -1.09861228867 AS [LogProba_3], 1 AS [Decision] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Proba_0] AS [Proba_0], [DT_node_data_1].[LogProba_0] AS [LogProba_0], [DT_node_data_1].[Proba_1] AS [Proba_1], [DT_node_data_1].[LogProba_1] AS [LogProba_1], [DT_node_data_1].[Proba_2] AS [Proba_2], [DT_node_data_1].[LogProba_2] AS [LogProba_2], [DT_node_data_1].[Proba_3] AS [Proba_3], [DT_node_data_1].[LogProba_3] AS [LogProba_3], [DT_node_data_1].[Decision] AS [Decision] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[AdaBoost_Estim_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_2] IS NULL OR [DT_Output_1].[Proba_2] > 0.0) THEN log([DT_Output_1].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_3] IS NULL OR [DT_Output_1].[Proba_3] > 0.0) THEN log([DT_Output_1].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_438] <= -1.115102767944336) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision] 
FROM (SELECT 0 AS node_id, 'Feature_438' AS feature, -1.115102767944336 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.33333333207528526 AS [Proba_0], -1.09861229244 AS [LogProba_0], 0.3333333320752848 AS [Proba_1], -1.09861229244 AS [LogProba_1], 3.774144663329883e-09 AS [Proba_2], -19.3950920592 AS [LogProba_2], 0.3333333320752852 AS [Proba_3], -1.09861229244 AS [LogProba_3], 0 AS [Decision] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 22 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.49999999716883964 AS [Proba_0], -0.693147186222 AS [LogProba_0], 1.1038804790519582e-12 AS [Proba_1], -27.5321894357 AS [LogProba_1], 5.661216984305446e-09 AS [Proba_2], -18.9896269529 AS [LogProba_2], 0.4999999971688395 AS [Proba_3], -0.693147186222 AS [LogProba_3], 0 AS [Decision]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Proba_0] AS [Proba_0], [DT_node_data_2].[LogProba_0] AS [LogProba_0], [DT_node_data_2].[Proba_1] AS [Proba_1], [DT_node_data_2].[LogProba_1] AS [LogProba_1], [DT_node_data_2].[Proba_2] AS [Proba_2], [DT_node_data_2].[LogProba_2] AS [LogProba_2], [DT_node_data_2].[Proba_3] AS [Proba_3], [DT_node_data_2].[LogProba_3] AS [LogProba_3], [DT_node_data_2].[Decision] AS [Decision] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[AdaBoost_Estim_2] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_2] IS NULL OR [DT_Output_2].[Proba_2] > 0.0) THEN log([DT_Output_2].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_3] IS NULL OR [DT_Output_2].[Proba_3] > 0.0) THEN log([DT_Output_2].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_95] <= -1.0437794923782349) THEN 1 ELSE 2 END AS node_id_2 
FROM [FourClass_500] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision] 
FROM (SELECT 0 AS node_id, 'Feature_95' AS feature, -1.0437794923782349 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.24999999095856837 AS [Proba_0], -1.38629439729 AS [LogProba_0], 0.250000027124295 AS [Proba_1], -1.38629425262 AS [LogProba_1], 0.24999999095856842 AS [Proba_2], -1.38629439729 AS [LogProba_2], 0.2499999909585683 AS [Proba_3], -1.38629439729 AS [LogProba_3], 1 AS [Decision] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 6.387622671074273e-20 AS [Proba_1], -44.1973396997 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3333333172596773 AS [Proba_0], -1.09861233689 AS [LogProba_0], 0.3333333654806455 AS [Proba_1], -1.09861219223 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.33333331725967724 AS [Proba_3], -1.09861233689 AS [LogProba_3], 1 AS [Decision]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Proba_0] AS [Proba_0], [DT_node_data_3].[LogProba_0] AS [LogProba_0], [DT_node_data_3].[Proba_1] AS [Proba_1], [DT_node_data_3].[LogProba_1] AS [LogProba_1], [DT_node_data_3].[Proba_2] AS [Proba_2], [DT_node_data_3].[LogProba_2] AS [LogProba_2], [DT_node_data_3].[Proba_3] AS [Proba_3], [DT_node_data_3].[LogProba_3] AS [LogProba_3], [DT_node_data_3].[Decision] AS [Decision] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[AdaBoost_Estim_3] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], (3.0 * (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_0], 3.0 * (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_0], (3.0 * (CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_1], 3.0 * (CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_1], (3.0 * (CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_2], 3.0 * (CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_2], (3.0 * (CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4)) / 4.0 AS [Score_3], 3.0 * (CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_2] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_2] IS NULL OR [DT_Output_3].[Proba_2] > 0.0) THEN log([DT_Output_3].[Proba_2]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_3] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_3] IS NULL OR [DT_Output_3].[Proba_3] > 0.0) THEN log([DT_Output_3].[Proba_3]) ELSE -1.79769313486231e+308 END END) / 4) AS [Proba_3] 
FROM [DT_Output_3]), 
[Score_Union_CTE] AS 
(SELECT ensemble_score_union.[KEY] AS [KEY], ensemble_score_union.[Score_0] AS [Score_0], ensemble_score_union.[Proba_0] AS [Proba_0], ensemble_score_union.[Score_1] AS [Score_1], ensemble_score_union.[Proba_1] AS [Proba_1], ensemble_score_union.[Score_2] AS [Score_2], ensemble_score_union.[Proba_2] AS [Proba_2], ensemble_score_union.[Score_3] AS [Score_3], ensemble_score_union.[Proba_3] AS [Proba_3] 
FROM (SELECT [AdaBoost_Estim_0].[KEY] AS [KEY], [AdaBoost_Estim_0].[Score_0] AS [Score_0], [AdaBoost_Estim_0].[Proba_0] AS [Proba_0], [AdaBoost_Estim_0].[Score_1] AS [Score_1], [AdaBoost_Estim_0].[Proba_1] AS [Proba_1], [AdaBoost_Estim_0].[Score_2] AS [Score_2], [AdaBoost_Estim_0].[Proba_2] AS [Proba_2], [AdaBoost_Estim_0].[Score_3] AS [Score_3], [AdaBoost_Estim_0].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_0] UNION ALL SELECT [AdaBoost_Estim_1].[KEY] AS [KEY], [AdaBoost_Estim_1].[Score_0] AS [Score_0], [AdaBoost_Estim_1].[Proba_0] AS [Proba_0], [AdaBoost_Estim_1].[Score_1] AS [Score_1], [AdaBoost_Estim_1].[Proba_1] AS [Proba_1], [AdaBoost_Estim_1].[Score_2] AS [Score_2], [AdaBoost_Estim_1].[Proba_2] AS [Proba_2], [AdaBoost_Estim_1].[Score_3] AS [Score_3], [AdaBoost_Estim_1].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_1] UNION ALL SELECT [AdaBoost_Estim_2].[KEY] AS [KEY], [AdaBoost_Estim_2].[Score_0] AS [Score_0], [AdaBoost_Estim_2].[Proba_0] AS [Proba_0], [AdaBoost_Estim_2].[Score_1] AS [Score_1], [AdaBoost_Estim_2].[Proba_1] AS [Proba_1], [AdaBoost_Estim_2].[Score_2] AS [Score_2], [AdaBoost_Estim_2].[Proba_2] AS [Proba_2], [AdaBoost_Estim_2].[Score_3] AS [Score_3], [AdaBoost_Estim_2].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_2] UNION ALL SELECT [AdaBoost_Estim_3].[KEY] AS [KEY], [AdaBoost_Estim_3].[Score_0] AS [Score_0], [AdaBoost_Estim_3].[Proba_0] AS [Proba_0], [AdaBoost_Estim_3].[Score_1] AS [Score_1], [AdaBoost_Estim_3].[Proba_1] AS [Proba_1], [AdaBoost_Estim_3].[Score_2] AS [Score_2], [AdaBoost_Estim_3].[Proba_2] AS [Proba_2], [AdaBoost_Estim_3].[Score_3] AS [Score_3], [AdaBoost_Estim_3].[Proba_3] AS [Proba_3] 
FROM [AdaBoost_Estim_3]) AS ensemble_score_union), 
[ADA_Sum_Scores] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Score_0] AS [Score_0], [T].[Proba_0] AS [Proba_0], [T].[Score_1] AS [Score_1], [T].[Proba_1] AS [Proba_1], [T].[Score_2] AS [Score_2], [T].[Proba_2] AS [Proba_2], [T].[Score_3] AS [Score_3], [T].[Proba_3] AS [Proba_3] 
FROM (SELECT [Score_Union_CTE].[KEY] AS [KEY], sum([Score_Union_CTE].[Score_0]) AS [Score_0], sum([Score_Union_CTE].[Proba_0]) AS [Proba_0], sum([Score_Union_CTE].[Score_1]) AS [Score_1], sum([Score_Union_CTE].[Proba_1]) AS [Proba_1], sum([Score_Union_CTE].[Score_2]) AS [Score_2], sum([Score_Union_CTE].[Proba_2]) AS [Proba_2], sum([Score_Union_CTE].[Score_3]) AS [Score_3], sum([Score_Union_CTE].[Proba_3]) AS [Proba_3] 
FROM [Score_Union_CTE] GROUP BY [Score_Union_CTE].[KEY]) AS [T]), 
[AdaBoost_AVG_Scores_BN] AS 
(SELECT [ADA_Sum_Scores].[KEY] AS [KEY], [ADA_Sum_Scores].[Score_0] AS [Score_0], [ADA_Sum_Scores].[Proba_0] AS [Proba_0], [ADA_Sum_Scores].[Score_1] AS [Score_1], [ADA_Sum_Scores].[Proba_1] AS [Proba_1], [ADA_Sum_Scores].[Score_2] AS [Score_2], [ADA_Sum_Scores].[Proba_2] AS [Proba_2], [ADA_Sum_Scores].[Score_3] AS [Score_3], [ADA_Sum_Scores].[Proba_3] AS [Proba_3] 
FROM [ADA_Sum_Scores]), 
[AdaBoost_AVG_Scores] AS 
(SELECT [AdaBoost_AVG_Scores_BN].[KEY] AS [KEY], [AdaBoost_AVG_Scores_BN].[Score_0] AS [Score_0], exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 4.0) / 3) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 4.0) / 3)) AS [Proba_0], CAST(NULL AS FLOAT) AS [LogProba_0], [AdaBoost_AVG_Scores_BN].[Score_1] AS [Score_1], exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 4.0) / 3) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 4.0) / 3)) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_1], [AdaBoost_AVG_Scores_BN].[Score_2] AS [Score_2], exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 4.0) / 3) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 4.0) / 3)) AS [Proba_2], CAST(NULL AS FLOAT) AS [LogProba_2], [AdaBoost_AVG_Scores_BN].[Score_3] AS [Score_3], exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 4.0) / 3) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_2] / 4.0) / 3) + exp(([AdaBoost_AVG_Scores_BN].[Proba_3] / 4.0) / 3)) AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_3] 
FROM [AdaBoost_AVG_Scores_BN]), 
orig_cte AS 
(SELECT [AdaBoost_AVG_Scores].[KEY] AS [KEY], [AdaBoost_AVG_Scores].[Score_0] AS [Score_0], [AdaBoost_AVG_Scores].[Score_1] AS [Score_1], [AdaBoost_AVG_Scores].[Score_2] AS [Score_2], [AdaBoost_AVG_Scores].[Score_3] AS [Score_3], [AdaBoost_AVG_Scores].[Proba_0] AS [Proba_0], [AdaBoost_AVG_Scores].[Proba_1] AS [Proba_1], [AdaBoost_AVG_Scores].[Proba_2] AS [Proba_2], [AdaBoost_AVG_Scores].[Proba_3] AS [Proba_3], [AdaBoost_AVG_Scores].[LogProba_0] AS [LogProba_0], [AdaBoost_AVG_Scores].[LogProba_1] AS [LogProba_1], [AdaBoost_AVG_Scores].[LogProba_2] AS [LogProba_2], [AdaBoost_AVG_Scores].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision] 
FROM [AdaBoost_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], max_select.[KEY_m] AS [KEY_m], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] <= union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_max.[KEY] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], CAST(arg_max_cte.[arg_max_Score] AS BIGINT) AS [Decision] 
FROM arg_max_cte