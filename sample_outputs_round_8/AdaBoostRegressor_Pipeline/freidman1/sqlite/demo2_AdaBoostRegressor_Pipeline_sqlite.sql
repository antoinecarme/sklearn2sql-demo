-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.571437811354 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.382666238013 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.572691272422 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.49696190088 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.451024542384 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.481756971335 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.500052942379 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.479198857297 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.507387853051 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.628661567941 ELSE "ADS"."Feature_9" END AS impter_11 
FROM freidman1 AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.571437811354) / 0.271926055138 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.382666238013) / 0.24530412971 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.572691272422) / 0.305022968027 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.49696190088) / 0.312889400468 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.451024542384) / 0.24602253009 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.481756971335) / 0.286861434558 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.500052942379) / 0.284593201265 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.479198857297) / 0.318231552426 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.507387853051) / 0.213964399112 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.628661567941) / 0.260134905409 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.15014678239822388) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= 1.475368618965149) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= 0.4847598373889923) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -1.1681305170059204) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= 0.18993820250034332) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= -0.17444846034049988) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.15014678239822388 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.451258975980807 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_8' AS feature, 1.475368618965149 AS threshold, 9 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 7.279095387677505 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_7' AS feature, 0.4847598373889923 AS threshold, 8 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 6.972102158887659 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 6.211256145013339 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 8.240178848678195 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.735041217996262 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_2' AS feature, -1.1681305170059204 AS threshold, 16 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.923100994401416 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'scaler_7' AS feature, 0.18993820250034332 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.404085464725563 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.051184902745373 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.109886588685942 AS "Estimator" UNION ALL SELECT 10 AS node_id, 'scaler_9' AS feature, -0.17444846034049988 AS threshold, 13 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.735181501249688 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 18.604382840187426 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.1919306644136 AS "Estimator") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"AdaBoost_Estim_0" AS 
(SELECT "DT_Output"."KEY" AS "KEY", 0.200711139242 * "DT_Output"."Estimator" AS "Estimator", 0.200711139242 AS "Weight" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.9624107480049133) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= 0.23532292246818542) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_8 <= -0.9408671855926514) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.5802923440933228) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= 0.18509911000728607) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 1.3240382671356201) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.9624107480049133 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.997570768883211 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_7' AS feature, 0.23532292246818542 AS threshold, 6 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.990880258384104 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_8' AS feature, -0.9408671855926514 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 7.133059396581099 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.131789617052231 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 6.1334826564240545 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.706521981990113 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_3' AS feature, -0.5802923440933228 AS threshold, 19 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.894420403777673 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'scaler_2' AS feature, 0.18509911000728607 AS threshold, 6 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.977395154200975 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.184052845897567 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.770737462504385 AS "Estimator" UNION ALL SELECT 10 AS node_id, 'scaler_4' AS feature, 1.3240382671356201 AS threshold, 13 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 19.70227821127461 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 18.693954525884052 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 25.24805848092261 AS "Estimator") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"AdaBoost_Estim_1" AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", 0.328476861521 * "DT_Output_1"."Estimator" AS "Estimator", 0.328476861521 AS "Weight" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -1.333762288093567) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.47200387716293335) THEN 2 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.7276138067245483) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.7072218656539917) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= -0.47859475016593933) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 1.263684630393982) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -1.333762288093567 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.222138941414466 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_3' AS feature, -0.47200387716293335 AS threshold, 5 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.005389134279758 AS "Estimator" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 5.293284001301807 AS "Estimator" UNION ALL SELECT 3 AS node_id, 'scaler_2' AS feature, -0.7276138067245483 AS threshold, 4 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.933415417524246 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.131789617052231 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.735041217996262 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_3' AS feature, -0.7072218656539917 AS threshold, 20 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.526326393198142 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'scaler_6' AS feature, -0.47859475016593933 AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 9.221135974503376 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 8.240178848678195 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.20209310032856 AS "Estimator" UNION ALL SELECT 10 AS node_id, 'scaler_9' AS feature, 1.263684630393982 AS threshold, 18 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.226903106386448 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.99055177572054 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.104581225901116 AS "Estimator") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"AdaBoost_Estim_2" AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", 0.239438137646 * "DT_Output_2"."Estimator" AS "Estimator", 0.239438137646 AS "Weight" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_5 <= -0.9624107480049133) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 1.2099848985671997) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 0.6410425901412964) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -1.0317341089248657) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 1.5215280055999756) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_9 <= 0.12473778426647186) THEN 11 ELSE 12 END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.9624107480049133 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.990746349334522 AS "Estimator" UNION ALL SELECT 1 AS node_id, 'scaler_9' AS feature, 1.2099848985671997 AS threshold, 11 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 8.55799106467674 AS "Estimator" UNION ALL SELECT 2 AS node_id, 'scaler_9' AS feature, 0.6410425901412964 AS threshold, 9 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 6.9694286386071 AS "Estimator" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 6.574133516301458 AS "Estimator" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 10.131789617052231 AS "Estimator" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.706521981990113 AS "Estimator" UNION ALL SELECT 6 AS node_id, 'scaler_2' AS feature, -1.0317341089248657 AS threshold, 14 AS count, 1 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.473625501565635 AS "Estimator" UNION ALL SELECT 7 AS node_id, 'scaler_9' AS feature, 1.5215280055999756 AS threshold, 3 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.121054863919959 AS "Estimator" UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 11.15598984450725 AS "Estimator" UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.051184902745373 AS "Estimator" UNION ALL SELECT 10 AS node_id, 'scaler_9' AS feature, 0.12473778426647186 AS threshold, 11 AS count, 2 AS depth, CAST(NULL AS INTEGER) AS parent_id, 17.66069022092354 AS "Estimator" UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 18.63035160617232 AS "Estimator" UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, CAST(NULL AS INTEGER) AS parent_id, 16.85263906654957 AS "Estimator") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"AdaBoost_Estim_3" AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", 0.23137386159 * "DT_Output_3"."Estimator" AS "Estimator", 0.23137386159 AS "Weight" 
FROM "DT_Output_3"), 
"WeightedEstimators" AS 
(SELECT ensemble_score_union."KEY" AS "KEY", ensemble_score_union."Estimator" AS "Estimator", ensemble_score_union."Weight" AS "Weight" 
FROM (SELECT "AdaBoost_Estim_0"."KEY" AS "KEY", "AdaBoost_Estim_0"."Estimator" AS "Estimator", "AdaBoost_Estim_0"."Weight" AS "Weight" 
FROM "AdaBoost_Estim_0" UNION ALL SELECT "AdaBoost_Estim_1"."KEY" AS "KEY", "AdaBoost_Estim_1"."Estimator" AS "Estimator", "AdaBoost_Estim_1"."Weight" AS "Weight" 
FROM "AdaBoost_Estim_1" UNION ALL SELECT "AdaBoost_Estim_2"."KEY" AS "KEY", "AdaBoost_Estim_2"."Estimator" AS "Estimator", "AdaBoost_Estim_2"."Weight" AS "Weight" 
FROM "AdaBoost_Estim_2" UNION ALL SELECT "AdaBoost_Estim_3"."KEY" AS "KEY", "AdaBoost_Estim_3"."Estimator" AS "Estimator", "AdaBoost_Estim_3"."Weight" AS "Weight" 
FROM "AdaBoost_Estim_3") AS ensemble_score_union), 
"Cumulative_Frequencies" AS 
(SELECT u1."KEY" AS "KEY", u1."Estimator" AS "Estimator", u1."Weight" AS "Weight", (SELECT sum(u2."Weight") AS sum_1 
FROM "WeightedEstimators" AS u2 
WHERE u1."KEY" = u2."KEY" AND u1."Estimator" >= u2."Estimator") AS cum_weight 
FROM "WeightedEstimators" AS u1), 
"Quantiles" AS 
(SELECT "WeightedEstimators"."KEY" AS "KEY", "WeightedEstimators"."Estimator" AS "Estimator", "WeightedEstimators"."Weight" AS "Weight", (SELECT min("Cumulative_Frequencies"."Estimator") AS min_1 
FROM "Cumulative_Frequencies" 
WHERE "WeightedEstimators"."KEY" = "Cumulative_Frequencies"."KEY" AND "Cumulative_Frequencies".cum_weight >= 0.5) AS "Estimator_Quantile" 
FROM "WeightedEstimators"), 
"ADA_Sum_Scores" AS 
(SELECT "T"."KEY" AS "KEY", "T"."Estimator" AS "Estimator" 
FROM (SELECT "Quantiles"."KEY" AS "KEY", min("Quantiles"."Estimator_Quantile") AS "Estimator" 
FROM "Quantiles" GROUP BY "Quantiles"."KEY") AS "T")
 SELECT "ADA_Sum_Scores"."KEY" AS "KEY", "ADA_Sum_Scores"."Estimator" AS "Estimator" 
FROM "ADA_Sum_Scores"