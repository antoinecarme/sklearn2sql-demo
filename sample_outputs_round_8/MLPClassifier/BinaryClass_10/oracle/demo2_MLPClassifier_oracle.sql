-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS FLOAT) AS "Feature_0", CAST("ADS"."Feature_1" AS FLOAT) AS "Feature_1", CAST("ADS"."Feature_2" AS FLOAT) AS "Feature_2", CAST("ADS"."Feature_3" AS FLOAT) AS "Feature_3", CAST("ADS"."Feature_4" AS FLOAT) AS "Feature_4", CAST("ADS"."Feature_5" AS FLOAT) AS "Feature_5", CAST("ADS"."Feature_6" AS FLOAT) AS "Feature_6", CAST("ADS"."Feature_7" AS FLOAT) AS "Feature_7", CAST("ADS"."Feature_8" AS FLOAT) AS "Feature_8", CAST("ADS"."Feature_9" AS FLOAT) AS "Feature_9" 
FROM "BinaryClass_10" "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.358302344466 * "IL"."Feature_0" + -0.314752519324 * "IL"."Feature_1" + -2.30647187423 * "IL"."Feature_2" + -0.798627723826 * "IL"."Feature_3" + -0.65129981479 * "IL"."Feature_4" + -0.0296420512484 * "IL"."Feature_5" + -0.560396461432 * "IL"."Feature_6" + -0.18594169232 * "IL"."Feature_7" + 0.526019597941 * "IL"."Feature_8" + 0.159180833118 * "IL"."Feature_9" + -0.798926935968 AS "NEUR_1_1", 1.16152136274 * "IL"."Feature_0" + 0.317531726244 * "IL"."Feature_1" + 0.943551250074 * "IL"."Feature_2" + 0.775728931937 * "IL"."Feature_3" + -0.534425319311 * "IL"."Feature_4" + 0.682630485213 * "IL"."Feature_5" + 0.415157288824 * "IL"."Feature_6" + -0.231096084306 * "IL"."Feature_7" + -0.182629210778 * "IL"."Feature_8" + -1.19779253521 * "IL"."Feature_9" + -0.241127397082 AS "NEUR_1_2", -1.15179117426 * "IL"."Feature_0" + 0.228521917779 * "IL"."Feature_1" + 1.82918782643 * "IL"."Feature_2" + 1.03663271346 * "IL"."Feature_3" + 1.5041376276 * "IL"."Feature_4" + 0.429984448676 * "IL"."Feature_5" + -2.07845762772 * "IL"."Feature_6" + -1.08582309763 * "IL"."Feature_7" + -0.587955360619 * "IL"."Feature_8" + 2.26772833353 * "IL"."Feature_9" + -0.635210898844 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.754728562298 * "HL_1_relu"."NEUR_1_1" + 0.593842019291 * "HL_1_relu"."NEUR_1_2" + -0.670350839975 * "HL_1_relu"."NEUR_1_3" + -0.366495729681 AS "NEUR_2_1", -2.0906986774 * "HL_1_relu"."NEUR_1_1" + 0.515117363062 * "HL_1_relu"."NEUR_1_2" + -0.987423611726 * "HL_1_relu"."NEUR_1_3" + 4.2838289032 AS "NEUR_2_2", -0.237642615884 * "HL_1_relu"."NEUR_1_1" + 0.392254866375 * "HL_1_relu"."NEUR_1_2" + -0.389687063641 * "HL_1_relu"."NEUR_1_3" + 0.120231529653 AS "NEUR_2_3", 0.111067432757 * "HL_1_relu"."NEUR_1_1" + -0.504638501048 * "HL_1_relu"."NEUR_1_2" + -0.406547772728 * "HL_1_relu"."NEUR_1_3" + -0.796433042434 AS "NEUR_2_4", -0.622026906906 * "HL_1_relu"."NEUR_1_1" + 0.459853422565 * "HL_1_relu"."NEUR_1_2" + -0.658393724843 * "HL_1_relu"."NEUR_1_3" + -0.542260599853 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -0.0362480810396 * "HL_2_relu"."NEUR_2_1" + -2.98615585596 * "HL_2_relu"."NEUR_2_2" + 3.7256538742 * "HL_2_relu"."NEUR_2_3" + 0.700697251531 * "HL_2_relu"."NEUR_2_4" + -0.269119587849 * "HL_2_relu"."NEUR_2_5" + 1.50455811322 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", 1.0 / (1.0 + exp(-"OL_BA"."NEUR_3_1")) AS "NEUR_3_1" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_logistic"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", 1.0 - "OL_logistic"."NEUR_3_1" AS "Proba_0", "OL_logistic"."NEUR_3_1" AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision" 
FROM "OL_logistic"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CAST(arg_max_cte."arg_max_Proba" AS NUMBER(19)) AS "Decision" 
FROM arg_max_cte