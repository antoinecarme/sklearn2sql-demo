-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0810083160112 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.269250048034 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.240487763101 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.142604128589 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.183572350866 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.173548954209 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.126298254061 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.360628810671 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.51115301513 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.203356397123 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "RandomReg_10" "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.0810083160112) / 0.90949713658 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - -0.269250048034) / 0.992426738719 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.240487763101) / 0.759956724432 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.142604128589) / 1.0926864622 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.183572350866) / 1.05658801775 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.173548954209) / 0.786365993461 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.126298254061) / 1.3847124245 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.360628810671) / 0.940597350833 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.51115301513) / 1.18193438252 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.203356397123) / 0.6906744839 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -3.67191638387 * "IL".scaler_2 + 16.9634166752 * "IL".scaler_3 + 13.9552842034 * "IL".scaler_4 + -3.21252429557 * "IL".scaler_5 + 4.53471499025 * "IL".scaler_6 + 11.7939147003 * "IL".scaler_7 + 4.68444710701 * "IL".scaler_8 + 5.37182240413 * "IL".scaler_9 + 17.3297693836 * "IL".scaler_10 + -2.97477238205 * "IL".scaler_11 + -1.650465613 AS "NEUR_1_1", -22.9443660917 * "IL".scaler_2 + -39.0479417016 * "IL".scaler_3 + -34.2935123816 * "IL".scaler_4 + -28.9646591356 * "IL".scaler_5 + -19.0115114186 * "IL".scaler_6 + -52.6708469762 * "IL".scaler_7 + -19.7632645694 * "IL".scaler_8 + -24.597703734 * "IL".scaler_9 + -64.661935482 * "IL".scaler_10 + -13.3536412353 * "IL".scaler_11 + 29.1849083476 AS "NEUR_1_2", 20.2082816164 * "IL".scaler_2 + 45.7644567987 * "IL".scaler_3 + 31.7887857016 * "IL".scaler_4 + -0.217326362061 * "IL".scaler_5 + 35.5879896574 * "IL".scaler_6 + 35.1173453623 * "IL".scaler_7 + 0.584323266063 * "IL".scaler_8 + 27.2864581278 * "IL".scaler_9 + 53.4581933013 * "IL".scaler_10 + 11.9301179928 * "IL".scaler_11 + 5.78853775312 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.198434924629 * "HL_1_relu"."NEUR_1_1" + -1.90503759561 * "HL_1_relu"."NEUR_1_2" + -3.26489044265 * "HL_1_relu"."NEUR_1_3" + -1.28493821613 AS "NEUR_2_1", 10.0511700047 * "HL_1_relu"."NEUR_1_1" + 40.202600413 * "HL_1_relu"."NEUR_1_2" + 17.065122918 * "HL_1_relu"."NEUR_1_3" + -38.4318062834 AS "NEUR_2_2", -7.33601394663 * "HL_1_relu"."NEUR_1_1" + -7.56601280506 * "HL_1_relu"."NEUR_1_2" + -29.5038213237 * "HL_1_relu"."NEUR_1_3" + -5.61035155448 AS "NEUR_2_3", -1.53920756902 * "HL_1_relu"."NEUR_1_1" + -0.5047394797 * "HL_1_relu"."NEUR_1_2" + -0.681872388499 * "HL_1_relu"."NEUR_1_3" + -0.879804999605 AS "NEUR_2_4", 14.2975837712 * "HL_1_relu"."NEUR_1_1" + -13.403158947 * "HL_1_relu"."NEUR_1_2" + 33.0992248542 * "HL_1_relu"."NEUR_1_3" + 3.60488491511 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -3.35390365674 * "HL_2_relu"."NEUR_2_1" + -0.0364686446313 * "HL_2_relu"."NEUR_2_2" + -8.00288694753 * "HL_2_relu"."NEUR_2_3" + 0.695059172689 * "HL_2_relu"."NEUR_2_4" + 0.0608997168154 * "HL_2_relu"."NEUR_2_5" + 54.4697353813 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"