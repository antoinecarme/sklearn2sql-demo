-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 3.41760984127 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 10.1031746032 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 11.0184920635 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0634920634921 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.559064285714 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 6.29800793651 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 66.1579365079 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 3.82041984127 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 10.5476190476 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 424.571428571 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 18.4182539683 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 351.427301587 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 12.3455555556 ELSE "ADS"."Feature_12" END AS impter_14 
FROM boston "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 3.41760984127) / 6.42585416131 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 10.1031746032) / 21.7677420303 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 11.0184920635) / 6.65396743656 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.0634920634921) / 0.243845896758 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.559064285714) / 0.122487734705 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 6.29800793651) / 0.688204340456 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 66.1579365079) / 28.5095927971 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 3.82041984127) / 1.98176364603 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 10.5476190476) / 8.9598816096 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 424.571428571) / 169.896627234 AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS FLOAT) - 18.4182539683) / 2.05995071576 AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS FLOAT) - 351.427301587) / 103.875515352 AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS FLOAT) - 12.3455555556) / 7.04758818991 AS scaler_14 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11, CAST("ADS_sca_2_OUT".scaler_12 AS FLOAT) AS scaler_12, CAST("ADS_sca_2_OUT".scaler_13 AS FLOAT) AS scaler_13, CAST("ADS_sca_2_OUT".scaler_14 AS FLOAT) AS scaler_14 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -3.21622112 * "IL".scaler_2 + 0.11576867256 * "IL".scaler_3 + -0.2856225224 * "IL".scaler_4 + -0.0480152599125 * "IL".scaler_5 + 0.0163543485449 * "IL".scaler_6 + 1.14447518848 * "IL".scaler_7 + -0.492965061791 * "IL".scaler_8 + -0.242865367707 * "IL".scaler_9 + -0.0471055332162 * "IL".scaler_10 + -0.348310417057 * "IL".scaler_11 + 0.0666487904733 * "IL".scaler_12 + -0.463215711712 * "IL".scaler_13 + -0.0247020439283 * "IL".scaler_14 + 0.664161636099 AS "NEUR_1_1", -0.895020397268 * "IL".scaler_2 + 0.976299818195 * "IL".scaler_3 + 0.509778521849 * "IL".scaler_4 + -0.465188605518 * "IL".scaler_5 + 0.234372132466 * "IL".scaler_6 + 0.314986263929 * "IL".scaler_7 + -0.697009661491 * "IL".scaler_8 + -2.26187613584 * "IL".scaler_9 + 0.895517490828 * "IL".scaler_10 + 2.27767357976 * "IL".scaler_11 + 0.561316964739 * "IL".scaler_12 + 1.70694909947 * "IL".scaler_13 + -3.63370216889 * "IL".scaler_14 + -3.56790154872 AS "NEUR_1_2", 0.184657561348 * "IL".scaler_2 + -1.34335074492 * "IL".scaler_3 + 1.25593354009 * "IL".scaler_4 + 0.75800663239 * "IL".scaler_5 + -1.62481599359 * "IL".scaler_6 + -0.0812839913874 * "IL".scaler_7 + 0.945598193697 * "IL".scaler_8 + -1.89387856809 * "IL".scaler_9 + 1.63390954715 * "IL".scaler_10 + -2.43529944916 * "IL".scaler_11 + -1.99214214643 * "IL".scaler_12 + -0.191524396028 * "IL".scaler_13 + -0.893170034679 * "IL".scaler_14 + -0.712468297396 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.0231044072514 * "HL_1_relu"."NEUR_1_1" + -0.702800977237 * "HL_1_relu"."NEUR_1_2" + -0.557912565423 * "HL_1_relu"."NEUR_1_3" + -0.522293498918 AS "NEUR_2_1", 1.29819751873 * "HL_1_relu"."NEUR_1_1" + 2.89838784277 * "HL_1_relu"."NEUR_1_2" + 0.0608903436181 * "HL_1_relu"."NEUR_1_3" + 4.20133805157 AS "NEUR_2_2", -1.0157838143 * "HL_1_relu"."NEUR_1_1" + 0.946805690112 * "HL_1_relu"."NEUR_1_2" + -3.30558051597 * "HL_1_relu"."NEUR_1_3" + 0.412289292251 AS "NEUR_2_3", 0.793953066811 * "HL_1_relu"."NEUR_1_1" + 0.385322248966 * "HL_1_relu"."NEUR_1_2" + 0.652440182584 * "HL_1_relu"."NEUR_1_3" + -2.70057013612 AS "NEUR_2_4", -0.450954683716 * "HL_1_relu"."NEUR_1_1" + -0.96681855153 * "HL_1_relu"."NEUR_1_2" + -0.402846356771 * "HL_1_relu"."NEUR_1_3" + -1.01196492731 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -0.220587785095 * "HL_2_relu"."NEUR_2_1" + 2.44136924942 * "HL_2_relu"."NEUR_2_2" + -4.5701610111 * "HL_2_relu"."NEUR_2_3" + 2.14172946408 * "HL_2_relu"."NEUR_2_4" + -0.689666133819 * "HL_2_relu"."NEUR_2_5" + 3.66739774627 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"