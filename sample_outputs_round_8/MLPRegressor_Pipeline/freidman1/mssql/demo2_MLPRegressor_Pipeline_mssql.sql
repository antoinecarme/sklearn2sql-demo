-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN 0.571437811354 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.382666238013 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.572691272422 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.49696190088 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN 0.451024542384 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN 0.481756971335 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN 0.500052942379 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.479198857297 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.507387853051 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.628661567941 ELSE [ADS].[Feature_9] END AS impter_11 
FROM freidman1 AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - 0.571437811354) / 0.271926055138 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.382666238013) / 0.24530412971 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.572691272422) / 0.305022968027 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.49696190088) / 0.312889400468 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - 0.451024542384) / 0.24602253009 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - 0.481756971335) / 0.286861434558 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - 0.500052942379) / 0.284593201265 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.479198857297) / 0.318231552426 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.507387853051) / 0.213964399112 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.628661567941) / 0.260134905409 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[IL] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CAST([ADS_sca_2_OUT].scaler_2 AS FLOAT) AS scaler_2, CAST([ADS_sca_2_OUT].scaler_3 AS FLOAT) AS scaler_3, CAST([ADS_sca_2_OUT].scaler_4 AS FLOAT) AS scaler_4, CAST([ADS_sca_2_OUT].scaler_5 AS FLOAT) AS scaler_5, CAST([ADS_sca_2_OUT].scaler_6 AS FLOAT) AS scaler_6, CAST([ADS_sca_2_OUT].scaler_7 AS FLOAT) AS scaler_7, CAST([ADS_sca_2_OUT].scaler_8 AS FLOAT) AS scaler_8, CAST([ADS_sca_2_OUT].scaler_9 AS FLOAT) AS scaler_9, CAST([ADS_sca_2_OUT].scaler_10 AS FLOAT) AS scaler_10, CAST([ADS_sca_2_OUT].scaler_11 AS FLOAT) AS scaler_11 
FROM [ADS_sca_2_OUT]), 
[HL_BA_1] AS 
(SELECT [IL].[KEY] AS [KEY], 0.377222281204 * [IL].scaler_2 + 0.713628023814 * [IL].scaler_3 + -0.581504276544 * [IL].scaler_4 + -0.246488357754 * [IL].scaler_5 + 0.103261763396 * [IL].scaler_6 + 0.935843137909 * [IL].scaler_7 + -1.55262875758 * [IL].scaler_8 + 0.639196404814 * [IL].scaler_9 + 0.947747551139 * [IL].scaler_10 + -0.459811211747 * [IL].scaler_11 + 0.087336649285 AS [NEUR_1_1], 0.752098621161 * [IL].scaler_2 + 0.235357466785 * [IL].scaler_3 + -0.71184195761 * [IL].scaler_4 + 0.162581259659 * [IL].scaler_5 + -0.751436416579 * [IL].scaler_6 + 0.716475885262 * [IL].scaler_7 + -0.988466844135 * [IL].scaler_8 + -0.855826669637 * [IL].scaler_9 + -0.0120805398671 * [IL].scaler_10 + 0.317051109258 * [IL].scaler_11 + -1.27481840552 AS [NEUR_1_2], 0.368710573849 * [IL].scaler_2 + 1.06157223897 * [IL].scaler_3 + 0.43492726005 * [IL].scaler_4 + 1.57064953452 * [IL].scaler_5 + 0.589534509298 * [IL].scaler_6 + -0.26484024661 * [IL].scaler_7 + 0.720626166741 * [IL].scaler_8 + -0.186967566194 * [IL].scaler_9 + -0.815748935172 * [IL].scaler_10 + -0.103678504562 * [IL].scaler_11 + 2.6376732285 AS [NEUR_1_3] 
FROM [IL]), 
[HL_1_relu] AS 
(SELECT [HL_BA_1].[KEY] AS [KEY], CASE WHEN ([HL_BA_1].[NEUR_1_1] >= 0.0) THEN [HL_BA_1].[NEUR_1_1] ELSE 0.0 END AS [NEUR_1_1], CASE WHEN ([HL_BA_1].[NEUR_1_2] >= 0.0) THEN [HL_BA_1].[NEUR_1_2] ELSE 0.0 END AS [NEUR_1_2], CASE WHEN ([HL_BA_1].[NEUR_1_3] >= 0.0) THEN [HL_BA_1].[NEUR_1_3] ELSE 0.0 END AS [NEUR_1_3] 
FROM [HL_BA_1]), 
[HL_BA_2] AS 
(SELECT [HL_1_relu].[KEY] AS [KEY], -0.765254769109 * [HL_1_relu].[NEUR_1_1] + 0.41864895283 * [HL_1_relu].[NEUR_1_2] + -0.181272899835 * [HL_1_relu].[NEUR_1_3] + -0.294306995382 AS [NEUR_2_1], -0.614456851962 * [HL_1_relu].[NEUR_1_1] + -0.150184744406 * [HL_1_relu].[NEUR_1_2] + -0.876042908023 * [HL_1_relu].[NEUR_1_3] + -1.06207232016 AS [NEUR_2_2], 1.22673848162 * [HL_1_relu].[NEUR_1_1] + 1.25745031057 * [HL_1_relu].[NEUR_1_2] + 1.84504147596 * [HL_1_relu].[NEUR_1_3] + 0.866964608821 AS [NEUR_2_3], 0.111081847443 * [HL_1_relu].[NEUR_1_1] + -0.504703994646 * [HL_1_relu].[NEUR_1_2] + -0.406600535798 * [HL_1_relu].[NEUR_1_3] + -0.796433042434 AS [NEUR_2_4], -0.622107635547 * [HL_1_relu].[NEUR_1_1] + 0.300545002498 * [HL_1_relu].[NEUR_1_2] + -0.658828947763 * [HL_1_relu].[NEUR_1_3] + -0.620601027024 AS [NEUR_2_5] 
FROM [HL_1_relu]), 
[HL_2_relu] AS 
(SELECT [HL_BA_2].[KEY] AS [KEY], CASE WHEN ([HL_BA_2].[NEUR_2_1] >= 0.0) THEN [HL_BA_2].[NEUR_2_1] ELSE 0.0 END AS [NEUR_2_1], CASE WHEN ([HL_BA_2].[NEUR_2_2] >= 0.0) THEN [HL_BA_2].[NEUR_2_2] ELSE 0.0 END AS [NEUR_2_2], CASE WHEN ([HL_BA_2].[NEUR_2_3] >= 0.0) THEN [HL_BA_2].[NEUR_2_3] ELSE 0.0 END AS [NEUR_2_3], CASE WHEN ([HL_BA_2].[NEUR_2_4] >= 0.0) THEN [HL_BA_2].[NEUR_2_4] ELSE 0.0 END AS [NEUR_2_4], CASE WHEN ([HL_BA_2].[NEUR_2_5] >= 0.0) THEN [HL_BA_2].[NEUR_2_5] ELSE 0.0 END AS [NEUR_2_5] 
FROM [HL_BA_2]), 
[OL_BA] AS 
(SELECT [HL_2_relu].[KEY] AS [KEY], 0.190940984466 * [HL_2_relu].[NEUR_2_1] + 0.077166513825 * [HL_2_relu].[NEUR_2_2] + 1.36938592716 * [HL_2_relu].[NEUR_2_3] + 0.700788190261 * [HL_2_relu].[NEUR_2_4] + -0.16972873246 * [HL_2_relu].[NEUR_2_5] + 3.48752397034 AS [NEUR_3_1] 
FROM [HL_2_relu]), 
[OL_identity] AS 
(SELECT [OL_BA].[KEY] AS [KEY], [OL_BA].[NEUR_3_1] AS [NEUR_3_1] 
FROM [OL_BA])
 SELECT [OL_identity].[KEY] AS [KEY], [OL_identity].[NEUR_3_1] AS [Estimator] 
FROM [OL_identity]