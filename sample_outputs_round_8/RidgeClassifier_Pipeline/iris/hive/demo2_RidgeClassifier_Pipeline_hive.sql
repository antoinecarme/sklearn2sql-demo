-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `ADS_imp_1_OUT` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` IS NULL) THEN 5.72972972973 ELSE `ADS`.`Feature_0` END AS `imputer_output_2`, CASE WHEN (`ADS`.`Feature_1` IS NULL) THEN 3.00810810811 ELSE `ADS`.`Feature_1` END AS `imputer_output_3`, CASE WHEN (`ADS`.`Feature_2` IS NULL) THEN 3.50540540541 ELSE `ADS`.`Feature_2` END AS `imputer_output_4`, CASE WHEN (`ADS`.`Feature_3` IS NULL) THEN 1.04054054054 ELSE `ADS`.`Feature_3` END AS `imputer_output_5` 
FROM `iris` AS `ADS`), 
`ADS_sca_2_OUT` AS 
(SELECT `ADS_imp_1_OUT`.`KEY` AS `KEY`, (CAST(`ADS_imp_1_OUT`.`imputer_output_2` AS FLOAT) - 5.72972972973) / 0.86863199836 AS `scaler_output_2`, (CAST(`ADS_imp_1_OUT`.`imputer_output_3` AS FLOAT) - 3.00810810811) / 0.481202535534 AS `scaler_output_3`, (CAST(`ADS_imp_1_OUT`.`imputer_output_4` AS FLOAT) - 3.50540540541) / 1.71068912082 AS `scaler_output_4`, (CAST(`ADS_imp_1_OUT`.`imputer_output_5` AS FLOAT) - 1.04054054054) / 0.669997765006 AS `scaler_output_5` 
FROM `ADS_imp_1_OUT`), 
`linear_model_cte` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, 0.05535989386203049 * `ADS_sca_2_OUT`.`scaler_output_2` + 0.1679748331476139 * `ADS_sca_2_OUT`.`scaler_output_3` + -0.5244994698424937 * `ADS_sca_2_OUT`.`scaler_output_4` + -0.36621883936522176 * `ADS_sca_2_OUT`.`scaler_output_5` + -0.243243243243 AS `Score_0`, -0.4265102291794937 * `ADS_sca_2_OUT`.`scaler_output_2` + -0.028227669867355715 * `ADS_sca_2_OUT`.`scaler_output_3` + 0.571118671134627 * `ADS_sca_2_OUT`.`scaler_output_4` + 0.24009780570355632 * `ADS_sca_2_OUT`.`scaler_output_5` + -0.135135135135 AS `Score_1`, 0.3711503353174643 * `ADS_sca_2_OUT`.`scaler_output_2` + -0.13974716328025868 * `ADS_sca_2_OUT`.`scaler_output_3` + -0.046619201292134996 * `ADS_sca_2_OUT`.`scaler_output_4` + 0.12612103366166588 * `ADS_sca_2_OUT`.`scaler_output_5` + -0.621621621622 AS `Score_2` 
FROM `ADS_sca_2_OUT`), 
`orig_cte` AS 
(SELECT `linear_model_cte`.`KEY` AS `KEY`, `linear_model_cte`.`Score_0` AS `Score_0`, `linear_model_cte`.`Score_1` AS `Score_1`, `linear_model_cte`.`Score_2` AS `Score_2`, CAST(NULL AS FLOAT) AS `Proba_0`, CAST(NULL AS FLOAT) AS `Proba_1`, CAST(NULL AS FLOAT) AS `Proba_2`, CAST(NULL AS FLOAT) AS `LogProba_0`, CAST(NULL AS FLOAT) AS `LogProba_1`, CAST(NULL AS FLOAT) AS `LogProba_2`, CAST(NULL AS INT) AS `Decision` 
FROM `linear_model_cte`), 
`score_class_union` AS 
(SELECT `scu`.`KEY_u` AS `KEY_u`, `scu`.`class` AS `class`, `scu`.`LogProba` AS `LogProba`, `scu`.`Proba` AS `Proba`, `scu`.`Score` AS `Score` 
FROM (SELECT `orig_cte`.`KEY` AS `KEY_u`, 0 AS `class`, `orig_cte`.`LogProba_0` AS `LogProba`, `orig_cte`.`Proba_0` AS `Proba`, `orig_cte`.`Score_0` AS `Score` 
FROM `orig_cte` UNION ALL SELECT `orig_cte`.`KEY` AS `KEY_u`, 1 AS `class`, `orig_cte`.`LogProba_1` AS `LogProba`, `orig_cte`.`Proba_1` AS `Proba`, `orig_cte`.`Score_1` AS `Score` 
FROM `orig_cte` UNION ALL SELECT `orig_cte`.`KEY` AS `KEY_u`, 2 AS `class`, `orig_cte`.`LogProba_2` AS `LogProba`, `orig_cte`.`Proba_2` AS `Proba`, `orig_cte`.`Score_2` AS `Score` 
FROM `orig_cte`) AS `scu`), 
`score_max` AS 
(SELECT `orig_cte`.`KEY` AS `KEY`, `orig_cte`.`Score_0` AS `Score_0`, `orig_cte`.`Score_1` AS `Score_1`, `orig_cte`.`Score_2` AS `Score_2`, `orig_cte`.`Proba_0` AS `Proba_0`, `orig_cte`.`Proba_1` AS `Proba_1`, `orig_cte`.`Proba_2` AS `Proba_2`, `orig_cte`.`LogProba_0` AS `LogProba_0`, `orig_cte`.`LogProba_1` AS `LogProba_1`, `orig_cte`.`LogProba_2` AS `LogProba_2`, `orig_cte`.`Decision` AS `Decision`, `max_select`.`KEY_m` AS `KEY_m`, `max_select`.`max_Score` AS `max_Score` 
FROM `orig_cte` LEFT OUTER JOIN (SELECT `score_class_union`.`KEY_u` AS `KEY_m`, max(`score_class_union`.`Score`) AS `max_Score` 
FROM `score_class_union` GROUP BY `score_class_union`.`KEY_u`) AS `max_select` ON `orig_cte`.`KEY` = `max_select`.`KEY_m`), 
`union_with_max` AS 
(SELECT `score_class_union`.`KEY_u` AS `KEY_u`, `score_class_union`.`class` AS `class`, `score_class_union`.`LogProba` AS `LogProba`, `score_class_union`.`Proba` AS `Proba`, `score_class_union`.`Score` AS `Score`, `score_max`.`KEY` AS `KEY`, `score_max`.`Score_0` AS `Score_0`, `score_max`.`Score_1` AS `Score_1`, `score_max`.`Score_2` AS `Score_2`, `score_max`.`Proba_0` AS `Proba_0`, `score_max`.`Proba_1` AS `Proba_1`, `score_max`.`Proba_2` AS `Proba_2`, `score_max`.`LogProba_0` AS `LogProba_0`, `score_max`.`LogProba_1` AS `LogProba_1`, `score_max`.`LogProba_2` AS `LogProba_2`, `score_max`.`Decision` AS `Decision`, `score_max`.`KEY_m` AS `KEY_m`, `score_max`.`max_Score` AS `max_Score` 
FROM `score_class_union` LEFT OUTER JOIN `score_max` ON `score_class_union`.`KEY_u` = `score_max`.`KEY`), 
`arg_max_cte` AS 
(SELECT `score_max`.`KEY` AS `KEY`, `score_max`.`Score_0` AS `Score_0`, `score_max`.`Score_1` AS `Score_1`, `score_max`.`Score_2` AS `Score_2`, `score_max`.`Proba_0` AS `Proba_0`, `score_max`.`Proba_1` AS `Proba_1`, `score_max`.`Proba_2` AS `Proba_2`, `score_max`.`LogProba_0` AS `LogProba_0`, `score_max`.`LogProba_1` AS `LogProba_1`, `score_max`.`LogProba_2` AS `LogProba_2`, `score_max`.`Decision` AS `Decision`, `score_max`.`KEY_m` AS `KEY_m`, `score_max`.`max_Score` AS `max_Score`, `arg_max_t_Score`.`KEY_Score` AS `KEY_Score`, `arg_max_t_Score`.`arg_max_Score` AS `arg_max_Score` 
FROM `score_max` LEFT OUTER JOIN (SELECT `union_with_max`.`KEY` AS `KEY_Score`, min(`union_with_max`.`class`) AS `arg_max_Score` 
FROM `union_with_max` 
WHERE `union_with_max`.`max_Score` <= `union_with_max`.`Score` GROUP BY `union_with_max`.`KEY`) AS `arg_max_t_Score` ON `score_max`.`KEY` = `arg_max_t_Score`.`KEY_Score`)
 SELECT `arg_max_cte`.`KEY` AS `KEY`, `arg_max_cte`.`Score_0` AS `Score_0`, `arg_max_cte`.`Score_1` AS `Score_1`, `arg_max_cte`.`Score_2` AS `Score_2`, `arg_max_cte`.`Proba_0` AS `Proba_0`, `arg_max_cte`.`Proba_1` AS `Proba_1`, `arg_max_cte`.`Proba_2` AS `Proba_2`, CASE WHEN (`arg_max_cte`.`Proba_0` IS NULL OR `arg_max_cte`.`Proba_0` > 0.0) THEN log(`arg_max_cte`.`Proba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (`arg_max_cte`.`Proba_1` IS NULL OR `arg_max_cte`.`Proba_1` > 0.0) THEN log(`arg_max_cte`.`Proba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, CASE WHEN (`arg_max_cte`.`Proba_2` IS NULL OR `arg_max_cte`.`Proba_2` > 0.0) THEN log(`arg_max_cte`.`Proba_2`) ELSE -1.79769313486231e+308 END AS `LogProba_2`, CAST(`arg_max_cte`.`arg_max_Score` AS BIGINT) AS `Decision` 
FROM `arg_max_cte`