-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_22] <= 105.94999694824219) THEN 1 ELSE 2 END AS node_id_2 
FROM [BreastCancer] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'Feature_22' AS feature, 105.94999694824219 AS threshold, 142 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.3521126760563381 AS [Proba_0], -1.04380405217 AS [LogProba_0], 0.6478873239436619 AS [Proba_1], -0.434038480552 AS [LogProba_1], 1 AS [Decision], 0.647887323944 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 89 AS count, 1 AS depth, 0 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 53 AS count, 1 AS depth, 0 AS parent_id, 0.9433962264150944 AS [Proba_0], -0.058268908124 AS [LogProba_0], 0.0566037735849057 AS [Proba_1], -2.87167962488 AS [LogProba_1], 0 AS [Decision], 0.943396226415 AS [DecisionProba]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_0] AS [Proba_0], [DT_node_data].[LogProba_0] AS [LogProba_0], [DT_node_data].[Proba_1] AS [Proba_1], [DT_node_data].[LogProba_1] AS [LogProba_1], [DT_node_data].[Decision] AS [Decision], [DT_node_data].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[AdaBoost_Estim_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], (1.0 * (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2)) / 4.0 AS [Score_0], 1.0 * (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2) AS [Proba_0], (1.0 * (CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2)) / 4.0 AS [Score_1], 1.0 * (CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_0] IS NULL OR [DT_Output].[Proba_0] > 0.0) THEN log([DT_Output].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output].[Proba_1] IS NULL OR [DT_Output].[Proba_1] > 0.0) THEN log([DT_Output].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2) AS [Proba_1] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_6] <= 0.08873499929904938) THEN 1 ELSE 2 END AS node_id_2 
FROM [BreastCancer] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'Feature_6' AS feature, 0.08873499929904938 AS threshold, 142 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4999999729289881 AS [Proba_0], -0.693147234702 AS [LogProba_0], 0.5000000270710119 AS [Proba_1], -0.693147126418 AS [LogProba_1], 1 AS [Decision], 0.500000027071 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 85 AS count, 1 AS depth, 0 AS parent_id, 0.03846153486190936 AS [Proba_0], -3.25809663161 AS [LogProba_0], 0.9615384651380907 AS [Proba_1], -0.0392207094097 AS [LogProba_1], 1 AS [Decision], 0.961538465138 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 57 AS count, 1 AS depth, 0 AS parent_id, 0.9999999885936747 AS [Proba_0], -1.14063253938e-08 AS [LogProba_0], 1.1406325338610939e-08 AS [Proba_1], -18.2890977812 AS [LogProba_1], 0 AS [Decision], 0.999999988594 AS [DecisionProba]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Proba_0] AS [Proba_0], [DT_node_data_1].[LogProba_0] AS [LogProba_0], [DT_node_data_1].[Proba_1] AS [Proba_1], [DT_node_data_1].[LogProba_1] AS [LogProba_1], [DT_node_data_1].[Decision] AS [Decision], [DT_node_data_1].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[AdaBoost_Estim_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], (1.0 * (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2)) / 4.0 AS [Score_0], 1.0 * (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2) AS [Proba_0], (1.0 * (CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2)) / 4.0 AS [Score_1], 1.0 * (CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_1].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_0] IS NULL OR [DT_Output_1].[Proba_0] > 0.0) THEN log([DT_Output_1].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_1].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_1].[Proba_1] IS NULL OR [DT_Output_1].[Proba_1] > 0.0) THEN log([DT_Output_1].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2) AS [Proba_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_22] <= 110.3499984741211) THEN 1 ELSE 2 END AS node_id_2 
FROM [BreastCancer] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'Feature_22' AS feature, 110.3499984741211 AS threshold, 142 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5000000000000019 AS [Proba_0], -0.69314718056 AS [LogProba_0], 0.49999999999999817 AS [Proba_1], -0.69314718056 AS [LogProba_1], 0 AS [Decision], 0.5 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 96 AS count, 1 AS depth, 0 AS parent_id, 4.269644598848424e-05 AS [Proba_0], -10.0613948733 AS [LogProba_0], 0.9999573035540116 AS [Proba_1], -4.26973575076e-05 AS [LogProba_1], 1 AS [Decision], 0.999957303554 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 46 AS count, 1 AS depth, 0 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Proba_0] AS [Proba_0], [DT_node_data_2].[LogProba_0] AS [LogProba_0], [DT_node_data_2].[Proba_1] AS [Proba_1], [DT_node_data_2].[LogProba_1] AS [LogProba_1], [DT_node_data_2].[Decision] AS [Decision], [DT_node_data_2].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[AdaBoost_Estim_2] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], (1.0 * (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2)) / 4.0 AS [Score_0], 1.0 * (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2) AS [Proba_0], (1.0 * (CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2)) / 4.0 AS [Score_1], 1.0 * (CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_2].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_0] IS NULL OR [DT_Output_2].[Proba_0] > 0.0) THEN log([DT_Output_2].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_2].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_2].[Proba_1] IS NULL OR [DT_Output_2].[Proba_1] > 0.0) THEN log([DT_Output_2].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2) AS [Proba_1] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_18] <= 0.020520001649856567) THEN 1 ELSE 2 END AS node_id_2 
FROM [BreastCancer] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'Feature_18' AS feature, 0.020520001649856567 AS threshold, 142 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.5000005700801865 AS [Proba_0], -0.6931460404 AS [LogProba_0], 0.4999994299198135 AS [Proba_1], -0.693148320721 AS [LogProba_1], 0 AS [Decision], 0.50000057008 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 81 AS count, 1 AS depth, 0 AS parent_id, 2.2805048900947794e-06 AS [Proba_0], -12.9911136965 AS [LogProba_0], 0.99999771949511 AS [Proba_1], -2.2805074904e-06 AS [LogProba_1], 1 AS [Decision], 0.999997719495 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 61 AS count, 1 AS depth, 0 AS parent_id, 0.999715385771744 AS [Proba_0], -0.000284654738572 AS [LogProba_0], 0.0002846142282559871 AS [Proba_1], -8.16437587969 AS [LogProba_1], 0 AS [Decision], 0.999715385772 AS [DecisionProba]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Proba_0] AS [Proba_0], [DT_node_data_3].[LogProba_0] AS [LogProba_0], [DT_node_data_3].[Proba_1] AS [Proba_1], [DT_node_data_3].[LogProba_1] AS [LogProba_1], [DT_node_data_3].[Decision] AS [Decision], [DT_node_data_3].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[AdaBoost_Estim_3] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], (1.0 * (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2)) / 4.0 AS [Score_0], 1.0 * (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2) AS [Proba_0], (1.0 * (CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2)) / 4.0 AS [Score_1], 1.0 * (CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END - (CASE WHEN ([DT_Output_3].[Proba_0] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_0] IS NULL OR [DT_Output_3].[Proba_0] > 0.0) THEN log([DT_Output_3].[Proba_0]) ELSE -1.79769313486231e+308 END END + CASE WHEN ([DT_Output_3].[Proba_1] <= 2.22044604925e-16) THEN -36.0436533891 ELSE CASE WHEN ([DT_Output_3].[Proba_1] IS NULL OR [DT_Output_3].[Proba_1] > 0.0) THEN log([DT_Output_3].[Proba_1]) ELSE -1.79769313486231e+308 END END) / 2) AS [Proba_1] 
FROM [DT_Output_3]), 
[Score_Union_CTE] AS 
(SELECT ensemble_score_union.[KEY] AS [KEY], ensemble_score_union.[Score_0] AS [Score_0], ensemble_score_union.[Proba_0] AS [Proba_0], ensemble_score_union.[Score_1] AS [Score_1], ensemble_score_union.[Proba_1] AS [Proba_1] 
FROM (SELECT [AdaBoost_Estim_0].[KEY] AS [KEY], [AdaBoost_Estim_0].[Score_0] AS [Score_0], [AdaBoost_Estim_0].[Proba_0] AS [Proba_0], [AdaBoost_Estim_0].[Score_1] AS [Score_1], [AdaBoost_Estim_0].[Proba_1] AS [Proba_1] 
FROM [AdaBoost_Estim_0] UNION ALL SELECT [AdaBoost_Estim_1].[KEY] AS [KEY], [AdaBoost_Estim_1].[Score_0] AS [Score_0], [AdaBoost_Estim_1].[Proba_0] AS [Proba_0], [AdaBoost_Estim_1].[Score_1] AS [Score_1], [AdaBoost_Estim_1].[Proba_1] AS [Proba_1] 
FROM [AdaBoost_Estim_1] UNION ALL SELECT [AdaBoost_Estim_2].[KEY] AS [KEY], [AdaBoost_Estim_2].[Score_0] AS [Score_0], [AdaBoost_Estim_2].[Proba_0] AS [Proba_0], [AdaBoost_Estim_2].[Score_1] AS [Score_1], [AdaBoost_Estim_2].[Proba_1] AS [Proba_1] 
FROM [AdaBoost_Estim_2] UNION ALL SELECT [AdaBoost_Estim_3].[KEY] AS [KEY], [AdaBoost_Estim_3].[Score_0] AS [Score_0], [AdaBoost_Estim_3].[Proba_0] AS [Proba_0], [AdaBoost_Estim_3].[Score_1] AS [Score_1], [AdaBoost_Estim_3].[Proba_1] AS [Proba_1] 
FROM [AdaBoost_Estim_3]) AS ensemble_score_union), 
[ADA_Sum_Scores] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Score_0] AS [Score_0], [T].[Proba_0] AS [Proba_0], [T].[Score_1] AS [Score_1], [T].[Proba_1] AS [Proba_1] 
FROM (SELECT [Score_Union_CTE].[KEY] AS [KEY], sum([Score_Union_CTE].[Score_0]) AS [Score_0], sum([Score_Union_CTE].[Proba_0]) AS [Proba_0], sum([Score_Union_CTE].[Score_1]) AS [Score_1], sum([Score_Union_CTE].[Proba_1]) AS [Proba_1] 
FROM [Score_Union_CTE] GROUP BY [Score_Union_CTE].[KEY]) AS [T]), 
[AdaBoost_AVG_Scores_BN] AS 
(SELECT [ADA_Sum_Scores].[KEY] AS [KEY], [ADA_Sum_Scores].[Score_0] AS [Score_0], [ADA_Sum_Scores].[Proba_0] AS [Proba_0], [ADA_Sum_Scores].[Score_1] AS [Score_1], [ADA_Sum_Scores].[Proba_1] AS [Proba_1] 
FROM [ADA_Sum_Scores]), 
[AdaBoost_AVG_Scores] AS 
(SELECT [AdaBoost_AVG_Scores_BN].[KEY] AS [KEY], -([AdaBoost_AVG_Scores_BN].[Score_1] - [AdaBoost_AVG_Scores_BN].[Score_0]) AS [Score_0], exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 4.0) / 1) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 4.0) / 1) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 4.0) / 1)) AS [Proba_0], CAST(NULL AS FLOAT) AS [LogProba_0], [AdaBoost_AVG_Scores_BN].[Score_1] - [AdaBoost_AVG_Scores_BN].[Score_0] AS [Score_1], exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 4.0) / 1) / (exp(([AdaBoost_AVG_Scores_BN].[Proba_0] / 4.0) / 1) + exp(([AdaBoost_AVG_Scores_BN].[Proba_1] / 4.0) / 1)) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_1] 
FROM [AdaBoost_AVG_Scores_BN]), 
orig_cte AS 
(SELECT [AdaBoost_AVG_Scores].[KEY] AS [KEY], [AdaBoost_AVG_Scores].[Score_0] AS [Score_0], [AdaBoost_AVG_Scores].[Score_1] AS [Score_1], [AdaBoost_AVG_Scores].[Proba_0] AS [Proba_0], [AdaBoost_AVG_Scores].[Proba_1] AS [Proba_1], [AdaBoost_AVG_Scores].[LogProba_0] AS [LogProba_0], [AdaBoost_AVG_Scores].[LogProba_1] AS [LogProba_1], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM [AdaBoost_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] <= union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_max.[KEY] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], arg_max_cte.[arg_max_Score] AS [Decision], CASE WHEN (arg_max_cte.[arg_max_Score] = 0) THEN arg_max_cte.[Proba_0] WHEN (arg_max_cte.[arg_max_Score] = 1) THEN arg_max_cte.[Proba_1] END AS [DecisionProba] 
FROM arg_max_cte