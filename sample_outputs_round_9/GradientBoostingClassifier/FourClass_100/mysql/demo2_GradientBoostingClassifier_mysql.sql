-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `DT_node_lookup` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_15` <= 3.0743045806884766) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_89` <= -0.6276938915252686) THEN 3 ELSE 4 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_15' AS feature, 3.0743045806884766 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.09853438282516819 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 21 AS count, 1 AS depth, 0 AS parent_id, -0.9597351227190429 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_89' AS feature, -0.6276938915252686 AS threshold, 4 AS count, 1 AS depth, 0 AS parent_id, 0.5314656171748318 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 2 AS depth, 2 AS parent_id, -0.9597351227190433 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 2 AS depth, 2 AS parent_id, 3.431954232117399 AS `Estimator`) AS `Values`), 
`DT_Output` AS 
(SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup` LEFT OUTER JOIN `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id), 
`GB_Tree_0_0` AS 
(SELECT `DT_Output`.`KEY` AS `KEY`, `DT_Output`.`Estimator` AS `Score_0`, 0.0 AS `Score_1`, 0.0 AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output`), 
`DT_node_lookup_1` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_10` <= -2.3377554416656494) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_99` <= -3.8752880096435547) THEN CASE WHEN (`ADS`.`Feature_19` <= 0.1947639286518097) THEN 4 ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_15` <= 2.3570239543914795) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_1` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_10' AS feature, -2.3377554416656494 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.05091883794254563 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 1 AS depth, 0 AS parent_id, 2.7536537553223517 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_99' AS feature, -3.8752880096435547 AS threshold, 20 AS count, 1 AS depth, 0 AS parent_id, -0.11826010316465523 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_19' AS feature, 0.1947639286518097 AS threshold, 6 AS count, 2 AS depth, 2 AS parent_id, 0.23219604066467756 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, -1.0188484822393111 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, 2.7536537553223512 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_15' AS feature, 2.3570239543914795 AS threshold, 14 AS count, 2 AS depth, 2 AS parent_id, -0.2684555933772264 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 12 AS count, 3 AS depth, 6 AS parent_id, -1.030737127612901 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 6 AS parent_id, -0.993373230844064 AS `Estimator`) AS `Values`), 
`DT_Output_1` AS 
(SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_1` LEFT OUTER JOIN `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id), 
`GB_Tree_0_1` AS 
(SELECT `DT_Output_1`.`KEY` AS `KEY`, 0.0 AS `Score_0`, `DT_Output_1`.`Estimator` AS `Score_1`, 0.0 AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_1`), 
`DT_node_lookup_2` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_39` <= -0.08816088736057281) THEN CASE WHEN (`ADS`.`Feature_66` <= -0.13810288906097412) THEN CASE WHEN (`ADS`.`Feature_12` <= 1.0889110565185547) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_99` <= -2.5170280933380127) THEN CASE WHEN (`ADS`.`Feature_50` <= -3.045766592025757) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_2` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_39' AS feature, -0.08816088736057281 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.08207188914768189 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_66' AS feature, -0.13810288906097412 AS threshold, 10 AS count, 1 AS depth, 0 AS parent_id, -0.2761336055938205 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 1.0889110565185547 AS threshold, 6 AS count, 2 AS depth, 1 AS parent_id, -0.2660559872308092 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, -1.0149086192140735 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, -1.0582011076783429 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, -1.0582011076783429 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_99' AS feature, -2.5170280933380127 AS threshold, 15 AS count, 1 AS depth, 0 AS parent_id, 0.3208755523086835 AS `Estimator` UNION ALL SELECT 7 AS node_id, 'Feature_50' AS feature, -3.045766592025757 AS threshold, 8 AS count, 2 AS depth, 6 AS parent_id, -0.018514560425173174 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 7 AS parent_id, 2.5758802456069154 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 7 AS parent_id, -1.014837213954974 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 7 AS count, 2 AS depth, 6 AS parent_id, 2.575107003142439 AS `Estimator`) AS `Values`), 
`DT_Output_2` AS 
(SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_2` LEFT OUTER JOIN `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id), 
`GB_Tree_0_2` AS 
(SELECT `DT_Output_2`.`KEY` AS `KEY`, 0.0 AS `Score_0`, 0.0 AS `Score_1`, `DT_Output_2`.`Estimator` AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_2`), 
`DT_node_lookup_3` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_84` <= 1.4280953407287598) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_2` <= -1.4773441553115845) THEN 3 ELSE 4 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_3` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_84' AS feature, 1.4280953407287598 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.03381827898045016 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 18 AS count, 1 AS depth, 0 AS parent_id, -0.9719865732640383 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, -1.4773441553115845 AS threshold, 7 AS count, 1 AS depth, 0 AS parent_id, 0.4664939828267324 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 2 AS depth, 2 AS parent_id, -0.971642647770371 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 2 AS depth, 2 AS parent_id, 2.933538776072356 AS `Estimator`) AS `Values`), 
`DT_Output_3` AS 
(SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_3` LEFT OUTER JOIN `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id), 
`GB_Tree_0_3` AS 
(SELECT `DT_Output_3`.`KEY` AS `KEY`, 0.0 AS `Score_0`, 0.0 AS `Score_1`, 0.0 AS `Score_2`, `DT_Output_3`.`Estimator` AS `Score_3` 
FROM `DT_Output_3`), 
`DT_node_lookup_4` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_15` <= 3.0743045806884766) THEN CASE WHEN (`ADS`.`Feature_39` <= -0.465423047542572) THEN CASE WHEN (`ADS`.`Feature_76` <= -5.398149013519287) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_50` <= 6.496335506439209) THEN 7 ELSE 8 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_4` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_15' AS feature, 3.0743045806884766 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.08890116739993015 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_39' AS feature, -0.465423047542572 AS threshold, 21 AS count, 1 AS depth, 0 AS parent_id, -0.19604664814047168 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_76' AS feature, -5.398149013519287 AS threshold, 6 AS count, 2 AS depth, 1 AS parent_id, -0.19692210146177894 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, -0.9321764137526236 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, -0.9342537824603216 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 15 AS count, 2 AS depth, 1 AS parent_id, -0.9324840594276034 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_50' AS feature, 6.496335506439209 AS threshold, 4 AS count, 1 AS depth, 0 AS parent_id, 0.4736126064879128 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 2 AS depth, 6 AS parent_id, 2.4722090674828676 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 2 AS depth, 6 AS parent_id, -0.9321776609556145 AS `Estimator`) AS `Values`), 
`DT_Output_4` AS 
(SELECT `DT_node_lookup_4`.`KEY` AS `KEY`, `DT_node_lookup_4`.node_id_2 AS node_id_2, `DT_node_data_4`.node_id AS node_id, `DT_node_data_4`.feature AS feature, `DT_node_data_4`.threshold AS threshold, `DT_node_data_4`.count AS count, `DT_node_data_4`.depth AS depth, `DT_node_data_4`.parent_id AS parent_id, `DT_node_data_4`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_4` LEFT OUTER JOIN `DT_node_data_4` ON `DT_node_lookup_4`.node_id_2 = `DT_node_data_4`.node_id), 
`GB_Tree_1_0` AS 
(SELECT `DT_Output_4`.`KEY` AS `KEY`, `DT_Output_4`.`Estimator` AS `Score_0`, 0.0 AS `Score_1`, 0.0 AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_4`), 
`DT_node_lookup_5` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_10` <= -2.3377554416656494) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_99` <= -3.8752880096435547) THEN CASE WHEN (`ADS`.`Feature_90` <= 0.647400975227356) THEN 4 ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_15` <= 2.3570239543914795) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_5` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_10' AS feature, -2.3377554416656494 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.045254020592804436 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 1 AS depth, 0 AS parent_id, 2.1296739923768753 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_99' AS feature, -3.8752880096435547 AS threshold, 20 AS count, 1 AS depth, 0 AS parent_id, -0.1053908300107802 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_90' AS feature, 0.647400975227356 AS threshold, 6 AS count, 2 AS depth, 2 AS parent_id, 0.2067707166785253 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, -0.9801340624759368 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, 2.1296779413482225 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_15' AS feature, 2.3570239543914795 AS threshold, 14 AS count, 2 AS depth, 2 AS parent_id, -0.23917435002048257 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 12 AS count, 3 AS depth, 6 AS parent_id, -0.9900785373792559 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 6 AS parent_id, -0.960715062439543 AS `Estimator`) AS `Values`), 
`DT_Output_5` AS 
(SELECT `DT_node_lookup_5`.`KEY` AS `KEY`, `DT_node_lookup_5`.node_id_2 AS node_id_2, `DT_node_data_5`.node_id AS node_id, `DT_node_data_5`.feature AS feature, `DT_node_data_5`.threshold AS threshold, `DT_node_data_5`.count AS count, `DT_node_data_5`.depth AS depth, `DT_node_data_5`.parent_id AS parent_id, `DT_node_data_5`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_5` LEFT OUTER JOIN `DT_node_data_5` ON `DT_node_lookup_5`.node_id_2 = `DT_node_data_5`.node_id), 
`GB_Tree_1_1` AS 
(SELECT `DT_Output_5`.`KEY` AS `KEY`, 0.0 AS `Score_0`, `DT_Output_5`.`Estimator` AS `Score_1`, 0.0 AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_5`), 
`DT_node_lookup_6` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_84` <= -0.07659698277711868) THEN CASE WHEN (`ADS`.`Feature_18` <= -0.08194881677627563) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_95` <= 1.0693167448043823) THEN 4 ELSE 5 END END ELSE CASE WHEN (`ADS`.`Feature_89` <= -0.3926655054092407) THEN 7 ELSE 8 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_6` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_84' AS feature, -0.07659698277711868 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.07316748325231547 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_18' AS feature, -0.08194881677627563 AS threshold, 15 AS count, 1 AS depth, 0 AS parent_id, 0.28557947744539836 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, -0.9767629743735244 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_95' AS feature, 1.0693167448043823 AS threshold, 11 AS count, 2 AS depth, 1 AS parent_id, 0.47384746702998615 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 9 AS count, 3 AS depth, 3 AS parent_id, 2.0309513979303544 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 3 AS parent_id, -0.9766339014042246 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_89' AS feature, -0.3926655054092407 AS threshold, 10 AS count, 1 AS depth, 0 AS parent_id, -0.24545050803730892 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 2 AS depth, 6 AS parent_id, -1.0116550834364972 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 2 AS depth, 6 AS parent_id, -0.9768941127068099 AS `Estimator`) AS `Values`), 
`DT_Output_6` AS 
(SELECT `DT_node_lookup_6`.`KEY` AS `KEY`, `DT_node_lookup_6`.node_id_2 AS node_id_2, `DT_node_data_6`.node_id AS node_id, `DT_node_data_6`.feature AS feature, `DT_node_data_6`.threshold AS threshold, `DT_node_data_6`.count AS count, `DT_node_data_6`.depth AS depth, `DT_node_data_6`.parent_id AS parent_id, `DT_node_data_6`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_6` LEFT OUTER JOIN `DT_node_data_6` ON `DT_node_lookup_6`.node_id_2 = `DT_node_data_6`.node_id), 
`GB_Tree_1_2` AS 
(SELECT `DT_Output_6`.`KEY` AS `KEY`, 0.0 AS `Score_0`, 0.0 AS `Score_1`, `DT_Output_6`.`Estimator` AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_6`), 
`DT_node_lookup_7` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_84` <= 1.4280953407287598) THEN CASE WHEN (`ADS`.`Feature_10` <= -2.1513895988464355) THEN 2 ELSE 3 END ELSE CASE WHEN (`ADS`.`Feature_76` <= -4.845882415771484) THEN 5 ELSE 6 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_7` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_84' AS feature, 1.4280953407287598 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.03009885005058651 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, -2.1513895988464355 AS threshold, 18 AS count, 1 AS depth, 0 AS parent_id, -0.20344204169466062 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, -0.9410029633362421 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 14 AS count, 2 AS depth, 1 AS parent_id, -0.9417082732843938 AS `Estimator` UNION ALL SELECT 4 AS node_id, 'Feature_76' AS feature, -4.845882415771484 AS threshold, 7 AS count, 1 AS depth, 0 AS parent_id, 0.415640785605604 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 2 AS depth, 4 AS parent_id, -0.9410098701587806 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 2 AS depth, 4 AS parent_id, 2.226118205968048 AS `Estimator`) AS `Values`), 
`DT_Output_7` AS 
(SELECT `DT_node_lookup_7`.`KEY` AS `KEY`, `DT_node_lookup_7`.node_id_2 AS node_id_2, `DT_node_data_7`.node_id AS node_id, `DT_node_data_7`.feature AS feature, `DT_node_data_7`.threshold AS threshold, `DT_node_data_7`.count AS count, `DT_node_data_7`.depth AS depth, `DT_node_data_7`.parent_id AS parent_id, `DT_node_data_7`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_7` LEFT OUTER JOIN `DT_node_data_7` ON `DT_node_lookup_7`.node_id_2 = `DT_node_data_7`.node_id), 
`GB_Tree_1_3` AS 
(SELECT `DT_Output_7`.`KEY` AS `KEY`, 0.0 AS `Score_0`, 0.0 AS `Score_1`, 0.0 AS `Score_2`, `DT_Output_7`.`Estimator` AS `Score_3` 
FROM `DT_Output_7`), 
`DT_node_lookup_8` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_15` <= 3.0743045806884766) THEN CASE WHEN (`ADS`.`Feature_39` <= -0.465423047542572) THEN CASE WHEN (`ADS`.`Feature_0` <= -1.784112811088562) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_10` <= -1.8702001571655273) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_45` <= -0.4553201198577881) THEN 9 ELSE 10 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_8` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_15' AS feature, 3.0743045806884766 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.07967652764869924 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_39' AS feature, -0.465423047542572 AS threshold, 21 AS count, 1 AS depth, 0 AS parent_id, -0.1750756114215417 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, -1.784112811088562 AS threshold, 6 AS count, 2 AS depth, 1 AS parent_id, -0.17654969792524391 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, -0.908074617873491 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, -0.911349178010109 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_10' AS feature, -1.8702001571655273 AS threshold, 15 AS count, 2 AS depth, 1 AS parent_id, -0.17448597682006078 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, -0.9080701368669023 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 11 AS count, 3 AS depth, 5 AS parent_id, -0.9086907549503863 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_45' AS feature, -0.4553201198577881 AS threshold, 4 AS count, 1 AS depth, 0 AS parent_id, 0.42116866215872356 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -0.908074994281486 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 2 AS depth, 8 AS parent_id, 1.971525589514013 AS `Estimator`) AS `Values`), 
`DT_Output_8` AS 
(SELECT `DT_node_lookup_8`.`KEY` AS `KEY`, `DT_node_lookup_8`.node_id_2 AS node_id_2, `DT_node_data_8`.node_id AS node_id, `DT_node_data_8`.feature AS feature, `DT_node_data_8`.threshold AS threshold, `DT_node_data_8`.count AS count, `DT_node_data_8`.depth AS depth, `DT_node_data_8`.parent_id AS parent_id, `DT_node_data_8`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_8` LEFT OUTER JOIN `DT_node_data_8` ON `DT_node_lookup_8`.node_id_2 = `DT_node_data_8`.node_id), 
`GB_Tree_2_0` AS 
(SELECT `DT_Output_8`.`KEY` AS `KEY`, `DT_Output_8`.`Estimator` AS `Score_0`, 0.0 AS `Score_1`, 0.0 AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_8`), 
`DT_node_lookup_9` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_10` <= -2.3377554416656494) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_99` <= -3.8752880096435547) THEN CASE WHEN (`ADS`.`Feature_72` <= 1.2632821798324585) THEN 4 ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_15` <= 2.3570239543914795) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_9` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_10' AS feature, -2.3377554416656494 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.04010618407077711 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 1 AS depth, 0 AS parent_id, 1.76441834412922 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_99' AS feature, -3.8752880096435547 AS threshold, 20 AS count, 1 AS depth, 0 AS parent_id, -0.09359995489234609 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_72' AS feature, 1.2632821798324585 AS threshold, 6 AS count, 2 AS depth, 2 AS parent_id, 0.18354562012784736 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, -0.9472607930667492 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, 1.7643941910133816 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_15' AS feature, 2.3570239543914795 AS threshold, 14 AS count, 2 AS depth, 2 AS parent_id, -0.2123766299010004 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 12 AS count, 3 AS depth, 6 AS parent_id, -0.9556582027041004 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 6 AS parent_id, -0.9322426935691596 AS `Estimator`) AS `Values`), 
`DT_Output_9` AS 
(SELECT `DT_node_lookup_9`.`KEY` AS `KEY`, `DT_node_lookup_9`.node_id_2 AS node_id_2, `DT_node_data_9`.node_id AS node_id, `DT_node_data_9`.feature AS feature, `DT_node_data_9`.threshold AS threshold, `DT_node_data_9`.count AS count, `DT_node_data_9`.depth AS depth, `DT_node_data_9`.parent_id AS parent_id, `DT_node_data_9`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_9` LEFT OUTER JOIN `DT_node_data_9` ON `DT_node_lookup_9`.node_id_2 = `DT_node_data_9`.node_id), 
`GB_Tree_2_1` AS 
(SELECT `DT_Output_9`.`KEY` AS `KEY`, 0.0 AS `Score_0`, `DT_Output_9`.`Estimator` AS `Score_1`, 0.0 AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_9`), 
`DT_node_lookup_10` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_39` <= -0.08816088736057281) THEN CASE WHEN (`ADS`.`Feature_80` <= 0.8915975689888) THEN CASE WHEN (`ADS`.`Feature_78` <= -5.309309482574463) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_99` <= -2.5170280933380127) THEN CASE WHEN (`ADS`.`Feature_69` <= 2.070373058319092) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_10` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_39' AS feature, -0.08816088736057281 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.06498663926981693 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_80' AS feature, 0.8915975689888 AS threshold, 10 AS count, 1 AS depth, 0 AS parent_id, -0.21752807863033968 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_78' AS feature, -5.309309482574463 AS threshold, 6 AS count, 2 AS depth, 1 AS parent_id, -0.20978912254188045 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, -0.9729349131429832 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, -0.9444897270551712 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, -0.9729349131429832 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_99' AS feature, -2.5170280933380127 AS threshold, 15 AS count, 1 AS depth, 0 AS parent_id, 0.25332978453658794 AS `Estimator` UNION ALL SELECT 7 AS node_id, 'Feature_69' AS feature, 2.070373058319092 AS threshold, 8 AS count, 2 AS depth, 6 AS parent_id, -0.014398753738966423 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 7 AS parent_id, -0.9442461245774579 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 7 AS parent_id, 1.7028066917606164 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 7 AS count, 2 AS depth, 6 AS parent_id, 1.7018582854919297 AS `Estimator`) AS `Values`), 
`DT_Output_10` AS 
(SELECT `DT_node_lookup_10`.`KEY` AS `KEY`, `DT_node_lookup_10`.node_id_2 AS node_id_2, `DT_node_data_10`.node_id AS node_id, `DT_node_data_10`.feature AS feature, `DT_node_data_10`.threshold AS threshold, `DT_node_data_10`.count AS count, `DT_node_data_10`.depth AS depth, `DT_node_data_10`.parent_id AS parent_id, `DT_node_data_10`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_10` LEFT OUTER JOIN `DT_node_data_10` ON `DT_node_lookup_10`.node_id_2 = `DT_node_data_10`.node_id), 
`GB_Tree_2_2` AS 
(SELECT `DT_Output_10`.`KEY` AS `KEY`, 0.0 AS `Score_0`, 0.0 AS `Score_1`, `DT_Output_10`.`Estimator` AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_10`), 
`DT_node_lookup_11` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_84` <= 1.4280953407287598) THEN CASE WHEN (`ADS`.`Feature_10` <= -2.1513895988464355) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_4` <= -2.3328168392181396) THEN 4 ELSE 5 END END ELSE CASE WHEN (`ADS`.`Feature_89` <= 0.0008377432823181152) THEN 7 ELSE 8 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_11` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_84' AS feature, 1.4280953407287598 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.026560323250542348 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, -2.1513895988464355 AS threshold, 18 AS count, 1 AS depth, 0 AS parent_id, -0.18049228209843435 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, -0.9145403001805767 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_4' AS feature, -2.3328168392181396 AS threshold, 14 AS count, 2 AS depth, 1 AS parent_id, -0.1806569755116782 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 3 AS parent_id, -0.9145301600475192 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 12 AS count, 3 AS depth, 3 AS parent_id, -0.9155073404310786 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_89' AS feature, 0.0008377432823181152 AS threshold, 7 AS count, 1 AS depth, 0 AS parent_id, 0.3692647137868942 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 2 AS depth, 6 AS parent_id, 1.8245469923629054 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 2 AS depth, 6 AS parent_id, -0.9145462095455323 AS `Estimator`) AS `Values`), 
`DT_Output_11` AS 
(SELECT `DT_node_lookup_11`.`KEY` AS `KEY`, `DT_node_lookup_11`.node_id_2 AS node_id_2, `DT_node_data_11`.node_id AS node_id, `DT_node_data_11`.feature AS feature, `DT_node_data_11`.threshold AS threshold, `DT_node_data_11`.count AS count, `DT_node_data_11`.depth AS depth, `DT_node_data_11`.parent_id AS parent_id, `DT_node_data_11`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_11` LEFT OUTER JOIN `DT_node_data_11` ON `DT_node_lookup_11`.node_id_2 = `DT_node_data_11`.node_id), 
`GB_Tree_2_3` AS 
(SELECT `DT_Output_11`.`KEY` AS `KEY`, 0.0 AS `Score_0`, 0.0 AS `Score_1`, 0.0 AS `Score_2`, `DT_Output_11`.`Estimator` AS `Score_3` 
FROM `DT_Output_11`), 
`DT_node_lookup_12` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_15` <= 3.0743045806884766) THEN CASE WHEN (`ADS`.`Feature_39` <= -0.465423047542572) THEN CASE WHEN (`ADS`.`Feature_57` <= 0.9180349707603455) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_10` <= -1.8702001571655273) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_45` <= -0.4553201198577881) THEN 9 ELSE 10 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_12` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_15' AS feature, 3.0743045806884766 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.07100966416091678 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_39' AS feature, -0.465423047542572 AS threshold, 21 AS count, 1 AS depth, 0 AS parent_id, -0.15563503618772964 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_57' AS feature, 0.9180349707603455 AS threshold, 6 AS count, 2 AS depth, 1 AS parent_id, -0.15747855685181783 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, -0.8908331539129244 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, -0.886958674057142 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_10' AS feature, -1.8702001571655273 AS threshold, 15 AS count, 2 AS depth, 1 AS parent_id, -0.15489762792209436 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, -0.8869542333895853 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 11 AS count, 3 AS depth, 5 AS parent_id, -0.8876535440179588 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_45' AS feature, -0.4553201198577881 AS threshold, 4 AS count, 1 AS depth, 0 AS parent_id, 0.37327353897985055 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -0.8869579883844317 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 2 AS depth, 8 AS parent_id, 1.6635953390409188 AS `Estimator`) AS `Values`), 
`DT_Output_12` AS 
(SELECT `DT_node_lookup_12`.`KEY` AS `KEY`, `DT_node_lookup_12`.node_id_2 AS node_id_2, `DT_node_data_12`.node_id AS node_id, `DT_node_data_12`.feature AS feature, `DT_node_data_12`.threshold AS threshold, `DT_node_data_12`.count AS count, `DT_node_data_12`.depth AS depth, `DT_node_data_12`.parent_id AS parent_id, `DT_node_data_12`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_12` LEFT OUTER JOIN `DT_node_data_12` ON `DT_node_lookup_12`.node_id_2 = `DT_node_data_12`.node_id), 
`GB_Tree_3_0` AS 
(SELECT `DT_Output_12`.`KEY` AS `KEY`, `DT_Output_12`.`Estimator` AS `Score_0`, 0.0 AS `Score_1`, 0.0 AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_12`), 
`DT_node_lookup_13` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_10` <= -2.3377554416656494) THEN 1 ELSE CASE WHEN (`ADS`.`Feature_99` <= -3.8752880096435547) THEN CASE WHEN (`ADS`.`Feature_90` <= 0.647400975227356) THEN 4 ELSE 5 END ELSE CASE WHEN (`ADS`.`Feature_15` <= 2.3570239543914795) THEN 7 ELSE 8 END END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_13` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_10' AS feature, -2.3377554416656494 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.035423777215780924 AS `Estimator` UNION ALL SELECT 1 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 1 AS depth, 0 AS parent_id, 1.5257254780427694 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_99' AS feature, -3.8752880096435547 AS threshold, 20 AS count, 1 AS depth, 0 AS parent_id, -0.08282792156463961 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_90' AS feature, 0.647400975227356 AS threshold, 6 AS count, 2 AS depth, 2 AS parent_id, 0.1623540410393963 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, -0.9191721728525907 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, 1.5256992905906952 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_15' AS feature, 2.3570239543914795 AS threshold, 14 AS count, 2 AS depth, 2 AS parent_id, -0.18790590553779785 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 12 AS count, 3 AS depth, 6 AS parent_id, -0.9262983015906879 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 6 AS parent_id, -0.9074266985538352 AS `Estimator`) AS `Values`), 
`DT_Output_13` AS 
(SELECT `DT_node_lookup_13`.`KEY` AS `KEY`, `DT_node_lookup_13`.node_id_2 AS node_id_2, `DT_node_data_13`.node_id AS node_id, `DT_node_data_13`.feature AS feature, `DT_node_data_13`.threshold AS threshold, `DT_node_data_13`.count AS count, `DT_node_data_13`.depth AS depth, `DT_node_data_13`.parent_id AS parent_id, `DT_node_data_13`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_13` LEFT OUTER JOIN `DT_node_data_13` ON `DT_node_lookup_13`.node_id_2 = `DT_node_data_13`.node_id), 
`GB_Tree_3_1` AS 
(SELECT `DT_Output_13`.`KEY` AS `KEY`, 0.0 AS `Score_0`, `DT_Output_13`.`Estimator` AS `Score_1`, 0.0 AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_13`), 
`DT_node_lookup_14` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_84` <= -0.07659698277711868) THEN CASE WHEN (`ADS`.`Feature_18` <= -0.08194881677627563) THEN CASE WHEN (`ADS`.`Feature_87` <= 0.0524144172668457) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_82` <= 1.3342030048370361) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_89` <= -0.3926655054092407) THEN 9 ELSE CASE WHEN (`ADS`.`Feature_15` <= 3.439713478088379) THEN 11 ELSE 12 END END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_14` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_84' AS feature, -0.07659698277711868 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 0.05749830144249128 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_18' AS feature, -0.08194881677627563 AS threshold, 15 AS count, 1 AS depth, 0 AS parent_id, 0.22392966563927255 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_87' AS feature, 0.0524144172668457 AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, -0.18173954401058057 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, -0.9173359526191778 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, -0.9163263892983673 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_82' AS feature, 1.3342030048370361 AS threshold, 11 AS count, 2 AS depth, 1 AS parent_id, 0.37144574187558277 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 9 AS count, 3 AS depth, 5 AS parent_id, 1.483169890800176 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 5 AS parent_id, -0.9163289735867872 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_89' AS feature, -0.3926655054092407 AS threshold, 10 AS count, 1 AS depth, 0 AS parent_id, -0.1921487448526807 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 2 AS depth, 8 AS parent_id, -0.9403012703593399 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'Feature_15' AS feature, 3.439713478088379 AS threshold, 5 AS count, 2 AS depth, 8 AS parent_id, -0.1819141936723617 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 10 AS parent_id, -0.9163215854293328 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 10 AS parent_id, -0.9174541460530573 AS `Estimator`) AS `Values`), 
`DT_Output_14` AS 
(SELECT `DT_node_lookup_14`.`KEY` AS `KEY`, `DT_node_lookup_14`.node_id_2 AS node_id_2, `DT_node_data_14`.node_id AS node_id, `DT_node_data_14`.feature AS feature, `DT_node_data_14`.threshold AS threshold, `DT_node_data_14`.count AS count, `DT_node_data_14`.depth AS depth, `DT_node_data_14`.parent_id AS parent_id, `DT_node_data_14`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_14` LEFT OUTER JOIN `DT_node_data_14` ON `DT_node_lookup_14`.node_id_2 = `DT_node_data_14`.node_id), 
`GB_Tree_3_2` AS 
(SELECT `DT_Output_14`.`KEY` AS `KEY`, 0.0 AS `Score_0`, 0.0 AS `Score_1`, `DT_Output_14`.`Estimator` AS `Score_2`, 0.0 AS `Score_3` 
FROM `DT_Output_14`), 
`DT_node_lookup_15` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_84` <= 1.4280953407287598) THEN CASE WHEN (`ADS`.`Feature_10` <= -2.1513895988464355) THEN 2 ELSE CASE WHEN (`ADS`.`Feature_4` <= -2.3328168392181396) THEN 4 ELSE 5 END END ELSE CASE WHEN (`ADS`.`Feature_2` <= -1.4773441553115845) THEN 7 ELSE 8 END END AS node_id_2 
FROM `FourClass_100` AS `ADS`), 
`DT_node_data_15` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_84' AS feature, 1.4280953407287598 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, -0.02331774159889532 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, -2.1513895988464355 AS threshold, 18 AS count, 1 AS depth, 0 AS parent_id, -0.1595209725281692 AS `Estimator` UNION ALL SELECT 2 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, -0.8916748953860946 AS `Estimator` UNION ALL SELECT 3 AS node_id, 'Feature_4' AS feature, -2.3328168392181396 AS threshold, 14 AS count, 2 AS depth, 1 AS parent_id, -0.15970231700359672 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 3 AS parent_id, -0.891668002498071 AS `Estimator` UNION ALL SELECT 5 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 12 AS count, 3 AS depth, 3 AS parent_id, -0.8926865291987148 AS `Estimator` UNION ALL SELECT 6 AS node_id, 'Feature_2' AS feature, -1.4773441553115845 AS threshold, 7 AS count, 1 AS depth, 0 AS parent_id, 0.3269191379335232 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 2 AS depth, 6 AS parent_id, -0.8916799851424052 AS `Estimator` UNION ALL SELECT 8 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 2 AS depth, 6 AS parent_id, 1.5665574500536048 AS `Estimator`) AS `Values`), 
`DT_Output_15` AS 
(SELECT `DT_node_lookup_15`.`KEY` AS `KEY`, `DT_node_lookup_15`.node_id_2 AS node_id_2, `DT_node_data_15`.node_id AS node_id, `DT_node_data_15`.feature AS feature, `DT_node_data_15`.threshold AS threshold, `DT_node_data_15`.count AS count, `DT_node_data_15`.depth AS depth, `DT_node_data_15`.parent_id AS parent_id, `DT_node_data_15`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_15` LEFT OUTER JOIN `DT_node_data_15` ON `DT_node_lookup_15`.node_id_2 = `DT_node_data_15`.node_id), 
`GB_Tree_3_3` AS 
(SELECT `DT_Output_15`.`KEY` AS `KEY`, 0.0 AS `Score_0`, 0.0 AS `Score_1`, 0.0 AS `Score_2`, `DT_Output_15`.`Estimator` AS `Score_3` 
FROM `DT_Output_15`), 
`Score_Union_CTE` AS 
(SELECT ensemble_score_union.`KEY` AS `KEY`, ensemble_score_union.`Score_0` AS `Score_0`, ensemble_score_union.`Score_1` AS `Score_1`, ensemble_score_union.`Score_2` AS `Score_2`, ensemble_score_union.`Score_3` AS `Score_3` 
FROM (SELECT `GB_Tree_0_0`.`KEY` AS `KEY`, `GB_Tree_0_0`.`Score_0` AS `Score_0`, `GB_Tree_0_0`.`Score_1` AS `Score_1`, `GB_Tree_0_0`.`Score_2` AS `Score_2`, `GB_Tree_0_0`.`Score_3` AS `Score_3` 
FROM `GB_Tree_0_0` UNION ALL SELECT `GB_Tree_0_1`.`KEY` AS `KEY`, `GB_Tree_0_1`.`Score_0` AS `Score_0`, `GB_Tree_0_1`.`Score_1` AS `Score_1`, `GB_Tree_0_1`.`Score_2` AS `Score_2`, `GB_Tree_0_1`.`Score_3` AS `Score_3` 
FROM `GB_Tree_0_1` UNION ALL SELECT `GB_Tree_0_2`.`KEY` AS `KEY`, `GB_Tree_0_2`.`Score_0` AS `Score_0`, `GB_Tree_0_2`.`Score_1` AS `Score_1`, `GB_Tree_0_2`.`Score_2` AS `Score_2`, `GB_Tree_0_2`.`Score_3` AS `Score_3` 
FROM `GB_Tree_0_2` UNION ALL SELECT `GB_Tree_0_3`.`KEY` AS `KEY`, `GB_Tree_0_3`.`Score_0` AS `Score_0`, `GB_Tree_0_3`.`Score_1` AS `Score_1`, `GB_Tree_0_3`.`Score_2` AS `Score_2`, `GB_Tree_0_3`.`Score_3` AS `Score_3` 
FROM `GB_Tree_0_3` UNION ALL SELECT `GB_Tree_1_0`.`KEY` AS `KEY`, `GB_Tree_1_0`.`Score_0` AS `Score_0`, `GB_Tree_1_0`.`Score_1` AS `Score_1`, `GB_Tree_1_0`.`Score_2` AS `Score_2`, `GB_Tree_1_0`.`Score_3` AS `Score_3` 
FROM `GB_Tree_1_0` UNION ALL SELECT `GB_Tree_1_1`.`KEY` AS `KEY`, `GB_Tree_1_1`.`Score_0` AS `Score_0`, `GB_Tree_1_1`.`Score_1` AS `Score_1`, `GB_Tree_1_1`.`Score_2` AS `Score_2`, `GB_Tree_1_1`.`Score_3` AS `Score_3` 
FROM `GB_Tree_1_1` UNION ALL SELECT `GB_Tree_1_2`.`KEY` AS `KEY`, `GB_Tree_1_2`.`Score_0` AS `Score_0`, `GB_Tree_1_2`.`Score_1` AS `Score_1`, `GB_Tree_1_2`.`Score_2` AS `Score_2`, `GB_Tree_1_2`.`Score_3` AS `Score_3` 
FROM `GB_Tree_1_2` UNION ALL SELECT `GB_Tree_1_3`.`KEY` AS `KEY`, `GB_Tree_1_3`.`Score_0` AS `Score_0`, `GB_Tree_1_3`.`Score_1` AS `Score_1`, `GB_Tree_1_3`.`Score_2` AS `Score_2`, `GB_Tree_1_3`.`Score_3` AS `Score_3` 
FROM `GB_Tree_1_3` UNION ALL SELECT `GB_Tree_2_0`.`KEY` AS `KEY`, `GB_Tree_2_0`.`Score_0` AS `Score_0`, `GB_Tree_2_0`.`Score_1` AS `Score_1`, `GB_Tree_2_0`.`Score_2` AS `Score_2`, `GB_Tree_2_0`.`Score_3` AS `Score_3` 
FROM `GB_Tree_2_0` UNION ALL SELECT `GB_Tree_2_1`.`KEY` AS `KEY`, `GB_Tree_2_1`.`Score_0` AS `Score_0`, `GB_Tree_2_1`.`Score_1` AS `Score_1`, `GB_Tree_2_1`.`Score_2` AS `Score_2`, `GB_Tree_2_1`.`Score_3` AS `Score_3` 
FROM `GB_Tree_2_1` UNION ALL SELECT `GB_Tree_2_2`.`KEY` AS `KEY`, `GB_Tree_2_2`.`Score_0` AS `Score_0`, `GB_Tree_2_2`.`Score_1` AS `Score_1`, `GB_Tree_2_2`.`Score_2` AS `Score_2`, `GB_Tree_2_2`.`Score_3` AS `Score_3` 
FROM `GB_Tree_2_2` UNION ALL SELECT `GB_Tree_2_3`.`KEY` AS `KEY`, `GB_Tree_2_3`.`Score_0` AS `Score_0`, `GB_Tree_2_3`.`Score_1` AS `Score_1`, `GB_Tree_2_3`.`Score_2` AS `Score_2`, `GB_Tree_2_3`.`Score_3` AS `Score_3` 
FROM `GB_Tree_2_3` UNION ALL SELECT `GB_Tree_3_0`.`KEY` AS `KEY`, `GB_Tree_3_0`.`Score_0` AS `Score_0`, `GB_Tree_3_0`.`Score_1` AS `Score_1`, `GB_Tree_3_0`.`Score_2` AS `Score_2`, `GB_Tree_3_0`.`Score_3` AS `Score_3` 
FROM `GB_Tree_3_0` UNION ALL SELECT `GB_Tree_3_1`.`KEY` AS `KEY`, `GB_Tree_3_1`.`Score_0` AS `Score_0`, `GB_Tree_3_1`.`Score_1` AS `Score_1`, `GB_Tree_3_1`.`Score_2` AS `Score_2`, `GB_Tree_3_1`.`Score_3` AS `Score_3` 
FROM `GB_Tree_3_1` UNION ALL SELECT `GB_Tree_3_2`.`KEY` AS `KEY`, `GB_Tree_3_2`.`Score_0` AS `Score_0`, `GB_Tree_3_2`.`Score_1` AS `Score_1`, `GB_Tree_3_2`.`Score_2` AS `Score_2`, `GB_Tree_3_2`.`Score_3` AS `Score_3` 
FROM `GB_Tree_3_2` UNION ALL SELECT `GB_Tree_3_3`.`KEY` AS `KEY`, `GB_Tree_3_3`.`Score_0` AS `Score_0`, `GB_Tree_3_3`.`Score_1` AS `Score_1`, `GB_Tree_3_3`.`Score_2` AS `Score_2`, `GB_Tree_3_3`.`Score_3` AS `Score_3` 
FROM `GB_Tree_3_3`) AS ensemble_score_union), 
`GradBoost_Sum_Scores` AS 
(SELECT `T`.`KEY` AS `KEY`, `T`.`Score_0` AS `Score_0`, `T`.`Score_1` AS `Score_1`, `T`.`Score_2` AS `Score_2`, `T`.`Score_3` AS `Score_3` 
FROM (SELECT `Score_Union_CTE`.`KEY` AS `KEY`, sum(`Score_Union_CTE`.`Score_0`) AS `Score_0`, sum(`Score_Union_CTE`.`Score_1`) AS `Score_1`, sum(`Score_Union_CTE`.`Score_2`) AS `Score_2`, sum(`Score_Union_CTE`.`Score_3`) AS `Score_3` 
FROM `Score_Union_CTE` GROUP BY `Score_Union_CTE`.`KEY`) AS `T`), 
orig_cte AS 
(SELECT `GradBoost_Sum_Scores`.`KEY` AS `KEY`, 0.12 + 0.1 * `GradBoost_Sum_Scores`.`Score_0` AS `Score_0`, 0.32 + 0.1 * `GradBoost_Sum_Scores`.`Score_1` AS `Score_1`, 0.36 + 0.1 * `GradBoost_Sum_Scores`.`Score_2` AS `Score_2`, 0.2 + 0.1 * `GradBoost_Sum_Scores`.`Score_3` AS `Score_3`, NULL AS `Proba_0`, NULL AS `Proba_1`, NULL AS `Proba_2`, NULL AS `Proba_3`, NULL AS `LogProba_0`, NULL AS `LogProba_1`, NULL AS `LogProba_2`, NULL AS `LogProba_3`, CAST(NULL AS SIGNED INTEGER) AS `Decision`, NULL AS `DecisionProba` 
FROM `GradBoost_Sum_Scores`), 
score_class_union AS 
(SELECT scu.`KEY_u` AS `KEY_u`, scu.class AS class, scu.`LogProba` AS `LogProba`, scu.`Proba` AS `Proba`, scu.`Score` AS `Score` 
FROM (SELECT orig_cte.`KEY` AS `KEY_u`, 0 AS class, orig_cte.`LogProba_0` AS `LogProba`, orig_cte.`Proba_0` AS `Proba`, orig_cte.`Score_0` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY_u`, 1 AS class, orig_cte.`LogProba_1` AS `LogProba`, orig_cte.`Proba_1` AS `Proba`, orig_cte.`Score_1` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY_u`, 2 AS class, orig_cte.`LogProba_2` AS `LogProba`, orig_cte.`Proba_2` AS `Proba`, orig_cte.`Score_2` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY_u`, 3 AS class, orig_cte.`LogProba_3` AS `LogProba`, orig_cte.`Proba_3` AS `Proba`, orig_cte.`Score_3` AS `Score` 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.`KEY` AS `KEY`, orig_cte.`Score_0` AS `Score_0`, orig_cte.`Score_1` AS `Score_1`, orig_cte.`Score_2` AS `Score_2`, orig_cte.`Score_3` AS `Score_3`, orig_cte.`Proba_0` AS `Proba_0`, orig_cte.`Proba_1` AS `Proba_1`, orig_cte.`Proba_2` AS `Proba_2`, orig_cte.`Proba_3` AS `Proba_3`, orig_cte.`LogProba_0` AS `LogProba_0`, orig_cte.`LogProba_1` AS `LogProba_1`, orig_cte.`LogProba_2` AS `LogProba_2`, orig_cte.`LogProba_3` AS `LogProba_3`, orig_cte.`Decision` AS `Decision`, orig_cte.`DecisionProba` AS `DecisionProba`, max_select.`KEY_m` AS `KEY_m`, max_select.`max_Score` AS `max_Score` 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.`KEY_u` AS `KEY_m`, max(score_class_union.`Score`) AS `max_Score` 
FROM score_class_union GROUP BY score_class_union.`KEY_u`) AS max_select ON orig_cte.`KEY` = max_select.`KEY_m`), 
score_soft_max_deltas AS 
(SELECT score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Score_2` AS `Score_2`, score_max.`Score_3` AS `Score_3`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`Proba_2` AS `Proba_2`, score_max.`Proba_3` AS `Proba_3`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`LogProba_2` AS `LogProba_2`, score_max.`LogProba_3` AS `LogProba_3`, score_max.`Decision` AS `Decision`, score_max.`DecisionProba` AS `DecisionProba`, score_max.`KEY_m` AS `KEY_m`, score_max.`max_Score` AS `max_Score`, exp(score_max.`Score_0` - score_max.`max_Score`) AS `exp_delta_Score_0`, exp(score_max.`Score_1` - score_max.`max_Score`) AS `exp_delta_Score_1`, exp(score_max.`Score_2` - score_max.`max_Score`) AS `exp_delta_Score_2`, exp(score_max.`Score_3` - score_max.`max_Score`) AS `exp_delta_Score_3` 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.`KEY` AS `KEY`, soft_scu.class AS class, soft_scu.`exp_delta_Score` AS `exp_delta_Score` 
FROM (SELECT score_soft_max_deltas.`KEY` AS `KEY`, 0 AS class, score_soft_max_deltas.`exp_delta_Score_0` AS `exp_delta_Score` 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.`KEY` AS `KEY`, 1 AS class, score_soft_max_deltas.`exp_delta_Score_1` AS `exp_delta_Score` 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.`KEY` AS `KEY`, 2 AS class, score_soft_max_deltas.`exp_delta_Score_2` AS `exp_delta_Score` 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.`KEY` AS `KEY`, 3 AS class, score_soft_max_deltas.`exp_delta_Score_3` AS `exp_delta_Score` 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas.`KEY` AS `KEY`, score_soft_max_deltas.`Score_0` AS `Score_0`, score_soft_max_deltas.`Score_1` AS `Score_1`, score_soft_max_deltas.`Score_2` AS `Score_2`, score_soft_max_deltas.`Score_3` AS `Score_3`, score_soft_max_deltas.`Proba_0` AS `Proba_0`, score_soft_max_deltas.`Proba_1` AS `Proba_1`, score_soft_max_deltas.`Proba_2` AS `Proba_2`, score_soft_max_deltas.`Proba_3` AS `Proba_3`, score_soft_max_deltas.`LogProba_0` AS `LogProba_0`, score_soft_max_deltas.`LogProba_1` AS `LogProba_1`, score_soft_max_deltas.`LogProba_2` AS `LogProba_2`, score_soft_max_deltas.`LogProba_3` AS `LogProba_3`, score_soft_max_deltas.`Decision` AS `Decision`, score_soft_max_deltas.`DecisionProba` AS `DecisionProba`, score_soft_max_deltas.`KEY_m` AS `KEY_m`, score_soft_max_deltas.`max_Score` AS `max_Score`, score_soft_max_deltas.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max_deltas.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max_deltas.`exp_delta_Score_2` AS `exp_delta_Score_2`, score_soft_max_deltas.`exp_delta_Score_3` AS `exp_delta_Score_3`, sum_exp_t.`KEY_sum` AS `KEY_sum`, sum_exp_t.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore` 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft.`KEY` AS `KEY_sum`, sum(score_class_union_soft.`exp_delta_Score`) AS `sum_ExpDeltaScore` 
FROM score_class_union_soft GROUP BY score_class_union_soft.`KEY`) AS sum_exp_t ON score_soft_max_deltas.`KEY` = sum_exp_t.`KEY_sum`), 
union_with_max AS 
(SELECT score_class_union.`KEY_u` AS `KEY_u`, score_class_union.class AS class, score_class_union.`LogProba` AS `LogProba`, score_class_union.`Proba` AS `Proba`, score_class_union.`Score` AS `Score`, score_soft_max.`KEY` AS `KEY`, score_soft_max.`Score_0` AS `Score_0`, score_soft_max.`Score_1` AS `Score_1`, score_soft_max.`Score_2` AS `Score_2`, score_soft_max.`Score_3` AS `Score_3`, score_soft_max.`Proba_0` AS `Proba_0`, score_soft_max.`Proba_1` AS `Proba_1`, score_soft_max.`Proba_2` AS `Proba_2`, score_soft_max.`Proba_3` AS `Proba_3`, score_soft_max.`LogProba_0` AS `LogProba_0`, score_soft_max.`LogProba_1` AS `LogProba_1`, score_soft_max.`LogProba_2` AS `LogProba_2`, score_soft_max.`LogProba_3` AS `LogProba_3`, score_soft_max.`Decision` AS `Decision`, score_soft_max.`DecisionProba` AS `DecisionProba`, score_soft_max.`KEY_m` AS `KEY_m`, score_soft_max.`max_Score` AS `max_Score`, score_soft_max.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max.`exp_delta_Score_2` AS `exp_delta_Score_2`, score_soft_max.`exp_delta_Score_3` AS `exp_delta_Score_3`, score_soft_max.`KEY_sum` AS `KEY_sum`, score_soft_max.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore` 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union.`KEY_u` = score_soft_max.`KEY`), 
arg_max_cte AS 
(SELECT score_soft_max.`KEY` AS `KEY`, score_soft_max.`Score_0` AS `Score_0`, score_soft_max.`Score_1` AS `Score_1`, score_soft_max.`Score_2` AS `Score_2`, score_soft_max.`Score_3` AS `Score_3`, score_soft_max.`Proba_0` AS `Proba_0`, score_soft_max.`Proba_1` AS `Proba_1`, score_soft_max.`Proba_2` AS `Proba_2`, score_soft_max.`Proba_3` AS `Proba_3`, score_soft_max.`LogProba_0` AS `LogProba_0`, score_soft_max.`LogProba_1` AS `LogProba_1`, score_soft_max.`LogProba_2` AS `LogProba_2`, score_soft_max.`LogProba_3` AS `LogProba_3`, score_soft_max.`Decision` AS `Decision`, score_soft_max.`DecisionProba` AS `DecisionProba`, score_soft_max.`KEY_m` AS `KEY_m`, score_soft_max.`max_Score` AS `max_Score`, score_soft_max.`exp_delta_Score_0` AS `exp_delta_Score_0`, score_soft_max.`exp_delta_Score_1` AS `exp_delta_Score_1`, score_soft_max.`exp_delta_Score_2` AS `exp_delta_Score_2`, score_soft_max.`exp_delta_Score_3` AS `exp_delta_Score_3`, score_soft_max.`KEY_sum` AS `KEY_sum`, score_soft_max.`sum_ExpDeltaScore` AS `sum_ExpDeltaScore`, `arg_max_t_Score`.`KEY_Score` AS `KEY_Score`, `arg_max_t_Score`.`arg_max_Score` AS `arg_max_Score`, soft_max_comp.`KEY_softmax` AS `KEY_softmax`, soft_max_comp.`SoftProba_0` AS `SoftProba_0`, soft_max_comp.`SoftProba_1` AS `SoftProba_1`, soft_max_comp.`SoftProba_2` AS `SoftProba_2`, soft_max_comp.`SoftProba_3` AS `SoftProba_3` 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max.`KEY` AS `KEY_Score`, min(union_with_max.class) AS `arg_max_Score` 
FROM union_with_max 
WHERE union_with_max.`max_Score` <= union_with_max.`Score` GROUP BY union_with_max.`KEY`) AS `arg_max_t_Score` ON score_soft_max.`KEY` = `arg_max_t_Score`.`KEY_Score` LEFT OUTER JOIN (SELECT score_soft_max.`KEY` AS `KEY_softmax`, score_soft_max.`exp_delta_Score_0` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_0`, score_soft_max.`exp_delta_Score_1` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_1`, score_soft_max.`exp_delta_Score_2` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_2`, score_soft_max.`exp_delta_Score_3` / score_soft_max.`sum_ExpDeltaScore` AS `SoftProba_3` 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp.`KEY_softmax` = `arg_max_t_Score`.`KEY_Score`)
 SELECT arg_max_cte.`KEY` AS `KEY`, arg_max_cte.`Score_0` AS `Score_0`, arg_max_cte.`Score_1` AS `Score_1`, arg_max_cte.`Score_2` AS `Score_2`, arg_max_cte.`Score_3` AS `Score_3`, arg_max_cte.`SoftProba_0` AS `Proba_0`, arg_max_cte.`SoftProba_1` AS `Proba_1`, arg_max_cte.`SoftProba_2` AS `Proba_2`, arg_max_cte.`SoftProba_3` AS `Proba_3`, CASE WHEN (arg_max_cte.`SoftProba_0` IS NULL OR arg_max_cte.`SoftProba_0` > 0.0) THEN ln(arg_max_cte.`SoftProba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (arg_max_cte.`SoftProba_1` IS NULL OR arg_max_cte.`SoftProba_1` > 0.0) THEN ln(arg_max_cte.`SoftProba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, CASE WHEN (arg_max_cte.`SoftProba_2` IS NULL OR arg_max_cte.`SoftProba_2` > 0.0) THEN ln(arg_max_cte.`SoftProba_2`) ELSE -1.79769313486231e+308 END AS `LogProba_2`, CASE WHEN (arg_max_cte.`SoftProba_3` IS NULL OR arg_max_cte.`SoftProba_3` > 0.0) THEN ln(arg_max_cte.`SoftProba_3`) ELSE -1.79769313486231e+308 END AS `LogProba_3`, arg_max_cte.`arg_max_Score` AS `Decision`, CASE WHEN (arg_max_cte.`SoftProba_0` <= CASE WHEN (arg_max_cte.`SoftProba_1` <= CASE WHEN (arg_max_cte.`SoftProba_2` <= arg_max_cte.`SoftProba_3`) THEN arg_max_cte.`SoftProba_3` ELSE arg_max_cte.`SoftProba_2` END) THEN CASE WHEN (arg_max_cte.`SoftProba_2` <= arg_max_cte.`SoftProba_3`) THEN arg_max_cte.`SoftProba_3` ELSE arg_max_cte.`SoftProba_2` END ELSE arg_max_cte.`SoftProba_1` END) THEN CASE WHEN (arg_max_cte.`SoftProba_1` <= CASE WHEN (arg_max_cte.`SoftProba_2` <= arg_max_cte.`SoftProba_3`) THEN arg_max_cte.`SoftProba_3` ELSE arg_max_cte.`SoftProba_2` END) THEN CASE WHEN (arg_max_cte.`SoftProba_2` <= arg_max_cte.`SoftProba_3`) THEN arg_max_cte.`SoftProba_3` ELSE arg_max_cte.`SoftProba_2` END ELSE arg_max_cte.`SoftProba_1` END ELSE arg_max_cte.`SoftProba_0` END AS `DecisionProba` 
FROM arg_max_cte