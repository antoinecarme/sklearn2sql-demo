-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `DT_node_lookup` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.6164523363113403) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.5321599245071411) THEN CASE WHEN (`ADS`.`Feature_1` <= 897.042724609375) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 781.071533203125) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_1` <= 699.738037109375) THEN CASE WHEN (`ADS`.`Feature_0` <= 51.075653076171875) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 78.56736755371094) THEN 13 ELSE 14 END END END AS node_id_2 
FROM freidman2 AS `ADS`), 
`DT_node_data` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.6164523363113403 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 6.8212102632969615e-15 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 0.5321599245071411 AS threshold, 13 AS count, 1 AS depth, 0 AS parent_id, -269.48782837813894 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_1' AS feature, 897.042724609375 AS threshold, 11 AS count, 2 AS depth, 1 AS parent_id, -314.80517729838465 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 7 AS count, 3 AS depth, 2 AS parent_id, -376.9989534977246 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 4 AS count, 3 AS depth, 2 AS parent_id, -205.96606894953976 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 781.071533203125 AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, -20.2424093167879 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, -61.37697319971784 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 20.89215456614204 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 699.738037109375 AS threshold, 12 AS count, 1 AS depth, 0 AS parent_id, 291.9451474096506 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_0' AS feature, 51.075653076171875 AS threshold, 3 AS count, 2 AS depth, 8 AS parent_id, -186.48211672898836 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -23.89860199875409 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 9 AS parent_id, -267.7738740941055 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_0' AS feature, 78.56736755371094 AS threshold, 9 AS count, 2 AS depth, 8 AS parent_id, 451.42090212253026 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 7 AS count, 3 AS depth, 12 AS parent_id, 362.7504876627877 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, 761.7673527316291 AS `Estimator`) AS `Values`), 
`DT_Output` AS 
(SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup` LEFT OUTER JOIN `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id), 
`GB_Tree_0_0` AS 
(SELECT `DT_Output`.`KEY` AS `KEY`, `DT_Output`.`Estimator` AS `Estimator` 
FROM `DT_Output`), 
`DT_node_lookup_1` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.6164523363113403) THEN CASE WHEN (`ADS`.`Feature_1` <= 640.13134765625) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.3950181007385254) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.37313270568847656) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_1` <= 699.738037109375) THEN CASE WHEN (`ADS`.`Feature_0` <= 51.075653076171875) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 73.80859375) THEN 13 ELSE 14 END END END AS node_id_2 
FROM freidman2 AS `ADS`), 
`DT_node_data_1` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.6164523363113403 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 4.774847184307873e-14 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 640.13134765625 AS threshold, 13 AS count, 1 AS depth, 0 AS parent_id, -242.53904554032508 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 0.3950181007385254 AS threshold, 5 AS count, 2 AS depth, 1 AS parent_id, -363.5484563852701 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, -395.79628708579145 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, -315.176710334488 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, 0.37313270568847656 AS threshold, 8 AS count, 2 AS depth, 1 AS parent_id, -166.9081637622344 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 5 AS parent_id, -261.56501833809665 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -9.146739469130807 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 699.738037109375 AS threshold, 12 AS count, 1 AS depth, 0 AS parent_id, 262.7506326686855 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_0' AS feature, 51.075653076171875 AS threshold, 3 AS count, 2 AS depth, 8 AS parent_id, -167.83390505608952 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -21.508741798878702 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 9 AS parent_id, -240.9964866846949 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_0' AS feature, 73.80859375 AS threshold, 9 AS count, 2 AS depth, 8 AS parent_id, 406.2788119102772 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 12 AS parent_id, 299.2326502842561 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 12 AS parent_id, 620.3711351623193 AS `Estimator`) AS `Values`), 
`DT_Output_1` AS 
(SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_1` LEFT OUTER JOIN `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id), 
`GB_Tree_1_0` AS 
(SELECT `DT_Output_1`.`KEY` AS `KEY`, `DT_Output_1`.`Estimator` AS `Estimator` 
FROM `DT_Output_1`), 
`DT_node_lookup_2` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.6164523363113403) THEN CASE WHEN (`ADS`.`Feature_1` <= 640.13134765625) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.3950181007385254) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_2` <= 0.37313270568847656) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_1` <= 699.738037109375) THEN CASE WHEN (`ADS`.`Feature_0` <= 51.075653076171875) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 1183.24267578125) THEN 13 ELSE 14 END END END AS node_id_2 
FROM freidman2 AS `ADS`), 
`DT_node_data_2` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.6164523363113403 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 3.183231456205249e-14 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 640.13134765625 AS threshold, 13 AS count, 1 AS depth, 0 AS parent_id, -218.2851409862926 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_2' AS feature, 0.3950181007385254 AS threshold, 5 AS count, 2 AS depth, 1 AS parent_id, -327.19361074674305 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, -356.2166583772123 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, -283.65903930103923 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_2' AS feature, 0.37313270568847656 AS threshold, 8 AS count, 2 AS depth, 1 AS parent_id, -150.217347386011 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 5 AS parent_id, -235.40851650428698 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -8.232065522217738 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 699.738037109375 AS threshold, 12 AS count, 1 AS depth, 0 AS parent_id, 236.475569401817 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_0' AS feature, 51.075653076171875 AS threshold, 3 AS count, 2 AS depth, 8 AS parent_id, -151.05051455048056 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -19.357867618990838 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 9 AS parent_id, -216.89683801622542 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_1' AS feature, 1183.24267578125 AS threshold, 9 AS count, 2 AS depth, 8 AS parent_id, 365.6509307192495 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 12 AS parent_id, 266.50598180950556 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 12 AS parent_id, 563.9408285387375 AS `Estimator`) AS `Values`), 
`DT_Output_2` AS 
(SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_2` LEFT OUTER JOIN `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id), 
`GB_Tree_2_0` AS 
(SELECT `DT_Output_2`.`KEY` AS `KEY`, `DT_Output_2`.`Estimator` AS `Estimator` 
FROM `DT_Output_2`), 
`DT_node_lookup_3` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_2` <= 0.6164523363113403) THEN CASE WHEN (`ADS`.`Feature_2` <= 0.1586844027042389) THEN CASE WHEN (`ADS`.`Feature_0` <= 17.947479248046875) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS`.`Feature_1` <= 476.86590576171875) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS`.`Feature_1` <= 699.738037109375) THEN CASE WHEN (`ADS`.`Feature_1` <= 411.67596435546875) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS`.`Feature_0` <= 73.80859375) THEN 13 ELSE 14 END END END AS node_id_2 
FROM freidman2 AS `ADS`), 
`DT_node_data_3` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'Feature_2' AS feature, 0.6164523363113403 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 2.5011104298755527e-14 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 0.1586844027042389 AS threshold, 13 AS count, 1 AS depth, 0 AS parent_id, -196.4566268876633 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 17.947479248046875 AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, -317.35891916006494 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, -329.1235304042944 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, -305.59430791583543 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'Feature_1' AS feature, 476.86590576171875 AS threshold, 9 AS count, 2 AS depth, 1 AS parent_id, -142.72227476659594 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -278.42944985864557 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 5 AS parent_id, -74.86868722057112 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'Feature_1' AS feature, 699.738037109375 AS threshold, 12 AS count, 1 AS depth, 0 AS parent_id, 212.82801246163532 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'Feature_1' AS feature, 411.67596435546875 AS threshold, 3 AS count, 2 AS depth, 8 AS parent_id, -135.9454630954325 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 9 AS parent_id, -195.20715421460287 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -17.42208085709177 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'Feature_0' AS feature, 73.80859375 AS threshold, 9 AS count, 2 AS depth, 8 AS parent_id, 329.0858376473246 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 12 AS parent_id, 237.70153962939284 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 12 AS parent_id, 511.8544336831881 AS `Estimator`) AS `Values`), 
`DT_Output_3` AS 
(SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_3` LEFT OUTER JOIN `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id), 
`GB_Tree_3_0` AS 
(SELECT `DT_Output_3`.`KEY` AS `KEY`, `DT_Output_3`.`Estimator` AS `Estimator` 
FROM `DT_Output_3`), 
`Score_Union_CTE` AS 
(SELECT ensemble_score_union.`KEY` AS `KEY`, ensemble_score_union.`Estimator` AS `Estimator` 
FROM (SELECT `GB_Tree_0_0`.`KEY` AS `KEY`, `GB_Tree_0_0`.`Estimator` AS `Estimator` 
FROM `GB_Tree_0_0` UNION ALL SELECT `GB_Tree_1_0`.`KEY` AS `KEY`, `GB_Tree_1_0`.`Estimator` AS `Estimator` 
FROM `GB_Tree_1_0` UNION ALL SELECT `GB_Tree_2_0`.`KEY` AS `KEY`, `GB_Tree_2_0`.`Estimator` AS `Estimator` 
FROM `GB_Tree_2_0` UNION ALL SELECT `GB_Tree_3_0`.`KEY` AS `KEY`, `GB_Tree_3_0`.`Estimator` AS `Estimator` 
FROM `GB_Tree_3_0`) AS ensemble_score_union), 
`GradBoost_Sum_Scores` AS 
(SELECT `T`.`KEY` AS `KEY`, `T`.`Estimator` AS `Estimator` 
FROM (SELECT `Score_Union_CTE`.`KEY` AS `KEY`, sum(`Score_Union_CTE`.`Estimator`) AS `Estimator` 
FROM `Score_Union_CTE` GROUP BY `Score_Union_CTE`.`KEY`) AS `T`)
 SELECT `GradBoost_Sum_Scores`.`KEY` AS `KEY`, 480.740440691 + 0.1 * `GradBoost_Sum_Scores`.`Estimator` AS `Estimator` 
FROM `GradBoost_Sum_Scores`