-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.0166601472776 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.516272913818 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.045854831728 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.393876252945 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.480683431081 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0754525765206 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.116142518808 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.397193027446 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.289223217606 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0715919221158 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.0166601472776) / 1.04538177897 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.516272913818) / 1.31450310589 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.045854831728) / 1.56219218195 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.393876252945) / 2.3960998534 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.480683431081) / 1.20344059845 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.0754525765206) / 0.838068867257 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.116142518808) / 1.05306709377 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.397193027446) / 1.78314721805 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.289223217606) / 0.92879323246 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.0715919221158) / 0.976280049427 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
linear_model_cte AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", 0.6475588145092059 * "ADS_sca_2_OUT".scaler_2 + -0.312677288620753 * "ADS_sca_2_OUT".scaler_3 + 0.026071923683088756 * "ADS_sca_2_OUT".scaler_4 + -0.10539096357853078 * "ADS_sca_2_OUT".scaler_5 + 1.3027915566887178 * "ADS_sca_2_OUT".scaler_6 + 0.059730991502168033 * "ADS_sca_2_OUT".scaler_7 + 0.10302280993460619 * "ADS_sca_2_OUT".scaler_8 + 0.4911364023838416 * "ADS_sca_2_OUT".scaler_9 + 0.4293156848293535 * "ADS_sca_2_OUT".scaler_10 + -0.06011426140650713 * "ADS_sca_2_OUT".scaler_11 + -1.28254153173 AS "Score_0", 0.38469296641054734 * "ADS_sca_2_OUT".scaler_2 + -0.17685073349405978 * "ADS_sca_2_OUT".scaler_3 + 0.40798324856862556 * "ADS_sca_2_OUT".scaler_4 + 0.39666028498511735 * "ADS_sca_2_OUT".scaler_5 + -0.1048377447560919 * "ADS_sca_2_OUT".scaler_6 + 0.04847256328003542 * "ADS_sca_2_OUT".scaler_7 + -0.4881557792287553 * "ADS_sca_2_OUT".scaler_8 + 0.5149028940839309 * "ADS_sca_2_OUT".scaler_9 + -0.6077483437481146 * "ADS_sca_2_OUT".scaler_10 + 0.24754398542895506 * "ADS_sca_2_OUT".scaler_11 + -1.48337744781 AS "Score_1", -0.45405832954213443 * "ADS_sca_2_OUT".scaler_2 + -0.6348702523256392 * "ADS_sca_2_OUT".scaler_3 + -0.6859359326954297 * "ADS_sca_2_OUT".scaler_4 + -0.7484571726975767 * "ADS_sca_2_OUT".scaler_5 + -0.3705305322134088 * "ADS_sca_2_OUT".scaler_6 + 0.4034193037074321 * "ADS_sca_2_OUT".scaler_7 + 0.6495335293900936 * "ADS_sca_2_OUT".scaler_8 + -0.1986125851904171 * "ADS_sca_2_OUT".scaler_9 + 0.09425979272335044 * "ADS_sca_2_OUT".scaler_10 + -0.05761812187479319 * "ADS_sca_2_OUT".scaler_11 + -1.51602154938 AS "Score_2", -0.6034224456616952 * "ADS_sca_2_OUT".scaler_2 + 1.2510201187351844 * "ADS_sca_2_OUT".scaler_3 + 0.09413252577015033 * "ADS_sca_2_OUT".scaler_4 + 0.392211183530863 * "ADS_sca_2_OUT".scaler_5 + -0.4976180660459434 * "ADS_sca_2_OUT".scaler_6 + -0.056979841858667786 * "ADS_sca_2_OUT".scaler_7 + -0.15736966296201804 * "ADS_sca_2_OUT".scaler_8 + -0.7665633140978174 * "ADS_sca_2_OUT".scaler_9 + -0.15635951423934352 * "ADS_sca_2_OUT".scaler_10 + 0.051848827703399665 * "ADS_sca_2_OUT".scaler_11 + -0.942552783426 AS "Score_3" 
FROM "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT linear_model_cte."KEY" AS "KEY", linear_model_cte."Score_0" AS "Score_0", linear_model_cte."Score_1" AS "Score_1", linear_model_cte."Score_2" AS "Score_2", linear_model_cte."Score_3" AS "Score_3", (1.0 / (1.0 + exp(-linear_model_cte."Score_0"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_0", (1.0 / (1.0 + exp(-linear_model_cte."Score_1"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_1", (1.0 / (1.0 + exp(-linear_model_cte."Score_2"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_2", (1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) / (1.0 / (1.0 + exp(-linear_model_cte."Score_0")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_1")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_2")) + 1.0 / (1.0 + exp(-linear_model_cte."Score_3"))) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte