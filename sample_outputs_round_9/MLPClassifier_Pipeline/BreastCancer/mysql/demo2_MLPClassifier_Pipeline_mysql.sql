-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH `ADS_imp_1_OUT` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` IS NULL) THEN 13.8597887324 ELSE `ADS`.`Feature_0` END AS impter_2, CASE WHEN (`ADS`.`Feature_1` IS NULL) THEN 19.5079577465 ELSE `ADS`.`Feature_1` END AS impter_3, CASE WHEN (`ADS`.`Feature_2` IS NULL) THEN 90.2345774648 ELSE `ADS`.`Feature_2` END AS impter_4, CASE WHEN (`ADS`.`Feature_3` IS NULL) THEN 631.54084507 ELSE `ADS`.`Feature_3` END AS impter_5, CASE WHEN (`ADS`.`Feature_4` IS NULL) THEN 0.0950171830986 ELSE `ADS`.`Feature_4` END AS impter_6, CASE WHEN (`ADS`.`Feature_5` IS NULL) THEN 0.103067887324 ELSE `ADS`.`Feature_5` END AS impter_7, CASE WHEN (`ADS`.`Feature_6` IS NULL) THEN 0.0864928380282 ELSE `ADS`.`Feature_6` END AS impter_8, CASE WHEN (`ADS`.`Feature_7` IS NULL) THEN 0.0468693521127 ELSE `ADS`.`Feature_7` END AS impter_9, CASE WHEN (`ADS`.`Feature_8` IS NULL) THEN 0.180978169014 ELSE `ADS`.`Feature_8` END AS impter_10, CASE WHEN (`ADS`.`Feature_9` IS NULL) THEN 0.0631552112676 ELSE `ADS`.`Feature_9` END AS impter_11, CASE WHEN (`ADS`.`Feature_10` IS NULL) THEN 0.412326056338 ELSE `ADS`.`Feature_10` END AS impter_12, CASE WHEN (`ADS`.`Feature_11` IS NULL) THEN 1.27143450704 ELSE `ADS`.`Feature_11` END AS impter_13, CASE WHEN (`ADS`.`Feature_12` IS NULL) THEN 2.98328169014 ELSE `ADS`.`Feature_12` END AS impter_14, CASE WHEN (`ADS`.`Feature_13` IS NULL) THEN 41.2231690141 ELSE `ADS`.`Feature_13` END AS impter_15, CASE WHEN (`ADS`.`Feature_14` IS NULL) THEN 0.00734775352113 ELSE `ADS`.`Feature_14` END AS impter_16, CASE WHEN (`ADS`.`Feature_15` IS NULL) THEN 0.0264921690141 ELSE `ADS`.`Feature_15` END AS impter_17, CASE WHEN (`ADS`.`Feature_16` IS NULL) THEN 0.032405528169 ELSE `ADS`.`Feature_16` END AS impter_18, CASE WHEN (`ADS`.`Feature_17` IS NULL) THEN 0.0118757676056 ELSE `ADS`.`Feature_17` END AS impter_19, CASE WHEN (`ADS`.`Feature_18` IS NULL) THEN 0.0213508450704 ELSE `ADS`.`Feature_18` END AS impter_20, CASE WHEN (`ADS`.`Feature_19` IS NULL) THEN 0.00392323450704 ELSE `ADS`.`Feature_19` END AS impter_21, CASE WHEN (`ADS`.`Feature_20` IS NULL) THEN 15.8818169014 ELSE `ADS`.`Feature_20` END AS impter_22, CASE WHEN (`ADS`.`Feature_21` IS NULL) THEN 25.8104225352 ELSE `ADS`.`Feature_21` END AS impter_23, CASE WHEN (`ADS`.`Feature_22` IS NULL) THEN 105.106619718 ELSE `ADS`.`Feature_22` END AS impter_24, CASE WHEN (`ADS`.`Feature_23` IS NULL) THEN 837.940140845 ELSE `ADS`.`Feature_23` END AS impter_25, CASE WHEN (`ADS`.`Feature_24` IS NULL) THEN 0.130144507042 ELSE `ADS`.`Feature_24` END AS impter_26, CASE WHEN (`ADS`.`Feature_25` IS NULL) THEN 0.248377464789 ELSE `ADS`.`Feature_25` END AS impter_27, CASE WHEN (`ADS`.`Feature_26` IS NULL) THEN 0.259110753521 ELSE `ADS`.`Feature_26` END AS impter_28, CASE WHEN (`ADS`.`Feature_27` IS NULL) THEN 0.109523584507 ELSE `ADS`.`Feature_27` END AS impter_29, CASE WHEN (`ADS`.`Feature_28` IS NULL) THEN 0.286747183099 ELSE `ADS`.`Feature_28` END AS impter_30, CASE WHEN (`ADS`.`Feature_29` IS NULL) THEN 0.0836747887324 ELSE `ADS`.`Feature_29` END AS impter_31 
FROM `BreastCancer` AS `ADS`), 
`ADS_sca_2_OUT` AS 
(SELECT `ADS_imp_1_OUT`.`KEY` AS `KEY`, (CAST(`ADS_imp_1_OUT`.impter_2 AS DOUBLE) - 13.8597887324) / 3.48110212803 AS scaler_2, (CAST(`ADS_imp_1_OUT`.impter_3 AS DOUBLE) - 19.5079577465) / 4.43362115357 AS scaler_3, (CAST(`ADS_imp_1_OUT`.impter_4 AS DOUBLE) - 90.2345774648) / 24.1038025643 AS scaler_4, (CAST(`ADS_imp_1_OUT`.impter_5 AS DOUBLE) - 631.54084507) / 344.884606371 AS scaler_5, (CAST(`ADS_imp_1_OUT`.impter_6 AS DOUBLE) - 0.0950171830986) / 0.013946197592 AS scaler_6, (CAST(`ADS_imp_1_OUT`.impter_7 AS DOUBLE) - 0.103067887324) / 0.051633665263 AS scaler_7, (CAST(`ADS_imp_1_OUT`.impter_8 AS DOUBLE) - 0.0864928380282) / 0.0758957535964 AS scaler_8, (CAST(`ADS_imp_1_OUT`.impter_9 AS DOUBLE) - 0.0468693521127) / 0.0384321726563 AS scaler_9, (CAST(`ADS_imp_1_OUT`.impter_10 AS DOUBLE) - 0.180978169014) / 0.0276998070777 AS scaler_10, (CAST(`ADS_imp_1_OUT`.impter_11 AS DOUBLE) - 0.0631552112676) / 0.00648056962788 AS scaler_11, (CAST(`ADS_imp_1_OUT`.impter_12 AS DOUBLE) - 0.412326056338) / 0.320867363603 AS scaler_12, (CAST(`ADS_imp_1_OUT`.impter_13 AS DOUBLE) - 1.27143450704) / 0.550314789435 AS scaler_13, (CAST(`ADS_imp_1_OUT`.impter_14 AS DOUBLE) - 2.98328169014) / 2.45069631007 AS scaler_14, (CAST(`ADS_imp_1_OUT`.impter_15 AS DOUBLE) - 41.2231690141) / 52.9190319751 AS scaler_15, (CAST(`ADS_imp_1_OUT`.impter_16 AS DOUBLE) - 0.00734775352113) / 0.00276275575882 AS scaler_16, (CAST(`ADS_imp_1_OUT`.impter_17 AS DOUBLE) - 0.0264921690141) / 0.0174086380412 AS scaler_17, (CAST(`ADS_imp_1_OUT`.impter_18 AS DOUBLE) - 0.032405528169) / 0.0245629776833 AS scaler_18, (CAST(`ADS_imp_1_OUT`.impter_19 AS DOUBLE) - 0.0118757676056) / 0.00653221319467 AS scaler_19, (CAST(`ADS_imp_1_OUT`.impter_20 AS DOUBLE) - 0.0213508450704) / 0.00782019780134 AS scaler_20, (CAST(`ADS_imp_1_OUT`.impter_21 AS DOUBLE) - 0.00392323450704) / 0.00195872778537 AS scaler_21, (CAST(`ADS_imp_1_OUT`.impter_22 AS DOUBLE) - 15.8818169014) / 4.65228595124 AS scaler_22, (CAST(`ADS_imp_1_OUT`.impter_23 AS DOUBLE) - 25.8104225352) / 6.24340698716 AS scaler_23, (CAST(`ADS_imp_1_OUT`.impter_24 AS DOUBLE) - 105.106619718) / 33.2876907395 AS scaler_24, (CAST(`ADS_imp_1_OUT`.impter_25 AS DOUBLE) - 837.940140845) / 516.877799198 AS scaler_25, (CAST(`ADS_imp_1_OUT`.impter_26 AS DOUBLE) - 0.130144507042) / 0.0225481406303 AS scaler_26, (CAST(`ADS_imp_1_OUT`.impter_27 AS DOUBLE) - 0.248377464789) / 0.152062558695 AS scaler_27, (CAST(`ADS_imp_1_OUT`.impter_28 AS DOUBLE) - 0.259110753521) / 0.192531701725 AS scaler_28, (CAST(`ADS_imp_1_OUT`.impter_29 AS DOUBLE) - 0.109523584507) / 0.0679243013098 AS scaler_29, (CAST(`ADS_imp_1_OUT`.impter_30 AS DOUBLE) - 0.286747183099) / 0.0597538503605 AS scaler_30, (CAST(`ADS_imp_1_OUT`.impter_31 AS DOUBLE) - 0.0836747887324) / 0.0156791725456 AS scaler_31 
FROM `ADS_imp_1_OUT`), 
`IL` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, CAST(`ADS_sca_2_OUT`.scaler_2 AS DOUBLE) AS scaler_2, CAST(`ADS_sca_2_OUT`.scaler_3 AS DOUBLE) AS scaler_3, CAST(`ADS_sca_2_OUT`.scaler_4 AS DOUBLE) AS scaler_4, CAST(`ADS_sca_2_OUT`.scaler_5 AS DOUBLE) AS scaler_5, CAST(`ADS_sca_2_OUT`.scaler_6 AS DOUBLE) AS scaler_6, CAST(`ADS_sca_2_OUT`.scaler_7 AS DOUBLE) AS scaler_7, CAST(`ADS_sca_2_OUT`.scaler_8 AS DOUBLE) AS scaler_8, CAST(`ADS_sca_2_OUT`.scaler_9 AS DOUBLE) AS scaler_9, CAST(`ADS_sca_2_OUT`.scaler_10 AS DOUBLE) AS scaler_10, CAST(`ADS_sca_2_OUT`.scaler_11 AS DOUBLE) AS scaler_11, CAST(`ADS_sca_2_OUT`.scaler_12 AS DOUBLE) AS scaler_12, CAST(`ADS_sca_2_OUT`.scaler_13 AS DOUBLE) AS scaler_13, CAST(`ADS_sca_2_OUT`.scaler_14 AS DOUBLE) AS scaler_14, CAST(`ADS_sca_2_OUT`.scaler_15 AS DOUBLE) AS scaler_15, CAST(`ADS_sca_2_OUT`.scaler_16 AS DOUBLE) AS scaler_16, CAST(`ADS_sca_2_OUT`.scaler_17 AS DOUBLE) AS scaler_17, CAST(`ADS_sca_2_OUT`.scaler_18 AS DOUBLE) AS scaler_18, CAST(`ADS_sca_2_OUT`.scaler_19 AS DOUBLE) AS scaler_19, CAST(`ADS_sca_2_OUT`.scaler_20 AS DOUBLE) AS scaler_20, CAST(`ADS_sca_2_OUT`.scaler_21 AS DOUBLE) AS scaler_21, CAST(`ADS_sca_2_OUT`.scaler_22 AS DOUBLE) AS scaler_22, CAST(`ADS_sca_2_OUT`.scaler_23 AS DOUBLE) AS scaler_23, CAST(`ADS_sca_2_OUT`.scaler_24 AS DOUBLE) AS scaler_24, CAST(`ADS_sca_2_OUT`.scaler_25 AS DOUBLE) AS scaler_25, CAST(`ADS_sca_2_OUT`.scaler_26 AS DOUBLE) AS scaler_26, CAST(`ADS_sca_2_OUT`.scaler_27 AS DOUBLE) AS scaler_27, CAST(`ADS_sca_2_OUT`.scaler_28 AS DOUBLE) AS scaler_28, CAST(`ADS_sca_2_OUT`.scaler_29 AS DOUBLE) AS scaler_29, CAST(`ADS_sca_2_OUT`.scaler_30 AS DOUBLE) AS scaler_30, CAST(`ADS_sca_2_OUT`.scaler_31 AS DOUBLE) AS scaler_31 
FROM `ADS_sca_2_OUT`), 
`HL_BA_1` AS 
(SELECT `IL`.`KEY` AS `KEY`, -0.606093286518 * `IL`.scaler_2 + -0.358981922002 * `IL`.scaler_3 + -0.863352603744 * `IL`.scaler_4 + -1.03510398011 * `IL`.scaler_5 + -0.0675075603073 * `IL`.scaler_6 + 0.438248780723 * `IL`.scaler_7 + -0.759461391709 * `IL`.scaler_8 + -0.302890138464 * `IL`.scaler_9 + -0.163718567915 * `IL`.scaler_10 + -0.14469340324 * `IL`.scaler_11 + -0.867198944702 * `IL`.scaler_12 + -0.102640485543 * `IL`.scaler_13 + -0.489491831824 * `IL`.scaler_14 + -0.291895781249 * `IL`.scaler_15 + 0.702890467672 * `IL`.scaler_16 + 0.63872860064 * `IL`.scaler_17 + -0.14867271643 * `IL`.scaler_18 + 0.47755563286 * `IL`.scaler_19 + -0.542681083012 * `IL`.scaler_20 + 0.388699651276 * `IL`.scaler_21 + -1.53553462136 * `IL`.scaler_22 + -0.780831417101 * `IL`.scaler_23 + -0.76858800516 * `IL`.scaler_24 + -1.5177175549 * `IL`.scaler_25 + -0.190614701608 * `IL`.scaler_26 + -0.0546040831215 * `IL`.scaler_27 + -1.00103408239 * `IL`.scaler_28 + 0.0836055519135 * `IL`.scaler_29 + -1.44295715899 * `IL`.scaler_30 + 0.462981855778 * `IL`.scaler_31 + 1.75621630159 AS `NEUR_1_1`, -0.504846293043 * `IL`.scaler_2 + -0.0203386722155 * `IL`.scaler_3 + -0.826533425533 * `IL`.scaler_4 + -0.360162012523 * `IL`.scaler_5 + -0.0118625026526 * `IL`.scaler_6 + 0.371139786926 * `IL`.scaler_7 + -0.405277535266 * `IL`.scaler_8 + -0.690458441815 * `IL`.scaler_9 + 0.529839687358 * `IL`.scaler_10 + 0.862040596447 * `IL`.scaler_11 + -0.7453448899 * `IL`.scaler_12 + 0.403885204695 * `IL`.scaler_13 + -0.582352708224 * `IL`.scaler_14 + -0.201016017423 * `IL`.scaler_15 + 0.342710342164 * `IL`.scaler_16 + 0.324525917876 * `IL`.scaler_17 + 0.704614507667 * `IL`.scaler_18 + 0.328995086171 * `IL`.scaler_19 + 0.250891839226 * `IL`.scaler_20 + 1.0936565678 * `IL`.scaler_21 + -1.17214343513 * `IL`.scaler_22 + -0.362778240388 * `IL`.scaler_23 + -0.978712558437 * `IL`.scaler_24 + -0.724659102228 * `IL`.scaler_25 + -0.355617463393 * `IL`.scaler_26 + -0.0911994351499 * `IL`.scaler_27 + -0.187943481265 * `IL`.scaler_28 + -0.133156797295 * `IL`.scaler_29 + 0.0341223116326 * `IL`.scaler_30 + 0.0613301552517 * `IL`.scaler_31 + 0.813469801539 AS `NEUR_1_2`, 1.59449816312 * `IL`.scaler_2 + 0.436923995842 * `IL`.scaler_3 + 1.41097190778 * `IL`.scaler_4 + 1.1712835162 * `IL`.scaler_5 + 0.687265024621 * `IL`.scaler_6 + 0.390691398264 * `IL`.scaler_7 + 1.27107672848 * `IL`.scaler_8 + 0.97589806467 * `IL`.scaler_9 + 0.0702730353608 * `IL`.scaler_10 + -0.202406809058 * `IL`.scaler_11 + 1.03732298299 * `IL`.scaler_12 + 0.153070798779 * `IL`.scaler_13 + 1.09511303265 * `IL`.scaler_14 + 0.57147922697 * `IL`.scaler_15 + 0.0599302293144 * `IL`.scaler_16 + -0.0892664599652 * `IL`.scaler_17 + 0.319549852401 * `IL`.scaler_18 + 0.43243736178 * `IL`.scaler_19 + 0.519605836132 * `IL`.scaler_20 + -0.27696681557 * `IL`.scaler_21 + 1.23838695943 * `IL`.scaler_22 + 0.876568039578 * `IL`.scaler_23 + 0.845064713715 * `IL`.scaler_24 + 1.50491025238 * `IL`.scaler_25 + 1.59851246251 * `IL`.scaler_26 + 0.310674937014 * `IL`.scaler_27 + 1.03382392889 * `IL`.scaler_28 + 1.35664855078 * `IL`.scaler_29 + 0.308439643245 * `IL`.scaler_30 + -0.252053429265 * `IL`.scaler_31 + 0.20540325498 AS `NEUR_1_3` 
FROM `IL`), 
`HL_1_relu` AS 
(SELECT `HL_BA_1`.`KEY` AS `KEY`, CASE WHEN (`HL_BA_1`.`NEUR_1_1` >= 0.0) THEN `HL_BA_1`.`NEUR_1_1` ELSE 0.0 END AS `NEUR_1_1`, CASE WHEN (`HL_BA_1`.`NEUR_1_2` >= 0.0) THEN `HL_BA_1`.`NEUR_1_2` ELSE 0.0 END AS `NEUR_1_2`, CASE WHEN (`HL_BA_1`.`NEUR_1_3` >= 0.0) THEN `HL_BA_1`.`NEUR_1_3` ELSE 0.0 END AS `NEUR_1_3` 
FROM `HL_BA_1`), 
`HL_BA_2` AS 
(SELECT `HL_1_relu`.`KEY` AS `KEY`, 0.665990495157 * `HL_1_relu`.`NEUR_1_1` + -0.556155662868 * `HL_1_relu`.`NEUR_1_2` + -0.632620995101 * `HL_1_relu`.`NEUR_1_3` + -0.0791011029531 AS `NEUR_2_1`, -0.857886038273 * `HL_1_relu`.`NEUR_1_1` + -0.829744142005 * `HL_1_relu`.`NEUR_1_2` + 0.00889459613812 * `HL_1_relu`.`NEUR_1_3` + 1.28296790471 AS `NEUR_2_2`, 1.72018724158 * `HL_1_relu`.`NEUR_1_1` + 1.49618626297 * `HL_1_relu`.`NEUR_1_2` + -1.38183504811 * `HL_1_relu`.`NEUR_1_3` + 0.341032115793 AS `NEUR_2_3`, -1.07690135687 * `HL_1_relu`.`NEUR_1_1` + -0.303598445521 * `HL_1_relu`.`NEUR_1_2` + 0.904177119864 * `HL_1_relu`.`NEUR_1_3` + 1.3679433922 AS `NEUR_2_4`, -0.69463284814 * `HL_1_relu`.`NEUR_1_1` + -0.2694635561 * `HL_1_relu`.`NEUR_1_2` + -0.661569335098 * `HL_1_relu`.`NEUR_1_3` + -0.815750113658 AS `NEUR_2_5` 
FROM `HL_1_relu`), 
`HL_2_relu` AS 
(SELECT `HL_BA_2`.`KEY` AS `KEY`, CASE WHEN (`HL_BA_2`.`NEUR_2_1` >= 0.0) THEN `HL_BA_2`.`NEUR_2_1` ELSE 0.0 END AS `NEUR_2_1`, CASE WHEN (`HL_BA_2`.`NEUR_2_2` >= 0.0) THEN `HL_BA_2`.`NEUR_2_2` ELSE 0.0 END AS `NEUR_2_2`, CASE WHEN (`HL_BA_2`.`NEUR_2_3` >= 0.0) THEN `HL_BA_2`.`NEUR_2_3` ELSE 0.0 END AS `NEUR_2_3`, CASE WHEN (`HL_BA_2`.`NEUR_2_4` >= 0.0) THEN `HL_BA_2`.`NEUR_2_4` ELSE 0.0 END AS `NEUR_2_4`, CASE WHEN (`HL_BA_2`.`NEUR_2_5` >= 0.0) THEN `HL_BA_2`.`NEUR_2_5` ELSE 0.0 END AS `NEUR_2_5` 
FROM `HL_BA_2`), 
`OL_BA` AS 
(SELECT `HL_2_relu`.`KEY` AS `KEY`, 0.408542267303 * `HL_2_relu`.`NEUR_2_1` + -1.77193161796 * `HL_2_relu`.`NEUR_2_2` + 2.4338057769 * `HL_2_relu`.`NEUR_2_3` + -2.50146560595 * `HL_2_relu`.`NEUR_2_4` + 0.379280013357 * `HL_2_relu`.`NEUR_2_5` + -0.975518288917 AS `NEUR_3_1` 
FROM `HL_2_relu`), 
`OL_logistic` AS 
(SELECT `OL_BA`.`KEY` AS `KEY`, 1.0 / (1.0 + exp(-`OL_BA`.`NEUR_3_1`)) AS `NEUR_3_1` 
FROM `OL_BA`), 
orig_cte AS 
(SELECT `OL_logistic`.`KEY` AS `KEY`, NULL AS `Score_0`, NULL AS `Score_1`, 1.0 - `OL_logistic`.`NEUR_3_1` AS `Proba_0`, `OL_logistic`.`NEUR_3_1` AS `Proba_1`, NULL AS `LogProba_0`, NULL AS `LogProba_1`, CAST(NULL AS SIGNED INTEGER) AS `Decision`, NULL AS `DecisionProba` 
FROM `OL_logistic`), 
score_class_union AS 
(SELECT scu.`KEY_u` AS `KEY_u`, scu.class AS class, scu.`LogProba` AS `LogProba`, scu.`Proba` AS `Proba`, scu.`Score` AS `Score` 
FROM (SELECT orig_cte.`KEY` AS `KEY_u`, 0 AS class, orig_cte.`LogProba_0` AS `LogProba`, orig_cte.`Proba_0` AS `Proba`, orig_cte.`Score_0` AS `Score` 
FROM orig_cte UNION ALL SELECT orig_cte.`KEY` AS `KEY_u`, 1 AS class, orig_cte.`LogProba_1` AS `LogProba`, orig_cte.`Proba_1` AS `Proba`, orig_cte.`Score_1` AS `Score` 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.`KEY` AS `KEY`, orig_cte.`Score_0` AS `Score_0`, orig_cte.`Score_1` AS `Score_1`, orig_cte.`Proba_0` AS `Proba_0`, orig_cte.`Proba_1` AS `Proba_1`, orig_cte.`LogProba_0` AS `LogProba_0`, orig_cte.`LogProba_1` AS `LogProba_1`, orig_cte.`Decision` AS `Decision`, orig_cte.`DecisionProba` AS `DecisionProba`, max_select.`KEY_m` AS `KEY_m`, max_select.`max_Proba` AS `max_Proba` 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.`KEY_u` AS `KEY_m`, max(score_class_union.`Proba`) AS `max_Proba` 
FROM score_class_union GROUP BY score_class_union.`KEY_u`) AS max_select ON orig_cte.`KEY` = max_select.`KEY_m`), 
union_with_max AS 
(SELECT score_class_union.`KEY_u` AS `KEY_u`, score_class_union.class AS class, score_class_union.`LogProba` AS `LogProba`, score_class_union.`Proba` AS `Proba`, score_class_union.`Score` AS `Score`, score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`Decision` AS `Decision`, score_max.`DecisionProba` AS `DecisionProba`, score_max.`KEY_m` AS `KEY_m`, score_max.`max_Proba` AS `max_Proba` 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.`KEY_u` = score_max.`KEY`), 
arg_max_cte AS 
(SELECT score_max.`KEY` AS `KEY`, score_max.`Score_0` AS `Score_0`, score_max.`Score_1` AS `Score_1`, score_max.`Proba_0` AS `Proba_0`, score_max.`Proba_1` AS `Proba_1`, score_max.`LogProba_0` AS `LogProba_0`, score_max.`LogProba_1` AS `LogProba_1`, score_max.`Decision` AS `Decision`, score_max.`DecisionProba` AS `DecisionProba`, score_max.`KEY_m` AS `KEY_m`, score_max.`max_Proba` AS `max_Proba`, `arg_max_t_Proba`.`KEY_Proba` AS `KEY_Proba`, `arg_max_t_Proba`.`arg_max_Proba` AS `arg_max_Proba` 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.`KEY` AS `KEY_Proba`, min(union_with_max.class) AS `arg_max_Proba` 
FROM union_with_max 
WHERE union_with_max.`max_Proba` <= union_with_max.`Proba` GROUP BY union_with_max.`KEY`) AS `arg_max_t_Proba` ON score_max.`KEY` = `arg_max_t_Proba`.`KEY_Proba`)
 SELECT arg_max_cte.`KEY` AS `KEY`, arg_max_cte.`Score_0` AS `Score_0`, arg_max_cte.`Score_1` AS `Score_1`, arg_max_cte.`Proba_0` AS `Proba_0`, arg_max_cte.`Proba_1` AS `Proba_1`, CASE WHEN (arg_max_cte.`Proba_0` IS NULL OR arg_max_cte.`Proba_0` > 0.0) THEN ln(arg_max_cte.`Proba_0`) ELSE -1.79769313486231e+308 END AS `LogProba_0`, CASE WHEN (arg_max_cte.`Proba_1` IS NULL OR arg_max_cte.`Proba_1` > 0.0) THEN ln(arg_max_cte.`Proba_1`) ELSE -1.79769313486231e+308 END AS `LogProba_1`, arg_max_cte.`arg_max_Proba` AS `Decision`, arg_max_cte.`max_Proba` AS `DecisionProba` 
FROM arg_max_cte