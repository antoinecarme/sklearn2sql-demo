-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.0166601472776 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.516272913818 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.045854831728 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.393876252945 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.480683431081 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.0754525765206 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.116142518808 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN -0.397193027446 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.289223217606 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.0715919221158 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.0166601472776) / 1.04538177897 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.516272913818) / 1.31450310589 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.045854831728) / 1.56219218195 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.393876252945) / 2.3960998534 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.480683431081) / 1.20344059845 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.0754525765206) / 0.838068867257 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.116142518808) / 1.05306709377 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - -0.397193027446) / 1.78314721805 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.289223217606) / 0.92879323246 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.0715919221158) / 0.976280049427 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
linear_model_cte AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], 0.2586740774224872 * [ADS_sca_2_OUT].scaler_2 + -0.11319863486999354 * [ADS_sca_2_OUT].scaler_3 + -0.005717166597712184 * [ADS_sca_2_OUT].scaler_4 + -0.04632279260889958 * [ADS_sca_2_OUT].scaler_5 + 0.4693996278675321 * [ADS_sca_2_OUT].scaler_6 + -0.04827730961780139 * [ADS_sca_2_OUT].scaler_7 + 0.045314493087376576 * [ADS_sca_2_OUT].scaler_8 + 0.17955937203581465 * [ADS_sca_2_OUT].scaler_9 + 0.07664854376315951 * [ADS_sca_2_OUT].scaler_10 + -0.03070051258095602 * [ADS_sca_2_OUT].scaler_11 + -0.52 AS [Score_0], 0.1208270349663689 * [ADS_sca_2_OUT].scaler_2 + -0.1234548218350291 * [ADS_sca_2_OUT].scaler_3 + 0.17871988587091572 * [ADS_sca_2_OUT].scaler_4 + 0.1245770515356349 * [ADS_sca_2_OUT].scaler_5 + -0.05731392077687514 * [ADS_sca_2_OUT].scaler_6 + 0.0082629025084765 * [ADS_sca_2_OUT].scaler_7 + -0.1658975509989429 * [ADS_sca_2_OUT].scaler_8 + 0.15651881272589524 * [ADS_sca_2_OUT].scaler_9 + -0.20873589914082574 * [ADS_sca_2_OUT].scaler_10 + 0.13366246320004865 * [ADS_sca_2_OUT].scaler_11 + -0.6 AS [Score_1], -0.19438116943387512 * [ADS_sca_2_OUT].scaler_2 + -0.2440063284120417 * [ADS_sca_2_OUT].scaler_3 + -0.19989528374369328 * [ADS_sca_2_OUT].scaler_4 + -0.21124338918583035 * [ADS_sca_2_OUT].scaler_5 + -0.23804976535226283 * [ADS_sca_2_OUT].scaler_6 + 0.07058208437949107 * [ADS_sca_2_OUT].scaler_7 + 0.15969822383801494 * [ADS_sca_2_OUT].scaler_8 + -0.018609557697316086 * [ADS_sca_2_OUT].scaler_9 + 0.1488219878281357 * [ADS_sca_2_OUT].scaler_10 + -0.06267083236585927 * [ADS_sca_2_OUT].scaler_11 + -0.52 AS [Score_2], -0.18511994295498108 * [ADS_sca_2_OUT].scaler_2 + 0.4806597851170644 * [ADS_sca_2_OUT].scaler_3 + 0.026892564470489495 * [ADS_sca_2_OUT].scaler_4 + 0.13298913025909298 * [ADS_sca_2_OUT].scaler_5 + -0.17403594173839407 * [ADS_sca_2_OUT].scaler_6 + -0.03056767727016622 * [ADS_sca_2_OUT].scaler_7 + -0.039115165926451145 * [ADS_sca_2_OUT].scaler_8 + -0.3174686270643941 * [ADS_sca_2_OUT].scaler_9 + -0.01673463245046946 * [ADS_sca_2_OUT].scaler_10 + -0.040291118253233275 * [ADS_sca_2_OUT].scaler_11 + -0.36 AS [Score_3] 
FROM [ADS_sca_2_OUT]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], linear_model_cte.[Score_3] AS [Score_3], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [Proba_2], CAST(NULL AS FLOAT) AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_0], CAST(NULL AS FLOAT) AS [LogProba_1], CAST(NULL AS FLOAT) AS [LogProba_2], CAST(NULL AS FLOAT) AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] <= union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_max.[KEY] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision], CASE WHEN (arg_max_cte.[arg_max_Score] = 0) THEN arg_max_cte.[Proba_0] WHEN (arg_max_cte.[arg_max_Score] = 1) THEN arg_max_cte.[Proba_1] WHEN (arg_max_cte.[arg_max_Score] = 2) THEN arg_max_cte.[Proba_2] WHEN (arg_max_cte.[arg_max_Score] = 3) THEN arg_max_cte.[Proba_3] END AS [DecisionProba] 
FROM arg_max_cte