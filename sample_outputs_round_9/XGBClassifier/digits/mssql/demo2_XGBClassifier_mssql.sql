-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_36] < 0.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_28] < 4.5) THEN 3 ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_36' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.25328949093818665 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_28' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03484603390097618 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05461902171373367 AS [Score]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Score] AS [Score] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[XGB_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], [DT_Output].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 15.5) THEN CASE WHEN ([ADS].[Feature_10] < 5.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 15.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.27653631567955017 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.0279720276594162 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.054598696529865265 AS [Score]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Score] AS [Score] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[XGB_Tree_1_0] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_1].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_62] < 2.5) THEN CASE WHEN ([ADS].[Feature_37] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_45] < 5.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_62' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_37' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_45' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.04031117260456085 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.054397668689489365 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.33648881316185 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.012635377235710621 AS [Score]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Score] AS [Score] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[XGB_Tree_2_0] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_2].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_26] < 2.5) THEN CASE WHEN ([ADS].[Feature_45] < 6.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_18] < 6.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_26' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_45' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_18' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.029411766678094864 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.23826716840267181 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.0017482498660683632 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05236139893531799 AS [Score]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Score] AS [Score] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[XGB_Tree_3_0] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_3].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 6.5) THEN CASE WHEN ([ADS].[Feature_34] < 13.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 6.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_34' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.18411552906036377 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05290102958679199 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.012022629380226135 AS [Score]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Score] AS [Score] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[XGB_Tree_4_0] AS 
(SELECT [DT_Output_4].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_4].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_5] < 0.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_6] < 2.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05162659287452698 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.22454090416431427 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05438891798257828 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03249097988009453 AS [Score]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Score] AS [Score] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[XGB_Tree_5_0] AS 
(SELECT [DT_Output_5].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_5].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 0.5) THEN CASE WHEN ([ADS].[Feature_42] < 9) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_42' AS feature, 9 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.052964694797992706 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05118110775947571 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.29241877794265747 AS [Score]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Score] AS [Score] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[XGB_Tree_6_0] AS 
(SELECT [DT_Output_6].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_6].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_53] < 0.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_51] < 2.5) THEN 3 ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_53' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.24108171463012695 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_51' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.023465706035494804 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.054552026093006134 AS [Score]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Score] AS [Score] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[XGB_Tree_7_0] AS 
(SELECT [DT_Output_7].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_7].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_38] < 1.5) THEN CASE WHEN ([ADS].[Feature_21] < 4.5) THEN CASE WHEN ([ADS].[Feature_3] < 13.5) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS].[Feature_42] < 6.5) THEN 7 ELSE 8 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_38' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05104408785700798 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_3' AS feature, 13.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_42' AS feature, 6.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, -0.03249097988009453 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, -0.05091819912195206 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.006493508815765381 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.22049689292907715 AS [Score]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Score] AS [Score] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[XGB_Tree_8_0] AS 
(SELECT [DT_Output_8].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_8].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 0.5) THEN CASE WHEN ([ADS].[Feature_21] < 11.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_29] < 14.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 11.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_29' AS feature, 14.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.0077452692203223705 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.19804619252681732 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.052497055381536484 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.014440434984862804 AS [Score]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Score] AS [Score] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[XGB_Tree_9_0] AS 
(SELECT [DT_Output_9].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_9].[Score] AS [Score_9] 
FROM [DT_Output_9]), 
[DT_node_lookup_10] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_36] < 0.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_34] < 15.5) THEN 3 ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_36' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.19813935458660126 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_34' AS feature, 15.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.0542776882648468 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03381505236029625 AS [Score]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Score] AS [Score] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[XGB_Tree_0_1] AS 
(SELECT [DT_Output_10].[KEY] AS [KEY], [DT_Output_10].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 15.5) THEN CASE WHEN ([ADS].[Feature_10] < 5.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 15.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.21508590877056122 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.02610633708536625 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05425911769270897 AS [Score]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Score] AS [Score] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[XGB_Tree_1_1] AS 
(SELECT [DT_Output_11].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_11].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_11]), 
[DT_node_lookup_12] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_62] < 2.5) THEN CASE WHEN ([ADS].[Feature_37] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_46] < 0.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_62' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_37' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_46' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.03757211193442345 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05403624102473259 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.2507990896701813 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.010130412876605988 AS [Score]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].depth AS depth, [DT_node_data_12].parent_id AS parent_id, [DT_node_data_12].[Score] AS [Score] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[XGB_Tree_2_1] AS 
(SELECT [DT_Output_12].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_12].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_26] < 2.5) THEN CASE WHEN ([ADS].[Feature_43] < 6.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_18] < 6.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_26' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_43' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_18' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.2384985238313675 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.039100635796785355 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.0019093696027994156 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05188184604048729 AS [Score]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].depth AS depth, [DT_node_data_13].parent_id AS parent_id, [DT_node_data_13].[Score] AS [Score] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[XGB_Tree_3_1] AS 
(SELECT [DT_Output_13].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_13].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 4.5) THEN CASE WHEN ([ADS].[Feature_59] < 10.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 4.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_59' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.12454774230718613 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.025441670790314674 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05417456850409508 AS [Score]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].depth AS depth, [DT_node_data_14].parent_id AS parent_id, [DT_node_data_14].[Score] AS [Score] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[XGB_Tree_4_1] AS 
(SELECT [DT_Output_14].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_14].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_5] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_6] < 1.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, 1.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05213705450296402 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.2445821613073349 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.053997356444597244 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.034116633236408234 AS [Score]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].depth AS depth, [DT_node_data_15].parent_id AS parent_id, [DT_node_data_15].[Score] AS [Score] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[XGB_Tree_5_1] AS 
(SELECT [DT_Output_15].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_15].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_15]), 
[DT_node_lookup_16] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 0.5) THEN CASE WHEN ([ADS].[Feature_42] < 9) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_16] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_42' AS feature, 9 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.052548687905073166 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05070197209715843 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.22577698528766632 AS [Score]) AS [Values]), 
[DT_Output_16] AS 
(SELECT [DT_node_lookup_16].[KEY] AS [KEY], [DT_node_lookup_16].node_id_2 AS node_id_2, [DT_node_data_16].node_id AS node_id, [DT_node_data_16].feature AS feature, [DT_node_data_16].threshold AS threshold, [DT_node_data_16].depth AS depth, [DT_node_data_16].parent_id AS parent_id, [DT_node_data_16].[Score] AS [Score] 
FROM [DT_node_lookup_16] LEFT OUTER JOIN [DT_node_data_16] ON [DT_node_lookup_16].node_id_2 = [DT_node_data_16].node_id), 
[XGB_Tree_6_1] AS 
(SELECT [DT_Output_16].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_16].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_16]), 
[DT_node_lookup_17] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_60] < 3.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_5] < 12.5) THEN 3 ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_17] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_60' AS feature, 3.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.25919172167778015 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 12.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05451134592294693 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.07472824305295944 AS [Score]) AS [Values]), 
[DT_Output_17] AS 
(SELECT [DT_node_lookup_17].[KEY] AS [KEY], [DT_node_lookup_17].node_id_2 AS node_id_2, [DT_node_data_17].node_id AS node_id, [DT_node_data_17].feature AS feature, [DT_node_data_17].threshold AS threshold, [DT_node_data_17].depth AS depth, [DT_node_data_17].parent_id AS parent_id, [DT_node_data_17].[Score] AS [Score] 
FROM [DT_node_lookup_17] LEFT OUTER JOIN [DT_node_data_17] ON [DT_node_lookup_17].node_id_2 = [DT_node_data_17].node_id), 
[XGB_Tree_7_1] AS 
(SELECT [DT_Output_17].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_17].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_17]), 
[DT_node_lookup_18] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_38] < 1.5) THEN CASE WHEN ([ADS].[Feature_21] < 4.5) THEN CASE WHEN ([ADS].[Feature_34] < 5.5) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS].[Feature_42] < 6.5) THEN 7 ELSE 8 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_18] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_38' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05052895471453667 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_34' AS feature, 5.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_42' AS feature, 6.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, -0.05031026154756546 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, -0.0320974700152874 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.006647622678428888 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.17581789195537567 AS [Score]) AS [Values]), 
[DT_Output_18] AS 
(SELECT [DT_node_lookup_18].[KEY] AS [KEY], [DT_node_lookup_18].node_id_2 AS node_id_2, [DT_node_data_18].node_id AS node_id, [DT_node_data_18].feature AS feature, [DT_node_data_18].threshold AS threshold, [DT_node_data_18].depth AS depth, [DT_node_data_18].parent_id AS parent_id, [DT_node_data_18].[Score] AS [Score] 
FROM [DT_node_lookup_18] LEFT OUTER JOIN [DT_node_data_18] ON [DT_node_lookup_18].node_id_2 = [DT_node_data_18].node_id), 
[XGB_Tree_8_1] AS 
(SELECT [DT_Output_18].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_18].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_18]), 
[DT_node_lookup_19] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 1.5) THEN CASE WHEN ([ADS].[Feature_29] < 10.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_25] < 4.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_19] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_29' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_25' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.025757072493433952 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.18322588503360748 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05399147793650627 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03307962790131569 AS [Score]) AS [Values]), 
[DT_Output_19] AS 
(SELECT [DT_node_lookup_19].[KEY] AS [KEY], [DT_node_lookup_19].node_id_2 AS node_id_2, [DT_node_data_19].node_id AS node_id, [DT_node_data_19].feature AS feature, [DT_node_data_19].threshold AS threshold, [DT_node_data_19].depth AS depth, [DT_node_data_19].parent_id AS parent_id, [DT_node_data_19].[Score] AS [Score] 
FROM [DT_node_lookup_19] LEFT OUTER JOIN [DT_node_data_19] ON [DT_node_lookup_19].node_id_2 = [DT_node_data_19].node_id), 
[XGB_Tree_9_1] AS 
(SELECT [DT_Output_19].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_19].[Score] AS [Score_9] 
FROM [DT_Output_19]), 
[DT_node_lookup_20] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_36] < 0.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_28] < 4.5) THEN 3 ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_20] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_36' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.16287189722061157 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_28' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03264681622385979 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.053938139230012894 AS [Score]) AS [Values]), 
[DT_Output_20] AS 
(SELECT [DT_node_lookup_20].[KEY] AS [KEY], [DT_node_lookup_20].node_id_2 AS node_id_2, [DT_node_data_20].node_id AS node_id, [DT_node_data_20].feature AS feature, [DT_node_data_20].threshold AS threshold, [DT_node_data_20].depth AS depth, [DT_node_data_20].parent_id AS parent_id, [DT_node_data_20].[Score] AS [Score] 
FROM [DT_node_lookup_20] LEFT OUTER JOIN [DT_node_data_20] ON [DT_node_lookup_20].node_id_2 = [DT_node_data_20].node_id), 
[XGB_Tree_0_2] AS 
(SELECT [DT_Output_20].[KEY] AS [KEY], [DT_Output_20].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_20]), 
[DT_node_lookup_21] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 15.5) THEN CASE WHEN ([ADS].[Feature_10] < 4.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_21] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 15.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.1759503334760666 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.02975451387465 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05395647510886192 AS [Score]) AS [Values]), 
[DT_Output_21] AS 
(SELECT [DT_node_lookup_21].[KEY] AS [KEY], [DT_node_lookup_21].node_id_2 AS node_id_2, [DT_node_data_21].node_id AS node_id, [DT_node_data_21].feature AS feature, [DT_node_data_21].threshold AS threshold, [DT_node_data_21].depth AS depth, [DT_node_data_21].parent_id AS parent_id, [DT_node_data_21].[Score] AS [Score] 
FROM [DT_node_lookup_21] LEFT OUTER JOIN [DT_node_data_21] ON [DT_node_lookup_21].node_id_2 = [DT_node_data_21].node_id), 
[XGB_Tree_1_2] AS 
(SELECT [DT_Output_21].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_21].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_21]), 
[DT_node_lookup_22] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_62] < 2.5) THEN CASE WHEN ([ADS].[Feature_37] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_51] < 12.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_22] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_62' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_37' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_51' AS feature, 12.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.03488851711153984 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.053691308945417404 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.00011597061529755592 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.20301111042499542 AS [Score]) AS [Values]), 
[DT_Output_22] AS 
(SELECT [DT_node_lookup_22].[KEY] AS [KEY], [DT_node_lookup_22].node_id_2 AS node_id_2, [DT_node_data_22].node_id AS node_id, [DT_node_data_22].feature AS feature, [DT_node_data_22].threshold AS threshold, [DT_node_data_22].depth AS depth, [DT_node_data_22].parent_id AS parent_id, [DT_node_data_22].[Score] AS [Score] 
FROM [DT_node_lookup_22] LEFT OUTER JOIN [DT_node_data_22] ON [DT_node_lookup_22].node_id_2 = [DT_node_data_22].node_id), 
[XGB_Tree_2_2] AS 
(SELECT [DT_Output_22].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_22].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_22]), 
[DT_node_lookup_23] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 1.5) THEN CASE WHEN ([ADS].[Feature_26] < 3.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_18] < 5.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_23] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_26' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_18' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.22644875943660736 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02907872013747692 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.015575423836708069 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05355406552553177 AS [Score]) AS [Values]), 
[DT_Output_23] AS 
(SELECT [DT_node_lookup_23].[KEY] AS [KEY], [DT_node_lookup_23].node_id_2 AS node_id_2, [DT_node_data_23].node_id AS node_id, [DT_node_data_23].feature AS feature, [DT_node_data_23].threshold AS threshold, [DT_node_data_23].depth AS depth, [DT_node_data_23].parent_id AS parent_id, [DT_node_data_23].[Score] AS [Score] 
FROM [DT_node_lookup_23] LEFT OUTER JOIN [DT_node_data_23] ON [DT_node_lookup_23].node_id_2 = [DT_node_data_23].node_id), 
[XGB_Tree_3_2] AS 
(SELECT [DT_Output_23].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_23].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_23]), 
[DT_node_lookup_24] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 4.5) THEN CASE WHEN ([ADS].[Feature_59] < 10.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_24] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 4.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_59' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.1077503189444542 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02440221793949604 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.053832460194826126 AS [Score]) AS [Values]), 
[DT_Output_24] AS 
(SELECT [DT_node_lookup_24].[KEY] AS [KEY], [DT_node_lookup_24].node_id_2 AS node_id_2, [DT_node_data_24].node_id AS node_id, [DT_node_data_24].feature AS feature, [DT_node_data_24].threshold AS threshold, [DT_node_data_24].depth AS depth, [DT_node_data_24].parent_id AS parent_id, [DT_node_data_24].[Score] AS [Score] 
FROM [DT_node_lookup_24] LEFT OUTER JOIN [DT_node_data_24] ON [DT_node_lookup_24].node_id_2 = [DT_node_data_24].node_id), 
[XGB_Tree_4_2] AS 
(SELECT [DT_Output_24].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_24].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_24]), 
[DT_node_lookup_25] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_5] < 3.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_6] < 1.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_25] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, 1.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.04624384269118309 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.2156059741973877 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05366123467683792 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03330453112721443 AS [Score]) AS [Values]), 
[DT_Output_25] AS 
(SELECT [DT_node_lookup_25].[KEY] AS [KEY], [DT_node_lookup_25].node_id_2 AS node_id_2, [DT_node_data_25].node_id AS node_id, [DT_node_data_25].feature AS feature, [DT_node_data_25].threshold AS threshold, [DT_node_data_25].depth AS depth, [DT_node_data_25].parent_id AS parent_id, [DT_node_data_25].[Score] AS [Score] 
FROM [DT_node_lookup_25] LEFT OUTER JOIN [DT_node_data_25] ON [DT_node_lookup_25].node_id_2 = [DT_node_data_25].node_id), 
[XGB_Tree_5_2] AS 
(SELECT [DT_Output_25].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_25].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_25]), 
[DT_node_lookup_26] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 0.5) THEN CASE WHEN ([ADS].[Feature_2] < 3.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_26] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05214973911643028 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1978125125169754 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.036632686853408813 AS [Score]) AS [Values]), 
[DT_Output_26] AS 
(SELECT [DT_node_lookup_26].[KEY] AS [KEY], [DT_node_lookup_26].node_id_2 AS node_id_2, [DT_node_data_26].node_id AS node_id, [DT_node_data_26].feature AS feature, [DT_node_data_26].threshold AS threshold, [DT_node_data_26].depth AS depth, [DT_node_data_26].parent_id AS parent_id, [DT_node_data_26].[Score] AS [Score] 
FROM [DT_node_lookup_26] LEFT OUTER JOIN [DT_node_data_26] ON [DT_node_lookup_26].node_id_2 = [DT_node_data_26].node_id), 
[XGB_Tree_6_2] AS 
(SELECT [DT_Output_26].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_26].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_26]), 
[DT_node_lookup_27] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_60] < 2.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_5] < 12.5) THEN 3 ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_27] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_60' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.23290681838989258 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 12.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05422395095229149 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.06775796413421631 AS [Score]) AS [Values]), 
[DT_Output_27] AS 
(SELECT [DT_node_lookup_27].[KEY] AS [KEY], [DT_node_lookup_27].node_id_2 AS node_id_2, [DT_node_data_27].node_id AS node_id, [DT_node_data_27].feature AS feature, [DT_node_data_27].threshold AS threshold, [DT_node_data_27].depth AS depth, [DT_node_data_27].parent_id AS parent_id, [DT_node_data_27].[Score] AS [Score] 
FROM [DT_node_lookup_27] LEFT OUTER JOIN [DT_node_data_27] ON [DT_node_lookup_27].node_id_2 = [DT_node_data_27].node_id), 
[XGB_Tree_7_2] AS 
(SELECT [DT_Output_27].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_27].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_27]), 
[DT_node_lookup_28] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_27] < 8.5) THEN CASE WHEN ([ADS].[Feature_37] < 4.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_42] < 6.5) THEN CASE WHEN ([ADS].[Feature_58] < 6.5) THEN 7 ELSE 8 END ELSE CASE WHEN ([ADS].[Feature_51] < 11.5) THEN 9 ELSE 10 END END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_28] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_27' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_37' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_42' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.01570030115544796 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05321318656206131 AS [Score] UNION ALL SELECT 5 AS node_id, 'Feature_58' AS feature, 6.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 6 AS node_id, 'Feature_51' AS feature, 11.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 0.003783417632803321 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, -0.051207322627305984 AS [Score] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 0.20362241566181183 AS [Score] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 0.0007370776729658246 AS [Score]) AS [Values]), 
[DT_Output_28] AS 
(SELECT [DT_node_lookup_28].[KEY] AS [KEY], [DT_node_lookup_28].node_id_2 AS node_id_2, [DT_node_data_28].node_id AS node_id, [DT_node_data_28].feature AS feature, [DT_node_data_28].threshold AS threshold, [DT_node_data_28].depth AS depth, [DT_node_data_28].parent_id AS parent_id, [DT_node_data_28].[Score] AS [Score] 
FROM [DT_node_lookup_28] LEFT OUTER JOIN [DT_node_data_28] ON [DT_node_lookup_28].node_id_2 = [DT_node_data_28].node_id), 
[XGB_Tree_8_2] AS 
(SELECT [DT_Output_28].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_28].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_28]), 
[DT_node_lookup_29] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 1.5) THEN CASE WHEN ([ADS].[Feature_29] < 11.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_25] < 4.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_29] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_29' AS feature, 11.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_25' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.016095459461212158 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.16208364069461823 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05363233759999275 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03222798928618431 AS [Score]) AS [Values]), 
[DT_Output_29] AS 
(SELECT [DT_node_lookup_29].[KEY] AS [KEY], [DT_node_lookup_29].node_id_2 AS node_id_2, [DT_node_data_29].node_id AS node_id, [DT_node_data_29].feature AS feature, [DT_node_data_29].threshold AS threshold, [DT_node_data_29].depth AS depth, [DT_node_data_29].parent_id AS parent_id, [DT_node_data_29].[Score] AS [Score] 
FROM [DT_node_lookup_29] LEFT OUTER JOIN [DT_node_data_29] ON [DT_node_lookup_29].node_id_2 = [DT_node_data_29].node_id), 
[XGB_Tree_9_2] AS 
(SELECT [DT_Output_29].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_29].[Score] AS [Score_9] 
FROM [DT_Output_29]), 
[DT_node_lookup_30] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_36] < 0.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_28] < 4.5) THEN 3 ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_30] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_36' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.13833534717559814 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_28' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.0316447988152504 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.053621839731931686 AS [Score]) AS [Values]), 
[DT_Output_30] AS 
(SELECT [DT_node_lookup_30].[KEY] AS [KEY], [DT_node_lookup_30].node_id_2 AS node_id_2, [DT_node_data_30].node_id AS node_id, [DT_node_data_30].feature AS feature, [DT_node_data_30].threshold AS threshold, [DT_node_data_30].depth AS depth, [DT_node_data_30].parent_id AS parent_id, [DT_node_data_30].[Score] AS [Score] 
FROM [DT_node_lookup_30] LEFT OUTER JOIN [DT_node_data_30] ON [DT_node_lookup_30].node_id_2 = [DT_node_data_30].node_id), 
[XGB_Tree_0_3] AS 
(SELECT [DT_Output_30].[KEY] AS [KEY], [DT_Output_30].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_30]), 
[DT_node_lookup_31] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 15.5) THEN CASE WHEN ([ADS].[Feature_10] < 4.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_45] < 4.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_31] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 15.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_45' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.0276444461196661 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.053635139018297195 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.21851924061775208 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.07232126593589783 AS [Score]) AS [Values]), 
[DT_Output_31] AS 
(SELECT [DT_node_lookup_31].[KEY] AS [KEY], [DT_node_lookup_31].node_id_2 AS node_id_2, [DT_node_data_31].node_id AS node_id, [DT_node_data_31].feature AS feature, [DT_node_data_31].threshold AS threshold, [DT_node_data_31].depth AS depth, [DT_node_data_31].parent_id AS parent_id, [DT_node_data_31].[Score] AS [Score] 
FROM [DT_node_lookup_31] LEFT OUTER JOIN [DT_node_data_31] ON [DT_node_lookup_31].node_id_2 = [DT_node_data_31].node_id), 
[XGB_Tree_1_3] AS 
(SELECT [DT_Output_31].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_31].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_31]), 
[DT_node_lookup_32] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_62] < 2.5) THEN CASE WHEN ([ADS].[Feature_37] < 0.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_45] < 5.5) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS].[Feature_26] < 7.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_32] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_62' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_37' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 7.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.047285500913858414 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_45' AS feature, 5.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.17199932038784027 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.0031308054458349943 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.03309878334403038 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.053227659314870834 AS [Score]) AS [Values]), 
[DT_Output_32] AS 
(SELECT [DT_node_lookup_32].[KEY] AS [KEY], [DT_node_lookup_32].node_id_2 AS node_id_2, [DT_node_data_32].node_id AS node_id, [DT_node_data_32].feature AS feature, [DT_node_data_32].threshold AS threshold, [DT_node_data_32].depth AS depth, [DT_node_data_32].parent_id AS parent_id, [DT_node_data_32].[Score] AS [Score] 
FROM [DT_node_lookup_32] LEFT OUTER JOIN [DT_node_data_32] ON [DT_node_lookup_32].node_id_2 = [DT_node_data_32].node_id), 
[XGB_Tree_2_3] AS 
(SELECT [DT_Output_32].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_32].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_32]), 
[DT_node_lookup_33] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 1.5) THEN CASE WHEN ([ADS].[Feature_26] < 3.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_18] < 5.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_33] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_26' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_18' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.18370135128498077 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02808075211942196 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.015005427412688732 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05320890620350838 AS [Score]) AS [Values]), 
[DT_Output_33] AS 
(SELECT [DT_node_lookup_33].[KEY] AS [KEY], [DT_node_lookup_33].node_id_2 AS node_id_2, [DT_node_data_33].node_id AS node_id, [DT_node_data_33].feature AS feature, [DT_node_data_33].threshold AS threshold, [DT_node_data_33].depth AS depth, [DT_node_data_33].parent_id AS parent_id, [DT_node_data_33].[Score] AS [Score] 
FROM [DT_node_lookup_33] LEFT OUTER JOIN [DT_node_data_33] ON [DT_node_lookup_33].node_id_2 = [DT_node_data_33].node_id), 
[XGB_Tree_3_3] AS 
(SELECT [DT_Output_33].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_33].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_33]), 
[DT_node_lookup_34] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_58] < 0.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_26] < 15.5) THEN 3 ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_34] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_58' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.10850238054990768 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 15.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05211733654141426 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.011064242571592331 AS [Score]) AS [Values]), 
[DT_Output_34] AS 
(SELECT [DT_node_lookup_34].[KEY] AS [KEY], [DT_node_lookup_34].node_id_2 AS node_id_2, [DT_node_data_34].node_id AS node_id, [DT_node_data_34].feature AS feature, [DT_node_data_34].threshold AS threshold, [DT_node_data_34].depth AS depth, [DT_node_data_34].parent_id AS parent_id, [DT_node_data_34].[Score] AS [Score] 
FROM [DT_node_lookup_34] LEFT OUTER JOIN [DT_node_data_34] ON [DT_node_lookup_34].node_id_2 = [DT_node_data_34].node_id), 
[XGB_Tree_4_3] AS 
(SELECT [DT_Output_34].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_34].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_34]), 
[DT_node_lookup_35] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_5] < 5.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_49] < 0.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_35] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_49' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.036258406937122345 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.2050177901983261 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.0534198097884655 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03268788009881973 AS [Score]) AS [Values]), 
[DT_Output_35] AS 
(SELECT [DT_node_lookup_35].[KEY] AS [KEY], [DT_node_lookup_35].node_id_2 AS node_id_2, [DT_node_data_35].node_id AS node_id, [DT_node_data_35].feature AS feature, [DT_node_data_35].threshold AS threshold, [DT_node_data_35].depth AS depth, [DT_node_data_35].parent_id AS parent_id, [DT_node_data_35].[Score] AS [Score] 
FROM [DT_node_lookup_35] LEFT OUTER JOIN [DT_node_data_35] ON [DT_node_lookup_35].node_id_2 = [DT_node_data_35].node_id), 
[XGB_Tree_5_3] AS 
(SELECT [DT_Output_35].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_35].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_35]), 
[DT_node_lookup_36] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 0.5) THEN CASE WHEN ([ADS].[Feature_42] < 9) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_36] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_42' AS feature, 9 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.051766712218523026 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05010870844125748 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1604144424200058 AS [Score]) AS [Values]), 
[DT_Output_36] AS 
(SELECT [DT_node_lookup_36].[KEY] AS [KEY], [DT_node_lookup_36].node_id_2 AS node_id_2, [DT_node_data_36].node_id AS node_id, [DT_node_data_36].feature AS feature, [DT_node_data_36].threshold AS threshold, [DT_node_data_36].depth AS depth, [DT_node_data_36].parent_id AS parent_id, [DT_node_data_36].[Score] AS [Score] 
FROM [DT_node_lookup_36] LEFT OUTER JOIN [DT_node_data_36] ON [DT_node_lookup_36].node_id_2 = [DT_node_data_36].node_id), 
[XGB_Tree_6_3] AS 
(SELECT [DT_Output_36].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_36].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_36]), 
[DT_node_lookup_37] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_53] < 0.5) THEN CASE WHEN ([ADS].[Feature_30] < 0.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_61] < 1.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_37] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_53' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_30' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_61' AS feature, 1.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.04514974355697632 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.20867088437080383 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.02349243126809597 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05368110164999962 AS [Score]) AS [Values]), 
[DT_Output_37] AS 
(SELECT [DT_node_lookup_37].[KEY] AS [KEY], [DT_node_lookup_37].node_id_2 AS node_id_2, [DT_node_data_37].node_id AS node_id, [DT_node_data_37].feature AS feature, [DT_node_data_37].threshold AS threshold, [DT_node_data_37].depth AS depth, [DT_node_data_37].parent_id AS parent_id, [DT_node_data_37].[Score] AS [Score] 
FROM [DT_node_lookup_37] LEFT OUTER JOIN [DT_node_data_37] ON [DT_node_lookup_37].node_id_2 = [DT_node_data_37].node_id), 
[XGB_Tree_7_3] AS 
(SELECT [DT_Output_37].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_37].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_37]), 
[DT_node_lookup_38] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_38] < 1.5) THEN CASE WHEN ([ADS].[Feature_21] < 4.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_27] < 9.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_38] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_38' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.04973025992512703 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.04207409545779228 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_27' AS feature, 9.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.022192174568772316 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.12900234758853912 AS [Score]) AS [Values]), 
[DT_Output_38] AS 
(SELECT [DT_node_lookup_38].[KEY] AS [KEY], [DT_node_lookup_38].node_id_2 AS node_id_2, [DT_node_data_38].node_id AS node_id, [DT_node_data_38].feature AS feature, [DT_node_data_38].threshold AS threshold, [DT_node_data_38].depth AS depth, [DT_node_data_38].parent_id AS parent_id, [DT_node_data_38].[Score] AS [Score] 
FROM [DT_node_lookup_38] LEFT OUTER JOIN [DT_node_data_38] ON [DT_node_lookup_38].node_id_2 = [DT_node_data_38].node_id), 
[XGB_Tree_8_3] AS 
(SELECT [DT_Output_38].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_38].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_38]), 
[DT_node_lookup_39] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 2.5) THEN CASE WHEN ([ADS].[Feature_29] < 10.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_39] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_29' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05148709937930107 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02594754472374916 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1279628574848175 AS [Score]) AS [Values]), 
[DT_Output_39] AS 
(SELECT [DT_node_lookup_39].[KEY] AS [KEY], [DT_node_lookup_39].node_id_2 AS node_id_2, [DT_node_data_39].node_id AS node_id, [DT_node_data_39].feature AS feature, [DT_node_data_39].threshold AS threshold, [DT_node_data_39].depth AS depth, [DT_node_data_39].parent_id AS parent_id, [DT_node_data_39].[Score] AS [Score] 
FROM [DT_node_lookup_39] LEFT OUTER JOIN [DT_node_data_39] ON [DT_node_lookup_39].node_id_2 = [DT_node_data_39].node_id), 
[XGB_Tree_9_3] AS 
(SELECT [DT_Output_39].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_39].[Score] AS [Score_9] 
FROM [DT_Output_39]), 
[DT_node_lookup_40] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_28] < 2.5) THEN CASE WHEN ([ADS].[Feature_21] < 9.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_40] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_28' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 9.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.054170120507478714 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.006653342396020889 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.2090669423341751 AS [Score]) AS [Values]), 
[DT_Output_40] AS 
(SELECT [DT_node_lookup_40].[KEY] AS [KEY], [DT_node_lookup_40].node_id_2 AS node_id_2, [DT_node_data_40].node_id AS node_id, [DT_node_data_40].feature AS feature, [DT_node_data_40].threshold AS threshold, [DT_node_data_40].depth AS depth, [DT_node_data_40].parent_id AS parent_id, [DT_node_data_40].[Score] AS [Score] 
FROM [DT_node_lookup_40] LEFT OUTER JOIN [DT_node_data_40] ON [DT_node_lookup_40].node_id_2 = [DT_node_data_40].node_id), 
[XGB_Tree_0_4] AS 
(SELECT [DT_Output_40].[KEY] AS [KEY], [DT_Output_40].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_40]), 
[DT_node_lookup_41] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 15.5) THEN CASE WHEN ([ADS].[Feature_10] < 4.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_45] < 4.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_41] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 15.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_45' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.025877440348267555 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.053332049399614334 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.18310247361660004 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.0663137137889862 AS [Score]) AS [Values]), 
[DT_Output_41] AS 
(SELECT [DT_node_lookup_41].[KEY] AS [KEY], [DT_node_lookup_41].node_id_2 AS node_id_2, [DT_node_data_41].node_id AS node_id, [DT_node_data_41].feature AS feature, [DT_node_data_41].threshold AS threshold, [DT_node_data_41].depth AS depth, [DT_node_data_41].parent_id AS parent_id, [DT_node_data_41].[Score] AS [Score] 
FROM [DT_node_lookup_41] LEFT OUTER JOIN [DT_node_data_41] ON [DT_node_lookup_41].node_id_2 = [DT_node_data_41].node_id), 
[XGB_Tree_1_4] AS 
(SELECT [DT_Output_41].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_41].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_41]), 
[DT_node_lookup_42] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_62] < 2.5) THEN CASE WHEN ([ADS].[Feature_37] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_45] < 6.5) THEN CASE WHEN ([ADS].[Feature_9] < 3.5) THEN 7 ELSE 8 END ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_42] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_62' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_37' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_45' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.030898218974471092 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.0530627965927124 AS [Score] UNION ALL SELECT 5 AS node_id, 'Feature_9' AS feature, 3.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.016489215195178986 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 0.09207754582166672 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 0.19098390638828278 AS [Score]) AS [Values]), 
[DT_Output_42] AS 
(SELECT [DT_node_lookup_42].[KEY] AS [KEY], [DT_node_lookup_42].node_id_2 AS node_id_2, [DT_node_data_42].node_id AS node_id, [DT_node_data_42].feature AS feature, [DT_node_data_42].threshold AS threshold, [DT_node_data_42].depth AS depth, [DT_node_data_42].parent_id AS parent_id, [DT_node_data_42].[Score] AS [Score] 
FROM [DT_node_lookup_42] LEFT OUTER JOIN [DT_node_data_42] ON [DT_node_lookup_42].node_id_2 = [DT_node_data_42].node_id), 
[XGB_Tree_2_4] AS 
(SELECT [DT_Output_42].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_42].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_42]), 
[DT_node_lookup_43] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 1.5) THEN CASE WHEN ([ADS].[Feature_18] < 8.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_50] < 2.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_43] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_18' AS feature, 8.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_50' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.15292750298976898 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.032755184918642044 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.009228869341313839 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.050663042813539505 AS [Score]) AS [Values]), 
[DT_Output_43] AS 
(SELECT [DT_node_lookup_43].[KEY] AS [KEY], [DT_node_lookup_43].node_id_2 AS node_id_2, [DT_node_data_43].node_id AS node_id, [DT_node_data_43].feature AS feature, [DT_node_data_43].threshold AS threshold, [DT_node_data_43].depth AS depth, [DT_node_data_43].parent_id AS parent_id, [DT_node_data_43].[Score] AS [Score] 
FROM [DT_node_lookup_43] LEFT OUTER JOIN [DT_node_data_43] ON [DT_node_lookup_43].node_id_2 = [DT_node_data_43].node_id), 
[XGB_Tree_3_4] AS 
(SELECT [DT_Output_43].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_43].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_43]), 
[DT_node_lookup_44] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 4.5) THEN CASE WHEN ([ADS].[Feature_59] < 10.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_44] < 12.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_44] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 4.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_59' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_44' AS feature, 12.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.024089161306619644 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05330181121826172 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.04347560554742813 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.21814362704753876 AS [Score]) AS [Values]), 
[DT_Output_44] AS 
(SELECT [DT_node_lookup_44].[KEY] AS [KEY], [DT_node_lookup_44].node_id_2 AS node_id_2, [DT_node_data_44].node_id AS node_id, [DT_node_data_44].feature AS feature, [DT_node_data_44].threshold AS threshold, [DT_node_data_44].depth AS depth, [DT_node_data_44].parent_id AS parent_id, [DT_node_data_44].[Score] AS [Score] 
FROM [DT_node_lookup_44] LEFT OUTER JOIN [DT_node_data_44] ON [DT_node_lookup_44].node_id_2 = [DT_node_data_44].node_id), 
[XGB_Tree_4_4] AS 
(SELECT [DT_Output_44].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_44].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_44]), 
[DT_node_lookup_45] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_5] < 5.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_49] < 0.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_45] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_49' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03535770997405052 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.17234213650226593 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05308706313371658 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03197638317942619 AS [Score]) AS [Values]), 
[DT_Output_45] AS 
(SELECT [DT_node_lookup_45].[KEY] AS [KEY], [DT_node_lookup_45].node_id_2 AS node_id_2, [DT_node_data_45].node_id AS node_id, [DT_node_data_45].feature AS feature, [DT_node_data_45].threshold AS threshold, [DT_node_data_45].depth AS depth, [DT_node_data_45].parent_id AS parent_id, [DT_node_data_45].[Score] AS [Score] 
FROM [DT_node_lookup_45] LEFT OUTER JOIN [DT_node_data_45] ON [DT_node_lookup_45].node_id_2 = [DT_node_data_45].node_id), 
[XGB_Tree_5_4] AS 
(SELECT [DT_Output_45].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_45].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_45]), 
[DT_node_lookup_46] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 0.5) THEN CASE WHEN ([ADS].[Feature_46] < 5.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_46] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_46' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.051371973007917404 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.0162323247641325 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.16439636051654816 AS [Score]) AS [Values]), 
[DT_Output_46] AS 
(SELECT [DT_node_lookup_46].[KEY] AS [KEY], [DT_node_lookup_46].node_id_2 AS node_id_2, [DT_node_data_46].node_id AS node_id, [DT_node_data_46].feature AS feature, [DT_node_data_46].threshold AS threshold, [DT_node_data_46].depth AS depth, [DT_node_data_46].parent_id AS parent_id, [DT_node_data_46].[Score] AS [Score] 
FROM [DT_node_lookup_46] LEFT OUTER JOIN [DT_node_data_46] ON [DT_node_lookup_46].node_id_2 = [DT_node_data_46].node_id), 
[XGB_Tree_6_4] AS 
(SELECT [DT_Output_46].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_46].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_46]), 
[DT_node_lookup_47] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_53] < 0.5) THEN CASE WHEN ([ADS].[Feature_29] < 11.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_53] < 6.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_47] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_53' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_29' AS feature, 11.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_53' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.043492112308740616 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.17580477893352509 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.02296922728419304 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05341577157378197 AS [Score]) AS [Values]), 
[DT_Output_47] AS 
(SELECT [DT_node_lookup_47].[KEY] AS [KEY], [DT_node_lookup_47].node_id_2 AS node_id_2, [DT_node_data_47].node_id AS node_id, [DT_node_data_47].feature AS feature, [DT_node_data_47].threshold AS threshold, [DT_node_data_47].depth AS depth, [DT_node_data_47].parent_id AS parent_id, [DT_node_data_47].[Score] AS [Score] 
FROM [DT_node_lookup_47] LEFT OUTER JOIN [DT_node_data_47] ON [DT_node_lookup_47].node_id_2 = [DT_node_data_47].node_id), 
[XGB_Tree_7_4] AS 
(SELECT [DT_Output_47].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_47].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_47]), 
[DT_node_lookup_48] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_35] < 8.5) THEN CASE WHEN ([ADS].[Feature_52] < 8.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_51] < 13.5) THEN CASE WHEN ([ADS].[Feature_50] < 7.5) THEN 7 ELSE 8 END ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_48] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_35' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_52' AS feature, 8.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_51' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03175177797675133 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05232955887913704 AS [Score] UNION ALL SELECT 5 AS node_id, 'Feature_50' AS feature, 7.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.037131067365407944 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, -0.01701315864920616 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 0.12480463832616806 AS [Score]) AS [Values]), 
[DT_Output_48] AS 
(SELECT [DT_node_lookup_48].[KEY] AS [KEY], [DT_node_lookup_48].node_id_2 AS node_id_2, [DT_node_data_48].node_id AS node_id, [DT_node_data_48].feature AS feature, [DT_node_data_48].threshold AS threshold, [DT_node_data_48].depth AS depth, [DT_node_data_48].parent_id AS parent_id, [DT_node_data_48].[Score] AS [Score] 
FROM [DT_node_lookup_48] LEFT OUTER JOIN [DT_node_data_48] ON [DT_node_lookup_48].node_id_2 = [DT_node_data_48].node_id), 
[XGB_Tree_8_4] AS 
(SELECT [DT_Output_48].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_48].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_48]), 
[DT_node_lookup_49] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 1.5) THEN CASE WHEN ([ADS].[Feature_29] < 10.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_17] < 3.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_49] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_29' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_17' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.023556729778647423 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.11502081155776978 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05298672989010811 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03194743022322655 AS [Score]) AS [Values]), 
[DT_Output_49] AS 
(SELECT [DT_node_lookup_49].[KEY] AS [KEY], [DT_node_lookup_49].node_id_2 AS node_id_2, [DT_node_data_49].node_id AS node_id, [DT_node_data_49].feature AS feature, [DT_node_data_49].threshold AS threshold, [DT_node_data_49].depth AS depth, [DT_node_data_49].parent_id AS parent_id, [DT_node_data_49].[Score] AS [Score] 
FROM [DT_node_lookup_49] LEFT OUTER JOIN [DT_node_data_49] ON [DT_node_lookup_49].node_id_2 = [DT_node_data_49].node_id), 
[XGB_Tree_9_4] AS 
(SELECT [DT_Output_49].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_49].[Score] AS [Score_9] 
FROM [DT_Output_49]), 
[DT_node_lookup_50] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_28] < 2.5) THEN CASE WHEN ([ADS].[Feature_44] < 3.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_50] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_28' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_44' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05384331941604614 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.17522399127483368 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.005923475604504347 AS [Score]) AS [Values]), 
[DT_Output_50] AS 
(SELECT [DT_node_lookup_50].[KEY] AS [KEY], [DT_node_lookup_50].node_id_2 AS node_id_2, [DT_node_data_50].node_id AS node_id, [DT_node_data_50].feature AS feature, [DT_node_data_50].threshold AS threshold, [DT_node_data_50].depth AS depth, [DT_node_data_50].parent_id AS parent_id, [DT_node_data_50].[Score] AS [Score] 
FROM [DT_node_lookup_50] LEFT OUTER JOIN [DT_node_data_50] ON [DT_node_lookup_50].node_id_2 = [DT_node_data_50].node_id), 
[XGB_Tree_0_5] AS 
(SELECT [DT_Output_50].[KEY] AS [KEY], [DT_Output_50].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_50]), 
[DT_node_lookup_51] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 15.5) THEN CASE WHEN ([ADS].[Feature_10] < 4.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_52] < 13.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_51] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 15.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_52' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.024312587454915047 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05303005129098892 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.04562633857131004 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.15631496906280518 AS [Score]) AS [Values]), 
[DT_Output_51] AS 
(SELECT [DT_node_lookup_51].[KEY] AS [KEY], [DT_node_lookup_51].node_id_2 AS node_id_2, [DT_node_data_51].node_id AS node_id, [DT_node_data_51].feature AS feature, [DT_node_data_51].threshold AS threshold, [DT_node_data_51].depth AS depth, [DT_node_data_51].parent_id AS parent_id, [DT_node_data_51].[Score] AS [Score] 
FROM [DT_node_lookup_51] LEFT OUTER JOIN [DT_node_data_51] ON [DT_node_lookup_51].node_id_2 = [DT_node_data_51].node_id), 
[XGB_Tree_1_5] AS 
(SELECT [DT_Output_51].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_51].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_51]), 
[DT_node_lookup_52] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_45] < 6.5) THEN CASE WHEN ([ADS].[Feature_53] < 3.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_26] < 5.5) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS].[Feature_26] < 3.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_52] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_45' AS feature, 6.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_53' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05169127508997917 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_26' AS feature, 5.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.00641996506601572 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05317065119743347 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.1776311993598938 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.04327945038676262 AS [Score]) AS [Values]), 
[DT_Output_52] AS 
(SELECT [DT_node_lookup_52].[KEY] AS [KEY], [DT_node_lookup_52].node_id_2 AS node_id_2, [DT_node_data_52].node_id AS node_id, [DT_node_data_52].feature AS feature, [DT_node_data_52].threshold AS threshold, [DT_node_data_52].depth AS depth, [DT_node_data_52].parent_id AS parent_id, [DT_node_data_52].[Score] AS [Score] 
FROM [DT_node_lookup_52] LEFT OUTER JOIN [DT_node_data_52] ON [DT_node_lookup_52].node_id_2 = [DT_node_data_52].node_id), 
[XGB_Tree_2_5] AS 
(SELECT [DT_Output_52].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_52].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_52]), 
[DT_node_lookup_53] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_26] < 2.5) THEN CASE WHEN ([ADS].[Feature_43] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_18] < 7.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_53] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_26' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_18' AS feature, 7.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1399570107460022 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.027468105778098106 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.002670256420969963 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05016700550913811 AS [Score]) AS [Values]), 
[DT_Output_53] AS 
(SELECT [DT_node_lookup_53].[KEY] AS [KEY], [DT_node_lookup_53].node_id_2 AS node_id_2, [DT_node_data_53].node_id AS node_id, [DT_node_data_53].feature AS feature, [DT_node_data_53].threshold AS threshold, [DT_node_data_53].depth AS depth, [DT_node_data_53].parent_id AS parent_id, [DT_node_data_53].[Score] AS [Score] 
FROM [DT_node_lookup_53] LEFT OUTER JOIN [DT_node_data_53] ON [DT_node_lookup_53].node_id_2 = [DT_node_data_53].node_id), 
[XGB_Tree_3_5] AS 
(SELECT [DT_Output_53].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_53].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_53]), 
[DT_node_lookup_54] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 4.5) THEN CASE WHEN ([ADS].[Feature_59] < 10.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_44] < 13.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_54] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 4.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_59' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_44' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02337309531867504 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05298629403114319 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.027446264401078224 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.1860169768333435 AS [Score]) AS [Values]), 
[DT_Output_54] AS 
(SELECT [DT_node_lookup_54].[KEY] AS [KEY], [DT_node_lookup_54].node_id_2 AS node_id_2, [DT_node_data_54].node_id AS node_id, [DT_node_data_54].feature AS feature, [DT_node_data_54].threshold AS threshold, [DT_node_data_54].depth AS depth, [DT_node_data_54].parent_id AS parent_id, [DT_node_data_54].[Score] AS [Score] 
FROM [DT_node_lookup_54] LEFT OUTER JOIN [DT_node_data_54] ON [DT_node_lookup_54].node_id_2 = [DT_node_data_54].node_id), 
[XGB_Tree_4_5] AS 
(SELECT [DT_Output_54].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_54].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_54]), 
[DT_node_lookup_55] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_5] < 4.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_26] < 14.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_55] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 14.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03910638764500618 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1438516080379486 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05278479680418968 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03203873708844185 AS [Score]) AS [Values]), 
[DT_Output_55] AS 
(SELECT [DT_node_lookup_55].[KEY] AS [KEY], [DT_node_lookup_55].node_id_2 AS node_id_2, [DT_node_data_55].node_id AS node_id, [DT_node_data_55].feature AS feature, [DT_node_data_55].threshold AS threshold, [DT_node_data_55].depth AS depth, [DT_node_data_55].parent_id AS parent_id, [DT_node_data_55].[Score] AS [Score] 
FROM [DT_node_lookup_55] LEFT OUTER JOIN [DT_node_data_55] ON [DT_node_lookup_55].node_id_2 = [DT_node_data_55].node_id), 
[XGB_Tree_5_5] AS 
(SELECT [DT_Output_55].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_55].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_55]), 
[DT_node_lookup_56] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 0.5) THEN CASE WHEN ([ADS].[Feature_2] < 3.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_56] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_2' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05099707841873169 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.13198421895503998 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03592745214700699 AS [Score]) AS [Values]), 
[DT_Output_56] AS 
(SELECT [DT_node_lookup_56].[KEY] AS [KEY], [DT_node_lookup_56].node_id_2 AS node_id_2, [DT_node_data_56].node_id AS node_id, [DT_node_data_56].feature AS feature, [DT_node_data_56].threshold AS threshold, [DT_node_data_56].depth AS depth, [DT_node_data_56].parent_id AS parent_id, [DT_node_data_56].[Score] AS [Score] 
FROM [DT_node_lookup_56] LEFT OUTER JOIN [DT_node_data_56] ON [DT_node_lookup_56].node_id_2 = [DT_node_data_56].node_id), 
[XGB_Tree_6_5] AS 
(SELECT [DT_Output_56].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_56].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_56]), 
[DT_node_lookup_57] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_53] < 0.5) THEN CASE WHEN ([ADS].[Feature_26] < 9) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_35] < 15.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_57] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_53' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_26' AS feature, 9 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_35' AS feature, 15.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1485726535320282 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.027492118999361992 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.053147412836551666 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.024297501891851425 AS [Score]) AS [Values]), 
[DT_Output_57] AS 
(SELECT [DT_node_lookup_57].[KEY] AS [KEY], [DT_node_lookup_57].node_id_2 AS node_id_2, [DT_node_data_57].node_id AS node_id, [DT_node_data_57].feature AS feature, [DT_node_data_57].threshold AS threshold, [DT_node_data_57].depth AS depth, [DT_node_data_57].parent_id AS parent_id, [DT_node_data_57].[Score] AS [Score] 
FROM [DT_node_lookup_57] LEFT OUTER JOIN [DT_node_data_57] ON [DT_node_lookup_57].node_id_2 = [DT_node_data_57].node_id), 
[XGB_Tree_7_5] AS 
(SELECT [DT_Output_57].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_57].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_57]), 
[DT_node_lookup_58] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_38] < 1.5) THEN CASE WHEN ([ADS].[Feature_21] < 4.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_27] < 8.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_58] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_38' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.048963259905576706 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.04089634120464325 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_27' AS feature, 8.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.026473840698599815 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.1002834215760231 AS [Score]) AS [Values]), 
[DT_Output_58] AS 
(SELECT [DT_node_lookup_58].[KEY] AS [KEY], [DT_node_lookup_58].node_id_2 AS node_id_2, [DT_node_data_58].node_id AS node_id, [DT_node_data_58].feature AS feature, [DT_node_data_58].threshold AS threshold, [DT_node_data_58].depth AS depth, [DT_node_data_58].parent_id AS parent_id, [DT_node_data_58].[Score] AS [Score] 
FROM [DT_node_lookup_58] LEFT OUTER JOIN [DT_node_data_58] ON [DT_node_lookup_58].node_id_2 = [DT_node_data_58].node_id), 
[XGB_Tree_8_5] AS 
(SELECT [DT_Output_58].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_58].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_58]), 
[DT_node_lookup_59] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 2.5) THEN CASE WHEN ([ADS].[Feature_36] < 9.5) THEN CASE WHEN ([ADS].[Feature_26] < 10.5) THEN 5 ELSE 6 END ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_59] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_36' AS feature, 9.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.050677694380283356 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_26' AS feature, 10.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02584032714366913 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.13465873897075653 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.0518280565738678 AS [Score]) AS [Values]), 
[DT_Output_59] AS 
(SELECT [DT_node_lookup_59].[KEY] AS [KEY], [DT_node_lookup_59].node_id_2 AS node_id_2, [DT_node_data_59].node_id AS node_id, [DT_node_data_59].feature AS feature, [DT_node_data_59].threshold AS threshold, [DT_node_data_59].depth AS depth, [DT_node_data_59].parent_id AS parent_id, [DT_node_data_59].[Score] AS [Score] 
FROM [DT_node_lookup_59] LEFT OUTER JOIN [DT_node_data_59] ON [DT_node_lookup_59].node_id_2 = [DT_node_data_59].node_id), 
[XGB_Tree_9_5] AS 
(SELECT [DT_Output_59].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_59].[Score] AS [Score_9] 
FROM [DT_Output_59]), 
[DT_node_lookup_60] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_28] < 2.5) THEN CASE WHEN ([ADS].[Feature_21] < 9.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_60] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_28' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 9.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.053518038243055344 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.0037869431544095278 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.15434253215789795 AS [Score]) AS [Values]), 
[DT_Output_60] AS 
(SELECT [DT_node_lookup_60].[KEY] AS [KEY], [DT_node_lookup_60].node_id_2 AS node_id_2, [DT_node_data_60].node_id AS node_id, [DT_node_data_60].feature AS feature, [DT_node_data_60].threshold AS threshold, [DT_node_data_60].depth AS depth, [DT_node_data_60].parent_id AS parent_id, [DT_node_data_60].[Score] AS [Score] 
FROM [DT_node_lookup_60] LEFT OUTER JOIN [DT_node_data_60] ON [DT_node_lookup_60].node_id_2 = [DT_node_data_60].node_id), 
[XGB_Tree_0_6] AS 
(SELECT [DT_Output_60].[KEY] AS [KEY], [DT_Output_60].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_60]), 
[DT_node_lookup_61] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 15.5) THEN CASE WHEN ([ADS].[Feature_10] < 4.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_28] < 11.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_61] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 15.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_10' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_28' AS feature, 11.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.022954115644097328 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.052739549428224564 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.03755727410316467 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.1372142732143402 AS [Score]) AS [Values]), 
[DT_Output_61] AS 
(SELECT [DT_node_lookup_61].[KEY] AS [KEY], [DT_node_lookup_61].node_id_2 AS node_id_2, [DT_node_data_61].node_id AS node_id, [DT_node_data_61].feature AS feature, [DT_node_data_61].threshold AS threshold, [DT_node_data_61].depth AS depth, [DT_node_data_61].parent_id AS parent_id, [DT_node_data_61].[Score] AS [Score] 
FROM [DT_node_lookup_61] LEFT OUTER JOIN [DT_node_data_61] ON [DT_node_lookup_61].node_id_2 = [DT_node_data_61].node_id), 
[XGB_Tree_1_6] AS 
(SELECT [DT_Output_61].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_61].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_61]), 
[DT_node_lookup_62] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_45] < 6.5) THEN CASE WHEN ([ADS].[Feature_53] < 3.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_27] < 10.5) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS].[Feature_26] < 3.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_62] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_45' AS feature, 6.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_53' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05120912939310074 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_27' AS feature, 10.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.005835557356476784 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.052837617695331573 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.1522476077079773 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.035158779472112656 AS [Score]) AS [Values]), 
[DT_Output_62] AS 
(SELECT [DT_node_lookup_62].[KEY] AS [KEY], [DT_node_lookup_62].node_id_2 AS node_id_2, [DT_node_data_62].node_id AS node_id, [DT_node_data_62].feature AS feature, [DT_node_data_62].threshold AS threshold, [DT_node_data_62].depth AS depth, [DT_node_data_62].parent_id AS parent_id, [DT_node_data_62].[Score] AS [Score] 
FROM [DT_node_lookup_62] LEFT OUTER JOIN [DT_node_data_62] ON [DT_node_lookup_62].node_id_2 = [DT_node_data_62].node_id), 
[XGB_Tree_2_6] AS 
(SELECT [DT_Output_62].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_62].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_62]), 
[DT_node_lookup_63] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_18] < 8.5) THEN CASE WHEN ([ADS].[Feature_43] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_26] < 6.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_63] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_18' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.11509009450674057 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02352081425487995 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.02461104281246662 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05218261480331421 AS [Score]) AS [Values]), 
[DT_Output_63] AS 
(SELECT [DT_node_lookup_63].[KEY] AS [KEY], [DT_node_lookup_63].node_id_2 AS node_id_2, [DT_node_data_63].node_id AS node_id, [DT_node_data_63].feature AS feature, [DT_node_data_63].threshold AS threshold, [DT_node_data_63].depth AS depth, [DT_node_data_63].parent_id AS parent_id, [DT_node_data_63].[Score] AS [Score] 
FROM [DT_node_lookup_63] LEFT OUTER JOIN [DT_node_data_63] ON [DT_node_lookup_63].node_id_2 = [DT_node_data_63].node_id), 
[XGB_Tree_3_6] AS 
(SELECT [DT_Output_63].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_63].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_63]), 
[DT_node_lookup_64] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 8.5) THEN CASE WHEN ([ADS].[Feature_34] < 13.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_64] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_34' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.15930034220218658 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.0514306016266346 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.011996815912425518 AS [Score]) AS [Values]), 
[DT_Output_64] AS 
(SELECT [DT_node_lookup_64].[KEY] AS [KEY], [DT_node_lookup_64].node_id_2 AS node_id_2, [DT_node_data_64].node_id AS node_id, [DT_node_data_64].feature AS feature, [DT_node_data_64].threshold AS threshold, [DT_node_data_64].depth AS depth, [DT_node_data_64].parent_id AS parent_id, [DT_node_data_64].[Score] AS [Score] 
FROM [DT_node_lookup_64] LEFT OUTER JOIN [DT_node_data_64] ON [DT_node_lookup_64].node_id_2 = [DT_node_data_64].node_id), 
[XGB_Tree_4_6] AS 
(SELECT [DT_Output_64].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_64].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_64]), 
[DT_node_lookup_65] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_5] < 5.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_26] < 14.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_65] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 5.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 14.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.033485136926174164 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1314111202955246 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05247000977396965 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03126758337020874 AS [Score]) AS [Values]), 
[DT_Output_65] AS 
(SELECT [DT_node_lookup_65].[KEY] AS [KEY], [DT_node_lookup_65].node_id_2 AS node_id_2, [DT_node_data_65].node_id AS node_id, [DT_node_data_65].feature AS feature, [DT_node_data_65].threshold AS threshold, [DT_node_data_65].depth AS depth, [DT_node_data_65].parent_id AS parent_id, [DT_node_data_65].[Score] AS [Score] 
FROM [DT_node_lookup_65] LEFT OUTER JOIN [DT_node_data_65] ON [DT_node_lookup_65].node_id_2 = [DT_node_data_65].node_id), 
[XGB_Tree_5_6] AS 
(SELECT [DT_Output_65].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_65].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_65]), 
[DT_node_lookup_66] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_42] < 9) THEN 3 ELSE CASE WHEN ([ADS].[Feature_46] < 7.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_66] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_42' AS feature, 9 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05276501923799515 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.0500330924987793 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_46' AS feature, 7.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.05448412895202637 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.15952365100383759 AS [Score]) AS [Values]), 
[DT_Output_66] AS 
(SELECT [DT_node_lookup_66].[KEY] AS [KEY], [DT_node_lookup_66].node_id_2 AS node_id_2, [DT_node_data_66].node_id AS node_id, [DT_node_data_66].feature AS feature, [DT_node_data_66].threshold AS threshold, [DT_node_data_66].depth AS depth, [DT_node_data_66].parent_id AS parent_id, [DT_node_data_66].[Score] AS [Score] 
FROM [DT_node_lookup_66] LEFT OUTER JOIN [DT_node_data_66] ON [DT_node_lookup_66].node_id_2 = [DT_node_data_66].node_id), 
[XGB_Tree_6_6] AS 
(SELECT [DT_Output_66].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_66].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_66]), 
[DT_node_lookup_67] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_53] < 0.5) THEN CASE WHEN ([ADS].[Feature_30] < 1.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_30] < 4.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_67] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_53' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_30' AS feature, 1.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_30' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.035241443663835526 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.13686485588550568 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.052859820425510406 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.022938257083296776 AS [Score]) AS [Values]), 
[DT_Output_67] AS 
(SELECT [DT_node_lookup_67].[KEY] AS [KEY], [DT_node_lookup_67].node_id_2 AS node_id_2, [DT_node_data_67].node_id AS node_id, [DT_node_data_67].feature AS feature, [DT_node_data_67].threshold AS threshold, [DT_node_data_67].depth AS depth, [DT_node_data_67].parent_id AS parent_id, [DT_node_data_67].[Score] AS [Score] 
FROM [DT_node_lookup_67] LEFT OUTER JOIN [DT_node_data_67] ON [DT_node_lookup_67].node_id_2 = [DT_node_data_67].node_id), 
[XGB_Tree_7_6] AS 
(SELECT [DT_Output_67].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_67].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_67]), 
[DT_node_lookup_68] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_38] < 1.5) THEN CASE WHEN ([ADS].[Feature_51] < 13.5) THEN CASE WHEN ([ADS].[Feature_42] < 0.5) THEN 5 ELSE 6 END ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_68] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_38' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_51' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.048453621566295624 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_42' AS feature, 0.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.0372406430542469 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, -0.020330915227532387 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.09528307616710663 AS [Score]) AS [Values]), 
[DT_Output_68] AS 
(SELECT [DT_node_lookup_68].[KEY] AS [KEY], [DT_node_lookup_68].node_id_2 AS node_id_2, [DT_node_data_68].node_id AS node_id, [DT_node_data_68].feature AS feature, [DT_node_data_68].threshold AS threshold, [DT_node_data_68].depth AS depth, [DT_node_data_68].parent_id AS parent_id, [DT_node_data_68].[Score] AS [Score] 
FROM [DT_node_lookup_68] LEFT OUTER JOIN [DT_node_data_68] ON [DT_node_lookup_68].node_id_2 = [DT_node_data_68].node_id), 
[XGB_Tree_8_6] AS 
(SELECT [DT_Output_68].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_68].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_68]), 
[DT_node_lookup_69] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 2.5) THEN CASE WHEN ([ADS].[Feature_21] < 11.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_45] < 11.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_69] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 11.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05025141313672066 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02179681323468685 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_45' AS feature, 11.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.1247321367263794 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.052363451570272446 AS [Score]) AS [Values]), 
[DT_Output_69] AS 
(SELECT [DT_node_lookup_69].[KEY] AS [KEY], [DT_node_lookup_69].node_id_2 AS node_id_2, [DT_node_data_69].node_id AS node_id, [DT_node_data_69].feature AS feature, [DT_node_data_69].threshold AS threshold, [DT_node_data_69].depth AS depth, [DT_node_data_69].parent_id AS parent_id, [DT_node_data_69].[Score] AS [Score] 
FROM [DT_node_lookup_69] LEFT OUTER JOIN [DT_node_data_69] ON [DT_node_lookup_69].node_id_2 = [DT_node_data_69].node_id), 
[XGB_Tree_9_6] AS 
(SELECT [DT_Output_69].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_69].[Score] AS [Score_9] 
FROM [DT_Output_69]), 
[DT_node_lookup_70] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_28] < 2.5) THEN CASE WHEN ([ADS].[Feature_44] < 3.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_70] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_28' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_44' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.0532221756875515 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1367035210132599 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.003231192007660866 AS [Score]) AS [Values]), 
[DT_Output_70] AS 
(SELECT [DT_node_lookup_70].[KEY] AS [KEY], [DT_node_lookup_70].node_id_2 AS node_id_2, [DT_node_data_70].node_id AS node_id, [DT_node_data_70].feature AS feature, [DT_node_data_70].threshold AS threshold, [DT_node_data_70].depth AS depth, [DT_node_data_70].parent_id AS parent_id, [DT_node_data_70].[Score] AS [Score] 
FROM [DT_node_lookup_70] LEFT OUTER JOIN [DT_node_data_70] ON [DT_node_lookup_70].node_id_2 = [DT_node_data_70].node_id), 
[XGB_Tree_0_7] AS 
(SELECT [DT_Output_70].[KEY] AS [KEY], [DT_Output_70].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_70]), 
[DT_node_lookup_71] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 10.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_20] < 11.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_10] < 5.5) THEN 5 ELSE 6 END END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_71] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 10.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.052754826843738556 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_20' AS feature, 11.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.005462520755827427 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_10' AS feature, 5.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.17355118691921234 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.0685325637459755 AS [Score]) AS [Values]), 
[DT_Output_71] AS 
(SELECT [DT_node_lookup_71].[KEY] AS [KEY], [DT_node_lookup_71].node_id_2 AS node_id_2, [DT_node_data_71].node_id AS node_id, [DT_node_data_71].feature AS feature, [DT_node_data_71].threshold AS threshold, [DT_node_data_71].depth AS depth, [DT_node_data_71].parent_id AS parent_id, [DT_node_data_71].[Score] AS [Score] 
FROM [DT_node_lookup_71] LEFT OUTER JOIN [DT_node_data_71] ON [DT_node_lookup_71].node_id_2 = [DT_node_data_71].node_id), 
[XGB_Tree_1_7] AS 
(SELECT [DT_Output_71].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_71].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_71]), 
[DT_node_lookup_72] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_51] < 13.5) THEN CASE WHEN ([ADS].[Feature_37] < 1.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_27] < 3.5) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS].[Feature_34] < 2.5) THEN CASE WHEN ([ADS].[Feature_53] < 10.5) THEN 9 ELSE 10 END ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_72] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_51' AS feature, 13.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_37' AS feature, 1.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_34' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.02886076830327511 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_27' AS feature, 3.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, 'Feature_53' AS feature, 10.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.022274792194366455 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.03203670307993889 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.052849531173706055 AS [Score] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 0.0947684571146965 AS [Score] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 0.1614532321691513 AS [Score]) AS [Values]), 
[DT_Output_72] AS 
(SELECT [DT_node_lookup_72].[KEY] AS [KEY], [DT_node_lookup_72].node_id_2 AS node_id_2, [DT_node_data_72].node_id AS node_id, [DT_node_data_72].feature AS feature, [DT_node_data_72].threshold AS threshold, [DT_node_data_72].depth AS depth, [DT_node_data_72].parent_id AS parent_id, [DT_node_data_72].[Score] AS [Score] 
FROM [DT_node_lookup_72] LEFT OUTER JOIN [DT_node_data_72] ON [DT_node_lookup_72].node_id_2 = [DT_node_data_72].node_id), 
[XGB_Tree_2_7] AS 
(SELECT [DT_Output_72].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_72].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_72]), 
[DT_node_lookup_73] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_18] < 8.5) THEN CASE WHEN ([ADS].[Feature_43] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_26] < 6.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_73] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_18' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.10197088867425919 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.022558195516467094 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.023902513086795807 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05185893177986145 AS [Score]) AS [Values]), 
[DT_Output_73] AS 
(SELECT [DT_node_lookup_73].[KEY] AS [KEY], [DT_node_lookup_73].node_id_2 AS node_id_2, [DT_node_data_73].node_id AS node_id, [DT_node_data_73].feature AS feature, [DT_node_data_73].threshold AS threshold, [DT_node_data_73].depth AS depth, [DT_node_data_73].parent_id AS parent_id, [DT_node_data_73].[Score] AS [Score] 
FROM [DT_node_lookup_73] LEFT OUTER JOIN [DT_node_data_73] ON [DT_node_lookup_73].node_id_2 = [DT_node_data_73].node_id), 
[XGB_Tree_3_7] AS 
(SELECT [DT_Output_73].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_73].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_73]), 
[DT_node_lookup_74] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 8.5) THEN CASE WHEN ([ADS].[Feature_34] < 13.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_74] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_34' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.13951236009597778 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05103251338005066 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.011948180384933949 AS [Score]) AS [Values]), 
[DT_Output_74] AS 
(SELECT [DT_node_lookup_74].[KEY] AS [KEY], [DT_node_lookup_74].node_id_2 AS node_id_2, [DT_node_data_74].node_id AS node_id, [DT_node_data_74].feature AS feature, [DT_node_data_74].threshold AS threshold, [DT_node_data_74].depth AS depth, [DT_node_data_74].parent_id AS parent_id, [DT_node_data_74].[Score] AS [Score] 
FROM [DT_node_lookup_74] LEFT OUTER JOIN [DT_node_data_74] ON [DT_node_lookup_74].node_id_2 = [DT_node_data_74].node_id), 
[XGB_Tree_4_7] AS 
(SELECT [DT_Output_74].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_74].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_74]), 
[DT_node_lookup_75] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_5] < 2.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_35] < 0.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_75] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_35' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.049792271107435226 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.10537858307361603 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03091336600482464 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05224747210741043 AS [Score]) AS [Values]), 
[DT_Output_75] AS 
(SELECT [DT_node_lookup_75].[KEY] AS [KEY], [DT_node_lookup_75].node_id_2 AS node_id_2, [DT_node_data_75].node_id AS node_id, [DT_node_data_75].feature AS feature, [DT_node_data_75].threshold AS threshold, [DT_node_data_75].depth AS depth, [DT_node_data_75].parent_id AS parent_id, [DT_node_data_75].[Score] AS [Score] 
FROM [DT_node_lookup_75] LEFT OUTER JOIN [DT_node_data_75] ON [DT_node_lookup_75].node_id_2 = [DT_node_data_75].node_id), 
[XGB_Tree_5_7] AS 
(SELECT [DT_Output_75].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_75].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_75]), 
[DT_node_lookup_76] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_34] < 12.5) THEN CASE WHEN ([ADS].[Feature_46] < 6.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_54] < 4) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_76] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_34' AS feature, 12.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_46' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_54' AS feature, 4 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05283556506037712 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.018608152866363525 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.036015599966049194 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.14174965023994446 AS [Score]) AS [Values]), 
[DT_Output_76] AS 
(SELECT [DT_node_lookup_76].[KEY] AS [KEY], [DT_node_lookup_76].node_id_2 AS node_id_2, [DT_node_data_76].node_id AS node_id, [DT_node_data_76].feature AS feature, [DT_node_data_76].threshold AS threshold, [DT_node_data_76].depth AS depth, [DT_node_data_76].parent_id AS parent_id, [DT_node_data_76].[Score] AS [Score] 
FROM [DT_node_lookup_76] LEFT OUTER JOIN [DT_node_data_76] ON [DT_node_lookup_76].node_id_2 = [DT_node_data_76].node_id), 
[XGB_Tree_6_7] AS 
(SELECT [DT_Output_76].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_76].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_76]), 
[DT_node_lookup_77] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_60] < 7.5) THEN CASE WHEN ([ADS].[Feature_18] < 10.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_5] < 10.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_77] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_60' AS feature, 7.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_18' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.12916016578674316 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.02916671335697174 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05298449471592903 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.00023772756685502827 AS [Score]) AS [Values]), 
[DT_Output_77] AS 
(SELECT [DT_node_lookup_77].[KEY] AS [KEY], [DT_node_lookup_77].node_id_2 AS node_id_2, [DT_node_data_77].node_id AS node_id, [DT_node_data_77].feature AS feature, [DT_node_data_77].threshold AS threshold, [DT_node_data_77].depth AS depth, [DT_node_data_77].parent_id AS parent_id, [DT_node_data_77].[Score] AS [Score] 
FROM [DT_node_lookup_77] LEFT OUTER JOIN [DT_node_data_77] ON [DT_node_lookup_77].node_id_2 = [DT_node_data_77].node_id), 
[XGB_Tree_7_7] AS 
(SELECT [DT_Output_77].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_77].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_77]), 
[DT_node_lookup_78] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_35] < 8.5) THEN CASE WHEN ([ADS].[Feature_20] < 4.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_45] < 10.5) THEN CASE WHEN ([ADS].[Feature_21] < 9.5) THEN 7 ELSE 8 END ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_78] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_35' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_20' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_45' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03126152977347374 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05152587965130806 AS [Score] UNION ALL SELECT 5 AS node_id, 'Feature_21' AS feature, 9.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.07737252861261368 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, -0.042651280760765076 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 0.034776534885168076 AS [Score]) AS [Values]), 
[DT_Output_78] AS 
(SELECT [DT_node_lookup_78].[KEY] AS [KEY], [DT_node_lookup_78].node_id_2 AS node_id_2, [DT_node_data_78].node_id AS node_id, [DT_node_data_78].feature AS feature, [DT_node_data_78].threshold AS threshold, [DT_node_data_78].depth AS depth, [DT_node_data_78].parent_id AS parent_id, [DT_node_data_78].[Score] AS [Score] 
FROM [DT_node_lookup_78] LEFT OUTER JOIN [DT_node_data_78] ON [DT_node_lookup_78].node_id_2 = [DT_node_data_78].node_id), 
[XGB_Tree_8_7] AS 
(SELECT [DT_Output_78].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_78].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_78]), 
[DT_node_lookup_79] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 2.5) THEN CASE WHEN ([ADS].[Feature_29] < 10.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_44] < 0.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_79] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_29' AS feature, 10.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.04982529208064079 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.025229334831237793 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_44' AS feature, 0.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.1310027837753296 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.02712967060506344 AS [Score]) AS [Values]), 
[DT_Output_79] AS 
(SELECT [DT_node_lookup_79].[KEY] AS [KEY], [DT_node_lookup_79].node_id_2 AS node_id_2, [DT_node_data_79].node_id AS node_id, [DT_node_data_79].feature AS feature, [DT_node_data_79].threshold AS threshold, [DT_node_data_79].depth AS depth, [DT_node_data_79].parent_id AS parent_id, [DT_node_data_79].[Score] AS [Score] 
FROM [DT_node_lookup_79] LEFT OUTER JOIN [DT_node_data_79] ON [DT_node_lookup_79].node_id_2 = [DT_node_data_79].node_id), 
[XGB_Tree_9_7] AS 
(SELECT [DT_Output_79].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_79].[Score] AS [Score_9] 
FROM [DT_Output_79]), 
[DT_node_lookup_80] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_36] < 3.5) THEN CASE WHEN ([ADS].[Feature_33] < 3.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_80] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_36' AS feature, 3.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_33' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05254271626472473 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.004721518140286207 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.1265941709280014 AS [Score]) AS [Values]), 
[DT_Output_80] AS 
(SELECT [DT_node_lookup_80].[KEY] AS [KEY], [DT_node_lookup_80].node_id_2 AS node_id_2, [DT_node_data_80].node_id AS node_id, [DT_node_data_80].feature AS feature, [DT_node_data_80].threshold AS threshold, [DT_node_data_80].depth AS depth, [DT_node_data_80].parent_id AS parent_id, [DT_node_data_80].[Score] AS [Score] 
FROM [DT_node_lookup_80] LEFT OUTER JOIN [DT_node_data_80] ON [DT_node_lookup_80].node_id_2 = [DT_node_data_80].node_id), 
[XGB_Tree_0_8] AS 
(SELECT [DT_Output_80].[KEY] AS [KEY], [DT_Output_80].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_80]), 
[DT_node_lookup_81] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 10.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_20] < 11.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_10] < 5.5) THEN 5 ELSE 6 END END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_81] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 10.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05245932564139366 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_20' AS feature, 11.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.005105135031044483 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_10' AS feature, 5.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.15056297183036804 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.06196044757962227 AS [Score]) AS [Values]), 
[DT_Output_81] AS 
(SELECT [DT_node_lookup_81].[KEY] AS [KEY], [DT_node_lookup_81].node_id_2 AS node_id_2, [DT_node_data_81].node_id AS node_id, [DT_node_data_81].feature AS feature, [DT_node_data_81].threshold AS threshold, [DT_node_data_81].depth AS depth, [DT_node_data_81].parent_id AS parent_id, [DT_node_data_81].[Score] AS [Score] 
FROM [DT_node_lookup_81] LEFT OUTER JOIN [DT_node_data_81] ON [DT_node_lookup_81].node_id_2 = [DT_node_data_81].node_id), 
[XGB_Tree_1_8] AS 
(SELECT [DT_Output_81].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_81].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_81]), 
[DT_node_lookup_82] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_26] < 10.5) THEN CASE WHEN ([ADS].[Feature_38] < 0.5) THEN CASE WHEN ([ADS].[Feature_54] < 1.5) THEN 5 ELSE 6 END ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_82] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_26' AS feature, 10.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_38' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05301539972424507 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_54' AS feature, 1.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03943663090467453 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, -0.013915820978581905 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.1187494620680809 AS [Score]) AS [Values]), 
[DT_Output_82] AS 
(SELECT [DT_node_lookup_82].[KEY] AS [KEY], [DT_node_lookup_82].node_id_2 AS node_id_2, [DT_node_data_82].node_id AS node_id, [DT_node_data_82].feature AS feature, [DT_node_data_82].threshold AS threshold, [DT_node_data_82].depth AS depth, [DT_node_data_82].parent_id AS parent_id, [DT_node_data_82].[Score] AS [Score] 
FROM [DT_node_lookup_82] LEFT OUTER JOIN [DT_node_data_82] ON [DT_node_lookup_82].node_id_2 = [DT_node_data_82].node_id), 
[XGB_Tree_2_8] AS 
(SELECT [DT_Output_82].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_82].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_82]), 
[DT_node_lookup_83] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_18] < 8.5) THEN CASE WHEN ([ADS].[Feature_59] < 13.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_51] < 8.5) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS].[Feature_26] < 6.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_83] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_18' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_59' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_26' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03476887568831444 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_51' AS feature, 8.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.023217467591166496 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05153963714838028 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.13405728340148926 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.013674693182110786 AS [Score]) AS [Values]), 
[DT_Output_83] AS 
(SELECT [DT_node_lookup_83].[KEY] AS [KEY], [DT_node_lookup_83].node_id_2 AS node_id_2, [DT_node_data_83].node_id AS node_id, [DT_node_data_83].feature AS feature, [DT_node_data_83].threshold AS threshold, [DT_node_data_83].depth AS depth, [DT_node_data_83].parent_id AS parent_id, [DT_node_data_83].[Score] AS [Score] 
FROM [DT_node_lookup_83] LEFT OUTER JOIN [DT_node_data_83] ON [DT_node_lookup_83].node_id_2 = [DT_node_data_83].node_id), 
[XGB_Tree_3_8] AS 
(SELECT [DT_Output_83].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_83].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_83]), 
[DT_node_lookup_84] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 8.5) THEN CASE WHEN ([ADS].[Feature_34] < 13.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_84] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_34' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.12361373007297516 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.050631504505872726 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.012042473070323467 AS [Score]) AS [Values]), 
[DT_Output_84] AS 
(SELECT [DT_node_lookup_84].[KEY] AS [KEY], [DT_node_lookup_84].node_id_2 AS node_id_2, [DT_node_data_84].node_id AS node_id, [DT_node_data_84].feature AS feature, [DT_node_data_84].threshold AS threshold, [DT_node_data_84].depth AS depth, [DT_node_data_84].parent_id AS parent_id, [DT_node_data_84].[Score] AS [Score] 
FROM [DT_node_lookup_84] LEFT OUTER JOIN [DT_node_data_84] ON [DT_node_lookup_84].node_id_2 = [DT_node_data_84].node_id), 
[XGB_Tree_4_8] AS 
(SELECT [DT_Output_84].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_84].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_84]), 
[DT_node_lookup_85] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 2.5) THEN CASE WHEN ([ADS].[Feature_5] < 2.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_85] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.049663010984659195 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.04981372877955437 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.09643899649381638 AS [Score]) AS [Values]), 
[DT_Output_85] AS 
(SELECT [DT_node_lookup_85].[KEY] AS [KEY], [DT_node_lookup_85].node_id_2 AS node_id_2, [DT_node_data_85].node_id AS node_id, [DT_node_data_85].feature AS feature, [DT_node_data_85].threshold AS threshold, [DT_node_data_85].depth AS depth, [DT_node_data_85].parent_id AS parent_id, [DT_node_data_85].[Score] AS [Score] 
FROM [DT_node_lookup_85] LEFT OUTER JOIN [DT_node_data_85] ON [DT_node_lookup_85].node_id_2 = [DT_node_data_85].node_id), 
[XGB_Tree_5_8] AS 
(SELECT [DT_Output_85].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_85].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_85]), 
[DT_node_lookup_86] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 1.5) THEN CASE WHEN ([ADS].[Feature_46] < 1.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_46] < 9.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_86] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_46' AS feature, 1.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05226503685116768 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03622578829526901 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_46' AS feature, 9.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.06630780547857285 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.12076779454946518 AS [Score]) AS [Values]), 
[DT_Output_86] AS 
(SELECT [DT_node_lookup_86].[KEY] AS [KEY], [DT_node_lookup_86].node_id_2 AS node_id_2, [DT_node_data_86].node_id AS node_id, [DT_node_data_86].feature AS feature, [DT_node_data_86].threshold AS threshold, [DT_node_data_86].depth AS depth, [DT_node_data_86].parent_id AS parent_id, [DT_node_data_86].[Score] AS [Score] 
FROM [DT_node_lookup_86] LEFT OUTER JOIN [DT_node_data_86] ON [DT_node_lookup_86].node_id_2 = [DT_node_data_86].node_id), 
[XGB_Tree_6_8] AS 
(SELECT [DT_Output_86].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_86].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_86]), 
[DT_node_lookup_87] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_53] < 0.5) THEN CASE WHEN ([ADS].[Feature_19] < 6.5) THEN CASE WHEN ([ADS].[Feature_9] < 0.5) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_58] < 0.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_87] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_53' AS feature, 0.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_19' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_58' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_9' AS feature, 0.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.006348771043121815 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.02201390452682972 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05231940746307373 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.12927396595478058 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.0764847844839096 AS [Score]) AS [Values]), 
[DT_Output_87] AS 
(SELECT [DT_node_lookup_87].[KEY] AS [KEY], [DT_node_lookup_87].node_id_2 AS node_id_2, [DT_node_data_87].node_id AS node_id, [DT_node_data_87].feature AS feature, [DT_node_data_87].threshold AS threshold, [DT_node_data_87].depth AS depth, [DT_node_data_87].parent_id AS parent_id, [DT_node_data_87].[Score] AS [Score] 
FROM [DT_node_lookup_87] LEFT OUTER JOIN [DT_node_data_87] ON [DT_node_lookup_87].node_id_2 = [DT_node_data_87].node_id), 
[XGB_Tree_7_8] AS 
(SELECT [DT_Output_87].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_87].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_87]), 
[DT_node_lookup_88] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_38] < 1.5) THEN CASE WHEN ([ADS].[Feature_21] < 4.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_27] < 8.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_88] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_38' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.04775222763419151 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03958527371287346 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_27' AS feature, 8.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.02528780698776245 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.07870788872241974 AS [Score]) AS [Values]), 
[DT_Output_88] AS 
(SELECT [DT_node_lookup_88].[KEY] AS [KEY], [DT_node_lookup_88].node_id_2 AS node_id_2, [DT_node_data_88].node_id AS node_id, [DT_node_data_88].feature AS feature, [DT_node_data_88].threshold AS threshold, [DT_node_data_88].depth AS depth, [DT_node_data_88].parent_id AS parent_id, [DT_node_data_88].[Score] AS [Score] 
FROM [DT_node_lookup_88] LEFT OUTER JOIN [DT_node_data_88] ON [DT_node_lookup_88].node_id_2 = [DT_node_data_88].node_id), 
[XGB_Tree_8_8] AS 
(SELECT [DT_Output_88].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_88].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_88]), 
[DT_node_lookup_89] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 2.5) THEN CASE WHEN ([ADS].[Feature_36] < 9.5) THEN CASE WHEN ([ADS].[Feature_34] < 3.5) THEN 5 ELSE 6 END ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_89] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_36' AS feature, 9.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.04941139742732048 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_34' AS feature, 3.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02610454335808754 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.12646208703517914 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.005327628459781408 AS [Score]) AS [Values]), 
[DT_Output_89] AS 
(SELECT [DT_node_lookup_89].[KEY] AS [KEY], [DT_node_lookup_89].node_id_2 AS node_id_2, [DT_node_data_89].node_id AS node_id, [DT_node_data_89].feature AS feature, [DT_node_data_89].threshold AS threshold, [DT_node_data_89].depth AS depth, [DT_node_data_89].parent_id AS parent_id, [DT_node_data_89].[Score] AS [Score] 
FROM [DT_node_lookup_89] LEFT OUTER JOIN [DT_node_data_89] ON [DT_node_lookup_89].node_id_2 = [DT_node_data_89].node_id), 
[XGB_Tree_9_8] AS 
(SELECT [DT_Output_89].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_89].[Score] AS [Score_9] 
FROM [DT_Output_89]), 
[DT_node_lookup_90] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_28] < 2.5) THEN CASE WHEN ([ADS].[Feature_21] < 9.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_90] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_28' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 9.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.052706170827150345 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.0013565392000600696 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.11509275436401367 AS [Score]) AS [Values]), 
[DT_Output_90] AS 
(SELECT [DT_node_lookup_90].[KEY] AS [KEY], [DT_node_lookup_90].node_id_2 AS node_id_2, [DT_node_data_90].node_id AS node_id, [DT_node_data_90].feature AS feature, [DT_node_data_90].threshold AS threshold, [DT_node_data_90].depth AS depth, [DT_node_data_90].parent_id AS parent_id, [DT_node_data_90].[Score] AS [Score] 
FROM [DT_node_lookup_90] LEFT OUTER JOIN [DT_node_data_90] ON [DT_node_lookup_90].node_id_2 = [DT_node_data_90].node_id), 
[XGB_Tree_0_9] AS 
(SELECT [DT_Output_90].[KEY] AS [KEY], [DT_Output_90].[Score] AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_90]), 
[DT_node_lookup_91] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_19] < 10.5) THEN 1 ELSE CASE WHEN ([ADS].[Feature_38] < 0.5) THEN CASE WHEN ([ADS].[Feature_20] < 11.5) THEN 5 ELSE 6 END ELSE 4 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_91] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_19' AS feature, 10.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.0521792471408844 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_38' AS feature, 0.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_20' AS feature, 11.5 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.031201014295220375 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.024221494793891907 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.1243632435798645 AS [Score]) AS [Values]), 
[DT_Output_91] AS 
(SELECT [DT_node_lookup_91].[KEY] AS [KEY], [DT_node_lookup_91].node_id_2 AS node_id_2, [DT_node_data_91].node_id AS node_id, [DT_node_data_91].feature AS feature, [DT_node_data_91].threshold AS threshold, [DT_node_data_91].depth AS depth, [DT_node_data_91].parent_id AS parent_id, [DT_node_data_91].[Score] AS [Score] 
FROM [DT_node_lookup_91] LEFT OUTER JOIN [DT_node_data_91] ON [DT_node_lookup_91].node_id_2 = [DT_node_data_91].node_id), 
[XGB_Tree_1_9] AS 
(SELECT [DT_Output_91].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_91].[Score] AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_91]), 
[DT_node_lookup_92] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_26] < 10.5) THEN CASE WHEN ([ADS].[Feature_51] < 13.5) THEN CASE WHEN ([ADS].[Feature_37] < 4.5) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS].[Feature_54] < 3.5) THEN 7 ELSE 8 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_92] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_26' AS feature, 10.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_51' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.05268145352602005 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_37' AS feature, 4.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_54' AS feature, 3.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.04092574492096901 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, -0.04549993947148323 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.02723008766770363 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.12254142016172409 AS [Score]) AS [Values]), 
[DT_Output_92] AS 
(SELECT [DT_node_lookup_92].[KEY] AS [KEY], [DT_node_lookup_92].node_id_2 AS node_id_2, [DT_node_data_92].node_id AS node_id, [DT_node_data_92].feature AS feature, [DT_node_data_92].threshold AS threshold, [DT_node_data_92].depth AS depth, [DT_node_data_92].parent_id AS parent_id, [DT_node_data_92].[Score] AS [Score] 
FROM [DT_node_lookup_92] LEFT OUTER JOIN [DT_node_data_92] ON [DT_node_lookup_92].node_id_2 = [DT_node_data_92].node_id), 
[XGB_Tree_2_9] AS 
(SELECT [DT_Output_92].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], [DT_Output_92].[Score] AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_92]), 
[DT_node_lookup_93] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_18] < 8.5) THEN CASE WHEN ([ADS].[Feature_59] < 13.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_51] < 8.5) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS].[Feature_19] < 2.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_93] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_18' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_59' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_19' AS feature, 2.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03389392048120499 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_51' AS feature, 8.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.02322978712618351 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.05146431550383568 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.12046153843402863 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.012984484434127808 AS [Score]) AS [Values]), 
[DT_Output_93] AS 
(SELECT [DT_node_lookup_93].[KEY] AS [KEY], [DT_node_lookup_93].node_id_2 AS node_id_2, [DT_node_data_93].node_id AS node_id, [DT_node_data_93].feature AS feature, [DT_node_data_93].threshold AS threshold, [DT_node_data_93].depth AS depth, [DT_node_data_93].parent_id AS parent_id, [DT_node_data_93].[Score] AS [Score] 
FROM [DT_node_lookup_93] LEFT OUTER JOIN [DT_node_data_93] ON [DT_node_lookup_93].node_id_2 = [DT_node_data_93].node_id), 
[XGB_Tree_3_9] AS 
(SELECT [DT_Output_93].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], [DT_Output_93].[Score] AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_93]), 
[DT_node_lookup_94] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_33] < 8.5) THEN CASE WHEN ([ADS].[Feature_34] < 13.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_94] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_33' AS feature, 8.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_34' AS feature, 13.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 0.11100669205188751 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05021306872367859 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.011628902517259121 AS [Score]) AS [Values]), 
[DT_Output_94] AS 
(SELECT [DT_node_lookup_94].[KEY] AS [KEY], [DT_node_lookup_94].node_id_2 AS node_id_2, [DT_node_data_94].node_id AS node_id, [DT_node_data_94].feature AS feature, [DT_node_data_94].threshold AS threshold, [DT_node_data_94].depth AS depth, [DT_node_data_94].parent_id AS parent_id, [DT_node_data_94].[Score] AS [Score] 
FROM [DT_node_lookup_94] LEFT OUTER JOIN [DT_node_data_94] ON [DT_node_lookup_94].node_id_2 = [DT_node_data_94].node_id), 
[XGB_Tree_4_9] AS 
(SELECT [DT_Output_94].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], [DT_Output_94].[Score] AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_94]), 
[DT_node_lookup_95] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_21] < 2.5) THEN CASE WHEN ([ADS].[Feature_5] < 6.5) THEN 3 ELSE 4 END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_95] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_21' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.04925284907221794 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.03014596737921238 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.10400108247995377 AS [Score]) AS [Values]), 
[DT_Output_95] AS 
(SELECT [DT_node_lookup_95].[KEY] AS [KEY], [DT_node_lookup_95].node_id_2 AS node_id_2, [DT_node_data_95].node_id AS node_id, [DT_node_data_95].feature AS feature, [DT_node_data_95].threshold AS threshold, [DT_node_data_95].depth AS depth, [DT_node_data_95].parent_id AS parent_id, [DT_node_data_95].[Score] AS [Score] 
FROM [DT_node_lookup_95] LEFT OUTER JOIN [DT_node_data_95] ON [DT_node_lookup_95].node_id_2 = [DT_node_data_95].node_id), 
[XGB_Tree_5_9] AS 
(SELECT [DT_Output_95].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], [DT_Output_95].[Score] AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_95]), 
[DT_node_lookup_96] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_34] < 12.5) THEN CASE WHEN ([ADS].[Feature_46] < 6.5) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_54] < 4) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_96] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_34' AS feature, 12.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_46' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_54' AS feature, 4 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.05228777602314949 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.01816881075501442 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.03412230685353279 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.11818698793649673 AS [Score]) AS [Values]), 
[DT_Output_96] AS 
(SELECT [DT_node_lookup_96].[KEY] AS [KEY], [DT_node_lookup_96].node_id_2 AS node_id_2, [DT_node_data_96].node_id AS node_id, [DT_node_data_96].feature AS feature, [DT_node_data_96].threshold AS threshold, [DT_node_data_96].depth AS depth, [DT_node_data_96].parent_id AS parent_id, [DT_node_data_96].[Score] AS [Score] 
FROM [DT_node_lookup_96] LEFT OUTER JOIN [DT_node_data_96] ON [DT_node_lookup_96].node_id_2 = [DT_node_data_96].node_id), 
[XGB_Tree_6_9] AS 
(SELECT [DT_Output_96].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], [DT_Output_96].[Score] AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_96]), 
[DT_node_lookup_97] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_53] < 1.5) THEN CASE WHEN ([ADS].[Feature_19] < 6.5) THEN CASE WHEN ([ADS].[Feature_18] < 6) THEN 7 ELSE 8 END ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_30] < 3.5) THEN 5 ELSE 6 END END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_97] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_53' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_19' AS feature, 6.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, 'Feature_30' AS feature, 3.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 3 AS node_id, 'Feature_18' AS feature, 6 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 0.0004639798717107624 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.051988597959280014 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, -0.030923178419470787 AS [Score] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.12078788131475449 AS [Score] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.063081294298172 AS [Score]) AS [Values]), 
[DT_Output_97] AS 
(SELECT [DT_node_lookup_97].[KEY] AS [KEY], [DT_node_lookup_97].node_id_2 AS node_id_2, [DT_node_data_97].node_id AS node_id, [DT_node_data_97].feature AS feature, [DT_node_data_97].threshold AS threshold, [DT_node_data_97].depth AS depth, [DT_node_data_97].parent_id AS parent_id, [DT_node_data_97].[Score] AS [Score] 
FROM [DT_node_lookup_97] LEFT OUTER JOIN [DT_node_data_97] ON [DT_node_lookup_97].node_id_2 = [DT_node_data_97].node_id), 
[XGB_Tree_7_9] AS 
(SELECT [DT_Output_97].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], [DT_Output_97].[Score] AS [Score_7], 0.0 AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_97]), 
[DT_node_lookup_98] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_38] < 1.5) THEN CASE WHEN ([ADS].[Feature_21] < 4.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_50] < 10.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_98] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_38' AS feature, 1.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 4.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.04721479117870331 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.038770001381635666 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_50' AS feature, 10.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, -0.0007153785554692149 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.08804412931203842 AS [Score]) AS [Values]), 
[DT_Output_98] AS 
(SELECT [DT_node_lookup_98].[KEY] AS [KEY], [DT_node_lookup_98].node_id_2 AS node_id_2, [DT_node_data_98].node_id AS node_id, [DT_node_data_98].feature AS feature, [DT_node_data_98].threshold AS threshold, [DT_node_data_98].depth AS depth, [DT_node_data_98].parent_id AS parent_id, [DT_node_data_98].[Score] AS [Score] 
FROM [DT_node_lookup_98] LEFT OUTER JOIN [DT_node_data_98] ON [DT_node_lookup_98].node_id_2 = [DT_node_data_98].node_id), 
[XGB_Tree_8_9] AS 
(SELECT [DT_Output_98].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], [DT_Output_98].[Score] AS [Score_8], 0.0 AS [Score_9] 
FROM [DT_Output_98]), 
[DT_node_lookup_99] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_43] < 2.5) THEN CASE WHEN ([ADS].[Feature_21] < 11.5) THEN 3 ELSE CASE WHEN ([ADS].[Feature_27] < 10.5) THEN 5 ELSE 6 END END ELSE 2 END AS node_id_2 
FROM digits AS [ADS]), 
[DT_node_data_99] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Score] AS [Score] 
FROM (SELECT 0 AS node_id, 'Feature_43' AS feature, 2.5 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Score] UNION ALL SELECT 1 AS node_id, 'Feature_21' AS feature, 11.5 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, -0.0489937961101532 AS [Score] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, -0.02206042967736721 AS [Score] UNION ALL SELECT 4 AS node_id, 'Feature_27' AS feature, 10.5 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Score] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.025021985173225403 AS [Score] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.11245572566986084 AS [Score]) AS [Values]), 
[DT_Output_99] AS 
(SELECT [DT_node_lookup_99].[KEY] AS [KEY], [DT_node_lookup_99].node_id_2 AS node_id_2, [DT_node_data_99].node_id AS node_id, [DT_node_data_99].feature AS feature, [DT_node_data_99].threshold AS threshold, [DT_node_data_99].depth AS depth, [DT_node_data_99].parent_id AS parent_id, [DT_node_data_99].[Score] AS [Score] 
FROM [DT_node_lookup_99] LEFT OUTER JOIN [DT_node_data_99] ON [DT_node_lookup_99].node_id_2 = [DT_node_data_99].node_id), 
[XGB_Tree_9_9] AS 
(SELECT [DT_Output_99].[KEY] AS [KEY], 0.0 AS [Score_0], 0.0 AS [Score_1], 0.0 AS [Score_2], 0.0 AS [Score_3], 0.0 AS [Score_4], 0.0 AS [Score_5], 0.0 AS [Score_6], 0.0 AS [Score_7], 0.0 AS [Score_8], [DT_Output_99].[Score] AS [Score_9] 
FROM [DT_Output_99]), 
[Score_Union_CTE] AS 
(SELECT ensemble_score_union.[KEY] AS [KEY], ensemble_score_union.[Score_0] AS [Score_0], ensemble_score_union.[Score_1] AS [Score_1], ensemble_score_union.[Score_2] AS [Score_2], ensemble_score_union.[Score_3] AS [Score_3], ensemble_score_union.[Score_4] AS [Score_4], ensemble_score_union.[Score_5] AS [Score_5], ensemble_score_union.[Score_6] AS [Score_6], ensemble_score_union.[Score_7] AS [Score_7], ensemble_score_union.[Score_8] AS [Score_8], ensemble_score_union.[Score_9] AS [Score_9] 
FROM (SELECT [XGB_Tree_0_0].[KEY] AS [KEY], [XGB_Tree_0_0].[Score_0] AS [Score_0], [XGB_Tree_0_0].[Score_1] AS [Score_1], [XGB_Tree_0_0].[Score_2] AS [Score_2], [XGB_Tree_0_0].[Score_3] AS [Score_3], [XGB_Tree_0_0].[Score_4] AS [Score_4], [XGB_Tree_0_0].[Score_5] AS [Score_5], [XGB_Tree_0_0].[Score_6] AS [Score_6], [XGB_Tree_0_0].[Score_7] AS [Score_7], [XGB_Tree_0_0].[Score_8] AS [Score_8], [XGB_Tree_0_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_0] UNION ALL SELECT [XGB_Tree_1_0].[KEY] AS [KEY], [XGB_Tree_1_0].[Score_0] AS [Score_0], [XGB_Tree_1_0].[Score_1] AS [Score_1], [XGB_Tree_1_0].[Score_2] AS [Score_2], [XGB_Tree_1_0].[Score_3] AS [Score_3], [XGB_Tree_1_0].[Score_4] AS [Score_4], [XGB_Tree_1_0].[Score_5] AS [Score_5], [XGB_Tree_1_0].[Score_6] AS [Score_6], [XGB_Tree_1_0].[Score_7] AS [Score_7], [XGB_Tree_1_0].[Score_8] AS [Score_8], [XGB_Tree_1_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_0] UNION ALL SELECT [XGB_Tree_2_0].[KEY] AS [KEY], [XGB_Tree_2_0].[Score_0] AS [Score_0], [XGB_Tree_2_0].[Score_1] AS [Score_1], [XGB_Tree_2_0].[Score_2] AS [Score_2], [XGB_Tree_2_0].[Score_3] AS [Score_3], [XGB_Tree_2_0].[Score_4] AS [Score_4], [XGB_Tree_2_0].[Score_5] AS [Score_5], [XGB_Tree_2_0].[Score_6] AS [Score_6], [XGB_Tree_2_0].[Score_7] AS [Score_7], [XGB_Tree_2_0].[Score_8] AS [Score_8], [XGB_Tree_2_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_0] UNION ALL SELECT [XGB_Tree_3_0].[KEY] AS [KEY], [XGB_Tree_3_0].[Score_0] AS [Score_0], [XGB_Tree_3_0].[Score_1] AS [Score_1], [XGB_Tree_3_0].[Score_2] AS [Score_2], [XGB_Tree_3_0].[Score_3] AS [Score_3], [XGB_Tree_3_0].[Score_4] AS [Score_4], [XGB_Tree_3_0].[Score_5] AS [Score_5], [XGB_Tree_3_0].[Score_6] AS [Score_6], [XGB_Tree_3_0].[Score_7] AS [Score_7], [XGB_Tree_3_0].[Score_8] AS [Score_8], [XGB_Tree_3_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_0] UNION ALL SELECT [XGB_Tree_4_0].[KEY] AS [KEY], [XGB_Tree_4_0].[Score_0] AS [Score_0], [XGB_Tree_4_0].[Score_1] AS [Score_1], [XGB_Tree_4_0].[Score_2] AS [Score_2], [XGB_Tree_4_0].[Score_3] AS [Score_3], [XGB_Tree_4_0].[Score_4] AS [Score_4], [XGB_Tree_4_0].[Score_5] AS [Score_5], [XGB_Tree_4_0].[Score_6] AS [Score_6], [XGB_Tree_4_0].[Score_7] AS [Score_7], [XGB_Tree_4_0].[Score_8] AS [Score_8], [XGB_Tree_4_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_0] UNION ALL SELECT [XGB_Tree_5_0].[KEY] AS [KEY], [XGB_Tree_5_0].[Score_0] AS [Score_0], [XGB_Tree_5_0].[Score_1] AS [Score_1], [XGB_Tree_5_0].[Score_2] AS [Score_2], [XGB_Tree_5_0].[Score_3] AS [Score_3], [XGB_Tree_5_0].[Score_4] AS [Score_4], [XGB_Tree_5_0].[Score_5] AS [Score_5], [XGB_Tree_5_0].[Score_6] AS [Score_6], [XGB_Tree_5_0].[Score_7] AS [Score_7], [XGB_Tree_5_0].[Score_8] AS [Score_8], [XGB_Tree_5_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_0] UNION ALL SELECT [XGB_Tree_6_0].[KEY] AS [KEY], [XGB_Tree_6_0].[Score_0] AS [Score_0], [XGB_Tree_6_0].[Score_1] AS [Score_1], [XGB_Tree_6_0].[Score_2] AS [Score_2], [XGB_Tree_6_0].[Score_3] AS [Score_3], [XGB_Tree_6_0].[Score_4] AS [Score_4], [XGB_Tree_6_0].[Score_5] AS [Score_5], [XGB_Tree_6_0].[Score_6] AS [Score_6], [XGB_Tree_6_0].[Score_7] AS [Score_7], [XGB_Tree_6_0].[Score_8] AS [Score_8], [XGB_Tree_6_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_0] UNION ALL SELECT [XGB_Tree_7_0].[KEY] AS [KEY], [XGB_Tree_7_0].[Score_0] AS [Score_0], [XGB_Tree_7_0].[Score_1] AS [Score_1], [XGB_Tree_7_0].[Score_2] AS [Score_2], [XGB_Tree_7_0].[Score_3] AS [Score_3], [XGB_Tree_7_0].[Score_4] AS [Score_4], [XGB_Tree_7_0].[Score_5] AS [Score_5], [XGB_Tree_7_0].[Score_6] AS [Score_6], [XGB_Tree_7_0].[Score_7] AS [Score_7], [XGB_Tree_7_0].[Score_8] AS [Score_8], [XGB_Tree_7_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_0] UNION ALL SELECT [XGB_Tree_8_0].[KEY] AS [KEY], [XGB_Tree_8_0].[Score_0] AS [Score_0], [XGB_Tree_8_0].[Score_1] AS [Score_1], [XGB_Tree_8_0].[Score_2] AS [Score_2], [XGB_Tree_8_0].[Score_3] AS [Score_3], [XGB_Tree_8_0].[Score_4] AS [Score_4], [XGB_Tree_8_0].[Score_5] AS [Score_5], [XGB_Tree_8_0].[Score_6] AS [Score_6], [XGB_Tree_8_0].[Score_7] AS [Score_7], [XGB_Tree_8_0].[Score_8] AS [Score_8], [XGB_Tree_8_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_0] UNION ALL SELECT [XGB_Tree_9_0].[KEY] AS [KEY], [XGB_Tree_9_0].[Score_0] AS [Score_0], [XGB_Tree_9_0].[Score_1] AS [Score_1], [XGB_Tree_9_0].[Score_2] AS [Score_2], [XGB_Tree_9_0].[Score_3] AS [Score_3], [XGB_Tree_9_0].[Score_4] AS [Score_4], [XGB_Tree_9_0].[Score_5] AS [Score_5], [XGB_Tree_9_0].[Score_6] AS [Score_6], [XGB_Tree_9_0].[Score_7] AS [Score_7], [XGB_Tree_9_0].[Score_8] AS [Score_8], [XGB_Tree_9_0].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_0] UNION ALL SELECT [XGB_Tree_0_1].[KEY] AS [KEY], [XGB_Tree_0_1].[Score_0] AS [Score_0], [XGB_Tree_0_1].[Score_1] AS [Score_1], [XGB_Tree_0_1].[Score_2] AS [Score_2], [XGB_Tree_0_1].[Score_3] AS [Score_3], [XGB_Tree_0_1].[Score_4] AS [Score_4], [XGB_Tree_0_1].[Score_5] AS [Score_5], [XGB_Tree_0_1].[Score_6] AS [Score_6], [XGB_Tree_0_1].[Score_7] AS [Score_7], [XGB_Tree_0_1].[Score_8] AS [Score_8], [XGB_Tree_0_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_1] UNION ALL SELECT [XGB_Tree_1_1].[KEY] AS [KEY], [XGB_Tree_1_1].[Score_0] AS [Score_0], [XGB_Tree_1_1].[Score_1] AS [Score_1], [XGB_Tree_1_1].[Score_2] AS [Score_2], [XGB_Tree_1_1].[Score_3] AS [Score_3], [XGB_Tree_1_1].[Score_4] AS [Score_4], [XGB_Tree_1_1].[Score_5] AS [Score_5], [XGB_Tree_1_1].[Score_6] AS [Score_6], [XGB_Tree_1_1].[Score_7] AS [Score_7], [XGB_Tree_1_1].[Score_8] AS [Score_8], [XGB_Tree_1_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_1] UNION ALL SELECT [XGB_Tree_2_1].[KEY] AS [KEY], [XGB_Tree_2_1].[Score_0] AS [Score_0], [XGB_Tree_2_1].[Score_1] AS [Score_1], [XGB_Tree_2_1].[Score_2] AS [Score_2], [XGB_Tree_2_1].[Score_3] AS [Score_3], [XGB_Tree_2_1].[Score_4] AS [Score_4], [XGB_Tree_2_1].[Score_5] AS [Score_5], [XGB_Tree_2_1].[Score_6] AS [Score_6], [XGB_Tree_2_1].[Score_7] AS [Score_7], [XGB_Tree_2_1].[Score_8] AS [Score_8], [XGB_Tree_2_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_1] UNION ALL SELECT [XGB_Tree_3_1].[KEY] AS [KEY], [XGB_Tree_3_1].[Score_0] AS [Score_0], [XGB_Tree_3_1].[Score_1] AS [Score_1], [XGB_Tree_3_1].[Score_2] AS [Score_2], [XGB_Tree_3_1].[Score_3] AS [Score_3], [XGB_Tree_3_1].[Score_4] AS [Score_4], [XGB_Tree_3_1].[Score_5] AS [Score_5], [XGB_Tree_3_1].[Score_6] AS [Score_6], [XGB_Tree_3_1].[Score_7] AS [Score_7], [XGB_Tree_3_1].[Score_8] AS [Score_8], [XGB_Tree_3_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_1] UNION ALL SELECT [XGB_Tree_4_1].[KEY] AS [KEY], [XGB_Tree_4_1].[Score_0] AS [Score_0], [XGB_Tree_4_1].[Score_1] AS [Score_1], [XGB_Tree_4_1].[Score_2] AS [Score_2], [XGB_Tree_4_1].[Score_3] AS [Score_3], [XGB_Tree_4_1].[Score_4] AS [Score_4], [XGB_Tree_4_1].[Score_5] AS [Score_5], [XGB_Tree_4_1].[Score_6] AS [Score_6], [XGB_Tree_4_1].[Score_7] AS [Score_7], [XGB_Tree_4_1].[Score_8] AS [Score_8], [XGB_Tree_4_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_1] UNION ALL SELECT [XGB_Tree_5_1].[KEY] AS [KEY], [XGB_Tree_5_1].[Score_0] AS [Score_0], [XGB_Tree_5_1].[Score_1] AS [Score_1], [XGB_Tree_5_1].[Score_2] AS [Score_2], [XGB_Tree_5_1].[Score_3] AS [Score_3], [XGB_Tree_5_1].[Score_4] AS [Score_4], [XGB_Tree_5_1].[Score_5] AS [Score_5], [XGB_Tree_5_1].[Score_6] AS [Score_6], [XGB_Tree_5_1].[Score_7] AS [Score_7], [XGB_Tree_5_1].[Score_8] AS [Score_8], [XGB_Tree_5_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_1] UNION ALL SELECT [XGB_Tree_6_1].[KEY] AS [KEY], [XGB_Tree_6_1].[Score_0] AS [Score_0], [XGB_Tree_6_1].[Score_1] AS [Score_1], [XGB_Tree_6_1].[Score_2] AS [Score_2], [XGB_Tree_6_1].[Score_3] AS [Score_3], [XGB_Tree_6_1].[Score_4] AS [Score_4], [XGB_Tree_6_1].[Score_5] AS [Score_5], [XGB_Tree_6_1].[Score_6] AS [Score_6], [XGB_Tree_6_1].[Score_7] AS [Score_7], [XGB_Tree_6_1].[Score_8] AS [Score_8], [XGB_Tree_6_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_1] UNION ALL SELECT [XGB_Tree_7_1].[KEY] AS [KEY], [XGB_Tree_7_1].[Score_0] AS [Score_0], [XGB_Tree_7_1].[Score_1] AS [Score_1], [XGB_Tree_7_1].[Score_2] AS [Score_2], [XGB_Tree_7_1].[Score_3] AS [Score_3], [XGB_Tree_7_1].[Score_4] AS [Score_4], [XGB_Tree_7_1].[Score_5] AS [Score_5], [XGB_Tree_7_1].[Score_6] AS [Score_6], [XGB_Tree_7_1].[Score_7] AS [Score_7], [XGB_Tree_7_1].[Score_8] AS [Score_8], [XGB_Tree_7_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_1] UNION ALL SELECT [XGB_Tree_8_1].[KEY] AS [KEY], [XGB_Tree_8_1].[Score_0] AS [Score_0], [XGB_Tree_8_1].[Score_1] AS [Score_1], [XGB_Tree_8_1].[Score_2] AS [Score_2], [XGB_Tree_8_1].[Score_3] AS [Score_3], [XGB_Tree_8_1].[Score_4] AS [Score_4], [XGB_Tree_8_1].[Score_5] AS [Score_5], [XGB_Tree_8_1].[Score_6] AS [Score_6], [XGB_Tree_8_1].[Score_7] AS [Score_7], [XGB_Tree_8_1].[Score_8] AS [Score_8], [XGB_Tree_8_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_1] UNION ALL SELECT [XGB_Tree_9_1].[KEY] AS [KEY], [XGB_Tree_9_1].[Score_0] AS [Score_0], [XGB_Tree_9_1].[Score_1] AS [Score_1], [XGB_Tree_9_1].[Score_2] AS [Score_2], [XGB_Tree_9_1].[Score_3] AS [Score_3], [XGB_Tree_9_1].[Score_4] AS [Score_4], [XGB_Tree_9_1].[Score_5] AS [Score_5], [XGB_Tree_9_1].[Score_6] AS [Score_6], [XGB_Tree_9_1].[Score_7] AS [Score_7], [XGB_Tree_9_1].[Score_8] AS [Score_8], [XGB_Tree_9_1].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_1] UNION ALL SELECT [XGB_Tree_0_2].[KEY] AS [KEY], [XGB_Tree_0_2].[Score_0] AS [Score_0], [XGB_Tree_0_2].[Score_1] AS [Score_1], [XGB_Tree_0_2].[Score_2] AS [Score_2], [XGB_Tree_0_2].[Score_3] AS [Score_3], [XGB_Tree_0_2].[Score_4] AS [Score_4], [XGB_Tree_0_2].[Score_5] AS [Score_5], [XGB_Tree_0_2].[Score_6] AS [Score_6], [XGB_Tree_0_2].[Score_7] AS [Score_7], [XGB_Tree_0_2].[Score_8] AS [Score_8], [XGB_Tree_0_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_2] UNION ALL SELECT [XGB_Tree_1_2].[KEY] AS [KEY], [XGB_Tree_1_2].[Score_0] AS [Score_0], [XGB_Tree_1_2].[Score_1] AS [Score_1], [XGB_Tree_1_2].[Score_2] AS [Score_2], [XGB_Tree_1_2].[Score_3] AS [Score_3], [XGB_Tree_1_2].[Score_4] AS [Score_4], [XGB_Tree_1_2].[Score_5] AS [Score_5], [XGB_Tree_1_2].[Score_6] AS [Score_6], [XGB_Tree_1_2].[Score_7] AS [Score_7], [XGB_Tree_1_2].[Score_8] AS [Score_8], [XGB_Tree_1_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_2] UNION ALL SELECT [XGB_Tree_2_2].[KEY] AS [KEY], [XGB_Tree_2_2].[Score_0] AS [Score_0], [XGB_Tree_2_2].[Score_1] AS [Score_1], [XGB_Tree_2_2].[Score_2] AS [Score_2], [XGB_Tree_2_2].[Score_3] AS [Score_3], [XGB_Tree_2_2].[Score_4] AS [Score_4], [XGB_Tree_2_2].[Score_5] AS [Score_5], [XGB_Tree_2_2].[Score_6] AS [Score_6], [XGB_Tree_2_2].[Score_7] AS [Score_7], [XGB_Tree_2_2].[Score_8] AS [Score_8], [XGB_Tree_2_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_2] UNION ALL SELECT [XGB_Tree_3_2].[KEY] AS [KEY], [XGB_Tree_3_2].[Score_0] AS [Score_0], [XGB_Tree_3_2].[Score_1] AS [Score_1], [XGB_Tree_3_2].[Score_2] AS [Score_2], [XGB_Tree_3_2].[Score_3] AS [Score_3], [XGB_Tree_3_2].[Score_4] AS [Score_4], [XGB_Tree_3_2].[Score_5] AS [Score_5], [XGB_Tree_3_2].[Score_6] AS [Score_6], [XGB_Tree_3_2].[Score_7] AS [Score_7], [XGB_Tree_3_2].[Score_8] AS [Score_8], [XGB_Tree_3_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_2] UNION ALL SELECT [XGB_Tree_4_2].[KEY] AS [KEY], [XGB_Tree_4_2].[Score_0] AS [Score_0], [XGB_Tree_4_2].[Score_1] AS [Score_1], [XGB_Tree_4_2].[Score_2] AS [Score_2], [XGB_Tree_4_2].[Score_3] AS [Score_3], [XGB_Tree_4_2].[Score_4] AS [Score_4], [XGB_Tree_4_2].[Score_5] AS [Score_5], [XGB_Tree_4_2].[Score_6] AS [Score_6], [XGB_Tree_4_2].[Score_7] AS [Score_7], [XGB_Tree_4_2].[Score_8] AS [Score_8], [XGB_Tree_4_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_2] UNION ALL SELECT [XGB_Tree_5_2].[KEY] AS [KEY], [XGB_Tree_5_2].[Score_0] AS [Score_0], [XGB_Tree_5_2].[Score_1] AS [Score_1], [XGB_Tree_5_2].[Score_2] AS [Score_2], [XGB_Tree_5_2].[Score_3] AS [Score_3], [XGB_Tree_5_2].[Score_4] AS [Score_4], [XGB_Tree_5_2].[Score_5] AS [Score_5], [XGB_Tree_5_2].[Score_6] AS [Score_6], [XGB_Tree_5_2].[Score_7] AS [Score_7], [XGB_Tree_5_2].[Score_8] AS [Score_8], [XGB_Tree_5_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_2] UNION ALL SELECT [XGB_Tree_6_2].[KEY] AS [KEY], [XGB_Tree_6_2].[Score_0] AS [Score_0], [XGB_Tree_6_2].[Score_1] AS [Score_1], [XGB_Tree_6_2].[Score_2] AS [Score_2], [XGB_Tree_6_2].[Score_3] AS [Score_3], [XGB_Tree_6_2].[Score_4] AS [Score_4], [XGB_Tree_6_2].[Score_5] AS [Score_5], [XGB_Tree_6_2].[Score_6] AS [Score_6], [XGB_Tree_6_2].[Score_7] AS [Score_7], [XGB_Tree_6_2].[Score_8] AS [Score_8], [XGB_Tree_6_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_2] UNION ALL SELECT [XGB_Tree_7_2].[KEY] AS [KEY], [XGB_Tree_7_2].[Score_0] AS [Score_0], [XGB_Tree_7_2].[Score_1] AS [Score_1], [XGB_Tree_7_2].[Score_2] AS [Score_2], [XGB_Tree_7_2].[Score_3] AS [Score_3], [XGB_Tree_7_2].[Score_4] AS [Score_4], [XGB_Tree_7_2].[Score_5] AS [Score_5], [XGB_Tree_7_2].[Score_6] AS [Score_6], [XGB_Tree_7_2].[Score_7] AS [Score_7], [XGB_Tree_7_2].[Score_8] AS [Score_8], [XGB_Tree_7_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_2] UNION ALL SELECT [XGB_Tree_8_2].[KEY] AS [KEY], [XGB_Tree_8_2].[Score_0] AS [Score_0], [XGB_Tree_8_2].[Score_1] AS [Score_1], [XGB_Tree_8_2].[Score_2] AS [Score_2], [XGB_Tree_8_2].[Score_3] AS [Score_3], [XGB_Tree_8_2].[Score_4] AS [Score_4], [XGB_Tree_8_2].[Score_5] AS [Score_5], [XGB_Tree_8_2].[Score_6] AS [Score_6], [XGB_Tree_8_2].[Score_7] AS [Score_7], [XGB_Tree_8_2].[Score_8] AS [Score_8], [XGB_Tree_8_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_2] UNION ALL SELECT [XGB_Tree_9_2].[KEY] AS [KEY], [XGB_Tree_9_2].[Score_0] AS [Score_0], [XGB_Tree_9_2].[Score_1] AS [Score_1], [XGB_Tree_9_2].[Score_2] AS [Score_2], [XGB_Tree_9_2].[Score_3] AS [Score_3], [XGB_Tree_9_2].[Score_4] AS [Score_4], [XGB_Tree_9_2].[Score_5] AS [Score_5], [XGB_Tree_9_2].[Score_6] AS [Score_6], [XGB_Tree_9_2].[Score_7] AS [Score_7], [XGB_Tree_9_2].[Score_8] AS [Score_8], [XGB_Tree_9_2].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_2] UNION ALL SELECT [XGB_Tree_0_3].[KEY] AS [KEY], [XGB_Tree_0_3].[Score_0] AS [Score_0], [XGB_Tree_0_3].[Score_1] AS [Score_1], [XGB_Tree_0_3].[Score_2] AS [Score_2], [XGB_Tree_0_3].[Score_3] AS [Score_3], [XGB_Tree_0_3].[Score_4] AS [Score_4], [XGB_Tree_0_3].[Score_5] AS [Score_5], [XGB_Tree_0_3].[Score_6] AS [Score_6], [XGB_Tree_0_3].[Score_7] AS [Score_7], [XGB_Tree_0_3].[Score_8] AS [Score_8], [XGB_Tree_0_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_3] UNION ALL SELECT [XGB_Tree_1_3].[KEY] AS [KEY], [XGB_Tree_1_3].[Score_0] AS [Score_0], [XGB_Tree_1_3].[Score_1] AS [Score_1], [XGB_Tree_1_3].[Score_2] AS [Score_2], [XGB_Tree_1_3].[Score_3] AS [Score_3], [XGB_Tree_1_3].[Score_4] AS [Score_4], [XGB_Tree_1_3].[Score_5] AS [Score_5], [XGB_Tree_1_3].[Score_6] AS [Score_6], [XGB_Tree_1_3].[Score_7] AS [Score_7], [XGB_Tree_1_3].[Score_8] AS [Score_8], [XGB_Tree_1_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_3] UNION ALL SELECT [XGB_Tree_2_3].[KEY] AS [KEY], [XGB_Tree_2_3].[Score_0] AS [Score_0], [XGB_Tree_2_3].[Score_1] AS [Score_1], [XGB_Tree_2_3].[Score_2] AS [Score_2], [XGB_Tree_2_3].[Score_3] AS [Score_3], [XGB_Tree_2_3].[Score_4] AS [Score_4], [XGB_Tree_2_3].[Score_5] AS [Score_5], [XGB_Tree_2_3].[Score_6] AS [Score_6], [XGB_Tree_2_3].[Score_7] AS [Score_7], [XGB_Tree_2_3].[Score_8] AS [Score_8], [XGB_Tree_2_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_3] UNION ALL SELECT [XGB_Tree_3_3].[KEY] AS [KEY], [XGB_Tree_3_3].[Score_0] AS [Score_0], [XGB_Tree_3_3].[Score_1] AS [Score_1], [XGB_Tree_3_3].[Score_2] AS [Score_2], [XGB_Tree_3_3].[Score_3] AS [Score_3], [XGB_Tree_3_3].[Score_4] AS [Score_4], [XGB_Tree_3_3].[Score_5] AS [Score_5], [XGB_Tree_3_3].[Score_6] AS [Score_6], [XGB_Tree_3_3].[Score_7] AS [Score_7], [XGB_Tree_3_3].[Score_8] AS [Score_8], [XGB_Tree_3_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_3] UNION ALL SELECT [XGB_Tree_4_3].[KEY] AS [KEY], [XGB_Tree_4_3].[Score_0] AS [Score_0], [XGB_Tree_4_3].[Score_1] AS [Score_1], [XGB_Tree_4_3].[Score_2] AS [Score_2], [XGB_Tree_4_3].[Score_3] AS [Score_3], [XGB_Tree_4_3].[Score_4] AS [Score_4], [XGB_Tree_4_3].[Score_5] AS [Score_5], [XGB_Tree_4_3].[Score_6] AS [Score_6], [XGB_Tree_4_3].[Score_7] AS [Score_7], [XGB_Tree_4_3].[Score_8] AS [Score_8], [XGB_Tree_4_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_3] UNION ALL SELECT [XGB_Tree_5_3].[KEY] AS [KEY], [XGB_Tree_5_3].[Score_0] AS [Score_0], [XGB_Tree_5_3].[Score_1] AS [Score_1], [XGB_Tree_5_3].[Score_2] AS [Score_2], [XGB_Tree_5_3].[Score_3] AS [Score_3], [XGB_Tree_5_3].[Score_4] AS [Score_4], [XGB_Tree_5_3].[Score_5] AS [Score_5], [XGB_Tree_5_3].[Score_6] AS [Score_6], [XGB_Tree_5_3].[Score_7] AS [Score_7], [XGB_Tree_5_3].[Score_8] AS [Score_8], [XGB_Tree_5_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_3] UNION ALL SELECT [XGB_Tree_6_3].[KEY] AS [KEY], [XGB_Tree_6_3].[Score_0] AS [Score_0], [XGB_Tree_6_3].[Score_1] AS [Score_1], [XGB_Tree_6_3].[Score_2] AS [Score_2], [XGB_Tree_6_3].[Score_3] AS [Score_3], [XGB_Tree_6_3].[Score_4] AS [Score_4], [XGB_Tree_6_3].[Score_5] AS [Score_5], [XGB_Tree_6_3].[Score_6] AS [Score_6], [XGB_Tree_6_3].[Score_7] AS [Score_7], [XGB_Tree_6_3].[Score_8] AS [Score_8], [XGB_Tree_6_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_3] UNION ALL SELECT [XGB_Tree_7_3].[KEY] AS [KEY], [XGB_Tree_7_3].[Score_0] AS [Score_0], [XGB_Tree_7_3].[Score_1] AS [Score_1], [XGB_Tree_7_3].[Score_2] AS [Score_2], [XGB_Tree_7_3].[Score_3] AS [Score_3], [XGB_Tree_7_3].[Score_4] AS [Score_4], [XGB_Tree_7_3].[Score_5] AS [Score_5], [XGB_Tree_7_3].[Score_6] AS [Score_6], [XGB_Tree_7_3].[Score_7] AS [Score_7], [XGB_Tree_7_3].[Score_8] AS [Score_8], [XGB_Tree_7_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_3] UNION ALL SELECT [XGB_Tree_8_3].[KEY] AS [KEY], [XGB_Tree_8_3].[Score_0] AS [Score_0], [XGB_Tree_8_3].[Score_1] AS [Score_1], [XGB_Tree_8_3].[Score_2] AS [Score_2], [XGB_Tree_8_3].[Score_3] AS [Score_3], [XGB_Tree_8_3].[Score_4] AS [Score_4], [XGB_Tree_8_3].[Score_5] AS [Score_5], [XGB_Tree_8_3].[Score_6] AS [Score_6], [XGB_Tree_8_3].[Score_7] AS [Score_7], [XGB_Tree_8_3].[Score_8] AS [Score_8], [XGB_Tree_8_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_3] UNION ALL SELECT [XGB_Tree_9_3].[KEY] AS [KEY], [XGB_Tree_9_3].[Score_0] AS [Score_0], [XGB_Tree_9_3].[Score_1] AS [Score_1], [XGB_Tree_9_3].[Score_2] AS [Score_2], [XGB_Tree_9_3].[Score_3] AS [Score_3], [XGB_Tree_9_3].[Score_4] AS [Score_4], [XGB_Tree_9_3].[Score_5] AS [Score_5], [XGB_Tree_9_3].[Score_6] AS [Score_6], [XGB_Tree_9_3].[Score_7] AS [Score_7], [XGB_Tree_9_3].[Score_8] AS [Score_8], [XGB_Tree_9_3].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_3] UNION ALL SELECT [XGB_Tree_0_4].[KEY] AS [KEY], [XGB_Tree_0_4].[Score_0] AS [Score_0], [XGB_Tree_0_4].[Score_1] AS [Score_1], [XGB_Tree_0_4].[Score_2] AS [Score_2], [XGB_Tree_0_4].[Score_3] AS [Score_3], [XGB_Tree_0_4].[Score_4] AS [Score_4], [XGB_Tree_0_4].[Score_5] AS [Score_5], [XGB_Tree_0_4].[Score_6] AS [Score_6], [XGB_Tree_0_4].[Score_7] AS [Score_7], [XGB_Tree_0_4].[Score_8] AS [Score_8], [XGB_Tree_0_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_4] UNION ALL SELECT [XGB_Tree_1_4].[KEY] AS [KEY], [XGB_Tree_1_4].[Score_0] AS [Score_0], [XGB_Tree_1_4].[Score_1] AS [Score_1], [XGB_Tree_1_4].[Score_2] AS [Score_2], [XGB_Tree_1_4].[Score_3] AS [Score_3], [XGB_Tree_1_4].[Score_4] AS [Score_4], [XGB_Tree_1_4].[Score_5] AS [Score_5], [XGB_Tree_1_4].[Score_6] AS [Score_6], [XGB_Tree_1_4].[Score_7] AS [Score_7], [XGB_Tree_1_4].[Score_8] AS [Score_8], [XGB_Tree_1_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_4] UNION ALL SELECT [XGB_Tree_2_4].[KEY] AS [KEY], [XGB_Tree_2_4].[Score_0] AS [Score_0], [XGB_Tree_2_4].[Score_1] AS [Score_1], [XGB_Tree_2_4].[Score_2] AS [Score_2], [XGB_Tree_2_4].[Score_3] AS [Score_3], [XGB_Tree_2_4].[Score_4] AS [Score_4], [XGB_Tree_2_4].[Score_5] AS [Score_5], [XGB_Tree_2_4].[Score_6] AS [Score_6], [XGB_Tree_2_4].[Score_7] AS [Score_7], [XGB_Tree_2_4].[Score_8] AS [Score_8], [XGB_Tree_2_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_4] UNION ALL SELECT [XGB_Tree_3_4].[KEY] AS [KEY], [XGB_Tree_3_4].[Score_0] AS [Score_0], [XGB_Tree_3_4].[Score_1] AS [Score_1], [XGB_Tree_3_4].[Score_2] AS [Score_2], [XGB_Tree_3_4].[Score_3] AS [Score_3], [XGB_Tree_3_4].[Score_4] AS [Score_4], [XGB_Tree_3_4].[Score_5] AS [Score_5], [XGB_Tree_3_4].[Score_6] AS [Score_6], [XGB_Tree_3_4].[Score_7] AS [Score_7], [XGB_Tree_3_4].[Score_8] AS [Score_8], [XGB_Tree_3_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_4] UNION ALL SELECT [XGB_Tree_4_4].[KEY] AS [KEY], [XGB_Tree_4_4].[Score_0] AS [Score_0], [XGB_Tree_4_4].[Score_1] AS [Score_1], [XGB_Tree_4_4].[Score_2] AS [Score_2], [XGB_Tree_4_4].[Score_3] AS [Score_3], [XGB_Tree_4_4].[Score_4] AS [Score_4], [XGB_Tree_4_4].[Score_5] AS [Score_5], [XGB_Tree_4_4].[Score_6] AS [Score_6], [XGB_Tree_4_4].[Score_7] AS [Score_7], [XGB_Tree_4_4].[Score_8] AS [Score_8], [XGB_Tree_4_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_4] UNION ALL SELECT [XGB_Tree_5_4].[KEY] AS [KEY], [XGB_Tree_5_4].[Score_0] AS [Score_0], [XGB_Tree_5_4].[Score_1] AS [Score_1], [XGB_Tree_5_4].[Score_2] AS [Score_2], [XGB_Tree_5_4].[Score_3] AS [Score_3], [XGB_Tree_5_4].[Score_4] AS [Score_4], [XGB_Tree_5_4].[Score_5] AS [Score_5], [XGB_Tree_5_4].[Score_6] AS [Score_6], [XGB_Tree_5_4].[Score_7] AS [Score_7], [XGB_Tree_5_4].[Score_8] AS [Score_8], [XGB_Tree_5_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_4] UNION ALL SELECT [XGB_Tree_6_4].[KEY] AS [KEY], [XGB_Tree_6_4].[Score_0] AS [Score_0], [XGB_Tree_6_4].[Score_1] AS [Score_1], [XGB_Tree_6_4].[Score_2] AS [Score_2], [XGB_Tree_6_4].[Score_3] AS [Score_3], [XGB_Tree_6_4].[Score_4] AS [Score_4], [XGB_Tree_6_4].[Score_5] AS [Score_5], [XGB_Tree_6_4].[Score_6] AS [Score_6], [XGB_Tree_6_4].[Score_7] AS [Score_7], [XGB_Tree_6_4].[Score_8] AS [Score_8], [XGB_Tree_6_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_4] UNION ALL SELECT [XGB_Tree_7_4].[KEY] AS [KEY], [XGB_Tree_7_4].[Score_0] AS [Score_0], [XGB_Tree_7_4].[Score_1] AS [Score_1], [XGB_Tree_7_4].[Score_2] AS [Score_2], [XGB_Tree_7_4].[Score_3] AS [Score_3], [XGB_Tree_7_4].[Score_4] AS [Score_4], [XGB_Tree_7_4].[Score_5] AS [Score_5], [XGB_Tree_7_4].[Score_6] AS [Score_6], [XGB_Tree_7_4].[Score_7] AS [Score_7], [XGB_Tree_7_4].[Score_8] AS [Score_8], [XGB_Tree_7_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_4] UNION ALL SELECT [XGB_Tree_8_4].[KEY] AS [KEY], [XGB_Tree_8_4].[Score_0] AS [Score_0], [XGB_Tree_8_4].[Score_1] AS [Score_1], [XGB_Tree_8_4].[Score_2] AS [Score_2], [XGB_Tree_8_4].[Score_3] AS [Score_3], [XGB_Tree_8_4].[Score_4] AS [Score_4], [XGB_Tree_8_4].[Score_5] AS [Score_5], [XGB_Tree_8_4].[Score_6] AS [Score_6], [XGB_Tree_8_4].[Score_7] AS [Score_7], [XGB_Tree_8_4].[Score_8] AS [Score_8], [XGB_Tree_8_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_4] UNION ALL SELECT [XGB_Tree_9_4].[KEY] AS [KEY], [XGB_Tree_9_4].[Score_0] AS [Score_0], [XGB_Tree_9_4].[Score_1] AS [Score_1], [XGB_Tree_9_4].[Score_2] AS [Score_2], [XGB_Tree_9_4].[Score_3] AS [Score_3], [XGB_Tree_9_4].[Score_4] AS [Score_4], [XGB_Tree_9_4].[Score_5] AS [Score_5], [XGB_Tree_9_4].[Score_6] AS [Score_6], [XGB_Tree_9_4].[Score_7] AS [Score_7], [XGB_Tree_9_4].[Score_8] AS [Score_8], [XGB_Tree_9_4].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_4] UNION ALL SELECT [XGB_Tree_0_5].[KEY] AS [KEY], [XGB_Tree_0_5].[Score_0] AS [Score_0], [XGB_Tree_0_5].[Score_1] AS [Score_1], [XGB_Tree_0_5].[Score_2] AS [Score_2], [XGB_Tree_0_5].[Score_3] AS [Score_3], [XGB_Tree_0_5].[Score_4] AS [Score_4], [XGB_Tree_0_5].[Score_5] AS [Score_5], [XGB_Tree_0_5].[Score_6] AS [Score_6], [XGB_Tree_0_5].[Score_7] AS [Score_7], [XGB_Tree_0_5].[Score_8] AS [Score_8], [XGB_Tree_0_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_5] UNION ALL SELECT [XGB_Tree_1_5].[KEY] AS [KEY], [XGB_Tree_1_5].[Score_0] AS [Score_0], [XGB_Tree_1_5].[Score_1] AS [Score_1], [XGB_Tree_1_5].[Score_2] AS [Score_2], [XGB_Tree_1_5].[Score_3] AS [Score_3], [XGB_Tree_1_5].[Score_4] AS [Score_4], [XGB_Tree_1_5].[Score_5] AS [Score_5], [XGB_Tree_1_5].[Score_6] AS [Score_6], [XGB_Tree_1_5].[Score_7] AS [Score_7], [XGB_Tree_1_5].[Score_8] AS [Score_8], [XGB_Tree_1_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_5] UNION ALL SELECT [XGB_Tree_2_5].[KEY] AS [KEY], [XGB_Tree_2_5].[Score_0] AS [Score_0], [XGB_Tree_2_5].[Score_1] AS [Score_1], [XGB_Tree_2_5].[Score_2] AS [Score_2], [XGB_Tree_2_5].[Score_3] AS [Score_3], [XGB_Tree_2_5].[Score_4] AS [Score_4], [XGB_Tree_2_5].[Score_5] AS [Score_5], [XGB_Tree_2_5].[Score_6] AS [Score_6], [XGB_Tree_2_5].[Score_7] AS [Score_7], [XGB_Tree_2_5].[Score_8] AS [Score_8], [XGB_Tree_2_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_5] UNION ALL SELECT [XGB_Tree_3_5].[KEY] AS [KEY], [XGB_Tree_3_5].[Score_0] AS [Score_0], [XGB_Tree_3_5].[Score_1] AS [Score_1], [XGB_Tree_3_5].[Score_2] AS [Score_2], [XGB_Tree_3_5].[Score_3] AS [Score_3], [XGB_Tree_3_5].[Score_4] AS [Score_4], [XGB_Tree_3_5].[Score_5] AS [Score_5], [XGB_Tree_3_5].[Score_6] AS [Score_6], [XGB_Tree_3_5].[Score_7] AS [Score_7], [XGB_Tree_3_5].[Score_8] AS [Score_8], [XGB_Tree_3_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_5] UNION ALL SELECT [XGB_Tree_4_5].[KEY] AS [KEY], [XGB_Tree_4_5].[Score_0] AS [Score_0], [XGB_Tree_4_5].[Score_1] AS [Score_1], [XGB_Tree_4_5].[Score_2] AS [Score_2], [XGB_Tree_4_5].[Score_3] AS [Score_3], [XGB_Tree_4_5].[Score_4] AS [Score_4], [XGB_Tree_4_5].[Score_5] AS [Score_5], [XGB_Tree_4_5].[Score_6] AS [Score_6], [XGB_Tree_4_5].[Score_7] AS [Score_7], [XGB_Tree_4_5].[Score_8] AS [Score_8], [XGB_Tree_4_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_5] UNION ALL SELECT [XGB_Tree_5_5].[KEY] AS [KEY], [XGB_Tree_5_5].[Score_0] AS [Score_0], [XGB_Tree_5_5].[Score_1] AS [Score_1], [XGB_Tree_5_5].[Score_2] AS [Score_2], [XGB_Tree_5_5].[Score_3] AS [Score_3], [XGB_Tree_5_5].[Score_4] AS [Score_4], [XGB_Tree_5_5].[Score_5] AS [Score_5], [XGB_Tree_5_5].[Score_6] AS [Score_6], [XGB_Tree_5_5].[Score_7] AS [Score_7], [XGB_Tree_5_5].[Score_8] AS [Score_8], [XGB_Tree_5_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_5] UNION ALL SELECT [XGB_Tree_6_5].[KEY] AS [KEY], [XGB_Tree_6_5].[Score_0] AS [Score_0], [XGB_Tree_6_5].[Score_1] AS [Score_1], [XGB_Tree_6_5].[Score_2] AS [Score_2], [XGB_Tree_6_5].[Score_3] AS [Score_3], [XGB_Tree_6_5].[Score_4] AS [Score_4], [XGB_Tree_6_5].[Score_5] AS [Score_5], [XGB_Tree_6_5].[Score_6] AS [Score_6], [XGB_Tree_6_5].[Score_7] AS [Score_7], [XGB_Tree_6_5].[Score_8] AS [Score_8], [XGB_Tree_6_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_5] UNION ALL SELECT [XGB_Tree_7_5].[KEY] AS [KEY], [XGB_Tree_7_5].[Score_0] AS [Score_0], [XGB_Tree_7_5].[Score_1] AS [Score_1], [XGB_Tree_7_5].[Score_2] AS [Score_2], [XGB_Tree_7_5].[Score_3] AS [Score_3], [XGB_Tree_7_5].[Score_4] AS [Score_4], [XGB_Tree_7_5].[Score_5] AS [Score_5], [XGB_Tree_7_5].[Score_6] AS [Score_6], [XGB_Tree_7_5].[Score_7] AS [Score_7], [XGB_Tree_7_5].[Score_8] AS [Score_8], [XGB_Tree_7_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_5] UNION ALL SELECT [XGB_Tree_8_5].[KEY] AS [KEY], [XGB_Tree_8_5].[Score_0] AS [Score_0], [XGB_Tree_8_5].[Score_1] AS [Score_1], [XGB_Tree_8_5].[Score_2] AS [Score_2], [XGB_Tree_8_5].[Score_3] AS [Score_3], [XGB_Tree_8_5].[Score_4] AS [Score_4], [XGB_Tree_8_5].[Score_5] AS [Score_5], [XGB_Tree_8_5].[Score_6] AS [Score_6], [XGB_Tree_8_5].[Score_7] AS [Score_7], [XGB_Tree_8_5].[Score_8] AS [Score_8], [XGB_Tree_8_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_5] UNION ALL SELECT [XGB_Tree_9_5].[KEY] AS [KEY], [XGB_Tree_9_5].[Score_0] AS [Score_0], [XGB_Tree_9_5].[Score_1] AS [Score_1], [XGB_Tree_9_5].[Score_2] AS [Score_2], [XGB_Tree_9_5].[Score_3] AS [Score_3], [XGB_Tree_9_5].[Score_4] AS [Score_4], [XGB_Tree_9_5].[Score_5] AS [Score_5], [XGB_Tree_9_5].[Score_6] AS [Score_6], [XGB_Tree_9_5].[Score_7] AS [Score_7], [XGB_Tree_9_5].[Score_8] AS [Score_8], [XGB_Tree_9_5].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_5] UNION ALL SELECT [XGB_Tree_0_6].[KEY] AS [KEY], [XGB_Tree_0_6].[Score_0] AS [Score_0], [XGB_Tree_0_6].[Score_1] AS [Score_1], [XGB_Tree_0_6].[Score_2] AS [Score_2], [XGB_Tree_0_6].[Score_3] AS [Score_3], [XGB_Tree_0_6].[Score_4] AS [Score_4], [XGB_Tree_0_6].[Score_5] AS [Score_5], [XGB_Tree_0_6].[Score_6] AS [Score_6], [XGB_Tree_0_6].[Score_7] AS [Score_7], [XGB_Tree_0_6].[Score_8] AS [Score_8], [XGB_Tree_0_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_6] UNION ALL SELECT [XGB_Tree_1_6].[KEY] AS [KEY], [XGB_Tree_1_6].[Score_0] AS [Score_0], [XGB_Tree_1_6].[Score_1] AS [Score_1], [XGB_Tree_1_6].[Score_2] AS [Score_2], [XGB_Tree_1_6].[Score_3] AS [Score_3], [XGB_Tree_1_6].[Score_4] AS [Score_4], [XGB_Tree_1_6].[Score_5] AS [Score_5], [XGB_Tree_1_6].[Score_6] AS [Score_6], [XGB_Tree_1_6].[Score_7] AS [Score_7], [XGB_Tree_1_6].[Score_8] AS [Score_8], [XGB_Tree_1_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_6] UNION ALL SELECT [XGB_Tree_2_6].[KEY] AS [KEY], [XGB_Tree_2_6].[Score_0] AS [Score_0], [XGB_Tree_2_6].[Score_1] AS [Score_1], [XGB_Tree_2_6].[Score_2] AS [Score_2], [XGB_Tree_2_6].[Score_3] AS [Score_3], [XGB_Tree_2_6].[Score_4] AS [Score_4], [XGB_Tree_2_6].[Score_5] AS [Score_5], [XGB_Tree_2_6].[Score_6] AS [Score_6], [XGB_Tree_2_6].[Score_7] AS [Score_7], [XGB_Tree_2_6].[Score_8] AS [Score_8], [XGB_Tree_2_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_6] UNION ALL SELECT [XGB_Tree_3_6].[KEY] AS [KEY], [XGB_Tree_3_6].[Score_0] AS [Score_0], [XGB_Tree_3_6].[Score_1] AS [Score_1], [XGB_Tree_3_6].[Score_2] AS [Score_2], [XGB_Tree_3_6].[Score_3] AS [Score_3], [XGB_Tree_3_6].[Score_4] AS [Score_4], [XGB_Tree_3_6].[Score_5] AS [Score_5], [XGB_Tree_3_6].[Score_6] AS [Score_6], [XGB_Tree_3_6].[Score_7] AS [Score_7], [XGB_Tree_3_6].[Score_8] AS [Score_8], [XGB_Tree_3_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_6] UNION ALL SELECT [XGB_Tree_4_6].[KEY] AS [KEY], [XGB_Tree_4_6].[Score_0] AS [Score_0], [XGB_Tree_4_6].[Score_1] AS [Score_1], [XGB_Tree_4_6].[Score_2] AS [Score_2], [XGB_Tree_4_6].[Score_3] AS [Score_3], [XGB_Tree_4_6].[Score_4] AS [Score_4], [XGB_Tree_4_6].[Score_5] AS [Score_5], [XGB_Tree_4_6].[Score_6] AS [Score_6], [XGB_Tree_4_6].[Score_7] AS [Score_7], [XGB_Tree_4_6].[Score_8] AS [Score_8], [XGB_Tree_4_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_6] UNION ALL SELECT [XGB_Tree_5_6].[KEY] AS [KEY], [XGB_Tree_5_6].[Score_0] AS [Score_0], [XGB_Tree_5_6].[Score_1] AS [Score_1], [XGB_Tree_5_6].[Score_2] AS [Score_2], [XGB_Tree_5_6].[Score_3] AS [Score_3], [XGB_Tree_5_6].[Score_4] AS [Score_4], [XGB_Tree_5_6].[Score_5] AS [Score_5], [XGB_Tree_5_6].[Score_6] AS [Score_6], [XGB_Tree_5_6].[Score_7] AS [Score_7], [XGB_Tree_5_6].[Score_8] AS [Score_8], [XGB_Tree_5_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_6] UNION ALL SELECT [XGB_Tree_6_6].[KEY] AS [KEY], [XGB_Tree_6_6].[Score_0] AS [Score_0], [XGB_Tree_6_6].[Score_1] AS [Score_1], [XGB_Tree_6_6].[Score_2] AS [Score_2], [XGB_Tree_6_6].[Score_3] AS [Score_3], [XGB_Tree_6_6].[Score_4] AS [Score_4], [XGB_Tree_6_6].[Score_5] AS [Score_5], [XGB_Tree_6_6].[Score_6] AS [Score_6], [XGB_Tree_6_6].[Score_7] AS [Score_7], [XGB_Tree_6_6].[Score_8] AS [Score_8], [XGB_Tree_6_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_6] UNION ALL SELECT [XGB_Tree_7_6].[KEY] AS [KEY], [XGB_Tree_7_6].[Score_0] AS [Score_0], [XGB_Tree_7_6].[Score_1] AS [Score_1], [XGB_Tree_7_6].[Score_2] AS [Score_2], [XGB_Tree_7_6].[Score_3] AS [Score_3], [XGB_Tree_7_6].[Score_4] AS [Score_4], [XGB_Tree_7_6].[Score_5] AS [Score_5], [XGB_Tree_7_6].[Score_6] AS [Score_6], [XGB_Tree_7_6].[Score_7] AS [Score_7], [XGB_Tree_7_6].[Score_8] AS [Score_8], [XGB_Tree_7_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_6] UNION ALL SELECT [XGB_Tree_8_6].[KEY] AS [KEY], [XGB_Tree_8_6].[Score_0] AS [Score_0], [XGB_Tree_8_6].[Score_1] AS [Score_1], [XGB_Tree_8_6].[Score_2] AS [Score_2], [XGB_Tree_8_6].[Score_3] AS [Score_3], [XGB_Tree_8_6].[Score_4] AS [Score_4], [XGB_Tree_8_6].[Score_5] AS [Score_5], [XGB_Tree_8_6].[Score_6] AS [Score_6], [XGB_Tree_8_6].[Score_7] AS [Score_7], [XGB_Tree_8_6].[Score_8] AS [Score_8], [XGB_Tree_8_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_6] UNION ALL SELECT [XGB_Tree_9_6].[KEY] AS [KEY], [XGB_Tree_9_6].[Score_0] AS [Score_0], [XGB_Tree_9_6].[Score_1] AS [Score_1], [XGB_Tree_9_6].[Score_2] AS [Score_2], [XGB_Tree_9_6].[Score_3] AS [Score_3], [XGB_Tree_9_6].[Score_4] AS [Score_4], [XGB_Tree_9_6].[Score_5] AS [Score_5], [XGB_Tree_9_6].[Score_6] AS [Score_6], [XGB_Tree_9_6].[Score_7] AS [Score_7], [XGB_Tree_9_6].[Score_8] AS [Score_8], [XGB_Tree_9_6].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_6] UNION ALL SELECT [XGB_Tree_0_7].[KEY] AS [KEY], [XGB_Tree_0_7].[Score_0] AS [Score_0], [XGB_Tree_0_7].[Score_1] AS [Score_1], [XGB_Tree_0_7].[Score_2] AS [Score_2], [XGB_Tree_0_7].[Score_3] AS [Score_3], [XGB_Tree_0_7].[Score_4] AS [Score_4], [XGB_Tree_0_7].[Score_5] AS [Score_5], [XGB_Tree_0_7].[Score_6] AS [Score_6], [XGB_Tree_0_7].[Score_7] AS [Score_7], [XGB_Tree_0_7].[Score_8] AS [Score_8], [XGB_Tree_0_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_7] UNION ALL SELECT [XGB_Tree_1_7].[KEY] AS [KEY], [XGB_Tree_1_7].[Score_0] AS [Score_0], [XGB_Tree_1_7].[Score_1] AS [Score_1], [XGB_Tree_1_7].[Score_2] AS [Score_2], [XGB_Tree_1_7].[Score_3] AS [Score_3], [XGB_Tree_1_7].[Score_4] AS [Score_4], [XGB_Tree_1_7].[Score_5] AS [Score_5], [XGB_Tree_1_7].[Score_6] AS [Score_6], [XGB_Tree_1_7].[Score_7] AS [Score_7], [XGB_Tree_1_7].[Score_8] AS [Score_8], [XGB_Tree_1_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_7] UNION ALL SELECT [XGB_Tree_2_7].[KEY] AS [KEY], [XGB_Tree_2_7].[Score_0] AS [Score_0], [XGB_Tree_2_7].[Score_1] AS [Score_1], [XGB_Tree_2_7].[Score_2] AS [Score_2], [XGB_Tree_2_7].[Score_3] AS [Score_3], [XGB_Tree_2_7].[Score_4] AS [Score_4], [XGB_Tree_2_7].[Score_5] AS [Score_5], [XGB_Tree_2_7].[Score_6] AS [Score_6], [XGB_Tree_2_7].[Score_7] AS [Score_7], [XGB_Tree_2_7].[Score_8] AS [Score_8], [XGB_Tree_2_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_7] UNION ALL SELECT [XGB_Tree_3_7].[KEY] AS [KEY], [XGB_Tree_3_7].[Score_0] AS [Score_0], [XGB_Tree_3_7].[Score_1] AS [Score_1], [XGB_Tree_3_7].[Score_2] AS [Score_2], [XGB_Tree_3_7].[Score_3] AS [Score_3], [XGB_Tree_3_7].[Score_4] AS [Score_4], [XGB_Tree_3_7].[Score_5] AS [Score_5], [XGB_Tree_3_7].[Score_6] AS [Score_6], [XGB_Tree_3_7].[Score_7] AS [Score_7], [XGB_Tree_3_7].[Score_8] AS [Score_8], [XGB_Tree_3_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_7] UNION ALL SELECT [XGB_Tree_4_7].[KEY] AS [KEY], [XGB_Tree_4_7].[Score_0] AS [Score_0], [XGB_Tree_4_7].[Score_1] AS [Score_1], [XGB_Tree_4_7].[Score_2] AS [Score_2], [XGB_Tree_4_7].[Score_3] AS [Score_3], [XGB_Tree_4_7].[Score_4] AS [Score_4], [XGB_Tree_4_7].[Score_5] AS [Score_5], [XGB_Tree_4_7].[Score_6] AS [Score_6], [XGB_Tree_4_7].[Score_7] AS [Score_7], [XGB_Tree_4_7].[Score_8] AS [Score_8], [XGB_Tree_4_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_7] UNION ALL SELECT [XGB_Tree_5_7].[KEY] AS [KEY], [XGB_Tree_5_7].[Score_0] AS [Score_0], [XGB_Tree_5_7].[Score_1] AS [Score_1], [XGB_Tree_5_7].[Score_2] AS [Score_2], [XGB_Tree_5_7].[Score_3] AS [Score_3], [XGB_Tree_5_7].[Score_4] AS [Score_4], [XGB_Tree_5_7].[Score_5] AS [Score_5], [XGB_Tree_5_7].[Score_6] AS [Score_6], [XGB_Tree_5_7].[Score_7] AS [Score_7], [XGB_Tree_5_7].[Score_8] AS [Score_8], [XGB_Tree_5_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_7] UNION ALL SELECT [XGB_Tree_6_7].[KEY] AS [KEY], [XGB_Tree_6_7].[Score_0] AS [Score_0], [XGB_Tree_6_7].[Score_1] AS [Score_1], [XGB_Tree_6_7].[Score_2] AS [Score_2], [XGB_Tree_6_7].[Score_3] AS [Score_3], [XGB_Tree_6_7].[Score_4] AS [Score_4], [XGB_Tree_6_7].[Score_5] AS [Score_5], [XGB_Tree_6_7].[Score_6] AS [Score_6], [XGB_Tree_6_7].[Score_7] AS [Score_7], [XGB_Tree_6_7].[Score_8] AS [Score_8], [XGB_Tree_6_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_7] UNION ALL SELECT [XGB_Tree_7_7].[KEY] AS [KEY], [XGB_Tree_7_7].[Score_0] AS [Score_0], [XGB_Tree_7_7].[Score_1] AS [Score_1], [XGB_Tree_7_7].[Score_2] AS [Score_2], [XGB_Tree_7_7].[Score_3] AS [Score_3], [XGB_Tree_7_7].[Score_4] AS [Score_4], [XGB_Tree_7_7].[Score_5] AS [Score_5], [XGB_Tree_7_7].[Score_6] AS [Score_6], [XGB_Tree_7_7].[Score_7] AS [Score_7], [XGB_Tree_7_7].[Score_8] AS [Score_8], [XGB_Tree_7_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_7] UNION ALL SELECT [XGB_Tree_8_7].[KEY] AS [KEY], [XGB_Tree_8_7].[Score_0] AS [Score_0], [XGB_Tree_8_7].[Score_1] AS [Score_1], [XGB_Tree_8_7].[Score_2] AS [Score_2], [XGB_Tree_8_7].[Score_3] AS [Score_3], [XGB_Tree_8_7].[Score_4] AS [Score_4], [XGB_Tree_8_7].[Score_5] AS [Score_5], [XGB_Tree_8_7].[Score_6] AS [Score_6], [XGB_Tree_8_7].[Score_7] AS [Score_7], [XGB_Tree_8_7].[Score_8] AS [Score_8], [XGB_Tree_8_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_7] UNION ALL SELECT [XGB_Tree_9_7].[KEY] AS [KEY], [XGB_Tree_9_7].[Score_0] AS [Score_0], [XGB_Tree_9_7].[Score_1] AS [Score_1], [XGB_Tree_9_7].[Score_2] AS [Score_2], [XGB_Tree_9_7].[Score_3] AS [Score_3], [XGB_Tree_9_7].[Score_4] AS [Score_4], [XGB_Tree_9_7].[Score_5] AS [Score_5], [XGB_Tree_9_7].[Score_6] AS [Score_6], [XGB_Tree_9_7].[Score_7] AS [Score_7], [XGB_Tree_9_7].[Score_8] AS [Score_8], [XGB_Tree_9_7].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_7] UNION ALL SELECT [XGB_Tree_0_8].[KEY] AS [KEY], [XGB_Tree_0_8].[Score_0] AS [Score_0], [XGB_Tree_0_8].[Score_1] AS [Score_1], [XGB_Tree_0_8].[Score_2] AS [Score_2], [XGB_Tree_0_8].[Score_3] AS [Score_3], [XGB_Tree_0_8].[Score_4] AS [Score_4], [XGB_Tree_0_8].[Score_5] AS [Score_5], [XGB_Tree_0_8].[Score_6] AS [Score_6], [XGB_Tree_0_8].[Score_7] AS [Score_7], [XGB_Tree_0_8].[Score_8] AS [Score_8], [XGB_Tree_0_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_8] UNION ALL SELECT [XGB_Tree_1_8].[KEY] AS [KEY], [XGB_Tree_1_8].[Score_0] AS [Score_0], [XGB_Tree_1_8].[Score_1] AS [Score_1], [XGB_Tree_1_8].[Score_2] AS [Score_2], [XGB_Tree_1_8].[Score_3] AS [Score_3], [XGB_Tree_1_8].[Score_4] AS [Score_4], [XGB_Tree_1_8].[Score_5] AS [Score_5], [XGB_Tree_1_8].[Score_6] AS [Score_6], [XGB_Tree_1_8].[Score_7] AS [Score_7], [XGB_Tree_1_8].[Score_8] AS [Score_8], [XGB_Tree_1_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_8] UNION ALL SELECT [XGB_Tree_2_8].[KEY] AS [KEY], [XGB_Tree_2_8].[Score_0] AS [Score_0], [XGB_Tree_2_8].[Score_1] AS [Score_1], [XGB_Tree_2_8].[Score_2] AS [Score_2], [XGB_Tree_2_8].[Score_3] AS [Score_3], [XGB_Tree_2_8].[Score_4] AS [Score_4], [XGB_Tree_2_8].[Score_5] AS [Score_5], [XGB_Tree_2_8].[Score_6] AS [Score_6], [XGB_Tree_2_8].[Score_7] AS [Score_7], [XGB_Tree_2_8].[Score_8] AS [Score_8], [XGB_Tree_2_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_8] UNION ALL SELECT [XGB_Tree_3_8].[KEY] AS [KEY], [XGB_Tree_3_8].[Score_0] AS [Score_0], [XGB_Tree_3_8].[Score_1] AS [Score_1], [XGB_Tree_3_8].[Score_2] AS [Score_2], [XGB_Tree_3_8].[Score_3] AS [Score_3], [XGB_Tree_3_8].[Score_4] AS [Score_4], [XGB_Tree_3_8].[Score_5] AS [Score_5], [XGB_Tree_3_8].[Score_6] AS [Score_6], [XGB_Tree_3_8].[Score_7] AS [Score_7], [XGB_Tree_3_8].[Score_8] AS [Score_8], [XGB_Tree_3_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_8] UNION ALL SELECT [XGB_Tree_4_8].[KEY] AS [KEY], [XGB_Tree_4_8].[Score_0] AS [Score_0], [XGB_Tree_4_8].[Score_1] AS [Score_1], [XGB_Tree_4_8].[Score_2] AS [Score_2], [XGB_Tree_4_8].[Score_3] AS [Score_3], [XGB_Tree_4_8].[Score_4] AS [Score_4], [XGB_Tree_4_8].[Score_5] AS [Score_5], [XGB_Tree_4_8].[Score_6] AS [Score_6], [XGB_Tree_4_8].[Score_7] AS [Score_7], [XGB_Tree_4_8].[Score_8] AS [Score_8], [XGB_Tree_4_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_8] UNION ALL SELECT [XGB_Tree_5_8].[KEY] AS [KEY], [XGB_Tree_5_8].[Score_0] AS [Score_0], [XGB_Tree_5_8].[Score_1] AS [Score_1], [XGB_Tree_5_8].[Score_2] AS [Score_2], [XGB_Tree_5_8].[Score_3] AS [Score_3], [XGB_Tree_5_8].[Score_4] AS [Score_4], [XGB_Tree_5_8].[Score_5] AS [Score_5], [XGB_Tree_5_8].[Score_6] AS [Score_6], [XGB_Tree_5_8].[Score_7] AS [Score_7], [XGB_Tree_5_8].[Score_8] AS [Score_8], [XGB_Tree_5_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_8] UNION ALL SELECT [XGB_Tree_6_8].[KEY] AS [KEY], [XGB_Tree_6_8].[Score_0] AS [Score_0], [XGB_Tree_6_8].[Score_1] AS [Score_1], [XGB_Tree_6_8].[Score_2] AS [Score_2], [XGB_Tree_6_8].[Score_3] AS [Score_3], [XGB_Tree_6_8].[Score_4] AS [Score_4], [XGB_Tree_6_8].[Score_5] AS [Score_5], [XGB_Tree_6_8].[Score_6] AS [Score_6], [XGB_Tree_6_8].[Score_7] AS [Score_7], [XGB_Tree_6_8].[Score_8] AS [Score_8], [XGB_Tree_6_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_8] UNION ALL SELECT [XGB_Tree_7_8].[KEY] AS [KEY], [XGB_Tree_7_8].[Score_0] AS [Score_0], [XGB_Tree_7_8].[Score_1] AS [Score_1], [XGB_Tree_7_8].[Score_2] AS [Score_2], [XGB_Tree_7_8].[Score_3] AS [Score_3], [XGB_Tree_7_8].[Score_4] AS [Score_4], [XGB_Tree_7_8].[Score_5] AS [Score_5], [XGB_Tree_7_8].[Score_6] AS [Score_6], [XGB_Tree_7_8].[Score_7] AS [Score_7], [XGB_Tree_7_8].[Score_8] AS [Score_8], [XGB_Tree_7_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_8] UNION ALL SELECT [XGB_Tree_8_8].[KEY] AS [KEY], [XGB_Tree_8_8].[Score_0] AS [Score_0], [XGB_Tree_8_8].[Score_1] AS [Score_1], [XGB_Tree_8_8].[Score_2] AS [Score_2], [XGB_Tree_8_8].[Score_3] AS [Score_3], [XGB_Tree_8_8].[Score_4] AS [Score_4], [XGB_Tree_8_8].[Score_5] AS [Score_5], [XGB_Tree_8_8].[Score_6] AS [Score_6], [XGB_Tree_8_8].[Score_7] AS [Score_7], [XGB_Tree_8_8].[Score_8] AS [Score_8], [XGB_Tree_8_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_8] UNION ALL SELECT [XGB_Tree_9_8].[KEY] AS [KEY], [XGB_Tree_9_8].[Score_0] AS [Score_0], [XGB_Tree_9_8].[Score_1] AS [Score_1], [XGB_Tree_9_8].[Score_2] AS [Score_2], [XGB_Tree_9_8].[Score_3] AS [Score_3], [XGB_Tree_9_8].[Score_4] AS [Score_4], [XGB_Tree_9_8].[Score_5] AS [Score_5], [XGB_Tree_9_8].[Score_6] AS [Score_6], [XGB_Tree_9_8].[Score_7] AS [Score_7], [XGB_Tree_9_8].[Score_8] AS [Score_8], [XGB_Tree_9_8].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_8] UNION ALL SELECT [XGB_Tree_0_9].[KEY] AS [KEY], [XGB_Tree_0_9].[Score_0] AS [Score_0], [XGB_Tree_0_9].[Score_1] AS [Score_1], [XGB_Tree_0_9].[Score_2] AS [Score_2], [XGB_Tree_0_9].[Score_3] AS [Score_3], [XGB_Tree_0_9].[Score_4] AS [Score_4], [XGB_Tree_0_9].[Score_5] AS [Score_5], [XGB_Tree_0_9].[Score_6] AS [Score_6], [XGB_Tree_0_9].[Score_7] AS [Score_7], [XGB_Tree_0_9].[Score_8] AS [Score_8], [XGB_Tree_0_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_0_9] UNION ALL SELECT [XGB_Tree_1_9].[KEY] AS [KEY], [XGB_Tree_1_9].[Score_0] AS [Score_0], [XGB_Tree_1_9].[Score_1] AS [Score_1], [XGB_Tree_1_9].[Score_2] AS [Score_2], [XGB_Tree_1_9].[Score_3] AS [Score_3], [XGB_Tree_1_9].[Score_4] AS [Score_4], [XGB_Tree_1_9].[Score_5] AS [Score_5], [XGB_Tree_1_9].[Score_6] AS [Score_6], [XGB_Tree_1_9].[Score_7] AS [Score_7], [XGB_Tree_1_9].[Score_8] AS [Score_8], [XGB_Tree_1_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_1_9] UNION ALL SELECT [XGB_Tree_2_9].[KEY] AS [KEY], [XGB_Tree_2_9].[Score_0] AS [Score_0], [XGB_Tree_2_9].[Score_1] AS [Score_1], [XGB_Tree_2_9].[Score_2] AS [Score_2], [XGB_Tree_2_9].[Score_3] AS [Score_3], [XGB_Tree_2_9].[Score_4] AS [Score_4], [XGB_Tree_2_9].[Score_5] AS [Score_5], [XGB_Tree_2_9].[Score_6] AS [Score_6], [XGB_Tree_2_9].[Score_7] AS [Score_7], [XGB_Tree_2_9].[Score_8] AS [Score_8], [XGB_Tree_2_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_2_9] UNION ALL SELECT [XGB_Tree_3_9].[KEY] AS [KEY], [XGB_Tree_3_9].[Score_0] AS [Score_0], [XGB_Tree_3_9].[Score_1] AS [Score_1], [XGB_Tree_3_9].[Score_2] AS [Score_2], [XGB_Tree_3_9].[Score_3] AS [Score_3], [XGB_Tree_3_9].[Score_4] AS [Score_4], [XGB_Tree_3_9].[Score_5] AS [Score_5], [XGB_Tree_3_9].[Score_6] AS [Score_6], [XGB_Tree_3_9].[Score_7] AS [Score_7], [XGB_Tree_3_9].[Score_8] AS [Score_8], [XGB_Tree_3_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_3_9] UNION ALL SELECT [XGB_Tree_4_9].[KEY] AS [KEY], [XGB_Tree_4_9].[Score_0] AS [Score_0], [XGB_Tree_4_9].[Score_1] AS [Score_1], [XGB_Tree_4_9].[Score_2] AS [Score_2], [XGB_Tree_4_9].[Score_3] AS [Score_3], [XGB_Tree_4_9].[Score_4] AS [Score_4], [XGB_Tree_4_9].[Score_5] AS [Score_5], [XGB_Tree_4_9].[Score_6] AS [Score_6], [XGB_Tree_4_9].[Score_7] AS [Score_7], [XGB_Tree_4_9].[Score_8] AS [Score_8], [XGB_Tree_4_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_4_9] UNION ALL SELECT [XGB_Tree_5_9].[KEY] AS [KEY], [XGB_Tree_5_9].[Score_0] AS [Score_0], [XGB_Tree_5_9].[Score_1] AS [Score_1], [XGB_Tree_5_9].[Score_2] AS [Score_2], [XGB_Tree_5_9].[Score_3] AS [Score_3], [XGB_Tree_5_9].[Score_4] AS [Score_4], [XGB_Tree_5_9].[Score_5] AS [Score_5], [XGB_Tree_5_9].[Score_6] AS [Score_6], [XGB_Tree_5_9].[Score_7] AS [Score_7], [XGB_Tree_5_9].[Score_8] AS [Score_8], [XGB_Tree_5_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_5_9] UNION ALL SELECT [XGB_Tree_6_9].[KEY] AS [KEY], [XGB_Tree_6_9].[Score_0] AS [Score_0], [XGB_Tree_6_9].[Score_1] AS [Score_1], [XGB_Tree_6_9].[Score_2] AS [Score_2], [XGB_Tree_6_9].[Score_3] AS [Score_3], [XGB_Tree_6_9].[Score_4] AS [Score_4], [XGB_Tree_6_9].[Score_5] AS [Score_5], [XGB_Tree_6_9].[Score_6] AS [Score_6], [XGB_Tree_6_9].[Score_7] AS [Score_7], [XGB_Tree_6_9].[Score_8] AS [Score_8], [XGB_Tree_6_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_6_9] UNION ALL SELECT [XGB_Tree_7_9].[KEY] AS [KEY], [XGB_Tree_7_9].[Score_0] AS [Score_0], [XGB_Tree_7_9].[Score_1] AS [Score_1], [XGB_Tree_7_9].[Score_2] AS [Score_2], [XGB_Tree_7_9].[Score_3] AS [Score_3], [XGB_Tree_7_9].[Score_4] AS [Score_4], [XGB_Tree_7_9].[Score_5] AS [Score_5], [XGB_Tree_7_9].[Score_6] AS [Score_6], [XGB_Tree_7_9].[Score_7] AS [Score_7], [XGB_Tree_7_9].[Score_8] AS [Score_8], [XGB_Tree_7_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_7_9] UNION ALL SELECT [XGB_Tree_8_9].[KEY] AS [KEY], [XGB_Tree_8_9].[Score_0] AS [Score_0], [XGB_Tree_8_9].[Score_1] AS [Score_1], [XGB_Tree_8_9].[Score_2] AS [Score_2], [XGB_Tree_8_9].[Score_3] AS [Score_3], [XGB_Tree_8_9].[Score_4] AS [Score_4], [XGB_Tree_8_9].[Score_5] AS [Score_5], [XGB_Tree_8_9].[Score_6] AS [Score_6], [XGB_Tree_8_9].[Score_7] AS [Score_7], [XGB_Tree_8_9].[Score_8] AS [Score_8], [XGB_Tree_8_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_8_9] UNION ALL SELECT [XGB_Tree_9_9].[KEY] AS [KEY], [XGB_Tree_9_9].[Score_0] AS [Score_0], [XGB_Tree_9_9].[Score_1] AS [Score_1], [XGB_Tree_9_9].[Score_2] AS [Score_2], [XGB_Tree_9_9].[Score_3] AS [Score_3], [XGB_Tree_9_9].[Score_4] AS [Score_4], [XGB_Tree_9_9].[Score_5] AS [Score_5], [XGB_Tree_9_9].[Score_6] AS [Score_6], [XGB_Tree_9_9].[Score_7] AS [Score_7], [XGB_Tree_9_9].[Score_8] AS [Score_8], [XGB_Tree_9_9].[Score_9] AS [Score_9] 
FROM [XGB_Tree_9_9]) AS ensemble_score_union), 
[XGB_Sum_Scores] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Score_0] AS [Score_0], [T].[Score_1] AS [Score_1], [T].[Score_2] AS [Score_2], [T].[Score_3] AS [Score_3], [T].[Score_4] AS [Score_4], [T].[Score_5] AS [Score_5], [T].[Score_6] AS [Score_6], [T].[Score_7] AS [Score_7], [T].[Score_8] AS [Score_8], [T].[Score_9] AS [Score_9] 
FROM (SELECT [Score_Union_CTE].[KEY] AS [KEY], sum([Score_Union_CTE].[Score_0]) AS [Score_0], sum([Score_Union_CTE].[Score_1]) AS [Score_1], sum([Score_Union_CTE].[Score_2]) AS [Score_2], sum([Score_Union_CTE].[Score_3]) AS [Score_3], sum([Score_Union_CTE].[Score_4]) AS [Score_4], sum([Score_Union_CTE].[Score_5]) AS [Score_5], sum([Score_Union_CTE].[Score_6]) AS [Score_6], sum([Score_Union_CTE].[Score_7]) AS [Score_7], sum([Score_Union_CTE].[Score_8]) AS [Score_8], sum([Score_Union_CTE].[Score_9]) AS [Score_9] 
FROM [Score_Union_CTE] GROUP BY [Score_Union_CTE].[KEY]) AS [T]), 
orig_cte AS 
(SELECT [XGB_Sum_Scores].[KEY] AS [KEY], [XGB_Sum_Scores].[Score_0] AS [Score_0], [XGB_Sum_Scores].[Score_1] AS [Score_1], [XGB_Sum_Scores].[Score_2] AS [Score_2], [XGB_Sum_Scores].[Score_3] AS [Score_3], [XGB_Sum_Scores].[Score_4] AS [Score_4], [XGB_Sum_Scores].[Score_5] AS [Score_5], [XGB_Sum_Scores].[Score_6] AS [Score_6], [XGB_Sum_Scores].[Score_7] AS [Score_7], [XGB_Sum_Scores].[Score_8] AS [Score_8], [XGB_Sum_Scores].[Score_9] AS [Score_9], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [Proba_2], CAST(NULL AS FLOAT) AS [Proba_3], CAST(NULL AS FLOAT) AS [Proba_4], CAST(NULL AS FLOAT) AS [Proba_5], CAST(NULL AS FLOAT) AS [Proba_6], CAST(NULL AS FLOAT) AS [Proba_7], CAST(NULL AS FLOAT) AS [Proba_8], CAST(NULL AS FLOAT) AS [Proba_9], CAST(NULL AS FLOAT) AS [LogProba_0], CAST(NULL AS FLOAT) AS [LogProba_1], CAST(NULL AS FLOAT) AS [LogProba_2], CAST(NULL AS FLOAT) AS [LogProba_3], CAST(NULL AS FLOAT) AS [LogProba_4], CAST(NULL AS FLOAT) AS [LogProba_5], CAST(NULL AS FLOAT) AS [LogProba_6], CAST(NULL AS FLOAT) AS [LogProba_7], CAST(NULL AS FLOAT) AS [LogProba_8], CAST(NULL AS FLOAT) AS [LogProba_9], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM [XGB_Sum_Scores]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 4 AS class, orig_cte.[LogProba_4] AS [LogProba], orig_cte.[Proba_4] AS [Proba], orig_cte.[Score_4] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 5 AS class, orig_cte.[LogProba_5] AS [LogProba], orig_cte.[Proba_5] AS [Proba], orig_cte.[Score_5] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 6 AS class, orig_cte.[LogProba_6] AS [LogProba], orig_cte.[Proba_6] AS [Proba], orig_cte.[Score_6] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 7 AS class, orig_cte.[LogProba_7] AS [LogProba], orig_cte.[Proba_7] AS [Proba], orig_cte.[Score_7] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 8 AS class, orig_cte.[LogProba_8] AS [LogProba], orig_cte.[Proba_8] AS [Proba], orig_cte.[Score_8] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 9 AS class, orig_cte.[LogProba_9] AS [LogProba], orig_cte.[Proba_9] AS [Proba], orig_cte.[Score_9] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Score_4] AS [Score_4], orig_cte.[Score_5] AS [Score_5], orig_cte.[Score_6] AS [Score_6], orig_cte.[Score_7] AS [Score_7], orig_cte.[Score_8] AS [Score_8], orig_cte.[Score_9] AS [Score_9], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[Proba_4] AS [Proba_4], orig_cte.[Proba_5] AS [Proba_5], orig_cte.[Proba_6] AS [Proba_6], orig_cte.[Proba_7] AS [Proba_7], orig_cte.[Proba_8] AS [Proba_8], orig_cte.[Proba_9] AS [Proba_9], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[LogProba_4] AS [LogProba_4], orig_cte.[LogProba_5] AS [LogProba_5], orig_cte.[LogProba_6] AS [LogProba_6], orig_cte.[LogProba_7] AS [LogProba_7], orig_cte.[LogProba_8] AS [LogProba_8], orig_cte.[LogProba_9] AS [LogProba_9], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
score_soft_max_deltas AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Score_4] AS [Score_4], score_max.[Score_5] AS [Score_5], score_max.[Score_6] AS [Score_6], score_max.[Score_7] AS [Score_7], score_max.[Score_8] AS [Score_8], score_max.[Score_9] AS [Score_9], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[Proba_4] AS [Proba_4], score_max.[Proba_5] AS [Proba_5], score_max.[Proba_6] AS [Proba_6], score_max.[Proba_7] AS [Proba_7], score_max.[Proba_8] AS [Proba_8], score_max.[Proba_9] AS [Proba_9], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[LogProba_4] AS [LogProba_4], score_max.[LogProba_5] AS [LogProba_5], score_max.[LogProba_6] AS [LogProba_6], score_max.[LogProba_7] AS [LogProba_7], score_max.[LogProba_8] AS [LogProba_8], score_max.[LogProba_9] AS [LogProba_9], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score], exp(score_max.[Score_0] - score_max.[max_Score]) AS [exp_delta_Score_0], exp(score_max.[Score_1] - score_max.[max_Score]) AS [exp_delta_Score_1], exp(score_max.[Score_2] - score_max.[max_Score]) AS [exp_delta_Score_2], exp(score_max.[Score_3] - score_max.[max_Score]) AS [exp_delta_Score_3], exp(score_max.[Score_4] - score_max.[max_Score]) AS [exp_delta_Score_4], exp(score_max.[Score_5] - score_max.[max_Score]) AS [exp_delta_Score_5], exp(score_max.[Score_6] - score_max.[max_Score]) AS [exp_delta_Score_6], exp(score_max.[Score_7] - score_max.[max_Score]) AS [exp_delta_Score_7], exp(score_max.[Score_8] - score_max.[max_Score]) AS [exp_delta_Score_8], exp(score_max.[Score_9] - score_max.[max_Score]) AS [exp_delta_Score_9] 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu.[KEY] AS [KEY], soft_scu.class AS class, soft_scu.[exp_delta_Score] AS [exp_delta_Score] 
FROM (SELECT score_soft_max_deltas.[KEY] AS [KEY], 0 AS class, score_soft_max_deltas.[exp_delta_Score_0] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 1 AS class, score_soft_max_deltas.[exp_delta_Score_1] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 2 AS class, score_soft_max_deltas.[exp_delta_Score_2] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 3 AS class, score_soft_max_deltas.[exp_delta_Score_3] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 4 AS class, score_soft_max_deltas.[exp_delta_Score_4] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 5 AS class, score_soft_max_deltas.[exp_delta_Score_5] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 6 AS class, score_soft_max_deltas.[exp_delta_Score_6] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 7 AS class, score_soft_max_deltas.[exp_delta_Score_7] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 8 AS class, score_soft_max_deltas.[exp_delta_Score_8] AS [exp_delta_Score] 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas.[KEY] AS [KEY], 9 AS class, score_soft_max_deltas.[exp_delta_Score_9] AS [exp_delta_Score] 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas.[KEY] AS [KEY], score_soft_max_deltas.[Score_0] AS [Score_0], score_soft_max_deltas.[Score_1] AS [Score_1], score_soft_max_deltas.[Score_2] AS [Score_2], score_soft_max_deltas.[Score_3] AS [Score_3], score_soft_max_deltas.[Score_4] AS [Score_4], score_soft_max_deltas.[Score_5] AS [Score_5], score_soft_max_deltas.[Score_6] AS [Score_6], score_soft_max_deltas.[Score_7] AS [Score_7], score_soft_max_deltas.[Score_8] AS [Score_8], score_soft_max_deltas.[Score_9] AS [Score_9], score_soft_max_deltas.[Proba_0] AS [Proba_0], score_soft_max_deltas.[Proba_1] AS [Proba_1], score_soft_max_deltas.[Proba_2] AS [Proba_2], score_soft_max_deltas.[Proba_3] AS [Proba_3], score_soft_max_deltas.[Proba_4] AS [Proba_4], score_soft_max_deltas.[Proba_5] AS [Proba_5], score_soft_max_deltas.[Proba_6] AS [Proba_6], score_soft_max_deltas.[Proba_7] AS [Proba_7], score_soft_max_deltas.[Proba_8] AS [Proba_8], score_soft_max_deltas.[Proba_9] AS [Proba_9], score_soft_max_deltas.[LogProba_0] AS [LogProba_0], score_soft_max_deltas.[LogProba_1] AS [LogProba_1], score_soft_max_deltas.[LogProba_2] AS [LogProba_2], score_soft_max_deltas.[LogProba_3] AS [LogProba_3], score_soft_max_deltas.[LogProba_4] AS [LogProba_4], score_soft_max_deltas.[LogProba_5] AS [LogProba_5], score_soft_max_deltas.[LogProba_6] AS [LogProba_6], score_soft_max_deltas.[LogProba_7] AS [LogProba_7], score_soft_max_deltas.[LogProba_8] AS [LogProba_8], score_soft_max_deltas.[LogProba_9] AS [LogProba_9], score_soft_max_deltas.[Decision] AS [Decision], score_soft_max_deltas.[DecisionProba] AS [DecisionProba], score_soft_max_deltas.[KEY_m] AS [KEY_m], score_soft_max_deltas.[max_Score] AS [max_Score], score_soft_max_deltas.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max_deltas.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max_deltas.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max_deltas.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max_deltas.[exp_delta_Score_4] AS [exp_delta_Score_4], score_soft_max_deltas.[exp_delta_Score_5] AS [exp_delta_Score_5], score_soft_max_deltas.[exp_delta_Score_6] AS [exp_delta_Score_6], score_soft_max_deltas.[exp_delta_Score_7] AS [exp_delta_Score_7], score_soft_max_deltas.[exp_delta_Score_8] AS [exp_delta_Score_8], score_soft_max_deltas.[exp_delta_Score_9] AS [exp_delta_Score_9], sum_exp_t.[KEY_sum] AS [KEY_sum], sum_exp_t.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore] 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft.[KEY] AS [KEY_sum], sum(score_class_union_soft.[exp_delta_Score]) AS [sum_ExpDeltaScore] 
FROM score_class_union_soft GROUP BY score_class_union_soft.[KEY]) AS sum_exp_t ON score_soft_max_deltas.[KEY] = sum_exp_t.[KEY_sum]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Score_4] AS [Score_4], score_soft_max.[Score_5] AS [Score_5], score_soft_max.[Score_6] AS [Score_6], score_soft_max.[Score_7] AS [Score_7], score_soft_max.[Score_8] AS [Score_8], score_soft_max.[Score_9] AS [Score_9], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[Proba_4] AS [Proba_4], score_soft_max.[Proba_5] AS [Proba_5], score_soft_max.[Proba_6] AS [Proba_6], score_soft_max.[Proba_7] AS [Proba_7], score_soft_max.[Proba_8] AS [Proba_8], score_soft_max.[Proba_9] AS [Proba_9], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[LogProba_4] AS [LogProba_4], score_soft_max.[LogProba_5] AS [LogProba_5], score_soft_max.[LogProba_6] AS [LogProba_6], score_soft_max.[LogProba_7] AS [LogProba_7], score_soft_max.[LogProba_8] AS [LogProba_8], score_soft_max.[LogProba_9] AS [LogProba_9], score_soft_max.[Decision] AS [Decision], score_soft_max.[DecisionProba] AS [DecisionProba], score_soft_max.[KEY_m] AS [KEY_m], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[exp_delta_Score_4] AS [exp_delta_Score_4], score_soft_max.[exp_delta_Score_5] AS [exp_delta_Score_5], score_soft_max.[exp_delta_Score_6] AS [exp_delta_Score_6], score_soft_max.[exp_delta_Score_7] AS [exp_delta_Score_7], score_soft_max.[exp_delta_Score_8] AS [exp_delta_Score_8], score_soft_max.[exp_delta_Score_9] AS [exp_delta_Score_9], score_soft_max.[KEY_sum] AS [KEY_sum], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore] 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union.[KEY_u] = score_soft_max.[KEY]), 
arg_max_cte AS 
(SELECT score_soft_max.[KEY] AS [KEY], score_soft_max.[Score_0] AS [Score_0], score_soft_max.[Score_1] AS [Score_1], score_soft_max.[Score_2] AS [Score_2], score_soft_max.[Score_3] AS [Score_3], score_soft_max.[Score_4] AS [Score_4], score_soft_max.[Score_5] AS [Score_5], score_soft_max.[Score_6] AS [Score_6], score_soft_max.[Score_7] AS [Score_7], score_soft_max.[Score_8] AS [Score_8], score_soft_max.[Score_9] AS [Score_9], score_soft_max.[Proba_0] AS [Proba_0], score_soft_max.[Proba_1] AS [Proba_1], score_soft_max.[Proba_2] AS [Proba_2], score_soft_max.[Proba_3] AS [Proba_3], score_soft_max.[Proba_4] AS [Proba_4], score_soft_max.[Proba_5] AS [Proba_5], score_soft_max.[Proba_6] AS [Proba_6], score_soft_max.[Proba_7] AS [Proba_7], score_soft_max.[Proba_8] AS [Proba_8], score_soft_max.[Proba_9] AS [Proba_9], score_soft_max.[LogProba_0] AS [LogProba_0], score_soft_max.[LogProba_1] AS [LogProba_1], score_soft_max.[LogProba_2] AS [LogProba_2], score_soft_max.[LogProba_3] AS [LogProba_3], score_soft_max.[LogProba_4] AS [LogProba_4], score_soft_max.[LogProba_5] AS [LogProba_5], score_soft_max.[LogProba_6] AS [LogProba_6], score_soft_max.[LogProba_7] AS [LogProba_7], score_soft_max.[LogProba_8] AS [LogProba_8], score_soft_max.[LogProba_9] AS [LogProba_9], score_soft_max.[Decision] AS [Decision], score_soft_max.[DecisionProba] AS [DecisionProba], score_soft_max.[KEY_m] AS [KEY_m], score_soft_max.[max_Score] AS [max_Score], score_soft_max.[exp_delta_Score_0] AS [exp_delta_Score_0], score_soft_max.[exp_delta_Score_1] AS [exp_delta_Score_1], score_soft_max.[exp_delta_Score_2] AS [exp_delta_Score_2], score_soft_max.[exp_delta_Score_3] AS [exp_delta_Score_3], score_soft_max.[exp_delta_Score_4] AS [exp_delta_Score_4], score_soft_max.[exp_delta_Score_5] AS [exp_delta_Score_5], score_soft_max.[exp_delta_Score_6] AS [exp_delta_Score_6], score_soft_max.[exp_delta_Score_7] AS [exp_delta_Score_7], score_soft_max.[exp_delta_Score_8] AS [exp_delta_Score_8], score_soft_max.[exp_delta_Score_9] AS [exp_delta_Score_9], score_soft_max.[KEY_sum] AS [KEY_sum], score_soft_max.[sum_ExpDeltaScore] AS [sum_ExpDeltaScore], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score], soft_max_comp.[KEY_softmax] AS [KEY_softmax], soft_max_comp.[SoftProba_0] AS [SoftProba_0], soft_max_comp.[SoftProba_1] AS [SoftProba_1], soft_max_comp.[SoftProba_2] AS [SoftProba_2], soft_max_comp.[SoftProba_3] AS [SoftProba_3], soft_max_comp.[SoftProba_4] AS [SoftProba_4], soft_max_comp.[SoftProba_5] AS [SoftProba_5], soft_max_comp.[SoftProba_6] AS [SoftProba_6], soft_max_comp.[SoftProba_7] AS [SoftProba_7], soft_max_comp.[SoftProba_8] AS [SoftProba_8], soft_max_comp.[SoftProba_9] AS [SoftProba_9] 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] <= union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_soft_max.[KEY] = [arg_max_t_Score].[KEY_Score] LEFT OUTER JOIN (SELECT score_soft_max.[KEY] AS [KEY_softmax], score_soft_max.[exp_delta_Score_0] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_0], score_soft_max.[exp_delta_Score_1] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_1], score_soft_max.[exp_delta_Score_2] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_2], score_soft_max.[exp_delta_Score_3] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_3], score_soft_max.[exp_delta_Score_4] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_4], score_soft_max.[exp_delta_Score_5] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_5], score_soft_max.[exp_delta_Score_6] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_6], score_soft_max.[exp_delta_Score_7] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_7], score_soft_max.[exp_delta_Score_8] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_8], score_soft_max.[exp_delta_Score_9] / score_soft_max.[sum_ExpDeltaScore] AS [SoftProba_9] 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp.[KEY_softmax] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], CAST(NULL AS FLOAT) AS [Score_4], CAST(NULL AS FLOAT) AS [Score_5], CAST(NULL AS FLOAT) AS [Score_6], CAST(NULL AS FLOAT) AS [Score_7], CAST(NULL AS FLOAT) AS [Score_8], CAST(NULL AS FLOAT) AS [Score_9], arg_max_cte.[SoftProba_0] AS [Proba_0], arg_max_cte.[SoftProba_1] AS [Proba_1], arg_max_cte.[SoftProba_2] AS [Proba_2], arg_max_cte.[SoftProba_3] AS [Proba_3], arg_max_cte.[SoftProba_4] AS [Proba_4], arg_max_cte.[SoftProba_5] AS [Proba_5], arg_max_cte.[SoftProba_6] AS [Proba_6], arg_max_cte.[SoftProba_7] AS [Proba_7], arg_max_cte.[SoftProba_8] AS [Proba_8], arg_max_cte.[SoftProba_9] AS [Proba_9], CASE WHEN (arg_max_cte.[SoftProba_0] IS NULL OR arg_max_cte.[SoftProba_0] > 0.0) THEN log(arg_max_cte.[SoftProba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[SoftProba_1] IS NULL OR arg_max_cte.[SoftProba_1] > 0.0) THEN log(arg_max_cte.[SoftProba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[SoftProba_2] IS NULL OR arg_max_cte.[SoftProba_2] > 0.0) THEN log(arg_max_cte.[SoftProba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[SoftProba_3] IS NULL OR arg_max_cte.[SoftProba_3] > 0.0) THEN log(arg_max_cte.[SoftProba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], CASE WHEN (arg_max_cte.[SoftProba_4] IS NULL OR arg_max_cte.[SoftProba_4] > 0.0) THEN log(arg_max_cte.[SoftProba_4]) ELSE -1.79769313486231e+308 END AS [LogProba_4], CASE WHEN (arg_max_cte.[SoftProba_5] IS NULL OR arg_max_cte.[SoftProba_5] > 0.0) THEN log(arg_max_cte.[SoftProba_5]) ELSE -1.79769313486231e+308 END AS [LogProba_5], CASE WHEN (arg_max_cte.[SoftProba_6] IS NULL OR arg_max_cte.[SoftProba_6] > 0.0) THEN log(arg_max_cte.[SoftProba_6]) ELSE -1.79769313486231e+308 END AS [LogProba_6], CASE WHEN (arg_max_cte.[SoftProba_7] IS NULL OR arg_max_cte.[SoftProba_7] > 0.0) THEN log(arg_max_cte.[SoftProba_7]) ELSE -1.79769313486231e+308 END AS [LogProba_7], CASE WHEN (arg_max_cte.[SoftProba_8] IS NULL OR arg_max_cte.[SoftProba_8] > 0.0) THEN log(arg_max_cte.[SoftProba_8]) ELSE -1.79769313486231e+308 END AS [LogProba_8], CASE WHEN (arg_max_cte.[SoftProba_9] IS NULL OR arg_max_cte.[SoftProba_9] > 0.0) THEN log(arg_max_cte.[SoftProba_9]) ELSE -1.79769313486231e+308 END AS [LogProba_9], arg_max_cte.[arg_max_Score] AS [Decision], CASE WHEN (arg_max_cte.[SoftProba_0] <= CASE WHEN (arg_max_cte.[SoftProba_1] <= CASE WHEN (arg_max_cte.[SoftProba_2] <= CASE WHEN (arg_max_cte.[SoftProba_3] <= CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END) THEN CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END ELSE arg_max_cte.[SoftProba_3] END) THEN CASE WHEN (arg_max_cte.[SoftProba_3] <= CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END) THEN CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END ELSE arg_max_cte.[SoftProba_3] END ELSE arg_max_cte.[SoftProba_2] END) THEN CASE WHEN (arg_max_cte.[SoftProba_2] <= CASE WHEN (arg_max_cte.[SoftProba_3] <= CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END) THEN CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END ELSE arg_max_cte.[SoftProba_3] END) THEN CASE WHEN (arg_max_cte.[SoftProba_3] <= CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END) THEN CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END ELSE arg_max_cte.[SoftProba_3] END ELSE arg_max_cte.[SoftProba_2] END ELSE arg_max_cte.[SoftProba_1] END) THEN CASE WHEN (arg_max_cte.[SoftProba_1] <= CASE WHEN (arg_max_cte.[SoftProba_2] <= CASE WHEN (arg_max_cte.[SoftProba_3] <= CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END) THEN CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END ELSE arg_max_cte.[SoftProba_3] END) THEN CASE WHEN (arg_max_cte.[SoftProba_3] <= CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END) THEN CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END ELSE arg_max_cte.[SoftProba_3] END ELSE arg_max_cte.[SoftProba_2] END) THEN CASE WHEN (arg_max_cte.[SoftProba_2] <= CASE WHEN (arg_max_cte.[SoftProba_3] <= CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END) THEN CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END ELSE arg_max_cte.[SoftProba_3] END) THEN CASE WHEN (arg_max_cte.[SoftProba_3] <= CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END) THEN CASE WHEN (arg_max_cte.[SoftProba_4] <= CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END) THEN CASE WHEN (arg_max_cte.[SoftProba_5] <= CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END) THEN CASE WHEN (arg_max_cte.[SoftProba_6] <= CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END) THEN CASE WHEN (arg_max_cte.[SoftProba_7] <= CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END) THEN CASE WHEN (arg_max_cte.[SoftProba_8] <= arg_max_cte.[SoftProba_9]) THEN arg_max_cte.[SoftProba_9] ELSE arg_max_cte.[SoftProba_8] END ELSE arg_max_cte.[SoftProba_7] END ELSE arg_max_cte.[SoftProba_6] END ELSE arg_max_cte.[SoftProba_5] END ELSE arg_max_cte.[SoftProba_4] END ELSE arg_max_cte.[SoftProba_3] END ELSE arg_max_cte.[SoftProba_2] END ELSE arg_max_cte.[SoftProba_1] END ELSE arg_max_cte.[SoftProba_0] END AS [DecisionProba] 
FROM arg_max_cte