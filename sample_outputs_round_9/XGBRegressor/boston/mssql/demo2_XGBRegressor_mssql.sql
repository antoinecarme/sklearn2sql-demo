-- This SQL code was generated by scikit2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.630000114440918) THEN CASE WHEN ([ADS].[Feature_5] < 7.121000289916992) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_12] < 15.395000457763672) THEN 5 ELSE CASE WHEN ([ADS].[Feature_11] < 256.364990234375) THEN 7 ELSE 8 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.630000114440918 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.121000289916992 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 15.395000457763672 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 2.500666618347168 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 3.6930770874023438 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 1.9238890409469604 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_11' AS feature, 256.364990234375 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 0.953076958656311 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 1.3862500190734863 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[XGB_Tree_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], [DT_Output].[Estimator] AS [Estimator] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.805000305175781) THEN CASE WHEN ([ADS].[Feature_12] < 4.494999885559082) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_7] < 2.0338499546051025) THEN 5 ELSE 6 END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.805000305175781 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 4.494999885559082 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_7' AS feature, 2.0338499546051025 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 3.452378511428833 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 2.2738921642303467 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 1.03086256980896 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 1.653590202331543 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[XGB_Tree_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], [DT_Output_1].[Estimator] AS [Estimator] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.630000114440918) THEN CASE WHEN ([ADS].[Feature_5] < 7.169000148773193) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_0] < 7.084139823913574) THEN CASE WHEN ([ADS].[Feature_6] < 91.55000305175781) THEN 7 ELSE 8 END ELSE 6 END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.630000114440918 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.169000148773193 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 7.084139823913574 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 2.0419466495513916 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 3.1052956581115723 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_6' AS feature, 91.55000305175781 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.9183465838432312 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 1.6116602420806885 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 1.1034566164016724 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[XGB_Tree_2] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], [DT_Output_2].[Estimator] AS [Estimator] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.630000114440918) THEN CASE WHEN ([ADS].[Feature_12] < 4.494999885559082) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_12] < 15.395000457763672) THEN 5 ELSE CASE WHEN ([ADS].[Feature_11] < 256.364990234375) THEN 7 ELSE 8 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.630000114440918 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 4.494999885559082 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 15.395000457763672 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 2.8755600452423096 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 1.8501564264297485 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 1.4295306205749512 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_11' AS feature, 256.364990234375 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 0.6679551005363464 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 1.0232234001159668 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[XGB_Tree_3] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], [DT_Output_3].[Estimator] AS [Estimator] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.805000305175781) THEN CASE WHEN ([ADS].[Feature_5] < 6.922999858856201) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_0] < 7.084139823913574) THEN CASE WHEN ([ADS].[Feature_6] < 91.55000305175781) THEN 7 ELSE 8 END ELSE 6 END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.805000305175781 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 6.922999858856201 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 7.084139823913574 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 1.6137768030166626 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 2.455995559692383 AS [Estimator] UNION ALL SELECT 5 AS node_id, 'Feature_6' AS feature, 91.55000305175781 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.7429162263870239 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 1.314819097518921 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 5 AS parent_id, 0.9063624739646912 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[XGB_Tree_4] AS 
(SELECT [DT_Output_4].[KEY] AS [KEY], [DT_Output_4].[Estimator] AS [Estimator] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 9.604999542236328) THEN CASE WHEN ([ADS].[Feature_12] < 4.494999885559082) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_7] < 2.0338499546051025) THEN 5 ELSE CASE WHEN ([ADS].[Feature_6] < 91.55000305175781) THEN 7 ELSE 8 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 9.604999542236328 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 4.494999885559082 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_7' AS feature, 2.0338499546051025 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 2.3985297679901123 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 1.5044775009155273 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.6686767935752869 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_6' AS feature, 91.55000305175781 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 1.1859012842178345 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 0.791403591632843 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[XGB_Tree_5] AS 
(SELECT [DT_Output_5].[KEY] AS [KEY], [DT_Output_5].[Estimator] AS [Estimator] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_5] < 6.815500259399414) THEN CASE WHEN ([ADS].[Feature_12] < 14.664999961853027) THEN CASE WHEN ([ADS].[Feature_5] < 5.957499980926514) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS].[Feature_11] < 256.364990234375) THEN 7 ELSE 8 END END ELSE 2 END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_5' AS feature, 6.815500259399414 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 14.664999961853027 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 1.9555314779281616 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_5' AS feature, 5.957499980926514 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_11' AS feature, 256.364990234375 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.9112820029258728 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 1.2681305408477783 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.4676155149936676 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.7754403948783875 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[XGB_Tree_6] AS 
(SELECT [DT_Output_6].[KEY] AS [KEY], [DT_Output_6].[Estimator] AS [Estimator] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 11.079999923706055) THEN CASE WHEN ([ADS].[Feature_5] < 7.169000148773193) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_0] < 7.084139823913574) THEN 5 ELSE CASE WHEN ([ADS].[Feature_7] < 1.9434000253677368) THEN 7 ELSE 8 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 11.079999923706055 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 7.169000148773193 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_0' AS feature, 7.084139823913574 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 1.1852285861968994 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 1 AS parent_id, 1.9807815551757812 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS depth, 2 AS parent_id, 0.8639375567436218 AS [Estimator] UNION ALL SELECT 6 AS node_id, 'Feature_7' AS feature, 1.9434000253677368 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 0.39345207810401917 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 6 AS parent_id, 0.6517236232757568 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[XGB_Tree_7] AS 
(SELECT [DT_Output_7].[KEY] AS [KEY], [DT_Output_7].[Estimator] AS [Estimator] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_12] < 4.644999980926514) THEN 1 ELSE CASE WHEN ([ADS].[Feature_12] < 14.264999389648438) THEN CASE WHEN ([ADS].[Feature_5] < 5.957499980926514) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS].[Feature_7] < 2.0338499546051025) THEN 7 ELSE 8 END END END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_12' AS feature, 4.644999980926514 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 1.7465994358062744 AS [Estimator] UNION ALL SELECT 2 AS node_id, 'Feature_12' AS feature, 14.264999389648438 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_5' AS feature, 5.957499980926514 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_7' AS feature, 2.0338499546051025 AS threshold, 2 AS depth, 2 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.7337396740913391 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 1.0650588274002075 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.44460177421569824 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.7048876285552979 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[XGB_Tree_8] AS 
(SELECT [DT_Output_8].[KEY] AS [KEY], [DT_Output_8].[Estimator] AS [Estimator] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_5] < 6.922999858856201) THEN CASE WHEN ([ADS].[Feature_12] < 13.630000114440918) THEN CASE WHEN ([ADS].[Feature_7] < 3.7925500869750977) THEN 5 ELSE 6 END ELSE CASE WHEN ([ADS].[Feature_0] < 7.084139823913574) THEN 7 ELSE 8 END END ELSE 2 END AS node_id_2 
FROM boston AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 0 AS node_id, 'Feature_5' AS feature, 6.922999858856201 AS threshold, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 1 AS node_id, 'Feature_12' AS feature, 13.630000114440918 AS threshold, 1 AS depth, 0 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS depth, 0 AS parent_id, 1.5428248643875122 AS [Estimator] UNION ALL SELECT 3 AS node_id, 'Feature_7' AS feature, 3.7925500869750977 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 4 AS node_id, 'Feature_0' AS feature, 7.084139823913574 AS threshold, 2 AS depth, 1 AS parent_id, 0.0 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 1.0716280937194824 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 3 AS parent_id, 0.8073436617851257 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.6495704054832458 AS [Estimator] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS depth, 4 AS parent_id, 0.39683306217193604 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[XGB_Tree_9] AS 
(SELECT [DT_Output_9].[KEY] AS [KEY], [DT_Output_9].[Estimator] AS [Estimator] 
FROM [DT_Output_9]), 
[Score_Union_CTE] AS 
(SELECT ensemble_score_union.[KEY] AS [KEY], ensemble_score_union.[Estimator] AS [Estimator] 
FROM (SELECT [XGB_Tree_0].[KEY] AS [KEY], [XGB_Tree_0].[Estimator] AS [Estimator] 
FROM [XGB_Tree_0] UNION ALL SELECT [XGB_Tree_1].[KEY] AS [KEY], [XGB_Tree_1].[Estimator] AS [Estimator] 
FROM [XGB_Tree_1] UNION ALL SELECT [XGB_Tree_2].[KEY] AS [KEY], [XGB_Tree_2].[Estimator] AS [Estimator] 
FROM [XGB_Tree_2] UNION ALL SELECT [XGB_Tree_3].[KEY] AS [KEY], [XGB_Tree_3].[Estimator] AS [Estimator] 
FROM [XGB_Tree_3] UNION ALL SELECT [XGB_Tree_4].[KEY] AS [KEY], [XGB_Tree_4].[Estimator] AS [Estimator] 
FROM [XGB_Tree_4] UNION ALL SELECT [XGB_Tree_5].[KEY] AS [KEY], [XGB_Tree_5].[Estimator] AS [Estimator] 
FROM [XGB_Tree_5] UNION ALL SELECT [XGB_Tree_6].[KEY] AS [KEY], [XGB_Tree_6].[Estimator] AS [Estimator] 
FROM [XGB_Tree_6] UNION ALL SELECT [XGB_Tree_7].[KEY] AS [KEY], [XGB_Tree_7].[Estimator] AS [Estimator] 
FROM [XGB_Tree_7] UNION ALL SELECT [XGB_Tree_8].[KEY] AS [KEY], [XGB_Tree_8].[Estimator] AS [Estimator] 
FROM [XGB_Tree_8] UNION ALL SELECT [XGB_Tree_9].[KEY] AS [KEY], [XGB_Tree_9].[Estimator] AS [Estimator] 
FROM [XGB_Tree_9]) AS ensemble_score_union), 
[XGB_Sum_Scores] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Estimator] AS [Estimator] 
FROM (SELECT [Score_Union_CTE].[KEY] AS [KEY], sum([Score_Union_CTE].[Estimator]) AS [Estimator] 
FROM [Score_Union_CTE] GROUP BY [Score_Union_CTE].[KEY]) AS [T])
 SELECT [XGB_Sum_Scores].[KEY] AS [KEY], [XGB_Sum_Scores].[Estimator] + 0.5 AS [Estimator] 
FROM [XGB_Sum_Scores]