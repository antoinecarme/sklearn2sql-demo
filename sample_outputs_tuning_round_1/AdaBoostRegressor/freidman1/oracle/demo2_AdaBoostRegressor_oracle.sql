-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "DT_node_lookup" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.44998258352279663) THEN CASE WHEN ("ADS"."Feature_6" <= 0.9199328422546387) THEN CASE WHEN ("ADS"."Feature_5" <= 0.6208158731460571) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_0" <= 0.2537927031517029) THEN CASE WHEN ("ADS"."Feature_5" <= 0.5362429022789001) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS"."Feature_7" <= 0.4236838221549988) THEN 11 ELSE 12 END END END AS node_id_2 
FROM freidman1 "ADS"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.44998258352279663 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 13.451258975980807 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_6' AS feature, 0.9199328422546387 AS threshold, 9 AS count, 1 AS depth, 0 AS parent_id, 7.279095387677505 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_5' AS feature, 0.6208158731460571 AS threshold, 8 AS count, 2 AS depth, 1 AS parent_id, 6.972102158887659 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, 6.211256145013339 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, 8.240178848678195 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 1 AS parent_id, 9.735041217996262 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 0.2537927031517029 AS threshold, 16 AS count, 1 AS depth, 0 AS parent_id, 16.923100994401416 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'Feature_5' AS feature, 0.5362429022789001 AS threshold, 3 AS count, 2 AS depth, 6 AS parent_id, 13.404085464725563 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 7 AS parent_id, 14.051184902745373 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 7 AS parent_id, 12.109886588685942 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'Feature_7' AS feature, 0.4236838221549988 AS threshold, 13 AS count, 2 AS depth, 6 AS parent_id, 17.735181501249688 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 10 AS parent_id, 18.604382840187426 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 10 AS parent_id, 17.1919306644136 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Estimator" AS "Estimator" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
"AdaBoost_Estim_0" AS 
(SELECT "DT_Output"."KEY" AS "KEY", "DT_Output"."Estimator" AS "Estimator", 0.200711139242 AS "Weight", 0 AS est_index 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.19583378732204437) THEN CASE WHEN ("ADS"."Feature_5" <= 0.5492620468139648) THEN CASE WHEN ("ADS"."Feature_6" <= 0.23228853940963745) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_1" <= 0.24031813442707062) THEN CASE WHEN ("ADS"."Feature_0" <= 0.6217710971832275) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS"."Feature_2" <= 0.9765533208847046) THEN 11 ELSE 12 END END END AS node_id_2 
FROM freidman1 "ADS"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.19583378732204437 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 15.997570768883211 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_5' AS feature, 0.5492620468139648 AS threshold, 6 AS count, 1 AS depth, 0 AS parent_id, 9.990880258384104 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_6' AS feature, 0.23228853940963745 AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, 7.133059396581099 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 10.131789617052231 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, 6.1334826564240545 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, 15.706521981990113 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 0.24031813442707062 AS threshold, 19 AS count, 1 AS depth, 0 AS parent_id, 17.894420403777673 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'Feature_0' AS feature, 0.6217710971832275 AS threshold, 6 AS count, 2 AS depth, 6 AS parent_id, 13.977395154200975 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 7 AS parent_id, 10.184052845897567 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 7 AS parent_id, 17.770737462504385 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'Feature_2' AS feature, 0.9765533208847046 AS threshold, 13 AS count, 2 AS depth, 6 AS parent_id, 19.70227821127461 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, 10 AS parent_id, 18.693954525884052 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 10 AS parent_id, 25.24805848092261 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
"AdaBoost_Estim_1" AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", "DT_Output_1"."Estimator" AS "Estimator", 0.328476861521 AS "Weight", 1 AS est_index 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.07964181900024414) THEN CASE WHEN ("ADS"."Feature_1" <= 0.2668817341327667) THEN 2 ELSE CASE WHEN ("ADS"."Feature_0" <= 0.3735806345939636) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS"."Feature_1" <= 0.2091817855834961) THEN CASE WHEN ("ADS"."Feature_4" <= 0.33327943086624146) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS"."Feature_7" <= 0.8813431859016418) THEN 11 ELSE 12 END END END AS node_id_2 
FROM freidman1 "ADS"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.07964181900024414 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 14.222138941414466 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_1' AS feature, 0.2668817341327667 AS threshold, 5 AS count, 1 AS depth, 0 AS parent_id, 9.005389134279758 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 1 AS parent_id, 5.293284001301807 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, 'Feature_0' AS feature, 0.3735806345939636 AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, 9.933415417524246 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 3 AS parent_id, 10.131789617052231 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 3 AS parent_id, 9.735041217996262 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_1' AS feature, 0.2091817855834961 AS threshold, 20 AS count, 1 AS depth, 0 AS parent_id, 15.526326393198142 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'Feature_4' AS feature, 0.33327943086624146 AS threshold, 2 AS count, 2 AS depth, 6 AS parent_id, 9.221135974503376 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 7 AS parent_id, 8.240178848678195 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 7 AS parent_id, 10.20209310032856 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'Feature_7' AS feature, 0.8813431859016418 AS threshold, 18 AS count, 2 AS depth, 6 AS parent_id, 16.226903106386448 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 10 AS parent_id, 17.99055177572054 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, 10 AS parent_id, 15.104581225901116 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
"AdaBoost_Estim_2" AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", "DT_Output_2"."Estimator" AS "Estimator", 0.239438137646 AS "Weight", 2 AS est_index 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.19583378732204437) THEN CASE WHEN ("ADS"."Feature_7" <= 0.8642542362213135) THEN CASE WHEN ("ADS"."Feature_7" <= 0.6831988096237183) THEN 3 ELSE 4 END ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_0" <= 0.290882408618927) THEN CASE WHEN ("ADS"."Feature_7" <= 0.9633970856666565) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS"."Feature_7" <= 0.518894374370575) THEN 11 ELSE 12 END END END AS node_id_2 
FROM freidman1 "ADS"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Estimator" AS "Estimator" 
FROM (SELECT 0 AS node_id, 'Feature_3' AS feature, 0.19583378732204437 AS threshold, 25 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 12.990746349334522 AS "Estimator" FROM DUAL UNION ALL SELECT 1 AS node_id, 'Feature_7' AS feature, 0.8642542362213135 AS threshold, 11 AS count, 1 AS depth, 0 AS parent_id, 8.55799106467674 AS "Estimator" FROM DUAL UNION ALL SELECT 2 AS node_id, 'Feature_7' AS feature, 0.6831988096237183 AS threshold, 9 AS count, 2 AS depth, 1 AS parent_id, 6.9694286386071 AS "Estimator" FROM DUAL UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 2 AS parent_id, 6.574133516301458 AS "Estimator" FROM DUAL UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 10.131789617052231 AS "Estimator" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, 15.706521981990113 AS "Estimator" FROM DUAL UNION ALL SELECT 6 AS node_id, 'Feature_0' AS feature, 0.290882408618927 AS threshold, 14 AS count, 1 AS depth, 0 AS parent_id, 16.473625501565635 AS "Estimator" FROM DUAL UNION ALL SELECT 7 AS node_id, 'Feature_7' AS feature, 0.9633970856666565 AS threshold, 3 AS count, 2 AS depth, 6 AS parent_id, 12.121054863919959 AS "Estimator" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 7 AS parent_id, 11.15598984450725 AS "Estimator" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 7 AS parent_id, 14.051184902745373 AS "Estimator" FROM DUAL UNION ALL SELECT 10 AS node_id, 'Feature_7' AS feature, 0.518894374370575 AS threshold, 11 AS count, 2 AS depth, 6 AS parent_id, 17.66069022092354 AS "Estimator" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 10 AS parent_id, 18.63035160617232 AS "Estimator" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 10 AS parent_id, 16.85263906654957 AS "Estimator" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Estimator" AS "Estimator" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
"AdaBoost_Estim_3" AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", "DT_Output_3"."Estimator" AS "Estimator", 0.23137386159 AS "Weight", 3 AS est_index 
FROM "DT_Output_3"), 
"WeightedEstimators" AS 
(SELECT ensemble_score_union."KEY" AS "KEY", ensemble_score_union."Estimator" AS "Estimator", ensemble_score_union."Weight" AS "Weight", ensemble_score_union.est_index AS est_index 
FROM (SELECT "AdaBoost_Estim_0"."KEY" AS "KEY", "AdaBoost_Estim_0"."Estimator" AS "Estimator", "AdaBoost_Estim_0"."Weight" AS "Weight", "AdaBoost_Estim_0".est_index AS est_index 
FROM "AdaBoost_Estim_0" UNION ALL SELECT "AdaBoost_Estim_1"."KEY" AS "KEY", "AdaBoost_Estim_1"."Estimator" AS "Estimator", "AdaBoost_Estim_1"."Weight" AS "Weight", "AdaBoost_Estim_1".est_index AS est_index 
FROM "AdaBoost_Estim_1" UNION ALL SELECT "AdaBoost_Estim_2"."KEY" AS "KEY", "AdaBoost_Estim_2"."Estimator" AS "Estimator", "AdaBoost_Estim_2"."Weight" AS "Weight", "AdaBoost_Estim_2".est_index AS est_index 
FROM "AdaBoost_Estim_2" UNION ALL SELECT "AdaBoost_Estim_3"."KEY" AS "KEY", "AdaBoost_Estim_3"."Estimator" AS "Estimator", "AdaBoost_Estim_3"."Weight" AS "Weight", "AdaBoost_Estim_3".est_index AS est_index 
FROM "AdaBoost_Estim_3") ensemble_score_union), 
"Cumulative_Frequencies" AS 
(SELECT "CW"."KEY" AS "KEY", "CW"."Estimator" AS "Estimator", "CW"."Weight" AS "Weight", "CW".est_index AS est_index, "CW".cum_weight AS cum_weight 
FROM (SELECT u1."KEY" AS "KEY", u1."Estimator" AS "Estimator", u1."Weight" AS "Weight", u1.est_index AS est_index, sum(u2."Weight") AS cum_weight 
FROM "WeightedEstimators" u1, "WeightedEstimators" u2 
WHERE u1."Estimator" >= u2."Estimator" AND u1."KEY" = u2."KEY" GROUP BY u1."KEY", u1.est_index, u1."Estimator", u1."Weight") "CW"), 
"Quantiles" AS 
(SELECT "CW2"."KEY" AS "KEY", "CW2"."Quantile" AS "Quantile" 
FROM (SELECT "Cumulative_Frequencies"."KEY" AS "KEY", min("Cumulative_Frequencies"."Estimator") AS "Quantile" 
FROM "Cumulative_Frequencies" 
WHERE "Cumulative_Frequencies".cum_weight >= 0.5 GROUP BY "Cumulative_Frequencies"."KEY") "CW2")
 SELECT "Quantiles"."KEY" AS "KEY", "Quantiles"."Quantile" AS "Estimator" 
FROM "Quantiles"