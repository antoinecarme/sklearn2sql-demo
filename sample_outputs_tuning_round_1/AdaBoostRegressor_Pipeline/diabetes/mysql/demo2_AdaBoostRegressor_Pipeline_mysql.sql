-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH `ADS_imp_1_OUT` AS 
(SELECT `ADS`.`KEY` AS `KEY`, CASE WHEN (`ADS`.`Feature_0` IS NULL) THEN 0.0047225988377 ELSE `ADS`.`Feature_0` END AS impter_2, CASE WHEN (`ADS`.`Feature_1` IS NULL) THEN -0.0073794958196 ELSE `ADS`.`Feature_1` END AS impter_3, CASE WHEN (`ADS`.`Feature_2` IS NULL) THEN -6.24253146871e-05 ELSE `ADS`.`Feature_2` END AS impter_4, CASE WHEN (`ADS`.`Feature_3` IS NULL) THEN -0.00643221528123 ELSE `ADS`.`Feature_3` END AS impter_5, CASE WHEN (`ADS`.`Feature_4` IS NULL) THEN -0.00213184962584 ELSE `ADS`.`Feature_4` END AS impter_6, CASE WHEN (`ADS`.`Feature_5` IS NULL) THEN -0.000838461125138 ELSE `ADS`.`Feature_5` END AS impter_7, CASE WHEN (`ADS`.`Feature_6` IS NULL) THEN 0.000444113651192 ELSE `ADS`.`Feature_6` END AS impter_8, CASE WHEN (`ADS`.`Feature_7` IS NULL) THEN -0.0032531275266 ELSE `ADS`.`Feature_7` END AS impter_9, CASE WHEN (`ADS`.`Feature_8` IS NULL) THEN -0.0029539764781 ELSE `ADS`.`Feature_8` END AS impter_10, CASE WHEN (`ADS`.`Feature_9` IS NULL) THEN -0.000211620600092 ELSE `ADS`.`Feature_9` END AS impter_11 
FROM diabetes AS `ADS`), 
`ADS_sca_2_OUT` AS 
(SELECT `ADS_imp_1_OUT`.`KEY` AS `KEY`, (CAST(`ADS_imp_1_OUT`.impter_2 AS DOUBLE) - 0.0047225988377) / 0.0488123078699 AS scaler_2, (CAST(`ADS_imp_1_OUT`.impter_3 AS DOUBLE) - -0.0073794958196) / 0.0465126383467 AS scaler_3, (CAST(`ADS_imp_1_OUT`.impter_4 AS DOUBLE) - -6.24253146871e-05) / 0.046971645538 AS scaler_4, (CAST(`ADS_imp_1_OUT`.impter_5 AS DOUBLE) - -0.00643221528123) / 0.0474148680367 AS scaler_5, (CAST(`ADS_imp_1_OUT`.impter_6 AS DOUBLE) - -0.00213184962584) / 0.0460146493101 AS scaler_6, (CAST(`ADS_imp_1_OUT`.impter_7 AS DOUBLE) - -0.000838461125138) / 0.0459634748503 AS scaler_7, (CAST(`ADS_imp_1_OUT`.impter_8 AS DOUBLE) - 0.000444113651192) / 0.0423673337055 AS scaler_8, (CAST(`ADS_imp_1_OUT`.impter_9 AS DOUBLE) - -0.0032531275266) / 0.0441563504693 AS scaler_9, (CAST(`ADS_imp_1_OUT`.impter_10 AS DOUBLE) - -0.0029539764781) / 0.044965109506 AS scaler_10, (CAST(`ADS_imp_1_OUT`.impter_11 AS DOUBLE) - -0.000211620600092) / 0.0487263122756 AS scaler_11 
FROM `ADS_imp_1_OUT`), 
`DT_node_lookup` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, CASE WHEN (`ADS_sca_2_OUT`.scaler_4 <= -0.15373830497264862) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_11 <= 0.6197826862335205) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_8 <= -1.6866117715835571) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_11 <= 1.0873245000839233) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_10 <= 0.0713576227426529) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_4 <= 0.6608452796936035) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_4 <= 1.4983747005462646) THEN 13 ELSE 14 END END END AS node_id_2 
FROM `ADS_sca_2_OUT`), 
`DT_node_data` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'scaler_4' AS feature, -0.15373830497264862 AS threshold, 110 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 149.64545454545456 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'scaler_11' AS feature, 0.6197826862335205 AS threshold, 61 AS count, 1 AS depth, 0 AS parent_id, 108.01639344262296 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'scaler_8' AS feature, -1.6866117715835571 AS threshold, 47 AS count, 2 AS depth, 1 AS parent_id, 90.17021276595744 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 257.0 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 46 AS count, 3 AS depth, 2 AS parent_id, 86.54347826086956 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'scaler_11' AS feature, 1.0873245000839233 AS threshold, 14 AS count, 2 AS depth, 1 AS parent_id, 167.92857142857142 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 9 AS count, 3 AS depth, 5 AS parent_id, 156.11111111111111 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 5 AS parent_id, 189.2 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'scaler_10' AS feature, 0.0713576227426529 AS threshold, 49 AS count, 1 AS depth, 0 AS parent_id, 201.46938775510205 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'scaler_4' AS feature, 0.6608452796936035 AS threshold, 11 AS count, 2 AS depth, 8 AS parent_id, 139.27272727272728 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 9 AS parent_id, 106.4 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 9 AS parent_id, 166.66666666666666 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'scaler_4' AS feature, 1.4983747005462646 AS threshold, 38 AS count, 2 AS depth, 8 AS parent_id, 219.47368421052633 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 30 AS count, 3 AS depth, 12 AS parent_id, 201.36666666666667 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 8 AS count, 3 AS depth, 12 AS parent_id, 287.375 AS `Estimator`) AS `Values`), 
`DT_Output` AS 
(SELECT `DT_node_lookup`.`KEY` AS `KEY`, `DT_node_lookup`.node_id_2 AS node_id_2, `DT_node_data`.node_id AS node_id, `DT_node_data`.feature AS feature, `DT_node_data`.threshold AS threshold, `DT_node_data`.count AS count, `DT_node_data`.depth AS depth, `DT_node_data`.parent_id AS parent_id, `DT_node_data`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup` LEFT OUTER JOIN `DT_node_data` ON `DT_node_lookup`.node_id_2 = `DT_node_data`.node_id), 
`AdaBoost_Estim_0` AS 
(SELECT `DT_Output`.`KEY` AS `KEY`, `DT_Output`.`Estimator` AS `Estimator`, 0.213981115852 AS `Weight`, 0 AS est_index 
FROM `DT_Output`), 
`DT_node_lookup_1` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, CASE WHEN (`ADS_sca_2_OUT`.scaler_10 <= 0.0713576227426529) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_5 <= 1.2867660522460938) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_7 <= -0.9709742069244385) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_6 <= -0.555914580821991) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_11 <= 0.7897979021072388) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_4 <= -0.1307922899723053) THEN 10 ELSE 11 END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_10 <= 0.40361857414245605) THEN 13 ELSE 14 END END END AS node_id_2 
FROM `ADS_sca_2_OUT`), 
`DT_node_data_1` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'scaler_10' AS feature, 0.0713576227426529 AS threshold, 110 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 157.24545454545455 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'scaler_5' AS feature, 1.2867660522460938 AS threshold, 62 AS count, 1 AS depth, 0 AS parent_id, 119.46774193548387 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'scaler_7' AS feature, -0.9709742069244385 AS threshold, 57 AS count, 2 AS depth, 1 AS parent_id, 105.29824561403508 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 16 AS count, 3 AS depth, 2 AS parent_id, 159.25 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 41 AS count, 3 AS depth, 2 AS parent_id, 84.2439024390244 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'scaler_6' AS feature, -0.555914580821991 AS threshold, 5 AS count, 2 AS depth, 1 AS parent_id, 281.0 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, 293.0 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 5 AS parent_id, 263.0 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'scaler_11' AS feature, 0.7897979021072388 AS threshold, 48 AS count, 1 AS depth, 0 AS parent_id, 206.04166666666666 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'scaler_4' AS feature, -0.1307922899723053 AS threshold, 31 AS count, 2 AS depth, 8 AS parent_id, 178.48387096774192 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 5 AS count, 3 AS depth, 9 AS parent_id, 87.6 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 26 AS count, 3 AS depth, 9 AS parent_id, 195.96153846153845 AS `Estimator` UNION ALL SELECT 12 AS node_id, 'scaler_10' AS feature, 0.40361857414245605 AS threshold, 17 AS count, 2 AS depth, 8 AS parent_id, 256.29411764705884 AS `Estimator` UNION ALL SELECT 13 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 7 AS count, 3 AS depth, 12 AS parent_id, 294.42857142857144 AS `Estimator` UNION ALL SELECT 14 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 10 AS count, 3 AS depth, 12 AS parent_id, 229.6 AS `Estimator`) AS `Values`), 
`DT_Output_1` AS 
(SELECT `DT_node_lookup_1`.`KEY` AS `KEY`, `DT_node_lookup_1`.node_id_2 AS node_id_2, `DT_node_data_1`.node_id AS node_id, `DT_node_data_1`.feature AS feature, `DT_node_data_1`.threshold AS threshold, `DT_node_data_1`.count AS count, `DT_node_data_1`.depth AS depth, `DT_node_data_1`.parent_id AS parent_id, `DT_node_data_1`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_1` LEFT OUTER JOIN `DT_node_data_1` ON `DT_node_lookup_1`.node_id_2 = `DT_node_data_1`.node_id), 
`AdaBoost_Estim_1` AS 
(SELECT `DT_Output_1`.`KEY` AS `KEY`, `DT_Output_1`.`Estimator` AS `Estimator`, 0.260822440083 AS `Weight`, 1 AS est_index 
FROM `DT_Output_1`), 
`DT_node_lookup_2` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, CASE WHEN (`ADS_sca_2_OUT`.scaler_4 <= 1.5557398796081543) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_5 <= 1.3835816383361816) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_8 <= 0.659635066986084) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_11 <= 1.1723320484161377) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_8 <= -0.9479784965515137) THEN 9 ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_8 <= 0.007899820804595947) THEN 11 ELSE 12 END END END AS node_id_2 
FROM `ADS_sca_2_OUT`), 
`DT_node_data_2` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'scaler_4' AS feature, 1.5557398796081543 AS threshold, 110 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 148.14545454545456 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'scaler_5' AS feature, 1.3835816383361816 AS threshold, 103 AS count, 1 AS depth, 0 AS parent_id, 137.55339805825244 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'scaler_8' AS feature, 0.659635066986084 AS threshold, 86 AS count, 2 AS depth, 1 AS parent_id, 122.01162790697674 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 59 AS count, 3 AS depth, 2 AS parent_id, 142.57627118644066 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 27 AS count, 3 AS depth, 2 AS parent_id, 77.07407407407408 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'scaler_11' AS feature, 1.1723320484161377 AS threshold, 17 AS count, 2 AS depth, 1 AS parent_id, 216.1764705882353 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 11 AS count, 3 AS depth, 5 AS parent_id, 244.9090909090909 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 5 AS parent_id, 163.5 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'scaler_8' AS feature, -0.9479784965515137 AS threshold, 7 AS count, 1 AS depth, 0 AS parent_id, 304.0 AS `Estimator` UNION ALL SELECT 9 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 2 AS depth, 8 AS parent_id, 346.0 AS `Estimator` UNION ALL SELECT 10 AS node_id, 'scaler_8' AS feature, 0.007899820804595947 AS threshold, 4 AS count, 2 AS depth, 8 AS parent_id, 272.5 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 3 AS depth, 10 AS parent_id, 276.3333333333333 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 1 AS count, 3 AS depth, 10 AS parent_id, 261.0 AS `Estimator`) AS `Values`), 
`DT_Output_2` AS 
(SELECT `DT_node_lookup_2`.`KEY` AS `KEY`, `DT_node_lookup_2`.node_id_2 AS node_id_2, `DT_node_data_2`.node_id AS node_id, `DT_node_data_2`.feature AS feature, `DT_node_data_2`.threshold AS threshold, `DT_node_data_2`.count AS count, `DT_node_data_2`.depth AS depth, `DT_node_data_2`.parent_id AS parent_id, `DT_node_data_2`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_2` LEFT OUTER JOIN `DT_node_data_2` ON `DT_node_lookup_2`.node_id_2 = `DT_node_data_2`.node_id), 
`AdaBoost_Estim_2` AS 
(SELECT `DT_Output_2`.`KEY` AS `KEY`, `DT_Output_2`.`Estimator` AS `Estimator`, 0.266108854534 AS `Weight`, 2 AS est_index 
FROM `DT_Output_2`), 
`DT_node_lookup_3` AS 
(SELECT `ADS_sca_2_OUT`.`KEY` AS `KEY`, CASE WHEN (`ADS_sca_2_OUT`.scaler_10 <= 0.1007402241230011) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_7 <= -0.6405444145202637) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_7 <= -1.7306220531463623) THEN 3 ELSE 4 END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_2 <= -1.8097224235534668) THEN 6 ELSE 7 END END ELSE CASE WHEN (`ADS_sca_2_OUT`.scaler_4 <= 2.4735803604125977) THEN CASE WHEN (`ADS_sca_2_OUT`.scaler_10 <= 0.47651952505111694) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM `ADS_sca_2_OUT`), 
`DT_node_data_3` AS 
(SELECT `Values`.node_id AS node_id, `Values`.feature AS feature, `Values`.threshold AS threshold, `Values`.count AS count, `Values`.depth AS depth, `Values`.parent_id AS parent_id, `Values`.`Estimator` AS `Estimator` 
FROM (SELECT 0 AS node_id, 'scaler_10' AS feature, 0.1007402241230011 AS threshold, 110 AS count, 0 AS depth, CAST(NULL AS SIGNED INTEGER) AS parent_id, 171.66363636363636 AS `Estimator` UNION ALL SELECT 1 AS node_id, 'scaler_7' AS feature, -0.6405444145202637 AS threshold, 56 AS count, 1 AS depth, 0 AS parent_id, 121.60714285714286 AS `Estimator` UNION ALL SELECT 2 AS node_id, 'scaler_7' AS feature, -1.7306220531463623 AS threshold, 14 AS count, 2 AS depth, 1 AS parent_id, 75.35714285714286 AS `Estimator` UNION ALL SELECT 3 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 140.0 AS `Estimator` UNION ALL SELECT 4 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 12 AS count, 3 AS depth, 2 AS parent_id, 64.58333333333333 AS `Estimator` UNION ALL SELECT 5 AS node_id, 'scaler_2' AS feature, -1.8097224235534668 AS threshold, 42 AS count, 2 AS depth, 1 AS parent_id, 137.02380952380952 AS `Estimator` UNION ALL SELECT 6 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 6 AS count, 3 AS depth, 5 AS parent_id, 200.0 AS `Estimator` UNION ALL SELECT 7 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 36 AS count, 3 AS depth, 5 AS parent_id, 126.52777777777777 AS `Estimator` UNION ALL SELECT 8 AS node_id, 'scaler_4' AS feature, 2.4735803604125977 AS threshold, 54 AS count, 1 AS depth, 0 AS parent_id, 223.57407407407408 AS `Estimator` UNION ALL SELECT 9 AS node_id, 'scaler_10' AS feature, 0.47651952505111694 AS threshold, 51 AS count, 2 AS depth, 8 AS parent_id, 216.37254901960785 AS `Estimator` UNION ALL SELECT 10 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 17 AS count, 3 AS depth, 9 AS parent_id, 252.88235294117646 AS `Estimator` UNION ALL SELECT 11 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 34 AS count, 3 AS depth, 9 AS parent_id, 198.11764705882354 AS `Estimator` UNION ALL SELECT 12 AS node_id, CAST(NULL AS CHAR(256)) AS feature, NULL AS threshold, 3 AS count, 2 AS depth, 8 AS parent_id, 346.0 AS `Estimator`) AS `Values`), 
`DT_Output_3` AS 
(SELECT `DT_node_lookup_3`.`KEY` AS `KEY`, `DT_node_lookup_3`.node_id_2 AS node_id_2, `DT_node_data_3`.node_id AS node_id, `DT_node_data_3`.feature AS feature, `DT_node_data_3`.threshold AS threshold, `DT_node_data_3`.count AS count, `DT_node_data_3`.depth AS depth, `DT_node_data_3`.parent_id AS parent_id, `DT_node_data_3`.`Estimator` AS `Estimator` 
FROM `DT_node_lookup_3` LEFT OUTER JOIN `DT_node_data_3` ON `DT_node_lookup_3`.node_id_2 = `DT_node_data_3`.node_id), 
`AdaBoost_Estim_3` AS 
(SELECT `DT_Output_3`.`KEY` AS `KEY`, `DT_Output_3`.`Estimator` AS `Estimator`, 0.25908758953 AS `Weight`, 3 AS est_index 
FROM `DT_Output_3`), 
`WeightedEstimators` AS 
(SELECT ensemble_score_union.`KEY` AS `KEY`, ensemble_score_union.`Estimator` AS `Estimator`, ensemble_score_union.`Weight` AS `Weight`, ensemble_score_union.est_index AS est_index 
FROM (SELECT `AdaBoost_Estim_0`.`KEY` AS `KEY`, `AdaBoost_Estim_0`.`Estimator` AS `Estimator`, `AdaBoost_Estim_0`.`Weight` AS `Weight`, `AdaBoost_Estim_0`.est_index AS est_index 
FROM `AdaBoost_Estim_0` UNION ALL SELECT `AdaBoost_Estim_1`.`KEY` AS `KEY`, `AdaBoost_Estim_1`.`Estimator` AS `Estimator`, `AdaBoost_Estim_1`.`Weight` AS `Weight`, `AdaBoost_Estim_1`.est_index AS est_index 
FROM `AdaBoost_Estim_1` UNION ALL SELECT `AdaBoost_Estim_2`.`KEY` AS `KEY`, `AdaBoost_Estim_2`.`Estimator` AS `Estimator`, `AdaBoost_Estim_2`.`Weight` AS `Weight`, `AdaBoost_Estim_2`.est_index AS est_index 
FROM `AdaBoost_Estim_2` UNION ALL SELECT `AdaBoost_Estim_3`.`KEY` AS `KEY`, `AdaBoost_Estim_3`.`Estimator` AS `Estimator`, `AdaBoost_Estim_3`.`Weight` AS `Weight`, `AdaBoost_Estim_3`.est_index AS est_index 
FROM `AdaBoost_Estim_3`) AS ensemble_score_union), 
`Cumulative_Frequencies` AS 
(SELECT `CW`.`KEY` AS `KEY`, `CW`.`Estimator` AS `Estimator`, `CW`.`Weight` AS `Weight`, `CW`.est_index AS est_index, `CW`.cum_weight AS cum_weight 
FROM (SELECT u1.`KEY` AS `KEY`, u1.`Estimator` AS `Estimator`, u1.`Weight` AS `Weight`, u1.est_index AS est_index, sum(u2.`Weight`) AS cum_weight 
FROM `WeightedEstimators` AS u1, `WeightedEstimators` AS u2 
WHERE u1.`Estimator` >= u2.`Estimator` AND u1.`KEY` = u2.`KEY` GROUP BY u1.`KEY`, u1.est_index, u1.`Estimator`, u1.`Weight`) AS `CW`), 
`Quantiles` AS 
(SELECT `CW2`.`KEY` AS `KEY`, `CW2`.`Quantile` AS `Quantile` 
FROM (SELECT `Cumulative_Frequencies`.`KEY` AS `KEY`, min(`Cumulative_Frequencies`.`Estimator`) AS `Quantile` 
FROM `Cumulative_Frequencies` 
WHERE `Cumulative_Frequencies`.cum_weight >= 0.5 GROUP BY `Cumulative_Frequencies`.`KEY`) AS `CW2`)
 SELECT `Quantiles`.`KEY` AS `KEY`, `Quantiles`.`Quantile` AS `Estimator` 
FROM `Quantiles`