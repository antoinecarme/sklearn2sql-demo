-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.0166601472776 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.516272913818 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.045854831728 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.393876252945 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.480683431081 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.0754525765206 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.116142518808 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN -0.397193027446 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.289223217606 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.0715919221158 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.0166601472776) / 1.04538177897 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.516272913818) / 1.31450310589 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.045854831728) / 1.56219218195 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.393876252945) / 2.3960998534 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.480683431081) / 1.20344059845 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.0754525765206) / 0.838068867257 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.116142518808) / 1.05306709377 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - -0.397193027446) / 1.78314721805 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.289223217606) / 0.92879323246 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.0715919221158) / 0.976280049427 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -1.0656498670578003) THEN 1 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.26636338233947754) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.11603577435016632) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.020183872431516647) THEN 7 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -0.9363440275192261) THEN 9 ELSE 10 END END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -1.0656498670578003 AS threshold, 17 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.23529411764705882 AS [Proba_0], -1.44691898294 AS [LogProba_0], 0.17647058823529413 AS [Proba_1], -1.73460105539 AS [LogProba_1], 0.23529411764705882 AS [Proba_2], -1.44691898294 AS [LogProba_2], 0.35294117647058826 AS [Proba_3], -1.04145387483 AS [LogProba_3], 3 AS [Decision], 0.352941176471 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 1 AS depth, 0 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, 'scaler_3' AS feature, -0.26636338233947754 AS threshold, 13 AS count, 1 AS depth, 0 AS parent_id, 0.3076923076923077 AS [Proba_0], -1.17865499634 AS [LogProba_0], 0.23076923076923078 AS [Proba_1], -1.46633706879 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.46153846153846156 AS [Proba_3], -0.773189888233 AS [LogProba_3], 3 AS [Decision], 0.461538461538 AS [DecisionProba] UNION ALL SELECT 3 AS node_id, 'scaler_9' AS feature, -0.11603577435016632 AS threshold, 5 AS count, 2 AS depth, 2 AS parent_id, 0.8 AS [Proba_0], -0.223143551314 AS [LogProba_0], 0.2 AS [Proba_1], -1.60943791243 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 3 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, 'scaler_2' AS feature, 0.020183872431516647 AS threshold, 8 AS count, 2 AS depth, 2 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.25 AS [Proba_1], -1.38629436112 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.75 AS [Proba_3], -0.287682072452 AS [LogProba_3], 3 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 6 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, 'scaler_7' AS feature, -0.9363440275192261 AS threshold, 3 AS count, 3 AS depth, 6 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.6666666666666666 AS [Proba_1], -0.405465108108 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.3333333333333333 AS [Proba_3], -1.09861228867 AS [LogProba_3], 1 AS [Decision], 0.666666666667 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 8 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 4 AS depth, 8 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_0] AS [Proba_0], [DT_node_data].[LogProba_0] AS [LogProba_0], [DT_node_data].[Proba_1] AS [Proba_1], [DT_node_data].[LogProba_1] AS [LogProba_1], [DT_node_data].[Proba_2] AS [Proba_2], [DT_node_data].[LogProba_2] AS [LogProba_2], [DT_node_data].[Proba_3] AS [Proba_3], [DT_node_data].[LogProba_3] AS [LogProba_3], [DT_node_data].[Decision] AS [Decision], [DT_node_data].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
calibration_base_estimator_0 AS 
(SELECT [DT_Output].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [DT_Output].[Proba_0] AS [Proba_0], [DT_Output].[Proba_1] AS [Proba_1], [DT_Output].[Proba_2] AS [Proba_2], [DT_Output].[Proba_3] AS [Proba_3], [DT_Output].[LogProba_0] AS [LogProba_0], [DT_Output].[LogProba_1] AS [LogProba_1], [DT_Output].[LogProba_2] AS [LogProba_2], [DT_Output].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT), [DT_Output].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT), [DT_Output].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT), [DT_Output].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT), [DT_Output].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output]), 
[isotonic_cte_:param_1] AS 
(SELECT calibration_base_estimator_0.[KEY] AS [KEY], CASE WHEN (calibration_base_estimator_0.[ScoreOrProba_0] < 0.0) THEN 0.142857142857 WHEN (calibration_base_estimator_0.[ScoreOrProba_0] < 1.0) THEN (calibration_base_estimator_0.[ScoreOrProba_0] - 0.0) * 0.0 + 0.142857142857 ELSE 0.142857142857 END AS [Proba_0], CASE WHEN (calibration_base_estimator_0.[ScoreOrProba_1] < 0.0) THEN 0.2 WHEN (calibration_base_estimator_0.[ScoreOrProba_1] < 1.0) THEN (calibration_base_estimator_0.[ScoreOrProba_1] - 0.0) * 0.133333333333 + 0.2 ELSE 0.333333333333 END AS [Proba_1], CASE WHEN (calibration_base_estimator_0.[ScoreOrProba_2] < 0.0) THEN 0.142857142857 WHEN (calibration_base_estimator_0.[ScoreOrProba_2] < 1.0) THEN (calibration_base_estimator_0.[ScoreOrProba_2] - 0.0) * 0.857142857143 + 0.142857142857 ELSE 1.0 END AS [Proba_2], CASE WHEN (calibration_base_estimator_0.[ScoreOrProba_3] < 0.0) THEN 0.2 WHEN (calibration_base_estimator_0.[ScoreOrProba_3] < 1.0) THEN (calibration_base_estimator_0.[ScoreOrProba_3] - 0.0) * 0.133333333333 + 0.2 ELSE 0.333333333333 END AS [Proba_3] 
FROM calibration_base_estimator_0), 
[Normalized_Probas] AS 
(SELECT [isotonic_cte_:param_1].[KEY] AS [KEY], [isotonic_cte_:param_1].[Proba_0] / ([isotonic_cte_:param_1].[Proba_0] + [isotonic_cte_:param_1].[Proba_1] + [isotonic_cte_:param_1].[Proba_2] + [isotonic_cte_:param_1].[Proba_3]) AS [Proba_0], [isotonic_cte_:param_1].[Proba_1] / ([isotonic_cte_:param_1].[Proba_0] + [isotonic_cte_:param_1].[Proba_1] + [isotonic_cte_:param_1].[Proba_2] + [isotonic_cte_:param_1].[Proba_3]) AS [Proba_1], [isotonic_cte_:param_1].[Proba_2] / ([isotonic_cte_:param_1].[Proba_0] + [isotonic_cte_:param_1].[Proba_1] + [isotonic_cte_:param_1].[Proba_2] + [isotonic_cte_:param_1].[Proba_3]) AS [Proba_2], [isotonic_cte_:param_1].[Proba_3] / ([isotonic_cte_:param_1].[Proba_0] + [isotonic_cte_:param_1].[Proba_1] + [isotonic_cte_:param_1].[Proba_2] + [isotonic_cte_:param_1].[Proba_3]) AS [Proba_3] 
FROM [isotonic_cte_:param_1]), 
[DT_node_lookup_1] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.7113025188446045) THEN 1 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 0.448508083820343) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_8 <= -0.5731478929519653) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= 1.3563446998596191) THEN 5 ELSE 6 END ELSE 7 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.1419763565063477) THEN 9 ELSE 10 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.7113025188446045 AS threshold, 18 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.2222222222222222 AS [Proba_0], -1.50407739678 AS [LogProba_0], 0.2222222222222222 AS [Proba_1], -1.50407739678 AS [LogProba_1], 0.2222222222222222 AS [Proba_2], -1.50407739678 AS [LogProba_2], 0.3333333333333333 AS [Proba_3], -1.09861228867 AS [LogProba_3], 3 AS [Decision], 0.333333333333 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 1 AS depth, 0 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, 'scaler_6' AS feature, 0.448508083820343 AS threshold, 14 AS count, 1 AS depth, 0 AS parent_id, 0.2857142857142857 AS [Proba_0], -1.2527629685 AS [LogProba_0], 0.2857142857142857 AS [Proba_1], -1.2527629685 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.42857142857142855 AS [Proba_3], -0.847297860387 AS [LogProba_3], 3 AS [Decision], 0.428571428571 AS [DecisionProba] UNION ALL SELECT 3 AS node_id, 'scaler_8' AS feature, -0.5731478929519653 AS threshold, 9 AS count, 2 AS depth, 2 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.3333333333333333 AS [Proba_1], -1.09861228867 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.6666666666666666 AS [Proba_3], -0.405465108108 AS [LogProba_3], 3 AS [Decision], 0.666666666667 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, 'scaler_3' AS feature, 1.3563446998596191 AS threshold, 4 AS count, 3 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.75 AS [Proba_1], -0.287682072452 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.25 AS [Proba_3], -1.38629436112 AS [LogProba_3], 1 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 4 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, 'scaler_9' AS feature, 1.1419763565063477 AS threshold, 5 AS count, 2 AS depth, 2 AS parent_id, 0.8 AS [Proba_0], -0.223143551314 AS [LogProba_0], 0.2 AS [Proba_1], -1.60943791243 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 8 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 8 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Proba_0] AS [Proba_0], [DT_node_data_1].[LogProba_0] AS [LogProba_0], [DT_node_data_1].[Proba_1] AS [Proba_1], [DT_node_data_1].[LogProba_1] AS [LogProba_1], [DT_node_data_1].[Proba_2] AS [Proba_2], [DT_node_data_1].[LogProba_2] AS [LogProba_2], [DT_node_data_1].[Proba_3] AS [Proba_3], [DT_node_data_1].[LogProba_3] AS [LogProba_3], [DT_node_data_1].[Decision] AS [Decision], [DT_node_data_1].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
calibration_base_estimator_1 AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [DT_Output_1].[Proba_0] AS [Proba_0], [DT_Output_1].[Proba_1] AS [Proba_1], [DT_Output_1].[Proba_2] AS [Proba_2], [DT_Output_1].[Proba_3] AS [Proba_3], [DT_Output_1].[LogProba_0] AS [LogProba_0], [DT_Output_1].[LogProba_1] AS [LogProba_1], [DT_Output_1].[LogProba_2] AS [LogProba_2], [DT_Output_1].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT), [DT_Output_1].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT), [DT_Output_1].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT), [DT_Output_1].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT), [DT_Output_1].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_1]), 
[isotonic_cte_:param_1_1] AS 
(SELECT calibration_base_estimator_1.[KEY] AS [KEY], CASE WHEN (calibration_base_estimator_1.[ScoreOrProba_0] < 0.0) THEN 0.166666666667 WHEN (calibration_base_estimator_1.[ScoreOrProba_0] < 1.0) THEN (calibration_base_estimator_1.[ScoreOrProba_0] - 0.0) * 0.833333333333 + 0.166666666667 ELSE 1.0 END AS [Proba_0], CASE WHEN (calibration_base_estimator_1.[ScoreOrProba_1] < 0.0) THEN 0.0833333333333 WHEN (calibration_base_estimator_1.[ScoreOrProba_1] < 1.0) THEN (calibration_base_estimator_1.[ScoreOrProba_1] - 0.0) * 0.0 + 0.0833333333333 ELSE 0.0833333333333 END AS [Proba_1], CASE WHEN (calibration_base_estimator_1.[ScoreOrProba_2] < 0.0) THEN 0.0 WHEN (calibration_base_estimator_1.[ScoreOrProba_2] < 1.0) THEN (calibration_base_estimator_1.[ScoreOrProba_2] - 0.0) * 0.666666666667 + 0.0 ELSE 0.666666666667 END AS [Proba_2], CASE WHEN (calibration_base_estimator_1.[ScoreOrProba_3] < 0.0) THEN 0.2 WHEN (calibration_base_estimator_1.[ScoreOrProba_3] < 1.0) THEN (calibration_base_estimator_1.[ScoreOrProba_3] - 0.0) * 0.3 + 0.2 ELSE 0.5 END AS [Proba_3] 
FROM calibration_base_estimator_1), 
[Normalized_Probas_1] AS 
(SELECT [isotonic_cte_:param_1_1].[KEY] AS [KEY], [isotonic_cte_:param_1_1].[Proba_0] / ([isotonic_cte_:param_1_1].[Proba_0] + [isotonic_cte_:param_1_1].[Proba_1] + [isotonic_cte_:param_1_1].[Proba_2] + [isotonic_cte_:param_1_1].[Proba_3]) AS [Proba_0], [isotonic_cte_:param_1_1].[Proba_1] / ([isotonic_cte_:param_1_1].[Proba_0] + [isotonic_cte_:param_1_1].[Proba_1] + [isotonic_cte_:param_1_1].[Proba_2] + [isotonic_cte_:param_1_1].[Proba_3]) AS [Proba_1], [isotonic_cte_:param_1_1].[Proba_2] / ([isotonic_cte_:param_1_1].[Proba_0] + [isotonic_cte_:param_1_1].[Proba_1] + [isotonic_cte_:param_1_1].[Proba_2] + [isotonic_cte_:param_1_1].[Proba_3]) AS [Proba_2], [isotonic_cte_:param_1_1].[Proba_3] / ([isotonic_cte_:param_1_1].[Proba_0] + [isotonic_cte_:param_1_1].[Proba_1] + [isotonic_cte_:param_1_1].[Proba_2] + [isotonic_cte_:param_1_1].[Proba_3]) AS [Proba_3] 
FROM [isotonic_cte_:param_1_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.7113025188446045) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.301293969154358) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 0.30495890974998474) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.08243580162525177) THEN 6 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -0.9363440275192261) THEN 8 ELSE 9 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -1.1751651763916016) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.7113025188446045 AS threshold, 20 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS [Proba_0], -1.38629436112 AS [LogProba_0], 0.2 AS [Proba_1], -1.60943791243 AS [LogProba_1], 0.25 AS [Proba_2], -1.38629436112 AS [LogProba_2], 0.3 AS [Proba_3], -1.20397280433 AS [LogProba_3], 3 AS [Decision], 0.3 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, 'scaler_10' AS feature, 1.301293969154358 AS threshold, 6 AS count, 1 AS depth, 0 AS parent_id, 0.16666666666666666 AS [Proba_0], -1.79175946923 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.8333333333333334 AS [Proba_2], -0.182321556794 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 0.833333333333 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 1 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, 'scaler_6' AS feature, 0.30495890974998474 AS threshold, 14 AS count, 1 AS depth, 0 AS parent_id, 0.2857142857142857 AS [Proba_0], -1.2527629685 AS [LogProba_0], 0.2857142857142857 AS [Proba_1], -1.2527629685 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.42857142857142855 AS [Proba_3], -0.847297860387 AS [LogProba_3], 3 AS [Decision], 0.428571428571 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, 'scaler_2' AS feature, 0.08243580162525177 AS threshold, 9 AS count, 2 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.3333333333333333 AS [Proba_1], -1.09861228867 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.6666666666666666 AS [Proba_3], -0.405465108108 AS [LogProba_3], 3 AS [Decision], 0.666666666667 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 5 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, 'scaler_7' AS feature, -0.9363440275192261 AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.75 AS [Proba_1], -0.287682072452 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.25 AS [Proba_3], -1.38629436112 AS [LogProba_3], 1 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 7 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 4 AS depth, 7 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 10 AS node_id, 'scaler_7' AS feature, -1.1751651763916016 AS threshold, 5 AS count, 2 AS depth, 4 AS parent_id, 0.8 AS [Proba_0], -0.223143551314 AS [LogProba_0], 0.2 AS [Proba_1], -1.60943791243 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 10 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 10 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Proba_0] AS [Proba_0], [DT_node_data_2].[LogProba_0] AS [LogProba_0], [DT_node_data_2].[Proba_1] AS [Proba_1], [DT_node_data_2].[LogProba_1] AS [LogProba_1], [DT_node_data_2].[Proba_2] AS [Proba_2], [DT_node_data_2].[LogProba_2] AS [LogProba_2], [DT_node_data_2].[Proba_3] AS [Proba_3], [DT_node_data_2].[LogProba_3] AS [LogProba_3], [DT_node_data_2].[Decision] AS [Decision], [DT_node_data_2].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
calibration_base_estimator_2 AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [DT_Output_2].[Proba_0] AS [Proba_0], [DT_Output_2].[Proba_1] AS [Proba_1], [DT_Output_2].[Proba_2] AS [Proba_2], [DT_Output_2].[Proba_3] AS [Proba_3], [DT_Output_2].[LogProba_0] AS [LogProba_0], [DT_Output_2].[LogProba_1] AS [LogProba_1], [DT_Output_2].[LogProba_2] AS [LogProba_2], [DT_Output_2].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT), [DT_Output_2].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT), [DT_Output_2].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT), [DT_Output_2].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT), [DT_Output_2].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_2]), 
[isotonic_cte_:param_1_2] AS 
(SELECT calibration_base_estimator_2.[KEY] AS [KEY], CASE WHEN (calibration_base_estimator_2.[ScoreOrProba_0] < 0.0) THEN 0.0 WHEN (calibration_base_estimator_2.[ScoreOrProba_0] < 1.0) THEN (calibration_base_estimator_2.[ScoreOrProba_0] - 0.0) * 0.5 + 0.0 ELSE 0.5 END AS [Proba_0], CASE WHEN (calibration_base_estimator_2.[ScoreOrProba_1] < 0.0) THEN 0.2 ELSE 0.2 END AS [Proba_1], CASE WHEN (calibration_base_estimator_2.[ScoreOrProba_2] < 0.0) THEN 0.0 WHEN (calibration_base_estimator_2.[ScoreOrProba_2] < 1.0) THEN (calibration_base_estimator_2.[ScoreOrProba_2] - 0.0) * 1.0 + 0.0 ELSE 1.0 END AS [Proba_2], CASE WHEN (calibration_base_estimator_2.[ScoreOrProba_3] < 0.0) THEN 0.0 WHEN (calibration_base_estimator_2.[ScoreOrProba_3] < 1.0) THEN (calibration_base_estimator_2.[ScoreOrProba_3] - 0.0) * 1.0 + 0.0 ELSE 1.0 END AS [Proba_3] 
FROM calibration_base_estimator_2), 
[Normalized_Probas_2] AS 
(SELECT [isotonic_cte_:param_1_2].[KEY] AS [KEY], [isotonic_cte_:param_1_2].[Proba_0] / ([isotonic_cte_:param_1_2].[Proba_0] + [isotonic_cte_:param_1_2].[Proba_1] + [isotonic_cte_:param_1_2].[Proba_2] + [isotonic_cte_:param_1_2].[Proba_3]) AS [Proba_0], [isotonic_cte_:param_1_2].[Proba_1] / ([isotonic_cte_:param_1_2].[Proba_0] + [isotonic_cte_:param_1_2].[Proba_1] + [isotonic_cte_:param_1_2].[Proba_2] + [isotonic_cte_:param_1_2].[Proba_3]) AS [Proba_1], [isotonic_cte_:param_1_2].[Proba_2] / ([isotonic_cte_:param_1_2].[Proba_0] + [isotonic_cte_:param_1_2].[Proba_1] + [isotonic_cte_:param_1_2].[Proba_2] + [isotonic_cte_:param_1_2].[Proba_3]) AS [Proba_2], [isotonic_cte_:param_1_2].[Proba_3] / ([isotonic_cte_:param_1_2].[Proba_0] + [isotonic_cte_:param_1_2].[Proba_1] + [isotonic_cte_:param_1_2].[Proba_2] + [isotonic_cte_:param_1_2].[Proba_3]) AS [Proba_3] 
FROM [isotonic_cte_:param_1_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.7113025188446045) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 1.301293969154358) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 0.7646041512489319) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= 0.08243580162525177) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.7602242231369019) THEN 7 ELSE 8 END ELSE 9 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= -1.1751651763916016) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'scaler_5' AS feature, -0.7113025188446045 AS threshold, 20 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.25 AS [Proba_0], -1.38629436112 AS [LogProba_0], 0.2 AS [Proba_1], -1.60943791243 AS [LogProba_1], 0.25 AS [Proba_2], -1.38629436112 AS [LogProba_2], 0.3 AS [Proba_3], -1.20397280433 AS [LogProba_3], 3 AS [Decision], 0.3 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, 'scaler_10' AS feature, 1.301293969154358 AS threshold, 6 AS count, 1 AS depth, 0 AS parent_id, 0.16666666666666666 AS [Proba_0], -1.79175946923 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.8333333333333334 AS [Proba_2], -0.182321556794 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 0.833333333333 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 1 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, 'scaler_6' AS feature, 0.7646041512489319 AS threshold, 14 AS count, 1 AS depth, 0 AS parent_id, 0.2857142857142857 AS [Proba_0], -1.2527629685 AS [LogProba_0], 0.2857142857142857 AS [Proba_1], -1.2527629685 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.42857142857142855 AS [Proba_3], -0.847297860387 AS [LogProba_3], 3 AS [Decision], 0.428571428571 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, 'scaler_2' AS feature, 0.08243580162525177 AS threshold, 9 AS count, 2 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.3333333333333333 AS [Proba_1], -1.09861228867 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.6666666666666666 AS [Proba_3], -0.405465108108 AS [LogProba_3], 3 AS [Decision], 0.666666666667 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, 'scaler_3' AS feature, -0.7602242231369019 AS threshold, 7 AS count, 3 AS depth, 5 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.14285714285714285 AS [Proba_1], -1.94591014906 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.8571428571428571 AS [Proba_3], -0.154150679827 AS [LogProba_3], 3 AS [Decision], 0.857142857143 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 6 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 4 AS depth, 6 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 5 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 10 AS node_id, 'scaler_7' AS feature, -1.1751651763916016 AS threshold, 5 AS count, 2 AS depth, 4 AS parent_id, 0.8 AS [Proba_0], -0.223143551314 AS [LogProba_0], 0.2 AS [Proba_1], -1.60943791243 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 10 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 10 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Proba_0] AS [Proba_0], [DT_node_data_3].[LogProba_0] AS [LogProba_0], [DT_node_data_3].[Proba_1] AS [Proba_1], [DT_node_data_3].[LogProba_1] AS [LogProba_1], [DT_node_data_3].[Proba_2] AS [Proba_2], [DT_node_data_3].[LogProba_2] AS [LogProba_2], [DT_node_data_3].[Proba_3] AS [Proba_3], [DT_node_data_3].[LogProba_3] AS [LogProba_3], [DT_node_data_3].[Decision] AS [Decision], [DT_node_data_3].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
calibration_base_estimator_3 AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [DT_Output_3].[Proba_0] AS [Proba_0], [DT_Output_3].[Proba_1] AS [Proba_1], [DT_Output_3].[Proba_2] AS [Proba_2], [DT_Output_3].[Proba_3] AS [Proba_3], [DT_Output_3].[LogProba_0] AS [LogProba_0], [DT_Output_3].[LogProba_1] AS [LogProba_1], [DT_Output_3].[LogProba_2] AS [LogProba_2], [DT_Output_3].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT), [DT_Output_3].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT), [DT_Output_3].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT), [DT_Output_3].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT), [DT_Output_3].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_3]), 
[isotonic_cte_:param_1_3] AS 
(SELECT calibration_base_estimator_3.[KEY] AS [KEY], CASE WHEN (calibration_base_estimator_3.[ScoreOrProba_0] < 0.0) THEN 0.2 ELSE 0.2 END AS [Proba_0], CASE WHEN (calibration_base_estimator_3.[ScoreOrProba_1] < 0.0) THEN 0.0 WHEN (calibration_base_estimator_3.[ScoreOrProba_1] < 1.0) THEN (calibration_base_estimator_3.[ScoreOrProba_1] - 0.0) * 0.333333333333 + 0.0 ELSE 0.333333333333 END AS [Proba_1], CASE WHEN (calibration_base_estimator_3.[ScoreOrProba_2] < 0.0) THEN 0.0 WHEN (calibration_base_estimator_3.[ScoreOrProba_2] < 1.0) THEN (calibration_base_estimator_3.[ScoreOrProba_2] - 0.0) * 1.0 + 0.0 ELSE 1.0 END AS [Proba_2], CASE WHEN (calibration_base_estimator_3.[ScoreOrProba_3] < 0.0) THEN 0.25 WHEN (calibration_base_estimator_3.[ScoreOrProba_3] < 1.0) THEN (calibration_base_estimator_3.[ScoreOrProba_3] - 0.0) * 0.75 + 0.25 ELSE 1.0 END AS [Proba_3] 
FROM calibration_base_estimator_3), 
[Normalized_Probas_3] AS 
(SELECT [isotonic_cte_:param_1_3].[KEY] AS [KEY], [isotonic_cte_:param_1_3].[Proba_0] / ([isotonic_cte_:param_1_3].[Proba_0] + [isotonic_cte_:param_1_3].[Proba_1] + [isotonic_cte_:param_1_3].[Proba_2] + [isotonic_cte_:param_1_3].[Proba_3]) AS [Proba_0], [isotonic_cte_:param_1_3].[Proba_1] / ([isotonic_cte_:param_1_3].[Proba_0] + [isotonic_cte_:param_1_3].[Proba_1] + [isotonic_cte_:param_1_3].[Proba_2] + [isotonic_cte_:param_1_3].[Proba_3]) AS [Proba_1], [isotonic_cte_:param_1_3].[Proba_2] / ([isotonic_cte_:param_1_3].[Proba_0] + [isotonic_cte_:param_1_3].[Proba_1] + [isotonic_cte_:param_1_3].[Proba_2] + [isotonic_cte_:param_1_3].[Proba_3]) AS [Proba_2], [isotonic_cte_:param_1_3].[Proba_3] / ([isotonic_cte_:param_1_3].[Proba_0] + [isotonic_cte_:param_1_3].[Proba_1] + [isotonic_cte_:param_1_3].[Proba_2] + [isotonic_cte_:param_1_3].[Proba_3]) AS [Proba_3] 
FROM [isotonic_cte_:param_1_3]), 
[Score_Union_CTE] AS 
(SELECT ensemble_score_union.[KEY] AS [KEY], ensemble_score_union.[Proba_0] AS [Proba_0], ensemble_score_union.[Proba_1] AS [Proba_1], ensemble_score_union.[Proba_2] AS [Proba_2], ensemble_score_union.[Proba_3] AS [Proba_3] 
FROM (SELECT [Normalized_Probas].[KEY] AS [KEY], [Normalized_Probas].[Proba_0] AS [Proba_0], [Normalized_Probas].[Proba_1] AS [Proba_1], [Normalized_Probas].[Proba_2] AS [Proba_2], [Normalized_Probas].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas] UNION ALL SELECT [Normalized_Probas_1].[KEY] AS [KEY], [Normalized_Probas_1].[Proba_0] AS [Proba_0], [Normalized_Probas_1].[Proba_1] AS [Proba_1], [Normalized_Probas_1].[Proba_2] AS [Proba_2], [Normalized_Probas_1].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_1] UNION ALL SELECT [Normalized_Probas_2].[KEY] AS [KEY], [Normalized_Probas_2].[Proba_0] AS [Proba_0], [Normalized_Probas_2].[Proba_1] AS [Proba_1], [Normalized_Probas_2].[Proba_2] AS [Proba_2], [Normalized_Probas_2].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_2] UNION ALL SELECT [Normalized_Probas_3].[KEY] AS [KEY], [Normalized_Probas_3].[Proba_0] AS [Proba_0], [Normalized_Probas_3].[Proba_1] AS [Proba_1], [Normalized_Probas_3].[Proba_2] AS [Proba_2], [Normalized_Probas_3].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_3]) AS ensemble_score_union), 
[Calibrate_AVG_Proba] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Proba_0] AS [Proba_0], [T].[Proba_1] AS [Proba_1], [T].[Proba_2] AS [Proba_2], [T].[Proba_3] AS [Proba_3] 
FROM (SELECT [Score_Union_CTE].[KEY] AS [KEY], avg([Score_Union_CTE].[Proba_0]) AS [Proba_0], avg([Score_Union_CTE].[Proba_1]) AS [Proba_1], avg([Score_Union_CTE].[Proba_2]) AS [Proba_2], avg([Score_Union_CTE].[Proba_3]) AS [Proba_3] 
FROM [Score_Union_CTE] GROUP BY [Score_Union_CTE].[KEY]) AS [T]), 
orig_cte AS 
(SELECT [Calibrate_AVG_Proba].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [Calibrate_AVG_Proba].[Proba_0] AS [Proba_0], [Calibrate_AVG_Proba].[Proba_1] AS [Proba_1], [Calibrate_AVG_Proba].[Proba_2] AS [Proba_2], [Calibrate_AVG_Proba].[Proba_3] AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_0], CAST(NULL AS FLOAT) AS [LogProba_1], CAST(NULL AS FLOAT) AS [LogProba_2], CAST(NULL AS FLOAT) AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM [Calibrate_AVG_Proba]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], min(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte