-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0567280422233 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.140236579012 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.0372657174885 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN -0.330679704953 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.123998675786 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.444960369742 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.212981971698 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.302709868068 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.234053643219 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.206370255705 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.0770095930203 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 0.27068149358 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.161863913571 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 0.0399288414227 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN -0.254265059151 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN -0.111276408114 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN -0.0861630640894 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN -0.334747995673 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN -0.094859476883 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.113582036668 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN -0.0759245962155 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN -0.0343003464937 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 0.107994270688 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 0.0369418755717 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN -0.181975553155 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN -0.10915960674 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN -0.0307402650348 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 0.330130237811 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 0.0650795230961 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 0.16789831442 ELSE "ADS"."Feature_29" END AS impter_31, CASE WHEN ("ADS"."Feature_30" IS NULL) THEN -0.0752537387689 ELSE "ADS"."Feature_30" END AS impter_32, CASE WHEN ("ADS"."Feature_31" IS NULL) THEN -0.0494582446659 ELSE "ADS"."Feature_31" END AS impter_33, CASE WHEN ("ADS"."Feature_32" IS NULL) THEN 0.0335705224736 ELSE "ADS"."Feature_32" END AS impter_34, CASE WHEN ("ADS"."Feature_33" IS NULL) THEN 0.16321593994 ELSE "ADS"."Feature_33" END AS impter_35, CASE WHEN ("ADS"."Feature_34" IS NULL) THEN 0.358926092446 ELSE "ADS"."Feature_34" END AS impter_36, CASE WHEN ("ADS"."Feature_35" IS NULL) THEN 0.158263968624 ELSE "ADS"."Feature_35" END AS impter_37, CASE WHEN ("ADS"."Feature_36" IS NULL) THEN -0.142512862429 ELSE "ADS"."Feature_36" END AS impter_38, CASE WHEN ("ADS"."Feature_37" IS NULL) THEN 0.347035564752 ELSE "ADS"."Feature_37" END AS impter_39, CASE WHEN ("ADS"."Feature_38" IS NULL) THEN -0.0238552923272 ELSE "ADS"."Feature_38" END AS impter_40, CASE WHEN ("ADS"."Feature_39" IS NULL) THEN -0.0695866097013 ELSE "ADS"."Feature_39" END AS impter_41, CASE WHEN ("ADS"."Feature_40" IS NULL) THEN 0.0426795230663 ELSE "ADS"."Feature_40" END AS impter_42, CASE WHEN ("ADS"."Feature_41" IS NULL) THEN -0.0770669495226 ELSE "ADS"."Feature_41" END AS impter_43, CASE WHEN ("ADS"."Feature_42" IS NULL) THEN 0.212231124579 ELSE "ADS"."Feature_42" END AS impter_44, CASE WHEN ("ADS"."Feature_43" IS NULL) THEN 0.234117745754 ELSE "ADS"."Feature_43" END AS impter_45, CASE WHEN ("ADS"."Feature_44" IS NULL) THEN 0.153593757972 ELSE "ADS"."Feature_44" END AS impter_46, CASE WHEN ("ADS"."Feature_45" IS NULL) THEN -0.154123834672 ELSE "ADS"."Feature_45" END AS impter_47, CASE WHEN ("ADS"."Feature_46" IS NULL) THEN 0.050420642985 ELSE "ADS"."Feature_46" END AS impter_48, CASE WHEN ("ADS"."Feature_47" IS NULL) THEN 0.286293178863 ELSE "ADS"."Feature_47" END AS impter_49, CASE WHEN ("ADS"."Feature_48" IS NULL) THEN -0.16139921098 ELSE "ADS"."Feature_48" END AS impter_50, CASE WHEN ("ADS"."Feature_49" IS NULL) THEN 0.324889015692 ELSE "ADS"."Feature_49" END AS impter_51, CASE WHEN ("ADS"."Feature_50" IS NULL) THEN -0.297583214737 ELSE "ADS"."Feature_50" END AS impter_52, CASE WHEN ("ADS"."Feature_51" IS NULL) THEN 0.034933057271 ELSE "ADS"."Feature_51" END AS impter_53, CASE WHEN ("ADS"."Feature_52" IS NULL) THEN 0.0330570969759 ELSE "ADS"."Feature_52" END AS impter_54, CASE WHEN ("ADS"."Feature_53" IS NULL) THEN -0.399342948851 ELSE "ADS"."Feature_53" END AS impter_55, CASE WHEN ("ADS"."Feature_54" IS NULL) THEN -0.11508478233 ELSE "ADS"."Feature_54" END AS impter_56, CASE WHEN ("ADS"."Feature_55" IS NULL) THEN 0.23421370694 ELSE "ADS"."Feature_55" END AS impter_57, CASE WHEN ("ADS"."Feature_56" IS NULL) THEN -0.265114673051 ELSE "ADS"."Feature_56" END AS impter_58, CASE WHEN ("ADS"."Feature_57" IS NULL) THEN 0.14958697519 ELSE "ADS"."Feature_57" END AS impter_59, CASE WHEN ("ADS"."Feature_58" IS NULL) THEN -0.164025250034 ELSE "ADS"."Feature_58" END AS impter_60, CASE WHEN ("ADS"."Feature_59" IS NULL) THEN 0.233207341918 ELSE "ADS"."Feature_59" END AS impter_61, CASE WHEN ("ADS"."Feature_60" IS NULL) THEN -0.0732155511805 ELSE "ADS"."Feature_60" END AS impter_62, CASE WHEN ("ADS"."Feature_61" IS NULL) THEN 0.302441063504 ELSE "ADS"."Feature_61" END AS impter_63, CASE WHEN ("ADS"."Feature_62" IS NULL) THEN 0.0144713812992 ELSE "ADS"."Feature_62" END AS impter_64, CASE WHEN ("ADS"."Feature_63" IS NULL) THEN -0.0606396822069 ELSE "ADS"."Feature_63" END AS impter_65, CASE WHEN ("ADS"."Feature_64" IS NULL) THEN 0.138256526423 ELSE "ADS"."Feature_64" END AS impter_66, CASE WHEN ("ADS"."Feature_65" IS NULL) THEN -0.0237126100632 ELSE "ADS"."Feature_65" END AS impter_67, CASE WHEN ("ADS"."Feature_66" IS NULL) THEN 0.245442059016 ELSE "ADS"."Feature_66" END AS impter_68, CASE WHEN ("ADS"."Feature_67" IS NULL) THEN -0.41154503268 ELSE "ADS"."Feature_67" END AS impter_69, CASE WHEN ("ADS"."Feature_68" IS NULL) THEN -0.245621429007 ELSE "ADS"."Feature_68" END AS impter_70, CASE WHEN ("ADS"."Feature_69" IS NULL) THEN -0.0789090275444 ELSE "ADS"."Feature_69" END AS impter_71, CASE WHEN ("ADS"."Feature_70" IS NULL) THEN -0.0528437390469 ELSE "ADS"."Feature_70" END AS impter_72, CASE WHEN ("ADS"."Feature_71" IS NULL) THEN -0.43059903839 ELSE "ADS"."Feature_71" END AS impter_73, CASE WHEN ("ADS"."Feature_72" IS NULL) THEN -0.216078891016 ELSE "ADS"."Feature_72" END AS impter_74, CASE WHEN ("ADS"."Feature_73" IS NULL) THEN 0.037759887104 ELSE "ADS"."Feature_73" END AS impter_75, CASE WHEN ("ADS"."Feature_74" IS NULL) THEN 0.094827890411 ELSE "ADS"."Feature_74" END AS impter_76, CASE WHEN ("ADS"."Feature_75" IS NULL) THEN 0.0148994555589 ELSE "ADS"."Feature_75" END AS impter_77, CASE WHEN ("ADS"."Feature_76" IS NULL) THEN -0.080734501794 ELSE "ADS"."Feature_76" END AS impter_78, CASE WHEN ("ADS"."Feature_77" IS NULL) THEN -0.0540749471232 ELSE "ADS"."Feature_77" END AS impter_79, CASE WHEN ("ADS"."Feature_78" IS NULL) THEN 0.199449269535 ELSE "ADS"."Feature_78" END AS impter_80, CASE WHEN ("ADS"."Feature_79" IS NULL) THEN 0.282134938645 ELSE "ADS"."Feature_79" END AS impter_81, CASE WHEN ("ADS"."Feature_80" IS NULL) THEN -0.102364949405 ELSE "ADS"."Feature_80" END AS impter_82, CASE WHEN ("ADS"."Feature_81" IS NULL) THEN 0.0551917402303 ELSE "ADS"."Feature_81" END AS impter_83, CASE WHEN ("ADS"."Feature_82" IS NULL) THEN 0.07437713068 ELSE "ADS"."Feature_82" END AS impter_84, CASE WHEN ("ADS"."Feature_83" IS NULL) THEN 0.194399064803 ELSE "ADS"."Feature_83" END AS impter_85, CASE WHEN ("ADS"."Feature_84" IS NULL) THEN 0.181106011811 ELSE "ADS"."Feature_84" END AS impter_86, CASE WHEN ("ADS"."Feature_85" IS NULL) THEN 0.279533354262 ELSE "ADS"."Feature_85" END AS impter_87, CASE WHEN ("ADS"."Feature_86" IS NULL) THEN 0.0847557544111 ELSE "ADS"."Feature_86" END AS impter_88, CASE WHEN ("ADS"."Feature_87" IS NULL) THEN -0.154690352565 ELSE "ADS"."Feature_87" END AS impter_89, CASE WHEN ("ADS"."Feature_88" IS NULL) THEN 0.126249860187 ELSE "ADS"."Feature_88" END AS impter_90, CASE WHEN ("ADS"."Feature_89" IS NULL) THEN -0.323372737003 ELSE "ADS"."Feature_89" END AS impter_91, CASE WHEN ("ADS"."Feature_90" IS NULL) THEN 0.136432974158 ELSE "ADS"."Feature_90" END AS impter_92, CASE WHEN ("ADS"."Feature_91" IS NULL) THEN -0.291499731768 ELSE "ADS"."Feature_91" END AS impter_93, CASE WHEN ("ADS"."Feature_92" IS NULL) THEN 0.344791599684 ELSE "ADS"."Feature_92" END AS impter_94, CASE WHEN ("ADS"."Feature_93" IS NULL) THEN -0.243235975327 ELSE "ADS"."Feature_93" END AS impter_95, CASE WHEN ("ADS"."Feature_94" IS NULL) THEN 0.0585748834279 ELSE "ADS"."Feature_94" END AS impter_96, CASE WHEN ("ADS"."Feature_95" IS NULL) THEN 0.349693899363 ELSE "ADS"."Feature_95" END AS impter_97, CASE WHEN ("ADS"."Feature_96" IS NULL) THEN 0.145926424279 ELSE "ADS"."Feature_96" END AS impter_98, CASE WHEN ("ADS"."Feature_97" IS NULL) THEN 0.165599376595 ELSE "ADS"."Feature_97" END AS impter_99, CASE WHEN ("ADS"."Feature_98" IS NULL) THEN -0.242346912551 ELSE "ADS"."Feature_98" END AS impter_100, CASE WHEN ("ADS"."Feature_99" IS NULL) THEN 0.02376564685 ELSE "ADS"."Feature_99" END AS impter_101 
FROM "BinaryClass_100" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.0567280422233) / 0.831828357122 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.140236579012) / 0.800964567395 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.0372657174885) / 0.925192556932 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - -0.330679704953) / 0.659382632997 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.123998675786) / 1.34483937815 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.444960369742) / 1.02516327106 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.212981971698) / 0.83352353084 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.302709868068) / 0.763981643534 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.234053643219) / 0.75741981393 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.206370255705) / 0.898687472452 AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS FLOAT) - 0.0770095930203) / 1.26748109751 AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS FLOAT) - 0.27068149358) / 0.866399857522 AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS FLOAT) - -0.161863913571) / 0.799497357254 AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS FLOAT) - 0.0399288414227) / 1.13087285599 AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS FLOAT) - -0.254265059151) / 1.01651791825 AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS FLOAT) - -0.111276408114) / 0.938752483985 AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS FLOAT) - -0.0861630640894) / 0.914681027757 AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS FLOAT) - -0.334747995673) / 0.949629992679 AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS FLOAT) - -0.094859476883) / 1.50960647262 AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS FLOAT) - 0.113582036668) / 1.07105757599 AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS FLOAT) - -0.0759245962155) / 1.06890449289 AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS FLOAT) - -0.0343003464937) / 1.0014448127 AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS FLOAT) - 0.107994270688) / 1.17340493017 AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS FLOAT) - 0.0369418755717) / 0.80742800075 AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS FLOAT) - -0.181975553155) / 0.687364760105 AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS FLOAT) - -0.10915960674) / 0.687065607707 AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS FLOAT) - -0.0307402650348) / 0.972065432686 AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS FLOAT) - 0.330130237811) / 1.13932290297 AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS FLOAT) - 0.0650795230961) / 0.765350959284 AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS FLOAT) - 0.16789831442) / 0.947407864314 AS scaler_31, (CAST("ADS_imp_1_OUT".impter_32 AS FLOAT) - -0.0752537387689) / 0.90014197817 AS scaler_32, (CAST("ADS_imp_1_OUT".impter_33 AS FLOAT) - -0.0494582446659) / 0.872802132506 AS scaler_33, (CAST("ADS_imp_1_OUT".impter_34 AS FLOAT) - 0.0335705224736) / 1.1007678159 AS scaler_34, (CAST("ADS_imp_1_OUT".impter_35 AS FLOAT) - 0.16321593994) / 0.946567448221 AS scaler_35, (CAST("ADS_imp_1_OUT".impter_36 AS FLOAT) - 0.358926092446) / 0.716738828913 AS scaler_36, (CAST("ADS_imp_1_OUT".impter_37 AS FLOAT) - 0.158263968624) / 0.910969373396 AS scaler_37, (CAST("ADS_imp_1_OUT".impter_38 AS FLOAT) - -0.142512862429) / 0.944315329835 AS scaler_38, (CAST("ADS_imp_1_OUT".impter_39 AS FLOAT) - 0.347035564752) / 0.811170440621 AS scaler_39, (CAST("ADS_imp_1_OUT".impter_40 AS FLOAT) - -0.0238552923272) / 0.948251267852 AS scaler_40, (CAST("ADS_imp_1_OUT".impter_41 AS FLOAT) - -0.0695866097013) / 0.962996997811 AS scaler_41, (CAST("ADS_imp_1_OUT".impter_42 AS FLOAT) - 0.0426795230663) / 0.830424578294 AS scaler_42, (CAST("ADS_imp_1_OUT".impter_43 AS FLOAT) - -0.0770669495226) / 0.979391477839 AS scaler_43, (CAST("ADS_imp_1_OUT".impter_44 AS FLOAT) - 0.212231124579) / 1.07616886207 AS scaler_44, (CAST("ADS_imp_1_OUT".impter_45 AS FLOAT) - 0.234117745754) / 0.916265301599 AS scaler_45, (CAST("ADS_imp_1_OUT".impter_46 AS FLOAT) - 0.153593757972) / 0.967126112496 AS scaler_46, (CAST("ADS_imp_1_OUT".impter_47 AS FLOAT) - -0.154123834672) / 0.749453591715 AS scaler_47, (CAST("ADS_imp_1_OUT".impter_48 AS FLOAT) - 0.050420642985) / 0.856395244605 AS scaler_48, (CAST("ADS_imp_1_OUT".impter_49 AS FLOAT) - 0.286293178863) / 0.895752720335 AS scaler_49, (CAST("ADS_imp_1_OUT".impter_50 AS FLOAT) - -0.16139921098) / 0.969470070296 AS scaler_50, (CAST("ADS_imp_1_OUT".impter_51 AS FLOAT) - 0.324889015692) / 1.00870898224 AS scaler_51, (CAST("ADS_imp_1_OUT".impter_52 AS FLOAT) - -0.297583214737) / 1.13036441631 AS scaler_52, (CAST("ADS_imp_1_OUT".impter_53 AS FLOAT) - 0.034933057271) / 1.0533444274 AS scaler_53, (CAST("ADS_imp_1_OUT".impter_54 AS FLOAT) - 0.0330570969759) / 0.938408778503 AS scaler_54, (CAST("ADS_imp_1_OUT".impter_55 AS FLOAT) - -0.399342948851) / 0.759757848845 AS scaler_55, (CAST("ADS_imp_1_OUT".impter_56 AS FLOAT) - -0.11508478233) / 1.11536740054 AS scaler_56, (CAST("ADS_imp_1_OUT".impter_57 AS FLOAT) - 0.23421370694) / 0.941182394663 AS scaler_57, (CAST("ADS_imp_1_OUT".impter_58 AS FLOAT) - -0.265114673051) / 1.0717752584 AS scaler_58, (CAST("ADS_imp_1_OUT".impter_59 AS FLOAT) - 0.14958697519) / 1.40130918351 AS scaler_59, (CAST("ADS_imp_1_OUT".impter_60 AS FLOAT) - -0.164025250034) / 0.771415820729 AS scaler_60, (CAST("ADS_imp_1_OUT".impter_61 AS FLOAT) - 0.233207341918) / 1.03443330299 AS scaler_61, (CAST("ADS_imp_1_OUT".impter_62 AS FLOAT) - -0.0732155511805) / 0.935081365613 AS scaler_62, (CAST("ADS_imp_1_OUT".impter_63 AS FLOAT) - 0.302441063504) / 0.936259201278 AS scaler_63, (CAST("ADS_imp_1_OUT".impter_64 AS FLOAT) - 0.0144713812992) / 0.853578444683 AS scaler_64, (CAST("ADS_imp_1_OUT".impter_65 AS FLOAT) - -0.0606396822069) / 0.974405154294 AS scaler_65, (CAST("ADS_imp_1_OUT".impter_66 AS FLOAT) - 0.138256526423) / 0.909314089733 AS scaler_66, (CAST("ADS_imp_1_OUT".impter_67 AS FLOAT) - -0.0237126100632) / 0.868807999806 AS scaler_67, (CAST("ADS_imp_1_OUT".impter_68 AS FLOAT) - 0.245442059016) / 0.969476935673 AS scaler_68, (CAST("ADS_imp_1_OUT".impter_69 AS FLOAT) - -0.41154503268) / 0.958672845816 AS scaler_69, (CAST("ADS_imp_1_OUT".impter_70 AS FLOAT) - -0.245621429007) / 0.817916501251 AS scaler_70, (CAST("ADS_imp_1_OUT".impter_71 AS FLOAT) - -0.0789090275444) / 0.758656563635 AS scaler_71, (CAST("ADS_imp_1_OUT".impter_72 AS FLOAT) - -0.0528437390469) / 0.531634919361 AS scaler_72, (CAST("ADS_imp_1_OUT".impter_73 AS FLOAT) - -0.43059903839) / 1.05928980937 AS scaler_73, (CAST("ADS_imp_1_OUT".impter_74 AS FLOAT) - -0.216078891016) / 1.15779181755 AS scaler_74, (CAST("ADS_imp_1_OUT".impter_75 AS FLOAT) - 0.037759887104) / 0.715711028517 AS scaler_75, (CAST("ADS_imp_1_OUT".impter_76 AS FLOAT) - 0.094827890411) / 0.989371955837 AS scaler_76, (CAST("ADS_imp_1_OUT".impter_77 AS FLOAT) - 0.0148994555589) / 1.00905262229 AS scaler_77, (CAST("ADS_imp_1_OUT".impter_78 AS FLOAT) - -0.080734501794) / 1.11401597731 AS scaler_78, (CAST("ADS_imp_1_OUT".impter_79 AS FLOAT) - -0.0540749471232) / 0.53316169274 AS scaler_79, (CAST("ADS_imp_1_OUT".impter_80 AS FLOAT) - 0.199449269535) / 1.12142885632 AS scaler_80, (CAST("ADS_imp_1_OUT".impter_81 AS FLOAT) - 0.282134938645) / 0.951828903346 AS scaler_81, (CAST("ADS_imp_1_OUT".impter_82 AS FLOAT) - -0.102364949405) / 1.0119335436 AS scaler_82, (CAST("ADS_imp_1_OUT".impter_83 AS FLOAT) - 0.0551917402303) / 0.783125729703 AS scaler_83, (CAST("ADS_imp_1_OUT".impter_84 AS FLOAT) - 0.07437713068) / 0.867808611228 AS scaler_84, (CAST("ADS_imp_1_OUT".impter_85 AS FLOAT) - 0.194399064803) / 1.1133184258 AS scaler_85, (CAST("ADS_imp_1_OUT".impter_86 AS FLOAT) - 0.181106011811) / 0.869774562169 AS scaler_86, (CAST("ADS_imp_1_OUT".impter_87 AS FLOAT) - 0.279533354262) / 1.08303480028 AS scaler_87, (CAST("ADS_imp_1_OUT".impter_88 AS FLOAT) - 0.0847557544111) / 0.670203676888 AS scaler_88, (CAST("ADS_imp_1_OUT".impter_89 AS FLOAT) - -0.154690352565) / 1.01399312 AS scaler_89, (CAST("ADS_imp_1_OUT".impter_90 AS FLOAT) - 0.126249860187) / 0.96452903461 AS scaler_90, (CAST("ADS_imp_1_OUT".impter_91 AS FLOAT) - -0.323372737003) / 1.21807513792 AS scaler_91, (CAST("ADS_imp_1_OUT".impter_92 AS FLOAT) - 0.136432974158) / 0.71747771542 AS scaler_92, (CAST("ADS_imp_1_OUT".impter_93 AS FLOAT) - -0.291499731768) / 1.09041807149 AS scaler_93, (CAST("ADS_imp_1_OUT".impter_94 AS FLOAT) - 0.344791599684) / 1.2108198638 AS scaler_94, (CAST("ADS_imp_1_OUT".impter_95 AS FLOAT) - -0.243235975327) / 1.00841749852 AS scaler_95, (CAST("ADS_imp_1_OUT".impter_96 AS FLOAT) - 0.0585748834279) / 1.0571368891 AS scaler_96, (CAST("ADS_imp_1_OUT".impter_97 AS FLOAT) - 0.349693899363) / 0.700762723708 AS scaler_97, (CAST("ADS_imp_1_OUT".impter_98 AS FLOAT) - 0.145926424279) / 1.00130084961 AS scaler_98, (CAST("ADS_imp_1_OUT".impter_99 AS FLOAT) - 0.165599376595) / 0.905941348571 AS scaler_99, (CAST("ADS_imp_1_OUT".impter_100 AS FLOAT) - -0.242346912551) / 0.932658681911 AS scaler_100, (CAST("ADS_imp_1_OUT".impter_101 AS FLOAT) - 0.02376564685) / 0.855845195736 AS scaler_101 
FROM "ADS_imp_1_OUT"), 
"DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_79 <= 0.5700060129165649) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= -0.6715860366821289) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision", "Values"."DecisionProba" AS "DecisionProba" 
FROM (SELECT 0 AS node_id, 'scaler_79' AS feature, 0.5700060129165649 AS threshold, 18 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4444444444444444 AS "Proba_0", -0.810930216216 AS "LogProba_0", 0.5555555555555556 AS "Proba_1", -0.587786664902 AS "LogProba_1", 1 AS "Decision", 0.555555555556 AS "DecisionProba" UNION ALL SELECT 1 AS node_id, 'scaler_2' AS feature, -0.6715860366821289 AS threshold, 12 AS count, 1 AS depth, 0 AS parent_id, 0.16666666666666666 AS "Proba_0", -1.79175946923 AS "LogProba_0", 0.8333333333333334 AS "Proba_1", -0.182321556794 AS "LogProba_1", 1 AS "Decision", 0.833333333333 AS "DecisionProba" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 1 AS depth, 0 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision", 1.0 AS "DecisionProba") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Decision" AS "Decision", "DT_node_data"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
calibration_base_estimator_0 AS 
(SELECT "DT_Output"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", "DT_Output"."Proba_0" AS "Proba_0", "DT_Output"."Proba_1" AS "Proba_1", "DT_Output"."LogProba_0" AS "LogProba_0", "DT_Output"."LogProba_1" AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_1") AS "ScoreOrProba_1" 
FROM "DT_Output"), 
sigmoid_calibration_0 AS 
(SELECT calibration_base_estimator_0."KEY" AS "KEY", 1.0 / (1.0 + exp(-1.0902612041 * calibration_base_estimator_0."ScoreOrProba_1" + 0.359377698447)) AS "Proba_1", 1.0 - 1.0 / (1.0 + exp(-1.0902612041 * calibration_base_estimator_0."ScoreOrProba_1" + 0.359377698447)) AS "Proba_0" 
FROM calibration_base_estimator_0), 
"Normalized_Probas" AS 
(SELECT sigmoid_calibration_0."KEY" AS "KEY", sigmoid_calibration_0."Proba_1" / (sigmoid_calibration_0."Proba_0" + sigmoid_calibration_0."Proba_1") AS "Proba_1", sigmoid_calibration_0."Proba_0" / (sigmoid_calibration_0."Proba_0" + sigmoid_calibration_0."Proba_1") AS "Proba_0" 
FROM sigmoid_calibration_0), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= 0.1760057806968689) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_46 <= -0.39140188694000244) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision", "Values"."DecisionProba" AS "DecisionProba" 
FROM (SELECT 0 AS node_id, 'scaler_59' AS feature, 0.1760057806968689 AS threshold, 18 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4444444444444444 AS "Proba_0", -0.810930216216 AS "LogProba_0", 0.5555555555555556 AS "Proba_1", -0.587786664902 AS "LogProba_1", 1 AS "Decision", 0.555555555556 AS "DecisionProba" UNION ALL SELECT 1 AS node_id, 'scaler_46' AS feature, -0.39140188694000244 AS threshold, 11 AS count, 1 AS depth, 0 AS parent_id, 0.7272727272727273 AS "Proba_0", -0.318453731119 AS "LogProba_0", 0.2727272727272727 AS "Proba_1", -1.29928298413 AS "LogProba_1", 0 AS "Decision", 0.727272727273 AS "DecisionProba" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 2 AS depth, 1 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 1 AS depth, 0 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision", 1.0 AS "DecisionProba") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Decision" AS "Decision", "DT_node_data_1"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
calibration_base_estimator_1 AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", "DT_Output_1"."Proba_0" AS "Proba_0", "DT_Output_1"."Proba_1" AS "Proba_1", "DT_Output_1"."LogProba_0" AS "LogProba_0", "DT_Output_1"."LogProba_1" AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_1") AS "ScoreOrProba_1" 
FROM "DT_Output_1"), 
sigmoid_calibration_1 AS 
(SELECT calibration_base_estimator_1."KEY" AS "KEY", 1.0 / (1.0 + exp(-1.0902612041 * calibration_base_estimator_1."ScoreOrProba_1" + 0.359377698447)) AS "Proba_1", 1.0 - 1.0 / (1.0 + exp(-1.0902612041 * calibration_base_estimator_1."ScoreOrProba_1" + 0.359377698447)) AS "Proba_0" 
FROM calibration_base_estimator_1), 
"Normalized_Probas_1" AS 
(SELECT sigmoid_calibration_1."KEY" AS "KEY", sigmoid_calibration_1."Proba_1" / (sigmoid_calibration_1."Proba_0" + sigmoid_calibration_1."Proba_1") AS "Proba_1", sigmoid_calibration_1."Proba_0" / (sigmoid_calibration_1."Proba_0" + sigmoid_calibration_1."Proba_1") AS "Proba_0" 
FROM sigmoid_calibration_1), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_69 <= -0.05884106457233429) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_31 <= 1.0336017608642578) THEN 2 ELSE 3 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_24 <= -1.7048848867416382) THEN 5 ELSE 6 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision", "Values"."DecisionProba" AS "DecisionProba" 
FROM (SELECT 0 AS node_id, 'scaler_69' AS feature, -0.05884106457233429 AS threshold, 19 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.42105263157894735 AS "Proba_0", -0.864997437487 AS "LogProba_0", 0.5789473684210527 AS "Proba_1", -0.546543706368 AS "LogProba_1", 1 AS "Decision", 0.578947368421 AS "DecisionProba" UNION ALL SELECT 1 AS node_id, 'scaler_31' AS feature, 1.0336017608642578 AS threshold, 9 AS count, 1 AS depth, 0 AS parent_id, 0.7777777777777778 AS "Proba_0", -0.251314428281 AS "LogProba_0", 0.2222222222222222 AS "Proba_1", -1.50407739678 AS "LogProba_1", 0 AS "Decision", 0.777777777778 AS "DecisionProba" UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 2 AS depth, 1 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 4 AS node_id, 'scaler_24' AS feature, -1.7048848867416382 AS threshold, 10 AS count, 1 AS depth, 0 AS parent_id, 0.1 AS "Proba_0", -2.30258509299 AS "LogProba_0", 0.9 AS "Proba_1", -0.105360515658 AS "LogProba_1", 1 AS "Decision", 0.9 AS "DecisionProba" UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 4 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 2 AS depth, 4 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision", 1.0 AS "DecisionProba") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Decision" AS "Decision", "DT_node_data_2"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
calibration_base_estimator_2 AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", "DT_Output_2"."Proba_0" AS "Proba_0", "DT_Output_2"."Proba_1" AS "Proba_1", "DT_Output_2"."LogProba_0" AS "LogProba_0", "DT_Output_2"."LogProba_1" AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_1") AS "ScoreOrProba_1" 
FROM "DT_Output_2"), 
sigmoid_calibration_2 AS 
(SELECT calibration_base_estimator_2."KEY" AS "KEY", 1.0 / (1.0 + exp(0.0 * calibration_base_estimator_2."ScoreOrProba_1" + 0.0)) AS "Proba_1", 1.0 - 1.0 / (1.0 + exp(0.0 * calibration_base_estimator_2."ScoreOrProba_1" + 0.0)) AS "Proba_0" 
FROM calibration_base_estimator_2), 
"Normalized_Probas_2" AS 
(SELECT sigmoid_calibration_2."KEY" AS "KEY", sigmoid_calibration_2."Proba_1" / (sigmoid_calibration_2."Proba_0" + sigmoid_calibration_2."Proba_1") AS "Proba_1", sigmoid_calibration_2."Proba_0" / (sigmoid_calibration_2."Proba_0" + sigmoid_calibration_2."Proba_1") AS "Proba_0" 
FROM sigmoid_calibration_2), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_3 <= -0.055991142988204956) THEN 1 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= -0.0821952223777771) THEN 3 ELSE 4 END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Decision" AS "Decision", "Values"."DecisionProba" AS "DecisionProba" 
FROM (SELECT 0 AS node_id, 'scaler_3' AS feature, -0.055991142988204956 AS threshold, 20 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.45 AS "Proba_0", -0.798507696218 AS "LogProba_0", 0.55 AS "Proba_1", -0.597837000756 AS "LogProba_1", 1 AS "Decision", 0.55 AS "DecisionProba" UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 1 AS depth, 0 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 2 AS node_id, 'scaler_59' AS feature, -0.0821952223777771 AS threshold, 11 AS count, 1 AS depth, 0 AS parent_id, 0.8181818181818182 AS "Proba_0", -0.200670695462 AS "LogProba_0", 0.18181818181818182 AS "Proba_1", -1.70474809224 AS "LogProba_1", 0 AS "Decision", 0.818181818182 AS "DecisionProba" UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 2 AS depth, 2 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -1.79769313486231e+308 AS "LogProba_1", 0 AS "Decision", 1.0 AS "DecisionProba" UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 2 AS parent_id, 0.0 AS "Proba_0", -1.79769313486231e+308 AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 1 AS "Decision", 1.0 AS "DecisionProba") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Decision" AS "Decision", "DT_node_data_3"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
calibration_base_estimator_3 AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", "DT_Output_3"."Proba_0" AS "Proba_0", "DT_Output_3"."Proba_1" AS "Proba_1", "DT_Output_3"."LogProba_0" AS "LogProba_0", "DT_Output_3"."LogProba_1" AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_1") AS "ScoreOrProba_1" 
FROM "DT_Output_3"), 
sigmoid_calibration_3 AS 
(SELECT calibration_base_estimator_3."KEY" AS "KEY", 1.0 / (1.0 + exp(-0.0175451356048 * calibration_base_estimator_3."ScoreOrProba_1" + -0.305227208057)) AS "Proba_1", 1.0 - 1.0 / (1.0 + exp(-0.0175451356048 * calibration_base_estimator_3."ScoreOrProba_1" + -0.305227208057)) AS "Proba_0" 
FROM calibration_base_estimator_3), 
"Normalized_Probas_3" AS 
(SELECT sigmoid_calibration_3."KEY" AS "KEY", sigmoid_calibration_3."Proba_1" / (sigmoid_calibration_3."Proba_0" + sigmoid_calibration_3."Proba_1") AS "Proba_1", sigmoid_calibration_3."Proba_0" / (sigmoid_calibration_3."Proba_0" + sigmoid_calibration_3."Proba_1") AS "Proba_0" 
FROM sigmoid_calibration_3), 
"Score_Union_CTE" AS 
(SELECT ensemble_score_union."KEY" AS "KEY", ensemble_score_union."Proba_1" AS "Proba_1", ensemble_score_union."Proba_0" AS "Proba_0" 
FROM (SELECT "Normalized_Probas"."KEY" AS "KEY", "Normalized_Probas"."Proba_1" AS "Proba_1", "Normalized_Probas"."Proba_0" AS "Proba_0" 
FROM "Normalized_Probas" UNION ALL SELECT "Normalized_Probas_1"."KEY" AS "KEY", "Normalized_Probas_1"."Proba_1" AS "Proba_1", "Normalized_Probas_1"."Proba_0" AS "Proba_0" 
FROM "Normalized_Probas_1" UNION ALL SELECT "Normalized_Probas_2"."KEY" AS "KEY", "Normalized_Probas_2"."Proba_1" AS "Proba_1", "Normalized_Probas_2"."Proba_0" AS "Proba_0" 
FROM "Normalized_Probas_2" UNION ALL SELECT "Normalized_Probas_3"."KEY" AS "KEY", "Normalized_Probas_3"."Proba_1" AS "Proba_1", "Normalized_Probas_3"."Proba_0" AS "Proba_0" 
FROM "Normalized_Probas_3") AS ensemble_score_union), 
"Calibrate_AVG_Proba" AS 
(SELECT "T"."KEY" AS "KEY", "T"."Proba_1" AS "Proba_1", "T"."Proba_0" AS "Proba_0" 
FROM (SELECT "Score_Union_CTE"."KEY" AS "KEY", avg("Score_Union_CTE"."Proba_1") AS "Proba_1", avg("Score_Union_CTE"."Proba_0") AS "Proba_0" 
FROM "Score_Union_CTE" GROUP BY "Score_Union_CTE"."KEY") AS "T"), 
orig_cte AS 
(SELECT "Calibrate_AVG_Proba"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", "Calibrate_AVG_Proba"."Proba_0" AS "Proba_0", "Calibrate_AVG_Proba"."Proba_1" AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "Calibrate_AVG_Proba"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte