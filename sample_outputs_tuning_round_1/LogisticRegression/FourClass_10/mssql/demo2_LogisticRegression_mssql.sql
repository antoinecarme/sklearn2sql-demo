-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH linear_model_cte AS 
(SELECT [ADS].[KEY] AS [KEY], 0.7616759178607894 * [ADS].[Feature_0] + -0.2642705730905431 * [ADS].[Feature_1] + 0.11559731120671929 * [ADS].[Feature_2] + -0.2003302997114425 * [ADS].[Feature_3] + 1.330999224187995 * [ADS].[Feature_4] + 0.1296535543001673 * [ADS].[Feature_5] + 0.1097490127308819 * [ADS].[Feature_6] + 0.5066513144471191 * [ADS].[Feature_7] + 0.3987500370790752 * [ADS].[Feature_8] + -0.04954848194443561 * [ADS].[Feature_9] + -0.707619706997 AS [Score_0], 0.4476297539803004 * [ADS].[Feature_0] + -0.27291746281082946 * [ADS].[Feature_1] + 0.27742220049282174 * [ADS].[Feature_2] + 0.3103940973705186 * [ADS].[Feature_3] + -0.045268720230649255 * [ADS].[Feature_4] + 0.10877049042593 * [ADS].[Feature_5] + -0.20418944154252436 * [ADS].[Feature_6] + 0.48214295376651267 * [ADS].[Feature_7] + -0.8173748407371348 * [ADS].[Feature_8] + 0.2600541830197998 * [ADS].[Feature_9] + -1.30166765579 AS [Score_1], -0.4014725815523311 * [ADS].[Feature_0] + -0.6792183898206697 * [ADS].[Feature_1] + -0.4456050455575656 * [ADS].[Feature_2] + -0.921546488001891 * [ADS].[Feature_3] + -0.10605984535754924 * [ADS].[Feature_4] + 0.4940911861904286 * [ADS].[Feature_5] + 0.3114109580547827 * [ADS].[Feature_6] + 0.08440399798403062 * [ADS].[Feature_7] + -0.38382145420724245 * [ADS].[Feature_8] + -0.17667384538255063 * [ADS].[Feature_9] + -1.2571320102 AS [Score_2], -0.5314059616505828 * [ADS].[Feature_0] + 0.7856226057837301 * [ADS].[Feature_1] + -0.09416242291895004 * [ADS].[Feature_2] + 0.3648357629757803 * [ADS].[Feature_3] + -0.25150154796639723 * [ADS].[Feature_4] + -0.02179506047347416 * [ADS].[Feature_5] + -0.046728551401194335 * [ADS].[Feature_6] + -0.5138490396478774 * [ADS].[Feature_7] + -0.24492623938666563 * [ADS].[Feature_8] + -0.029849947876370655 * [ADS].[Feature_9] + -1.56963528221 AS [Score_3] 
FROM [FourClass_10] AS [ADS]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], linear_model_cte.[Score_3] AS [Score_3], (1.0 / (1.0 + exp(-linear_model_cte.[Score_0]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_0], (1.0 / (1.0 + exp(-linear_model_cte.[Score_1]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_1], (1.0 / (1.0 + exp(-linear_model_cte.[Score_2]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_2], (1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) / (1.0 / (1.0 + exp(-linear_model_cte.[Score_0])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_1])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_2])) + 1.0 / (1.0 + exp(-linear_model_cte.[Score_3]))) AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_0], CAST(NULL AS FLOAT) AS [LogProba_1], CAST(NULL AS FLOAT) AS [LogProba_2], CAST(NULL AS FLOAT) AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], min(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte