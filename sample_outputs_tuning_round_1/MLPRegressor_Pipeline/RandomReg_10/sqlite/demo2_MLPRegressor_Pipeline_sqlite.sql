-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0810083160112 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.269250048034 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.240487763101 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.142604128589 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.183572350866 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.173548954209 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.126298254061 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.360628810671 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.51115301513 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.203356397123 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "RandomReg_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.0810083160112) / 0.90949713658 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - -0.269250048034) / 0.992426738719 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.240487763101) / 0.759956724432 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.142604128589) / 1.0926864622 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.183572350866) / 1.05658801775 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.173548954209) / 0.786365993461 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.126298254061) / 1.3847124245 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.360628810671) / 0.940597350833 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.51115301513) / 1.18193438252 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.203356397123) / 0.6906744839 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -3.80210074715 * "IL".scaler_2 + 18.2404604984 * "IL".scaler_3 + 15.0300946878 * "IL".scaler_4 + -3.58474761524 * "IL".scaler_5 + 4.81453292076 * "IL".scaler_6 + 12.6954781396 * "IL".scaler_7 + 5.06356392995 * "IL".scaler_8 + 5.88727812879 * "IL".scaler_9 + 18.4612160447 * "IL".scaler_10 + -3.37486556476 * "IL".scaler_11 + -1.83805079113 AS "NEUR_1_1", -24.0487265039 * "IL".scaler_2 + -42.2256722363 * "IL".scaler_3 + -36.5319284598 * "IL".scaler_4 + -29.7876297696 * "IL".scaler_5 + -20.0547090971 * "IL".scaler_6 + -56.6493280575 * "IL".scaler_7 + -20.7978971019 * "IL".scaler_8 + -26.3614450153 * "IL".scaler_9 + -69.6571697917 * "IL".scaler_10 + -14.6572565973 * "IL".scaler_11 + 31.1447696424 AS "NEUR_1_2", 21.7897520188 * "IL".scaler_2 + 48.7668926989 * "IL".scaler_3 + 34.2953237973 * "IL".scaler_4 + -0.699358147772 * "IL".scaler_5 + 37.8483728711 * "IL".scaler_6 + 37.9539103456 * "IL".scaler_7 + 0.878094431932 * "IL".scaler_8 + 29.6590963393 * "IL".scaler_9 + 56.9268652414 * "IL".scaler_10 + 12.4026755846 * "IL".scaler_11 + 5.95099337306 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.168271501107 * "HL_1_relu"."NEUR_1_1" + -2.03500925187 * "HL_1_relu"."NEUR_1_2" + -3.29908038122 * "HL_1_relu"."NEUR_1_3" + -1.34185590683 AS "NEUR_2_1", 10.6514619196 * "HL_1_relu"."NEUR_1_1" + 43.5654620419 * "HL_1_relu"."NEUR_1_2" + 18.6164069613 * "HL_1_relu"."NEUR_1_3" + -41.1487959253 AS "NEUR_2_2", -7.93223755304 * "HL_1_relu"."NEUR_1_1" + -8.21581469664 * "HL_1_relu"."NEUR_1_2" + -31.88597837 * "HL_1_relu"."NEUR_1_3" + -6.33917204347 AS "NEUR_2_3", -1.70899815956 * "HL_1_relu"."NEUR_1_1" + -0.504739437765 * "HL_1_relu"."NEUR_1_2" + -0.710187622528 * "HL_1_relu"."NEUR_1_3" + -0.888381315504 AS "NEUR_2_4", 15.7842801381 * "HL_1_relu"."NEUR_1_1" + -14.9498160912 * "HL_1_relu"."NEUR_1_2" + 36.528917888 * "HL_1_relu"."NEUR_1_3" + 3.88448887387 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -3.67967222822 * "HL_2_relu"."NEUR_2_1" + -0.0317516343309 * "HL_2_relu"."NEUR_2_2" + -8.45786270709 * "HL_2_relu"."NEUR_2_3" + 0.69446875448 * "HL_2_relu"."NEUR_2_4" + 0.0515228887243 * "HL_2_relu"."NEUR_2_5" + 58.678264864 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"