-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_160] <= 0.40055692195892334) THEN CASE WHEN ([ADS].[Feature_327] <= -1.5349757671356201) THEN 2 ELSE 3 END ELSE CASE WHEN ([ADS].[Feature_38] <= 0.9892604351043701) THEN 5 ELSE 6 END END AS node_id_2 
FROM [BinaryClass_500] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0.0] AS [Proba_0.0], [Values].[LogProba_0.0] AS [LogProba_0.0], [Values].[Proba_1.0] AS [Proba_1.0], [Values].[LogProba_1.0] AS [LogProba_1.0], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'Feature_160' AS feature, 0.40055692195892334 AS threshold, 15 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.32 AS [Proba_0.0], -1.13943428319 AS [LogProba_0.0], 0.68 AS [Proba_1.0], -0.385662480812 AS [LogProba_1.0], 1 AS [Decision], 0.68 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, 'Feature_327' AS feature, -1.5349757671356201 AS threshold, 11 AS count, 1 AS depth, 0 AS parent_id, 0.0625 AS [Proba_0.0], -2.77258872224 AS [LogProba_0.0], 0.9375 AS [Proba_1.0], -0.0645385211376 AS [LogProba_1.0], 1 AS [Decision], 0.9375 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 1 AS parent_id, 1.0 AS [Proba_0.0], 0.0 AS [LogProba_0.0], 0.0 AS [Proba_1.0], -1.79769313486231e+308 AS [LogProba_1.0], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, 'Feature_38' AS feature, 0.9892604351043701 AS threshold, 4 AS count, 1 AS depth, 0 AS parent_id, 0.7777777777777778 AS [Proba_0.0], -0.251314428281 AS [LogProba_0.0], 0.2222222222222222 AS [Proba_1.0], -1.50407739678 AS [LogProba_1.0], 0 AS [Decision], 0.777777777778 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, 4 AS parent_id, 1.0 AS [Proba_0.0], 0.0 AS [LogProba_0.0], 0.0 AS [Proba_1.0], -1.79769313486231e+308 AS [LogProba_1.0], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 4 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_0.0] AS [Proba_0.0], [DT_node_data].[LogProba_0.0] AS [LogProba_0.0], [DT_node_data].[Proba_1.0] AS [Proba_1.0], [DT_node_data].[LogProba_1.0] AS [LogProba_1.0], [DT_node_data].[Decision] AS [Decision], [DT_node_data].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[RF_Tree_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], [DT_Output].[Proba_0.0] AS [Proba_0], [DT_Output].[LogProba_0.0] AS [LogProba_0], CAST(NULL AS FLOAT) AS [Score_1], [DT_Output].[Proba_1.0] AS [Proba_1], [DT_Output].[LogProba_1.0] AS [LogProba_1] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_396] <= 0.9952250719070435) THEN CASE WHEN ([ADS].[Feature_377] <= 0.11302942782640457) THEN 2 ELSE CASE WHEN ([ADS].[Feature_66] <= 0.1436973214149475) THEN 4 ELSE 5 END END ELSE CASE WHEN ([ADS].[Feature_338] <= -1.3596491813659668) THEN 7 ELSE 8 END END AS node_id_2 
FROM [BinaryClass_500] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0.0] AS [Proba_0.0], [Values].[LogProba_0.0] AS [LogProba_0.0], [Values].[Proba_1.0] AS [Proba_1.0], [Values].[LogProba_1.0] AS [LogProba_1.0], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'Feature_396' AS feature, 0.9952250719070435 AS threshold, 16 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.36 AS [Proba_0.0], -1.02165124753 AS [LogProba_0.0], 0.64 AS [Proba_1.0], -0.446287102628 AS [LogProba_1.0], 1 AS [Decision], 0.64 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, 'Feature_377' AS feature, 0.11302942782640457 AS threshold, 12 AS count, 1 AS depth, 0 AS parent_id, 0.16666666666666666 AS [Proba_0.0], -1.79175946923 AS [LogProba_0.0], 0.8333333333333334 AS [Proba_1.0], -0.182321556794 AS [LogProba_1.0], 1 AS [Decision], 0.833333333333 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 3 AS node_id, 'Feature_66' AS feature, 0.1436973214149475 AS threshold, 4 AS count, 2 AS depth, 1 AS parent_id, 0.75 AS [Proba_0.0], -0.287682072452 AS [LogProba_0.0], 0.25 AS [Proba_1.0], -1.38629436112 AS [LogProba_1.0], 0 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 3 AS parent_id, 1.0 AS [Proba_0.0], 0.0 AS [LogProba_0.0], 0.0 AS [Proba_1.0], -1.79769313486231e+308 AS [LogProba_1.0], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 3 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, 'Feature_338' AS feature, -1.3596491813659668 AS threshold, 4 AS count, 1 AS depth, 0 AS parent_id, 0.8571428571428571 AS [Proba_0.0], -0.154150679827 AS [LogProba_0.0], 0.14285714285714285 AS [Proba_1.0], -1.94591014906 AS [LogProba_1.0], 0 AS [Decision], 0.857142857143 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 6 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, 6 AS parent_id, 1.0 AS [Proba_0.0], 0.0 AS [LogProba_0.0], 0.0 AS [Proba_1.0], -1.79769313486231e+308 AS [LogProba_1.0], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Proba_0.0] AS [Proba_0.0], [DT_node_data_1].[LogProba_0.0] AS [LogProba_0.0], [DT_node_data_1].[Proba_1.0] AS [Proba_1.0], [DT_node_data_1].[LogProba_1.0] AS [LogProba_1.0], [DT_node_data_1].[Decision] AS [Decision], [DT_node_data_1].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[RF_Tree_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], [DT_Output_1].[Proba_0.0] AS [Proba_0], [DT_Output_1].[LogProba_0.0] AS [LogProba_0], CAST(NULL AS FLOAT) AS [Score_1], [DT_Output_1].[Proba_1.0] AS [Proba_1], [DT_Output_1].[LogProba_1.0] AS [LogProba_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_284] <= -0.2058596909046173) THEN CASE WHEN ([ADS].[Feature_390] <= -0.8105158805847168) THEN 2 ELSE 3 END ELSE 4 END AS node_id_2 
FROM [BinaryClass_500] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0.0] AS [Proba_0.0], [Values].[LogProba_0.0] AS [LogProba_0.0], [Values].[Proba_1.0] AS [Proba_1.0], [Values].[LogProba_1.0] AS [LogProba_1.0], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'Feature_284' AS feature, -0.2058596909046173 AS threshold, 16 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.4 AS [Proba_0.0], -0.916290731874 AS [LogProba_0.0], 0.6 AS [Proba_1.0], -0.510825623766 AS [LogProba_1.0], 1 AS [Decision], 0.6 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, 'Feature_390' AS feature, -0.8105158805847168 AS threshold, 8 AS count, 1 AS depth, 0 AS parent_id, 0.7692307692307693 AS [Proba_0.0], -0.262364264467 AS [LogProba_0.0], 0.23076923076923078 AS [Proba_1.0], -1.46633706879 AS [LogProba_1.0], 0 AS [Decision], 0.769230769231 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 2 AS depth, 1 AS parent_id, 1.0 AS [Proba_0.0], 0.0 AS [LogProba_0.0], 0.0 AS [Proba_1.0], -1.79769313486231e+308 AS [LogProba_1.0], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 1 AS depth, 0 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Proba_0.0] AS [Proba_0.0], [DT_node_data_2].[LogProba_0.0] AS [LogProba_0.0], [DT_node_data_2].[Proba_1.0] AS [Proba_1.0], [DT_node_data_2].[LogProba_1.0] AS [LogProba_1.0], [DT_node_data_2].[Decision] AS [Decision], [DT_node_data_2].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[RF_Tree_2] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], [DT_Output_2].[Proba_0.0] AS [Proba_0], [DT_Output_2].[LogProba_0.0] AS [LogProba_0], CAST(NULL AS FLOAT) AS [Score_1], [DT_Output_2].[Proba_1.0] AS [Proba_1], [DT_Output_2].[LogProba_1.0] AS [LogProba_1] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_183] <= -0.2986082434654236) THEN 1 ELSE CASE WHEN ([ADS].[Feature_301] <= 0.5201951265335083) THEN CASE WHEN ([ADS].[Feature_478] <= -0.7464295029640198) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM [BinaryClass_500] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0.0] AS [Proba_0.0], [Values].[LogProba_0.0] AS [LogProba_0.0], [Values].[Proba_1.0] AS [Proba_1.0], [Values].[LogProba_1.0] AS [LogProba_1.0], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 0 AS node_id, 'Feature_183' AS feature, -0.2986082434654236 AS threshold, 19 AS count, 0 AS depth, CAST(NULL AS INTEGER) AS parent_id, 0.32 AS [Proba_0.0], -1.13943428319 AS [LogProba_0.0], 0.68 AS [Proba_1.0], -0.385662480812 AS [LogProba_1.0], 1 AS [Decision], 0.68 AS [DecisionProba] UNION ALL SELECT 1 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 1 AS depth, 0 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 2 AS node_id, 'Feature_301' AS feature, 0.5201951265335083 AS threshold, 10 AS count, 1 AS depth, 0 AS parent_id, 0.5714285714285714 AS [Proba_0.0], -0.559615787935 AS [LogProba_0.0], 0.42857142857142855 AS [Proba_1.0], -0.847297860387 AS [LogProba_1.0], 0 AS [Decision], 0.571428571429 AS [DecisionProba] UNION ALL SELECT 3 AS node_id, 'Feature_478' AS feature, -0.7464295029640198 AS threshold, 7 AS count, 2 AS depth, 2 AS parent_id, 0.25 AS [Proba_0.0], -1.38629436112 AS [LogProba_0.0], 0.75 AS [Proba_1.0], -0.287682072452 AS [LogProba_1.0], 1 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 3 AS parent_id, 1.0 AS [Proba_0.0], 0.0 AS [LogProba_0.0], 0.0 AS [Proba_1.0], -1.79769313486231e+308 AS [LogProba_1.0], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 3 AS parent_id, 0.0 AS [Proba_0.0], -1.79769313486231e+308 AS [LogProba_0.0], 1.0 AS [Proba_1.0], 0.0 AS [LogProba_1.0], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 2 AS depth, 2 AS parent_id, 1.0 AS [Proba_0.0], 0.0 AS [LogProba_0.0], 0.0 AS [Proba_1.0], -1.79769313486231e+308 AS [LogProba_1.0], 0 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Proba_0.0] AS [Proba_0.0], [DT_node_data_3].[LogProba_0.0] AS [LogProba_0.0], [DT_node_data_3].[Proba_1.0] AS [Proba_1.0], [DT_node_data_3].[LogProba_1.0] AS [LogProba_1.0], [DT_node_data_3].[Decision] AS [Decision], [DT_node_data_3].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[RF_Tree_3] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], [DT_Output_3].[Proba_0.0] AS [Proba_0], [DT_Output_3].[LogProba_0.0] AS [LogProba_0], CAST(NULL AS FLOAT) AS [Score_1], [DT_Output_3].[Proba_1.0] AS [Proba_1], [DT_Output_3].[LogProba_1.0] AS [LogProba_1] 
FROM [DT_Output_3]), 
[Score_Union_CTE] AS 
(SELECT ensemble_score_union.[KEY] AS [KEY], ensemble_score_union.[Score_0] AS [Score_0], ensemble_score_union.[Proba_0] AS [Proba_0], ensemble_score_union.[LogProba_0] AS [LogProba_0], ensemble_score_union.[Score_1] AS [Score_1], ensemble_score_union.[Proba_1] AS [Proba_1], ensemble_score_union.[LogProba_1] AS [LogProba_1] 
FROM (SELECT [RF_Tree_0].[KEY] AS [KEY], [RF_Tree_0].[Score_0] AS [Score_0], [RF_Tree_0].[Proba_0] AS [Proba_0], [RF_Tree_0].[LogProba_0] AS [LogProba_0], [RF_Tree_0].[Score_1] AS [Score_1], [RF_Tree_0].[Proba_1] AS [Proba_1], [RF_Tree_0].[LogProba_1] AS [LogProba_1] 
FROM [RF_Tree_0] UNION ALL SELECT [RF_Tree_1].[KEY] AS [KEY], [RF_Tree_1].[Score_0] AS [Score_0], [RF_Tree_1].[Proba_0] AS [Proba_0], [RF_Tree_1].[LogProba_0] AS [LogProba_0], [RF_Tree_1].[Score_1] AS [Score_1], [RF_Tree_1].[Proba_1] AS [Proba_1], [RF_Tree_1].[LogProba_1] AS [LogProba_1] 
FROM [RF_Tree_1] UNION ALL SELECT [RF_Tree_2].[KEY] AS [KEY], [RF_Tree_2].[Score_0] AS [Score_0], [RF_Tree_2].[Proba_0] AS [Proba_0], [RF_Tree_2].[LogProba_0] AS [LogProba_0], [RF_Tree_2].[Score_1] AS [Score_1], [RF_Tree_2].[Proba_1] AS [Proba_1], [RF_Tree_2].[LogProba_1] AS [LogProba_1] 
FROM [RF_Tree_2] UNION ALL SELECT [RF_Tree_3].[KEY] AS [KEY], [RF_Tree_3].[Score_0] AS [Score_0], [RF_Tree_3].[Proba_0] AS [Proba_0], [RF_Tree_3].[LogProba_0] AS [LogProba_0], [RF_Tree_3].[Score_1] AS [Score_1], [RF_Tree_3].[Proba_1] AS [Proba_1], [RF_Tree_3].[LogProba_1] AS [LogProba_1] 
FROM [RF_Tree_3]) AS ensemble_score_union), 
[RF_AVG_Scores] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Score_0] AS [Score_0], [T].[Proba_0] AS [Proba_0], [T].[LogProba_0] AS [LogProba_0], [T].[Score_1] AS [Score_1], [T].[Proba_1] AS [Proba_1], [T].[LogProba_1] AS [LogProba_1] 
FROM (SELECT [Score_Union_CTE].[KEY] AS [KEY], avg([Score_Union_CTE].[Score_0]) AS [Score_0], avg([Score_Union_CTE].[Proba_0]) AS [Proba_0], avg([Score_Union_CTE].[LogProba_0]) AS [LogProba_0], avg([Score_Union_CTE].[Score_1]) AS [Score_1], avg([Score_Union_CTE].[Proba_1]) AS [Proba_1], avg([Score_Union_CTE].[LogProba_1]) AS [LogProba_1] 
FROM [Score_Union_CTE] GROUP BY [Score_Union_CTE].[KEY]) AS [T]), 
orig_cte AS 
(SELECT [RF_AVG_Scores].[KEY] AS [KEY], [RF_AVG_Scores].[Score_0] AS [Score_0], [RF_AVG_Scores].[Score_1] AS [Score_1], [RF_AVG_Scores].[Proba_0] AS [Proba_0], [RF_AVG_Scores].[Proba_1] AS [Proba_1], [RF_AVG_Scores].[LogProba_0] AS [LogProba_0], [RF_AVG_Scores].[LogProba_1] AS [LogProba_1], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM [RF_AVG_Scores]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], min(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte