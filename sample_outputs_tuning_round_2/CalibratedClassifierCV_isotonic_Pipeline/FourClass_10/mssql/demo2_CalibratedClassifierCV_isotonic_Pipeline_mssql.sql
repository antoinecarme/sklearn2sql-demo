-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.00390337446303 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.61522322157 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.0427962369143 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.77098195589 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.433007336249 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.0424956965794 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.298090801198 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.146722415073 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.0174694238466 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.115073314156 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.00390337446303) / 0.979506064018 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.61522322157) / 1.39008072362 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.0427962369143) / 1.49626851359 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.77098195589) / 2.33335610601 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.433007336249) / 1.40297577726 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.0424956965794) / 0.955809107687 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.298090801198) / 1.01701318072 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.146722415073) / 1.60079853993 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.0174694238466) / 1.14872963617 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.115073314156) / 0.969091185734 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
[DT_node_lookup] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.0912456214427948) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -1.0915334224700928) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 0.055714450776576996) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.9628250598907471) THEN 5 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= 0.42813172936439514) THEN 7 ELSE 8 END END ELSE 9 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.13469922542572021) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.8707321286201477) THEN 12 ELSE 13 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.8647207021713257) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= -1.7593052387237549) THEN 16 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_7 <= 1.9231358766555786) THEN 18 ELSE 19 END END ELSE 20 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 4 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 6 AS parent_id, 0.2 AS [Proba_0], -1.60943791243 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.8 AS [Proba_2], -0.223143551314 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 0.8 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 6 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 3 AS depth, 3 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 11 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 11 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 15 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 5 AS depth, 17 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.875 AS [Proba_1], -0.133531392625 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.125 AS [Proba_3], -2.07944154168 AS [LogProba_3], 1 AS [Decision], 0.875 AS [DecisionProba] UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 17 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 14 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Proba_0] AS [Proba_0], [DT_node_data].[LogProba_0] AS [LogProba_0], [DT_node_data].[Proba_1] AS [Proba_1], [DT_node_data].[LogProba_1] AS [LogProba_1], [DT_node_data].[Proba_2] AS [Proba_2], [DT_node_data].[LogProba_2] AS [LogProba_2], [DT_node_data].[Proba_3] AS [Proba_3], [DT_node_data].[LogProba_3] AS [LogProba_3], [DT_node_data].[Decision] AS [Decision], [DT_node_data].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
calibration_base_estimator_0 AS 
(SELECT [DT_Output].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [DT_Output].[Proba_0] AS [Proba_0], [DT_Output].[Proba_1] AS [Proba_1], [DT_Output].[Proba_2] AS [Proba_2], [DT_Output].[Proba_3] AS [Proba_3], [DT_Output].[LogProba_0] AS [LogProba_0], [DT_Output].[LogProba_1] AS [LogProba_1], [DT_Output].[LogProba_2] AS [LogProba_2], [DT_Output].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT), [DT_Output].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT), [DT_Output].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT), [DT_Output].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT), [DT_Output].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output]), 
isotonic_cte_0 AS 
(SELECT calibration_base_estimator_0.[KEY] AS [KEY], CASE WHEN (calibration_base_estimator_0.[ScoreOrProba_0] < 0.0) THEN 0.0666666666667 WHEN (calibration_base_estimator_0.[ScoreOrProba_0] < 0.2) THEN (calibration_base_estimator_0.[ScoreOrProba_0] - 0.0) * 2.16666666667 + 0.0666666666667 WHEN (calibration_base_estimator_0.[ScoreOrProba_0] < 1.0) THEN (calibration_base_estimator_0.[ScoreOrProba_0] - 0.2) * 0.3125 + 0.5 ELSE 0.75 END AS [Proba_0], CASE WHEN (calibration_base_estimator_0.[ScoreOrProba_1] < 0.0) THEN 0.133333333333 WHEN (calibration_base_estimator_0.[ScoreOrProba_1] < 0.875) THEN (calibration_base_estimator_0.[ScoreOrProba_1] - 0.0) * 0.419047619048 + 0.133333333333 ELSE 0.5 END AS [Proba_1], CASE WHEN (calibration_base_estimator_0.[ScoreOrProba_2] < 0.0) THEN 0.0882352941176 WHEN (calibration_base_estimator_0.[ScoreOrProba_2] < 0.8) THEN (calibration_base_estimator_0.[ScoreOrProba_2] - 0.0) * 0.0 + 0.0882352941176 WHEN (calibration_base_estimator_0.[ScoreOrProba_2] < 1.0) THEN (calibration_base_estimator_0.[ScoreOrProba_2] - 0.8) * 4.55882352941 + 0.0882352941176 ELSE 1.0 END AS [Proba_2], CASE WHEN (calibration_base_estimator_0.[ScoreOrProba_3] < 0.0) THEN 0.0625 WHEN (calibration_base_estimator_0.[ScoreOrProba_3] < 0.125) THEN (calibration_base_estimator_0.[ScoreOrProba_3] - 0.0) * 0.0 + 0.0625 WHEN (calibration_base_estimator_0.[ScoreOrProba_3] < 1.0) THEN (calibration_base_estimator_0.[ScoreOrProba_3] - 0.125) * 0.744897959184 + 0.0625 ELSE 0.714285714286 END AS [Proba_3] 
FROM calibration_base_estimator_0), 
[Normalized_Probas] AS 
(SELECT isotonic_cte_0.[KEY] AS [KEY], isotonic_cte_0.[Proba_0] / (isotonic_cte_0.[Proba_0] + isotonic_cte_0.[Proba_1] + isotonic_cte_0.[Proba_2] + isotonic_cte_0.[Proba_3]) AS [Proba_0], isotonic_cte_0.[Proba_1] / (isotonic_cte_0.[Proba_0] + isotonic_cte_0.[Proba_1] + isotonic_cte_0.[Proba_2] + isotonic_cte_0.[Proba_3]) AS [Proba_1], isotonic_cte_0.[Proba_2] / (isotonic_cte_0.[Proba_0] + isotonic_cte_0.[Proba_1] + isotonic_cte_0.[Proba_2] + isotonic_cte_0.[Proba_3]) AS [Proba_2], isotonic_cte_0.[Proba_3] / (isotonic_cte_0.[Proba_0] + isotonic_cte_0.[Proba_1] + isotonic_cte_0.[Proba_2] + isotonic_cte_0.[Proba_3]) AS [Proba_3] 
FROM isotonic_cte_0), 
[DT_node_lookup_1] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.05717501789331436) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 0.037758152931928635) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= -1.213514804840088) THEN 3 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -1.966012716293335) THEN 5 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 2.119138240814209) THEN 7 ELSE 8 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -1.2971596717834473) THEN 10 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= -1.7257757186889648) THEN 12 ELSE 13 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 0.20309582352638245) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.02690359205007553) THEN 16 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.2743743360042572) THEN 18 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.6807283759117126) THEN 20 ELSE 21 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= -1.5937905311584473) THEN 23 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= -0.7875761985778809) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_8 <= -0.6242193579673767) THEN 26 ELSE 27 END ELSE 28 END END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 2 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 5 AS depth, 6 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 6 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 9 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 11 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 4 AS depth, 11 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 15 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 4 AS depth, 17 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 5 AS depth, 19 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.3333333333333333 AS [Proba_1], -1.09861228867 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.6666666666666666 AS [Proba_3], -0.405465108108 AS [LogProba_3], 3 AS [Decision], 0.666666666667 AS [DecisionProba] UNION ALL SELECT 21 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 5 AS depth, 19 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.3333333333333333 AS [Proba_1], -1.09861228867 AS [LogProba_1], 0.6666666666666666 AS [Proba_2], -0.405465108108 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 0.666666666667 AS [DecisionProba] UNION ALL SELECT 23 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 22 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 26 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 25 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 27 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 25 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 28 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 4 AS depth, 24 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Proba_0] AS [Proba_0], [DT_node_data_1].[LogProba_0] AS [LogProba_0], [DT_node_data_1].[Proba_1] AS [Proba_1], [DT_node_data_1].[LogProba_1] AS [LogProba_1], [DT_node_data_1].[Proba_2] AS [Proba_2], [DT_node_data_1].[LogProba_2] AS [LogProba_2], [DT_node_data_1].[Proba_3] AS [Proba_3], [DT_node_data_1].[LogProba_3] AS [LogProba_3], [DT_node_data_1].[Decision] AS [Decision], [DT_node_data_1].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
calibration_base_estimator_1 AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [DT_Output_1].[Proba_0] AS [Proba_0], [DT_Output_1].[Proba_1] AS [Proba_1], [DT_Output_1].[Proba_2] AS [Proba_2], [DT_Output_1].[Proba_3] AS [Proba_3], [DT_Output_1].[LogProba_0] AS [LogProba_0], [DT_Output_1].[LogProba_1] AS [LogProba_1], [DT_Output_1].[LogProba_2] AS [LogProba_2], [DT_Output_1].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT), [DT_Output_1].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT), [DT_Output_1].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT), [DT_Output_1].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT), [DT_Output_1].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_1]), 
isotonic_cte_1 AS 
(SELECT calibration_base_estimator_1.[KEY] AS [KEY], CASE WHEN (calibration_base_estimator_1.[ScoreOrProba_0] < 0.0) THEN 0.0625 WHEN (calibration_base_estimator_1.[ScoreOrProba_0] < 1.0) THEN (calibration_base_estimator_1.[ScoreOrProba_0] - 0.0) * 0.7375 + 0.0625 ELSE 0.8 END AS [Proba_0], CASE WHEN (calibration_base_estimator_1.[ScoreOrProba_1] < 0.0) THEN 0.0 WHEN (calibration_base_estimator_1.[ScoreOrProba_1] < 0.333333333333) THEN (calibration_base_estimator_1.[ScoreOrProba_1] - 0.0) * 1.9 + 0.0 WHEN (calibration_base_estimator_1.[ScoreOrProba_1] < 1.0) THEN (calibration_base_estimator_1.[ScoreOrProba_1] - 0.333333333333) * 0.0 + 0.633333333333 ELSE 0.633333333333 END AS [Proba_1], CASE WHEN (calibration_base_estimator_1.[ScoreOrProba_2] < 0.0) THEN 0.0769230769231 WHEN (calibration_base_estimator_1.[ScoreOrProba_2] < 0.666666666667) THEN (calibration_base_estimator_1.[ScoreOrProba_2] - 0.0) * 0.384615384615 + 0.0769230769231 WHEN (calibration_base_estimator_1.[ScoreOrProba_2] < 1.0) THEN (calibration_base_estimator_1.[ScoreOrProba_2] - 0.666666666667) * 0.8 + 0.333333333333 ELSE 0.6 END AS [Proba_2], CASE WHEN (calibration_base_estimator_1.[ScoreOrProba_3] < 0.0) THEN 0.166666666667 WHEN (calibration_base_estimator_1.[ScoreOrProba_3] < 1.0) THEN (calibration_base_estimator_1.[ScoreOrProba_3] - 0.0) * 0.833333333333 + 0.166666666667 ELSE 1.0 END AS [Proba_3] 
FROM calibration_base_estimator_1), 
[Normalized_Probas_1] AS 
(SELECT isotonic_cte_1.[KEY] AS [KEY], isotonic_cte_1.[Proba_0] / (isotonic_cte_1.[Proba_0] + isotonic_cte_1.[Proba_1] + isotonic_cte_1.[Proba_2] + isotonic_cte_1.[Proba_3]) AS [Proba_0], isotonic_cte_1.[Proba_1] / (isotonic_cte_1.[Proba_0] + isotonic_cte_1.[Proba_1] + isotonic_cte_1.[Proba_2] + isotonic_cte_1.[Proba_3]) AS [Proba_1], isotonic_cte_1.[Proba_2] / (isotonic_cte_1.[Proba_0] + isotonic_cte_1.[Proba_1] + isotonic_cte_1.[Proba_2] + isotonic_cte_1.[Proba_3]) AS [Proba_2], isotonic_cte_1.[Proba_3] / (isotonic_cte_1.[Proba_0] + isotonic_cte_1.[Proba_1] + isotonic_cte_1.[Proba_2] + isotonic_cte_1.[Proba_3]) AS [Proba_3] 
FROM isotonic_cte_1), 
[DT_node_lookup_2] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.053778067231178284) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -1.148135781288147) THEN 2 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.19233238697052002) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.12061124294996262) THEN 5 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.42041534185409546) THEN 7 ELSE 8 END END ELSE 9 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.23792332410812378) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -0.5790218114852905) THEN 12 ELSE 13 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= 1.5061954259872437) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= -0.012925520539283752) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= -1.7593052387237549) THEN 17 ELSE 18 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= -0.412983775138855) THEN 20 ELSE 21 END END ELSE 22 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 2 AS depth, 1 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 4 AS depth, 4 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 6 AS parent_id, 0.75 AS [Proba_0], -0.287682072452 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.25 AS [Proba_2], -1.38629436112 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 0.75 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 5 AS depth, 6 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 3 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 11 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 11 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 17 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 16 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 5 AS depth, 16 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 5 AS depth, 19 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 21 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 5 AS depth, 19 AS parent_id, 0.14285714285714285 AS [Proba_0], -1.94591014906 AS [LogProba_0], 0.5714285714285714 AS [Proba_1], -0.559615787935 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.2857142857142857 AS [Proba_3], -1.2527629685 AS [LogProba_3], 1 AS [Decision], 0.571428571429 AS [DecisionProba] UNION ALL SELECT 22 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 14 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Proba_0] AS [Proba_0], [DT_node_data_2].[LogProba_0] AS [LogProba_0], [DT_node_data_2].[Proba_1] AS [Proba_1], [DT_node_data_2].[LogProba_1] AS [LogProba_1], [DT_node_data_2].[Proba_2] AS [Proba_2], [DT_node_data_2].[LogProba_2] AS [LogProba_2], [DT_node_data_2].[Proba_3] AS [Proba_3], [DT_node_data_2].[LogProba_3] AS [LogProba_3], [DT_node_data_2].[Decision] AS [Decision], [DT_node_data_2].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
calibration_base_estimator_2 AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [DT_Output_2].[Proba_0] AS [Proba_0], [DT_Output_2].[Proba_1] AS [Proba_1], [DT_Output_2].[Proba_2] AS [Proba_2], [DT_Output_2].[Proba_3] AS [Proba_3], [DT_Output_2].[LogProba_0] AS [LogProba_0], [DT_Output_2].[LogProba_1] AS [LogProba_1], [DT_Output_2].[LogProba_2] AS [LogProba_2], [DT_Output_2].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT), [DT_Output_2].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT), [DT_Output_2].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT), [DT_Output_2].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT), [DT_Output_2].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_2]), 
isotonic_cte_2 AS 
(SELECT calibration_base_estimator_2.[KEY] AS [KEY], CASE WHEN (calibration_base_estimator_2.[ScoreOrProba_0] < 0.0) THEN 0.0454545454545 WHEN (calibration_base_estimator_2.[ScoreOrProba_0] < 0.142857142857) THEN (calibration_base_estimator_2.[ScoreOrProba_0] - 0.0) * 0.0 + 0.0454545454545 WHEN (calibration_base_estimator_2.[ScoreOrProba_0] < 0.75) THEN (calibration_base_estimator_2.[ScoreOrProba_0] - 0.142857142857) * 1.07807486631 + 0.0454545454545 WHEN (calibration_base_estimator_2.[ScoreOrProba_0] < 1.0) THEN (calibration_base_estimator_2.[ScoreOrProba_0] - 0.75) * 0.0 + 0.7 ELSE 0.7 END AS [Proba_0], CASE WHEN (calibration_base_estimator_2.[ScoreOrProba_1] < 0.0) THEN 0.142857142857 WHEN (calibration_base_estimator_2.[ScoreOrProba_1] < 0.571428571429) THEN (calibration_base_estimator_2.[ScoreOrProba_1] - 0.0) * 0.916666666667 + 0.142857142857 WHEN (calibration_base_estimator_2.[ScoreOrProba_1] < 1.0) THEN (calibration_base_estimator_2.[ScoreOrProba_1] - 0.571428571429) * 0.0 + 0.666666666667 ELSE 0.666666666667 END AS [Proba_1], CASE WHEN (calibration_base_estimator_2.[ScoreOrProba_2] < 0.0) THEN 0.133333333333 WHEN (calibration_base_estimator_2.[ScoreOrProba_2] < 0.25) THEN (calibration_base_estimator_2.[ScoreOrProba_2] - 0.0) * 0.0 + 0.133333333333 WHEN (calibration_base_estimator_2.[ScoreOrProba_2] < 1.0) THEN (calibration_base_estimator_2.[ScoreOrProba_2] - 0.25) * 0.266666666667 + 0.133333333333 ELSE 0.333333333333 END AS [Proba_2], CASE WHEN (calibration_base_estimator_2.[ScoreOrProba_3] < 0.0) THEN 0.0833333333333 WHEN (calibration_base_estimator_2.[ScoreOrProba_3] < 0.285714285714) THEN (calibration_base_estimator_2.[ScoreOrProba_3] - 0.0) * 0.0 + 0.0833333333333 WHEN (calibration_base_estimator_2.[ScoreOrProba_3] < 1.0) THEN (calibration_base_estimator_2.[ScoreOrProba_3] - 0.285714285714) * 0.723333333333 + 0.0833333333333 ELSE 0.6 END AS [Proba_3] 
FROM calibration_base_estimator_2), 
[Normalized_Probas_2] AS 
(SELECT isotonic_cte_2.[KEY] AS [KEY], isotonic_cte_2.[Proba_0] / (isotonic_cte_2.[Proba_0] + isotonic_cte_2.[Proba_1] + isotonic_cte_2.[Proba_2] + isotonic_cte_2.[Proba_3]) AS [Proba_0], isotonic_cte_2.[Proba_1] / (isotonic_cte_2.[Proba_0] + isotonic_cte_2.[Proba_1] + isotonic_cte_2.[Proba_2] + isotonic_cte_2.[Proba_3]) AS [Proba_1], isotonic_cte_2.[Proba_2] / (isotonic_cte_2.[Proba_0] + isotonic_cte_2.[Proba_1] + isotonic_cte_2.[Proba_2] + isotonic_cte_2.[Proba_3]) AS [Proba_2], isotonic_cte_2.[Proba_3] / (isotonic_cte_2.[Proba_0] + isotonic_cte_2.[Proba_1] + isotonic_cte_2.[Proba_2] + isotonic_cte_2.[Proba_3]) AS [Proba_3] 
FROM isotonic_cte_2), 
[DT_node_lookup_3] AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 0.150100976228714) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= -0.6293138265609741) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_11 <= 0.21739888191223145) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= -0.8093550205230713) THEN 4 ELSE 5 END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_3 <= -1.766975998878479) THEN 7 ELSE 8 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_6 <= 0.23468829691410065) THEN 10 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= 1.0432679653167725) THEN 12 ELSE 13 END END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_5 <= 0.17407895624637604) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_4 <= -1.496924638748169) THEN 16 ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_2 <= -2.2014365196228027) THEN 18 ELSE 19 END END ELSE CASE WHEN ([ADS_sca_2_OUT].scaler_10 <= 0.8858284950256348) THEN CASE WHEN ([ADS_sca_2_OUT].scaler_9 <= 1.9481966495513916) THEN 22 ELSE 23 END ELSE 24 END END END AS node_id_2 
FROM [ADS_sca_2_OUT]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Proba_0] AS [Proba_0], [Values].[LogProba_0] AS [LogProba_0], [Values].[Proba_1] AS [Proba_1], [Values].[LogProba_1] AS [LogProba_1], [Values].[Proba_2] AS [Proba_2], [Values].[LogProba_2] AS [LogProba_2], [Values].[Proba_3] AS [Proba_3], [Values].[LogProba_3] AS [LogProba_3], [Values].[Decision] AS [Decision], [Values].[DecisionProba] AS [DecisionProba] 
FROM (SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 6 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 4 AS depth, 6 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, 9 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 4 AS depth, 11 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 11 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 1.0 AS [Proba_3], 0.0 AS [LogProba_3], 3 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 15 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 17 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 4 AS depth, 17 AS parent_id, 1.0 AS [Proba_0], 0.0 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 0 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 22 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 4 AS depth, 21 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 1.0 AS [Proba_1], 0.0 AS [LogProba_1], 0.0 AS [Proba_2], -1.79769313486231e+308 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 1 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 23 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 21 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba] UNION ALL SELECT 24 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 20 AS parent_id, 0.0 AS [Proba_0], -1.79769313486231e+308 AS [LogProba_0], 0.0 AS [Proba_1], -1.79769313486231e+308 AS [LogProba_1], 1.0 AS [Proba_2], 0.0 AS [LogProba_2], 0.0 AS [Proba_3], -1.79769313486231e+308 AS [LogProba_3], 2 AS [Decision], 1.0 AS [DecisionProba]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Proba_0] AS [Proba_0], [DT_node_data_3].[LogProba_0] AS [LogProba_0], [DT_node_data_3].[Proba_1] AS [Proba_1], [DT_node_data_3].[LogProba_1] AS [LogProba_1], [DT_node_data_3].[Proba_2] AS [Proba_2], [DT_node_data_3].[LogProba_2] AS [LogProba_2], [DT_node_data_3].[Proba_3] AS [Proba_3], [DT_node_data_3].[LogProba_3] AS [LogProba_3], [DT_node_data_3].[Decision] AS [Decision], [DT_node_data_3].[DecisionProba] AS [DecisionProba] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
calibration_base_estimator_3 AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [DT_Output_3].[Proba_0] AS [Proba_0], [DT_Output_3].[Proba_1] AS [Proba_1], [DT_Output_3].[Proba_2] AS [Proba_2], [DT_Output_3].[Proba_3] AS [Proba_3], [DT_Output_3].[LogProba_0] AS [LogProba_0], [DT_Output_3].[LogProba_1] AS [LogProba_1], [DT_Output_3].[LogProba_2] AS [LogProba_2], [DT_Output_3].[LogProba_3] AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba], coalesce(CAST(NULL AS FLOAT), [DT_Output_3].[Proba_0]) AS [ScoreOrProba_0], coalesce(CAST(NULL AS FLOAT), [DT_Output_3].[Proba_1]) AS [ScoreOrProba_1], coalesce(CAST(NULL AS FLOAT), [DT_Output_3].[Proba_2]) AS [ScoreOrProba_2], coalesce(CAST(NULL AS FLOAT), [DT_Output_3].[Proba_3]) AS [ScoreOrProba_3] 
FROM [DT_Output_3]), 
isotonic_cte_3 AS 
(SELECT calibration_base_estimator_3.[KEY] AS [KEY], CASE WHEN (calibration_base_estimator_3.[ScoreOrProba_0] < 0.0) THEN 0.0769230769231 WHEN (calibration_base_estimator_3.[ScoreOrProba_0] < 1.0) THEN (calibration_base_estimator_3.[ScoreOrProba_0] - 0.0) * 0.423076923077 + 0.0769230769231 ELSE 0.5 END AS [Proba_0], CASE WHEN (calibration_base_estimator_3.[ScoreOrProba_1] < 0.0) THEN 0.153846153846 WHEN (calibration_base_estimator_3.[ScoreOrProba_1] < 1.0) THEN (calibration_base_estimator_3.[ScoreOrProba_1] - 0.0) * 0.346153846154 + 0.153846153846 ELSE 0.5 END AS [Proba_1], CASE WHEN (calibration_base_estimator_3.[ScoreOrProba_2] < 0.0) THEN 0.1875 WHEN (calibration_base_estimator_3.[ScoreOrProba_2] < 1.0) THEN (calibration_base_estimator_3.[ScoreOrProba_2] - 0.0) * 0.479166666667 + 0.1875 ELSE 0.666666666667 END AS [Proba_2], CASE WHEN (calibration_base_estimator_3.[ScoreOrProba_3] < 0.0) THEN 0.133333333333 WHEN (calibration_base_estimator_3.[ScoreOrProba_3] < 1.0) THEN (calibration_base_estimator_3.[ScoreOrProba_3] - 0.0) * 0.616666666667 + 0.133333333333 ELSE 0.75 END AS [Proba_3] 
FROM calibration_base_estimator_3), 
[Normalized_Probas_3] AS 
(SELECT isotonic_cte_3.[KEY] AS [KEY], isotonic_cte_3.[Proba_0] / (isotonic_cte_3.[Proba_0] + isotonic_cte_3.[Proba_1] + isotonic_cte_3.[Proba_2] + isotonic_cte_3.[Proba_3]) AS [Proba_0], isotonic_cte_3.[Proba_1] / (isotonic_cte_3.[Proba_0] + isotonic_cte_3.[Proba_1] + isotonic_cte_3.[Proba_2] + isotonic_cte_3.[Proba_3]) AS [Proba_1], isotonic_cte_3.[Proba_2] / (isotonic_cte_3.[Proba_0] + isotonic_cte_3.[Proba_1] + isotonic_cte_3.[Proba_2] + isotonic_cte_3.[Proba_3]) AS [Proba_2], isotonic_cte_3.[Proba_3] / (isotonic_cte_3.[Proba_0] + isotonic_cte_3.[Proba_1] + isotonic_cte_3.[Proba_2] + isotonic_cte_3.[Proba_3]) AS [Proba_3] 
FROM isotonic_cte_3), 
[Score_Union_CTE] AS 
(SELECT ensemble_score_union.[KEY] AS [KEY], ensemble_score_union.[Proba_0] AS [Proba_0], ensemble_score_union.[Proba_1] AS [Proba_1], ensemble_score_union.[Proba_2] AS [Proba_2], ensemble_score_union.[Proba_3] AS [Proba_3] 
FROM (SELECT [Normalized_Probas].[KEY] AS [KEY], [Normalized_Probas].[Proba_0] AS [Proba_0], [Normalized_Probas].[Proba_1] AS [Proba_1], [Normalized_Probas].[Proba_2] AS [Proba_2], [Normalized_Probas].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas] UNION ALL SELECT [Normalized_Probas_1].[KEY] AS [KEY], [Normalized_Probas_1].[Proba_0] AS [Proba_0], [Normalized_Probas_1].[Proba_1] AS [Proba_1], [Normalized_Probas_1].[Proba_2] AS [Proba_2], [Normalized_Probas_1].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_1] UNION ALL SELECT [Normalized_Probas_2].[KEY] AS [KEY], [Normalized_Probas_2].[Proba_0] AS [Proba_0], [Normalized_Probas_2].[Proba_1] AS [Proba_1], [Normalized_Probas_2].[Proba_2] AS [Proba_2], [Normalized_Probas_2].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_2] UNION ALL SELECT [Normalized_Probas_3].[KEY] AS [KEY], [Normalized_Probas_3].[Proba_0] AS [Proba_0], [Normalized_Probas_3].[Proba_1] AS [Proba_1], [Normalized_Probas_3].[Proba_2] AS [Proba_2], [Normalized_Probas_3].[Proba_3] AS [Proba_3] 
FROM [Normalized_Probas_3]) AS ensemble_score_union), 
[Calibrate_AVG_Proba] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Proba_0] AS [Proba_0], [T].[Proba_1] AS [Proba_1], [T].[Proba_2] AS [Proba_2], [T].[Proba_3] AS [Proba_3] 
FROM (SELECT [Score_Union_CTE].[KEY] AS [KEY], avg([Score_Union_CTE].[Proba_0]) AS [Proba_0], avg([Score_Union_CTE].[Proba_1]) AS [Proba_1], avg([Score_Union_CTE].[Proba_2]) AS [Proba_2], avg([Score_Union_CTE].[Proba_3]) AS [Proba_3] 
FROM [Score_Union_CTE] GROUP BY [Score_Union_CTE].[KEY]) AS [T]), 
orig_cte AS 
(SELECT [Calibrate_AVG_Proba].[KEY] AS [KEY], CAST(NULL AS FLOAT) AS [Score_0], CAST(NULL AS FLOAT) AS [Score_1], CAST(NULL AS FLOAT) AS [Score_2], CAST(NULL AS FLOAT) AS [Score_3], [Calibrate_AVG_Proba].[Proba_0] AS [Proba_0], [Calibrate_AVG_Proba].[Proba_1] AS [Proba_1], [Calibrate_AVG_Proba].[Proba_2] AS [Proba_2], [Calibrate_AVG_Proba].[Proba_3] AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_0], CAST(NULL AS FLOAT) AS [LogProba_1], CAST(NULL AS FLOAT) AS [LogProba_2], CAST(NULL AS FLOAT) AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM [Calibrate_AVG_Proba]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], min(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte