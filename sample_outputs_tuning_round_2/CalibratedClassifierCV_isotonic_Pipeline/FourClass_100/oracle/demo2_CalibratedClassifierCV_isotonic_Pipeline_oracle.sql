-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.00653574012116 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.16767827126 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN -0.0551470417358 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.00152116930519 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0314276019104 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.0261796831787 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.0112547131221 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN -0.0168862118009 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.0273427029645 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.163701278848 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.0354122507389 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN -0.0285291234756 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN -0.0267494449896 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 0.386019822911 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.0162145257314 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.227237750778 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.566373456694 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.277696410616 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.00599432681235 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN -0.0218525344697 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN -0.028375425917 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN 0.0151643232963 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 0.0174691345488 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 0.0349390944943 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN -0.144361607634 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN 0.146104677444 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN 0.0676158423738 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN -0.30836845608 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 0.952575301761 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN -0.0581338391011 ELSE "ADS"."Feature_29" END AS impter_31, CASE WHEN ("ADS"."Feature_30" IS NULL) THEN -0.0131244127149 ELSE "ADS"."Feature_30" END AS impter_32, CASE WHEN ("ADS"."Feature_31" IS NULL) THEN -0.337551254331 ELSE "ADS"."Feature_31" END AS impter_33, CASE WHEN ("ADS"."Feature_32" IS NULL) THEN 0.0390265145932 ELSE "ADS"."Feature_32" END AS impter_34, CASE WHEN ("ADS"."Feature_33" IS NULL) THEN -0.0402939442132 ELSE "ADS"."Feature_33" END AS impter_35, CASE WHEN ("ADS"."Feature_34" IS NULL) THEN -0.171611885737 ELSE "ADS"."Feature_34" END AS impter_36, CASE WHEN ("ADS"."Feature_35" IS NULL) THEN 0.0126477868686 ELSE "ADS"."Feature_35" END AS impter_37, CASE WHEN ("ADS"."Feature_36" IS NULL) THEN 0.00519373530851 ELSE "ADS"."Feature_36" END AS impter_38, CASE WHEN ("ADS"."Feature_37" IS NULL) THEN -0.0171608765769 ELSE "ADS"."Feature_37" END AS impter_39, CASE WHEN ("ADS"."Feature_38" IS NULL) THEN 0.0450361559979 ELSE "ADS"."Feature_38" END AS impter_40, CASE WHEN ("ADS"."Feature_39" IS NULL) THEN -0.120358200226 ELSE "ADS"."Feature_39" END AS impter_41, CASE WHEN ("ADS"."Feature_40" IS NULL) THEN -0.176403922822 ELSE "ADS"."Feature_40" END AS impter_42, CASE WHEN ("ADS"."Feature_41" IS NULL) THEN -0.015157075927 ELSE "ADS"."Feature_41" END AS impter_43, CASE WHEN ("ADS"."Feature_42" IS NULL) THEN -0.306874019058 ELSE "ADS"."Feature_42" END AS impter_44, CASE WHEN ("ADS"."Feature_43" IS NULL) THEN -0.0403545806931 ELSE "ADS"."Feature_43" END AS impter_45, CASE WHEN ("ADS"."Feature_44" IS NULL) THEN -0.0078998151246 ELSE "ADS"."Feature_44" END AS impter_46, CASE WHEN ("ADS"."Feature_45" IS NULL) THEN 0.00264793225417 ELSE "ADS"."Feature_45" END AS impter_47, CASE WHEN ("ADS"."Feature_46" IS NULL) THEN -0.149210845983 ELSE "ADS"."Feature_46" END AS impter_48, CASE WHEN ("ADS"."Feature_47" IS NULL) THEN 0.248953992369 ELSE "ADS"."Feature_47" END AS impter_49, CASE WHEN ("ADS"."Feature_48" IS NULL) THEN -0.700424397972 ELSE "ADS"."Feature_48" END AS impter_50, CASE WHEN ("ADS"."Feature_49" IS NULL) THEN 0.0255276737501 ELSE "ADS"."Feature_49" END AS impter_51, CASE WHEN ("ADS"."Feature_50" IS NULL) THEN -0.15642138685 ELSE "ADS"."Feature_50" END AS impter_52, CASE WHEN ("ADS"."Feature_51" IS NULL) THEN -0.127838577178 ELSE "ADS"."Feature_51" END AS impter_53, CASE WHEN ("ADS"."Feature_52" IS NULL) THEN -0.369879523833 ELSE "ADS"."Feature_52" END AS impter_54, CASE WHEN ("ADS"."Feature_53" IS NULL) THEN 0.0410547455889 ELSE "ADS"."Feature_53" END AS impter_55, CASE WHEN ("ADS"."Feature_54" IS NULL) THEN -0.100474275314 ELSE "ADS"."Feature_54" END AS impter_56, CASE WHEN ("ADS"."Feature_55" IS NULL) THEN -0.131272886536 ELSE "ADS"."Feature_55" END AS impter_57, CASE WHEN ("ADS"."Feature_56" IS NULL) THEN 0.368578431365 ELSE "ADS"."Feature_56" END AS impter_58, CASE WHEN ("ADS"."Feature_57" IS NULL) THEN 0.222812465206 ELSE "ADS"."Feature_57" END AS impter_59, CASE WHEN ("ADS"."Feature_58" IS NULL) THEN -0.0062740876184 ELSE "ADS"."Feature_58" END AS impter_60, CASE WHEN ("ADS"."Feature_59" IS NULL) THEN 0.0142685989578 ELSE "ADS"."Feature_59" END AS impter_61, CASE WHEN ("ADS"."Feature_60" IS NULL) THEN -0.0285455115739 ELSE "ADS"."Feature_60" END AS impter_62, CASE WHEN ("ADS"."Feature_61" IS NULL) THEN -0.43749183185 ELSE "ADS"."Feature_61" END AS impter_63, CASE WHEN ("ADS"."Feature_62" IS NULL) THEN -0.368992780588 ELSE "ADS"."Feature_62" END AS impter_64, CASE WHEN ("ADS"."Feature_63" IS NULL) THEN 0.00116904181932 ELSE "ADS"."Feature_63" END AS impter_65, CASE WHEN ("ADS"."Feature_64" IS NULL) THEN -0.0115648737176 ELSE "ADS"."Feature_64" END AS impter_66, CASE WHEN ("ADS"."Feature_65" IS NULL) THEN -0.0435876998969 ELSE "ADS"."Feature_65" END AS impter_67, CASE WHEN ("ADS"."Feature_66" IS NULL) THEN -0.161863413739 ELSE "ADS"."Feature_66" END AS impter_68, CASE WHEN ("ADS"."Feature_67" IS NULL) THEN -0.017272641535 ELSE "ADS"."Feature_67" END AS impter_69, CASE WHEN ("ADS"."Feature_68" IS NULL) THEN -0.364030220369 ELSE "ADS"."Feature_68" END AS impter_70, CASE WHEN ("ADS"."Feature_69" IS NULL) THEN -0.0492730065024 ELSE "ADS"."Feature_69" END AS impter_71, CASE WHEN ("ADS"."Feature_70" IS NULL) THEN -0.0154685126573 ELSE "ADS"."Feature_70" END AS impter_72, CASE WHEN ("ADS"."Feature_71" IS NULL) THEN -0.191629393513 ELSE "ADS"."Feature_71" END AS impter_73, CASE WHEN ("ADS"."Feature_72" IS NULL) THEN 0.0237828303216 ELSE "ADS"."Feature_72" END AS impter_74, CASE WHEN ("ADS"."Feature_73" IS NULL) THEN 0.0204547996726 ELSE "ADS"."Feature_73" END AS impter_75, CASE WHEN ("ADS"."Feature_74" IS NULL) THEN -0.173355346593 ELSE "ADS"."Feature_74" END AS impter_76, CASE WHEN ("ADS"."Feature_75" IS NULL) THEN 0.0275822882458 ELSE "ADS"."Feature_75" END AS impter_77, CASE WHEN ("ADS"."Feature_76" IS NULL) THEN -0.0154523366782 ELSE "ADS"."Feature_76" END AS impter_78, CASE WHEN ("ADS"."Feature_77" IS NULL) THEN -0.0425555457733 ELSE "ADS"."Feature_77" END AS impter_79, CASE WHEN ("ADS"."Feature_78" IS NULL) THEN -0.00942573658037 ELSE "ADS"."Feature_78" END AS impter_80, CASE WHEN ("ADS"."Feature_79" IS NULL) THEN 0.00742367748933 ELSE "ADS"."Feature_79" END AS impter_81, CASE WHEN ("ADS"."Feature_80" IS NULL) THEN 0.0498533264368 ELSE "ADS"."Feature_80" END AS impter_82, CASE WHEN ("ADS"."Feature_81" IS NULL) THEN 0.0279602211794 ELSE "ADS"."Feature_81" END AS impter_83, CASE WHEN ("ADS"."Feature_82" IS NULL) THEN -0.00527050248758 ELSE "ADS"."Feature_82" END AS impter_84, CASE WHEN ("ADS"."Feature_83" IS NULL) THEN -0.0533936117742 ELSE "ADS"."Feature_83" END AS impter_85, CASE WHEN ("ADS"."Feature_84" IS NULL) THEN 0.171620332886 ELSE "ADS"."Feature_84" END AS impter_86, CASE WHEN ("ADS"."Feature_85" IS NULL) THEN 0.0372119970074 ELSE "ADS"."Feature_85" END AS impter_87, CASE WHEN ("ADS"."Feature_86" IS NULL) THEN 0.0184349733304 ELSE "ADS"."Feature_86" END AS impter_88, CASE WHEN ("ADS"."Feature_87" IS NULL) THEN 0.560521632617 ELSE "ADS"."Feature_87" END AS impter_89, CASE WHEN ("ADS"."Feature_88" IS NULL) THEN -0.052850462919 ELSE "ADS"."Feature_88" END AS impter_90, CASE WHEN ("ADS"."Feature_89" IS NULL) THEN 0.0793902173424 ELSE "ADS"."Feature_89" END AS impter_91, CASE WHEN ("ADS"."Feature_90" IS NULL) THEN -2.08866716312 ELSE "ADS"."Feature_90" END AS impter_92, CASE WHEN ("ADS"."Feature_91" IS NULL) THEN -1.0831020639 ELSE "ADS"."Feature_91" END AS impter_93, CASE WHEN ("ADS"."Feature_92" IS NULL) THEN -0.304702362821 ELSE "ADS"."Feature_92" END AS impter_94, CASE WHEN ("ADS"."Feature_93" IS NULL) THEN -0.935426259564 ELSE "ADS"."Feature_93" END AS impter_95, CASE WHEN ("ADS"."Feature_94" IS NULL) THEN -0.098411219927 ELSE "ADS"."Feature_94" END AS impter_96, CASE WHEN ("ADS"."Feature_95" IS NULL) THEN -0.53165348436 ELSE "ADS"."Feature_95" END AS impter_97, CASE WHEN ("ADS"."Feature_96" IS NULL) THEN 0.0141274221378 ELSE "ADS"."Feature_96" END AS impter_98, CASE WHEN ("ADS"."Feature_97" IS NULL) THEN -0.0126312774127 ELSE "ADS"."Feature_97" END AS impter_99, CASE WHEN ("ADS"."Feature_98" IS NULL) THEN 0.0312868812331 ELSE "ADS"."Feature_98" END AS impter_100, CASE WHEN ("ADS"."Feature_99" IS NULL) THEN -0.450390515385 ELSE "ADS"."Feature_99" END AS impter_101 
FROM "FourClass_100" "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.00653574012116) / 0.985821711919 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.16767827126) / 4.17893277906 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - -0.0551470417358) / 4.08515606391 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.00152116930519) / 1.05839942213 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.0314276019104) / 0.958502901404 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.0261796831787) / 0.993854807715 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.0112547131221) / 0.995945599637 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - -0.0168862118009) / 1.04542967803 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.0273427029645) / 4.33135674182 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - -0.163701278848) / 4.45889820593 AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS FLOAT) - 0.0354122507389) / 1.03661648781 AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS FLOAT) - -0.0285291234756) / 1.00467620555 AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS FLOAT) - -0.0267494449896) / 0.99962402671 AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS FLOAT) - 0.386019822911) / 4.14480478652 AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS FLOAT) - 0.0162145257314) / 1.01728129667 AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS FLOAT) - 0.227237750778) / 4.36711262018 AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS FLOAT) - 0.566373456694) / 4.11815688405 AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS FLOAT) - 0.277696410616) / 4.01432897572 AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS FLOAT) - 0.00599432681235) / 0.972439502321 AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS FLOAT) - -0.0218525344697) / 0.985687517726 AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS FLOAT) - -0.028375425917) / 1.02310346987 AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS FLOAT) - 0.0151643232963) / 4.35314516918 AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS FLOAT) - 0.0174691345488) / 1.00180565427 AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS FLOAT) - 0.0349390944943) / 0.992721649768 AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS FLOAT) - -0.144361607634) / 4.46739766886 AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS FLOAT) - 0.146104677444) / 4.10734277856 AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS FLOAT) - 0.0676158423738) / 4.27764303646 AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS FLOAT) - -0.30836845608) / 4.03019568626 AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS FLOAT) - 0.952575301761) / 4.01730262302 AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS FLOAT) - -0.0581338391011) / 4.03353195749 AS scaler_31, (CAST("ADS_imp_1_OUT".impter_32 AS FLOAT) - -0.0131244127149) / 0.955198781566 AS scaler_32, (CAST("ADS_imp_1_OUT".impter_33 AS FLOAT) - -0.337551254331) / 4.10657168041 AS scaler_33, (CAST("ADS_imp_1_OUT".impter_34 AS FLOAT) - 0.0390265145932) / 0.990359225337 AS scaler_34, (CAST("ADS_imp_1_OUT".impter_35 AS FLOAT) - -0.0402939442132) / 1.01529611676 AS scaler_35, (CAST("ADS_imp_1_OUT".impter_36 AS FLOAT) - -0.171611885737) / 4.17922956302 AS scaler_36, (CAST("ADS_imp_1_OUT".impter_37 AS FLOAT) - 0.0126477868686) / 1.00783076186 AS scaler_37, (CAST("ADS_imp_1_OUT".impter_38 AS FLOAT) - 0.00519373530851) / 4.29733218367 AS scaler_38, (CAST("ADS_imp_1_OUT".impter_39 AS FLOAT) - -0.0171608765769) / 1.01737885571 AS scaler_39, (CAST("ADS_imp_1_OUT".impter_40 AS FLOAT) - 0.0450361559979) / 3.90428113679 AS scaler_40, (CAST("ADS_imp_1_OUT".impter_41 AS FLOAT) - -0.120358200226) / 3.98402860362 AS scaler_41, (CAST("ADS_imp_1_OUT".impter_42 AS FLOAT) - -0.176403922822) / 4.06931463762 AS scaler_42, (CAST("ADS_imp_1_OUT".impter_43 AS FLOAT) - -0.015157075927) / 1.02915738955 AS scaler_43, (CAST("ADS_imp_1_OUT".impter_44 AS FLOAT) - -0.306874019058) / 4.34791251221 AS scaler_44, (CAST("ADS_imp_1_OUT".impter_45 AS FLOAT) - -0.0403545806931) / 4.05064377381 AS scaler_45, (CAST("ADS_imp_1_OUT".impter_46 AS FLOAT) - -0.0078998151246) / 1.00637547659 AS scaler_46, (CAST("ADS_imp_1_OUT".impter_47 AS FLOAT) - 0.00264793225417) / 1.00214477559 AS scaler_47, (CAST("ADS_imp_1_OUT".impter_48 AS FLOAT) - -0.149210845983) / 4.10340200989 AS scaler_48, (CAST("ADS_imp_1_OUT".impter_49 AS FLOAT) - 0.248953992369) / 4.23220038033 AS scaler_49, (CAST("ADS_imp_1_OUT".impter_50 AS FLOAT) - -0.700424397972) / 4.22076654199 AS scaler_50, (CAST("ADS_imp_1_OUT".impter_51 AS FLOAT) - 0.0255276737501) / 1.02067409273 AS scaler_51, (CAST("ADS_imp_1_OUT".impter_52 AS FLOAT) - -0.15642138685) / 4.07831067125 AS scaler_52, (CAST("ADS_imp_1_OUT".impter_53 AS FLOAT) - -0.127838577178) / 4.24723680136 AS scaler_53, (CAST("ADS_imp_1_OUT".impter_54 AS FLOAT) - -0.369879523833) / 4.03767584848 AS scaler_54, (CAST("ADS_imp_1_OUT".impter_55 AS FLOAT) - 0.0410547455889) / 4.44557137144 AS scaler_55, (CAST("ADS_imp_1_OUT".impter_56 AS FLOAT) - -0.100474275314) / 4.04583682644 AS scaler_56, (CAST("ADS_imp_1_OUT".impter_57 AS FLOAT) - -0.131272886536) / 4.2566060095 AS scaler_57, (CAST("ADS_imp_1_OUT".impter_58 AS FLOAT) - 0.368578431365) / 4.04294690881 AS scaler_58, (CAST("ADS_imp_1_OUT".impter_59 AS FLOAT) - 0.222812465206) / 4.25239806876 AS scaler_59, (CAST("ADS_imp_1_OUT".impter_60 AS FLOAT) - -0.0062740876184) / 1.0131754299 AS scaler_60, (CAST("ADS_imp_1_OUT".impter_61 AS FLOAT) - 0.0142685989578) / 0.975232456173 AS scaler_61, (CAST("ADS_imp_1_OUT".impter_62 AS FLOAT) - -0.0285455115739) / 0.996017661218 AS scaler_62, (CAST("ADS_imp_1_OUT".impter_63 AS FLOAT) - -0.43749183185) / 4.23875925656 AS scaler_63, (CAST("ADS_imp_1_OUT".impter_64 AS FLOAT) - -0.368992780588) / 4.18274187652 AS scaler_64, (CAST("ADS_imp_1_OUT".impter_65 AS FLOAT) - 0.00116904181932) / 1.04333652499 AS scaler_65, (CAST("ADS_imp_1_OUT".impter_66 AS FLOAT) - -0.0115648737176) / 4.08150429415 AS scaler_66, (CAST("ADS_imp_1_OUT".impter_67 AS FLOAT) - -0.0435876998969) / 1.05866451901 AS scaler_67, (CAST("ADS_imp_1_OUT".impter_68 AS FLOAT) - -0.161863413739) / 4.25966623517 AS scaler_68, (CAST("ADS_imp_1_OUT".impter_69 AS FLOAT) - -0.017272641535) / 1.01030583344 AS scaler_69, (CAST("ADS_imp_1_OUT".impter_70 AS FLOAT) - -0.364030220369) / 4.23529048916 AS scaler_70, (CAST("ADS_imp_1_OUT".impter_71 AS FLOAT) - -0.0492730065024) / 4.31080236531 AS scaler_71, (CAST("ADS_imp_1_OUT".impter_72 AS FLOAT) - -0.0154685126573) / 1.01066080153 AS scaler_72, (CAST("ADS_imp_1_OUT".impter_73 AS FLOAT) - -0.191629393513) / 4.11604496555 AS scaler_73, (CAST("ADS_imp_1_OUT".impter_74 AS FLOAT) - 0.0237828303216) / 0.997185935238 AS scaler_74, (CAST("ADS_imp_1_OUT".impter_75 AS FLOAT) - 0.0204547996726) / 0.964047487679 AS scaler_75, (CAST("ADS_imp_1_OUT".impter_76 AS FLOAT) - -0.173355346593) / 4.26884008329 AS scaler_76, (CAST("ADS_imp_1_OUT".impter_77 AS FLOAT) - 0.0275822882458) / 1.00287363715 AS scaler_77, (CAST("ADS_imp_1_OUT".impter_78 AS FLOAT) - -0.0154523366782) / 0.951796972878 AS scaler_78, (CAST("ADS_imp_1_OUT".impter_79 AS FLOAT) - -0.0425555457733) / 1.02604198012 AS scaler_79, (CAST("ADS_imp_1_OUT".impter_80 AS FLOAT) - -0.00942573658037) / 0.981547933163 AS scaler_80, (CAST("ADS_imp_1_OUT".impter_81 AS FLOAT) - 0.00742367748933) / 1.0171447638 AS scaler_81, (CAST("ADS_imp_1_OUT".impter_82 AS FLOAT) - 0.0498533264368) / 1.01381217519 AS scaler_82, (CAST("ADS_imp_1_OUT".impter_83 AS FLOAT) - 0.0279602211794) / 1.00493310879 AS scaler_83, (CAST("ADS_imp_1_OUT".impter_84 AS FLOAT) - -0.00527050248758) / 1.02332528491 AS scaler_84, (CAST("ADS_imp_1_OUT".impter_85 AS FLOAT) - -0.0533936117742) / 1.00458919199 AS scaler_85, (CAST("ADS_imp_1_OUT".impter_86 AS FLOAT) - 0.171620332886) / 4.24884427578 AS scaler_86, (CAST("ADS_imp_1_OUT".impter_87 AS FLOAT) - 0.0372119970074) / 4.25404858308 AS scaler_87, (CAST("ADS_imp_1_OUT".impter_88 AS FLOAT) - 0.0184349733304) / 3.94972884089 AS scaler_88, (CAST("ADS_imp_1_OUT".impter_89 AS FLOAT) - 0.560521632617) / 4.33133243898 AS scaler_89, (CAST("ADS_imp_1_OUT".impter_90 AS FLOAT) - -0.052850462919) / 1.03583971022 AS scaler_90, (CAST("ADS_imp_1_OUT".impter_91 AS FLOAT) - 0.0793902173424) / 0.969876446028 AS scaler_91, (CAST("ADS_imp_1_OUT".impter_92 AS FLOAT) - -2.08866716312) / 15.3022152465 AS scaler_92, (CAST("ADS_imp_1_OUT".impter_93 AS FLOAT) - -1.0831020639) / 4.36710902027 AS scaler_93, (CAST("ADS_imp_1_OUT".impter_94 AS FLOAT) - -0.304702362821) / 4.20429236235 AS scaler_94, (CAST("ADS_imp_1_OUT".impter_95 AS FLOAT) - -0.935426259564) / 15.3570057667 AS scaler_95, (CAST("ADS_imp_1_OUT".impter_96 AS FLOAT) - -0.098411219927) / 0.952484869944 AS scaler_96, (CAST("ADS_imp_1_OUT".impter_97 AS FLOAT) - -0.53165348436) / 3.97700071824 AS scaler_97, (CAST("ADS_imp_1_OUT".impter_98 AS FLOAT) - 0.0141274221378) / 0.987925892541 AS scaler_98, (CAST("ADS_imp_1_OUT".impter_99 AS FLOAT) - -0.0126312774127) / 1.01519644483 AS scaler_99, (CAST("ADS_imp_1_OUT".impter_100 AS FLOAT) - 0.0312868812331) / 0.989361802421 AS scaler_100, (CAST("ADS_imp_1_OUT".impter_101 AS FLOAT) - -0.450390515385) / 4.24470032509 AS scaler_101 
FROM "ADS_imp_1_OUT"), 
"DT_node_lookup" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_66 <= -0.24924510717391968) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_44 <= -1.0560027360916138) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= -0.14678408205509186) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_69 <= 0.8121598958969116) THEN 4 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_79 <= 1.725360631942749) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_82 <= 0.9090859889984131) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_57 <= 1.8674782514572144) THEN 10 ELSE 11 END ELSE 12 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_15 <= 0.08239147812128067) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_86 <= -1.1821835041046143) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_17 <= -0.5267306566238403) THEN 16 ELSE 17 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_54 <= 0.033376701176166534) THEN 19 ELSE 20 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_29 <= 0.48954296112060547) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_101 <= -0.9183049201965332) THEN 23 ELSE 24 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_13 <= 0.7606967687606812) THEN 26 ELSE 27 END END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_70 <= -0.37230780720710754) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_42 <= 0.09141433238983154) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_35 <= -0.5338416695594788) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_36 <= 0.42982882261276245) THEN 32 ELSE 33 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_7 <= -0.06956683099269867) THEN 35 ELSE 36 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_6 <= 0.8506834506988525) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_21 <= -0.8930176496505737) THEN 39 ELSE 40 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_13 <= -0.289751261472702) THEN 42 ELSE 43 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_18 <= -0.42070767283439636) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_56 <= 0.8955790996551514) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_100 <= 0.8959568738937378) THEN 47 ELSE 48 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_92 <= -0.10282931476831436) THEN 50 ELSE 51 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_89 <= -0.2907974123954773) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_96 <= -0.6204873323440552) THEN 54 ELSE 55 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_29 <= 0.9688534140586853) THEN 57 ELSE 58 END END END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision", "Values"."DecisionProba" AS "DecisionProba" 
FROM (SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 5 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 5 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 5 AS depth, 9 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 9 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 4 AS depth, 8 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 15 AS parent_id, 0.2 AS "Proba_0", -1.60943791243 AS "LogProba_0", 0.4 AS "Proba_1", -0.916290731874 AS "LogProba_1", 0.4 AS "Proba_2", -0.916290731874 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 0.4 AS "DecisionProba" FROM DUAL UNION ALL SELECT 17 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 5 AS depth, 15 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 57 AS count, 5 AS depth, 18 AS parent_id, 0.3508771929824561 AS "Proba_0", -1.04731899428 AS "LogProba_0", 0.19298245614035087 AS "Proba_1", -1.64515599504 AS "LogProba_1", 0.2982456140350877 AS "Proba_2", -1.20983792378 AS "LogProba_2", 0.15789473684210525 AS "Proba_3", -1.8458266905 AS "LogProba_3", 0 AS "Decision", 0.350877192982 AS "DecisionProba" FROM DUAL UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 40 AS count, 5 AS depth, 18 AS parent_id, 0.8 AS "Proba_0", -0.223143551314 AS "LogProba_0", 0.125 AS "Proba_1", -2.07944154168 AS "LogProba_1", 0.075 AS "Proba_2", -2.59026716545 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 0.8 AS "DecisionProba" FROM DUAL UNION ALL SELECT 23 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 5 AS depth, 22 AS parent_id, 0.14285714285714285 AS "Proba_0", -1.94591014906 AS "LogProba_0", 0.07142857142857142 AS "Proba_1", -2.63905732962 AS "LogProba_1", 0.7142857142857143 AS "Proba_2", -0.336472236621 AS "LogProba_2", 0.07142857142857142 AS "Proba_3", -2.63905732962 AS "LogProba_3", 2 AS "Decision", 0.714285714286 AS "DecisionProba" FROM DUAL UNION ALL SELECT 24 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 60 AS count, 5 AS depth, 22 AS parent_id, 0.36666666666666664 AS "Proba_0", -1.00330210886 AS "LogProba_0", 0.4166666666666667 AS "Proba_1", -0.875468737354 AS "LogProba_1", 0.1 AS "Proba_2", -2.30258509299 AS "LogProba_2", 0.11666666666666667 AS "Proba_3", -2.14843441317 AS "LogProba_3", 1 AS "Decision", 0.416666666667 AS "DecisionProba" FROM DUAL UNION ALL SELECT 26 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 23 AS count, 5 AS depth, 25 AS parent_id, 0.043478260869565216 AS "Proba_0", -3.13549421593 AS "LogProba_0", 0.9130434782608695 AS "Proba_1", -0.0909717782057 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.043478260869565216 AS "Proba_3", -3.13549421593 AS "LogProba_3", 1 AS "Decision", 0.913043478261 AS "DecisionProba" FROM DUAL UNION ALL SELECT 27 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 25 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.8 AS "Proba_3", -0.223143551314 AS "LogProba_3", 3 AS "Decision", 0.8 AS "DecisionProba" FROM DUAL UNION ALL SELECT 32 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 5 AS depth, 31 AS parent_id, 0.0625 AS "Proba_0", -2.77258872224 AS "LogProba_0", 0.1875 AS "Proba_1", -1.67397643357 AS "LogProba_1", 0.125 AS "Proba_2", -2.07944154168 AS "LogProba_2", 0.625 AS "Proba_3", -0.470003629246 AS "LogProba_3", 3 AS "Decision", 0.625 AS "DecisionProba" FROM DUAL UNION ALL SELECT 33 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 31 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 35 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 5 AS depth, 34 AS parent_id, 0.125 AS "Proba_0", -2.07944154168 AS "LogProba_0", 0.375 AS "Proba_1", -0.980829253012 AS "LogProba_1", 0.375 AS "Proba_2", -0.980829253012 AS "LogProba_2", 0.125 AS "Proba_3", -2.07944154168 AS "LogProba_3", 1 AS "Decision", 0.375 AS "DecisionProba" FROM DUAL UNION ALL SELECT 36 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 5 AS depth, 34 AS parent_id, 0.058823529411764705 AS "Proba_0", -2.83321334406 AS "LogProba_0", 0.8823529411764706 AS "Proba_1", -0.125163142954 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.058823529411764705 AS "Proba_3", -2.83321334406 AS "LogProba_3", 1 AS "Decision", 0.882352941176 AS "DecisionProba" FROM DUAL UNION ALL SELECT 39 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 5 AS depth, 38 AS parent_id, 0.1 AS "Proba_0", -2.30258509299 AS "LogProba_0", 0.1 AS "Proba_1", -2.30258509299 AS "LogProba_1", 0.4 AS "Proba_2", -0.916290731874 AS "LogProba_2", 0.4 AS "Proba_3", -0.916290731874 AS "LogProba_3", 2 AS "Decision", 0.4 AS "DecisionProba" FROM DUAL UNION ALL SELECT 40 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 5 AS depth, 38 AS parent_id, 0.7045454545454546 AS "Proba_0", -0.350202429433 AS "LogProba_0", 0.022727272727272728 AS "Proba_1", -3.78418963392 AS "LogProba_1", 0.18181818181818182 AS "Proba_2", -1.70474809224 AS "LogProba_2", 0.09090909090909091 AS "Proba_3", -2.3978952728 AS "LogProba_3", 0 AS "Decision", 0.704545454545 AS "DecisionProba" FROM DUAL UNION ALL SELECT 42 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 41 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 43 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 41 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.75 AS "Proba_1", -0.287682072452 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 1 AS "Decision", 0.75 AS "DecisionProba" FROM DUAL UNION ALL SELECT 47 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 59 AS count, 5 AS depth, 46 AS parent_id, 0.11864406779661017 AS "Proba_0", -2.13162729485 AS "LogProba_0", 0.05084745762711865 AS "Proba_1", -2.97892515524 AS "LogProba_1", 0.1016949152542373 AS "Proba_2", -2.28577797468 AS "LogProba_2", 0.7288135593220338 AS "Proba_3", -0.316337328212 AS "LogProba_3", 3 AS "Decision", 0.728813559322 AS "DecisionProba" FROM DUAL UNION ALL SELECT 48 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 46 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0.8 AS "Proba_2", -0.223143551314 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 0.8 AS "DecisionProba" FROM DUAL UNION ALL SELECT 50 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 49 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 51 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 49 AS parent_id, 0.75 AS "Proba_0", -0.287682072452 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 0.75 AS "DecisionProba" FROM DUAL UNION ALL SELECT 54 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 5 AS depth, 53 AS parent_id, 0.07692307692307693 AS "Proba_0", -2.56494935746 AS "LogProba_0", 0.15384615384615385 AS "Proba_1", -1.8718021769 AS "LogProba_1", 0.23076923076923078 AS "Proba_2", -1.46633706879 AS "LogProba_2", 0.5384615384615384 AS "Proba_3", -0.619039208406 AS "LogProba_3", 3 AS "Decision", 0.538461538462 AS "DecisionProba" FROM DUAL UNION ALL SELECT 55 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 53 AS count, 5 AS depth, 53 AS parent_id, 0.03773584905660377 AS "Proba_0", -3.27714473299 AS "LogProba_0", 0.11320754716981132 AS "Proba_1", -2.17853244432 AS "LogProba_1", 0.7735849056603774 AS "Proba_2", -0.256719846848 AS "LogProba_2", 0.07547169811320754 AS "Proba_3", -2.58399755243 AS "LogProba_3", 2 AS "Decision", 0.77358490566 AS "DecisionProba" FROM DUAL UNION ALL SELECT 57 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 71 AS count, 5 AS depth, 56 AS parent_id, 0.18309859154929578 AS "Proba_0", -1.69773051958 AS "LogProba_0", 0.2112676056338028 AS "Proba_1", -1.55462967594 AS "LogProba_1", 0.323943661971831 AS "Proba_2", -1.12718566111 AS "LogProba_2", 0.28169014084507044 AS "Proba_3", -1.26694760349 AS "LogProba_3", 2 AS "Decision", 0.323943661972 AS "DecisionProba" FROM DUAL UNION ALL SELECT 58 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 5 AS depth, 56 AS parent_id, 0.05555555555555555 AS "Proba_0", -2.8903717579 AS "LogProba_0", 0.1111111111111111 AS "Proba_1", -2.19722457734 AS "LogProba_1", 0.05555555555555555 AS "Proba_2", -2.8903717579 AS "LogProba_2", 0.7777777777777778 AS "Proba_3", -0.251314428281 AS "LogProba_3", 3 AS "Decision", 0.777777777778 AS "DecisionProba" FROM DUAL) "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".node_id AS node_id, "DT_node_data".feature AS feature, "DT_node_data".threshold AS threshold, "DT_node_data".count AS count, "DT_node_data".depth AS depth, "DT_node_data".parent_id AS parent_id, "DT_node_data"."Proba_0" AS "Proba_0", "DT_node_data"."LogProba_0" AS "LogProba_0", "DT_node_data"."Proba_1" AS "Proba_1", "DT_node_data"."LogProba_1" AS "LogProba_1", "DT_node_data"."Proba_2" AS "Proba_2", "DT_node_data"."LogProba_2" AS "LogProba_2", "DT_node_data"."Proba_3" AS "Proba_3", "DT_node_data"."LogProba_3" AS "LogProba_3", "DT_node_data"."Decision" AS "Decision", "DT_node_data"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".node_id), 
calibration_base_estimator_0 AS 
(SELECT "DT_Output"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output"."Proba_0" AS "Proba_0", "DT_Output"."Proba_1" AS "Proba_1", "DT_Output"."Proba_2" AS "Proba_2", "DT_Output"."Proba_3" AS "Proba_3", "DT_Output"."LogProba_0" AS "LogProba_0", "DT_Output"."LogProba_1" AS "LogProba_1", "DT_Output"."LogProba_2" AS "LogProba_2", "DT_Output"."LogProba_3" AS "LogProba_3", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_1") AS "ScoreOrProba_1", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_2") AS "ScoreOrProba_2", coalesce(CAST(NULL AS FLOAT), "DT_Output"."Proba_3") AS "ScoreOrProba_3" 
FROM "DT_Output"), 
isotonic_cte_0 AS 
(SELECT calibration_base_estimator_0."KEY" AS "KEY", CASE WHEN (calibration_base_estimator_0."ScoreOrProba_0" < 0.0) THEN 0.108752705628 WHEN (calibration_base_estimator_0."ScoreOrProba_0" < 0.0625) THEN (calibration_base_estimator_0."ScoreOrProba_0" - 0.0) * 0.0 + 0.108752705628 WHEN (calibration_base_estimator_0."ScoreOrProba_0" < 0.1) THEN (calibration_base_estimator_0."ScoreOrProba_0" - 0.0625) * 7.10847645455 + 0.108752705628 WHEN (calibration_base_estimator_0."ScoreOrProba_0" < 0.704545454545) THEN (calibration_base_estimator_0."ScoreOrProba_0" - 0.1) * 0.0 + 0.375320572674 WHEN (calibration_base_estimator_0."ScoreOrProba_0" < 0.75) THEN (calibration_base_estimator_0."ScoreOrProba_0" - 0.704545454545) * 5.88580454404 + 0.375320572674 WHEN (calibration_base_estimator_0."ScoreOrProba_0" < 1.0) THEN (calibration_base_estimator_0."ScoreOrProba_0" - 0.75) * 0.0 + 0.642857142857 ELSE 0.642857142857 END AS "Proba_0", CASE WHEN (calibration_base_estimator_0."ScoreOrProba_1" < 0.0) THEN 0.176084198385 WHEN (calibration_base_estimator_0."ScoreOrProba_1" < 0.75) THEN (calibration_base_estimator_0."ScoreOrProba_1" - 0.0) * 0.0 + 0.176084198385 WHEN (calibration_base_estimator_0."ScoreOrProba_1" < 0.882352941176) THEN (calibration_base_estimator_0."ScoreOrProba_1" - 0.75) * 1.41706080412 + 0.176084198385 WHEN (calibration_base_estimator_0."ScoreOrProba_1" < 0.913043478261) THEN (calibration_base_estimator_0."ScoreOrProba_1" - 0.882352941176) * 12.8217532468 + 0.363636363636 WHEN (calibration_base_estimator_0."ScoreOrProba_1" < 1.0) THEN (calibration_base_estimator_0."ScoreOrProba_1" - 0.913043478261) * 0.0 + 0.757142857143 ELSE 0.757142857143 END AS "Proba_1", CASE WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.0) THEN 0.144599303136 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.0555555555556) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.0) * 0.0 + 0.144599303136 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.075) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.0555555555556) * 3.91520510643 + 0.144599303136 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.101694915254) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.075) * 0.0 + 0.220728291317 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.125) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.101694915254) * 4.18473813768 + 0.220728291317 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.4) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.125) * 0.0 + 0.318253968254 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.714285714286) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.4) * 0.0479797979798 + 0.318253968254 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.77358490566) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.714285714286) * 1.75662878788 + 0.333333333333 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 0.8) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.77358490566) * 0.0 + 0.4375 WHEN (calibration_base_estimator_0."ScoreOrProba_2" < 1.0) THEN (calibration_base_estimator_0."ScoreOrProba_2" - 0.8) * 1.14583333333 + 0.4375 ELSE 0.666666666667 END AS "Proba_2", CASE WHEN (calibration_base_estimator_0."ScoreOrProba_3" < 0.0) THEN 0.0934343434343 WHEN (calibration_base_estimator_0."ScoreOrProba_3" < 0.0754716981132) THEN (calibration_base_estimator_0."ScoreOrProba_3" - 0.0) * 0.0 + 0.0934343434343 WHEN (calibration_base_estimator_0."ScoreOrProba_3" < 0.0909090909091) THEN (calibration_base_estimator_0."ScoreOrProba_3" - 0.0754716981132) * 2.04475308642 + 0.0934343434343 WHEN (calibration_base_estimator_0."ScoreOrProba_3" < 0.116666666667) THEN (calibration_base_estimator_0."ScoreOrProba_3" - 0.0909090909091) * 1.49087635054 + 0.125 WHEN (calibration_base_estimator_0."ScoreOrProba_3" < 0.625) THEN (calibration_base_estimator_0."ScoreOrProba_3" - 0.116666666667) * 0.0 + 0.163401360544 WHEN (calibration_base_estimator_0."ScoreOrProba_3" < 0.728813559322) THEN (calibration_base_estimator_0."ScoreOrProba_3" - 0.625) * 1.92470610013 + 0.163401360544 WHEN (calibration_base_estimator_0."ScoreOrProba_3" < 0.8) THEN (calibration_base_estimator_0."ScoreOrProba_3" - 0.728813559322) * 0.0 + 0.363211951447 WHEN (calibration_base_estimator_0."ScoreOrProba_3" < 1.0) THEN (calibration_base_estimator_0."ScoreOrProba_3" - 0.8) * 0.406162464986 + 0.363211951447 ELSE 0.444444444444 END AS "Proba_3" 
FROM calibration_base_estimator_0), 
"Normalized_Probas" AS 
(SELECT isotonic_cte_0."KEY" AS "KEY", isotonic_cte_0."Proba_0" / (isotonic_cte_0."Proba_0" + isotonic_cte_0."Proba_1" + isotonic_cte_0."Proba_2" + isotonic_cte_0."Proba_3") AS "Proba_0", isotonic_cte_0."Proba_1" / (isotonic_cte_0."Proba_0" + isotonic_cte_0."Proba_1" + isotonic_cte_0."Proba_2" + isotonic_cte_0."Proba_3") AS "Proba_1", isotonic_cte_0."Proba_2" / (isotonic_cte_0."Proba_0" + isotonic_cte_0."Proba_1" + isotonic_cte_0."Proba_2" + isotonic_cte_0."Proba_3") AS "Proba_2", isotonic_cte_0."Proba_3" / (isotonic_cte_0."Proba_0" + isotonic_cte_0."Proba_1" + isotonic_cte_0."Proba_2" + isotonic_cte_0."Proba_3") AS "Proba_3" 
FROM isotonic_cte_0), 
"DT_node_lookup_1" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_66 <= -0.2842087745666504) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_4 <= 0.064017653465271) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_15 <= 0.0030692382715642452) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= -0.2625877261161804) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_45 <= 1.4400224685668945) THEN 5 ELSE 6 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_86 <= -1.4708878993988037) THEN 8 ELSE 9 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_59 <= 1.4065744876861572) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_26 <= -0.3025447130203247) THEN 12 ELSE 13 END ELSE 14 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_44 <= 0.5123810768127441) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_52 <= -0.5797653198242188) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_68 <= -0.07408486306667328) THEN 18 ELSE 19 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_89 <= 1.240484356880188) THEN 21 ELSE 22 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_54 <= 0.014273516833782196) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_58 <= -1.0384860038757324) THEN 25 ELSE 26 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_21 <= 0.44157731533050537) THEN 28 ELSE 29 END END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_70 <= -0.6560220718383789) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_42 <= 0.11735302209854126) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_66 <= 1.416921854019165) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_33 <= -0.6961071491241455) THEN 34 ELSE 35 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_100 <= -0.6103659868240356) THEN 37 ELSE 38 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_52 <= 1.1027405261993408) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_2 <= 1.6039469242095947) THEN 41 ELSE 42 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= -0.6617239713668823) THEN 44 ELSE 45 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_89 <= -0.3341265320777893) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_94 <= -0.01307676825672388) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_79 <= 0.2966781258583069) THEN 49 ELSE 50 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_33 <= 1.4203591346740723) THEN 52 ELSE 53 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_62 <= -0.45945605635643005) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_31 <= 1.4359893798828125) THEN 56 ELSE 57 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_97 <= -0.4143097996711731) THEN 59 ELSE 60 END END END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_1" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision", "Values"."DecisionProba" AS "DecisionProba" 
FROM (SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 5 AS depth, 4 AS parent_id, 0.9655172413793104 AS "Proba_0", -0.0350913198113 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.034482758620689655 AS "Proba_2", -3.36729582999 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 0.965517241379 AS "DecisionProba" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 5 AS depth, 4 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.5 AS "Proba_2", -0.69314718056 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 0.5 AS "DecisionProba" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 7 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 34 AS count, 5 AS depth, 7 AS parent_id, 0.4117647058823529 AS "Proba_0", -0.887303195001 AS "LogProba_0", 0.20588235294117646 AS "Proba_1", -1.58045037556 AS "LogProba_1", 0.2647058823529412 AS "Proba_2", -1.32913594728 AS "LogProba_2", 0.11764705882352941 AS "Proba_3", -2.1400661635 AS "LogProba_3", 0 AS "Decision", 0.411764705882 AS "DecisionProba" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 5 AS depth, 11 AS parent_id, 0.5714285714285714 AS "Proba_0", -0.559615787935 AS "LogProba_0", 0.14285714285714285 AS "Proba_1", -1.94591014906 AS "LogProba_1", 0.09523809523809523 AS "Proba_2", -2.35137525716 AS "LogProba_2", 0.19047619047619047 AS "Proba_3", -1.6582280766 AS "LogProba_3", 0 AS "Decision", 0.571428571429 AS "DecisionProba" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 37 AS count, 5 AS depth, 11 AS parent_id, 0.16216216216216217 AS "Proba_0", -1.81915844342 AS "LogProba_0", 0.5135135135135135 AS "Proba_1", -0.666478933478 AS "LogProba_1", 0.1891891891891892 AS "Proba_2", -1.66500776359 AS "LogProba_2", 0.13513513513513514 AS "Proba_3", -2.00148000021 AS "LogProba_3", 1 AS "Decision", 0.513513513514 AS "DecisionProba" FROM DUAL UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 4 AS depth, 10 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 5 AS depth, 17 AS parent_id, 0.09090909090909091 AS "Proba_0", -2.3978952728 AS "LogProba_0", 0.09090909090909091 AS "Proba_1", -2.3978952728 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.8181818181818182 AS "Proba_3", -0.200670695462 AS "LogProba_3", 3 AS "Decision", 0.818181818182 AS "DecisionProba" FROM DUAL UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 11 AS count, 5 AS depth, 17 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.45454545454545453 AS "Proba_1", -0.788457360364 AS "LogProba_1", 0.45454545454545453 AS "Proba_2", -0.788457360364 AS "LogProba_2", 0.09090909090909091 AS "Proba_3", -2.3978952728 AS "LogProba_3", 1 AS "Decision", 0.454545454545 AS "DecisionProba" FROM DUAL UNION ALL SELECT 21 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 49 AS count, 5 AS depth, 20 AS parent_id, 0.10204081632653061 AS "Proba_0", -2.28238238568 AS "LogProba_0", 0.8163265306122449 AS "Proba_1", -0.202940843997 AS "LogProba_1", 0.061224489795918366 AS "Proba_2", -2.79320800944 AS "LogProba_2", 0.02040816326530612 AS "Proba_3", -3.89182029811 AS "LogProba_3", 1 AS "Decision", 0.816326530612 AS "DecisionProba" FROM DUAL UNION ALL SELECT 22 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 20 AS parent_id, 0.5 AS "Proba_0", -0.69314718056 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.5 AS "Proba_2", -0.69314718056 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 0.5 AS "DecisionProba" FROM DUAL UNION ALL SELECT 25 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 24 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 26 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 16 AS count, 5 AS depth, 24 AS parent_id, 0.1875 AS "Proba_0", -1.67397643357 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.75 AS "Proba_2", -0.287682072452 AS "LogProba_2", 0.0625 AS "Proba_3", -2.77258872224 AS "LogProba_3", 2 AS "Decision", 0.75 AS "DecisionProba" FROM DUAL UNION ALL SELECT 28 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 27 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 29 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 5 AS depth, 27 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 34 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 5 AS depth, 33 AS parent_id, 0.2 AS "Proba_0", -1.60943791243 AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0.5 AS "Proba_2", -0.69314718056 AS "LogProba_2", 0.1 AS "Proba_3", -2.30258509299 AS "LogProba_3", 2 AS "Decision", 0.5 AS "DecisionProba" FROM DUAL UNION ALL SELECT 35 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 5 AS depth, 33 AS parent_id, 0.14285714285714285 AS "Proba_0", -1.94591014906 AS "LogProba_0", 0.6857142857142857 AS "Proba_1", -0.377294231141 AS "LogProba_1", 0.05714285714285714 AS "Proba_2", -2.86220088093 AS "LogProba_2", 0.11428571428571428 AS "Proba_3", -2.16905370037 AS "LogProba_3", 1 AS "Decision", 0.685714285714 AS "DecisionProba" FROM DUAL UNION ALL SELECT 37 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 5 AS depth, 36 AS parent_id, 0.3333333333333333 AS "Proba_0", -1.09861228867 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.6666666666666666 AS "Proba_2", -0.405465108108 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 0.666666666667 AS "DecisionProba" FROM DUAL UNION ALL SELECT 38 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 36 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 41 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 40 AS count, 5 AS depth, 40 AS parent_id, 0.7 AS "Proba_0", -0.356674943939 AS "LogProba_0", 0.125 AS "Proba_1", -2.07944154168 AS "LogProba_1", 0.075 AS "Proba_2", -2.59026716545 AS "LogProba_2", 0.1 AS "Proba_3", -2.30258509299 AS "LogProba_3", 0 AS "Decision", 0.7 AS "DecisionProba" FROM DUAL UNION ALL SELECT 42 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 5 AS depth, 40 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 44 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 43 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 45 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 5 AS depth, 43 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 49 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 5 AS depth, 48 AS parent_id, 0.08333333333333333 AS "Proba_0", -2.48490664979 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.041666666666666664 AS "Proba_2", -3.17805383035 AS "LogProba_2", 0.625 AS "Proba_3", -0.470003629246 AS "LogProba_3", 3 AS "Decision", 0.625 AS "DecisionProba" FROM DUAL UNION ALL SELECT 50 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 5 AS depth, 48 AS parent_id, 0.06666666666666667 AS "Proba_0", -2.7080502011 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.6 AS "Proba_2", -0.510825623766 AS "LogProba_2", 0.3333333333333333 AS "Proba_3", -1.09861228867 AS "LogProba_3", 2 AS "Decision", 0.6 AS "DecisionProba" FROM DUAL UNION ALL SELECT 52 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 45 AS count, 5 AS depth, 51 AS parent_id, 0.044444444444444446 AS "Proba_0", -3.11351530921 AS "LogProba_0", 0.022222222222222223 AS "Proba_1", -3.80666248977 AS "LogProba_1", 0.8444444444444444 AS "Proba_2", -0.169076330044 AS "LogProba_2", 0.08888888888888889 AS "Proba_3", -2.42036812865 AS "LogProba_3", 2 AS "Decision", 0.844444444444 AS "DecisionProba" FROM DUAL UNION ALL SELECT 53 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 51 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.6 AS "Proba_1", -0.510825623766 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.4 AS "Proba_3", -0.916290731874 AS "LogProba_3", 1 AS "Decision", 0.6 AS "DecisionProba" FROM DUAL UNION ALL SELECT 56 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 51 AS count, 5 AS depth, 55 AS parent_id, 0.0784313725490196 AS "Proba_0", -2.5455312716 AS "LogProba_0", 0.11764705882352941 AS "Proba_1", -2.1400661635 AS "LogProba_1", 0.0784313725490196 AS "Proba_2", -2.5455312716 AS "LogProba_2", 0.7254901960784313 AS "Proba_3", -0.32090772008 AS "LogProba_3", 3 AS "Decision", 0.725490196078 AS "DecisionProba" FROM DUAL UNION ALL SELECT 57 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 55 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 59 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 5 AS depth, 58 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.07894736842105263 AS "Proba_1", -2.53897387106 AS "LogProba_1", 0.39473684210526316 AS "Proba_2", -0.929535958624 AS "LogProba_2", 0.5263157894736842 AS "Proba_3", -0.641853886172 AS "LogProba_3", 3 AS "Decision", 0.526315789474 AS "DecisionProba" FROM DUAL UNION ALL SELECT 60 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 78 AS count, 5 AS depth, 58 AS parent_id, 0.2692307692307692 AS "Proba_0", -1.31218638897 AS "LogProba_0", 0.2564102564102564 AS "Proba_1", -1.36097655314 AS "LogProba_1", 0.2564102564102564 AS "Proba_2", -1.36097655314 AS "LogProba_2", 0.21794871794871795 AS "Proba_3", -1.52349548263 AS "LogProba_3", 0 AS "Decision", 0.269230769231 AS "DecisionProba" FROM DUAL) "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".node_id AS node_id, "DT_node_data_1".feature AS feature, "DT_node_data_1".threshold AS threshold, "DT_node_data_1".count AS count, "DT_node_data_1".depth AS depth, "DT_node_data_1".parent_id AS parent_id, "DT_node_data_1"."Proba_0" AS "Proba_0", "DT_node_data_1"."LogProba_0" AS "LogProba_0", "DT_node_data_1"."Proba_1" AS "Proba_1", "DT_node_data_1"."LogProba_1" AS "LogProba_1", "DT_node_data_1"."Proba_2" AS "Proba_2", "DT_node_data_1"."LogProba_2" AS "LogProba_2", "DT_node_data_1"."Proba_3" AS "Proba_3", "DT_node_data_1"."LogProba_3" AS "LogProba_3", "DT_node_data_1"."Decision" AS "Decision", "DT_node_data_1"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".node_id), 
calibration_base_estimator_1 AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_1"."Proba_0" AS "Proba_0", "DT_Output_1"."Proba_1" AS "Proba_1", "DT_Output_1"."Proba_2" AS "Proba_2", "DT_Output_1"."Proba_3" AS "Proba_3", "DT_Output_1"."LogProba_0" AS "LogProba_0", "DT_Output_1"."LogProba_1" AS "LogProba_1", "DT_Output_1"."LogProba_2" AS "LogProba_2", "DT_Output_1"."LogProba_3" AS "LogProba_3", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_1") AS "ScoreOrProba_1", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_2") AS "ScoreOrProba_2", coalesce(CAST(NULL AS FLOAT), "DT_Output_1"."Proba_3") AS "ScoreOrProba_3" 
FROM "DT_Output_1"), 
isotonic_cte_1 AS 
(SELECT calibration_base_estimator_1."KEY" AS "KEY", CASE WHEN (calibration_base_estimator_1."ScoreOrProba_0" < 0.0) THEN 0.108108108108 WHEN (calibration_base_estimator_1."ScoreOrProba_0" < 0.0444444444444) THEN (calibration_base_estimator_1."ScoreOrProba_0" - 0.0) * 0.0 + 0.108108108108 WHEN (calibration_base_estimator_1."ScoreOrProba_0" < 0.0666666666667) THEN (calibration_base_estimator_1."ScoreOrProba_0" - 0.0444444444444) * 3.60477076267 + 0.108108108108 WHEN (calibration_base_estimator_1."ScoreOrProba_0" < 0.2) THEN (calibration_base_estimator_1."ScoreOrProba_0" - 0.0666666666667) * 0.0 + 0.188214125056 WHEN (calibration_base_estimator_1."ScoreOrProba_0" < 0.269230769231) THEN (calibration_base_estimator_1."ScoreOrProba_0" - 0.2) * 0.290610786225 + 0.188214125056 WHEN (calibration_base_estimator_1."ScoreOrProba_0" < 0.411764705882) THEN (calibration_base_estimator_1."ScoreOrProba_0" - 0.269230769231) * 1.68297430083 + 0.208333333333 WHEN (calibration_base_estimator_1."ScoreOrProba_0" < 1.0) THEN (calibration_base_estimator_1."ScoreOrProba_0" - 0.411764705882) * 0.0 + 0.448214285714 ELSE 0.448214285714 END AS "Proba_0", CASE WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.0) THEN 0.0755166931638 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.0909090909091) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.0) * 0.0 + 0.0755166931638 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.117647058824) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.0909090909091) * 2.37012012012 + 0.0755166931638 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.125) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.117647058824) * 0.0 + 0.138888888889 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.142857142857) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.125) * 8.22222222222 + 0.138888888889 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.2) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.142857142857) * 0.199179292929 + 0.285714285714 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.5) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.2) * 0.0 + 0.297095959596 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.513513513514) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.5) * 6.47643745144 + 0.297095959596 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 0.685714285714) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.513513513514) * 0.048589047645 + 0.384615384615 WHEN (calibration_base_estimator_1."ScoreOrProba_1" < 1.0) THEN (calibration_base_estimator_1."ScoreOrProba_1" - 0.685714285714) * 0.0 + 0.39298245614 ELSE 0.39298245614 END AS "Proba_1", CASE WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 0.0) THEN 0.0952380952381 WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 0.0344827586207) THEN (calibration_base_estimator_1."ScoreOrProba_2" - 0.0) * 2.69468900982 + 0.0952380952381 WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 0.264705882353) THEN (calibration_base_estimator_1."ScoreOrProba_2" - 0.0344827586207) * 0.0 + 0.188158405922 WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 0.394736842105) THEN (calibration_base_estimator_1."ScoreOrProba_2" - 0.264705882353) * 0.27201987827 + 0.188158405922 WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 0.5) THEN (calibration_base_estimator_1."ScoreOrProba_2" - 0.394736842105) * 0.0 + 0.223529411765 WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 0.6) THEN (calibration_base_estimator_1."ScoreOrProba_2" - 0.5) * 0.264705882353 + 0.223529411765 WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 0.75) THEN (calibration_base_estimator_1."ScoreOrProba_2" - 0.6) * 1.2962962963 + 0.25 WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 0.844444444444) THEN (calibration_base_estimator_1."ScoreOrProba_2" - 0.75) * 1.91176470588 + 0.444444444444 WHEN (calibration_base_estimator_1."ScoreOrProba_2" < 1.0) THEN (calibration_base_estimator_1."ScoreOrProba_2" - 0.844444444444) * 0.267857142857 + 0.625 ELSE 0.666666666667 END AS "Proba_2", CASE WHEN (calibration_base_estimator_1."ScoreOrProba_3" < 0.0) THEN 0.0944976076555 WHEN (calibration_base_estimator_1."ScoreOrProba_3" < 0.0204081632653) THEN (calibration_base_estimator_1."ScoreOrProba_3" - 0.0) * 0.0 + 0.0944976076555 WHEN (calibration_base_estimator_1."ScoreOrProba_3" < 0.0625) THEN (calibration_base_estimator_1."ScoreOrProba_3" - 0.0204081632653) * 2.35340439111 + 0.0944976076555 WHEN (calibration_base_estimator_1."ScoreOrProba_3" < 0.333333333333) THEN (calibration_base_estimator_1."ScoreOrProba_3" - 0.0625) * 0.0 + 0.193556721057 WHEN (calibration_base_estimator_1."ScoreOrProba_3" < 0.526315789474) THEN (calibration_base_estimator_1."ScoreOrProba_3" - 0.333333333333) * 0.755086166062 + 0.193556721057 WHEN (calibration_base_estimator_1."ScoreOrProba_3" < 0.725490196078) THEN (calibration_base_estimator_1."ScoreOrProba_3" - 0.526315789474) * 0.0 + 0.339275103981 WHEN (calibration_base_estimator_1."ScoreOrProba_3" < 0.818181818182) THEN (calibration_base_estimator_1."ScoreOrProba_3" - 0.725490196078) * 3.73754578755 + 0.339275103981 WHEN (calibration_base_estimator_1."ScoreOrProba_3" < 1.0) THEN (calibration_base_estimator_1."ScoreOrProba_3" - 0.818181818182) * 0.0 + 0.685714285714 ELSE 0.685714285714 END AS "Proba_3" 
FROM calibration_base_estimator_1), 
"Normalized_Probas_1" AS 
(SELECT isotonic_cte_1."KEY" AS "KEY", isotonic_cte_1."Proba_0" / (isotonic_cte_1."Proba_0" + isotonic_cte_1."Proba_1" + isotonic_cte_1."Proba_2" + isotonic_cte_1."Proba_3") AS "Proba_0", isotonic_cte_1."Proba_1" / (isotonic_cte_1."Proba_0" + isotonic_cte_1."Proba_1" + isotonic_cte_1."Proba_2" + isotonic_cte_1."Proba_3") AS "Proba_1", isotonic_cte_1."Proba_2" / (isotonic_cte_1."Proba_0" + isotonic_cte_1."Proba_1" + isotonic_cte_1."Proba_2" + isotonic_cte_1."Proba_3") AS "Proba_2", isotonic_cte_1."Proba_3" / (isotonic_cte_1."Proba_0" + isotonic_cte_1."Proba_1" + isotonic_cte_1."Proba_2" + isotonic_cte_1."Proba_3") AS "Proba_3" 
FROM isotonic_cte_1), 
"DT_node_lookup_2" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_66 <= -0.02145124226808548) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_86 <= -1.3945796489715576) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_40 <= 0.43254974484443665) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_78 <= -1.906510829925537) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= -0.5398409366607666) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_61 <= 0.06785356998443604) THEN 8 ELSE 9 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_56 <= -1.1348893642425537) THEN 11 ELSE 12 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.39106184244155884) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= -0.2625877261161804) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_36 <= -0.3973325490951538) THEN 16 ELSE 17 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_33 <= -0.5141704082489014) THEN 19 ELSE 20 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_17 <= -0.7365139722824097) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_49 <= 1.02558434009552) THEN 23 ELSE 24 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_94 <= -0.5991512537002563) THEN 26 ELSE 27 END END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 0.4994811713695526) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_27 <= -0.1212441474199295) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_36 <= 1.0133931636810303) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_86 <= 0.6027740240097046) THEN 32 ELSE 33 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_34 <= 0.9886136054992676) THEN 35 ELSE 36 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_18 <= -0.5851044654846191) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_54 <= -0.5932556390762329) THEN 39 ELSE 40 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_61 <= 0.2945762276649475) THEN 42 ELSE 43 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_39 <= -0.19500258564949036) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_72 <= 0.13676099479198456) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_89 <= -0.8551962971687317) THEN 47 ELSE 48 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_45 <= 1.001998782157898) THEN 50 ELSE 51 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_18 <= -0.1466597616672516) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_92 <= -0.7608950734138489) THEN 54 ELSE 55 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_90 <= 2.1737446784973145) THEN 57 ELSE 58 END END END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_2" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision", "Values"."DecisionProba" AS "DecisionProba" 
FROM (SELECT 4 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 4 AS depth, 3 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 4 AS depth, 3 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 5 AS depth, 7 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 5 AS depth, 7 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 5 AS depth, 10 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 10 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 5 AS depth, 15 AS parent_id, 0.2692307692307692 AS "Proba_0", -1.31218638897 AS "LogProba_0", 0.46153846153846156 AS "Proba_1", -0.773189888233 AS "LogProba_1", 0.15384615384615385 AS "Proba_2", -1.8718021769 AS "LogProba_2", 0.11538461538461539 AS "Proba_3", -2.15948424935 AS "LogProba_3", 1 AS "Decision", 0.461538461538 AS "DecisionProba" FROM DUAL UNION ALL SELECT 17 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 55 AS count, 5 AS depth, 15 AS parent_id, 0.8181818181818182 AS "Proba_0", -0.200670695462 AS "LogProba_0", 0.12727272727272726 AS "Proba_1", -2.06142303618 AS "LogProba_1", 0.01818181818181818 AS "Proba_2", -4.00733318523 AS "LogProba_2", 0.03636363636363636 AS "Proba_3", -3.31418600467 AS "LogProba_3", 0 AS "Decision", 0.818181818182 AS "DecisionProba" FROM DUAL UNION ALL SELECT 19 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 5 AS depth, 18 AS parent_id, 0.5925925925925926 AS "Proba_0", -0.523248143765 AS "LogProba_0", 0.1111111111111111 AS "Proba_1", -2.19722457734 AS "LogProba_1", 0.18518518518518517 AS "Proba_2", -1.68639895357 AS "LogProba_2", 0.1111111111111111 AS "Proba_3", -2.19722457734 AS "LogProba_3", 0 AS "Decision", 0.592592592593 AS "DecisionProba" FROM DUAL UNION ALL SELECT 20 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 73 AS count, 5 AS depth, 18 AS parent_id, 0.1780821917808219 AS "Proba_0", -1.72551008369 AS "LogProba_0", 0.4246575342465753 AS "Proba_1", -0.856472236663 AS "LogProba_1", 0.2602739726027397 AS "Proba_2", -1.34602046198 AS "LogProba_2", 0.136986301369863 AS "Proba_3", -1.98787434815 AS "LogProba_3", 1 AS "Decision", 0.424657534247 AS "DecisionProba" FROM DUAL UNION ALL SELECT 23 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 5 AS depth, 22 AS parent_id, 0.14285714285714285 AS "Proba_0", -1.94591014906 AS "LogProba_0", 0.047619047619047616 AS "Proba_1", -3.04452243772 AS "LogProba_1", 0.6666666666666666 AS "Proba_2", -0.405465108108 AS "LogProba_2", 0.14285714285714285 AS "Proba_3", -1.94591014906 AS "LogProba_3", 2 AS "Decision", 0.666666666667 AS "DecisionProba" FROM DUAL UNION ALL SELECT 24 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 22 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 26 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 25 AS count, 5 AS depth, 25 AS parent_id, 0.04 AS "Proba_0", -3.21887582487 AS "LogProba_0", 0.8 AS "Proba_1", -0.223143551314 AS "LogProba_1", 0.08 AS "Proba_2", -2.52572864431 AS "LogProba_2", 0.08 AS "Proba_3", -2.52572864431 AS "LogProba_3", 1 AS "Decision", 0.8 AS "DecisionProba" FROM DUAL UNION ALL SELECT 27 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 63 AS count, 5 AS depth, 25 AS parent_id, 0.20634920634920634 AS "Proba_0", -1.57818536893 AS "LogProba_0", 0.3492063492063492 AS "Proba_1", -1.05209227303 AS "LogProba_1", 0.07936507936507936 AS "Proba_2", -2.53369681396 AS "LogProba_2", 0.36507936507936506 AS "Proba_3", -1.00764051046 AS "LogProba_3", 3 AS "Decision", 0.365079365079 AS "DecisionProba" FROM DUAL UNION ALL SELECT 32 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 69 AS count, 5 AS depth, 31 AS parent_id, 0.057971014492753624 AS "Proba_0", -2.84781214348 AS "LogProba_0", 0.13043478260869565 AS "Proba_1", -2.03688192726 AS "LogProba_1", 0.07246376811594203 AS "Proba_2", -2.62466859216 AS "LogProba_2", 0.7391304347826086 AS "Proba_3", -0.302280871873 AS "LogProba_3", 3 AS "Decision", 0.739130434783 AS "DecisionProba" FROM DUAL UNION ALL SELECT 33 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 5 AS depth, 31 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.3333333333333333 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0.4444444444444444 AS "Proba_2", -0.810930216216 AS "LogProba_2", 0.2222222222222222 AS "Proba_3", -1.50407739678 AS "LogProba_3", 2 AS "Decision", 0.444444444444 AS "DecisionProba" FROM DUAL UNION ALL SELECT 35 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 34 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 36 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 34 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 39 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 5 AS depth, 38 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.1111111111111111 AS "Proba_2", -2.19722457734 AS "LogProba_2", 0.8888888888888888 AS "Proba_3", -0.117783035656 AS "LogProba_3", 3 AS "Decision", 0.888888888889 AS "DecisionProba" FROM DUAL UNION ALL SELECT 40 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 5 AS depth, 38 AS parent_id, 0.35714285714285715 AS "Proba_0", -1.02961941718 AS "LogProba_0", 0.35714285714285715 AS "Proba_1", -1.02961941718 AS "LogProba_1", 0.07142857142857142 AS "Proba_2", -2.63905732962 AS "LogProba_2", 0.21428571428571427 AS "Proba_3", -1.54044504095 AS "LogProba_3", 0 AS "Decision", 0.357142857143 AS "DecisionProba" FROM DUAL UNION ALL SELECT 42 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 49 AS count, 5 AS depth, 41 AS parent_id, 0.16326530612244897 AS "Proba_0", -1.81237875643 AS "LogProba_0", 0.061224489795918366 AS "Proba_1", -2.79320800944 AS "LogProba_1", 0.6530612244897959 AS "Proba_2", -0.426084395311 AS "LogProba_2", 0.12244897959183673 AS "Proba_3", -2.10006082888 AS "LogProba_3", 2 AS "Decision", 0.65306122449 AS "DecisionProba" FROM DUAL UNION ALL SELECT 43 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 5 AS depth, 41 AS parent_id, 0.037037037037037035 AS "Proba_0", -3.295836866 AS "LogProba_0", 0.37037037037037035 AS "Proba_1", -0.99325177301 AS "LogProba_1", 0.2222222222222222 AS "Proba_2", -1.50407739678 AS "LogProba_2", 0.37037037037037035 AS "Proba_3", -0.99325177301 AS "LogProba_3", 1 AS "Decision", 0.37037037037 AS "DecisionProba" FROM DUAL UNION ALL SELECT 47 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 46 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.5 AS "Proba_1", -0.69314718056 AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 1 AS "Decision", 0.5 AS "DecisionProba" FROM DUAL UNION ALL SELECT 48 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 5 AS depth, 46 AS parent_id, 0.8888888888888888 AS "Proba_0", -0.117783035656 AS "LogProba_0", 0.05555555555555555 AS "Proba_1", -2.8903717579 AS "LogProba_1", 0.05555555555555555 AS "Proba_2", -2.8903717579 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 0.888888888889 AS "DecisionProba" FROM DUAL UNION ALL SELECT 50 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 5 AS depth, 49 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 51 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 5 AS depth, 49 AS parent_id, 0.6666666666666666 AS "Proba_0", -0.405465108108 AS "LogProba_0", 0.3333333333333333 AS "Proba_1", -1.09861228867 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 0.666666666667 AS "DecisionProba" FROM DUAL UNION ALL SELECT 54 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 53 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 55 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 5 AS depth, 53 AS parent_id, 0.2777777777777778 AS "Proba_0", -1.28093384546 AS "LogProba_0", 0.2222222222222222 AS "Proba_1", -1.50407739678 AS "LogProba_1", 0.4444444444444444 AS "Proba_2", -0.810930216216 AS "LogProba_2", 0.05555555555555555 AS "Proba_3", -2.8903717579 AS "LogProba_3", 2 AS "Decision", 0.444444444444 AS "DecisionProba" FROM DUAL UNION ALL SELECT 57 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 27 AS count, 5 AS depth, 56 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.037037037037037035 AS "Proba_1", -3.295836866 AS "LogProba_1", 0.9629629629629629 AS "Proba_2", -0.0377403279828 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 0.962962962963 AS "DecisionProba" FROM DUAL UNION ALL SELECT 58 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 5 AS depth, 56 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL) "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".node_id AS node_id, "DT_node_data_2".feature AS feature, "DT_node_data_2".threshold AS threshold, "DT_node_data_2".count AS count, "DT_node_data_2".depth AS depth, "DT_node_data_2".parent_id AS parent_id, "DT_node_data_2"."Proba_0" AS "Proba_0", "DT_node_data_2"."LogProba_0" AS "LogProba_0", "DT_node_data_2"."Proba_1" AS "Proba_1", "DT_node_data_2"."LogProba_1" AS "LogProba_1", "DT_node_data_2"."Proba_2" AS "Proba_2", "DT_node_data_2"."LogProba_2" AS "LogProba_2", "DT_node_data_2"."Proba_3" AS "Proba_3", "DT_node_data_2"."LogProba_3" AS "LogProba_3", "DT_node_data_2"."Decision" AS "Decision", "DT_node_data_2"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".node_id), 
calibration_base_estimator_2 AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_2"."Proba_0" AS "Proba_0", "DT_Output_2"."Proba_1" AS "Proba_1", "DT_Output_2"."Proba_2" AS "Proba_2", "DT_Output_2"."Proba_3" AS "Proba_3", "DT_Output_2"."LogProba_0" AS "LogProba_0", "DT_Output_2"."LogProba_1" AS "LogProba_1", "DT_Output_2"."LogProba_2" AS "LogProba_2", "DT_Output_2"."LogProba_3" AS "LogProba_3", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_1") AS "ScoreOrProba_1", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_2") AS "ScoreOrProba_2", coalesce(CAST(NULL AS FLOAT), "DT_Output_2"."Proba_3") AS "ScoreOrProba_3" 
FROM "DT_Output_2"), 
isotonic_cte_2 AS 
(SELECT calibration_base_estimator_2."KEY" AS "KEY", CASE WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.0) THEN 0.115574348132 WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.04) THEN (calibration_base_estimator_2."ScoreOrProba_0" - 0.0) * 0.0 + 0.115574348132 WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.0579710144928) THEN (calibration_base_estimator_2."ScoreOrProba_0" - 0.04) * 1.91562095069 + 0.115574348132 WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.142857142857) THEN (calibration_base_estimator_2."ScoreOrProba_0" - 0.0579710144928) * 1.03516587988 + 0.15 WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.277777777778) THEN (calibration_base_estimator_2."ScoreOrProba_0" - 0.142857142857) * 0.0 + 0.237871223758 WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.357142857143) THEN (calibration_base_estimator_2."ScoreOrProba_0" - 0.277777777778) * 0.2482771261 + 0.237871223758 WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.592592592593) THEN (calibration_base_estimator_2."ScoreOrProba_0" - 0.357142857143) * 0.0 + 0.257575757576 WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.818181818182) THEN (calibration_base_estimator_2."ScoreOrProba_0" - 0.592592592593) * 0.224722253395 + 0.257575757576 WHEN (calibration_base_estimator_2."ScoreOrProba_0" < 0.888888888889) THEN (calibration_base_estimator_2."ScoreOrProba_0" - 0.818181818182) * 0.0 + 0.308270676692 ELSE 0.308270676692 END AS "Proba_0", CASE WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.0) THEN 0.0625 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.037037037037) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.0) * 2.0625 + 0.0625 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.0555555555556) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.037037037037) * 0.0 + 0.138888888889 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.0612244897959) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.0555555555556) * 14.2223923445 + 0.138888888889 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.130434782609) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.0612244897959) * 0.0 + 0.21951469583 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.222222222222) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.130434782609) * 0.144654998741 + 0.21951469583 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.37037037037) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.222222222222) * 0.0 + 0.232792207792 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.424657534247) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.37037037037) * 1.15877700081 + 0.232792207792 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.5) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.424657534247) * 0.0 + 0.295698924731 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 0.8) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.5) * 0.514336917563 + 0.295698924731 WHEN (calibration_base_estimator_2."ScoreOrProba_1" < 1.0) THEN (calibration_base_estimator_2."ScoreOrProba_1" - 0.8) * 0.0 + 0.45 ELSE 0.45 END AS "Proba_1", CASE WHEN (calibration_base_estimator_2."ScoreOrProba_2" < 0.0) THEN 0.216469745793 WHEN (calibration_base_estimator_2."ScoreOrProba_2" < 0.08) THEN (calibration_base_estimator_2."ScoreOrProba_2" - 0.0) * 0.0 + 0.216469745793 WHEN (calibration_base_estimator_2."ScoreOrProba_2" < 0.111111111111) THEN (calibration_base_estimator_2."ScoreOrProba_2" - 0.08) * 4.05835790217 + 0.216469745793 WHEN (calibration_base_estimator_2."ScoreOrProba_2" < 1.0) THEN (calibration_base_estimator_2."ScoreOrProba_2" - 0.111111111111) * 0.0 + 0.342729769416 ELSE 0.342729769416 END AS "Proba_2", CASE WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.0) THEN 0.188995215311 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.0363636363636) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.0) * 0.0 + 0.188995215311 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.0555555555556) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.0363636363636) * 0.820124225188 + 0.188995215311 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.142857142857) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.0555555555556) * 0.0 + 0.204734973168 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.214285714286) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.142857142857) * 1.02259926453 + 0.204734973168 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.25) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.214285714286) * 0.0 + 0.277777777778 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.365079365079) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.25) * 0.322884012539 + 0.277777777778 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.37037037037) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.365079365079) * 0.0 + 0.314935064935 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 0.739130434783) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.37037037037) * 0.125219758408 + 0.314935064935 WHEN (calibration_base_estimator_2."ScoreOrProba_3" < 1.0) THEN (calibration_base_estimator_2."ScoreOrProba_3" - 0.739130434783) * 0.0 + 0.361111111111 ELSE 0.361111111111 END AS "Proba_3" 
FROM calibration_base_estimator_2), 
"Normalized_Probas_2" AS 
(SELECT isotonic_cte_2."KEY" AS "KEY", isotonic_cte_2."Proba_0" / (isotonic_cte_2."Proba_0" + isotonic_cte_2."Proba_1" + isotonic_cte_2."Proba_2" + isotonic_cte_2."Proba_3") AS "Proba_0", isotonic_cte_2."Proba_1" / (isotonic_cte_2."Proba_0" + isotonic_cte_2."Proba_1" + isotonic_cte_2."Proba_2" + isotonic_cte_2."Proba_3") AS "Proba_1", isotonic_cte_2."Proba_2" / (isotonic_cte_2."Proba_0" + isotonic_cte_2."Proba_1" + isotonic_cte_2."Proba_2" + isotonic_cte_2."Proba_3") AS "Proba_2", isotonic_cte_2."Proba_3" / (isotonic_cte_2."Proba_0" + isotonic_cte_2."Proba_1" + isotonic_cte_2."Proba_2" + isotonic_cte_2."Proba_3") AS "Proba_3" 
FROM isotonic_cte_2), 
"DT_node_lookup_3" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CASE WHEN ("ADS_sca_2_OUT".scaler_33 <= 0.2938539981842041) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_36 <= 0.9102931022644043) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_66 <= -0.5817530155181885) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_29 <= 0.6342442035675049) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_55 <= 0.7553910613059998) THEN 5 ELSE 6 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_71 <= 0.5389477014541626) THEN 8 ELSE 9 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_55 <= 1.173092007637024) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_11 <= 0.27872490882873535) THEN 12 ELSE 13 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_50 <= -0.327485054731369) THEN 15 ELSE 16 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_33 <= -1.8755420446395874) THEN 18 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_87 <= -0.9727884531021118) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_34 <= 0.4487919807434082) THEN 21 ELSE 22 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_10 <= 0.39247798919677734) THEN 24 ELSE 25 END END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_52 <= -0.3452757000923157) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_70 <= -0.008020205423235893) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_81 <= -0.2938869595527649) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_35 <= 0.28403663635253906) THEN 30 ELSE 31 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_30 <= 0.790223240852356) THEN 33 ELSE 34 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_18 <= -0.9823629856109619) THEN 36 ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_98 <= 0.40362119674682617) THEN 38 ELSE 39 END END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_66 <= 1.1754977703094482) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_45 <= -0.13795293867588043) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_40 <= -0.8598459959030151) THEN 43 ELSE 44 END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_41 <= -1.4660017490386963) THEN 46 ELSE 47 END END ELSE CASE WHEN ("ADS_sca_2_OUT".scaler_19 <= 0.7790433168411255) THEN CASE WHEN ("ADS_sca_2_OUT".scaler_45 <= 0.05393628776073456) THEN 50 ELSE 51 END ELSE 52 END END END END AS node_id_2 
FROM "ADS_sca_2_OUT"), 
"DT_node_data_3" AS 
(SELECT "Values".node_id AS node_id, "Values".feature AS feature, "Values".threshold AS threshold, "Values".count AS count, "Values".depth AS depth, "Values".parent_id AS parent_id, "Values"."Proba_0" AS "Proba_0", "Values"."LogProba_0" AS "LogProba_0", "Values"."Proba_1" AS "Proba_1", "Values"."LogProba_1" AS "LogProba_1", "Values"."Proba_2" AS "Proba_2", "Values"."LogProba_2" AS "LogProba_2", "Values"."Proba_3" AS "Proba_3", "Values"."LogProba_3" AS "LogProba_3", "Values"."Decision" AS "Decision", "Values"."DecisionProba" AS "DecisionProba" 
FROM (SELECT 5 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 47 AS count, 5 AS depth, 4 AS parent_id, 0.5957446808510638 AS "Proba_0", -0.517943091535 AS "LogProba_0", 0.1276595744680851 AS "Proba_1", -2.05838813248 AS "LogProba_1", 0.1276595744680851 AS "Proba_2", -2.05838813248 AS "LogProba_2", 0.14893617021276595 AS "Proba_3", -1.90423745265 AS "LogProba_3", 0 AS "Decision", 0.595744680851 AS "DecisionProba" FROM DUAL UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 17 AS count, 5 AS depth, 4 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.35294117647058826 AS "Proba_1", -1.04145387483 AS "LogProba_1", 0.23529411764705882 AS "Proba_2", -1.44691898294 AS "LogProba_2", 0.4117647058823529 AS "Proba_3", -0.887303195001 AS "LogProba_3", 3 AS "Decision", 0.411764705882 AS "DecisionProba" FROM DUAL UNION ALL SELECT 8 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 5 AS depth, 7 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 5 AS depth, 7 AS parent_id, 0.375 AS "Proba_0", -0.980829253012 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.375 AS "Proba_3", -0.980829253012 AS "LogProba_3", 0 AS "Decision", 0.375 AS "DecisionProba" FROM DUAL UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 108 AS count, 5 AS depth, 11 AS parent_id, 0.1388888888888889 AS "Proba_0", -1.97408102602 AS "LogProba_0", 0.12037037037037036 AS "Proba_1", -2.11718186966 AS "LogProba_1", 0.16666666666666666 AS "Proba_2", -1.79175946923 AS "LogProba_2", 0.5740740740740741 AS "Proba_3", -0.554996842079 AS "LogProba_3", 3 AS "Decision", 0.574074074074 AS "DecisionProba" FROM DUAL UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 94 AS count, 5 AS depth, 11 AS parent_id, 0.22340425531914893 AS "Proba_0", -1.49877234455 AS "LogProba_0", 0.1276595744680851 AS "Proba_1", -2.05838813248 AS "LogProba_1", 0.43617021276595747 AS "Proba_2", -0.829722715566 AS "LogProba_2", 0.2127659574468085 AS "Proba_3", -1.54756250872 AS "LogProba_3", 2 AS "Decision", 0.436170212766 AS "DecisionProba" FROM DUAL UNION ALL SELECT 15 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 5 AS depth, 14 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.2222222222222222 AS "Proba_1", -1.50407739678 AS "LogProba_1", 0.3333333333333333 AS "Proba_2", -1.09861228867 AS "LogProba_2", 0.4444444444444444 AS "Proba_3", -0.810930216216 AS "LogProba_3", 3 AS "Decision", 0.444444444444 AS "DecisionProba" FROM DUAL UNION ALL SELECT 16 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 5 AS depth, 14 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 18 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 17 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 21 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 20 AS parent_id, 0.25 AS "Proba_0", -1.38629436112 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.75 AS "Proba_3", -0.287682072452 AS "LogProba_3", 3 AS "Decision", 0.75 AS "DecisionProba" FROM DUAL UNION ALL SELECT 22 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 5 AS depth, 20 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 24 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 42 AS count, 5 AS depth, 23 AS parent_id, 0.8809523809523809 AS "Proba_0", -0.126751705639 AS "LogProba_0", 0.023809523809523808 AS "Proba_1", -3.73766961828 AS "LogProba_1", 0.07142857142857142 AS "Proba_2", -2.63905732962 AS "LogProba_2", 0.023809523809523808 AS "Proba_3", -3.73766961828 AS "LogProba_3", 0 AS "Decision", 0.880952380952 AS "DecisionProba" FROM DUAL UNION ALL SELECT 25 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 15 AS count, 5 AS depth, 23 AS parent_id, 0.3333333333333333 AS "Proba_0", -1.09861228867 AS "LogProba_0", 0.06666666666666667 AS "Proba_1", -2.7080502011 AS "LogProba_1", 0.3333333333333333 AS "Proba_2", -1.09861228867 AS "LogProba_2", 0.26666666666666666 AS "Proba_3", -1.32175583998 AS "LogProba_3", 0 AS "Decision", 0.333333333333 AS "DecisionProba" FROM DUAL UNION ALL SELECT 30 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 5 AS depth, 29 AS parent_id, 0.125 AS "Proba_0", -2.07944154168 AS "LogProba_0", 0.25 AS "Proba_1", -1.38629436112 AS "LogProba_1", 0.375 AS "Proba_2", -0.980829253012 AS "LogProba_2", 0.25 AS "Proba_3", -1.38629436112 AS "LogProba_3", 2 AS "Decision", 0.375 AS "DecisionProba" FROM DUAL UNION ALL SELECT 31 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 5 AS depth, 29 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 1.0 AS "Proba_1", 0.0 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 1 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 33 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 13 AS count, 5 AS depth, 32 AS parent_id, 0.07692307692307693 AS "Proba_0", -2.56494935746 AS "LogProba_0", 0.15384615384615385 AS "Proba_1", -1.8718021769 AS "LogProba_1", 0.07692307692307693 AS "Proba_2", -2.56494935746 AS "LogProba_2", 0.6923076923076923 AS "Proba_3", -0.367724780125 AS "LogProba_3", 3 AS "Decision", 0.692307692308 AS "DecisionProba" FROM DUAL UNION ALL SELECT 34 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 32 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 36 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 4 AS depth, 35 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 1.0 AS "Proba_3", 0.0 AS "LogProba_3", 3 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 38 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 18 AS count, 5 AS depth, 37 AS parent_id, 0.05555555555555555 AS "Proba_0", -2.8903717579 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.8888888888888888 AS "Proba_2", -0.117783035656 AS "LogProba_2", 0.05555555555555555 AS "Proba_3", -2.8903717579 AS "LogProba_3", 2 AS "Decision", 0.888888888889 AS "DecisionProba" FROM DUAL UNION ALL SELECT 39 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 5 AS depth, 37 AS parent_id, 0.16666666666666666 AS "Proba_0", -1.79175946923 AS "LogProba_0", 0.16666666666666666 AS "Proba_1", -1.79175946923 AS "LogProba_1", 0.16666666666666666 AS "Proba_2", -1.79175946923 AS "LogProba_2", 0.5 AS "Proba_3", -0.69314718056 AS "LogProba_3", 3 AS "Decision", 0.5 AS "DecisionProba" FROM DUAL UNION ALL SELECT 43 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 5 AS depth, 42 AS parent_id, 1.0 AS "Proba_0", 0.0 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL UNION ALL SELECT 44 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 5 AS depth, 42 AS parent_id, 0.13157894736842105 AS "Proba_0", -2.02814824729 AS "LogProba_0", 0.42105263157894735 AS "Proba_1", -0.864997437487 AS "LogProba_1", 0.3684210526315789 AS "Proba_2", -0.998528830111 AS "LogProba_2", 0.07894736842105263 AS "Proba_3", -2.53897387106 AS "LogProba_3", 1 AS "Decision", 0.421052631579 AS "DecisionProba" FROM DUAL UNION ALL SELECT 46 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 5 AS depth, 45 AS parent_id, 0.2857142857142857 AS "Proba_0", -1.2527629685 AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.14285714285714285 AS "Proba_2", -1.94591014906 AS "LogProba_2", 0.5714285714285714 AS "Proba_3", -0.559615787935 AS "LogProba_3", 3 AS "Decision", 0.571428571429 AS "DecisionProba" FROM DUAL UNION ALL SELECT 47 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 80 AS count, 5 AS depth, 45 AS parent_id, 0.125 AS "Proba_0", -2.07944154168 AS "LogProba_0", 0.725 AS "Proba_1", -0.321583624127 AS "LogProba_1", 0.0875 AS "Proba_2", -2.43611648562 AS "LogProba_2", 0.0625 AS "Proba_3", -2.77258872224 AS "LogProba_3", 1 AS "Decision", 0.725 AS "DecisionProba" FROM DUAL UNION ALL SELECT 50 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 5 AS depth, 49 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 0.25 AS "Proba_2", -1.38629436112 AS "LogProba_2", 0.75 AS "Proba_3", -0.287682072452 AS "LogProba_3", 3 AS "Decision", 0.75 AS "DecisionProba" FROM DUAL UNION ALL SELECT 51 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 5 AS depth, 49 AS parent_id, 0.8 AS "Proba_0", -0.223143551314 AS "LogProba_0", 0.2 AS "Proba_1", -1.60943791243 AS "LogProba_1", 0.0 AS "Proba_2", -BINARY_FLOAT_INFINITY AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 0 AS "Decision", 0.8 AS "DecisionProba" FROM DUAL UNION ALL SELECT 52 AS node_id, CAST(NULL AS VARCHAR2(256 CHAR)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 4 AS depth, 48 AS parent_id, 0.0 AS "Proba_0", -BINARY_FLOAT_INFINITY AS "LogProba_0", 0.0 AS "Proba_1", -BINARY_FLOAT_INFINITY AS "LogProba_1", 1.0 AS "Proba_2", 0.0 AS "LogProba_2", 0.0 AS "Proba_3", -BINARY_FLOAT_INFINITY AS "LogProba_3", 2 AS "Decision", 1.0 AS "DecisionProba" FROM DUAL) "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".node_id AS node_id, "DT_node_data_3".feature AS feature, "DT_node_data_3".threshold AS threshold, "DT_node_data_3".count AS count, "DT_node_data_3".depth AS depth, "DT_node_data_3".parent_id AS parent_id, "DT_node_data_3"."Proba_0" AS "Proba_0", "DT_node_data_3"."LogProba_0" AS "LogProba_0", "DT_node_data_3"."Proba_1" AS "Proba_1", "DT_node_data_3"."LogProba_1" AS "LogProba_1", "DT_node_data_3"."Proba_2" AS "Proba_2", "DT_node_data_3"."LogProba_2" AS "LogProba_2", "DT_node_data_3"."Proba_3" AS "Proba_3", "DT_node_data_3"."LogProba_3" AS "LogProba_3", "DT_node_data_3"."Decision" AS "Decision", "DT_node_data_3"."DecisionProba" AS "DecisionProba" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".node_id), 
calibration_base_estimator_3 AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "DT_Output_3"."Proba_0" AS "Proba_0", "DT_Output_3"."Proba_1" AS "Proba_1", "DT_Output_3"."Proba_2" AS "Proba_2", "DT_Output_3"."Proba_3" AS "Proba_3", "DT_Output_3"."LogProba_0" AS "LogProba_0", "DT_Output_3"."LogProba_1" AS "LogProba_1", "DT_Output_3"."LogProba_2" AS "LogProba_2", "DT_Output_3"."LogProba_3" AS "LogProba_3", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_0") AS "ScoreOrProba_0", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_1") AS "ScoreOrProba_1", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_2") AS "ScoreOrProba_2", coalesce(CAST(NULL AS FLOAT), "DT_Output_3"."Proba_3") AS "ScoreOrProba_3" 
FROM "DT_Output_3"), 
isotonic_cte_3 AS 
(SELECT calibration_base_estimator_3."KEY" AS "KEY", CASE WHEN (calibration_base_estimator_3."ScoreOrProba_0" < 0.0) THEN 0.166666666667 WHEN (calibration_base_estimator_3."ScoreOrProba_0" < 0.0555555555556) THEN (calibration_base_estimator_3."ScoreOrProba_0" - 0.0) * 1.37130226096 + 0.166666666667 WHEN (calibration_base_estimator_3."ScoreOrProba_0" < 0.285714285714) THEN (calibration_base_estimator_3."ScoreOrProba_0" - 0.0555555555556) * 0.0 + 0.242850125609 WHEN (calibration_base_estimator_3."ScoreOrProba_0" < 0.333333333333) THEN (calibration_base_estimator_3."ScoreOrProba_0" - 0.285714285714) * 0.150147362216 + 0.242850125609 WHEN (calibration_base_estimator_3."ScoreOrProba_0" < 0.375) THEN (calibration_base_estimator_3."ScoreOrProba_0" - 0.333333333333) * 0.4 + 0.25 WHEN (calibration_base_estimator_3."ScoreOrProba_0" < 0.8) THEN (calibration_base_estimator_3."ScoreOrProba_0" - 0.375) * 0.0 + 0.266666666667 WHEN (calibration_base_estimator_3."ScoreOrProba_0" < 0.880952380952) THEN (calibration_base_estimator_3."ScoreOrProba_0" - 0.8) * 1.85294117647 + 0.266666666667 WHEN (calibration_base_estimator_3."ScoreOrProba_0" < 1.0) THEN (calibration_base_estimator_3."ScoreOrProba_0" - 0.880952380952) * 0.7 + 0.416666666667 ELSE 0.5 END AS "Proba_0", CASE WHEN (calibration_base_estimator_3."ScoreOrProba_1" < 0.0) THEN 0.166666666667 WHEN (calibration_base_estimator_3."ScoreOrProba_1" < 0.0238095238095) THEN (calibration_base_estimator_3."ScoreOrProba_1" - 0.0) * 0.0 + 0.166666666667 WHEN (calibration_base_estimator_3."ScoreOrProba_1" < 0.0666666666667) THEN (calibration_base_estimator_3."ScoreOrProba_1" - 0.0238095238095) * 0.847578347578 + 0.166666666667 WHEN (calibration_base_estimator_3."ScoreOrProba_1" < 0.127659574468) THEN (calibration_base_estimator_3."ScoreOrProba_1" - 0.0666666666667) * 0.0 + 0.202991452991 WHEN (calibration_base_estimator_3."ScoreOrProba_1" < 0.153846153846) THEN (calibration_base_estimator_3."ScoreOrProba_1" - 0.127659574468) * 1.15868055556 + 0.202991452991 WHEN (calibration_base_estimator_3."ScoreOrProba_1" < 0.166666666667) THEN (calibration_base_estimator_3."ScoreOrProba_1" - 0.153846153846) * 0.0 + 0.233333333333 WHEN (calibration_base_estimator_3."ScoreOrProba_1" < 0.2) THEN (calibration_base_estimator_3."ScoreOrProba_1" - 0.166666666667) * 8.99822537711 + 0.233333333333 WHEN (calibration_base_estimator_3."ScoreOrProba_1" < 1.0) THEN (calibration_base_estimator_3."ScoreOrProba_1" - 0.2) * 0.0 + 0.533274179237 ELSE 0.533274179237 END AS "Proba_1", CASE WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.0) THEN 0.0625 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.0714285714286) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.0) * 0.291666666667 + 0.0625 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.0769230769231) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.0714285714286) * 0.0 + 0.0833333333333 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.0875) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.0769230769231) * 6.64558629776 + 0.0833333333333 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.142857142857) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.0875) * 0.0 + 0.153623188406 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.166666666667) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.142857142857) * 1.71449275362 + 0.153623188406 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.25) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.166666666667) * 0.0 + 0.194444444444 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.333333333333) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.25) * 0.700432900433 + 0.194444444444 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.375) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.333333333333) * 0.0 + 0.252813852814 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 0.436170212766) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.375) * 1.37895381314 + 0.252813852814 WHEN (calibration_base_estimator_3."ScoreOrProba_2" < 1.0) THEN (calibration_base_estimator_3."ScoreOrProba_2" - 0.436170212766) * 0.0 + 0.337164750958 ELSE 0.337164750958 END AS "Proba_2", CASE WHEN (calibration_base_estimator_3."ScoreOrProba_3" < 0.0) THEN 0.121579643852 WHEN (calibration_base_estimator_3."ScoreOrProba_3" < 0.571428571429) THEN (calibration_base_estimator_3."ScoreOrProba_3" - 0.0) * 0.0 + 0.121579643852 WHEN (calibration_base_estimator_3."ScoreOrProba_3" < 0.574074074074) THEN (calibration_base_estimator_3."ScoreOrProba_3" - 0.571428571429) * 46.7659715472 + 0.121579643852 WHEN (calibration_base_estimator_3."ScoreOrProba_3" < 0.75) THEN (calibration_base_estimator_3."ScoreOrProba_3" - 0.574074074074) * 0.0 + 0.245299145299 WHEN (calibration_base_estimator_3."ScoreOrProba_3" < 1.0) THEN (calibration_base_estimator_3."ScoreOrProba_3" - 0.75) * 3.0188034188 + 0.245299145299 ELSE 1.0 END AS "Proba_3" 
FROM calibration_base_estimator_3), 
"Normalized_Probas_3" AS 
(SELECT isotonic_cte_3."KEY" AS "KEY", isotonic_cte_3."Proba_0" / (isotonic_cte_3."Proba_0" + isotonic_cte_3."Proba_1" + isotonic_cte_3."Proba_2" + isotonic_cte_3."Proba_3") AS "Proba_0", isotonic_cte_3."Proba_1" / (isotonic_cte_3."Proba_0" + isotonic_cte_3."Proba_1" + isotonic_cte_3."Proba_2" + isotonic_cte_3."Proba_3") AS "Proba_1", isotonic_cte_3."Proba_2" / (isotonic_cte_3."Proba_0" + isotonic_cte_3."Proba_1" + isotonic_cte_3."Proba_2" + isotonic_cte_3."Proba_3") AS "Proba_2", isotonic_cte_3."Proba_3" / (isotonic_cte_3."Proba_0" + isotonic_cte_3."Proba_1" + isotonic_cte_3."Proba_2" + isotonic_cte_3."Proba_3") AS "Proba_3" 
FROM isotonic_cte_3), 
"Score_Union_CTE" AS 
(SELECT ensemble_score_union."KEY" AS "KEY", ensemble_score_union."Proba_0" AS "Proba_0", ensemble_score_union."Proba_1" AS "Proba_1", ensemble_score_union."Proba_2" AS "Proba_2", ensemble_score_union."Proba_3" AS "Proba_3" 
FROM (SELECT "Normalized_Probas"."KEY" AS "KEY", "Normalized_Probas"."Proba_0" AS "Proba_0", "Normalized_Probas"."Proba_1" AS "Proba_1", "Normalized_Probas"."Proba_2" AS "Proba_2", "Normalized_Probas"."Proba_3" AS "Proba_3" 
FROM "Normalized_Probas" UNION ALL SELECT "Normalized_Probas_1"."KEY" AS "KEY", "Normalized_Probas_1"."Proba_0" AS "Proba_0", "Normalized_Probas_1"."Proba_1" AS "Proba_1", "Normalized_Probas_1"."Proba_2" AS "Proba_2", "Normalized_Probas_1"."Proba_3" AS "Proba_3" 
FROM "Normalized_Probas_1" UNION ALL SELECT "Normalized_Probas_2"."KEY" AS "KEY", "Normalized_Probas_2"."Proba_0" AS "Proba_0", "Normalized_Probas_2"."Proba_1" AS "Proba_1", "Normalized_Probas_2"."Proba_2" AS "Proba_2", "Normalized_Probas_2"."Proba_3" AS "Proba_3" 
FROM "Normalized_Probas_2" UNION ALL SELECT "Normalized_Probas_3"."KEY" AS "KEY", "Normalized_Probas_3"."Proba_0" AS "Proba_0", "Normalized_Probas_3"."Proba_1" AS "Proba_1", "Normalized_Probas_3"."Proba_2" AS "Proba_2", "Normalized_Probas_3"."Proba_3" AS "Proba_3" 
FROM "Normalized_Probas_3") ensemble_score_union), 
"Calibrate_AVG_Proba" AS 
(SELECT "T"."KEY" AS "KEY", "T"."Proba_0" AS "Proba_0", "T"."Proba_1" AS "Proba_1", "T"."Proba_2" AS "Proba_2", "T"."Proba_3" AS "Proba_3" 
FROM (SELECT "Score_Union_CTE"."KEY" AS "KEY", avg("Score_Union_CTE"."Proba_0") AS "Proba_0", avg("Score_Union_CTE"."Proba_1") AS "Proba_1", avg("Score_Union_CTE"."Proba_2") AS "Proba_2", avg("Score_Union_CTE"."Proba_3") AS "Proba_3" 
FROM "Score_Union_CTE" GROUP BY "Score_Union_CTE"."KEY") "T"), 
orig_cte AS 
(SELECT "Calibrate_AVG_Proba"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", "Calibrate_AVG_Proba"."Proba_0" AS "Proba_0", "Calibrate_AVG_Proba"."Proba_1" AS "Proba_1", "Calibrate_AVG_Proba"."Proba_2" AS "Proba_2", "Calibrate_AVG_Proba"."Proba_3" AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "Calibrate_AVG_Proba"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Score_2" AS "Score_2", arg_max_cte."Score_3" AS "Score_3", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", arg_max_cte."Proba_2" AS "Proba_2", arg_max_cte."Proba_3" AS "Proba_3", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", CASE WHEN (arg_max_cte."Proba_2" IS NULL OR arg_max_cte."Proba_2" > 0.0) THEN ln(arg_max_cte."Proba_2") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_2", CASE WHEN (arg_max_cte."Proba_3" IS NULL OR arg_max_cte."Proba_3" > 0.0) THEN ln(arg_max_cte."Proba_3") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_3", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte