-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "RawScores" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -0.69314718056 + (-0.5 * 1.16594189184 - (0.5 * (CAST("ADS"."Feature_0" AS FLOAT) - 0.873654099724) * (CAST("ADS"."Feature_0" AS FLOAT) - 0.873654099724)) / 0.510719289892) + (-0.5 * 1.63398213887 - (0.5 * (CAST("ADS"."Feature_1" AS FLOAT) - 0.224178233225) * (CAST("ADS"."Feature_1" AS FLOAT) - 0.224178233225)) / 0.815548058325) + (-0.5 * 1.73267557783 - (0.5 * (CAST("ADS"."Feature_2" AS FLOAT) - 0.0523804017329) * (CAST("ADS"."Feature_2" AS FLOAT) - 0.0523804017329)) / 0.900143135753) + (-0.5 * 2.12449224994 - (0.5 * (CAST("ADS"."Feature_3" AS FLOAT) - 0.00819429211215) * (CAST("ADS"."Feature_3" AS FLOAT) - 0.00819429211215)) / 1.33191157334) + (-0.5 * 2.11082115046 - (0.5 * (CAST("ADS"."Feature_4" AS FLOAT) - 0.0424485335141) * (CAST("ADS"."Feature_4" AS FLOAT) - 0.0424485335141)) / 1.3138267789) + (-0.5 * 2.38899038428 - (0.5 * (CAST("ADS"."Feature_5" AS FLOAT) - -0.0117759292946) * (CAST("ADS"."Feature_5" AS FLOAT) - -0.0117759292946)) / 1.73518375398) + (-0.5 * 1.70314532252 - (0.5 * (CAST("ADS"."Feature_6" AS FLOAT) - 0.385052285364) * (CAST("ADS"."Feature_6" AS FLOAT) - 0.385052285364)) / 0.87395032276) + (-0.5 * -1.02401740807 - (0.5 * (CAST("ADS"."Feature_7" AS FLOAT) - 0.346265469014) * (CAST("ADS"."Feature_7" AS FLOAT) - 0.346265469014)) / 0.0571603687657) + (-0.5 * 1.79505633716 - (0.5 * (CAST("ADS"."Feature_8" AS FLOAT) - -0.114049479812) * (CAST("ADS"."Feature_8" AS FLOAT) - -0.114049479812)) / 0.958083130954) + (-0.5 * 0.664762229186 - (0.5 * (CAST("ADS"."Feature_9" AS FLOAT) - -0.898176145586) * (CAST("ADS"."Feature_9" AS FLOAT) - -0.898176145586)) / 0.309401702825) AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -0.69314718056 + (-0.5 * 2.01100287414 - (0.5 * (CAST("ADS"."Feature_0" AS FLOAT) - -0.749995689248) * (CAST("ADS"."Feature_0" AS FLOAT) - -0.749995689248)) / 1.18901568304) + (-0.5 * 1.7868950923 - (0.5 * (CAST("ADS"."Feature_1" AS FLOAT) - 0.129871042118) * (CAST("ADS"."Feature_1" AS FLOAT) - 0.129871042118)) / 0.950295800305) + (-0.5 * 2.17958632201 - (0.5 * (CAST("ADS"."Feature_2" AS FLOAT) - 0.0303872983652) * (CAST("ADS"."Feature_2" AS FLOAT) - 0.0303872983652)) / 1.40735105859) + (-0.5 * 1.80490935604 - (0.5 * (CAST("ADS"."Feature_3" AS FLOAT) - 0.253018644005) * (CAST("ADS"."Feature_3" AS FLOAT) - 0.253018644005)) / 0.96756980156) + (-0.5 * 1.95809140418 - (0.5 * (CAST("ADS"."Feature_4" AS FLOAT) - -0.161564742954) * (CAST("ADS"."Feature_4" AS FLOAT) - -0.161564742954)) / 1.12773854265) + (-0.5 * 2.56099818051 - (0.5 * (CAST("ADS"."Feature_5" AS FLOAT) - -0.0860822504456) * (CAST("ADS"."Feature_5" AS FLOAT) - -0.0860822504456)) / 2.060855348) + (-0.5 * 1.78264617003 - (0.5 * (CAST("ADS"."Feature_6" AS FLOAT) - -0.00301632812974) * (CAST("ADS"."Feature_6" AS FLOAT) - -0.00301632812974)) / 0.946266633187) + (-0.5 * 0.140175044056 - (0.5 * (CAST("ADS"."Feature_7" AS FLOAT) - -0.302166275549) * (CAST("ADS"."Feature_7" AS FLOAT) - -0.302166275549)) / 0.183103809426) + (-0.5 * 2.10204848716 - (0.5 * (CAST("ADS"."Feature_8" AS FLOAT) - -0.00141014825671) * (CAST("ADS"."Feature_8" AS FLOAT) - -0.00141014825671)) / 1.30235142723) + (-0.5 * 2.06850562351 - (0.5 * (CAST("ADS"."Feature_9" AS FLOAT) - 0.793076961482) * (CAST("ADS"."Feature_9" AS FLOAT) - 0.793076961482)) / 1.25939136059) AS "Score_1" 
FROM "BinaryClass_10" "ADS"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS class, score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS class, score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas) soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max.class) AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."max_Score" <= union_with_max."Score" GROUP BY union_with_max."KEY") "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1" 
FROM score_soft_max) soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", arg_max_cte."arg_max_Score" AS "Decision", CASE WHEN (arg_max_cte."SoftProba_0" <= arg_max_cte."SoftProba_1") THEN arg_max_cte."SoftProba_1" ELSE arg_max_cte."SoftProba_0" END AS "DecisionProba" 
FROM arg_max_cte