-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN -0.00390337446303 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.61522322157 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.0427962369143 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.77098195589 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.433007336249 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0424956965794 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN -0.298090801198 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.146722415073 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.0174694238466 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.115073314156 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "FourClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - -0.00390337446303) / 0.979506064018 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.61522322157) / 1.39008072362 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.0427962369143) / 1.49626851359 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.77098195589) / 2.33335610601 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.433007336249) / 1.40297577726 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.0424956965794) / 0.955809107687 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - -0.298090801198) / 1.01701318072 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.146722415073) / 1.60079853993 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.0174694238466) / 1.14872963617 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.115073314156) / 0.969091185734 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"RawScores" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "Proba_0", -1.49165487678 + (-0.5 * 2.32098193304 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - 0.128509361103) * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - 0.128509361103)) / 1.62109989539) + (-0.5 * 1.44000317233 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - -0.589485395912) * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - -0.589485395912)) / 0.67174673356) + (-0.5 * 1.14484149917 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - -0.148011040712) * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - -0.148011040712)) / 0.500055809774) + (-0.5 * -0.0706572670627 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - -0.47548298172) * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - -0.47548298172)) / 0.148297582191) + (-0.5 * 0.966026495803 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - 0.801905341367) * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - 0.801905341367)) / 0.418176966756) + (-0.5 * 0.681074440797 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - -0.199196519222) * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - -0.199196519222)) / 0.314490117694) + (-0.5 * 0.565517409477 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - 0.439518212955) * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - 0.439518212955)) / 0.280169736713) + (-0.5 * 1.57123067041 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - 0.123400319091) * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - 0.123400319091)) / 0.765943864398) + (-0.5 * 1.70109124503 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - 0.403570258392) * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - 0.403570258392)) / 0.872157003515) + (-0.5 * 2.073462574 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - 0.0987032079509) * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - 0.0987032079509)) / 1.26564959928) AS "Score_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "Proba_1", -1.38629436112 + (-0.5 * 1.58377544535 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - -0.0529869947284) * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - -0.0529869947284)) / 0.775612979428) + (-0.5 * 1.24606137031 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - 0.360555272984) * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - 0.360555272984)) / 0.553321708033) + (-0.5 * 1.79263882467 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - 0.794840644564) * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - 0.794840644564)) / 0.955769750463) + (-0.5 * 1.18444848656 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - 0.893656658384) * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - 0.893656658384)) / 0.520258965993) + (-0.5 * 2.22318710732 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - 0.169874351862) * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - 0.169874351862)) / 1.47007003264) + (-0.5 * 1.81394906262 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - -0.278679175012) * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - -0.278679175012)) / 0.976356001159) + (-0.5 * 1.42729853922 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - -0.895671880555) * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - -0.895671880555)) / 0.663266421464) + (-0.5 * 1.0218128726 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - 0.673858282251) * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - 0.673858282251)) / 0.442168523887) + (-0.5 * 1.67491023649 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - -0.204012633199) * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - -0.204012633199)) / 0.849619369894) + (-0.5 * 1.6946738383 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - -0.0708326626227) * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - -0.0708326626227)) / 0.866577938006) AS "Score_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "Proba_2", -1.38629436112 + (-0.5 * 1.77288099881 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - 0.0453604019381) * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - 0.0453604019381)) / 0.937071148307) + (-0.5 * 1.95867588689 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - -0.587677805021) * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - -0.587677805021)) / 1.12839787899) + (-0.5 * 1.29479336884 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - -0.740813864091) * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - -0.740813864091)) / 0.580954000892) + (-0.5 * 1.97963841836 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - -0.730678839244) * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - -0.730678839244)) / 1.15230162119) + (-0.5 * 1.59394122292 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - -0.352378185458) * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - -0.352378185458)) / 0.78353790171) + (-0.5 * 2.22563153902 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - 0.233568134705) * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - 0.233568134705)) / 1.47366791404) + (-0.5 * 1.95909158041 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - 0.624201944134) * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - 0.624201944134)) / 1.12886704418) + (-0.5 * 2.2592332486 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - -0.117254914937) * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - -0.117254914937)) / 1.52402701303) + (-0.5 * 0.838374885316 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - 0.219536933929) * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - 0.219536933929)) / 0.368062624105) + (-0.5 * 1.84028348988 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - 0.0276564959771) * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - 0.0276564959771)) / 1.00240932123) AS "Score_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS FLOAT) AS "Proba_3", -1.29098418132 + (-0.5 * 1.51690479702 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - -0.0982107565479) * (CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) - -0.0982107565479)) / 0.725443367699) + (-0.5 * 0.835577093576 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - 0.688781262144) * (CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) - 0.688781262144)) / 0.367034300723) + (-0.5 * 1.52842355685 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - 0.0719846874246) * (CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) - 0.0719846874246)) / 0.733847887515) + (-0.5 * 1.2219636458 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - 0.240869876734) * (CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) - 0.240869876734)) / 0.540147288243) + (-0.5 * 0.758910614861 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - -0.490191794213) * (CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) - -0.490191794213)) / 0.339946695519) + (-0.5 * 1.79443310759 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - 0.203989006915) * (CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) - 0.203989006915)) / 0.957486211241) + (-0.5 * 1.19091756783 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - -0.112814959308) * (CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) - -0.112814959308)) / 0.523635473197) + (-0.5 * 0.960952659582 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - -0.606966958632) * (CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) - -0.606966958632)) / 0.416060578958) + (-0.5 * 2.23149966275 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - -0.344306848438) * (CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) - -0.344306848438)) / 1.48234100217) + (-0.5 * 1.71774417017 - (0.5 * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - -0.0415061095546) * (CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) - -0.0415061095546)) / 0.886802576162) AS "Score_3" 
FROM "ADS_sca_2_OUT"), 
orig_cte AS 
(SELECT "RawScores"."KEY" AS "KEY", "RawScores"."Score_0" AS "Score_0", "RawScores"."Score_1" AS "Score_1", "RawScores"."Score_2" AS "Score_2", "RawScores"."Score_3" AS "Score_3", "RawScores"."Proba_0" AS "Proba_0", "RawScores"."Proba_1" AS "Proba_1", "RawScores"."Proba_2" AS "Proba_2", "RawScores"."Proba_3" AS "Proba_3", "RawScores"."LogProba_0" AS "LogProba_0", "RawScores"."LogProba_1" AS "LogProba_1", "RawScores"."LogProba_2" AS "LogProba_2", "RawScores"."LogProba_3" AS "LogProba_3", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "RawScores"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(score_max."Score_0" - score_max."max_Score") AS "exp_delta_Score_0", exp(score_max."Score_1" - score_max."max_Score") AS "exp_delta_Score_1", exp(score_max."Score_2" - score_max."max_Score") AS "exp_delta_Score_2", exp(score_max."Score_3" - score_max."max_Score") AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS class, score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS class, score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS class, score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS class, score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max.class) AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."max_Score" <= union_with_max."Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", CASE WHEN (arg_max_cte."SoftProba_0" <= CASE WHEN (arg_max_cte."SoftProba_1" <= CASE WHEN (arg_max_cte."SoftProba_2" <= arg_max_cte."SoftProba_3") THEN arg_max_cte."SoftProba_3" ELSE arg_max_cte."SoftProba_2" END) THEN CASE WHEN (arg_max_cte."SoftProba_2" <= arg_max_cte."SoftProba_3") THEN arg_max_cte."SoftProba_3" ELSE arg_max_cte."SoftProba_2" END ELSE arg_max_cte."SoftProba_1" END) THEN CASE WHEN (arg_max_cte."SoftProba_1" <= CASE WHEN (arg_max_cte."SoftProba_2" <= arg_max_cte."SoftProba_3") THEN arg_max_cte."SoftProba_3" ELSE arg_max_cte."SoftProba_2" END) THEN CASE WHEN (arg_max_cte."SoftProba_2" <= arg_max_cte."SoftProba_3") THEN arg_max_cte."SoftProba_3" ELSE arg_max_cte."SoftProba_2" END ELSE arg_max_cte."SoftProba_1" END ELSE arg_max_cte."SoftProba_0" END AS "DecisionProba" 
FROM arg_max_cte