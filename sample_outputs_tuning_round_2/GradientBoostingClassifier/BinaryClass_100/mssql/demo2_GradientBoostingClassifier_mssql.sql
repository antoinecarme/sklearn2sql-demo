-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH [DT_node_lookup] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_17] <= 1.086324691772461) THEN CASE WHEN ([ADS].[Feature_9] <= 1.7608928680419922) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_19] <= 0.9697616696357727) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_83] <= 2.2875289916992188) THEN CASE WHEN ([ADS].[Feature_70] <= -1.5690407752990723) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 42 AS count, 3 AS depth, 2 AS parent_id, -1.6183315431435734 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 2.1052631578947363 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, 2.1052631578947363 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, -1.904761904761905 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.904761904761905 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 2.105263157894737 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.904761904761905 AS [Estimator]) AS [Values]), 
[DT_Output] AS 
(SELECT [DT_node_lookup].[KEY] AS [KEY], [DT_node_lookup].node_id_2 AS node_id_2, [DT_node_data].node_id AS node_id, [DT_node_data].feature AS feature, [DT_node_data].threshold AS threshold, [DT_node_data].count AS count, [DT_node_data].depth AS depth, [DT_node_data].parent_id AS parent_id, [DT_node_data].[Estimator] AS [Estimator] 
FROM [DT_node_lookup] LEFT OUTER JOIN [DT_node_data] ON [DT_node_lookup].node_id_2 = [DT_node_data].node_id), 
[GB_Tree_0_0] AS 
(SELECT [DT_Output].[KEY] AS [KEY], -[DT_Output].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output]), 
[GB_Tree_0_1] AS 
(SELECT [DT_Output].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output].[Estimator] AS [Score_1] 
FROM [DT_Output]), 
[DT_node_lookup_1] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_37] <= 1.6649534702301025) THEN CASE WHEN ([ADS].[Feature_60] <= -2.280282974243164) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_94] <= -1.0246386528015137) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_18] <= 2.0317130088806152) THEN CASE WHEN ([ADS].[Feature_17] <= 1.9419240951538086) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_1] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 2.096008535366903 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, 2 AS parent_id, -1.4234854473404777 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.895437496504261 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 2.2994181831603377 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.8954374965042624 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.7478449197552628 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.7478449197552628 AS [Estimator]) AS [Values]), 
[DT_Output_1] AS 
(SELECT [DT_node_lookup_1].[KEY] AS [KEY], [DT_node_lookup_1].node_id_2 AS node_id_2, [DT_node_data_1].node_id AS node_id, [DT_node_data_1].feature AS feature, [DT_node_data_1].threshold AS threshold, [DT_node_data_1].count AS count, [DT_node_data_1].depth AS depth, [DT_node_data_1].parent_id AS parent_id, [DT_node_data_1].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_1] LEFT OUTER JOIN [DT_node_data_1] ON [DT_node_lookup_1].node_id_2 = [DT_node_data_1].node_id), 
[GB_Tree_1_0] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], -[DT_Output_1].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_1]), 
[GB_Tree_1_1] AS 
(SELECT [DT_Output_1].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_1].[Estimator] AS [Score_1] 
FROM [DT_Output_1]), 
[DT_node_lookup_2] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_71] <= -2.182079315185547) THEN 2 ELSE CASE WHEN ([ADS].[Feature_9] <= 1.7608928680419922) THEN 4 ELSE 5 END END ELSE CASE WHEN ([ADS].[Feature_47] <= -1.373920202255249) THEN 7 ELSE CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 9 ELSE 10 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_2] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 2 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 2 AS depth, 1 AS parent_id, 2.0324558055611313 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, 3 AS parent_id, -1.3276995551562458 AS [Estimator] UNION ALL SELECT 5 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 3 AS parent_id, 2.0324201305914054 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 6 AS parent_id, -1.6279189753326482 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 8 AS parent_id, -1.6279189753326482 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 8 AS parent_id, 1.7408281426133267 AS [Estimator]) AS [Values]), 
[DT_Output_2] AS 
(SELECT [DT_node_lookup_2].[KEY] AS [KEY], [DT_node_lookup_2].node_id_2 AS node_id_2, [DT_node_data_2].node_id AS node_id, [DT_node_data_2].feature AS feature, [DT_node_data_2].threshold AS threshold, [DT_node_data_2].count AS count, [DT_node_data_2].depth AS depth, [DT_node_data_2].parent_id AS parent_id, [DT_node_data_2].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_2] LEFT OUTER JOIN [DT_node_data_2] ON [DT_node_lookup_2].node_id_2 = [DT_node_data_2].node_id), 
[GB_Tree_2_0] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], -[DT_Output_2].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_2]), 
[GB_Tree_2_1] AS 
(SELECT [DT_Output_2].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_2].[Estimator] AS [Score_1] 
FROM [DT_Output_2]), 
[DT_node_lookup_3] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_60] <= -2.280282974243164) THEN CASE WHEN ([ADS].[Feature_25] <= 0.08380049467086792) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_37] <= 1.6649534702301025) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 9 ELSE CASE WHEN ([ADS].[Feature_10] <= 2.318753480911255) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_3] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 2.2033215782363085 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.8292167028822635 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, 5 AS parent_id, -1.2388948754014388 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 5 AS parent_id, 1.8443051333640834 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.5335854573777359 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 10 AS parent_id, 1.6224640389018972 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 10 AS parent_id, -1.5335854573777359 AS [Estimator]) AS [Values]), 
[DT_Output_3] AS 
(SELECT [DT_node_lookup_3].[KEY] AS [KEY], [DT_node_lookup_3].node_id_2 AS node_id_2, [DT_node_data_3].node_id AS node_id, [DT_node_data_3].feature AS feature, [DT_node_data_3].threshold AS threshold, [DT_node_data_3].count AS count, [DT_node_data_3].depth AS depth, [DT_node_data_3].parent_id AS parent_id, [DT_node_data_3].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_3] LEFT OUTER JOIN [DT_node_data_3] ON [DT_node_lookup_3].node_id_2 = [DT_node_data_3].node_id), 
[GB_Tree_3_0] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], -[DT_Output_3].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_3]), 
[GB_Tree_3_1] AS 
(SELECT [DT_Output_3].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_3].[Estimator] AS [Score_1] 
FROM [DT_Output_3]), 
[DT_node_lookup_4] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.19605962932109833) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_43] <= 1.2855033874511719) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_33] <= 0.08075147867202759) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_48] <= 1.5001174211502075) THEN CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_0] <= 0.30662107467651367) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_4] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, 2 AS parent_id, -1.4201836338413583 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, 0.8818891509469176 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 2.0543740519216325 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.5115435903792729 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.4577213966216014 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.5448043165070784 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, -1.4876585385597692 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.529238644498216 AS [Estimator]) AS [Values]), 
[DT_Output_4] AS 
(SELECT [DT_node_lookup_4].[KEY] AS [KEY], [DT_node_lookup_4].node_id_2 AS node_id_2, [DT_node_data_4].node_id AS node_id, [DT_node_data_4].feature AS feature, [DT_node_data_4].threshold AS threshold, [DT_node_data_4].count AS count, [DT_node_data_4].depth AS depth, [DT_node_data_4].parent_id AS parent_id, [DT_node_data_4].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_4] LEFT OUTER JOIN [DT_node_data_4] ON [DT_node_lookup_4].node_id_2 = [DT_node_data_4].node_id), 
[GB_Tree_4_0] AS 
(SELECT [DT_Output_4].[KEY] AS [KEY], -[DT_Output_4].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_4]), 
[GB_Tree_4_1] AS 
(SELECT [DT_Output_4].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_4].[Estimator] AS [Score_1] 
FROM [DT_Output_4]), 
[DT_node_lookup_5] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.19605962932109833) THEN CASE WHEN ([ADS].[Feature_60] <= -0.6577232480049133) THEN CASE WHEN ([ADS].[Feature_73] <= 0.050291866064071655) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_17] <= 1.086324691772461) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_48] <= 1.5001174211502075) THEN CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_18] <= 0.645362913608551) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_5] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 2 AS parent_id, 1.958202526870995 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, -1.448008549051362 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, 5 AS parent_id, -1.3444944167722634 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, 0.7265051857481474 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.395633609741032 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.4673881774513675 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.4541899894634762 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, -1.4203469592033384 AS [Estimator]) AS [Values]), 
[DT_Output_5] AS 
(SELECT [DT_node_lookup_5].[KEY] AS [KEY], [DT_node_lookup_5].node_id_2 AS node_id_2, [DT_node_data_5].node_id AS node_id, [DT_node_data_5].feature AS feature, [DT_node_data_5].threshold AS threshold, [DT_node_data_5].count AS count, [DT_node_data_5].depth AS depth, [DT_node_data_5].parent_id AS parent_id, [DT_node_data_5].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_5] LEFT OUTER JOIN [DT_node_data_5] ON [DT_node_lookup_5].node_id_2 = [DT_node_data_5].node_id), 
[GB_Tree_5_0] AS 
(SELECT [DT_Output_5].[KEY] AS [KEY], -[DT_Output_5].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_5]), 
[GB_Tree_5_1] AS 
(SELECT [DT_Output_5].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_5].[Estimator] AS [Score_1] 
FROM [DT_Output_5]), 
[DT_node_lookup_6] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.19605962932109833) THEN CASE WHEN ([ADS].[Feature_35] <= 0.540546178817749) THEN CASE WHEN ([ADS].[Feature_17] <= 1.260037899017334) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_21] <= -0.29568687081336975) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_48] <= 1.5001174211502075) THEN CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_76] <= 1.7782776355743408) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_6] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 2 AS parent_id, -1.3946185074449031 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, 0.525957561992705 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.937257098415046 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 5 AS parent_id, -0.8866233396726353 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.344097550451214 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.4040651025086777 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, -1.3647650410708272 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.3927198824988734 AS [Estimator]) AS [Values]), 
[DT_Output_6] AS 
(SELECT [DT_node_lookup_6].[KEY] AS [KEY], [DT_node_lookup_6].node_id_2 AS node_id_2, [DT_node_data_6].node_id AS node_id, [DT_node_data_6].feature AS feature, [DT_node_data_6].threshold AS threshold, [DT_node_data_6].count AS count, [DT_node_data_6].depth AS depth, [DT_node_data_6].parent_id AS parent_id, [DT_node_data_6].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_6] LEFT OUTER JOIN [DT_node_data_6] ON [DT_node_lookup_6].node_id_2 = [DT_node_data_6].node_id), 
[GB_Tree_6_0] AS 
(SELECT [DT_Output_6].[KEY] AS [KEY], -[DT_Output_6].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_6]), 
[GB_Tree_6_1] AS 
(SELECT [DT_Output_6].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_6].[Estimator] AS [Score_1] 
FROM [DT_Output_6]), 
[DT_node_lookup_7] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.19605962932109833) THEN CASE WHEN ([ADS].[Feature_60] <= -0.6577232480049133) THEN CASE WHEN ([ADS].[Feature_76] <= 0.040523961186409) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_35] <= 1.8964011669158936) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_48] <= 1.5001174211502075) THEN CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_66] <= 0.32714080810546875) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_7] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 2 AS parent_id, -1.337157307504241 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 2 AS parent_id, 1.720271726539447 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, 5 AS parent_id, -1.170701604442776 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.8229070531835285 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.300821010694913 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.3515189609079086 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, -1.3182902998610377 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.3416629081480635 AS [Estimator]) AS [Values]), 
[DT_Output_7] AS 
(SELECT [DT_node_lookup_7].[KEY] AS [KEY], [DT_node_lookup_7].node_id_2 AS node_id_2, [DT_node_data_7].node_id AS node_id, [DT_node_data_7].feature AS feature, [DT_node_data_7].threshold AS threshold, [DT_node_data_7].count AS count, [DT_node_data_7].depth AS depth, [DT_node_data_7].parent_id AS parent_id, [DT_node_data_7].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_7] LEFT OUTER JOIN [DT_node_data_7] ON [DT_node_lookup_7].node_id_2 = [DT_node_data_7].node_id), 
[GB_Tree_7_0] AS 
(SELECT [DT_Output_7].[KEY] AS [KEY], -[DT_Output_7].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_7]), 
[GB_Tree_7_1] AS 
(SELECT [DT_Output_7].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_7].[Estimator] AS [Score_1] 
FROM [DT_Output_7]), 
[DT_node_lookup_8] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.19605962932109833) THEN CASE WHEN ([ADS].[Feature_71] <= -2.182079315185547) THEN CASE WHEN ([ADS].[Feature_5] <= 0.5961169004440308) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_35] <= 1.1146454811096191) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_48] <= 1.5001174211502075) THEN CASE WHEN ([ADS].[Feature_18] <= 2.0317130088806152) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_60] <= -1.404435634613037) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_8] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.6108718821416377 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.6688510571596784 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 41 AS count, 3 AS depth, 5 AS parent_id, -1.068080084295244 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, 0.9475315093373128 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.307398426483107 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.264127868945373 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.298765298853743 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, -1.279025518068119 AS [Estimator]) AS [Values]), 
[DT_Output_8] AS 
(SELECT [DT_node_lookup_8].[KEY] AS [KEY], [DT_node_lookup_8].node_id_2 AS node_id_2, [DT_node_data_8].node_id AS node_id, [DT_node_data_8].feature AS feature, [DT_node_data_8].threshold AS threshold, [DT_node_data_8].count AS count, [DT_node_data_8].depth AS depth, [DT_node_data_8].parent_id AS parent_id, [DT_node_data_8].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_8] LEFT OUTER JOIN [DT_node_data_8] ON [DT_node_lookup_8].node_id_2 = [DT_node_data_8].node_id), 
[GB_Tree_8_0] AS 
(SELECT [DT_Output_8].[KEY] AS [KEY], -[DT_Output_8].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_8]), 
[GB_Tree_8_1] AS 
(SELECT [DT_Output_8].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_8].[Estimator] AS [Score_1] 
FROM [DT_Output_8]), 
[DT_node_lookup_9] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.19605962932109833) THEN CASE WHEN ([ADS].[Feature_18] <= 2.4513967037200928) THEN CASE WHEN ([ADS].[Feature_60] <= -2.280282974243164) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_6] <= -0.6969937086105347) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_48] <= 1.5001174211502075) THEN CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_22] <= 0.4450732469558716) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_9] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 1.4900163352519837 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 42 AS count, 3 AS depth, 2 AS parent_id, -0.9948753872812511 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.632261202074544 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.519985051185009 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.2327629493831462 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.2699877686233394 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, -1.245562745293807 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.262376837539426 AS [Estimator]) AS [Values]), 
[DT_Output_9] AS 
(SELECT [DT_node_lookup_9].[KEY] AS [KEY], [DT_node_lookup_9].node_id_2 AS node_id_2, [DT_node_data_9].node_id AS node_id, [DT_node_data_9].feature AS feature, [DT_node_data_9].threshold AS threshold, [DT_node_data_9].count AS count, [DT_node_data_9].depth AS depth, [DT_node_data_9].parent_id AS parent_id, [DT_node_data_9].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_9] LEFT OUTER JOIN [DT_node_data_9] ON [DT_node_lookup_9].node_id_2 = [DT_node_data_9].node_id), 
[GB_Tree_9_0] AS 
(SELECT [DT_Output_9].[KEY] AS [KEY], -[DT_Output_9].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_9]), 
[GB_Tree_9_1] AS 
(SELECT [DT_Output_9].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_9].[Estimator] AS [Score_1] 
FROM [DT_Output_9]), 
[DT_node_lookup_10] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_71] <= -2.182079315185547) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_4] <= 0.991510272026062) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_18] <= 2.0082812309265137) THEN CASE WHEN ([ADS].[Feature_84] <= 1.5507421493530273) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_71] <= 0.25993645191192627) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_10] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.446661732834358 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 2 AS parent_id, -1.2499360133065067 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.6219351936501099 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.2895245850004842 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 9 AS parent_id, 1.1975528332766405 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 9 AS parent_id, -0.6151746918646214 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, -1.317315323569 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, -1.2057669579063237 AS [Estimator]) AS [Values]), 
[DT_Output_10] AS 
(SELECT [DT_node_lookup_10].[KEY] AS [KEY], [DT_node_lookup_10].node_id_2 AS node_id_2, [DT_node_data_10].node_id AS node_id, [DT_node_data_10].feature AS feature, [DT_node_data_10].threshold AS threshold, [DT_node_data_10].count AS count, [DT_node_data_10].depth AS depth, [DT_node_data_10].parent_id AS parent_id, [DT_node_data_10].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_10] LEFT OUTER JOIN [DT_node_data_10] ON [DT_node_lookup_10].node_id_2 = [DT_node_data_10].node_id), 
[GB_Tree_10_0] AS 
(SELECT [DT_Output_10].[KEY] AS [KEY], -[DT_Output_10].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_10]), 
[GB_Tree_10_1] AS 
(SELECT [DT_Output_10].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_10].[Estimator] AS [Score_1] 
FROM [DT_Output_10]), 
[DT_node_lookup_11] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_88] <= 2.0869669914245605) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_4] <= 0.991510272026062) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_97] <= -1.6103904247283936) THEN CASE WHEN ([ADS].[Feature_94] <= -1.232283353805542) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_18] <= 1.2704501152038574) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_11] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 2 AS parent_id, -1.220589039043774 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.3865013593274123 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.5327998769743132 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.2548231207419789 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.2256580639543597 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.2318331300228573 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 29 AS count, 3 AS depth, 12 AS parent_id, 1.2459403972282284 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 8 AS count, 3 AS depth, 12 AS parent_id, -0.05217530635323901 AS [Estimator]) AS [Values]), 
[DT_Output_11] AS 
(SELECT [DT_node_lookup_11].[KEY] AS [KEY], [DT_node_lookup_11].node_id_2 AS node_id_2, [DT_node_data_11].node_id AS node_id, [DT_node_data_11].feature AS feature, [DT_node_data_11].threshold AS threshold, [DT_node_data_11].count AS count, [DT_node_data_11].depth AS depth, [DT_node_data_11].parent_id AS parent_id, [DT_node_data_11].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_11] LEFT OUTER JOIN [DT_node_data_11] ON [DT_node_lookup_11].node_id_2 = [DT_node_data_11].node_id), 
[GB_Tree_11_0] AS 
(SELECT [DT_Output_11].[KEY] AS [KEY], -[DT_Output_11].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_11]), 
[GB_Tree_11_1] AS 
(SELECT [DT_Output_11].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_11].[Estimator] AS [Score_1] 
FROM [DT_Output_11]), 
[DT_node_lookup_12] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_71] <= -2.182079315185547) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_4] <= 0.991510272026062) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_18] <= 2.0082812309265137) THEN CASE WHEN ([ADS].[Feature_84] <= 1.5507421493530273) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_98] <= -0.5806252956390381) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_12] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.336462011301788 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 2 AS parent_id, -1.195258567601929 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.460157504031824 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.225033227714185 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 9 AS parent_id, 1.1286854488179339 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 9 AS parent_id, -0.5693352361704495 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, -1.2767036085425458 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, -1.1814445377175218 AS [Estimator]) AS [Values]), 
[DT_Output_12] AS 
(SELECT [DT_node_lookup_12].[KEY] AS [KEY], [DT_node_lookup_12].node_id_2 AS node_id_2, [DT_node_data_12].node_id AS node_id, [DT_node_data_12].feature AS feature, [DT_node_data_12].threshold AS threshold, [DT_node_data_12].count AS count, [DT_node_data_12].depth AS depth, [DT_node_data_12].parent_id AS parent_id, [DT_node_data_12].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_12] LEFT OUTER JOIN [DT_node_data_12] ON [DT_node_lookup_12].node_id_2 = [DT_node_data_12].node_id), 
[GB_Tree_12_0] AS 
(SELECT [DT_Output_12].[KEY] AS [KEY], -[DT_Output_12].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_12]), 
[GB_Tree_12_1] AS 
(SELECT [DT_Output_12].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_12].[Estimator] AS [Score_1] 
FROM [DT_Output_12]), 
[DT_node_lookup_13] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_9] <= 1.7608928680419922) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_73] <= -0.2536468505859375) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_10] <= 2.318753480911255) THEN CASE WHEN ([ADS].[Feature_54] <= 1.471251130104065) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_13] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 2 AS parent_id, -1.0027112222309909 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 2 AS parent_id, 0.5020490769066449 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.4820602336151274 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.289621326139366 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.1667450118563434 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.1612257530876875 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.1796530087132728 AS [Estimator]) AS [Values]), 
[DT_Output_13] AS 
(SELECT [DT_node_lookup_13].[KEY] AS [KEY], [DT_node_lookup_13].node_id_2 AS node_id_2, [DT_node_data_13].node_id AS node_id, [DT_node_data_13].feature AS feature, [DT_node_data_13].threshold AS threshold, [DT_node_data_13].count AS count, [DT_node_data_13].depth AS depth, [DT_node_data_13].parent_id AS parent_id, [DT_node_data_13].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_13] LEFT OUTER JOIN [DT_node_data_13] ON [DT_node_lookup_13].node_id_2 = [DT_node_data_13].node_id), 
[GB_Tree_13_0] AS 
(SELECT [DT_Output_13].[KEY] AS [KEY], -[DT_Output_13].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_13]), 
[GB_Tree_13_1] AS 
(SELECT [DT_Output_13].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_13].[Estimator] AS [Score_1] 
FROM [DT_Output_13]), 
[DT_node_lookup_14] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_71] <= -2.182079315185547) THEN CASE WHEN ([ADS].[Feature_87] <= -0.43115851283073425) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_19] <= -1.6332900524139404) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_18] <= 2.0082812309265137) THEN CASE WHEN ([ADS].[Feature_97] <= -1.6103904247283936) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_0] <= -0.2365896850824356) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_14] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.3748289048641364 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.3254178894915882 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.5416984936659368 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 38 AS count, 3 AS depth, 5 AS parent_id, -0.9882844135467986 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 9 AS parent_id, -1.1728890055441057 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 35 AS count, 3 AS depth, 9 AS parent_id, 1.017348509871444 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, -1.1435499417251889 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, -1.2203033466414503 AS [Estimator]) AS [Values]), 
[DT_Output_14] AS 
(SELECT [DT_node_lookup_14].[KEY] AS [KEY], [DT_node_lookup_14].node_id_2 AS node_id_2, [DT_node_data_14].node_id AS node_id, [DT_node_data_14].feature AS feature, [DT_node_data_14].threshold AS threshold, [DT_node_data_14].count AS count, [DT_node_data_14].depth AS depth, [DT_node_data_14].parent_id AS parent_id, [DT_node_data_14].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_14] LEFT OUTER JOIN [DT_node_data_14] ON [DT_node_lookup_14].node_id_2 = [DT_node_data_14].node_id), 
[GB_Tree_14_0] AS 
(SELECT [DT_Output_14].[KEY] AS [KEY], -[DT_Output_14].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_14]), 
[GB_Tree_14_1] AS 
(SELECT [DT_Output_14].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_14].[Estimator] AS [Score_1] 
FROM [DT_Output_14]), 
[DT_node_lookup_15] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_77] <= 0.34157806634902954) THEN CASE WHEN ([ADS].[Feature_59] <= -1.4929250478744507) THEN CASE WHEN ([ADS].[Feature_57] <= -0.30557534098625183) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_48] <= 1.231797456741333) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_63] <= -1.2931482791900635) THEN 9 ELSE CASE WHEN ([ADS].[Feature_10] <= -0.9688628911972046) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_15] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, -1.1408123626661393 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, -1.1949952326507387 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 43 AS count, 3 AS depth, 5 AS parent_id, 0.8502158462658079 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 5 AS parent_id, -0.5955307623945251 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.2312159733472068 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 10 AS parent_id, -1.1721830246591496 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 10 AS parent_id, -1.1415942686578024 AS [Estimator]) AS [Values]), 
[DT_Output_15] AS 
(SELECT [DT_node_lookup_15].[KEY] AS [KEY], [DT_node_lookup_15].node_id_2 AS node_id_2, [DT_node_data_15].node_id AS node_id, [DT_node_data_15].feature AS feature, [DT_node_data_15].threshold AS threshold, [DT_node_data_15].count AS count, [DT_node_data_15].depth AS depth, [DT_node_data_15].parent_id AS parent_id, [DT_node_data_15].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_15] LEFT OUTER JOIN [DT_node_data_15] ON [DT_node_lookup_15].node_id_2 = [DT_node_data_15].node_id), 
[GB_Tree_15_0] AS 
(SELECT [DT_Output_15].[KEY] AS [KEY], -[DT_Output_15].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_15]), 
[GB_Tree_15_1] AS 
(SELECT [DT_Output_15].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_15].[Estimator] AS [Score_1] 
FROM [DT_Output_15]), 
[DT_node_lookup_16] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_37] <= 1.6649534702301025) THEN CASE WHEN ([ADS].[Feature_9] <= 1.7608928680419922) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_34] <= 0.20753739774227142) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_22] <= -1.4835891723632812) THEN 9 ELSE CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_16] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, 2 AS parent_id, -0.7900259985446844 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 1.2873542463373742 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.2617910840679236 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 5 AS parent_id, 1.326421396697957 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.1665413679862573 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 10 AS parent_id, -1.1394002917282378 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 10 AS parent_id, 1.12471335145982 AS [Estimator]) AS [Values]), 
[DT_Output_16] AS 
(SELECT [DT_node_lookup_16].[KEY] AS [KEY], [DT_node_lookup_16].node_id_2 AS node_id_2, [DT_node_data_16].node_id AS node_id, [DT_node_data_16].feature AS feature, [DT_node_data_16].threshold AS threshold, [DT_node_data_16].count AS count, [DT_node_data_16].depth AS depth, [DT_node_data_16].parent_id AS parent_id, [DT_node_data_16].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_16] LEFT OUTER JOIN [DT_node_data_16] ON [DT_node_lookup_16].node_id_2 = [DT_node_data_16].node_id), 
[GB_Tree_16_0] AS 
(SELECT [DT_Output_16].[KEY] AS [KEY], -[DT_Output_16].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_16]), 
[GB_Tree_16_1] AS 
(SELECT [DT_Output_16].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_16].[Estimator] AS [Score_1] 
FROM [DT_Output_16]), 
[DT_node_lookup_17] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_77] <= 0.34157806634902954) THEN CASE WHEN ([ADS].[Feature_59] <= -1.4929250478744507) THEN CASE WHEN ([ADS].[Feature_94] <= 0.9430633783340454) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_54] <= 1.471251130104065) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_17] <= 1.5588369369506836) THEN CASE WHEN ([ADS].[Feature_10] <= -0.9688628911972046) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_17] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, -1.1160905007372646 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, -1.1598879067982717 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 46 AS count, 3 AS depth, 5 AS parent_id, 0.7499408790504456 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, -1.1370595623128352 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 9 AS parent_id, -1.1415090895326174 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 21 AS count, 3 AS depth, 9 AS parent_id, -1.1167282818236544 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.1889019365347193 AS [Estimator]) AS [Values]), 
[DT_Output_17] AS 
(SELECT [DT_node_lookup_17].[KEY] AS [KEY], [DT_node_lookup_17].node_id_2 AS node_id_2, [DT_node_data_17].node_id AS node_id, [DT_node_data_17].feature AS feature, [DT_node_data_17].threshold AS threshold, [DT_node_data_17].count AS count, [DT_node_data_17].depth AS depth, [DT_node_data_17].parent_id AS parent_id, [DT_node_data_17].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_17] LEFT OUTER JOIN [DT_node_data_17] ON [DT_node_lookup_17].node_id_2 = [DT_node_data_17].node_id), 
[GB_Tree_17_0] AS 
(SELECT [DT_Output_17].[KEY] AS [KEY], -[DT_Output_17].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_17]), 
[GB_Tree_17_1] AS 
(SELECT [DT_Output_17].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_17].[Estimator] AS [Score_1] 
FROM [DT_Output_17]), 
[DT_node_lookup_18] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_9] <= 1.7608928680419922) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_57] <= -1.1539249420166016) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_10] <= 2.318753480911255) THEN CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_18] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 2 AS parent_id, -0.9190813593617149 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 1.2352296180865485 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.1389257054605448 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.3130139356087283 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.1110192495517592 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.10343186643359 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.1597457815027867 AS [Estimator]) AS [Values]), 
[DT_Output_18] AS 
(SELECT [DT_node_lookup_18].[KEY] AS [KEY], [DT_node_lookup_18].node_id_2 AS node_id_2, [DT_node_data_18].node_id AS node_id, [DT_node_data_18].feature AS feature, [DT_node_data_18].threshold AS threshold, [DT_node_data_18].count AS count, [DT_node_data_18].depth AS depth, [DT_node_data_18].parent_id AS parent_id, [DT_node_data_18].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_18] LEFT OUTER JOIN [DT_node_data_18] ON [DT_node_lookup_18].node_id_2 = [DT_node_data_18].node_id), 
[GB_Tree_18_0] AS 
(SELECT [DT_Output_18].[KEY] AS [KEY], -[DT_Output_18].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_18]), 
[GB_Tree_18_1] AS 
(SELECT [DT_Output_18].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_18].[Estimator] AS [Score_1] 
FROM [DT_Output_18]), 
[DT_node_lookup_19] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_60] <= -2.280282974243164) THEN CASE WHEN ([ADS].[Feature_99] <= -0.3876272737979889) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_71] <= -2.182079315185547) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_17] <= 1.9419240951538086) THEN CASE WHEN ([ADS].[Feature_18] <= 2.0317130088806152) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_19] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.1894841635877476 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.3413016284437604 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 5 AS parent_id, 1.249967024616362 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, 5 AS parent_id, -0.7550989039127227 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.092643575272686 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.0993453020193844 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.1422532767499802 AS [Estimator]) AS [Values]), 
[DT_Output_19] AS 
(SELECT [DT_node_lookup_19].[KEY] AS [KEY], [DT_node_lookup_19].node_id_2 AS node_id_2, [DT_node_data_19].node_id AS node_id, [DT_node_data_19].feature AS feature, [DT_node_data_19].threshold AS threshold, [DT_node_data_19].count AS count, [DT_node_data_19].depth AS depth, [DT_node_data_19].parent_id AS parent_id, [DT_node_data_19].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_19] LEFT OUTER JOIN [DT_node_data_19] ON [DT_node_lookup_19].node_id_2 = [DT_node_data_19].node_id), 
[GB_Tree_19_0] AS 
(SELECT [DT_Output_19].[KEY] AS [KEY], -[DT_Output_19].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_19]), 
[GB_Tree_19_1] AS 
(SELECT [DT_Output_19].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_19].[Estimator] AS [Score_1] 
FROM [DT_Output_19]), 
[DT_node_lookup_20] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_77] <= 0.34157806634902954) THEN CASE WHEN ([ADS].[Feature_67] <= -0.2887755334377289) THEN CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_59] <= -0.6905368566513062) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_83] <= -1.5603187084197998) THEN CASE WHEN ([ADS].[Feature_9] <= 0.9216073751449585) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_88] <= -1.0287599563598633) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_20] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 10 AS count, 3 AS depth, 2 AS parent_id, -1.1309440848946717 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, 2 AS parent_id, 0.70043474856491 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 5 AS parent_id, -0.8108054231133907 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 26 AS count, 3 AS depth, 5 AS parent_id, 1.089409118787778 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.1387863043679538 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.1093195046894826 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, -1.0996742026635598 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, 12 AS parent_id, -1.087682125468712 AS [Estimator]) AS [Values]), 
[DT_Output_20] AS 
(SELECT [DT_node_lookup_20].[KEY] AS [KEY], [DT_node_lookup_20].node_id_2 AS node_id_2, [DT_node_data_20].node_id AS node_id, [DT_node_data_20].feature AS feature, [DT_node_data_20].threshold AS threshold, [DT_node_data_20].count AS count, [DT_node_data_20].depth AS depth, [DT_node_data_20].parent_id AS parent_id, [DT_node_data_20].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_20] LEFT OUTER JOIN [DT_node_data_20] ON [DT_node_lookup_20].node_id_2 = [DT_node_data_20].node_id), 
[GB_Tree_20_0] AS 
(SELECT [DT_Output_20].[KEY] AS [KEY], -[DT_Output_20].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_20]), 
[GB_Tree_20_1] AS 
(SELECT [DT_Output_20].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_20].[Estimator] AS [Score_1] 
FROM [DT_Output_20]), 
[DT_node_lookup_21] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_77] <= 0.34157806634902954) THEN CASE WHEN ([ADS].[Feature_18] <= -0.9849978089332581) THEN CASE WHEN ([ADS].[Feature_57] <= -0.06832970678806305) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_57] <= -0.8727352619171143) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_95] <= -0.9194133281707764) THEN CASE WHEN ([ADS].[Feature_76] <= -0.5967344045639038) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_1] <= 1.503793716430664) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_21] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 5 AS count, 3 AS depth, 2 AS parent_id, 1.2106816088329435 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 9 AS count, 3 AS depth, 2 AS parent_id, 1.0717860027975257 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, 1.270661939999293 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 5 AS parent_id, -0.07778693377945774 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.1238482147314093 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.0978409185624398 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 20 AS count, 3 AS depth, 12 AS parent_id, -1.0786458155596725 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, -1.0892952537375042 AS [Estimator]) AS [Values]), 
[DT_Output_21] AS 
(SELECT [DT_node_lookup_21].[KEY] AS [KEY], [DT_node_lookup_21].node_id_2 AS node_id_2, [DT_node_data_21].node_id AS node_id, [DT_node_data_21].feature AS feature, [DT_node_data_21].threshold AS threshold, [DT_node_data_21].count AS count, [DT_node_data_21].depth AS depth, [DT_node_data_21].parent_id AS parent_id, [DT_node_data_21].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_21] LEFT OUTER JOIN [DT_node_data_21] ON [DT_node_lookup_21].node_id_2 = [DT_node_data_21].node_id), 
[GB_Tree_21_0] AS 
(SELECT [DT_Output_21].[KEY] AS [KEY], -[DT_Output_21].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_21]), 
[GB_Tree_21_1] AS 
(SELECT [DT_Output_21].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_21].[Estimator] AS [Score_1] 
FROM [DT_Output_21]), 
[DT_node_lookup_22] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_9] <= 1.7608928680419922) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_77] <= 0.40732499957084656) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_17] <= 1.9419240951538086) THEN CASE WHEN ([ADS].[Feature_18] <= 2.0317130088806152) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_22] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 2 AS parent_id, -0.877214243129436 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 1.1788751341103194 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.2231211286257453 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.092178525156618 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.074797076317314 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.0947206403896763 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.1350504701713573 AS [Estimator]) AS [Values]), 
[DT_Output_22] AS 
(SELECT [DT_node_lookup_22].[KEY] AS [KEY], [DT_node_lookup_22].node_id_2 AS node_id_2, [DT_node_data_22].node_id AS node_id, [DT_node_data_22].feature AS feature, [DT_node_data_22].threshold AS threshold, [DT_node_data_22].count AS count, [DT_node_data_22].depth AS depth, [DT_node_data_22].parent_id AS parent_id, [DT_node_data_22].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_22] LEFT OUTER JOIN [DT_node_data_22] ON [DT_node_lookup_22].node_id_2 = [DT_node_data_22].node_id), 
[GB_Tree_22_0] AS 
(SELECT [DT_Output_22].[KEY] AS [KEY], -[DT_Output_22].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_22]), 
[GB_Tree_22_1] AS 
(SELECT [DT_Output_22].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_22].[Estimator] AS [Score_1] 
FROM [DT_Output_22]), 
[DT_node_lookup_23] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_35] <= 0.540546178817749) THEN CASE WHEN ([ADS].[Feature_37] <= 2.055002450942993) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_60] <= 0.3158397972583771) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_22] <= -1.4835891723632812) THEN 9 ELSE CASE WHEN ([ADS].[Feature_83] <= 2.2875289916992188) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_23] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 36 AS count, 3 AS depth, 2 AS parent_id, -0.9162039068508739 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.1752900841094502 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.232964235533209 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 7 AS count, 3 AS depth, 5 AS parent_id, -0.5810736582136669 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.1205595129818111 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 10 AS parent_id, 1.0671900749549748 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 10 AS parent_id, -1.0848987922744489 AS [Estimator]) AS [Values]), 
[DT_Output_23] AS 
(SELECT [DT_node_lookup_23].[KEY] AS [KEY], [DT_node_lookup_23].node_id_2 AS node_id_2, [DT_node_data_23].node_id AS node_id, [DT_node_data_23].feature AS feature, [DT_node_data_23].threshold AS threshold, [DT_node_data_23].count AS count, [DT_node_data_23].depth AS depth, [DT_node_data_23].parent_id AS parent_id, [DT_node_data_23].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_23] LEFT OUTER JOIN [DT_node_data_23] ON [DT_node_lookup_23].node_id_2 = [DT_node_data_23].node_id), 
[GB_Tree_23_0] AS 
(SELECT [DT_Output_23].[KEY] AS [KEY], -[DT_Output_23].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_23]), 
[GB_Tree_23_1] AS 
(SELECT [DT_Output_23].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_23].[Estimator] AS [Score_1] 
FROM [DT_Output_23]), 
[DT_node_lookup_24] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_60] <= -2.280282974243164) THEN CASE WHEN ([ADS].[Feature_70] <= 1.0250303745269775) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_71] <= -2.182079315185547) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_51] <= -1.798325538635254) THEN 9 ELSE CASE WHEN ([ADS].[Feature_72] <= -1.9872186183929443) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_24] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.228846710362582 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.1296263706262895 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 5 AS parent_id, 1.1660627620673931 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, 5 AS parent_id, -0.7006872378577831 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.1077795096962353 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 10 AS parent_id, -1.0761701755212065 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 10 AS parent_id, 1.060401372914973 AS [Estimator]) AS [Values]), 
[DT_Output_24] AS 
(SELECT [DT_node_lookup_24].[KEY] AS [KEY], [DT_node_lookup_24].node_id_2 AS node_id_2, [DT_node_data_24].node_id AS node_id, [DT_node_data_24].feature AS feature, [DT_node_data_24].threshold AS threshold, [DT_node_data_24].count AS count, [DT_node_data_24].depth AS depth, [DT_node_data_24].parent_id AS parent_id, [DT_node_data_24].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_24] LEFT OUTER JOIN [DT_node_data_24] ON [DT_node_lookup_24].node_id_2 = [DT_node_data_24].node_id), 
[GB_Tree_24_0] AS 
(SELECT [DT_Output_24].[KEY] AS [KEY], -[DT_Output_24].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_24]), 
[GB_Tree_24_1] AS 
(SELECT [DT_Output_24].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_24].[Estimator] AS [Score_1] 
FROM [DT_Output_24]), 
[DT_node_lookup_25] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_77] <= 0.34157806634902954) THEN CASE WHEN ([ADS].[Feature_57] <= -0.8727352619171143) THEN CASE WHEN ([ADS].[Feature_21] <= -0.5674605369567871) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_18] <= -0.9849978089332581) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_83] <= -1.5603187084197998) THEN CASE WHEN ([ADS].[Feature_73] <= -0.2209533452987671) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_88] <= -0.9582698345184326) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_25] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.2683221251322265 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 1.1546749624293828 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 14 AS count, 3 AS depth, 5 AS parent_id, 1.116303940293556 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 5 AS parent_id, -0.10575753054715527 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.0844166749518729 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.0683162902993475 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 12 AS parent_id, -1.0613572055216591 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 19 AS count, 3 AS depth, 12 AS parent_id, -1.0549908905743144 AS [Estimator]) AS [Values]), 
[DT_Output_25] AS 
(SELECT [DT_node_lookup_25].[KEY] AS [KEY], [DT_node_lookup_25].node_id_2 AS node_id_2, [DT_node_data_25].node_id AS node_id, [DT_node_data_25].feature AS feature, [DT_node_data_25].threshold AS threshold, [DT_node_data_25].count AS count, [DT_node_data_25].depth AS depth, [DT_node_data_25].parent_id AS parent_id, [DT_node_data_25].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_25] LEFT OUTER JOIN [DT_node_data_25] ON [DT_node_lookup_25].node_id_2 = [DT_node_data_25].node_id), 
[GB_Tree_25_0] AS 
(SELECT [DT_Output_25].[KEY] AS [KEY], -[DT_Output_25].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_25]), 
[GB_Tree_25_1] AS 
(SELECT [DT_Output_25].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_25].[Estimator] AS [Score_1] 
FROM [DT_Output_25]), 
[DT_node_lookup_26] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_9] <= 1.7608928680419922) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_77] <= 0.40732499957084656) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_47] <= -1.373920202255249) THEN 9 ELSE CASE WHEN ([ADS].[Feature_83] <= 2.2875289916992188) THEN 11 ELSE 12 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_26] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 39 AS count, 3 AS depth, 2 AS parent_id, -0.848040591553799 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 2 AS parent_id, 1.143228247261414 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.1674920321085973 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.0637616455941372 AS [Estimator] UNION ALL SELECT 9 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.0954625342843867 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 10 AS parent_id, 1.0537994406927356 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 10 AS parent_id, -1.0676790865165056 AS [Estimator]) AS [Values]), 
[DT_Output_26] AS 
(SELECT [DT_node_lookup_26].[KEY] AS [KEY], [DT_node_lookup_26].node_id_2 AS node_id_2, [DT_node_data_26].node_id AS node_id, [DT_node_data_26].feature AS feature, [DT_node_data_26].threshold AS threshold, [DT_node_data_26].count AS count, [DT_node_data_26].depth AS depth, [DT_node_data_26].parent_id AS parent_id, [DT_node_data_26].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_26] LEFT OUTER JOIN [DT_node_data_26] ON [DT_node_lookup_26].node_id_2 = [DT_node_data_26].node_id), 
[GB_Tree_26_0] AS 
(SELECT [DT_Output_26].[KEY] AS [KEY], -[DT_Output_26].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_26]), 
[GB_Tree_26_1] AS 
(SELECT [DT_Output_26].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_26].[Estimator] AS [Score_1] 
FROM [DT_Output_26]), 
[DT_node_lookup_27] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN CASE WHEN ([ADS].[Feature_60] <= -2.280282974243164) THEN CASE WHEN ([ADS].[Feature_93] <= 0.9632467031478882) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_18] <= 2.4513967037200928) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_17] <= 1.9419240951538086) THEN CASE WHEN ([ADS].[Feature_83] <= 2.2875289916992188) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_27] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.0921404465542395 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.1970271204342164 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 44 AS count, 3 AS depth, 5 AS parent_id, -0.6753549569321617 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 5 AS parent_id, 1.1344027552747624 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 30 AS count, 3 AS depth, 9 AS parent_id, 1.048431240567795 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 9 AS parent_id, -1.0608255121966532 AS [Estimator] UNION ALL SELECT 12 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 2 AS depth, 8 AS parent_id, -1.0855574094288665 AS [Estimator]) AS [Values]), 
[DT_Output_27] AS 
(SELECT [DT_node_lookup_27].[KEY] AS [KEY], [DT_node_lookup_27].node_id_2 AS node_id_2, [DT_node_data_27].node_id AS node_id, [DT_node_data_27].feature AS feature, [DT_node_data_27].threshold AS threshold, [DT_node_data_27].count AS count, [DT_node_data_27].depth AS depth, [DT_node_data_27].parent_id AS parent_id, [DT_node_data_27].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_27] LEFT OUTER JOIN [DT_node_data_27] ON [DT_node_lookup_27].node_id_2 = [DT_node_data_27].node_id), 
[GB_Tree_27_0] AS 
(SELECT [DT_Output_27].[KEY] AS [KEY], -[DT_Output_27].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_27]), 
[GB_Tree_27_1] AS 
(SELECT [DT_Output_27].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_27].[Estimator] AS [Score_1] 
FROM [DT_Output_27]), 
[DT_node_lookup_28] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_18] <= 2.5616025924682617) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_57] <= -1.1539249420166016) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_77] <= 0.11485704779624939) THEN CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_29] <= -0.22964376211166382) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_28] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 2 AS parent_id, -1.052483812514589 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.1216311299741126 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.0536065337464005 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.1538564243577436 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 9 AS parent_id, -1.0987449225397583 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 9 AS parent_id, 0.8544912014533056 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, 1.1645164554948981 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.1163366276260627 AS [Estimator]) AS [Values]), 
[DT_Output_28] AS 
(SELECT [DT_node_lookup_28].[KEY] AS [KEY], [DT_node_lookup_28].node_id_2 AS node_id_2, [DT_node_data_28].node_id AS node_id, [DT_node_data_28].feature AS feature, [DT_node_data_28].threshold AS threshold, [DT_node_data_28].count AS count, [DT_node_data_28].depth AS depth, [DT_node_data_28].parent_id AS parent_id, [DT_node_data_28].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_28] LEFT OUTER JOIN [DT_node_data_28] ON [DT_node_lookup_28].node_id_2 = [DT_node_data_28].node_id), 
[GB_Tree_28_0] AS 
(SELECT [DT_Output_28].[KEY] AS [KEY], -[DT_Output_28].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_28]), 
[GB_Tree_28_1] AS 
(SELECT [DT_Output_28].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_28].[Estimator] AS [Score_1] 
FROM [DT_Output_28]), 
[DT_node_lookup_29] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_88] <= 2.0869669914245605) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_57] <= -1.1539249420166016) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_77] <= 0.11485704779624939) THEN CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_56] <= 1.3840405941009521) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_29] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 2 AS parent_id, -1.0472675207159643 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.108725877236452 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.048256986548671 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.1375407397820856 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 9 AS parent_id, -1.0885716738647226 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 9 AS parent_id, 0.8226569108799275 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, 1.1464487299934143 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.1040482036165709 AS [Estimator]) AS [Values]), 
[DT_Output_29] AS 
(SELECT [DT_node_lookup_29].[KEY] AS [KEY], [DT_node_lookup_29].node_id_2 AS node_id_2, [DT_node_data_29].node_id AS node_id, [DT_node_data_29].feature AS feature, [DT_node_data_29].threshold AS threshold, [DT_node_data_29].count AS count, [DT_node_data_29].depth AS depth, [DT_node_data_29].parent_id AS parent_id, [DT_node_data_29].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_29] LEFT OUTER JOIN [DT_node_data_29] ON [DT_node_lookup_29].node_id_2 = [DT_node_data_29].node_id), 
[GB_Tree_29_0] AS 
(SELECT [DT_Output_29].[KEY] AS [KEY], -[DT_Output_29].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_29]), 
[GB_Tree_29_1] AS 
(SELECT [DT_Output_29].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_29].[Estimator] AS [Score_1] 
FROM [DT_Output_29]), 
[DT_node_lookup_30] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_37] <= 1.6649534702301025) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_33] <= 0.08075147867202759) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_49] <= 0.6726464033126831) THEN CASE WHEN ([ADS].[Feature_4] <= 0.348697692155838) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_77] <= -0.23612867295742035) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_30] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 2 AS parent_id, -1.0425896338901561 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.0973153989368345 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.1231171612798976 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.0434635782595776 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 24 AS count, 3 AS depth, 9 AS parent_id, 0.9052107286764953 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 9 AS parent_id, 1.1202375963142148 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 12 AS parent_id, 1.0369582625364562 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 6 AS count, 3 AS depth, 12 AS parent_id, -0.9232040532471109 AS [Estimator]) AS [Values]), 
[DT_Output_30] AS 
(SELECT [DT_node_lookup_30].[KEY] AS [KEY], [DT_node_lookup_30].node_id_2 AS node_id_2, [DT_node_data_30].node_id AS node_id, [DT_node_data_30].feature AS feature, [DT_node_data_30].threshold AS threshold, [DT_node_data_30].count AS count, [DT_node_data_30].depth AS depth, [DT_node_data_30].parent_id AS parent_id, [DT_node_data_30].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_30] LEFT OUTER JOIN [DT_node_data_30] ON [DT_node_lookup_30].node_id_2 = [DT_node_data_30].node_id), 
[GB_Tree_30_0] AS 
(SELECT [DT_Output_30].[KEY] AS [KEY], -[DT_Output_30].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_30]), 
[GB_Tree_30_1] AS 
(SELECT [DT_Output_30].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_30].[Estimator] AS [Score_1] 
FROM [DT_Output_30]), 
[DT_node_lookup_31] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_57] <= -0.27291035652160645) THEN CASE WHEN ([ADS].[Feature_17] <= 0.7869232892990112) THEN CASE WHEN ([ADS].[Feature_88] <= 2.0869669914245605) THEN 3 ELSE 4 END ELSE CASE WHEN ([ADS].[Feature_57] <= -1.1539249420166016) THEN 6 ELSE 7 END END ELSE CASE WHEN ([ADS].[Feature_77] <= 0.11485704779624939) THEN CASE WHEN ([ADS].[Feature_57] <= 0.03440605849027634) THEN 10 ELSE 11 END ELSE CASE WHEN ([ADS].[Feature_18] <= -2.0167322158813477) THEN 13 ELSE 14 END END END AS node_id_2 
FROM [BinaryClass_100] AS [ADS]), 
[DT_node_data_31] AS 
(SELECT [Values].node_id AS node_id, [Values].feature AS feature, [Values].threshold AS threshold, [Values].count AS count, [Values].depth AS depth, [Values].parent_id AS parent_id, [Values].[Estimator] AS [Estimator] 
FROM (SELECT 3 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 33 AS count, 3 AS depth, 2 AS parent_id, -1.038390814683828 AS [Estimator] UNION ALL SELECT 4 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 2 AS parent_id, 1.0872018633370442 AS [Estimator] UNION ALL SELECT 6 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 3 AS count, 3 AS depth, 5 AS parent_id, -1.0391642954404154 AS [Estimator] UNION ALL SELECT 7 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 5 AS parent_id, 1.1103337390945127 AS [Estimator] UNION ALL SELECT 10 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 4 AS count, 3 AS depth, 9 AS parent_id, -1.074371571657915 AS [Estimator] UNION ALL SELECT 11 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 32 AS count, 3 AS depth, 9 AS parent_id, 0.7863527790577488 AS [Estimator] UNION ALL SELECT 13 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 1 AS count, 3 AS depth, 12 AS parent_id, 1.0832980973587192 AS [Estimator] UNION ALL SELECT 14 AS node_id, CAST(NULL AS VARCHAR(256)) AS feature, CAST(NULL AS FLOAT) AS threshold, 2 AS count, 3 AS depth, 12 AS parent_id, 1.1167699867774976 AS [Estimator]) AS [Values]), 
[DT_Output_31] AS 
(SELECT [DT_node_lookup_31].[KEY] AS [KEY], [DT_node_lookup_31].node_id_2 AS node_id_2, [DT_node_data_31].node_id AS node_id, [DT_node_data_31].feature AS feature, [DT_node_data_31].threshold AS threshold, [DT_node_data_31].count AS count, [DT_node_data_31].depth AS depth, [DT_node_data_31].parent_id AS parent_id, [DT_node_data_31].[Estimator] AS [Estimator] 
FROM [DT_node_lookup_31] LEFT OUTER JOIN [DT_node_data_31] ON [DT_node_lookup_31].node_id_2 = [DT_node_data_31].node_id), 
[GB_Tree_31_0] AS 
(SELECT [DT_Output_31].[KEY] AS [KEY], -[DT_Output_31].[Estimator] AS [Score_0], 0.0 AS [Score_1] 
FROM [DT_Output_31]), 
[GB_Tree_31_1] AS 
(SELECT [DT_Output_31].[KEY] AS [KEY], 0.0 AS [Score_0], [DT_Output_31].[Estimator] AS [Score_1] 
FROM [DT_Output_31]), 
[Score_Union_CTE] AS 
(SELECT ensemble_score_union.[KEY] AS [KEY], ensemble_score_union.[Score_0] AS [Score_0], ensemble_score_union.[Score_1] AS [Score_1] 
FROM (SELECT [GB_Tree_0_0].[KEY] AS [KEY], [GB_Tree_0_0].[Score_0] AS [Score_0], [GB_Tree_0_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_0_0] UNION ALL SELECT [GB_Tree_0_1].[KEY] AS [KEY], [GB_Tree_0_1].[Score_0] AS [Score_0], [GB_Tree_0_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_0_1] UNION ALL SELECT [GB_Tree_1_0].[KEY] AS [KEY], [GB_Tree_1_0].[Score_0] AS [Score_0], [GB_Tree_1_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_1_0] UNION ALL SELECT [GB_Tree_1_1].[KEY] AS [KEY], [GB_Tree_1_1].[Score_0] AS [Score_0], [GB_Tree_1_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_1_1] UNION ALL SELECT [GB_Tree_2_0].[KEY] AS [KEY], [GB_Tree_2_0].[Score_0] AS [Score_0], [GB_Tree_2_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_2_0] UNION ALL SELECT [GB_Tree_2_1].[KEY] AS [KEY], [GB_Tree_2_1].[Score_0] AS [Score_0], [GB_Tree_2_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_2_1] UNION ALL SELECT [GB_Tree_3_0].[KEY] AS [KEY], [GB_Tree_3_0].[Score_0] AS [Score_0], [GB_Tree_3_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_3_0] UNION ALL SELECT [GB_Tree_3_1].[KEY] AS [KEY], [GB_Tree_3_1].[Score_0] AS [Score_0], [GB_Tree_3_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_3_1] UNION ALL SELECT [GB_Tree_4_0].[KEY] AS [KEY], [GB_Tree_4_0].[Score_0] AS [Score_0], [GB_Tree_4_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_4_0] UNION ALL SELECT [GB_Tree_4_1].[KEY] AS [KEY], [GB_Tree_4_1].[Score_0] AS [Score_0], [GB_Tree_4_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_4_1] UNION ALL SELECT [GB_Tree_5_0].[KEY] AS [KEY], [GB_Tree_5_0].[Score_0] AS [Score_0], [GB_Tree_5_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_5_0] UNION ALL SELECT [GB_Tree_5_1].[KEY] AS [KEY], [GB_Tree_5_1].[Score_0] AS [Score_0], [GB_Tree_5_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_5_1] UNION ALL SELECT [GB_Tree_6_0].[KEY] AS [KEY], [GB_Tree_6_0].[Score_0] AS [Score_0], [GB_Tree_6_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_6_0] UNION ALL SELECT [GB_Tree_6_1].[KEY] AS [KEY], [GB_Tree_6_1].[Score_0] AS [Score_0], [GB_Tree_6_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_6_1] UNION ALL SELECT [GB_Tree_7_0].[KEY] AS [KEY], [GB_Tree_7_0].[Score_0] AS [Score_0], [GB_Tree_7_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_7_0] UNION ALL SELECT [GB_Tree_7_1].[KEY] AS [KEY], [GB_Tree_7_1].[Score_0] AS [Score_0], [GB_Tree_7_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_7_1] UNION ALL SELECT [GB_Tree_8_0].[KEY] AS [KEY], [GB_Tree_8_0].[Score_0] AS [Score_0], [GB_Tree_8_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_8_0] UNION ALL SELECT [GB_Tree_8_1].[KEY] AS [KEY], [GB_Tree_8_1].[Score_0] AS [Score_0], [GB_Tree_8_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_8_1] UNION ALL SELECT [GB_Tree_9_0].[KEY] AS [KEY], [GB_Tree_9_0].[Score_0] AS [Score_0], [GB_Tree_9_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_9_0] UNION ALL SELECT [GB_Tree_9_1].[KEY] AS [KEY], [GB_Tree_9_1].[Score_0] AS [Score_0], [GB_Tree_9_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_9_1] UNION ALL SELECT [GB_Tree_10_0].[KEY] AS [KEY], [GB_Tree_10_0].[Score_0] AS [Score_0], [GB_Tree_10_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_10_0] UNION ALL SELECT [GB_Tree_10_1].[KEY] AS [KEY], [GB_Tree_10_1].[Score_0] AS [Score_0], [GB_Tree_10_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_10_1] UNION ALL SELECT [GB_Tree_11_0].[KEY] AS [KEY], [GB_Tree_11_0].[Score_0] AS [Score_0], [GB_Tree_11_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_11_0] UNION ALL SELECT [GB_Tree_11_1].[KEY] AS [KEY], [GB_Tree_11_1].[Score_0] AS [Score_0], [GB_Tree_11_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_11_1] UNION ALL SELECT [GB_Tree_12_0].[KEY] AS [KEY], [GB_Tree_12_0].[Score_0] AS [Score_0], [GB_Tree_12_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_12_0] UNION ALL SELECT [GB_Tree_12_1].[KEY] AS [KEY], [GB_Tree_12_1].[Score_0] AS [Score_0], [GB_Tree_12_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_12_1] UNION ALL SELECT [GB_Tree_13_0].[KEY] AS [KEY], [GB_Tree_13_0].[Score_0] AS [Score_0], [GB_Tree_13_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_13_0] UNION ALL SELECT [GB_Tree_13_1].[KEY] AS [KEY], [GB_Tree_13_1].[Score_0] AS [Score_0], [GB_Tree_13_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_13_1] UNION ALL SELECT [GB_Tree_14_0].[KEY] AS [KEY], [GB_Tree_14_0].[Score_0] AS [Score_0], [GB_Tree_14_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_14_0] UNION ALL SELECT [GB_Tree_14_1].[KEY] AS [KEY], [GB_Tree_14_1].[Score_0] AS [Score_0], [GB_Tree_14_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_14_1] UNION ALL SELECT [GB_Tree_15_0].[KEY] AS [KEY], [GB_Tree_15_0].[Score_0] AS [Score_0], [GB_Tree_15_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_15_0] UNION ALL SELECT [GB_Tree_15_1].[KEY] AS [KEY], [GB_Tree_15_1].[Score_0] AS [Score_0], [GB_Tree_15_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_15_1] UNION ALL SELECT [GB_Tree_16_0].[KEY] AS [KEY], [GB_Tree_16_0].[Score_0] AS [Score_0], [GB_Tree_16_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_16_0] UNION ALL SELECT [GB_Tree_16_1].[KEY] AS [KEY], [GB_Tree_16_1].[Score_0] AS [Score_0], [GB_Tree_16_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_16_1] UNION ALL SELECT [GB_Tree_17_0].[KEY] AS [KEY], [GB_Tree_17_0].[Score_0] AS [Score_0], [GB_Tree_17_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_17_0] UNION ALL SELECT [GB_Tree_17_1].[KEY] AS [KEY], [GB_Tree_17_1].[Score_0] AS [Score_0], [GB_Tree_17_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_17_1] UNION ALL SELECT [GB_Tree_18_0].[KEY] AS [KEY], [GB_Tree_18_0].[Score_0] AS [Score_0], [GB_Tree_18_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_18_0] UNION ALL SELECT [GB_Tree_18_1].[KEY] AS [KEY], [GB_Tree_18_1].[Score_0] AS [Score_0], [GB_Tree_18_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_18_1] UNION ALL SELECT [GB_Tree_19_0].[KEY] AS [KEY], [GB_Tree_19_0].[Score_0] AS [Score_0], [GB_Tree_19_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_19_0] UNION ALL SELECT [GB_Tree_19_1].[KEY] AS [KEY], [GB_Tree_19_1].[Score_0] AS [Score_0], [GB_Tree_19_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_19_1] UNION ALL SELECT [GB_Tree_20_0].[KEY] AS [KEY], [GB_Tree_20_0].[Score_0] AS [Score_0], [GB_Tree_20_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_20_0] UNION ALL SELECT [GB_Tree_20_1].[KEY] AS [KEY], [GB_Tree_20_1].[Score_0] AS [Score_0], [GB_Tree_20_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_20_1] UNION ALL SELECT [GB_Tree_21_0].[KEY] AS [KEY], [GB_Tree_21_0].[Score_0] AS [Score_0], [GB_Tree_21_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_21_0] UNION ALL SELECT [GB_Tree_21_1].[KEY] AS [KEY], [GB_Tree_21_1].[Score_0] AS [Score_0], [GB_Tree_21_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_21_1] UNION ALL SELECT [GB_Tree_22_0].[KEY] AS [KEY], [GB_Tree_22_0].[Score_0] AS [Score_0], [GB_Tree_22_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_22_0] UNION ALL SELECT [GB_Tree_22_1].[KEY] AS [KEY], [GB_Tree_22_1].[Score_0] AS [Score_0], [GB_Tree_22_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_22_1] UNION ALL SELECT [GB_Tree_23_0].[KEY] AS [KEY], [GB_Tree_23_0].[Score_0] AS [Score_0], [GB_Tree_23_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_23_0] UNION ALL SELECT [GB_Tree_23_1].[KEY] AS [KEY], [GB_Tree_23_1].[Score_0] AS [Score_0], [GB_Tree_23_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_23_1] UNION ALL SELECT [GB_Tree_24_0].[KEY] AS [KEY], [GB_Tree_24_0].[Score_0] AS [Score_0], [GB_Tree_24_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_24_0] UNION ALL SELECT [GB_Tree_24_1].[KEY] AS [KEY], [GB_Tree_24_1].[Score_0] AS [Score_0], [GB_Tree_24_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_24_1] UNION ALL SELECT [GB_Tree_25_0].[KEY] AS [KEY], [GB_Tree_25_0].[Score_0] AS [Score_0], [GB_Tree_25_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_25_0] UNION ALL SELECT [GB_Tree_25_1].[KEY] AS [KEY], [GB_Tree_25_1].[Score_0] AS [Score_0], [GB_Tree_25_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_25_1] UNION ALL SELECT [GB_Tree_26_0].[KEY] AS [KEY], [GB_Tree_26_0].[Score_0] AS [Score_0], [GB_Tree_26_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_26_0] UNION ALL SELECT [GB_Tree_26_1].[KEY] AS [KEY], [GB_Tree_26_1].[Score_0] AS [Score_0], [GB_Tree_26_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_26_1] UNION ALL SELECT [GB_Tree_27_0].[KEY] AS [KEY], [GB_Tree_27_0].[Score_0] AS [Score_0], [GB_Tree_27_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_27_0] UNION ALL SELECT [GB_Tree_27_1].[KEY] AS [KEY], [GB_Tree_27_1].[Score_0] AS [Score_0], [GB_Tree_27_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_27_1] UNION ALL SELECT [GB_Tree_28_0].[KEY] AS [KEY], [GB_Tree_28_0].[Score_0] AS [Score_0], [GB_Tree_28_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_28_0] UNION ALL SELECT [GB_Tree_28_1].[KEY] AS [KEY], [GB_Tree_28_1].[Score_0] AS [Score_0], [GB_Tree_28_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_28_1] UNION ALL SELECT [GB_Tree_29_0].[KEY] AS [KEY], [GB_Tree_29_0].[Score_0] AS [Score_0], [GB_Tree_29_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_29_0] UNION ALL SELECT [GB_Tree_29_1].[KEY] AS [KEY], [GB_Tree_29_1].[Score_0] AS [Score_0], [GB_Tree_29_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_29_1] UNION ALL SELECT [GB_Tree_30_0].[KEY] AS [KEY], [GB_Tree_30_0].[Score_0] AS [Score_0], [GB_Tree_30_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_30_0] UNION ALL SELECT [GB_Tree_30_1].[KEY] AS [KEY], [GB_Tree_30_1].[Score_0] AS [Score_0], [GB_Tree_30_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_30_1] UNION ALL SELECT [GB_Tree_31_0].[KEY] AS [KEY], [GB_Tree_31_0].[Score_0] AS [Score_0], [GB_Tree_31_0].[Score_1] AS [Score_1] 
FROM [GB_Tree_31_0] UNION ALL SELECT [GB_Tree_31_1].[KEY] AS [KEY], [GB_Tree_31_1].[Score_0] AS [Score_0], [GB_Tree_31_1].[Score_1] AS [Score_1] 
FROM [GB_Tree_31_1]) AS ensemble_score_union), 
[GradBoost_Sum_Scores] AS 
(SELECT [T].[KEY] AS [KEY], [T].[Score_0] AS [Score_0], [T].[Score_1] AS [Score_1] 
FROM (SELECT [Score_Union_CTE].[KEY] AS [KEY], sum([Score_Union_CTE].[Score_0]) AS [Score_0], sum([Score_Union_CTE].[Score_1]) AS [Score_1] 
FROM [Score_Union_CTE] GROUP BY [Score_Union_CTE].[KEY]) AS [T]), 
orig_cte AS 
(SELECT [GradBoost_Sum_Scores].[KEY] AS [KEY], -(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) AS [Score_0], -0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1] AS [Score_1], 1.0 - 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) <= -100.0) THEN -100.0 ELSE -(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) END >= 100.0) THEN 100.0 ELSE CASE WHEN (-(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) <= -100.0) THEN -100.0 ELSE -(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) END END)) AS [Proba_0], 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) <= -100.0) THEN -100.0 ELSE -(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) END >= 100.0) THEN 100.0 ELSE CASE WHEN (-(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) <= -100.0) THEN -100.0 ELSE -(-0.100083458557 + 0.1 * [GradBoost_Sum_Scores].[Score_1]) END END)) AS [Proba_1], CAST(NULL AS FLOAT) AS [LogProba_0], CAST(NULL AS FLOAT) AS [LogProba_1], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM [GradBoost_Sum_Scores]), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Proba] AS [max_Proba] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Proba]) AS [max_Proba] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Proba] AS [max_Proba], [arg_max_t_Proba].[KEY_Proba] AS [KEY_Proba], [arg_max_t_Proba].[arg_max_Proba] AS [arg_max_Proba] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Proba], min(union_with_max.class) AS [arg_max_Proba] 
FROM union_with_max 
WHERE union_with_max.[max_Proba] <= union_with_max.[Proba] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Proba] ON score_max.[KEY] = [arg_max_t_Proba].[KEY_Proba])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], arg_max_cte.[arg_max_Proba] AS [Decision], arg_max_cte.[max_Proba] AS [DecisionProba] 
FROM arg_max_cte