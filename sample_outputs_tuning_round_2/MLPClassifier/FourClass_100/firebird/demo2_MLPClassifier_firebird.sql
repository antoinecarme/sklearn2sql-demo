-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE) AS "Feature_9", CAST("ADS"."Feature_10" AS DOUBLE) AS "Feature_10", CAST("ADS"."Feature_11" AS DOUBLE) AS "Feature_11", CAST("ADS"."Feature_12" AS DOUBLE) AS "Feature_12", CAST("ADS"."Feature_13" AS DOUBLE) AS "Feature_13", CAST("ADS"."Feature_14" AS DOUBLE) AS "Feature_14", CAST("ADS"."Feature_15" AS DOUBLE) AS "Feature_15", CAST("ADS"."Feature_16" AS DOUBLE) AS "Feature_16", CAST("ADS"."Feature_17" AS DOUBLE) AS "Feature_17", CAST("ADS"."Feature_18" AS DOUBLE) AS "Feature_18", CAST("ADS"."Feature_19" AS DOUBLE) AS "Feature_19", CAST("ADS"."Feature_20" AS DOUBLE) AS "Feature_20", CAST("ADS"."Feature_21" AS DOUBLE) AS "Feature_21", CAST("ADS"."Feature_22" AS DOUBLE) AS "Feature_22", CAST("ADS"."Feature_23" AS DOUBLE) AS "Feature_23", CAST("ADS"."Feature_24" AS DOUBLE) AS "Feature_24", CAST("ADS"."Feature_25" AS DOUBLE) AS "Feature_25", CAST("ADS"."Feature_26" AS DOUBLE) AS "Feature_26", CAST("ADS"."Feature_27" AS DOUBLE) AS "Feature_27", CAST("ADS"."Feature_28" AS DOUBLE) AS "Feature_28", CAST("ADS"."Feature_29" AS DOUBLE) AS "Feature_29", CAST("ADS"."Feature_30" AS DOUBLE) AS "Feature_30", CAST("ADS"."Feature_31" AS DOUBLE) AS "Feature_31", CAST("ADS"."Feature_32" AS DOUBLE) AS "Feature_32", CAST("ADS"."Feature_33" AS DOUBLE) AS "Feature_33", CAST("ADS"."Feature_34" AS DOUBLE) AS "Feature_34", CAST("ADS"."Feature_35" AS DOUBLE) AS "Feature_35", CAST("ADS"."Feature_36" AS DOUBLE) AS "Feature_36", CAST("ADS"."Feature_37" AS DOUBLE) AS "Feature_37", CAST("ADS"."Feature_38" AS DOUBLE) AS "Feature_38", CAST("ADS"."Feature_39" AS DOUBLE) AS "Feature_39", CAST("ADS"."Feature_40" AS DOUBLE) AS "Feature_40", CAST("ADS"."Feature_41" AS DOUBLE) AS "Feature_41", CAST("ADS"."Feature_42" AS DOUBLE) AS "Feature_42", CAST("ADS"."Feature_43" AS DOUBLE) AS "Feature_43", CAST("ADS"."Feature_44" AS DOUBLE) AS "Feature_44", CAST("ADS"."Feature_45" AS DOUBLE) AS "Feature_45", CAST("ADS"."Feature_46" AS DOUBLE) AS "Feature_46", CAST("ADS"."Feature_47" AS DOUBLE) AS "Feature_47", CAST("ADS"."Feature_48" AS DOUBLE) AS "Feature_48", CAST("ADS"."Feature_49" AS DOUBLE) AS "Feature_49", CAST("ADS"."Feature_50" AS DOUBLE) AS "Feature_50", CAST("ADS"."Feature_51" AS DOUBLE) AS "Feature_51", CAST("ADS"."Feature_52" AS DOUBLE) AS "Feature_52", CAST("ADS"."Feature_53" AS DOUBLE) AS "Feature_53", CAST("ADS"."Feature_54" AS DOUBLE) AS "Feature_54", CAST("ADS"."Feature_55" AS DOUBLE) AS "Feature_55", CAST("ADS"."Feature_56" AS DOUBLE) AS "Feature_56", CAST("ADS"."Feature_57" AS DOUBLE) AS "Feature_57", CAST("ADS"."Feature_58" AS DOUBLE) AS "Feature_58", CAST("ADS"."Feature_59" AS DOUBLE) AS "Feature_59", CAST("ADS"."Feature_60" AS DOUBLE) AS "Feature_60", CAST("ADS"."Feature_61" AS DOUBLE) AS "Feature_61", CAST("ADS"."Feature_62" AS DOUBLE) AS "Feature_62", CAST("ADS"."Feature_63" AS DOUBLE) AS "Feature_63", CAST("ADS"."Feature_64" AS DOUBLE) AS "Feature_64", CAST("ADS"."Feature_65" AS DOUBLE) AS "Feature_65", CAST("ADS"."Feature_66" AS DOUBLE) AS "Feature_66", CAST("ADS"."Feature_67" AS DOUBLE) AS "Feature_67", CAST("ADS"."Feature_68" AS DOUBLE) AS "Feature_68", CAST("ADS"."Feature_69" AS DOUBLE) AS "Feature_69", CAST("ADS"."Feature_70" AS DOUBLE) AS "Feature_70", CAST("ADS"."Feature_71" AS DOUBLE) AS "Feature_71", CAST("ADS"."Feature_72" AS DOUBLE) AS "Feature_72", CAST("ADS"."Feature_73" AS DOUBLE) AS "Feature_73", CAST("ADS"."Feature_74" AS DOUBLE) AS "Feature_74", CAST("ADS"."Feature_75" AS DOUBLE) AS "Feature_75", CAST("ADS"."Feature_76" AS DOUBLE) AS "Feature_76", CAST("ADS"."Feature_77" AS DOUBLE) AS "Feature_77", CAST("ADS"."Feature_78" AS DOUBLE) AS "Feature_78", CAST("ADS"."Feature_79" AS DOUBLE) AS "Feature_79", CAST("ADS"."Feature_80" AS DOUBLE) AS "Feature_80", CAST("ADS"."Feature_81" AS DOUBLE) AS "Feature_81", CAST("ADS"."Feature_82" AS DOUBLE) AS "Feature_82", CAST("ADS"."Feature_83" AS DOUBLE) AS "Feature_83", CAST("ADS"."Feature_84" AS DOUBLE) AS "Feature_84", CAST("ADS"."Feature_85" AS DOUBLE) AS "Feature_85", CAST("ADS"."Feature_86" AS DOUBLE) AS "Feature_86", CAST("ADS"."Feature_87" AS DOUBLE) AS "Feature_87", CAST("ADS"."Feature_88" AS DOUBLE) AS "Feature_88", CAST("ADS"."Feature_89" AS DOUBLE) AS "Feature_89", CAST("ADS"."Feature_90" AS DOUBLE) AS "Feature_90", CAST("ADS"."Feature_91" AS DOUBLE) AS "Feature_91", CAST("ADS"."Feature_92" AS DOUBLE) AS "Feature_92", CAST("ADS"."Feature_93" AS DOUBLE) AS "Feature_93", CAST("ADS"."Feature_94" AS DOUBLE) AS "Feature_94", CAST("ADS"."Feature_95" AS DOUBLE) AS "Feature_95", CAST("ADS"."Feature_96" AS DOUBLE) AS "Feature_96", CAST("ADS"."Feature_97" AS DOUBLE) AS "Feature_97", CAST("ADS"."Feature_98" AS DOUBLE) AS "Feature_98", CAST("ADS"."Feature_99" AS DOUBLE) AS "Feature_99" 
FROM "FourClass_100" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.014328706577 * "IL"."Feature_0" + -0.278229250185 * "IL"."Feature_1" + -0.557902456661 * "IL"."Feature_2" + -0.271934202488 * "IL"."Feature_3" + 0.655564550593 * "IL"."Feature_4" + 0.0877771951342 * "IL"."Feature_5" + 0.0278219727183 * "IL"."Feature_6" + -0.136553331731 * "IL"."Feature_7" + -0.344033275463 * "IL"."Feature_8" + 0.176423210677 * "IL"."Feature_9" + -0.337681090291 * "IL"."Feature_10" + -0.739802267277 * "IL"."Feature_11" + 0.314735780233 * "IL"."Feature_12" + 0.615702090349 * "IL"."Feature_13" + 0.197353532733 * "IL"."Feature_14" + -0.158052448382 * "IL"."Feature_15" + 0.410897266127 * "IL"."Feature_16" + -1.49615695291 * "IL"."Feature_17" + 0.0454698205621 * "IL"."Feature_18" + 0.508320496962 * "IL"."Feature_19" + -0.558887261242 * "IL"."Feature_20" + -0.290572708303 * "IL"."Feature_21" + 0.466812726083 * "IL"."Feature_22" + -0.77887684464 * "IL"."Feature_23" + -0.347900646097 * "IL"."Feature_24" + 0.791718849706 * "IL"."Feature_25" + 0.13540909026 * "IL"."Feature_26" + 0.0869777631482 * "IL"."Feature_27" + -0.261771575668 * "IL"."Feature_28" + 0.534779607204 * "IL"."Feature_29" + -0.202403837292 * "IL"."Feature_30" + 0.385349496068 * "IL"."Feature_31" + -0.356019123901 * "IL"."Feature_32" + -0.530556373062 * "IL"."Feature_33" + 0.173718404752 * "IL"."Feature_34" + -0.220059313682 * "IL"."Feature_35" + -0.160043306607 * "IL"."Feature_36" + -0.370220588758 * "IL"."Feature_37" + 0.268542476647 * "IL"."Feature_38" + 0.39701442824 * "IL"."Feature_39" + -0.311117332097 * "IL"."Feature_40" + -0.604337171887 * "IL"."Feature_41" + -0.143966716409 * "IL"."Feature_42" + 0.364090231213 * "IL"."Feature_43" + 0.0737120598489 * "IL"."Feature_44" + 0.0464929459664 * "IL"."Feature_45" + 0.285634893476 * "IL"."Feature_46" + 0.690156133055 * "IL"."Feature_47" + -0.259900725536 * "IL"."Feature_48" + 0.353303408237 * "IL"."Feature_49" + 0.685705391598 * "IL"."Feature_50" + 0.180303342702 * "IL"."Feature_51" + 0.193106860407 * "IL"."Feature_52" + 0.134032859641 * "IL"."Feature_53" + 0.503608517468 * "IL"."Feature_54" + -0.328702983548 * "IL"."Feature_55" + -0.3720793625 * "IL"."Feature_56" + -0.402161049509 * "IL"."Feature_57" + -0.427566113181 * "IL"."Feature_58" + 0.115255255881 * "IL"."Feature_59" + 0.632998833539 * "IL"."Feature_60" + 0.0323094239211 * "IL"."Feature_61" + 0.0349869439619 * "IL"."Feature_62" + -0.172798798785 * "IL"."Feature_63" + -0.739844395188 * "IL"."Feature_64" + -0.4403548297 * "IL"."Feature_65" + 0.0449227327873 * "IL"."Feature_66" + 0.43643261236 * "IL"."Feature_67" + -0.820383412319 * "IL"."Feature_68" + 0.397591567783 * "IL"."Feature_69" + 0.102500104341 * "IL"."Feature_70" + 0.403761987413 * "IL"."Feature_71" + -0.241734112875 * "IL"."Feature_72" + -0.0169636000049 * "IL"."Feature_73" + -0.081714459454 * "IL"."Feature_74" + 0.0405720508866 * "IL"."Feature_75" + -0.432355165009 * "IL"."Feature_76" + -0.397429532241 * "IL"."Feature_77" + -0.111338748759 * "IL"."Feature_78" + 0.401240761621 * "IL"."Feature_79" + -0.180997251345 * "IL"."Feature_80" + -0.00273663829072 * "IL"."Feature_81" + -0.677472997974 * "IL"."Feature_82" + 0.168635000268 * "IL"."Feature_83" + 0.374958533398 * "IL"."Feature_84" + -0.744916306851 * "IL"."Feature_85" + 0.229007739085 * "IL"."Feature_86" + 0.224856229496 * "IL"."Feature_87" + -0.484809958121 * "IL"."Feature_88" + -0.378527408269 * "IL"."Feature_89" + 0.0276690502971 * "IL"."Feature_90" + 0.0783637847546 * "IL"."Feature_91" + 0.0426659559639 * "IL"."Feature_92" + -0.463955041561 * "IL"."Feature_93" + 4.52846793505e-05 * "IL"."Feature_94" + 0.0869230047951 * "IL"."Feature_95" + 0.167938968331 * "IL"."Feature_96" + -0.0904966214118 * "IL"."Feature_97" + 0.0747677842785 * "IL"."Feature_98" + 0.234868068468 * "IL"."Feature_99" + 0.0256000858217 AS "NEUR_1_1", 0.693816467588 * "IL"."Feature_0" + -0.464937748663 * "IL"."Feature_1" + -0.276464393986 * "IL"."Feature_2" + 0.326010681987 * "IL"."Feature_3" + -0.708300425739 * "IL"."Feature_4" + 0.492088210189 * "IL"."Feature_5" + -0.918506329423 * "IL"."Feature_6" + 0.0340207860897 * "IL"."Feature_7" + 0.490397502914 * "IL"."Feature_8" + 0.256740500968 * "IL"."Feature_9" + -0.635315512688 * "IL"."Feature_10" + 0.232867294272 * "IL"."Feature_11" + -0.127759642876 * "IL"."Feature_12" + 0.485196377823 * "IL"."Feature_13" + 0.156896535096 * "IL"."Feature_14" + -0.394990699394 * "IL"."Feature_15" + -0.180117553229 * "IL"."Feature_16" + 0.181242947218 * "IL"."Feature_17" + -0.19836245421 * "IL"."Feature_18" + -0.0990380340823 * "IL"."Feature_19" + -0.532462366007 * "IL"."Feature_20" + -0.0148297335329 * "IL"."Feature_21" + -1.08199256066 * "IL"."Feature_22" + -0.056923091831 * "IL"."Feature_23" + 0.0656405576739 * "IL"."Feature_24" + 0.295247284591 * "IL"."Feature_25" + 0.0452559912454 * "IL"."Feature_26" + 0.340823199526 * "IL"."Feature_27" + 0.196146573049 * "IL"."Feature_28" + -0.375656468372 * "IL"."Feature_29" + -0.5104568566 * "IL"."Feature_30" + 0.0864455569764 * "IL"."Feature_31" + -0.037849830762 * "IL"."Feature_32" + -0.0782595636097 * "IL"."Feature_33" + -0.823736879723 * "IL"."Feature_34" + -0.426234329029 * "IL"."Feature_35" + 0.285597671449 * "IL"."Feature_36" + 0.367631858624 * "IL"."Feature_37" + -0.403251989764 * "IL"."Feature_38" + 0.350080755969 * "IL"."Feature_39" + 0.131637435052 * "IL"."Feature_40" + 1.0258539575 * "IL"."Feature_41" + 0.160951564199 * "IL"."Feature_42" + -0.438326293361 * "IL"."Feature_43" + -0.46667490888 * "IL"."Feature_44" + -0.15591497688 * "IL"."Feature_45" + 0.0630066921204 * "IL"."Feature_46" + -0.242507704033 * "IL"."Feature_47" + 0.544908333276 * "IL"."Feature_48" + -0.469752519081 * "IL"."Feature_49" + 0.160007859269 * "IL"."Feature_50" + -0.631327296101 * "IL"."Feature_51" + -0.636719538143 * "IL"."Feature_52" + 0.106024832772 * "IL"."Feature_53" + 0.0500581030861 * "IL"."Feature_54" + 0.289483474244 * "IL"."Feature_55" + -0.375667810244 * "IL"."Feature_56" + 0.0484506053839 * "IL"."Feature_57" + 0.238011263223 * "IL"."Feature_58" + 0.00280198541539 * "IL"."Feature_59" + 0.0887408619661 * "IL"."Feature_60" + -0.0662102475695 * "IL"."Feature_61" + -0.00656985220889 * "IL"."Feature_62" + 0.31462856034 * "IL"."Feature_63" + 0.927981152493 * "IL"."Feature_64" + 0.66436139569 * "IL"."Feature_65" + 0.102280364275 * "IL"."Feature_66" + 0.0686226456687 * "IL"."Feature_67" + 0.743294711082 * "IL"."Feature_68" + -0.165359632001 * "IL"."Feature_69" + 0.115639248901 * "IL"."Feature_70" + 0.254618763175 * "IL"."Feature_71" + -0.165668532453 * "IL"."Feature_72" + 0.546807685788 * "IL"."Feature_73" + 0.0260610057053 * "IL"."Feature_74" + 0.426892712264 * "IL"."Feature_75" + 0.767365304194 * "IL"."Feature_76" + -0.107684431466 * "IL"."Feature_77" + -0.0553852476901 * "IL"."Feature_78" + 0.654237844033 * "IL"."Feature_79" + -0.301187683111 * "IL"."Feature_80" + 0.559079685962 * "IL"."Feature_81" + 0.0116011188088 * "IL"."Feature_82" + 0.0755979238057 * "IL"."Feature_83" + -0.635119957577 * "IL"."Feature_84" + -9.61263979633e-05 * "IL"."Feature_85" + -0.336745944666 * "IL"."Feature_86" + -0.30515573099 * "IL"."Feature_87" + 0.368821252834 * "IL"."Feature_88" + -0.120869461341 * "IL"."Feature_89" + -0.227505118442 * "IL"."Feature_90" + -0.540327728001 * "IL"."Feature_91" + 0.626739438629 * "IL"."Feature_92" + -0.187256920722 * "IL"."Feature_93" + 0.443947260482 * "IL"."Feature_94" + -0.566568894111 * "IL"."Feature_95" + -0.275083226002 * "IL"."Feature_96" + -1.11180600703 * "IL"."Feature_97" + 0.334502222108 * "IL"."Feature_98" + 0.0333228027258 * "IL"."Feature_99" + -0.428292514208 AS "NEUR_1_2", -0.205104046475 * "IL"."Feature_0" + 0.162840669606 * "IL"."Feature_1" + 0.378234796812 * "IL"."Feature_2" + 0.399167857713 * "IL"."Feature_3" + -0.408063724982 * "IL"."Feature_4" + 0.264107935844 * "IL"."Feature_5" + 0.84962912418 * "IL"."Feature_6" + -0.152497941026 * "IL"."Feature_7" + 0.143811518764 * "IL"."Feature_8" + 0.201342837022 * "IL"."Feature_9" + 0.0705099092031 * "IL"."Feature_10" + 0.21708659413 * "IL"."Feature_11" + -0.211467449827 * "IL"."Feature_12" + -0.342625277302 * "IL"."Feature_13" + -0.26222325992 * "IL"."Feature_14" + -1.28383786943 * "IL"."Feature_15" + 0.343543543453 * "IL"."Feature_16" + -0.13100412393 * "IL"."Feature_17" + 0.544311213888 * "IL"."Feature_18" + -0.02087920468 * "IL"."Feature_19" + 0.145034954807 * "IL"."Feature_20" + -0.11978406675 * "IL"."Feature_21" + 0.211873094565 * "IL"."Feature_22" + -0.293841286736 * "IL"."Feature_23" + 0.407908609189 * "IL"."Feature_24" + 0.0273470300746 * "IL"."Feature_25" + 0.421779748387 * "IL"."Feature_26" + 0.0855559676126 * "IL"."Feature_27" + -0.530642006337 * "IL"."Feature_28" + 0.508423280505 * "IL"."Feature_29" + 0.209440153168 * "IL"."Feature_30" + 0.253612646367 * "IL"."Feature_31" + -0.428279323161 * "IL"."Feature_32" + 0.385793791244 * "IL"."Feature_33" + -0.528546288314 * "IL"."Feature_34" + -1.54029425597 * "IL"."Feature_35" + 0.310130749948 * "IL"."Feature_36" + 0.388560371656 * "IL"."Feature_37" + 1.53161056749 * "IL"."Feature_38" + -0.790034485491 * "IL"."Feature_39" + -0.976040405049 * "IL"."Feature_40" + -0.138132552931 * "IL"."Feature_41" + -0.31110060715 * "IL"."Feature_42" + 0.568909462247 * "IL"."Feature_43" + -0.290683390577 * "IL"."Feature_44" + -0.00634288124807 * "IL"."Feature_45" + 0.314989250007 * "IL"."Feature_46" + -0.33473253563 * "IL"."Feature_47" + 0.342723306801 * "IL"."Feature_48" + 0.0924863874045 * "IL"."Feature_49" + 0.107860267803 * "IL"."Feature_50" + -0.580481879709 * "IL"."Feature_51" + -0.42198780675 * "IL"."Feature_52" + 0.555662141725 * "IL"."Feature_53" + -0.0702218056021 * "IL"."Feature_54" + 0.0506989248898 * "IL"."Feature_55" + 1.18296856449 * "IL"."Feature_56" + 0.113889645558 * "IL"."Feature_57" + -0.145816651726 * "IL"."Feature_58" + -0.47169492523 * "IL"."Feature_59" + -0.279181901324 * "IL"."Feature_60" + -0.873601749035 * "IL"."Feature_61" + 0.0144785691026 * "IL"."Feature_62" + 0.114880048632 * "IL"."Feature_63" + -0.322000265335 * "IL"."Feature_64" + -0.150887072875 * "IL"."Feature_65" + 0.966393764033 * "IL"."Feature_66" + 0.433973774502 * "IL"."Feature_67" + 0.160390712305 * "IL"."Feature_68" + -0.0577891961493 * "IL"."Feature_69" + -0.403145499999 * "IL"."Feature_70" + -0.66743554432 * "IL"."Feature_71" + 0.495426374122 * "IL"."Feature_72" + 0.162190403212 * "IL"."Feature_73" + -0.44716142628 * "IL"."Feature_74" + -0.90860483105 * "IL"."Feature_75" + 0.429005987843 * "IL"."Feature_76" + 0.242118468926 * "IL"."Feature_77" + -0.367979759724 * "IL"."Feature_78" + 0.307067335905 * "IL"."Feature_79" + 0.0277022174973 * "IL"."Feature_80" + 0.120915926623 * "IL"."Feature_81" + 0.167155412084 * "IL"."Feature_82" + -0.594181998492 * "IL"."Feature_83" + 0.444434556965 * "IL"."Feature_84" + 0.379808595818 * "IL"."Feature_85" + -0.623745373527 * "IL"."Feature_86" + -0.183193486237 * "IL"."Feature_87" + 0.172595434714 * "IL"."Feature_88" + -0.033414647534 * "IL"."Feature_89" + 0.120679463458 * "IL"."Feature_90" + -0.249481291776 * "IL"."Feature_91" + 0.0770639624363 * "IL"."Feature_92" + -0.0239468256514 * "IL"."Feature_93" + 0.556721528564 * "IL"."Feature_94" + 0.0310738132181 * "IL"."Feature_95" + -0.722952603691 * "IL"."Feature_96" + 0.696609487398 * "IL"."Feature_97" + -0.0203297868413 * "IL"."Feature_98" + 0.381108110501 * "IL"."Feature_99" + -0.03716530499 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.787176167548 * "HL_1_relu"."NEUR_1_1" + 0.499242299727 * "HL_1_relu"."NEUR_1_2" + 1.30619446836 * "HL_1_relu"."NEUR_1_3" + -0.876342857777 AS "NEUR_2_1", -0.737873051423 * "HL_1_relu"."NEUR_1_1" + 0.0172887468519 * "HL_1_relu"."NEUR_1_2" + -0.664529474373 * "HL_1_relu"."NEUR_1_3" + 0.447383174604 AS "NEUR_2_2", -1.59131450316 * "HL_1_relu"."NEUR_1_1" + 1.78008595067 * "HL_1_relu"."NEUR_1_2" + 0.175993681335 * "HL_1_relu"."NEUR_1_3" + -0.382644301835 AS "NEUR_2_3", -0.807828986683 * "HL_1_relu"."NEUR_1_1" + -0.0168876122768 * "HL_1_relu"."NEUR_1_2" + -0.740127577117 * "HL_1_relu"."NEUR_1_3" + 1.35248468753 AS "NEUR_2_4", -0.609344750023 * "HL_1_relu"."NEUR_1_1" + -0.377667219343 * "HL_1_relu"."NEUR_1_2" + -0.672999402943 * "HL_1_relu"."NEUR_1_3" + -0.018078316227 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -1.34510286205 * "HL_2_relu"."NEUR_2_1" + -0.643987434614 * "HL_2_relu"."NEUR_2_2" + -1.9127515099 * "HL_2_relu"."NEUR_2_3" + -0.0403082141561 * "HL_2_relu"."NEUR_2_4" + 0.589886994439 * "HL_2_relu"."NEUR_2_5" + 1.11015052183 AS "NEUR_3_1", 0.736950415053 * "HL_2_relu"."NEUR_2_1" + -0.0630118939995 * "HL_2_relu"."NEUR_2_2" + -0.729833722433 * "HL_2_relu"."NEUR_2_3" + -0.413925638556 * "HL_2_relu"."NEUR_2_4" + 0.396103109488 * "HL_2_relu"."NEUR_2_5" + 0.396893789839 AS "NEUR_3_2", 0.68723892171 * "HL_2_relu"."NEUR_2_1" + 0.285194083657 * "HL_2_relu"."NEUR_2_2" + 0.906454768639 * "HL_2_relu"."NEUR_2_3" + -0.948315726609 * "HL_2_relu"."NEUR_2_4" + 0.66350461012 * "HL_2_relu"."NEUR_2_5" + -1.33898742595 AS "NEUR_3_3", 0.537187016032 * "HL_2_relu"."NEUR_2_1" + 0.786458229819 * "HL_2_relu"."NEUR_2_2" + 0.944109012517 * "HL_2_relu"."NEUR_2_3" + 1.12678075543 * "HL_2_relu"."NEUR_2_4" + -0.485525647359 * "HL_2_relu"."NEUR_2_5" + -1.48550710537 AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "Score_0", "OL_softmax"."NEUR_3_2" AS "Score_1", "OL_softmax"."NEUR_3_3" AS "Score_2", "OL_softmax"."NEUR_3_4" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "OL_softmax"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(CASE WHEN (score_max."Score_0" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_0" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_0", exp(CASE WHEN (score_max."Score_1" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_1" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_1", exp(CASE WHEN (score_max."Score_2" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_2" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_2", exp(CASE WHEN (score_max."Score_3" - score_max."max_Score" >= -709.782712893) THEN score_max."Score_3" - score_max."max_Score" ELSE -709.782712893 END) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS class, score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS class, score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS class, score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS class, score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", min(union_with_max.class) AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."max_Score" <= union_with_max."Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE -1.79769313486231e+308 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE -1.79769313486231e+308 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", CASE WHEN (arg_max_cte."SoftProba_0" <= CASE WHEN (arg_max_cte."SoftProba_1" <= CASE WHEN (arg_max_cte."SoftProba_2" <= arg_max_cte."SoftProba_3") THEN arg_max_cte."SoftProba_3" ELSE arg_max_cte."SoftProba_2" END) THEN CASE WHEN (arg_max_cte."SoftProba_2" <= arg_max_cte."SoftProba_3") THEN arg_max_cte."SoftProba_3" ELSE arg_max_cte."SoftProba_2" END ELSE arg_max_cte."SoftProba_1" END) THEN CASE WHEN (arg_max_cte."SoftProba_1" <= CASE WHEN (arg_max_cte."SoftProba_2" <= arg_max_cte."SoftProba_3") THEN arg_max_cte."SoftProba_3" ELSE arg_max_cte."SoftProba_2" END) THEN CASE WHEN (arg_max_cte."SoftProba_2" <= arg_max_cte."SoftProba_3") THEN arg_max_cte."SoftProba_3" ELSE arg_max_cte."SoftProba_2" END ELSE arg_max_cte."SoftProba_1" END ELSE arg_max_cte."SoftProba_0" END AS "DecisionProba" 
FROM arg_max_cte