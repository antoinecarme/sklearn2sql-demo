-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.0618292052381 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.177024637672 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.041383850049 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.130606468058 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.0595581047198 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN -0.0489290898701 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.191017978617 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0220495967327 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.0577298140341 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN -0.052549592052 ELSE "ADS"."Feature_9" END AS impter_11 
FROM "BinaryClass_10" AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.0618292052381) / 1.22838395621 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.177024637672) / 0.940821656314 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.041383850049) / 1.07418248888 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.130606468058) / 1.07922445597 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - -0.0595581047198) / 1.10958911905 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - -0.0489290898701) / 1.3781871812 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.191017978617) / 0.97352852463 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.0220495967327) / 0.474603012038 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - -0.0577298140341) / 1.06460752484 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - -0.052549592052) / 1.22453288966 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -1.22917382065 * "IL".scaler_2 + -0.443171696377 * "IL".scaler_3 + -6.22006154248 * "IL".scaler_4 + 4.73689080474 * "IL".scaler_5 + -4.51861864915 * "IL".scaler_6 + 1.83842515618 * "IL".scaler_7 + -4.95842578126 * "IL".scaler_8 + -1.02171642856 * "IL".scaler_9 + 3.99118315199 * "IL".scaler_10 + 0.595358813904 * "IL".scaler_11 + -11.5142741329 AS "NEUR_1_1", 4.84974031681 * "IL".scaler_2 + -1.95790996662 * "IL".scaler_3 + 1.74194750689 * "IL".scaler_4 + 2.68835537858 * "IL".scaler_5 + 2.72100662394 * "IL".scaler_6 + 0.443008373854 * "IL".scaler_7 + -2.53509371613 * "IL".scaler_8 + 4.18980960499 * "IL".scaler_9 + 1.58296409389 * "IL".scaler_10 + -4.95945444826 * "IL".scaler_11 + -5.61785766014 AS "NEUR_1_2", -9.87939502208 * "IL".scaler_2 + 0.602722282631 * "IL".scaler_3 + -1.98370416508 * "IL".scaler_4 + 2.17990803895 * "IL".scaler_5 + 0.965532149473 * "IL".scaler_6 + -5.64678677374 * "IL".scaler_7 + -6.95694790816 * "IL".scaler_8 + -12.0228152231 * "IL".scaler_9 + -1.7516722934 * "IL".scaler_10 + 12.8485454883 * "IL".scaler_11 + -1.27072101993 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.852049713989 * "HL_1_relu"."NEUR_1_1" + 1.78678680703 * "HL_1_relu"."NEUR_1_2" + -0.46628369321 * "HL_1_relu"."NEUR_1_3" + -4.63518592796 AS "NEUR_2_1", -7.05559227287 * "HL_1_relu"."NEUR_1_1" + -3.40003860627 * "HL_1_relu"."NEUR_1_2" + -3.34116710415 * "HL_1_relu"."NEUR_1_3" + 11.4603909905 AS "NEUR_2_2", 9.8572105631 * "HL_1_relu"."NEUR_1_1" + 0.0732484435435 * "HL_1_relu"."NEUR_1_2" + 10.0429398136 * "HL_1_relu"."NEUR_1_3" + 1.91302659805 AS "NEUR_2_3", 0.111062949241 * "HL_1_relu"."NEUR_1_1" + -0.504618130049 * "HL_1_relu"."NEUR_1_2" + -0.406531361408 * "HL_1_relu"."NEUR_1_3" + -0.796433042434 AS "NEUR_2_4", -0.567505816852 * "HL_1_relu"."NEUR_1_1" + 3.04501862313 * "HL_1_relu"."NEUR_1_2" + -0.528917521873 * "HL_1_relu"."NEUR_1_3" + -8.40642016416 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -5.68211731466 * "HL_2_relu"."NEUR_2_1" + -4.43793285892 * "HL_2_relu"."NEUR_2_2" + 15.1468763244 * "HL_2_relu"."NEUR_2_3" + 0.700668966129 * "HL_2_relu"."NEUR_2_4" + -10.615556034 * "HL_2_relu"."NEUR_2_5" + -4.83459169721 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (CASE WHEN (-"OL_BA"."NEUR_3_1" <= -100.0) THEN -100.0 ELSE -"OL_BA"."NEUR_3_1" END >= 100.0) THEN 100.0 ELSE CASE WHEN (-"OL_BA"."NEUR_3_1" <= -100.0) THEN -100.0 ELSE -"OL_BA"."NEUR_3_1" END END >= -709.782712893) THEN CASE WHEN (CASE WHEN (-"OL_BA"."NEUR_3_1" <= -100.0) THEN -100.0 ELSE -"OL_BA"."NEUR_3_1" END >= 100.0) THEN 100.0 ELSE CASE WHEN (-"OL_BA"."NEUR_3_1" <= -100.0) THEN -100.0 ELSE -"OL_BA"."NEUR_3_1" END END ELSE -709.782712893 END)) AS "NEUR_3_1" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_logistic"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", 1.0 - "OL_logistic"."NEUR_3_1" AS "Proba_0", "OL_logistic"."NEUR_3_1" AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "OL_logistic"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -1.79769313486231e+308 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -1.79769313486231e+308 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte