-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 14.0777120879 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 19.0390549451 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 91.6617802198 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 650.967692308 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.0964218461538 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.104416131868 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.0882623268132 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.0485164 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.181588571429 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.0629403076923 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 0.409917362637 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 1.21706945055 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 2.90524901099 ELSE "ADS"."Feature_12" END AS impter_14, CASE WHEN ("ADS"."Feature_13" IS NULL) THEN 40.8798857143 ELSE "ADS"."Feature_13" END AS impter_15, CASE WHEN ("ADS"."Feature_14" IS NULL) THEN 0.00705597142857 ELSE "ADS"."Feature_14" END AS impter_16, CASE WHEN ("ADS"."Feature_15" IS NULL) THEN 0.0255678307692 ELSE "ADS"."Feature_15" END AS impter_17, CASE WHEN ("ADS"."Feature_16" IS NULL) THEN 0.0319992562637 ELSE "ADS"."Feature_16" END AS impter_18, CASE WHEN ("ADS"."Feature_17" IS NULL) THEN 0.0119723692308 ELSE "ADS"."Feature_17" END AS impter_19, CASE WHEN ("ADS"."Feature_18" IS NULL) THEN 0.0208962 ELSE "ADS"."Feature_18" END AS impter_20, CASE WHEN ("ADS"."Feature_19" IS NULL) THEN 0.00384655186813 ELSE "ADS"."Feature_19" END AS impter_21, CASE WHEN ("ADS"."Feature_20" IS NULL) THEN 16.1777648352 ELSE "ADS"."Feature_20" END AS impter_22, CASE WHEN ("ADS"."Feature_21" IS NULL) THEN 25.2650549451 ELSE "ADS"."Feature_21" END AS impter_23, CASE WHEN ("ADS"."Feature_22" IS NULL) THEN 106.68156044 ELSE "ADS"."Feature_22" END AS impter_24, CASE WHEN ("ADS"."Feature_23" IS NULL) THEN 870.863956044 ELSE "ADS"."Feature_23" END AS impter_25, CASE WHEN ("ADS"."Feature_24" IS NULL) THEN 0.13182756044 ELSE "ADS"."Feature_24" END AS impter_26, CASE WHEN ("ADS"."Feature_25" IS NULL) THEN 0.249918065934 ELSE "ADS"."Feature_25" END AS impter_27, CASE WHEN ("ADS"."Feature_26" IS NULL) THEN 0.265461593407 ELSE "ADS"."Feature_26" END AS impter_28, CASE WHEN ("ADS"."Feature_27" IS NULL) THEN 0.11348798022 ELSE "ADS"."Feature_27" END AS impter_29, CASE WHEN ("ADS"."Feature_28" IS NULL) THEN 0.289788131868 ELSE "ADS"."Feature_28" END AS impter_30, CASE WHEN ("ADS"."Feature_29" IS NULL) THEN 0.0836414505495 ELSE "ADS"."Feature_29" END AS impter_31 
FROM "BreastCancer" "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 14.0777120879) / 3.5451492987 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 19.0390549451) / 4.16229715042 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 91.6617802198) / 24.5039719435 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 650.967692308) / 355.702823164 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.0964218461538) / 0.0141978196631 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.104416131868) / 0.0534036946697 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.0882623268132) / 0.0819120016263 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.0485164) / 0.0393731173967 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.181588571429) / 0.0277900583287 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.0629403076923) / 0.00701935458617 AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS FLOAT) - 0.409917362637) / 0.291204008368 AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS FLOAT) - 1.21706945055) / 0.536389639634 AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS FLOAT) - 2.90524901099) / 2.14249442998 AS scaler_14, (CAST("ADS_imp_1_OUT".impter_15 AS FLOAT) - 40.8798857143) / 48.2247544796 AS scaler_15, (CAST("ADS_imp_1_OUT".impter_16 AS FLOAT) - 0.00705597142857) / 0.00286365165657 AS scaler_16, (CAST("ADS_imp_1_OUT".impter_17 AS FLOAT) - 0.0255678307692) / 0.017947013631 AS scaler_17, (CAST("ADS_imp_1_OUT".impter_18 AS FLOAT) - 0.0319992562637) / 0.0316649367214 AS scaler_18, (CAST("ADS_imp_1_OUT".impter_19 AS FLOAT) - 0.0119723692308) / 0.0063920055894 AS scaler_19, (CAST("ADS_imp_1_OUT".impter_20 AS FLOAT) - 0.0208962) / 0.00858291007987 AS scaler_20, (CAST("ADS_imp_1_OUT".impter_21 AS FLOAT) - 0.00384655186813) / 0.00274360758662 AS scaler_21, (CAST("ADS_imp_1_OUT".impter_22 AS FLOAT) - 16.1777648352) / 4.8174588162 AS scaler_22, (CAST("ADS_imp_1_OUT".impter_23 AS FLOAT) - 25.2650549451) / 5.92332412867 AS scaler_23, (CAST("ADS_imp_1_OUT".impter_24 AS FLOAT) - 106.68156044) / 33.7038583761 AS scaler_24, (CAST("ADS_imp_1_OUT".impter_25 AS FLOAT) - 870.863956044) / 566.995055987 AS scaler_25, (CAST("ADS_imp_1_OUT".impter_26 AS FLOAT) - 0.13182756044) / 0.0227482075223 AS scaler_26, (CAST("ADS_imp_1_OUT".impter_27 AS FLOAT) - 0.249918065934) / 0.152468936443 AS scaler_27, (CAST("ADS_imp_1_OUT".impter_28 AS FLOAT) - 0.265461593407) / 0.206925686782 AS scaler_28, (CAST("ADS_imp_1_OUT".impter_29 AS FLOAT) - 0.11348798022) / 0.0663814127852 AS scaler_29, (CAST("ADS_imp_1_OUT".impter_30 AS FLOAT) - 0.289788131868) / 0.0622047066505 AS scaler_30, (CAST("ADS_imp_1_OUT".impter_31 AS FLOAT) - 0.0836414505495) / 0.0170651458069 AS scaler_31 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11, CAST("ADS_sca_2_OUT".scaler_12 AS FLOAT) AS scaler_12, CAST("ADS_sca_2_OUT".scaler_13 AS FLOAT) AS scaler_13, CAST("ADS_sca_2_OUT".scaler_14 AS FLOAT) AS scaler_14, CAST("ADS_sca_2_OUT".scaler_15 AS FLOAT) AS scaler_15, CAST("ADS_sca_2_OUT".scaler_16 AS FLOAT) AS scaler_16, CAST("ADS_sca_2_OUT".scaler_17 AS FLOAT) AS scaler_17, CAST("ADS_sca_2_OUT".scaler_18 AS FLOAT) AS scaler_18, CAST("ADS_sca_2_OUT".scaler_19 AS FLOAT) AS scaler_19, CAST("ADS_sca_2_OUT".scaler_20 AS FLOAT) AS scaler_20, CAST("ADS_sca_2_OUT".scaler_21 AS FLOAT) AS scaler_21, CAST("ADS_sca_2_OUT".scaler_22 AS FLOAT) AS scaler_22, CAST("ADS_sca_2_OUT".scaler_23 AS FLOAT) AS scaler_23, CAST("ADS_sca_2_OUT".scaler_24 AS FLOAT) AS scaler_24, CAST("ADS_sca_2_OUT".scaler_25 AS FLOAT) AS scaler_25, CAST("ADS_sca_2_OUT".scaler_26 AS FLOAT) AS scaler_26, CAST("ADS_sca_2_OUT".scaler_27 AS FLOAT) AS scaler_27, CAST("ADS_sca_2_OUT".scaler_28 AS FLOAT) AS scaler_28, CAST("ADS_sca_2_OUT".scaler_29 AS FLOAT) AS scaler_29, CAST("ADS_sca_2_OUT".scaler_30 AS FLOAT) AS scaler_30, CAST("ADS_sca_2_OUT".scaler_31 AS FLOAT) AS scaler_31 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.60355213877 * "IL".scaler_2 + 1.219275392 * "IL".scaler_3 + 0.364567812948 * "IL".scaler_4 + -0.0940336080468 * "IL".scaler_5 + -0.701913099473 * "IL".scaler_6 + 1.07220427239 * "IL".scaler_7 + -1.01886988046 * "IL".scaler_8 + -0.982551604493 * "IL".scaler_9 + -0.111651669777 * "IL".scaler_10 + -1.32146586816 * "IL".scaler_11 + -2.1600941516 * "IL".scaler_12 + -0.397148229263 * "IL".scaler_13 + -0.981194619754 * "IL".scaler_14 + -0.950872665194 * "IL".scaler_15 + 0.829142373846 * "IL".scaler_16 + 2.09434807739 * "IL".scaler_17 + 0.0708833045364 * "IL".scaler_18 + -0.446139637343 * "IL".scaler_19 + 0.935561916986 * "IL".scaler_20 + 1.05612684257 * "IL".scaler_21 + -0.840258598329 * "IL".scaler_22 + -0.0315063409904 * "IL".scaler_23 + 0.1020215463 * "IL".scaler_24 + -1.02967790799 * "IL".scaler_25 + -0.685200869005 * "IL".scaler_26 + 0.756965839916 * "IL".scaler_27 + -1.04007876614 * "IL".scaler_28 + -0.571841843319 * "IL".scaler_29 + -0.202265172111 * "IL".scaler_30 + 0.320175148462 * "IL".scaler_31 + 2.72658410543 AS "NEUR_1_1", 0.52403829373 * "IL".scaler_2 + -0.625642624416 * "IL".scaler_3 + 0.168866498203 * "IL".scaler_4 + 0.454050576189 * "IL".scaler_5 + 0.621982809603 * "IL".scaler_6 + 0.607489190126 * "IL".scaler_7 + -0.770894275627 * "IL".scaler_8 + -0.68025272514 * "IL".scaler_9 + -0.288679688523 * "IL".scaler_10 + -0.557248646861 * "IL".scaler_11 + -1.57747919561 * "IL".scaler_12 + -1.4521162821 * "IL".scaler_13 + -1.0565409599 * "IL".scaler_14 + -0.54763863843 * "IL".scaler_15 + 1.22647867379 * "IL".scaler_16 + 0.382851175226 * "IL".scaler_17 + -0.109398753397 * "IL".scaler_18 + -0.239294237322 * "IL".scaler_19 + 0.0629499910165 * "IL".scaler_20 + 0.734165666178 * "IL".scaler_21 + -0.577880515716 * "IL".scaler_22 + -1.90224391321 * "IL".scaler_23 + -0.337377556914 * "IL".scaler_24 + -0.272103951071 * "IL".scaler_25 + 0.525820290797 * "IL".scaler_26 + -0.33564064605 * "IL".scaler_27 + -1.23932543453 * "IL".scaler_28 + -0.233359652639 * "IL".scaler_29 + -0.814021934952 * "IL".scaler_30 + -0.932538023483 * "IL".scaler_31 + 1.03329201982 AS "NEUR_1_2", 1.35780641327 * "IL".scaler_2 + 0.376017584467 * "IL".scaler_3 + 1.11984487831 * "IL".scaler_4 + 1.04804383691 * "IL".scaler_5 + -0.0517420754372 * "IL".scaler_6 + -0.0405311248302 * "IL".scaler_7 + 1.87549668432 * "IL".scaler_8 + 1.85515797508 * "IL".scaler_9 + -0.0303206305388 * "IL".scaler_10 + -0.0443848265081 * "IL".scaler_11 + 1.12776525114 * "IL".scaler_12 + -1.29284361987 * "IL".scaler_13 + 0.765546499019 * "IL".scaler_14 + 1.03633172557 * "IL".scaler_15 + 0.0198178686494 * "IL".scaler_16 + -1.29689699341 * "IL".scaler_17 + -0.288549934692 * "IL".scaler_18 + 0.122534758265 * "IL".scaler_19 + 0.55803259036 * "IL".scaler_20 + -1.37265711395 * "IL".scaler_21 + 1.63255751916 * "IL".scaler_22 + 2.54359096701 * "IL".scaler_23 + 0.986531087462 * "IL".scaler_24 + 1.9078008502 * "IL".scaler_25 + 1.43051870965 * "IL".scaler_26 + -0.0549021826637 * "IL".scaler_27 + 2.07097369057 * "IL".scaler_28 + 1.78444564006 * "IL".scaler_29 + 1.04143843796 * "IL".scaler_30 + -0.564058838282 * "IL".scaler_31 + 0.200414314617 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.498537844472 * "HL_1_relu"."NEUR_1_1" + -0.575028258345 * "HL_1_relu"."NEUR_1_2" + -0.720158581193 * "HL_1_relu"."NEUR_1_3" + -0.0273818258512 AS "NEUR_2_1", -0.728808328434 * "HL_1_relu"."NEUR_1_1" + -0.878950621362 * "HL_1_relu"."NEUR_1_2" + 0.548399106914 * "HL_1_relu"."NEUR_1_3" + 0.616617850107 AS "NEUR_2_2", 1.12085845324 * "HL_1_relu"."NEUR_1_1" + 1.89893297536 * "HL_1_relu"."NEUR_1_2" + -1.58603950664 * "HL_1_relu"."NEUR_1_3" + -0.0643642211875 AS "NEUR_2_3", -0.528305269603 * "HL_1_relu"."NEUR_1_1" + -0.642728204238 * "HL_1_relu"."NEUR_1_2" + 2.50721924681 * "HL_1_relu"."NEUR_1_3" + 1.62134583563 AS "NEUR_2_4", -0.694750249062 * "HL_1_relu"."NEUR_1_1" + -0.269509098533 * "HL_1_relu"."NEUR_1_2" + -0.661681147907 * "HL_1_relu"."NEUR_1_3" + -0.815750113658 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.188347799525 * "HL_2_relu"."NEUR_2_1" + -0.752837543213 * "HL_2_relu"."NEUR_2_2" + 2.33626995115 * "HL_2_relu"."NEUR_2_3" + -2.65441175609 * "HL_2_relu"."NEUR_2_4" + 0.379344116031 * "HL_2_relu"."NEUR_2_5" + -0.266607242 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", 1.0 / (1.0 + exp(CASE WHEN (CASE WHEN (-"OL_BA"."NEUR_3_1" <= -100.0) THEN -100.0 ELSE -"OL_BA"."NEUR_3_1" END >= 100.0) THEN 100.0 ELSE CASE WHEN (-"OL_BA"."NEUR_3_1" <= -100.0) THEN -100.0 ELSE -"OL_BA"."NEUR_3_1" END END)) AS "NEUR_3_1" 
FROM "OL_BA"), 
orig_cte AS 
(SELECT "OL_logistic"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", 1.0 - "OL_logistic"."NEUR_3_1" AS "Proba_0", "OL_logistic"."NEUR_3_1" AS "Proba_1", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS INTEGER) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "OL_logistic"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", min(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE -BINARY_FLOAT_INFINITY END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte