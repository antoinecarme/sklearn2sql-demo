-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 3.36885653465 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 12.1138613861 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 10.9836138614 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.0717821782178 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.554115346535 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 6.29914851485 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 67.8504950495 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 3.81984207921 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 9.55940594059 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 405.801980198 ELSE "ADS"."Feature_9" END AS impter_11, CASE WHEN ("ADS"."Feature_10" IS NULL) THEN 18.4091584158 ELSE "ADS"."Feature_10" END AS impter_12, CASE WHEN ("ADS"."Feature_11" IS NULL) THEN 358.379727723 ELSE "ADS"."Feature_11" END AS impter_13, CASE WHEN ("ADS"."Feature_12" IS NULL) THEN 12.6265841584 ELSE "ADS"."Feature_12" END AS impter_14 
FROM boston AS "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 3.36885653465) / 7.99352680953 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 12.1138613861) / 24.187656535 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 10.9836138614) / 6.81774724774 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.0717821782178) / 0.258126901171 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.554115346535) / 0.118008097608 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 6.29914851485) / 0.7060417398 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 67.8504950495) / 28.1074031817 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 3.81984207921) / 2.09337269027 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 9.55940594059) / 8.72880378338 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 405.801980198) / 169.785859293 AS scaler_11, (CAST("ADS_imp_1_OUT".impter_12 AS FLOAT) - 18.4091584158) / 2.16679264833 AS scaler_12, (CAST("ADS_imp_1_OUT".impter_13 AS FLOAT) - 358.379727723) / 90.6469162434 AS scaler_13, (CAST("ADS_imp_1_OUT".impter_14 AS FLOAT) - 12.6265841584) / 7.16793832404 AS scaler_14 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11, CAST("ADS_sca_2_OUT".scaler_12 AS FLOAT) AS scaler_12, CAST("ADS_sca_2_OUT".scaler_13 AS FLOAT) AS scaler_13, CAST("ADS_sca_2_OUT".scaler_14 AS FLOAT) AS scaler_14 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -1.48566642953 * "IL".scaler_2 + -0.204105394681 * "IL".scaler_3 + 0.00759117564236 * "IL".scaler_4 + -0.331870441527 * "IL".scaler_5 + 0.356143875061 * "IL".scaler_6 + 0.979431864598 * "IL".scaler_7 + -0.500001630104 * "IL".scaler_8 + 0.210503893483 * "IL".scaler_9 + -1.56984304392 * "IL".scaler_10 + -0.287754232131 * "IL".scaler_11 + -0.247868022996 * "IL".scaler_12 + 0.253588089773 * "IL".scaler_13 + -0.0266748025904 * "IL".scaler_14 + 0.854653722995 AS "NEUR_1_1", -0.605652780678 * "IL".scaler_2 + 0.334446206045 * "IL".scaler_3 + 0.3641037406 * "IL".scaler_4 + -0.0743268196376 * "IL".scaler_5 + -0.686786196969 * "IL".scaler_6 + 0.863861247559 * "IL".scaler_7 + -0.170281340205 * "IL".scaler_8 + -1.00726937412 * "IL".scaler_9 + 2.89627377759 * "IL".scaler_10 + 0.110771976171 * "IL".scaler_11 + -0.136811472654 * "IL".scaler_12 + 0.313693326729 * "IL".scaler_13 + -2.23731804159 * "IL".scaler_14 + -0.822270705514 AS "NEUR_1_2", -0.115570140102 * "IL".scaler_2 + 0.145501704912 * "IL".scaler_3 + -0.359912985277 * "IL".scaler_4 + 0.979469466728 * "IL".scaler_5 + -2.07796912656 * "IL".scaler_6 + -0.782110655232 * "IL".scaler_7 + 0.914921259973 * "IL".scaler_8 + -3.11452954504 * "IL".scaler_9 + 0.588044385892 * "IL".scaler_10 + -0.163191995143 * "IL".scaler_11 + -0.908839496179 * "IL".scaler_12 + 0.0449622233484 * "IL".scaler_13 + -0.419359096955 * "IL".scaler_14 + -1.20946278468 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", 0.3781641411 * "HL_1_relu"."NEUR_1_1" + -1.00931985257 * "HL_1_relu"."NEUR_1_2" + -0.452090428594 * "HL_1_relu"."NEUR_1_3" + -0.650749990191 AS "NEUR_2_1", 2.3656509228 * "HL_1_relu"."NEUR_1_1" + 2.39868247347 * "HL_1_relu"."NEUR_1_2" + 1.22564428659 * "HL_1_relu"."NEUR_1_3" + 3.62965637922 AS "NEUR_2_2", -1.14327049909 * "HL_1_relu"."NEUR_1_1" + 0.863286786466 * "HL_1_relu"."NEUR_1_2" + -2.28715581571 * "HL_1_relu"."NEUR_1_3" + -0.549219907726 AS "NEUR_2_3", 0.829227308734 * "HL_1_relu"."NEUR_1_1" + 0.679246422772 * "HL_1_relu"."NEUR_1_2" + 0.46031125968 * "HL_1_relu"."NEUR_1_3" + -0.506948640871 AS "NEUR_2_4", -0.30755214768 * "HL_1_relu"."NEUR_1_1" + -1.15973664416 * "HL_1_relu"."NEUR_1_2" + -0.337910287385 * "HL_1_relu"."NEUR_1_3" + -0.875404439849 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", -0.978521703056 * "HL_2_relu"."NEUR_2_1" + 1.81912130387 * "HL_2_relu"."NEUR_2_2" + -2.86458651636 * "HL_2_relu"."NEUR_2_3" + -0.187238031241 * "HL_2_relu"."NEUR_2_4" + -0.275962482923 * "HL_2_relu"."NEUR_2_5" + 3.68595151987 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"