-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH "ADS_imp_1_OUT" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.562984648481 ELSE "ADS"."Feature_0" END AS impter_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.456064424234 ELSE "ADS"."Feature_1" END AS impter_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.471138174815 ELSE "ADS"."Feature_2" END AS impter_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.533968020095 ELSE "ADS"."Feature_3" END AS impter_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.478093626237 ELSE "ADS"."Feature_4" END AS impter_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.568284922417 ELSE "ADS"."Feature_5" END AS impter_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.479143747143 ELSE "ADS"."Feature_6" END AS impter_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.459415247722 ELSE "ADS"."Feature_7" END AS impter_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.490110699681 ELSE "ADS"."Feature_8" END AS impter_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.537880693371 ELSE "ADS"."Feature_9" END AS impter_11 
FROM freidman1 "ADS"), 
"ADS_sca_2_OUT" AS 
(SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".impter_2 AS FLOAT) - 0.562984648481) / 0.25837146834 AS scaler_2, (CAST("ADS_imp_1_OUT".impter_3 AS FLOAT) - 0.456064424234) / 0.287872173071 AS scaler_3, (CAST("ADS_imp_1_OUT".impter_4 AS FLOAT) - 0.471138174815) / 0.310921679155 AS scaler_4, (CAST("ADS_imp_1_OUT".impter_5 AS FLOAT) - 0.533968020095) / 0.28261998674 AS scaler_5, (CAST("ADS_imp_1_OUT".impter_6 AS FLOAT) - 0.478093626237) / 0.286140491318 AS scaler_6, (CAST("ADS_imp_1_OUT".impter_7 AS FLOAT) - 0.568284922417) / 0.297674081065 AS scaler_7, (CAST("ADS_imp_1_OUT".impter_8 AS FLOAT) - 0.479143747143) / 0.273531497143 AS scaler_8, (CAST("ADS_imp_1_OUT".impter_9 AS FLOAT) - 0.459415247722) / 0.28721149347 AS scaler_9, (CAST("ADS_imp_1_OUT".impter_10 AS FLOAT) - 0.490110699681) / 0.279048671732 AS scaler_10, (CAST("ADS_imp_1_OUT".impter_11 AS FLOAT) - 0.537880693371) / 0.295819229654 AS scaler_11 
FROM "ADS_imp_1_OUT"), 
"IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_2 AS FLOAT) AS scaler_2, CAST("ADS_sca_2_OUT".scaler_3 AS FLOAT) AS scaler_3, CAST("ADS_sca_2_OUT".scaler_4 AS FLOAT) AS scaler_4, CAST("ADS_sca_2_OUT".scaler_5 AS FLOAT) AS scaler_5, CAST("ADS_sca_2_OUT".scaler_6 AS FLOAT) AS scaler_6, CAST("ADS_sca_2_OUT".scaler_7 AS FLOAT) AS scaler_7, CAST("ADS_sca_2_OUT".scaler_8 AS FLOAT) AS scaler_8, CAST("ADS_sca_2_OUT".scaler_9 AS FLOAT) AS scaler_9, CAST("ADS_sca_2_OUT".scaler_10 AS FLOAT) AS scaler_10, CAST("ADS_sca_2_OUT".scaler_11 AS FLOAT) AS scaler_11 
FROM "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.5672417757 * "IL".scaler_2 + 0.505779678963 * "IL".scaler_3 + -0.849867916464 * "IL".scaler_4 + -0.346287071916 * "IL".scaler_5 + 0.731999960393 * "IL".scaler_6 + 0.978724530263 * "IL".scaler_7 + -0.742740310139 * "IL".scaler_8 + 0.666016156361 * "IL".scaler_9 + 0.194425066134 * "IL".scaler_10 + -0.12890055432 * "IL".scaler_11 + 0.345305748475 AS "NEUR_1_1", 0.40191997062 * "IL".scaler_2 + 0.320788691657 * "IL".scaler_3 + -0.502877599279 * "IL".scaler_4 + -0.299331315281 * "IL".scaler_5 + 0.872677621669 * "IL".scaler_6 + -0.346376933989 * "IL".scaler_7 + -0.595826705717 * "IL".scaler_8 + -0.683856113569 * "IL".scaler_9 + 0.67717463983 * "IL".scaler_10 + 0.218873565904 * "IL".scaler_11 + -1.19530717561 AS "NEUR_1_2", 0.268625462529 * "IL".scaler_2 + 0.583012407709 * "IL".scaler_3 + 0.33884578435 * "IL".scaler_4 + 0.805903675493 * "IL".scaler_5 + 0.105901491472 * "IL".scaler_6 + -0.259558665209 * "IL".scaler_7 + 0.150335624801 * "IL".scaler_8 + 0.00680892451646 * "IL".scaler_9 + -0.107482289789 * "IL".scaler_10 + -0.153462819999 * "IL".scaler_11 + 1.54447279112 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", CASE WHEN ("HL_BA_1"."NEUR_1_1" >= 0.0) THEN "HL_BA_1"."NEUR_1_1" ELSE 0.0 END AS "NEUR_1_1", CASE WHEN ("HL_BA_1"."NEUR_1_2" >= 0.0) THEN "HL_BA_1"."NEUR_1_2" ELSE 0.0 END AS "NEUR_1_2", CASE WHEN ("HL_BA_1"."NEUR_1_3" >= 0.0) THEN "HL_BA_1"."NEUR_1_3" ELSE 0.0 END AS "NEUR_1_3" 
FROM "HL_BA_1"), 
"HL_BA_2" AS 
(SELECT "HL_1_relu"."KEY" AS "KEY", -0.759500339544 * "HL_1_relu"."NEUR_1_1" + 0.528025674331 * "HL_1_relu"."NEUR_1_2" + 0.0539539084163 * "HL_1_relu"."NEUR_1_3" + -0.22766348947 AS "NEUR_2_1", -0.758603633844 * "HL_1_relu"."NEUR_1_1" + -0.32193110959 * "HL_1_relu"."NEUR_1_2" + -0.887424755524 * "HL_1_relu"."NEUR_1_3" + -1.47526992315 AS "NEUR_2_2", 0.775239958882 * "HL_1_relu"."NEUR_1_1" + 1.53363401421 * "HL_1_relu"."NEUR_1_2" + 1.99940129318 * "HL_1_relu"."NEUR_1_3" + 0.830362556528 AS "NEUR_2_3", 0.111089492527 * "HL_1_relu"."NEUR_1_1" + -0.504738730331 * "HL_1_relu"."NEUR_1_2" + -0.406628519622 * "HL_1_relu"."NEUR_1_3" + -0.796433042434 AS "NEUR_2_4", -0.638103709568 * "HL_1_relu"."NEUR_1_1" + 0.31075163177 * "HL_1_relu"."NEUR_1_2" + -0.660792834218 * "HL_1_relu"."NEUR_1_3" + -0.613817802069 AS "NEUR_2_5" 
FROM "HL_1_relu"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", CASE WHEN ("HL_BA_2"."NEUR_2_1" >= 0.0) THEN "HL_BA_2"."NEUR_2_1" ELSE 0.0 END AS "NEUR_2_1", CASE WHEN ("HL_BA_2"."NEUR_2_2" >= 0.0) THEN "HL_BA_2"."NEUR_2_2" ELSE 0.0 END AS "NEUR_2_2", CASE WHEN ("HL_BA_2"."NEUR_2_3" >= 0.0) THEN "HL_BA_2"."NEUR_2_3" ELSE 0.0 END AS "NEUR_2_3", CASE WHEN ("HL_BA_2"."NEUR_2_4" >= 0.0) THEN "HL_BA_2"."NEUR_2_4" ELSE 0.0 END AS "NEUR_2_4", CASE WHEN ("HL_BA_2"."NEUR_2_5" >= 0.0) THEN "HL_BA_2"."NEUR_2_5" ELSE 0.0 END AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.215369647917 * "HL_2_relu"."NEUR_2_1" + 0.259622540935 * "HL_2_relu"."NEUR_2_2" + 2.02745317869 * "HL_2_relu"."NEUR_2_3" + 0.70083642122 * "HL_2_relu"."NEUR_2_4" + -0.216020546382 * "HL_2_relu"."NEUR_2_5" + 5.18478617274 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "Estimator" 
FROM "OL_identity"