-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2017

WITH [ADS_imp_1_OUT] AS 
(SELECT [ADS].[KEY] AS [KEY], CASE WHEN ([ADS].[Feature_0] IS NULL) THEN -0.00390337446303 ELSE [ADS].[Feature_0] END AS impter_2, CASE WHEN ([ADS].[Feature_1] IS NULL) THEN 0.61522322157 ELSE [ADS].[Feature_1] END AS impter_3, CASE WHEN ([ADS].[Feature_2] IS NULL) THEN 0.0427962369143 ELSE [ADS].[Feature_2] END AS impter_4, CASE WHEN ([ADS].[Feature_3] IS NULL) THEN 0.77098195589 ELSE [ADS].[Feature_3] END AS impter_5, CASE WHEN ([ADS].[Feature_4] IS NULL) THEN -0.433007336249 ELSE [ADS].[Feature_4] END AS impter_6, CASE WHEN ([ADS].[Feature_5] IS NULL) THEN -0.0424956965794 ELSE [ADS].[Feature_5] END AS impter_7, CASE WHEN ([ADS].[Feature_6] IS NULL) THEN -0.298090801198 ELSE [ADS].[Feature_6] END AS impter_8, CASE WHEN ([ADS].[Feature_7] IS NULL) THEN 0.146722415073 ELSE [ADS].[Feature_7] END AS impter_9, CASE WHEN ([ADS].[Feature_8] IS NULL) THEN 0.0174694238466 ELSE [ADS].[Feature_8] END AS impter_10, CASE WHEN ([ADS].[Feature_9] IS NULL) THEN 0.115073314156 ELSE [ADS].[Feature_9] END AS impter_11 
FROM [FourClass_10] AS [ADS]), 
[ADS_sca_2_OUT] AS 
(SELECT [ADS_imp_1_OUT].[KEY] AS [KEY], (CAST([ADS_imp_1_OUT].impter_2 AS FLOAT) - -0.00390337446303) / 0.979506064018 AS scaler_2, (CAST([ADS_imp_1_OUT].impter_3 AS FLOAT) - 0.61522322157) / 1.39008072362 AS scaler_3, (CAST([ADS_imp_1_OUT].impter_4 AS FLOAT) - 0.0427962369143) / 1.49626851359 AS scaler_4, (CAST([ADS_imp_1_OUT].impter_5 AS FLOAT) - 0.77098195589) / 2.33335610601 AS scaler_5, (CAST([ADS_imp_1_OUT].impter_6 AS FLOAT) - -0.433007336249) / 1.40297577726 AS scaler_6, (CAST([ADS_imp_1_OUT].impter_7 AS FLOAT) - -0.0424956965794) / 0.955809107687 AS scaler_7, (CAST([ADS_imp_1_OUT].impter_8 AS FLOAT) - -0.298090801198) / 1.01701318072 AS scaler_8, (CAST([ADS_imp_1_OUT].impter_9 AS FLOAT) - 0.146722415073) / 1.60079853993 AS scaler_9, (CAST([ADS_imp_1_OUT].impter_10 AS FLOAT) - 0.0174694238466) / 1.14872963617 AS scaler_10, (CAST([ADS_imp_1_OUT].impter_11 AS FLOAT) - 0.115073314156) / 0.969091185734 AS scaler_11 
FROM [ADS_imp_1_OUT]), 
linear_model_cte AS 
(SELECT [ADS_sca_2_OUT].[KEY] AS [KEY], 0.10292344892622607 * [ADS_sca_2_OUT].scaler_2 + -0.16128879814907518 * [ADS_sca_2_OUT].scaler_3 + -0.016595188655310848 * [ADS_sca_2_OUT].scaler_4 + -0.08197797950089047 * [ADS_sca_2_OUT].scaler_5 + 0.2794985031895576 * [ADS_sca_2_OUT].scaler_6 + -0.09441389938820662 * [ADS_sca_2_OUT].scaler_7 + 0.06640902290102761 * [ADS_sca_2_OUT].scaler_8 + 0.1464737146923038 * [ADS_sca_2_OUT].scaler_9 + 0.13322022377978143 * [ADS_sca_2_OUT].scaler_10 + 0.021794692001736293 * [ADS_sca_2_OUT].scaler_11 + -0.55 AS [Score_0], -0.016253991411340468 * [ADS_sca_2_OUT].scaler_2 + 0.025836013334245983 * [ADS_sca_2_OUT].scaler_3 + 0.16765035649042398 * [ADS_sca_2_OUT].scaler_4 + 0.13530522456149877 * [ADS_sca_2_OUT].scaler_5 + 0.13036121444754706 * [ADS_sca_2_OUT].scaler_6 + -0.02955502745314405 * [ADS_sca_2_OUT].scaler_7 + -0.1327660683159943 * [ADS_sca_2_OUT].scaler_8 + 0.11183960221027377 * [ADS_sca_2_OUT].scaler_9 + -0.08783745128360582 * [ADS_sca_2_OUT].scaler_10 + 0.03008145245996441 * [ADS_sca_2_OUT].scaler_11 + -0.5 AS [Score_1], -0.055034959342427525 * [ADS_sca_2_OUT].scaler_2 + -0.24628236565598852 * [ADS_sca_2_OUT].scaler_3 + -0.24675054936025034 * [ADS_sca_2_OUT].scaler_4 + -0.14553957987129795 * [ADS_sca_2_OUT].scaler_5 + -0.2897178460869261 * [ADS_sca_2_OUT].scaler_6 + 6.457878012107637e-05 * [ADS_sca_2_OUT].scaler_7 + 0.0628100091998104 * [ADS_sca_2_OUT].scaler_8 + 0.20525968769047165 * [ADS_sca_2_OUT].scaler_9 + 0.12455162823735587 * [ADS_sca_2_OUT].scaler_10 + 0.022640261593938928 * [ADS_sca_2_OUT].scaler_11 + -0.5 AS [Score_2], -0.03163449817245797 * [ADS_sca_2_OUT].scaler_2 + 0.38173515047082146 * [ADS_sca_2_OUT].scaler_3 + 0.09569538152514169 * [ADS_sca_2_OUT].scaler_4 + 0.09221233481068326 * [ADS_sca_2_OUT].scaler_5 + -0.12014187155017984 * [ADS_sca_2_OUT].scaler_6 + 0.12390434806122959 * [ADS_sca_2_OUT].scaler_7 + 0.003547036215157446 * [ADS_sca_2_OUT].scaler_8 + -0.4635730045930462 * [ADS_sca_2_OUT].scaler_9 + -0.16993440073353147 * [ADS_sca_2_OUT].scaler_10 + -0.07451640605563964 * [ADS_sca_2_OUT].scaler_11 + -0.45 AS [Score_3] 
FROM [ADS_sca_2_OUT]), 
orig_cte AS 
(SELECT linear_model_cte.[KEY] AS [KEY], linear_model_cte.[Score_0] AS [Score_0], linear_model_cte.[Score_1] AS [Score_1], linear_model_cte.[Score_2] AS [Score_2], linear_model_cte.[Score_3] AS [Score_3], CAST(NULL AS FLOAT) AS [Proba_0], CAST(NULL AS FLOAT) AS [Proba_1], CAST(NULL AS FLOAT) AS [Proba_2], CAST(NULL AS FLOAT) AS [Proba_3], CAST(NULL AS FLOAT) AS [LogProba_0], CAST(NULL AS FLOAT) AS [LogProba_1], CAST(NULL AS FLOAT) AS [LogProba_2], CAST(NULL AS FLOAT) AS [LogProba_3], CAST(NULL AS INTEGER) AS [Decision], CAST(NULL AS FLOAT) AS [DecisionProba] 
FROM linear_model_cte), 
score_class_union AS 
(SELECT scu.[KEY_u] AS [KEY_u], scu.class AS class, scu.[LogProba] AS [LogProba], scu.[Proba] AS [Proba], scu.[Score] AS [Score] 
FROM (SELECT orig_cte.[KEY] AS [KEY_u], 0 AS class, orig_cte.[LogProba_0] AS [LogProba], orig_cte.[Proba_0] AS [Proba], orig_cte.[Score_0] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 1 AS class, orig_cte.[LogProba_1] AS [LogProba], orig_cte.[Proba_1] AS [Proba], orig_cte.[Score_1] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 2 AS class, orig_cte.[LogProba_2] AS [LogProba], orig_cte.[Proba_2] AS [Proba], orig_cte.[Score_2] AS [Score] 
FROM orig_cte UNION ALL SELECT orig_cte.[KEY] AS [KEY_u], 3 AS class, orig_cte.[LogProba_3] AS [LogProba], orig_cte.[Proba_3] AS [Proba], orig_cte.[Score_3] AS [Score] 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte.[KEY] AS [KEY], orig_cte.[Score_0] AS [Score_0], orig_cte.[Score_1] AS [Score_1], orig_cte.[Score_2] AS [Score_2], orig_cte.[Score_3] AS [Score_3], orig_cte.[Proba_0] AS [Proba_0], orig_cte.[Proba_1] AS [Proba_1], orig_cte.[Proba_2] AS [Proba_2], orig_cte.[Proba_3] AS [Proba_3], orig_cte.[LogProba_0] AS [LogProba_0], orig_cte.[LogProba_1] AS [LogProba_1], orig_cte.[LogProba_2] AS [LogProba_2], orig_cte.[LogProba_3] AS [LogProba_3], orig_cte.[Decision] AS [Decision], orig_cte.[DecisionProba] AS [DecisionProba], max_select.[KEY_m] AS [KEY_m], max_select.[max_Score] AS [max_Score] 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union.[KEY_u] AS [KEY_m], max(score_class_union.[Score]) AS [max_Score] 
FROM score_class_union GROUP BY score_class_union.[KEY_u]) AS max_select ON orig_cte.[KEY] = max_select.[KEY_m]), 
union_with_max AS 
(SELECT score_class_union.[KEY_u] AS [KEY_u], score_class_union.class AS class, score_class_union.[LogProba] AS [LogProba], score_class_union.[Proba] AS [Proba], score_class_union.[Score] AS [Score], score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score] 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union.[KEY_u] = score_max.[KEY]), 
arg_max_cte AS 
(SELECT score_max.[KEY] AS [KEY], score_max.[Score_0] AS [Score_0], score_max.[Score_1] AS [Score_1], score_max.[Score_2] AS [Score_2], score_max.[Score_3] AS [Score_3], score_max.[Proba_0] AS [Proba_0], score_max.[Proba_1] AS [Proba_1], score_max.[Proba_2] AS [Proba_2], score_max.[Proba_3] AS [Proba_3], score_max.[LogProba_0] AS [LogProba_0], score_max.[LogProba_1] AS [LogProba_1], score_max.[LogProba_2] AS [LogProba_2], score_max.[LogProba_3] AS [LogProba_3], score_max.[Decision] AS [Decision], score_max.[DecisionProba] AS [DecisionProba], score_max.[KEY_m] AS [KEY_m], score_max.[max_Score] AS [max_Score], [arg_max_t_Score].[KEY_Score] AS [KEY_Score], [arg_max_t_Score].[arg_max_Score] AS [arg_max_Score] 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max.[KEY] AS [KEY_Score], min(union_with_max.class) AS [arg_max_Score] 
FROM union_with_max 
WHERE union_with_max.[max_Score] <= union_with_max.[Score] GROUP BY union_with_max.[KEY]) AS [arg_max_t_Score] ON score_max.[KEY] = [arg_max_t_Score].[KEY_Score])
 SELECT arg_max_cte.[KEY] AS [KEY], arg_max_cte.[Score_0] AS [Score_0], arg_max_cte.[Score_1] AS [Score_1], arg_max_cte.[Score_2] AS [Score_2], arg_max_cte.[Score_3] AS [Score_3], arg_max_cte.[Proba_0] AS [Proba_0], arg_max_cte.[Proba_1] AS [Proba_1], arg_max_cte.[Proba_2] AS [Proba_2], arg_max_cte.[Proba_3] AS [Proba_3], CASE WHEN (arg_max_cte.[Proba_0] IS NULL OR arg_max_cte.[Proba_0] > 0.0) THEN log(arg_max_cte.[Proba_0]) ELSE -1.79769313486231e+308 END AS [LogProba_0], CASE WHEN (arg_max_cte.[Proba_1] IS NULL OR arg_max_cte.[Proba_1] > 0.0) THEN log(arg_max_cte.[Proba_1]) ELSE -1.79769313486231e+308 END AS [LogProba_1], CASE WHEN (arg_max_cte.[Proba_2] IS NULL OR arg_max_cte.[Proba_2] > 0.0) THEN log(arg_max_cte.[Proba_2]) ELSE -1.79769313486231e+308 END AS [LogProba_2], CASE WHEN (arg_max_cte.[Proba_3] IS NULL OR arg_max_cte.[Proba_3] > 0.0) THEN log(arg_max_cte.[Proba_3]) ELSE -1.79769313486231e+308 END AS [LogProba_3], arg_max_cte.[arg_max_Score] AS [Decision], CASE WHEN (arg_max_cte.[arg_max_Score] = 0) THEN arg_max_cte.[Proba_0] WHEN (arg_max_cte.[arg_max_Score] = 1) THEN arg_max_cte.[Proba_1] WHEN (arg_max_cte.[arg_max_Score] = 2) THEN arg_max_cte.[Proba_2] WHEN (arg_max_cte.[arg_max_Score] = 3) THEN arg_max_cte.[Proba_3] END AS [DecisionProba] 
FROM arg_max_cte